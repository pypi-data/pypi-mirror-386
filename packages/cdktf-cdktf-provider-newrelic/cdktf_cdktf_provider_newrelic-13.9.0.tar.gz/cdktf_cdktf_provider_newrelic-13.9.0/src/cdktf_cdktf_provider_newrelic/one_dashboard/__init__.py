r'''
# `newrelic_one_dashboard`

Refer to the Terraform Registry for docs: [`newrelic_one_dashboard`](https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard).
'''
from pkgutil import extend_path
__path__ = extend_path(__path__, __name__)

import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

import typeguard
from importlib.metadata import version as _metadata_package_version
TYPEGUARD_MAJOR_VERSION = int(_metadata_package_version('typeguard').split('.')[0])

def check_type(argname: str, value: object, expected_type: typing.Any) -> typing.Any:
    if TYPEGUARD_MAJOR_VERSION <= 2:
        return typeguard.check_type(argname=argname, value=value, expected_type=expected_type) # type:ignore
    else:
        if isinstance(value, jsii._reference_map.InterfaceDynamicProxy): # pyright: ignore [reportAttributeAccessIssue]
           pass
        else:
            if TYPEGUARD_MAJOR_VERSION == 3:
                typeguard.config.collection_check_strategy = typeguard.CollectionCheckStrategy.ALL_ITEMS # type:ignore
                typeguard.check_type(value=value, expected_type=expected_type) # type:ignore
            else:
                typeguard.check_type(value=value, expected_type=expected_type, collection_check_strategy=typeguard.CollectionCheckStrategy.ALL_ITEMS) # type:ignore

from .._jsii import *

import cdktf as _cdktf_9a9027ec
import constructs as _constructs_77d1e7e8


class OneDashboard(
    _cdktf_9a9027ec.TerraformResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboard",
):
    '''Represents a {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard newrelic_one_dashboard}.'''

    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id_: builtins.str,
        *,
        name: builtins.str,
        page: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPage", typing.Dict[builtins.str, typing.Any]]]],
        account_id: typing.Optional[jsii.Number] = None,
        description: typing.Optional[builtins.str] = None,
        id: typing.Optional[builtins.str] = None,
        permissions: typing.Optional[builtins.str] = None,
        variable: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardVariable", typing.Dict[builtins.str, typing.Any]]]]] = None,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''Create a new {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard newrelic_one_dashboard} Resource.

        :param scope: The scope in which to define this construct.
        :param id_: The scoped construct ID. Must be unique amongst siblings in the same scope
        :param name: The dashboard's name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param page: page block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#page OneDashboard#page}
        :param account_id: The New Relic account ID where you want to create the dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        :param description: The dashboard's description. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#description OneDashboard#description}
        :param id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#id OneDashboard#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param permissions: Determines who can see or edit the dashboard. Valid values are private, public_read_only, public_read_write. Defaults to public_read_only. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#permissions OneDashboard#permissions}
        :param variable: variable block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#variable OneDashboard#variable}
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__feca567106b8718efc93d950aad2c0578a8de5ce54cbfc6f44ca17c804c2626f)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id_", value=id_, expected_type=type_hints["id_"])
        config = OneDashboardConfig(
            name=name,
            page=page,
            account_id=account_id,
            description=description,
            id=id,
            permissions=permissions,
            variable=variable,
            connection=connection,
            count=count,
            depends_on=depends_on,
            for_each=for_each,
            lifecycle=lifecycle,
            provider=provider,
            provisioners=provisioners,
        )

        jsii.create(self.__class__, self, [scope, id_, config])

    @jsii.member(jsii_name="generateConfigForImport")
    @builtins.classmethod
    def generate_config_for_import(
        cls,
        scope: _constructs_77d1e7e8.Construct,
        import_to_id: builtins.str,
        import_from_id: builtins.str,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    ) -> _cdktf_9a9027ec.ImportableResource:
        '''Generates CDKTF code for importing a OneDashboard resource upon running "cdktf plan ".

        :param scope: The scope in which to define this construct.
        :param import_to_id: The construct id used in the generated config for the OneDashboard to import.
        :param import_from_id: The id of the existing OneDashboard that should be imported. Refer to the {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#import import section} in the documentation of this resource for the id to use
        :param provider: ? Optional instance of the provider where the OneDashboard to import is found.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37ba6755c3af60eb2a2647a143fa1809705fd7052f03611ca222569410282153)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument import_to_id", value=import_to_id, expected_type=type_hints["import_to_id"])
            check_type(argname="argument import_from_id", value=import_from_id, expected_type=type_hints["import_from_id"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
        return typing.cast(_cdktf_9a9027ec.ImportableResource, jsii.sinvoke(cls, "generateConfigForImport", [scope, import_to_id, import_from_id, provider]))

    @jsii.member(jsii_name="putPage")
    def put_page(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPage", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80c4803501bb8b54897eae197c2cb79eae7f3709d0d16634d00d600dc23b0f9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putPage", [value]))

    @jsii.member(jsii_name="putVariable")
    def put_variable(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardVariable", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9de57c9e41664179a6133c15816d5cc1f1ca4ee5f82ea1597c3225a775e42ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putVariable", [value]))

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @jsii.member(jsii_name="resetDescription")
    def reset_description(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDescription", []))

    @jsii.member(jsii_name="resetId")
    def reset_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetId", []))

    @jsii.member(jsii_name="resetPermissions")
    def reset_permissions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPermissions", []))

    @jsii.member(jsii_name="resetVariable")
    def reset_variable(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVariable", []))

    @jsii.member(jsii_name="synthesizeAttributes")
    def _synthesize_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeAttributes", []))

    @jsii.member(jsii_name="synthesizeHclAttributes")
    def _synthesize_hcl_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeHclAttributes", []))

    @jsii.python.classproperty
    @jsii.member(jsii_name="tfResourceType")
    def TF_RESOURCE_TYPE(cls) -> builtins.str:
        return typing.cast(builtins.str, jsii.sget(cls, "tfResourceType"))

    @builtins.property
    @jsii.member(jsii_name="guid")
    def guid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "guid"))

    @builtins.property
    @jsii.member(jsii_name="page")
    def page(self) -> "OneDashboardPageList":
        return typing.cast("OneDashboardPageList", jsii.get(self, "page"))

    @builtins.property
    @jsii.member(jsii_name="permalink")
    def permalink(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "permalink"))

    @builtins.property
    @jsii.member(jsii_name="variable")
    def variable(self) -> "OneDashboardVariableList":
        return typing.cast("OneDashboardVariableList", jsii.get(self, "variable"))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="descriptionInput")
    def description_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "descriptionInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="pageInput")
    def page_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPage"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPage"]]], jsii.get(self, "pageInput"))

    @builtins.property
    @jsii.member(jsii_name="permissionsInput")
    def permissions_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "permissionsInput"))

    @builtins.property
    @jsii.member(jsii_name="variableInput")
    def variable_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardVariable"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardVariable"]]], jsii.get(self, "variableInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1e89aeae913cc56708e3bbbe9107e552e4e5a954bdfd7067b870e5dbcb02b5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="description")
    def description(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "description"))

    @description.setter
    def description(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__42ec2164b43e91f5ad208b6db064916847ef31a81a329fb92d562206cc3cddfd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "description", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f751be9c0fc528c2067b3d388841a0c0497c913308ec8296501ff22d1254445e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e256d2cd840af74023616f1df3551e739f981c27ffae0dffe75e35e283538fcb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="permissions")
    def permissions(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "permissions"))

    @permissions.setter
    def permissions(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c2c9555d9ec06b00b525f23399b17b061b23636caf36387a29a9908f2f48904)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "permissions", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardConfig",
    jsii_struct_bases=[_cdktf_9a9027ec.TerraformMetaArguments],
    name_mapping={
        "connection": "connection",
        "count": "count",
        "depends_on": "dependsOn",
        "for_each": "forEach",
        "lifecycle": "lifecycle",
        "provider": "provider",
        "provisioners": "provisioners",
        "name": "name",
        "page": "page",
        "account_id": "accountId",
        "description": "description",
        "id": "id",
        "permissions": "permissions",
        "variable": "variable",
    },
)
class OneDashboardConfig(_cdktf_9a9027ec.TerraformMetaArguments):
    def __init__(
        self,
        *,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: builtins.str,
        page: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPage", typing.Dict[builtins.str, typing.Any]]]],
        account_id: typing.Optional[jsii.Number] = None,
        description: typing.Optional[builtins.str] = None,
        id: typing.Optional[builtins.str] = None,
        permissions: typing.Optional[builtins.str] = None,
        variable: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardVariable", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        :param name: The dashboard's name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param page: page block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#page OneDashboard#page}
        :param account_id: The New Relic account ID where you want to create the dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        :param description: The dashboard's description. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#description OneDashboard#description}
        :param id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#id OneDashboard#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param permissions: Determines who can see or edit the dashboard. Valid values are private, public_read_only, public_read_write. Defaults to public_read_only. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#permissions OneDashboard#permissions}
        :param variable: variable block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#variable OneDashboard#variable}
        '''
        if isinstance(lifecycle, dict):
            lifecycle = _cdktf_9a9027ec.TerraformResourceLifecycle(**lifecycle)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dcf246025deeda1e6a2d2f0ee4748ee6ac41552f5535bd2c9fec6b73660b58ff)
            check_type(argname="argument connection", value=connection, expected_type=type_hints["connection"])
            check_type(argname="argument count", value=count, expected_type=type_hints["count"])
            check_type(argname="argument depends_on", value=depends_on, expected_type=type_hints["depends_on"])
            check_type(argname="argument for_each", value=for_each, expected_type=type_hints["for_each"])
            check_type(argname="argument lifecycle", value=lifecycle, expected_type=type_hints["lifecycle"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
            check_type(argname="argument provisioners", value=provisioners, expected_type=type_hints["provisioners"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument page", value=page, expected_type=type_hints["page"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
            check_type(argname="argument description", value=description, expected_type=type_hints["description"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument permissions", value=permissions, expected_type=type_hints["permissions"])
            check_type(argname="argument variable", value=variable, expected_type=type_hints["variable"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "page": page,
        }
        if connection is not None:
            self._values["connection"] = connection
        if count is not None:
            self._values["count"] = count
        if depends_on is not None:
            self._values["depends_on"] = depends_on
        if for_each is not None:
            self._values["for_each"] = for_each
        if lifecycle is not None:
            self._values["lifecycle"] = lifecycle
        if provider is not None:
            self._values["provider"] = provider
        if provisioners is not None:
            self._values["provisioners"] = provisioners
        if account_id is not None:
            self._values["account_id"] = account_id
        if description is not None:
            self._values["description"] = description
        if id is not None:
            self._values["id"] = id
        if permissions is not None:
            self._values["permissions"] = permissions
        if variable is not None:
            self._values["variable"] = variable

    @builtins.property
    def connection(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("connection")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]], result)

    @builtins.property
    def count(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("count")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]], result)

    @builtins.property
    def depends_on(
        self,
    ) -> typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("depends_on")
        return typing.cast(typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]], result)

    @builtins.property
    def for_each(self) -> typing.Optional[_cdktf_9a9027ec.ITerraformIterator]:
        '''
        :stability: experimental
        '''
        result = self._values.get("for_each")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.ITerraformIterator], result)

    @builtins.property
    def lifecycle(self) -> typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle]:
        '''
        :stability: experimental
        '''
        result = self._values.get("lifecycle")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle], result)

    @builtins.property
    def provider(self) -> typing.Optional[_cdktf_9a9027ec.TerraformProvider]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provider")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformProvider], result)

    @builtins.property
    def provisioners(
        self,
    ) -> typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provisioners")
        return typing.cast(typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]], result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The dashboard's name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def page(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPage"]]:
        '''page block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#page OneDashboard#page}
        '''
        result = self._values.get("page")
        assert result is not None, "Required property 'page' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPage"]], result)

    @builtins.property
    def account_id(self) -> typing.Optional[jsii.Number]:
        '''The New Relic account ID where you want to create the dashboard.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def description(self) -> typing.Optional[builtins.str]:
        '''The dashboard's description.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#description OneDashboard#description}
        '''
        result = self._values.get("description")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#id OneDashboard#id}.

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def permissions(self) -> typing.Optional[builtins.str]:
        '''Determines who can see or edit the dashboard. Valid values are private, public_read_only, public_read_write. Defaults to public_read_only.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#permissions OneDashboard#permissions}
        '''
        result = self._values.get("permissions")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def variable(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardVariable"]]]:
        '''variable block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#variable OneDashboard#variable}
        '''
        result = self._values.get("variable")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardVariable"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPage",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "description": "description",
        "widget_area": "widgetArea",
        "widget_bar": "widgetBar",
        "widget_billboard": "widgetBillboard",
        "widget_bullet": "widgetBullet",
        "widget_funnel": "widgetFunnel",
        "widget_heatmap": "widgetHeatmap",
        "widget_histogram": "widgetHistogram",
        "widget_json": "widgetJson",
        "widget_line": "widgetLine",
        "widget_log_table": "widgetLogTable",
        "widget_markdown": "widgetMarkdown",
        "widget_pie": "widgetPie",
        "widget_stacked_bar": "widgetStackedBar",
        "widget_table": "widgetTable",
    },
)
class OneDashboardPage:
    def __init__(
        self,
        *,
        name: builtins.str,
        description: typing.Optional[builtins.str] = None,
        widget_area: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetArea", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_bar: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_billboard: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboard", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_bullet: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBullet", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_funnel: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnel", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_heatmap: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmap", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_histogram: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogram", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_json: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJson", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_line: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLine", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_log_table: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTable", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_markdown: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdown", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_pie: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPie", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_stacked_bar: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBar", typing.Dict[builtins.str, typing.Any]]]]] = None,
        widget_table: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTable", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param name: The dashboard page's name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param description: The dashboard page's description. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#description OneDashboard#description}
        :param widget_area: widget_area block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_area OneDashboard#widget_area}
        :param widget_bar: widget_bar block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_bar OneDashboard#widget_bar}
        :param widget_billboard: widget_billboard block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_billboard OneDashboard#widget_billboard}
        :param widget_bullet: widget_bullet block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_bullet OneDashboard#widget_bullet}
        :param widget_funnel: widget_funnel block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_funnel OneDashboard#widget_funnel}
        :param widget_heatmap: widget_heatmap block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_heatmap OneDashboard#widget_heatmap}
        :param widget_histogram: widget_histogram block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_histogram OneDashboard#widget_histogram}
        :param widget_json: widget_json block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_json OneDashboard#widget_json}
        :param widget_line: widget_line block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_line OneDashboard#widget_line}
        :param widget_log_table: widget_log_table block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_log_table OneDashboard#widget_log_table}
        :param widget_markdown: widget_markdown block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_markdown OneDashboard#widget_markdown}
        :param widget_pie: widget_pie block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_pie OneDashboard#widget_pie}
        :param widget_stacked_bar: widget_stacked_bar block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_stacked_bar OneDashboard#widget_stacked_bar}
        :param widget_table: widget_table block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_table OneDashboard#widget_table}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ad90e159424eaeeb508b02cde06a6c3bdd8561b00435df1ce2dd2ebbbbb7fe6)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument description", value=description, expected_type=type_hints["description"])
            check_type(argname="argument widget_area", value=widget_area, expected_type=type_hints["widget_area"])
            check_type(argname="argument widget_bar", value=widget_bar, expected_type=type_hints["widget_bar"])
            check_type(argname="argument widget_billboard", value=widget_billboard, expected_type=type_hints["widget_billboard"])
            check_type(argname="argument widget_bullet", value=widget_bullet, expected_type=type_hints["widget_bullet"])
            check_type(argname="argument widget_funnel", value=widget_funnel, expected_type=type_hints["widget_funnel"])
            check_type(argname="argument widget_heatmap", value=widget_heatmap, expected_type=type_hints["widget_heatmap"])
            check_type(argname="argument widget_histogram", value=widget_histogram, expected_type=type_hints["widget_histogram"])
            check_type(argname="argument widget_json", value=widget_json, expected_type=type_hints["widget_json"])
            check_type(argname="argument widget_line", value=widget_line, expected_type=type_hints["widget_line"])
            check_type(argname="argument widget_log_table", value=widget_log_table, expected_type=type_hints["widget_log_table"])
            check_type(argname="argument widget_markdown", value=widget_markdown, expected_type=type_hints["widget_markdown"])
            check_type(argname="argument widget_pie", value=widget_pie, expected_type=type_hints["widget_pie"])
            check_type(argname="argument widget_stacked_bar", value=widget_stacked_bar, expected_type=type_hints["widget_stacked_bar"])
            check_type(argname="argument widget_table", value=widget_table, expected_type=type_hints["widget_table"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
        }
        if description is not None:
            self._values["description"] = description
        if widget_area is not None:
            self._values["widget_area"] = widget_area
        if widget_bar is not None:
            self._values["widget_bar"] = widget_bar
        if widget_billboard is not None:
            self._values["widget_billboard"] = widget_billboard
        if widget_bullet is not None:
            self._values["widget_bullet"] = widget_bullet
        if widget_funnel is not None:
            self._values["widget_funnel"] = widget_funnel
        if widget_heatmap is not None:
            self._values["widget_heatmap"] = widget_heatmap
        if widget_histogram is not None:
            self._values["widget_histogram"] = widget_histogram
        if widget_json is not None:
            self._values["widget_json"] = widget_json
        if widget_line is not None:
            self._values["widget_line"] = widget_line
        if widget_log_table is not None:
            self._values["widget_log_table"] = widget_log_table
        if widget_markdown is not None:
            self._values["widget_markdown"] = widget_markdown
        if widget_pie is not None:
            self._values["widget_pie"] = widget_pie
        if widget_stacked_bar is not None:
            self._values["widget_stacked_bar"] = widget_stacked_bar
        if widget_table is not None:
            self._values["widget_table"] = widget_table

    @builtins.property
    def name(self) -> builtins.str:
        '''The dashboard page's name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def description(self) -> typing.Optional[builtins.str]:
        '''The dashboard page's description.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#description OneDashboard#description}
        '''
        result = self._values.get("description")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def widget_area(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetArea"]]]:
        '''widget_area block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_area OneDashboard#widget_area}
        '''
        result = self._values.get("widget_area")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetArea"]]], result)

    @builtins.property
    def widget_bar(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBar"]]]:
        '''widget_bar block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_bar OneDashboard#widget_bar}
        '''
        result = self._values.get("widget_bar")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBar"]]], result)

    @builtins.property
    def widget_billboard(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboard"]]]:
        '''widget_billboard block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_billboard OneDashboard#widget_billboard}
        '''
        result = self._values.get("widget_billboard")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboard"]]], result)

    @builtins.property
    def widget_bullet(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBullet"]]]:
        '''widget_bullet block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_bullet OneDashboard#widget_bullet}
        '''
        result = self._values.get("widget_bullet")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBullet"]]], result)

    @builtins.property
    def widget_funnel(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnel"]]]:
        '''widget_funnel block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_funnel OneDashboard#widget_funnel}
        '''
        result = self._values.get("widget_funnel")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnel"]]], result)

    @builtins.property
    def widget_heatmap(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmap"]]]:
        '''widget_heatmap block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_heatmap OneDashboard#widget_heatmap}
        '''
        result = self._values.get("widget_heatmap")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmap"]]], result)

    @builtins.property
    def widget_histogram(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogram"]]]:
        '''widget_histogram block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_histogram OneDashboard#widget_histogram}
        '''
        result = self._values.get("widget_histogram")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogram"]]], result)

    @builtins.property
    def widget_json(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJson"]]]:
        '''widget_json block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_json OneDashboard#widget_json}
        '''
        result = self._values.get("widget_json")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJson"]]], result)

    @builtins.property
    def widget_line(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLine"]]]:
        '''widget_line block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_line OneDashboard#widget_line}
        '''
        result = self._values.get("widget_line")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLine"]]], result)

    @builtins.property
    def widget_log_table(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTable"]]]:
        '''widget_log_table block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_log_table OneDashboard#widget_log_table}
        '''
        result = self._values.get("widget_log_table")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTable"]]], result)

    @builtins.property
    def widget_markdown(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdown"]]]:
        '''widget_markdown block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_markdown OneDashboard#widget_markdown}
        '''
        result = self._values.get("widget_markdown")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdown"]]], result)

    @builtins.property
    def widget_pie(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPie"]]]:
        '''widget_pie block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_pie OneDashboard#widget_pie}
        '''
        result = self._values.get("widget_pie")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPie"]]], result)

    @builtins.property
    def widget_stacked_bar(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBar"]]]:
        '''widget_stacked_bar block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_stacked_bar OneDashboard#widget_stacked_bar}
        '''
        result = self._values.get("widget_stacked_bar")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBar"]]], result)

    @builtins.property
    def widget_table(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTable"]]]:
        '''widget_table block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#widget_table OneDashboard#widget_table}
        '''
        result = self._values.get("widget_table")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTable"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPage(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2cff5a67842ce39ee793086a8751ca33e6db073a384983147ac8b5a82a2bf90d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19fafd33a889731bf38d89935767917448bd94db445264feccf9799526b6392c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5c4cccd632b3d63b2e46a24a280f42abecf0e2775433501028069f320b8a914)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b557b195645bb7553b9deb9d116599cc8b20fd5bc19022186504ee6c236d9618)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__030b8a998f62bcb54c79ced0a98aa03b55acef12de0acd1f89d97ca232147bd1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPage]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPage]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPage]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82ff19f4a9b0e1cc4c0efe0ae026a121e88538f2ef4eeb5c8a4c6d620ee034b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__812cda7b001a2fdcb6c1a9e9fa043d9092d77ff2c7b9a1583a90d7969348651c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putWidgetArea")
    def put_widget_area(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetArea", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3fc40807903017bb98d2bc10303e803173880f844245748c8ccc2f53de964066)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetArea", [value]))

    @jsii.member(jsii_name="putWidgetBar")
    def put_widget_bar(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBar", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70dccb11444f8b75235a86f241a576d426cb76ae4b4f99d8dbbd9b31f6d12f4c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetBar", [value]))

    @jsii.member(jsii_name="putWidgetBillboard")
    def put_widget_billboard(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboard", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f56c048406405ead03777bf8e7c4211d75e6f41c76ee8d8694d2e96c3ca4277)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetBillboard", [value]))

    @jsii.member(jsii_name="putWidgetBullet")
    def put_widget_bullet(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBullet", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__777087add7016c4857de95b7f8a53b06aaf674685e0b9f527e90971a4ce52472)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetBullet", [value]))

    @jsii.member(jsii_name="putWidgetFunnel")
    def put_widget_funnel(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnel", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4a865e47824c262809ae0c6eb30214c28fc1a9d4c3dcd4691d3ac5ece4d3423)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetFunnel", [value]))

    @jsii.member(jsii_name="putWidgetHeatmap")
    def put_widget_heatmap(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmap", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c57fd9012eb439ed8fe92047b0ee43fae8b291d7438f4322813dfceba9d9d5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetHeatmap", [value]))

    @jsii.member(jsii_name="putWidgetHistogram")
    def put_widget_histogram(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogram", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b448a939ecb5fe12b3d9d0a3a51f49ab77b9f9ce03c391ce898f826bcdc2937)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetHistogram", [value]))

    @jsii.member(jsii_name="putWidgetJson")
    def put_widget_json(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJson", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41e70f96de5d02450424dda738f11db90e35af6eb3cf1954f739695aba0117a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetJson", [value]))

    @jsii.member(jsii_name="putWidgetLine")
    def put_widget_line(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLine", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eefd6046dab76fe13e484e4ed3aeee6ae36ece945ef8bd2a7de2a25c6f8ea2ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetLine", [value]))

    @jsii.member(jsii_name="putWidgetLogTable")
    def put_widget_log_table(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTable", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71ccafb0891025b1e4de88c4a7d4d036065d9b7e843d5ab8cad1cc39678827dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetLogTable", [value]))

    @jsii.member(jsii_name="putWidgetMarkdown")
    def put_widget_markdown(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdown", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a85d2e66a6af0d94b94ad2734a4cf09366ea58a431906830f37e9e9851cca8a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetMarkdown", [value]))

    @jsii.member(jsii_name="putWidgetPie")
    def put_widget_pie(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPie", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__396a554edb1a0ebf81e3c63cd05b160d67ad05f82b56df5907f28aacdc200b6a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetPie", [value]))

    @jsii.member(jsii_name="putWidgetStackedBar")
    def put_widget_stacked_bar(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBar", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6a66da789f19569d92b64b12b233faf45fd0ec90996eb25237a582345d8157b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetStackedBar", [value]))

    @jsii.member(jsii_name="putWidgetTable")
    def put_widget_table(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTable", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6795d358808e2ddd9c69ec6409d7210f9d0967310cca777453726303510bd3b2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putWidgetTable", [value]))

    @jsii.member(jsii_name="resetDescription")
    def reset_description(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDescription", []))

    @jsii.member(jsii_name="resetWidgetArea")
    def reset_widget_area(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetArea", []))

    @jsii.member(jsii_name="resetWidgetBar")
    def reset_widget_bar(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetBar", []))

    @jsii.member(jsii_name="resetWidgetBillboard")
    def reset_widget_billboard(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetBillboard", []))

    @jsii.member(jsii_name="resetWidgetBullet")
    def reset_widget_bullet(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetBullet", []))

    @jsii.member(jsii_name="resetWidgetFunnel")
    def reset_widget_funnel(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetFunnel", []))

    @jsii.member(jsii_name="resetWidgetHeatmap")
    def reset_widget_heatmap(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetHeatmap", []))

    @jsii.member(jsii_name="resetWidgetHistogram")
    def reset_widget_histogram(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetHistogram", []))

    @jsii.member(jsii_name="resetWidgetJson")
    def reset_widget_json(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetJson", []))

    @jsii.member(jsii_name="resetWidgetLine")
    def reset_widget_line(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetLine", []))

    @jsii.member(jsii_name="resetWidgetLogTable")
    def reset_widget_log_table(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetLogTable", []))

    @jsii.member(jsii_name="resetWidgetMarkdown")
    def reset_widget_markdown(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetMarkdown", []))

    @jsii.member(jsii_name="resetWidgetPie")
    def reset_widget_pie(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetPie", []))

    @jsii.member(jsii_name="resetWidgetStackedBar")
    def reset_widget_stacked_bar(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetStackedBar", []))

    @jsii.member(jsii_name="resetWidgetTable")
    def reset_widget_table(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidgetTable", []))

    @builtins.property
    @jsii.member(jsii_name="guid")
    def guid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "guid"))

    @builtins.property
    @jsii.member(jsii_name="widgetArea")
    def widget_area(self) -> "OneDashboardPageWidgetAreaList":
        return typing.cast("OneDashboardPageWidgetAreaList", jsii.get(self, "widgetArea"))

    @builtins.property
    @jsii.member(jsii_name="widgetBar")
    def widget_bar(self) -> "OneDashboardPageWidgetBarList":
        return typing.cast("OneDashboardPageWidgetBarList", jsii.get(self, "widgetBar"))

    @builtins.property
    @jsii.member(jsii_name="widgetBillboard")
    def widget_billboard(self) -> "OneDashboardPageWidgetBillboardList":
        return typing.cast("OneDashboardPageWidgetBillboardList", jsii.get(self, "widgetBillboard"))

    @builtins.property
    @jsii.member(jsii_name="widgetBullet")
    def widget_bullet(self) -> "OneDashboardPageWidgetBulletList":
        return typing.cast("OneDashboardPageWidgetBulletList", jsii.get(self, "widgetBullet"))

    @builtins.property
    @jsii.member(jsii_name="widgetFunnel")
    def widget_funnel(self) -> "OneDashboardPageWidgetFunnelList":
        return typing.cast("OneDashboardPageWidgetFunnelList", jsii.get(self, "widgetFunnel"))

    @builtins.property
    @jsii.member(jsii_name="widgetHeatmap")
    def widget_heatmap(self) -> "OneDashboardPageWidgetHeatmapList":
        return typing.cast("OneDashboardPageWidgetHeatmapList", jsii.get(self, "widgetHeatmap"))

    @builtins.property
    @jsii.member(jsii_name="widgetHistogram")
    def widget_histogram(self) -> "OneDashboardPageWidgetHistogramList":
        return typing.cast("OneDashboardPageWidgetHistogramList", jsii.get(self, "widgetHistogram"))

    @builtins.property
    @jsii.member(jsii_name="widgetJson")
    def widget_json(self) -> "OneDashboardPageWidgetJsonList":
        return typing.cast("OneDashboardPageWidgetJsonList", jsii.get(self, "widgetJson"))

    @builtins.property
    @jsii.member(jsii_name="widgetLine")
    def widget_line(self) -> "OneDashboardPageWidgetLineList":
        return typing.cast("OneDashboardPageWidgetLineList", jsii.get(self, "widgetLine"))

    @builtins.property
    @jsii.member(jsii_name="widgetLogTable")
    def widget_log_table(self) -> "OneDashboardPageWidgetLogTableList":
        return typing.cast("OneDashboardPageWidgetLogTableList", jsii.get(self, "widgetLogTable"))

    @builtins.property
    @jsii.member(jsii_name="widgetMarkdown")
    def widget_markdown(self) -> "OneDashboardPageWidgetMarkdownList":
        return typing.cast("OneDashboardPageWidgetMarkdownList", jsii.get(self, "widgetMarkdown"))

    @builtins.property
    @jsii.member(jsii_name="widgetPie")
    def widget_pie(self) -> "OneDashboardPageWidgetPieList":
        return typing.cast("OneDashboardPageWidgetPieList", jsii.get(self, "widgetPie"))

    @builtins.property
    @jsii.member(jsii_name="widgetStackedBar")
    def widget_stacked_bar(self) -> "OneDashboardPageWidgetStackedBarList":
        return typing.cast("OneDashboardPageWidgetStackedBarList", jsii.get(self, "widgetStackedBar"))

    @builtins.property
    @jsii.member(jsii_name="widgetTable")
    def widget_table(self) -> "OneDashboardPageWidgetTableList":
        return typing.cast("OneDashboardPageWidgetTableList", jsii.get(self, "widgetTable"))

    @builtins.property
    @jsii.member(jsii_name="descriptionInput")
    def description_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "descriptionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetAreaInput")
    def widget_area_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetArea"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetArea"]]], jsii.get(self, "widgetAreaInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetBarInput")
    def widget_bar_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBar"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBar"]]], jsii.get(self, "widgetBarInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetBillboardInput")
    def widget_billboard_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboard"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboard"]]], jsii.get(self, "widgetBillboardInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetBulletInput")
    def widget_bullet_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBullet"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBullet"]]], jsii.get(self, "widgetBulletInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetFunnelInput")
    def widget_funnel_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnel"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnel"]]], jsii.get(self, "widgetFunnelInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetHeatmapInput")
    def widget_heatmap_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmap"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmap"]]], jsii.get(self, "widgetHeatmapInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetHistogramInput")
    def widget_histogram_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogram"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogram"]]], jsii.get(self, "widgetHistogramInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetJsonInput")
    def widget_json_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJson"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJson"]]], jsii.get(self, "widgetJsonInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetLineInput")
    def widget_line_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLine"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLine"]]], jsii.get(self, "widgetLineInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetLogTableInput")
    def widget_log_table_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTable"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTable"]]], jsii.get(self, "widgetLogTableInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetMarkdownInput")
    def widget_markdown_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdown"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdown"]]], jsii.get(self, "widgetMarkdownInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetPieInput")
    def widget_pie_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPie"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPie"]]], jsii.get(self, "widgetPieInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetStackedBarInput")
    def widget_stacked_bar_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBar"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBar"]]], jsii.get(self, "widgetStackedBarInput"))

    @builtins.property
    @jsii.member(jsii_name="widgetTableInput")
    def widget_table_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTable"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTable"]]], jsii.get(self, "widgetTableInput"))

    @builtins.property
    @jsii.member(jsii_name="description")
    def description(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "description"))

    @description.setter
    def description(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8b1deec46dac39726858185173d5ccb5acdc12a0988922bae82e579f334d4b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "description", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7d0d6310069491de3c098640fd45c8b59928e2a1c55b8ba4ea371fc8cbfe14b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPage]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPage]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPage]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38905a63f7ca2cf0fa26532e7489db78097b0ac33dd4a9c9c1e9d9e26788f7a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetArea",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "tooltip": "tooltip",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetArea:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetAreaInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        tooltip: typing.Optional[typing.Union["OneDashboardPageWidgetAreaTooltip", typing.Dict[builtins.str, typing.Any]]] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param tooltip: tooltip block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#tooltip OneDashboard#tooltip}
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetAreaInitialSorting(**initial_sorting)
        if isinstance(tooltip, dict):
            tooltip = OneDashboardPageWidgetAreaTooltip(**tooltip)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17f54147f0484c97291ee89b7cc0b4a467986eff65c7bfade83cb0e27f7d5448)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument tooltip", value=tooltip, expected_type=type_hints["tooltip"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if tooltip is not None:
            self._values["tooltip"] = tooltip
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetAreaInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetAreaInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def tooltip(self) -> typing.Optional["OneDashboardPageWidgetAreaTooltip"]:
        '''tooltip block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#tooltip OneDashboard#tooltip}
        '''
        result = self._values.get("tooltip")
        return typing.cast(typing.Optional["OneDashboardPageWidgetAreaTooltip"], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetArea(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetAreaColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bcde2bbbd6c60f70ed165b29178a70e473261f24d48e814c2b6248986f812456)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84682846a3d5c1abb2199b6a68950cc82a9a258a0938251c4009ea161bc63068)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetAreaColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a3ee75c6d2118dbf34fede05d4b23a2337dc54a258ca18b9172debcf78419bd)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetAreaColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09166cd7bbc8d08fba73751c174bbd5bdb1f6e5ea8029ed57558dc762a64f21d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0c5f6fc6e7b35b682cc401c8440475204a735e250b3fc59968b67165c526f7d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0af3e9b9cc14bf12472e9c50ef5f375414c25cdf0dd5e6c37eeb99927bd7b22f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96b1f40cde20910f926cbcf7272a7188cf290050409ed9e220bfd13984fed6bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5b0479040430358e2deb34da3681849ec10b54e23ace165629865a59321baf2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62be1fa8e8bff7be2e0911113c3d578283e2557bc4e6140bd5d8fcdf00ae8cda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetAreaColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetAreaColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8926893261a5f753059ac2a000eeed7aeb8fe6d90e983b29108288738cb764c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ea19b0c0af50ed33b1c5bfc2bb4729fce6eb09c875ecac9f8262724815173ed4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetAreaColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a40643434653583074b319196bb4b1e4762ee21ed4b9abd16c321810ad652af)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6871913b6b4e6cc4b7e91c15b9bd7cb6240d824ee6c0d6301a07c05b5be08cbd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetAreaColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e10f009c516c9923b64e1fbbd55988f462da006dd8226331c23c00cd184d92d)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetAreaColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5448a9b065b5e71b14271fb04c2bdc5be964e6e5e12650736208c2cff1a8807b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c39f58230132d56bc286078bbc1a6dabea088e30cbe99b8185e7e8960e704a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb0c1174d22dd9eb48385d1313ff2f3965eeec6cc7d27070aab57420ba281152)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54debdac23363643c2bf5828bc3cb6ffca8e372c8aae56ee578a6215044876d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7a1c0e4ef2cb9e0f570a23dd8795187f5ed6d29ff50d91dc002f53d59addbb8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e40cedb023726e9d04e450feff1d9da404d40c5a4c50e41457da64d139058781)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5778bedd368940ac8a015c1d33f13af42e2df9ccdba967bdedfcaf85c404ca03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b28db203ae7deb6cfa880d6838912131e1ac95f8f64454da61cb504cb2a8d972)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetAreaDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e86ce9edb6a4e0038bbe056d1e6620ad65fe3a71e35b05e9b0f92bb617d04caf)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f0f04f184725cf990814dfdbbbbdec9516a1b988f74d20556bbb8f27ccc788fb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetAreaDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98072a6186507bdc66addf302031972b3600e28af7dc0486abd0e6ff8c31df56)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetAreaDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db82af0bc1d68d48345e90daebbe29b3f82186f9a4114406572de02808576e72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e30610e6f14b7defdbd6980ebb70126c40b03416f693a7f6910478c8b24b2a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__251e490ff31cce8d68e458b865155131c4e1b77327a35ee34bd556d399bf2616)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e82361dc0cf16c6e0344237868afcd7b45b4fe525e9e9d30613c6cf969e9ba96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6551dff1d870e94ff0bf31fc8e9951077592fa5a304aa07d2f11365fa375071)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7cbafb37d923423cb04a7cd401ff50bed015b3b0db5982474a2d9f748443b5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__948f3bbec3caedd90186b7e9b361589b5e81dcd718968cfc9ba0da37db516f74)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c08672bf641541c147555395e1c1b75f81bc2e370725c71331ba48346c3536f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__080cfa720ea15b7ce6ab5f1e637a07693ed9e6dbbbd2c23b23b5dd2d36ecda26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4945a18889fcc303e0d8353424948ab15e39e94f0572ced8ec7681c8839e267d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetAreaInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fcf6e35a1c677038f2c1c73e004aa85694243559c8dd3168fa8d454486a53e76)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5dcdf869711253dcc627da3cae2297b091c12571381ec2fb172a08624095cd8d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31983f1619abb2dc2178773288b716e60126f75cfbd27d184c4be854d650c6df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__796de82edf67367ede4953d4724c3dce40206fe0c8580ff5079f7155ee05b23e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetAreaInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetAreaInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetAreaInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55be10db349963671c73ac6f8249537f2e242411384a3824ea38031d42816ff3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61f57e7a42531872c8b50b58a8f3e4189fdd3bd7ad6b21ed8510103762887d67)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageWidgetAreaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e7e2557492f7e3c22f77282de0fa5fd7a12f3871ea35624a4342fb721aeb629)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetAreaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__219eea473fe7d0372257d6a8c5a06a26b15cf07893a39fab8931e50b5e5da411)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67da9de2ee0461ac9ddcf4923789cc45ca186593aa40d32c157372736a39464c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca2b2110e3751cfa4de2e7db8b5387a82c61e8a91154c25bd074342ba1a21e8e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetArea]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetArea]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetArea]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d5f82482d2338f77c052b3f96b9daf2a93e44fa5c13b82d53ed00d0f91145ab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetAreaNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__957a77ef06d2b06a5ed740f10df5fea7f9c08a538f37ef5435446df7ab99fd05)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3700326127ab76a4fe666e375c5b74b367f238b0602323ad988c09e5bc72a686)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetAreaNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df4933d6a83022b05b4717e18e4297dcbf055c8b10671423fe4ae50885922de5)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetAreaNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c649c70a8ff909456d0de8eccdfc70d69bd3fa230c58100925c5215405f5927c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69ef6e7e29772966882d3cc62e8e856abcd16e4e7769ba232a39a026a6554f05)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72df003ff9d45093cbdba688a207d093dd4774cedecbaa105eee9f35eaf2f4bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c4a2ad5ed1541c1c0fa96d4df410c60218cefa1eabe123d4c6b7af674f77031)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__198506a28cc10e1cb203a914fd29564d95f805e118bb241ceac9b6e80110de73)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6e62be1affe33864dea41eed3b0c10dbdc3f65ca438c7c50bb012cbf5240f66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0b19eaeb18507cd5eeedce89ef86fdaea7a0cb83533da28562c02f11735f7e3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9f6f1ac5d3ec75b2597b6a506f1866c22939fe9ea0f599e9eb2ebdac7c793dc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetAreaNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__15ab7a3327e3ea4bb35348c811fdccf4fe12310fbf78dee835979df76cea801b)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3509dabd2d5d413278ed210ad61992e331cf2fd4d89b21cd1ab80c1b37bbf55)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetAreaNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__159eb188f1064db50b625aaa59b75e0a5613229904cdeb8d15aa2092750f5a13)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetAreaNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b993c8ab051a40ecd2d58e2b2d568815e066a36eacb99054abd57acbb3daa1dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d920ef89d4b87fcc79179c3d880e2de682b931bf0d305e19fca2e6b324df3861)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0a169225dcc0e18dc24b1f07175a68e4a4643d6df813da7c61346da576e8885)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3ece645b44486f015aeb94018f4421039577d116a12d2621111993c59bc3c260)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3901b1c1eb8d3f92a8906ea66301bdb018af532cd0d7af7c9bf51304bd6ba4b7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__510000cd23e02bcd76816b3913ad8c74305daa99769f9633f57a01bc7dcf4ca1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetAreaNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetAreaNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__faba77f6e8f94b8b99c610313ecf7a3f0e21345e79162a02f351b1909213d959)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be36ed8d7047cf036d2fef4ee2700d0d212c778505b2aff4c35eb88b2a679624)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetAreaNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e4f71e7e387dfb72b27a97f1b243b1717f6f60960dac09bc318c8f3ed42618e)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41f22e913a184ec03ff31b357c1766a5200d1de660c3fc570db78c3580d90449)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetAreaNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__daaa41ecfa36b211734cb683fbdd40fd4c280c0e5ed71e17b55f4f6ba13eb8e4)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetAreaNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cec08f8e9c9796ed5c45d5267ff1f2ad4b1de41357c247fb5268e5e149b11353)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa2cf615da3f6417d2d30045a82896afbb44efd562c7de6007d13f0fe9fe2b47)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2355b96057384a087f09241124cc84c3fc41f2e24694322ad4f17abbcabc3c96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30257e180ba53cf65b038f7146f91a2383ef7aac022841528abd12a586761dd0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc2af344adf6972f303015201e2cf3012f333bba5c5ce91197cdf48020a488b9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__73cdd809212da11531554a3c2c3e11cd88d357fbbc058e05479e2d9e705e83d8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c5dda17daf98cf19078c1c4a64e409d4bd4726aac3dfa7359b58ebdd8caa3b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b3794a43667c53eb881126656126b3c3e8cf3ab2c6cd0d081170c7d86008999)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e34f6d2f11ebffd5380995e337bd9918482bed3f521c0fadee03c5d200694cdd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3dcfd7ef896a2fff642328f8b12d32b84f2f5329da49c211803c761b10e74b26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d819981fe054d605b6792dd4f371fb7be33cb5c39ec31790784564193fcd173)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetAreaInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1beb89b4a4773fa3959de85504057e34fe8666bd03e7a623e7cc731ed6a3e2c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70984b5fc92ec3758483faef750c791d3e11814c0ce39e33d316ee74c793b5c7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putTooltip")
    def put_tooltip(self, *, mode: builtins.str) -> None:
        '''
        :param mode: Tooltip display mode. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#mode OneDashboard#mode}
        '''
        value = OneDashboardPageWidgetAreaTooltip(mode=mode)

        return typing.cast(None, jsii.invoke(self, "putTooltip", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0855b7f051a019cbc25c3a96535df73d18d7235775b4f5431e7efded8da35ccd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetTooltip")
    def reset_tooltip(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTooltip", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetAreaColorsList:
        return typing.cast(OneDashboardPageWidgetAreaColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetAreaDataFormatList:
        return typing.cast(OneDashboardPageWidgetAreaDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetAreaInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetAreaInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetAreaNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetAreaNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetAreaNullValuesList:
        return typing.cast(OneDashboardPageWidgetAreaNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="tooltip")
    def tooltip(self) -> "OneDashboardPageWidgetAreaTooltipOutputReference":
        return typing.cast("OneDashboardPageWidgetAreaTooltipOutputReference", jsii.get(self, "tooltip"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetAreaUnitsList":
        return typing.cast("OneDashboardPageWidgetAreaUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetAreaInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetAreaInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="tooltipInput")
    def tooltip_input(self) -> typing.Optional["OneDashboardPageWidgetAreaTooltip"]:
        return typing.cast(typing.Optional["OneDashboardPageWidgetAreaTooltip"], jsii.get(self, "tooltipInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9ec47174de1df60d0e6656643a49fba7d15182277351b06eb5b5474227a63e5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11623933e89d3aa070717713de9eef6a539eea949035414c9ef7e1abec9cf3bd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b925daa15a3c52ca42453cc7401e423c2ae2a37beb7861f8b523f6d4e4ba4489)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8dc0c44dbbddbaed7648c0c968649dfcf51b1335ba3bd372805405455eeea437)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__195942ab8a6f08e989eb3442e0136e64b40bb55bbe666e0394bbfabc61e44120)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ba954af68e09d72c6725ce28b0f60b1242f4f80c187fa82fe0788bbe6f0fe57)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a2526ff077a49d64dc0133bf9674ac9716540cdd52c84fe0666507f0cc44f61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2785e9b50ef3975fd112f7847c6b01777127437d126e98bd5a927e93e1004c99)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2923b233cd6d7378eb5fd31112c2cb1acd6a5917505f9289d22c82e27b2be82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e6d7baaca2adac0ea8ab999f01eab1ffb408ba0b8d62b498e838baadc88210c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fceb4102761dbe324b7402fab5026b04d23a309868d432340a45dcab4adf8688)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetArea]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetArea]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetArea]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24e8fed6d42099125f481658f092a85657f5a5c1d133caaace195eb11e918897)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaTooltip",
    jsii_struct_bases=[],
    name_mapping={"mode": "mode"},
)
class OneDashboardPageWidgetAreaTooltip:
    def __init__(self, *, mode: builtins.str) -> None:
        '''
        :param mode: Tooltip display mode. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#mode OneDashboard#mode}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2374021dc435945953c1e4e676ee002eb0041d6e48fad8543f59aeb91dbbea6e)
            check_type(argname="argument mode", value=mode, expected_type=type_hints["mode"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "mode": mode,
        }

    @builtins.property
    def mode(self) -> builtins.str:
        '''Tooltip display mode.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#mode OneDashboard#mode}
        '''
        result = self._values.get("mode")
        assert result is not None, "Required property 'mode' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaTooltip(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaTooltipOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaTooltipOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30a3905c8231abb71b82b0531a6cc6af788caec4e71272f666c00be3f4d14b99)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="modeInput")
    def mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "modeInput"))

    @builtins.property
    @jsii.member(jsii_name="mode")
    def mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "mode"))

    @mode.setter
    def mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd19a0f88170edf64aa2ec9477bfff1e0942a6bd96a992de52fdcce85bd8be86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[OneDashboardPageWidgetAreaTooltip]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetAreaTooltip], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetAreaTooltip],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52b6fd117e34fbac03dcbe371461a34c15faeb798c017706b10a9c094abf5e46)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetAreaUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d86dffcfa8d9f42238ff2b604bbf94364bf7c8f140e684b6c6c77759efd9f16)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__acdf87d3b9d0d9092a8546d3454f49d780bdbf0f7b245f22288ac4e3590dbde6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetAreaUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6d5d01d6839cfdd83e9769eed8d1d8f559a4b5ce3eb2a1b4011762dca4695c8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetAreaUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__214405cb64fb0c9e3f5419b8536c872e88d1478085a840688bed00b7626ded6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7999142dda4ba33f87883cfcbc0ca2a9bb5ffe00f17407e1f6a9556d83fc61a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a97a16f147e010d889dcc0f5a869d7d8c20deed7b4711071a013673d7130fa62)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b1771ec7c68c4d2d43d6a94da3b3c5312e40719c0a0e6de308390503b9225bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aef80025fa31bd3260d06a8d39788b38c35ee5feca732b08920402f696bbb89a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetAreaUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__302382a0426dd3defab99f60a87958cf16a6783b37f83198af2aeb6342c2b893)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetAreaUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetAreaUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetAreaUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3f0db21015a121610a6421825bf63750c464e9164c28bf861ca478aa980e4ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6baf348adccc312e92b63f3a30c06e4acb71b0c3463c6a555047bb5ffb98463)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetAreaUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__47ac549b38f315b81980d80569a9aa8648c9f2cbfdd9c0652d23dad5b1d7c786)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetAreaUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetAreaUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e41eb6b6c94190788cda052013f2391f35476685c3e1ec316f86c766f6fd298)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetAreaUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7aec69ae3087a095f0214b0ccc6171cc36763ed8abaceab529238cd1e04c140)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetAreaUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0dd0bfc29c8631fab508dcaf74899e41a2654a4d46d1ccfb616a2dce6ccf0869)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__445e0abfe46467479dcc7b57b384382d241557962a944e6e2b1c2d2772e3ddc9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__daebd12157e877786bb69dbcbafa534ad4ec2cfa2d578805cb387e33d3d933e0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9d87f981d07b460290590111e52371a959d7bd09affca6e6790878688b1ff26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetAreaUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetAreaUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5ef67cb5698be421f647c53555255458585c695691fdaa61419f8932d323736)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e9def95b965f7022a3b28e24aee910ac15b0dfc432172bfc5216e5e783ae22d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d66bfb3ff6143ca64311e5631f52c89920a293408d20e28082603c6ac1eb06e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b515be05bb4a04e45a1e5858e6e690d425fe567b4a33a77432648e700f491986)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBar",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "filter_current_dashboard": "filterCurrentDashboard",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "linked_entity_guids": "linkedEntityGuids",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetBar:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        filter_current_dashboard: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetBarInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        linked_entity_guids: typing.Optional[typing.Sequence[builtins.str]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param filter_current_dashboard: Use this item to filter the current dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#filter_current_dashboard OneDashboard#filter_current_dashboard}
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param linked_entity_guids: Related entities. Currently only supports Dashboard entities, but may allow other cases in the future. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#linked_entity_guids OneDashboard#linked_entity_guids}
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetBarInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb7fd8f09732c40f5c70b0c3f4f6ccdd6538746442266f32a806a4c3c807c797)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument filter_current_dashboard", value=filter_current_dashboard, expected_type=type_hints["filter_current_dashboard"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument linked_entity_guids", value=linked_entity_guids, expected_type=type_hints["linked_entity_guids"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if filter_current_dashboard is not None:
            self._values["filter_current_dashboard"] = filter_current_dashboard
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if linked_entity_guids is not None:
            self._values["linked_entity_guids"] = linked_entity_guids
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def filter_current_dashboard(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Use this item to filter the current dashboard.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#filter_current_dashboard OneDashboard#filter_current_dashboard}
        '''
        result = self._values.get("filter_current_dashboard")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetBarInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetBarInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def linked_entity_guids(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Related entities. Currently only supports Dashboard entities, but may allow other cases in the future.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#linked_entity_guids OneDashboard#linked_entity_guids}
        '''
        result = self._values.get("linked_entity_guids")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetBarColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__64ac8537d731a60f182d1ecc3b1634067f44a0dce9e97ce01f5bd84044e599ea)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBarColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBarColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7387315a16b37def3546e1fbe684ce1651b864d96ff6ebccb0cd1541f44d4ed)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBarColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a3acd85cbf40979eda36a5445dc62b7d4d44de3e733123809afd811d39fb50e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBarColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__703aa4c2d25eafbdd90eae188f88fc62876eb4732c6a9936882550f623197364)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__993b8a478c6dc167fb2a6c9564284c36ed05b351bb129cf375a9ef141b68639c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6065a164765546bc9b10fc9299245662f90e765dc8ebfeb4c6146fce4cf491e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83f9221285570f81d21bf54c8d1a547a961b570c521d57503a9874c248ab32b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3a11b19e4a55d71035d63e183d88b33c31fc40efe9924dfd05b931d2ae6ff93)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71a42590f7f38b2f9e2e8f9c67b5e812000bb3333e183a2cd028b48267effde2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetBarColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetBarColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93e67c25bc055023b5141191e2bb212b54fa4db24472da2007a0232404249132)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__607a9dac6af534f4597d4432260457eeb34db64fc131f08ad9c4c850059f49ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetBarColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f94cb1a288ab14c6cd50f60ca7dbfc58bbdc11ff2b244d66e8658c512d9b7533)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBarColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBarColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__acc4b9f308ae00da17271466940168c88c033c80c75b8d47a483e8d100923bde)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBarColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a38b48108ea841ee68577137343a2c6170bdd6029411de877e8fb5115fd04113)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBarColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dba7fdd6c7c0b2b4592124aa7b5d0663e5a6356815834d77c20ccd0c9c1fad1e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4dddb5978773de4745acb537907ed80835cc6a8c8e021f64df54d45d4242ccbc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac7a3eccc023d0688ad46ca58a43cdaff41c0e9fb6b09d5bdb5c88e99d2767d6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17e5effd1f3126e36c0e660e6720689253f6ab97589868d4c8a01fd27c4f0b27)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1e0de9ac6586dcd216d6d137d29d36227d5ed02b3b55945dc360983ff4ff273)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e25febb2f03bbc5d1690cf1682b2f92da2ccabcfad8e5860822611dd8463da6d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2650183b40c2cb1733389a4935a8378674274f4e33533357bd5534330fd528ab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7db44338112095c07d647195a37ae3b108217a24eeb64575674c81e41fb54e72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetBarDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44c2dfd8474768f75024a4a2e8df89763b9a228e30e321ec6701de1cef0a084f)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBarDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBarDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75ad81127c42f364154f92abe676946be71a9a7f4e160ec7216b8f266341d9c1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBarDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f32ec88bff90e9dc985adb719ff3c4779078d7bba51663792f3ec6f3b6d42ee)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBarDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__663f23ba04b42d9e5fa9002f208bf805d18435a3f2fb8d61d250e26a2d1013b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__462530f3d4d9fc85d443a36668af1a364bf1b53c5975171e3f414b5f74254519)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__528b0fb7275857618deb1ac78edd3ca58e751311215ba79666012f6c675fea9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88d3a9cf5ae8ce1f483885e752ae34e2445f8a282c859ec4dd65ef4d433ceeb3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc8f27de1c2e2923927b8d31bf66b04cf4c9e9ece4962d92dda2f034afd5e28e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c54051dc5faf00e163168e0bb0af72b774ceabd948500ea7d5e4ab41ec52205)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d24dd497285b7b08d2deee2194732e0f67adcc3501c8dc647c04dd584ebb0a24)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb41af7bc663c61e149863fae99ea2077bb879e5b6ed0c2fe210dcf4ddd2e832)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f87bcb661ec611cd8561be195ef872505164a6eee0a5d523e9c7a32b9f3f2d47)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d93329c8709130c58697bb10916cd90d1640feafc98e106a9c9c5fa4cf60ee23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetBarInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__213726c4d55ff4cf70abbab6fc48b4ccc6752142483f453feb61571c3b8bf389)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBarInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBarInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61db57d68925809dad005f7b6bd0b4d99f78c4ec7f36fcfba8f4a870218fd60c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a37b9d39b31eeacac7cb67568017b70d966d47a1baa6ba3c8057cf00ef5f34e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87de33bbf390ed5b24f20c45d50406fa6756814430fd2f7811e870076fb12cbc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBarInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBarInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetBarInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1301f57742926a76ddaa623e7afda65cc34c810697ea9af8a7163203f78bd52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85b5486f560cbe28b41402719068f9150ba0307b2e9e92fcf31f2205686d7b9a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageWidgetBarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0657dfa99d288047ff79f42ead5444750670c769866c9b74c2ba28d2f9c4a3c8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5d5c5fced03c6b0f78e95318b7d7ada3184262de6a9a5340cf9592ad8f056af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6cb4689f24b1b13343b9023eaa9c0173103f4c86450d4391ed915ff954e468cf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abb120db001e855d2ff7b2f885953d2a80565de28b7a26891c5f4a2cf20ab8fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11be4a4fbc649867e11e91216f90f4c0cfd8cbf394bed19d69c667c49b1ecb49)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetBarNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06a9443b6c0754224b7df09b9601b83e2dffe0f14164ac765f119d65d6812dd2)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBarNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBarNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ac5c266eeef75b5b0cd5d5882576e74e14ce248ca9c192d7b2d6719954df06f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBarNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1657e5f419f31a9561ac3df55e1af295ad1aca3d91462a72586e7ffb415adb5f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBarNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5c9d1c5af069284cf3af71764ff14ca5a3839e369484920f04463743c9bce10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e73fdb95acf20e9f7df0bfe45bdff630cf3de9011520f85b9b249f654de9ef4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9d8515f55c159fd6cc3d70d3fc78395afcea937334e87367e7bc08746a455f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__140bf3eeed3bad2af69c6de7632b56b01ede4e0f1fc8486859351322e801b5f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f472d68d8ed0e291396f1e4e20c37ec1e178682d900070a8a82d04ae75eef53)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__945868a74b0681e0cd2b3cc9316a6c28ee3a852c5936aa321791b11a723670aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b48ee21ae3d6865a2b4d284f94f6316f1ca8b24997b8c74a2bec609e44e4d05)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__443d296956e2a1e1f7b0f64b99e6fab3490408bcdca0c17be288dd59601ae766)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetBarNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b7eee22f0978da030e8d5d2452155792faf50ec2c00ca07908902f22728741e)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBarNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBarNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ccc0d26f075cb632a4178eaaa9c9bd819a846d17be45dfee1f6798cc6fa08509)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBarNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3114fe9dfb730007d459650003d46442a4de36c76bbbbb2e66dfa853b05d1aca)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBarNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce20c167599da033a646e43d75f73903a1e3c173e126d50c559e2ccc860d2ddf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f83a9632b3c61f7dbaad571b72711334969ee798e366f2d0ece17c83ea9a7661)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__377507e1a87ae67b01476ab1ed646eb2bdbcc66ea7918c0a0d8a27b193d3cf0c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c57e5465b994409f73c780252241221c014a3ca297c3434e17a23ef29998147)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fee4b0067c97146b170a759cd02e07fd4ca1471cd370920f238723fb2a818153)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7fab48f035fe38b7ea54c0b9796c6a2cc389d641bd724b2bb9c9a88f2cebdc9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetBarNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetBarNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92c281faa018aa1e4ccec28a7189f2bd0126bd4b61dba7e6f1d7c0f65ffec8da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a0ab3e4b32585617dfe0895b256842dadce480379e27c7d79c6e2064c3f2590)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetBarNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4391bcf3a68715de9736d8ad561c40c983e08a80084cf298bdf7f37cddb71fba)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBarNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBarNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ea3d1a6390b76e0ab8fef4cc929cbbe7bd96b0e5833b5df91b9179aeb07d4c7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBarNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__765b8f3cf007f410daeaa9bdd045bd92392a16b65311c1c59beec5c7df91cc07)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBarNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a385bef26402f8d2cd87f89ca2f7fcb6f3326ebb351507fc34989cbd61e34840)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2a2d7023f17ef18558164a4a03ca93c6feb96e30c557c791d163fad7af2cf02)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__380409480f0a8c9ff11ac4ce68730c957376270a5ccd772338b52f21beae7336)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86012daf20dd6f8824b85060c3d81f7b550fa8684c76f07809fe5b4a917442fe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9b6ffe84e9d5d7e4b2832aa739c2abca32bcc80fca130083fcedcb305b4da26)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f19d53c8504d63607b5980ba3a23a658c5ff5e3a983a676316ed32ec73deb7ff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f52ea46517573390b1351c02d46a0883ac9792835a1bc2da45c795115890b5f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20c6d21c9b34c2d0b3a820cb7cd5361f48ede719394a07f45b7e7eb63278c442)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14f0d3347255e73a5ab0040ae4818356866c1d01e6851264b11d2ae1f209895e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c55d88d6910c7a712f6f4e6542e3a229a7992b2c58cdd3c9fee1918088fa40a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5cc166621af16dac9e2e60a4b05ee0151893d177578b47d29d45358dc8c422b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetBarInitialSorting(direction=direction, name=name)

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e49a042f684f05e397f03acd7d3d2ad9edd4badd08b576eb6e0a9a855f432529)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__648a1073766fb60fbd7fe2a71f3d9962a95e0effdb2199e665e9af83d8eff337)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e120a80ca1fdffa440a95afff099d7a501e378324dac308f3776d8241cc8157)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetFilterCurrentDashboard")
    def reset_filter_current_dashboard(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterCurrentDashboard", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetLinkedEntityGuids")
    def reset_linked_entity_guids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLinkedEntityGuids", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetBarColorsList:
        return typing.cast(OneDashboardPageWidgetBarColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetBarDataFormatList:
        return typing.cast(OneDashboardPageWidgetBarDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(self) -> OneDashboardPageWidgetBarInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetBarInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetBarNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetBarNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetBarNullValuesList:
        return typing.cast(OneDashboardPageWidgetBarNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetBarUnitsList":
        return typing.cast("OneDashboardPageWidgetBarUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="filterCurrentDashboardInput")
    def filter_current_dashboard_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "filterCurrentDashboardInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBarInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBarInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="linkedEntityGuidsInput")
    def linked_entity_guids_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "linkedEntityGuidsInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58c0a295dcaf6f2934705b69e71d6baa4091743148aa2df5c3198e9e334ca27e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e89953a1fcfb58c37d4f793bb08b6e5554dab6a14ba97e1bc75f67d4e722853e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filterCurrentDashboard")
    def filter_current_dashboard(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "filterCurrentDashboard"))

    @filter_current_dashboard.setter
    def filter_current_dashboard(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a09b0fac3db716b2bba83ee56eefd7ba60d07ac25fc367eada924a2bdfe7d573)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filterCurrentDashboard", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a21198abb6340923fa8e662cc2f258e227b8eb3fe7236a02c4bac6220d1d63ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd031a028f45f767d27837808315ae8250ec1c7a73bb4f2a0413baad3b55b93c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2fbe3b1fd982e05861ae19ee7a5b83cb3b69ae72c738ff40c01b630421fb7fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="linkedEntityGuids")
    def linked_entity_guids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "linkedEntityGuids"))

    @linked_entity_guids.setter
    def linked_entity_guids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01a54078c351d49bf3f83eda5da11fd9fd1b949b8f33ac6af0bb4919298be6c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "linkedEntityGuids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46a3d7a65fae83e7605b1c1cfcd8993079ea175db4a2dc623ef1433caf67fcb3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20e47d5555af8927b028672ab5e440854d2ac9732cb8be92ed10ffe7df75d027)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80b3dbb25a65ff1b86cea9d0a720ea6a86ff5aba1a895bc2037775ac6b1f66bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__257a41382f8f4cebf3117ea423737cd31517c06887a1adea9895a547ffe78fd1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1857ec81d1f2bf0d274b2b13b23d16911347283c84216d985d50e8f06d754c7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ef40c2bee931916c2fa4230e1a5ee20d15ea83c8edfc8811b8a9951ab0630a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72d03546533b8322f04e13122ff247c06e1fd29ad50251ea45fa8fb01ad4b88f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetBarUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da8cc09bd4768056cfc55325aff9851e79273344eff99d6db58cc1eb31e3f0f5)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBarUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBarUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a70bfc8648018412e98925b31f4d95a9c4cd7b7b28d334aa149f64bb31abd80f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBarUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df4e037be7a39ecd7f468d39f9ea924fbdebc24fa533640f2a47d2fb1741d146)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBarUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5524774a68202001b115077fc45f8f884591677cc095d8e7772cef88853c4284)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4621cfa241d7c78208bbc3f01e5c520c1f6b616037d7a937fd6341dd2aed301)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44c219c7956859cfb68f0d6ffe90c32f841d0e48e564a2f74248fcea4618b203)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af87ce1b6f598d8e29a5180d878f61b499bff8125a8bb21e4704e305193a6762)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9860d79d9ee6e5d2bb410a58f08466286bcae85cf8981ff824cdfc1368f0ff3f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBarUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__254a94c38a30806e4fa2d82d3706a79a08ab3afee387a4897c58054ca1bc3675)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetBarUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetBarUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBarUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__044b8b2bbf168851cd2bfbf3bb85aeddfd6b00362e7c2171508a4604e315d19e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb2539dd74fc61fd5b6d7aa816ce69f88f09d1e611a31d95525bf461567af1af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetBarUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__989e6c10dc239615a9a0626664585620ffcbf159db493ebe6a2e94095905dc2e)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBarUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBarUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b04c8b895c461670cf786c567a5bc3677fddf63c4ca192f00fc57a169361c6b4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBarUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75d913e1f17a642ea4cc0f79c0f12f087af26d075d19afc14134824610a8a6da)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBarUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b771183986f1236628a5b1084c39239f430c4012bb8b1bdf9213575edb89a023)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b371edf6b1303d72a71c4dcd97cd5a1dc891f52eb8dba56c4d23f3952ba87af4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9bf104947ba8f7c4daf800f4c39d42bd579c2f2dc9b34084952ea0b89eb115ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f3d758c2fde0bf42c00bbf82355bdf0544b4d01cd86cb0eb8c173c92662ab2f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBarUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBarUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1acf9c11d76dd631bf53bc35d4273be66bdc65a13b1663092ddb68b16dd18bae)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cad7961252356ced77efa0a53071059035d084a9596335a3190fc57bbac339f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c847c1b4a0326a6d37ab50c969d54dbeb63e4314b23c957f583a5c536b777599)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa2ebc82e57cda6b25dfe5ab21a7cad2552359583fdd6096928ca69dfc118553)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboard",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "billboard_settings": "billboardSettings",
        "colors": "colors",
        "critical": "critical",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "warning": "warning",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetBillboard:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        billboard_settings: typing.Optional[typing.Union["OneDashboardPageWidgetBillboardBillboardSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        critical: typing.Optional[builtins.str] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetBillboardInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        warning: typing.Optional[builtins.str] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param billboard_settings: billboard_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#billboard_settings OneDashboard#billboard_settings}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param critical: The critical threshold value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#critical OneDashboard#critical}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param warning: The warning threshold value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#warning OneDashboard#warning}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(billboard_settings, dict):
            billboard_settings = OneDashboardPageWidgetBillboardBillboardSettings(**billboard_settings)
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetBillboardInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4519ff1c610e118dde2c95bf8426f5724dfa9398cd0519416b372703ee0f53a6)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument billboard_settings", value=billboard_settings, expected_type=type_hints["billboard_settings"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument critical", value=critical, expected_type=type_hints["critical"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument warning", value=warning, expected_type=type_hints["warning"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if billboard_settings is not None:
            self._values["billboard_settings"] = billboard_settings
        if colors is not None:
            self._values["colors"] = colors
        if critical is not None:
            self._values["critical"] = critical
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if warning is not None:
            self._values["warning"] = warning
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def billboard_settings(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetBillboardBillboardSettings"]:
        '''billboard_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#billboard_settings OneDashboard#billboard_settings}
        '''
        result = self._values.get("billboard_settings")
        return typing.cast(typing.Optional["OneDashboardPageWidgetBillboardBillboardSettings"], result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardColors"]]], result)

    @builtins.property
    def critical(self) -> typing.Optional[builtins.str]:
        '''The critical threshold value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#critical OneDashboard#critical}
        '''
        result = self._values.get("critical")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetBillboardInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetBillboardInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardUnits"]]], result)

    @builtins.property
    def warning(self) -> typing.Optional[builtins.str]:
        '''The warning threshold value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#warning OneDashboard#warning}
        '''
        result = self._values.get("warning")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboard(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardBillboardSettings",
    jsii_struct_bases=[],
    name_mapping={"grid_options": "gridOptions", "link": "link", "visual": "visual"},
)
class OneDashboardPageWidgetBillboardBillboardSettings:
    def __init__(
        self,
        *,
        grid_options: typing.Optional[typing.Union["OneDashboardPageWidgetBillboardBillboardSettingsGridOptions", typing.Dict[builtins.str, typing.Any]]] = None,
        link: typing.Optional[typing.Union["OneDashboardPageWidgetBillboardBillboardSettingsLink", typing.Dict[builtins.str, typing.Any]]] = None,
        visual: typing.Optional[typing.Union["OneDashboardPageWidgetBillboardBillboardSettingsVisual", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param grid_options: grid_options block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#grid_options OneDashboard#grid_options}
        :param link: link block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#link OneDashboard#link}
        :param visual: visual block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#visual OneDashboard#visual}
        '''
        if isinstance(grid_options, dict):
            grid_options = OneDashboardPageWidgetBillboardBillboardSettingsGridOptions(**grid_options)
        if isinstance(link, dict):
            link = OneDashboardPageWidgetBillboardBillboardSettingsLink(**link)
        if isinstance(visual, dict):
            visual = OneDashboardPageWidgetBillboardBillboardSettingsVisual(**visual)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__05fcffe46215c3650369ffab1d8a482959cd5b9387cbebdd4d8a3628b961c0a6)
            check_type(argname="argument grid_options", value=grid_options, expected_type=type_hints["grid_options"])
            check_type(argname="argument link", value=link, expected_type=type_hints["link"])
            check_type(argname="argument visual", value=visual, expected_type=type_hints["visual"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if grid_options is not None:
            self._values["grid_options"] = grid_options
        if link is not None:
            self._values["link"] = link
        if visual is not None:
            self._values["visual"] = visual

    @builtins.property
    def grid_options(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetBillboardBillboardSettingsGridOptions"]:
        '''grid_options block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#grid_options OneDashboard#grid_options}
        '''
        result = self._values.get("grid_options")
        return typing.cast(typing.Optional["OneDashboardPageWidgetBillboardBillboardSettingsGridOptions"], result)

    @builtins.property
    def link(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetBillboardBillboardSettingsLink"]:
        '''link block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#link OneDashboard#link}
        '''
        result = self._values.get("link")
        return typing.cast(typing.Optional["OneDashboardPageWidgetBillboardBillboardSettingsLink"], result)

    @builtins.property
    def visual(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetBillboardBillboardSettingsVisual"]:
        '''visual block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#visual OneDashboard#visual}
        '''
        result = self._values.get("visual")
        return typing.cast(typing.Optional["OneDashboardPageWidgetBillboardBillboardSettingsVisual"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardBillboardSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardBillboardSettingsGridOptions",
    jsii_struct_bases=[],
    name_mapping={"columns": "columns", "label": "label", "value": "value"},
)
class OneDashboardPageWidgetBillboardBillboardSettingsGridOptions:
    def __init__(
        self,
        *,
        columns: typing.Optional[jsii.Number] = None,
        label: typing.Optional[jsii.Number] = None,
        value: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param columns: Number of columns in the grid. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#columns OneDashboard#columns}
        :param label: Grid label setting. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#label OneDashboard#label}
        :param value: Grid value setting. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#value OneDashboard#value}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7fa3e844aa9cb4269195e73486fa39cae7cc5c90f29599310e6684445d3bf348)
            check_type(argname="argument columns", value=columns, expected_type=type_hints["columns"])
            check_type(argname="argument label", value=label, expected_type=type_hints["label"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if columns is not None:
            self._values["columns"] = columns
        if label is not None:
            self._values["label"] = label
        if value is not None:
            self._values["value"] = value

    @builtins.property
    def columns(self) -> typing.Optional[jsii.Number]:
        '''Number of columns in the grid.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#columns OneDashboard#columns}
        '''
        result = self._values.get("columns")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def label(self) -> typing.Optional[jsii.Number]:
        '''Grid label setting.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#label OneDashboard#label}
        '''
        result = self._values.get("label")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def value(self) -> typing.Optional[jsii.Number]:
        '''Grid value setting.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#value OneDashboard#value}
        '''
        result = self._values.get("value")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardBillboardSettingsGridOptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardBillboardSettingsGridOptionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardBillboardSettingsGridOptionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39fe81c039c0eef474784b3a3ee089d86b2501f3c37d688577e711a1eca35b0e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetColumns")
    def reset_columns(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColumns", []))

    @jsii.member(jsii_name="resetLabel")
    def reset_label(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLabel", []))

    @jsii.member(jsii_name="resetValue")
    def reset_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetValue", []))

    @builtins.property
    @jsii.member(jsii_name="columnsInput")
    def columns_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnsInput"))

    @builtins.property
    @jsii.member(jsii_name="labelInput")
    def label_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "labelInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="columns")
    def columns(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "columns"))

    @columns.setter
    def columns(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef824b9587042ab9c1dbd5a46cc657252346c717d530c5cf23916996f125dc9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "columns", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="label")
    def label(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "label"))

    @label.setter
    def label(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c1db9cb12b624acd529011e3afbefb0c287058b01df98b48aede646c12899456)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "label", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "value"))

    @value.setter
    def value(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f28c4fbd961286680339743741a3615b9ae2db62dfbcc2e0eb1d16f88a364655)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsGridOptions]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsGridOptions], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsGridOptions],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68e1ae8019ff9f748e1b2fdf5809f25b44fe2d5fe9c7f86abfa19461f6c1a475)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardBillboardSettingsLink",
    jsii_struct_bases=[],
    name_mapping={"new_tab": "newTab", "title": "title", "url": "url"},
)
class OneDashboardPageWidgetBillboardBillboardSettingsLink:
    def __init__(
        self,
        *,
        new_tab: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        title: typing.Optional[builtins.str] = None,
        url: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param new_tab: Whether to open the link in a new tab. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#new_tab OneDashboard#new_tab}
        :param title: The title for the link. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param url: The URL for the link. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#url OneDashboard#url}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75d452c74f8a589cc340a0a15a025f7ce28678d2242d9bd001cd0a1da39c4f82)
            check_type(argname="argument new_tab", value=new_tab, expected_type=type_hints["new_tab"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument url", value=url, expected_type=type_hints["url"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if new_tab is not None:
            self._values["new_tab"] = new_tab
        if title is not None:
            self._values["title"] = title
        if url is not None:
            self._values["url"] = url

    @builtins.property
    def new_tab(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether to open the link in a new tab.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#new_tab OneDashboard#new_tab}
        '''
        result = self._values.get("new_tab")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def title(self) -> typing.Optional[builtins.str]:
        '''The title for the link.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def url(self) -> typing.Optional[builtins.str]:
        '''The URL for the link.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#url OneDashboard#url}
        '''
        result = self._values.get("url")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardBillboardSettingsLink(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardBillboardSettingsLinkOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardBillboardSettingsLinkOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__919dc76aa342cb3652966983376b212fccec65a329c0384263fd257145539df7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetNewTab")
    def reset_new_tab(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNewTab", []))

    @jsii.member(jsii_name="resetTitle")
    def reset_title(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTitle", []))

    @jsii.member(jsii_name="resetUrl")
    def reset_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUrl", []))

    @builtins.property
    @jsii.member(jsii_name="newTabInput")
    def new_tab_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "newTabInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="urlInput")
    def url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "urlInput"))

    @builtins.property
    @jsii.member(jsii_name="newTab")
    def new_tab(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "newTab"))

    @new_tab.setter
    def new_tab(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e00f2e388dec9babe0507adbbebac4f2bbfb76813976149732df6d41982b5482)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "newTab", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b216a82ad12116f70ea0ba47cc3931b6c3ba438d5d378ca2edeabacc57c961c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="url")
    def url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "url"))

    @url.setter
    def url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32558524a20042bf2d8db595779ff03dd57a6f18ff1cf80ed781fb227811b01c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "url", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsLink]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsLink], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsLink],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b719e82143b61f453eb6955384366137bcea945c314c51b52ce6da76cd79cc58)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardBillboardSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardBillboardSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b48fc480c4aa7224d48b51db796fc83558a4cae5e97f55f63bd2a2ad971e044c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putGridOptions")
    def put_grid_options(
        self,
        *,
        columns: typing.Optional[jsii.Number] = None,
        label: typing.Optional[jsii.Number] = None,
        value: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param columns: Number of columns in the grid. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#columns OneDashboard#columns}
        :param label: Grid label setting. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#label OneDashboard#label}
        :param value: Grid value setting. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#value OneDashboard#value}
        '''
        value_ = OneDashboardPageWidgetBillboardBillboardSettingsGridOptions(
            columns=columns, label=label, value=value
        )

        return typing.cast(None, jsii.invoke(self, "putGridOptions", [value_]))

    @jsii.member(jsii_name="putLink")
    def put_link(
        self,
        *,
        new_tab: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        title: typing.Optional[builtins.str] = None,
        url: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param new_tab: Whether to open the link in a new tab. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#new_tab OneDashboard#new_tab}
        :param title: The title for the link. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param url: The URL for the link. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#url OneDashboard#url}
        '''
        value = OneDashboardPageWidgetBillboardBillboardSettingsLink(
            new_tab=new_tab, title=title, url=url
        )

        return typing.cast(None, jsii.invoke(self, "putLink", [value]))

    @jsii.member(jsii_name="putVisual")
    def put_visual(
        self,
        *,
        alignment: typing.Optional[builtins.str] = None,
        display: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param alignment: Billboard alignment type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#alignment OneDashboard#alignment}
        :param display: Billboard display type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#display OneDashboard#display}
        '''
        value = OneDashboardPageWidgetBillboardBillboardSettingsVisual(
            alignment=alignment, display=display
        )

        return typing.cast(None, jsii.invoke(self, "putVisual", [value]))

    @jsii.member(jsii_name="resetGridOptions")
    def reset_grid_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGridOptions", []))

    @jsii.member(jsii_name="resetLink")
    def reset_link(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLink", []))

    @jsii.member(jsii_name="resetVisual")
    def reset_visual(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVisual", []))

    @builtins.property
    @jsii.member(jsii_name="gridOptions")
    def grid_options(
        self,
    ) -> OneDashboardPageWidgetBillboardBillboardSettingsGridOptionsOutputReference:
        return typing.cast(OneDashboardPageWidgetBillboardBillboardSettingsGridOptionsOutputReference, jsii.get(self, "gridOptions"))

    @builtins.property
    @jsii.member(jsii_name="link")
    def link(
        self,
    ) -> OneDashboardPageWidgetBillboardBillboardSettingsLinkOutputReference:
        return typing.cast(OneDashboardPageWidgetBillboardBillboardSettingsLinkOutputReference, jsii.get(self, "link"))

    @builtins.property
    @jsii.member(jsii_name="visual")
    def visual(
        self,
    ) -> "OneDashboardPageWidgetBillboardBillboardSettingsVisualOutputReference":
        return typing.cast("OneDashboardPageWidgetBillboardBillboardSettingsVisualOutputReference", jsii.get(self, "visual"))

    @builtins.property
    @jsii.member(jsii_name="gridOptionsInput")
    def grid_options_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsGridOptions]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsGridOptions], jsii.get(self, "gridOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="linkInput")
    def link_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsLink]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsLink], jsii.get(self, "linkInput"))

    @builtins.property
    @jsii.member(jsii_name="visualInput")
    def visual_input(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetBillboardBillboardSettingsVisual"]:
        return typing.cast(typing.Optional["OneDashboardPageWidgetBillboardBillboardSettingsVisual"], jsii.get(self, "visualInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBillboardBillboardSettings]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBillboardBillboardSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetBillboardBillboardSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6519b02ab32728770b6c7e1ddbc33de05132d0676e3df4f3d9c1ca2f573e5db2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardBillboardSettingsVisual",
    jsii_struct_bases=[],
    name_mapping={"alignment": "alignment", "display": "display"},
)
class OneDashboardPageWidgetBillboardBillboardSettingsVisual:
    def __init__(
        self,
        *,
        alignment: typing.Optional[builtins.str] = None,
        display: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param alignment: Billboard alignment type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#alignment OneDashboard#alignment}
        :param display: Billboard display type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#display OneDashboard#display}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d44140ab8f3e4b2c2b6b8c612aeb94bf0500efb9bd030cbe6bb84b6009c7507a)
            check_type(argname="argument alignment", value=alignment, expected_type=type_hints["alignment"])
            check_type(argname="argument display", value=display, expected_type=type_hints["display"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if alignment is not None:
            self._values["alignment"] = alignment
        if display is not None:
            self._values["display"] = display

    @builtins.property
    def alignment(self) -> typing.Optional[builtins.str]:
        '''Billboard alignment type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#alignment OneDashboard#alignment}
        '''
        result = self._values.get("alignment")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def display(self) -> typing.Optional[builtins.str]:
        '''Billboard display type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#display OneDashboard#display}
        '''
        result = self._values.get("display")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardBillboardSettingsVisual(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardBillboardSettingsVisualOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardBillboardSettingsVisualOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a5727d7fa8c5cf88f0e1ffa5c5548ec1e71b249e5e24e9a1383f48d859511a2d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAlignment")
    def reset_alignment(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAlignment", []))

    @jsii.member(jsii_name="resetDisplay")
    def reset_display(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDisplay", []))

    @builtins.property
    @jsii.member(jsii_name="alignmentInput")
    def alignment_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "alignmentInput"))

    @builtins.property
    @jsii.member(jsii_name="displayInput")
    def display_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "displayInput"))

    @builtins.property
    @jsii.member(jsii_name="alignment")
    def alignment(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "alignment"))

    @alignment.setter
    def alignment(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31720b42e6ea4e734096ebf0de0b94b83822ca80c3773ff1e2c4a07b3354a2a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "alignment", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="display")
    def display(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "display"))

    @display.setter
    def display(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a35fb7c21bd3e8b5bb77bfe72e2b43a7b9b6979399dca7a2b376cfb288394545)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "display", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsVisual]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsVisual], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsVisual],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3fcb4ba48122a27fa7e423125142dd8d546ef11944509a0fa890bdca8b1d0b2a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetBillboardColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4eaff1c8f37c5283e965a9efdbdfb0946eacfb41338b3a32733c31dfbc40da8)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__171affe3bc0f63e8208ae42a410ffae01966f2e9852ed81bba9af2a20f7b1ff9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBillboardColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__712f721e9b69a0ce4574d9a288691d5b7e2750bbf88dcaf8362a380aaf80d222)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBillboardColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e959cc37ff113f8c3462ece125291c58c3e0dbd4bf38289dfe67a98697f1615)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__987ec2082a25178dec800274d341537102c23a0792998ce875d5593ac96f6480)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f9c45c482ce5ac5cefb0c1ad6b3f0fa9444ed6d934ffd4bbf0b9273c82b1a82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a98cc5ba73436323386fb8e1f81e13338aba94d5239fd429cccacad0ddbb697a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe39dd705df5ba894fce271034ea70ec9b35f0c1d4d184a1d89186beaee73640)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7143a23a93439a1c41a579e8a8c1e5e55c51774a8b13aef8f262f2bbcad8b447)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetBillboardColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetBillboardColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0ea5d6ec2fa5b2423c568695131c1051a462abdbb6c0874d4ae7c8d79b15aff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76d1d383bb39727c772c758e0a331af4e6f39d163ad9f6f96ca0007df88af5da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetBillboardColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ec55abb7e614c49f79c9631f50029f5bba4fa28ba786b3b31adc052c881b120)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c98c4e6f6bb341c186c35eaba9aeddda82ca32f4e3bc3f4fb48fb0406dd9733)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBillboardColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__230528cf973ee8c7b24ba987ee9bb205836f8bfd59806c82f0bcea8d71cea96a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBillboardColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33c1d6427844bee85ef4f19a70f71ef5712ca22314d45e2ed47a312c8c83827c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f3f4f81c821ad21c4241afd6e7e5020a98805f93d1e9476125cfc784fa8c47a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28a2d58c21180580540ad92f61ee5ab4567d3d0225fee0626f17072d52f7d5c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5845d4aa85e395d43fc49b8e5c911afe6cfe5f2f4c0e0cb28bd25cd63c7f26ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e537c439b1467860c75ffa9e0a7880493f7074392b10ebbd24ef8d46ef31f0c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f150c586101ce87f5ae1ea218255b9fc76bbccdd488bef7d5178baf85c16e7a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ca5197edfd5dd688563bc116d896e7cd8105c86c16b7a1b5f2eeda00e9319b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9bd26c3fe64a86cd7b4314d5a0284ca6ffb7035a248400c4b12130cc6bc57079)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetBillboardDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cfe173c251a262aa652fe6b0b5af365608f0142fdc29d04fc3f4a6ab4e86a275)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33aff49656ebbb2bf9b464c49fc67171b5b3e70d1075b900d26d60cc49c25fd1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBillboardDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c0fb3c5e64f2227c4b538e097add0ab576a0bf1d14f4394753104cddd2ddc06)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBillboardDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__673574f5d47a5cc654002d39f45d85d25e2c9f5b27cd4a90235d27bb05e40b9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70e5ad80b887eef4ca70842d855c9b1fff5f0e8f6afba7d04ab1a1dc3068282a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45daaacee1cf4f3f52c56ee06e72b8979abcd03d1d24111af5f7f485bd478a6d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__115eddc76a0574389ad86437f0a9449de857fa1f4e4d50023fc208baebef527e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e36f1214b8407dfcdb0b1e43868a55d3a0fb3c4ac74da650435c8027c6bdf382)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04a09b7a078ff20aadd76cf5d622238739579198a81ff92eecaa42737b12aa7c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85f5dc0e7196b7cc30fbb9341537dc24cf15d0af66682bb22ccd0c3df09fa46b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__490e7057b6b7d46a8ccaccd9f6a3a75bc5f76ce2ab0f8c9156cefc5f2c21611e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9ba1bbb5e912108e1b95f6973620c95ad68efa9f454ac10b42eabeee577aedc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8e3da82e1920be67372eb11784c479d63e992785044b1074d798aeff73431c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetBillboardInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f806648c315d97e695ec1b44e9461dd6271b6e8de51ddf455d33b36aa9c80ff3)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a01edc8a7fee34badb7f7587636d016b7ee74018aa6805dc051ba2bc4c3e9a00)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__15b3a00b92d712db344d291a5fea2e61e4814345bc75885c9db7f33f9edf2bad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d30bfced0e71aa840a840e1e65605486668a50d84a0f387865391682e4df06c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBillboardInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBillboardInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetBillboardInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d69924831bf426fbc344afa77ec4d3bac1e001a902cbfa79f34b8fae6587cbae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__894fdab0f58338f0b572982508016551d77bf9dea527bdcc9252b74d49d6c05e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBillboardOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c46e0c9c70918be2a6b2f97413afa7d53548ba4ffd44f4c28957b419fc720183)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBillboardOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3513ee2b75ba0a7cf72a8d2a3b666263335324ef3ab7ac439d658ecd79f6a5e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b50e130bfe66b9e2248172a008b949d1b01b3dae6d5cdfaa3091b0cd847c9392)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72c36205dd37c589015f42cc775e72fa5cf6a5b36526e888f03aacb342768dd0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboard]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboard]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboard]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72e79a0b43824b61866cfcdcdd1ef386ae5f13fb9fa13e7fbda439443a483467)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetBillboardNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aafa3074e861e1d5ebf2e8c4077b3dfa1f545d4b2db6d102bae2a908189a3598)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48377d1f09f6fa228f0b8a8c06e85d85be44eeacf8f152b24da4f02b4e58c2f3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBillboardNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee644d2f4c7fb4dc3d5c77c8051148e822c03b5ef83ee9b02b93e3e1e31b8c87)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBillboardNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c3c47a15a87e0c14f9c702394fab3fc33effc9d1be71d23db9f18545329d317a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88f03eefe536ec78a1237cd8ad54fa4af08823da15946d3218a76b4caba9d9f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__418d6735c96d7f2144d86c144c05e84a9b5ffd3739348b45afce2841a416a1aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88631c13b2527746d3f58d88744cf32495cbfbf120427d3ca139acc8730ddd33)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f1a55f09aafc860275896e0376bf0dbcadd7982bae99a11e13444a5e58ce48a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76a466793b66e28573281916b44fc7d6344b2e8e84f025b8182c639f6772f6b7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4da882a93de44627d05dcfbdfb9d0b3f37a8d1ab73c978d6626d5c22105e7cc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e0279a8a50903b255714cc3158eeecc6134583afd1b2eec59f9432963da0e01)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetBillboardNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a43a0e0883fc4855f2f335e405a8b15ddc90af57df4a64789821fe7d2d9e8fac)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7a3874ccebc16cbb7d19149e90d0cfce5e747e9acce53bccc388d55ad927215)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBillboardNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__575d597045786efc397d784a8d4340d096e66a45830aeb5c869062443420f1b7)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBillboardNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30b1ce763d9ae66057805f55bfd37e0e18a276eaa8123a2f8b66db98de2dd131)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c06150a150556aa219717d0dbf2c9e95ec57bdb54331475de7fa0b27334080e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92e26667d71d5a414ca4cb55f0dcbf4ffc995fe0cd3f5e17dccea5b51e29e796)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ae738072b46b2b09ecbb493b5bd62b45f87d26feaa22bc05620f33e21710ab3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e0991136fa3cee3a9842281feeb448cbdaa2323312940ca3388abb235b87918)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__927f6830d0009b7b215c813ceacbf8d84762e90478994dcb2f33a9097cf053e8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetBillboardNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetBillboardNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c2c15e46e132464a6a558647e147bba6e84a442b81dd41d269cff816725cd50)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb21f78f5f8e319fa8cc59a98d8563e240e61ba5a75bd3234b16f3865cdc2210)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetBillboardNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb885c72e3ee92c95c6cd188be7c2bde4733167f7637e50e2281277d3f545014)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__077dae17257dc5cae46fa9a1eefedd81499167a94c509d37e2d58e2cc031c346)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBillboardNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__492752b9c52044512fbab94ccefb89139d17ec78d56c1d671696b1c7be1da202)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBillboardNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f15e54481765c84fa677ff06218d93c100cf0c51cff8349a0d0f6dc9bc4e614f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76da3c425069e79ba2bdf3334315f414b425b5cb8e6413417cded41d8d6381b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a03da3d70d2554739bc1ba0c45d08dec0397acbca1e6f2721cc7dde56d7e6789)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6247e205a4006c6ac78b180dfa748ebf6dd32faad2be43aaf4476bc518c89d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d86646d352b5f7b8f7b19ce04bd315ba93e6691c72ca1df692ed6f710e543ae)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b623e529f473b57eeee3db1c71332b134ddc4223a7818a63edec08370e4383e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17f796c5986951a8e77f5b29e40dcf56d8c3e80463bd34718c7844fb1a5f312d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2f6961fcd66b054aa9dc19b1f0e9a2f26204c6e0d915db3406f101d2ed7604b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b2a58c80eb16a1e50a5ab1bdaba280dfd71696708a83f71e15b5389bf845578)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putBillboardSettings")
    def put_billboard_settings(
        self,
        *,
        grid_options: typing.Optional[typing.Union[OneDashboardPageWidgetBillboardBillboardSettingsGridOptions, typing.Dict[builtins.str, typing.Any]]] = None,
        link: typing.Optional[typing.Union[OneDashboardPageWidgetBillboardBillboardSettingsLink, typing.Dict[builtins.str, typing.Any]]] = None,
        visual: typing.Optional[typing.Union[OneDashboardPageWidgetBillboardBillboardSettingsVisual, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param grid_options: grid_options block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#grid_options OneDashboard#grid_options}
        :param link: link block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#link OneDashboard#link}
        :param visual: visual block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#visual OneDashboard#visual}
        '''
        value = OneDashboardPageWidgetBillboardBillboardSettings(
            grid_options=grid_options, link=link, visual=visual
        )

        return typing.cast(None, jsii.invoke(self, "putBillboardSettings", [value]))

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f18efc626f74f839415f318dd1dba07e477f8f8c04b18e1812c0f2981b94344)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57a6589869ef20ad19bbf5961b267df5f6c383e7068ad344c9065399b9c1db57)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetBillboardInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60a296a21633fa7f7b7a4d45fc88a73bb60b7641b013839bba730bb8a68150e5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f2ace4486862b7e4f0852336320ba7e20741d4d17d17bf0b8182309313e0785)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__79aab97913de5ac0af13c6a45f4ce8610cf5d5691fdd0fe809cacf63c391a140)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetBillboardSettings")
    def reset_billboard_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBillboardSettings", []))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetCritical")
    def reset_critical(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCritical", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWarning")
    def reset_warning(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWarning", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="billboardSettings")
    def billboard_settings(
        self,
    ) -> OneDashboardPageWidgetBillboardBillboardSettingsOutputReference:
        return typing.cast(OneDashboardPageWidgetBillboardBillboardSettingsOutputReference, jsii.get(self, "billboardSettings"))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetBillboardColorsList:
        return typing.cast(OneDashboardPageWidgetBillboardColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetBillboardDataFormatList:
        return typing.cast(OneDashboardPageWidgetBillboardDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetBillboardInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetBillboardInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetBillboardNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetBillboardNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetBillboardNullValuesList:
        return typing.cast(OneDashboardPageWidgetBillboardNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetBillboardUnitsList":
        return typing.cast("OneDashboardPageWidgetBillboardUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="billboardSettingsInput")
    def billboard_settings_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBillboardBillboardSettings]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBillboardBillboardSettings], jsii.get(self, "billboardSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="criticalInput")
    def critical_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "criticalInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBillboardInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBillboardInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="warningInput")
    def warning_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "warningInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a18dffa16f429263e7d27b2371285a08dd64bfab2e742f1f690cc46993bb7c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="critical")
    def critical(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "critical"))

    @critical.setter
    def critical(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e139c1d753b5fbe05a725c540362ffcf60a4f4c9efe95e76fbc01cacdc3b7962)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "critical", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df4d123ab683d301f4bf2b7445d6f0a67f5efec113a1b9b2c1b0c8a959a814ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc0b1875c5ee7f0a0831783325d83299bb4b1489cd4847fad5446a0a5e8bc341)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a0de7ab04d21d6f62effbf6aa02e21c5a247caa8642170a1c186fdccccf43a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19fcacb5f7918b235b931757f2eb67c0391d93fdafc71883d9ac05ac12bd9411)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e30359a5e491137232f20a9970f2e97c6298f8853d2cc7efaf1a68d5863c77e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9e4fd9a3bba4caf7de4314341d1309ca69deac272637cdde9d618c5762c228c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa6fc0e22620ebe540aedfb24f046292d0c0e3d9f315e858e80a66c993d85a30)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="warning")
    def warning(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "warning"))

    @warning.setter
    def warning(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee9327724f805ffeaacb104c68f13bd5e209426601540f8b764d6ae606736558)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "warning", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc40fb460a2882fbecb1c489b1626d7801f4545dbaa39bf186c99a5ffa7124c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__017c9a77feb859b30f87cbbb9daee38c28afa89dc31c9ffb9c32fb8849bb9221)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9efef549e7e9b0b6445631598d977019b7e4f0c9e5f2b51c857f2cee5a55835)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboard]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboard]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboard]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd280d1ba2eb59f0afb44d739c9133da4dc36f41160c491cf27a8aaa06c96411)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetBillboardUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0cfdbd0aabaca23d5099d2b4da61a9e5c4fe0e847d6b4f594397740bbb05dd4b)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27ba137a67a4990b1660cc76d179f947dcb3f710b105001a4f44a747dc810484)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBillboardUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e4c791217e607eb485ca2843e8ea5a4ee230d463cbea28771c96804660daa1a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBillboardUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5fb534f5240c145601a8dccca225fc82752587edd442c0c4957259eda4333574)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f3dd46fb87f29100824211965e1ff03af40abe5994477733985596babf890350)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d961035ad678beb7d2176dfc0e8801c0304606dce6240bc89934c52a3164517)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fffc8ee089721ee38dc97ca47ab26c8da99e417013c1783678cfd3c49f802f99)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0700c78383c4de290682a928cef6024e5a489f71ba9121af6ebad7fc96619d5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBillboardUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb819774eb7d803202e0241f1ccb4e494317c3f9ea588435b1891fdd616d8d9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetBillboardUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetBillboardUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBillboardUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d910fe1bf62090bd4610381427cece4dfd6a39b2fa0fe15f530ef1208a44fcf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d726581965e7a332eea7ccf84157ceb60215c06b05a239b1b9adc21d6b4b494)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetBillboardUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b44fed7dfcee18274198ba6b40753ecc16a654ac2d89829fdd1ff693fff7671)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBillboardUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBillboardUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37e90d9f2dd8a1cdb01025b25be53ac42c990c987480d5058f2da4a259c88871)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBillboardUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2cedf626b6b19f6139ad6afe7f8dc36dddffcc0bc49a478e75b9081f23ad97a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBillboardUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c84edae1350e8c6e5a6d7ce19013da6b065fdf987e66bfa0072e06b75d3f238d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09b20cfd0c50fc14498e9021fcd638f17ed0d8c3d92ad7457eb3782237c301e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc8803000634e5cd3c280edee94ce869deb89f0fb06895b69e31028f8d68f9ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c788871b7f9baf94472afb87e643b65974731f53c582af63b0a2943a80fb8d34)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBillboardUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBillboardUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__369d9e5f8f6af807674acc8e809d2bd0f8ff1c7d5e09faf5885f4c3a6336f57d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b39464b137005064a8b9d9c217e081281f590c5cdae05d3b60307804b60905b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a652b7855fb95a8cb17655b4ad17ddd363c3083cddfe446c9568653fb2f4772d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5cde19160fe910657c432a484571f1e9282b26ac2d98373d1924d350764483b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBullet",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "limit": "limit",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetBullet:
    def __init__(
        self,
        *,
        column: jsii.Number,
        limit: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetBulletInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param limit: The maximum value for the visualization. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#limit OneDashboard#limit}
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetBulletInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1eddc8ab7bda5dc1856a97b6e9a0daa659f395c405b38d7f1aaed4d210e590f)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument limit", value=limit, expected_type=type_hints["limit"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "limit": limit,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def limit(self) -> jsii.Number:
        '''The maximum value for the visualization.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#limit OneDashboard#limit}
        '''
        result = self._values.get("limit")
        assert result is not None, "Required property 'limit' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetBulletInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetBulletInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBullet(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetBulletColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__375c3180949bf03ae6af872b4f7d9ddb2920a0f7d58d1704c7ef57cca8cebfdd)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBulletColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBulletColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__811086e29857c8b3719e5e2cba6615683b73eaca9e867a6c3468628b02637c19)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBulletColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fffe9a3343bdd0473b90a3bdf089b243c7cbb96e9446df6aeaf250a6443fed1e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBulletColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a230092a2d4df18fa0ad515b3bcbf8a2a49e0b4a1e373e69c55fbd6a38185538)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38f90e4da2ceab87301c6202b122e3a36a0ad0ce630e3da3ad40e299c6f719e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b38125886ed6c5a2960bbd1dceabbc2898afcd69488e19ceb9f8facb03eb954)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__075abb3be3f5cbefd7322607a86aeac5e77a86c5bba4162bf43061e39f88f7a1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__138b65b8c068c3218c17625c7bc85e11aa9522cabb56ed8d51310450258af258)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__017406b33760a1933922a615ec82a91baecfd29c5a93459f71f9ab124cc3555a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetBulletColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetBulletColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__470cafcf30385dfacd04507d842b21cb1f94bb6fc67e062f14aeb746c78b6af7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55a9f9e58f725f66d99b4b64e4e9798dea17b085e9a108c7be2c981ef45ebea0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetBulletColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53c8428bad0a7bdda56f8b89ee97e39a38b7edc7662bfec4b4114726ae3e4c6c)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBulletColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBulletColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__527b0ab2d556bebbd9228f6884a42608445bc7ea5c5cf472784f6561f31746da)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBulletColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63a9c0d9928a9ab8dbbc94b663530d73afca236cf88d3e4966623a0519ec1930)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBulletColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d65ed26fbac9ef5fa13753f729a036af6bb4e73b27997255b46114ae403236ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3af6cfa0914e2ed3aa0500b243d6113869dafeb527bb191bab93c5750d123955)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c8919091d95ace0854a6baa56b27db28bf11cad88bcb58d2dc95f6b3698d67b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52923695623b2666c4477180141d21f759baab6478e264fbe793842d5c726828)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f34b0b1451516cf2ba3527a24f71424087c9ef29f70cef5cb46f16b2247d24e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d4d1d36f88ff89298bb10b00ce472f381d44abe7f24a15f49a60197787d325d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cecdf29e1b2653a146dd99c12ae06807601ff522005498fbc5c6d980ad638c8c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37895c6410a6932eeae0ee71fe3e46f973d833ae6556118033c542af3899f7f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetBulletDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b11e2e988a8733056dc589231471720af0ff1399a100011fbc54947dc00a662)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBulletDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBulletDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f7e481c4309fdee9ad8eaec795a2bbc895f6c5482dbd1b1c0a3c86f01366f4a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBulletDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0035eb2225a659256fcf53800be9f131a64b285a16fc7a406f34f2d4873dac92)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBulletDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f8c1013900164c689ff9dc491192f4b59cc0087039e3b171d7280e3ec870ae56)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f880eb5fac1e8d858917d8ac8421a373cc9e5892c943bab4b1834f3dd222622)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43a65570bb1ef6853eb0e9013b7db439f4296cf906fee3ac06453cf78c65cf00)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8225eb2c73375d0d0058f089f878038eb2cbbff1f991792bdad9c8f7a4de2f6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33596b881d1fabc80646991e8a30e324215482738e383d567c6a99c24ed99ef0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3bf67d1546b49e338ef39e8b0aa87136b0d08f92a1d044d392834f842009f5cf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3f49a4c6a263f8dfb73149c7bb2ff0bc7a37e67eee2a6bc9a075f6b647846b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e251b760dda30304413f2f031b6788bd3356a97bf1f9a326176c96d2d13db2f8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f820da97a3ee393a4a0dace89a7763f4c869ee8ef52b367c6988607a60d51d78)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__10bbf631eab76e2791d5c85c8ef53e2aa87bdbfc9cf73abcaffa03454a84320e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetBulletInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80f6d93267f173c962f1b1a9b059a4dd6013c6cbe7433f0f8f9243d8771d0911)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBulletInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBulletInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db9ccb6a9eed925cedbe03e63dfdee2fc5bccc906347a7ee762e3ea20e1d04e2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13d8bdb9e6efd227e8da7e9d27b1be5af6e1885e76d24f2640f5621a31e1387b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__47de0c0f85c224336be23053d79784fb56ea02069912805ef7c8c279b96f801a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBulletInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBulletInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetBulletInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25f5e4ba5f6bc5f9f6b3d37e974f532d41a5e5f9e14a3597d6c5ebc6147fe813)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3852ea534a10337bef8d8d4948320a74e40e6892d8eba9d3e90caf1733e347e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageWidgetBulletOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ccf70bb55a2d3ddbf1611a392159d3a4f32c3e0bd3ca126acce1dd602ff6b011)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBulletOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c01d19b1a4ada2a2366f02c577516aa90772f1481174f54dcdd73eed3f38eaee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d44eb5d97732f8a43e7e91ac2b25eafb65aa35e3cdc8b5f964908444523aa7d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa71dee47c241fb33bd778fe2964ca01d2f63bf794ec2dd8515da2b5e9a10574)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBullet]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBullet]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBullet]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37d1466b5ed53a0a827db75cef6c6cacb917349c128cec6893f7fb464bb1134f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetBulletNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__830407ff9c790892d7f3d865d2e12e4b5e33ea3848217ae530bfcb329328e5e2)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBulletNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBulletNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa632382ceb6ac5f9793b4e7f35a9cf5604ef143cee22563ad2f291349f31c6f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBulletNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2234b67d237340a19724a04e952446ace59e80605aae39a64a31074f374cd05f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBulletNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__539dcbd59fa549868ce6af9bca57a114e143e4689f65d7b84d82405966d13559)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf01d7766ccf39888ecf6c6ca8e82cd4abab920d2ec0ce2d576f5cb1f83d8bdf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6a0d6fdec01fb5c0864a6d8e345e017cedd7856459d9c5546f8a487f1c362a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa8124207fe863c347857484fdf131470697bcf90167e8ff518d174eed9b4bf0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7418bf484b6c56d82111e44b59e4537e944b10eef223caa83ba3c79b4e7c335b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e28b5a7c62256cac6bcea277a72794a992f5e547dc9038ac289e4aa8d94e6827)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__566768ac9cf64270dc0012afdeeb81aed713e2867f448ede93a8e7d28b16e73a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7ef039acd99a1484a800d026842f309dc2dd7772a344304840c835905c1bccf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetBulletNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__78923789ee09ea534c17f58cae525ecc43b59da42804d939b6a15d3795a492be)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBulletNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBulletNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__792c3ac950aba5888296775d871a26bfb25ba1a9d46624603b38d24a266b921b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBulletNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ada95c93219e5920f93a75e647759cece9d11689e95978a3d69b45ec7c79840b)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBulletNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36a6b8f9e159e04f6d777381fe39c32fd94b8b512ce6d2fcc105b1e59682ee9b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c90c4b581ee4730bd9d747d5d6ec64f2df9fb1e849b78b346acdf9d6c87835d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f210dcec627489b1d501d6a9871fddefebe84fe33ef443c0282402586ce2aed6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__965a10d73e447f440bf55ef1b4ca7625a3d781bc4ee05f6b87ede625ff640c22)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1bf1b1475d6686c642949634bc03f26c32bb321030b62c67fca07613c70261da)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72e526377e5a85e4424e837400a0cd83ca55a6bcaafc1a82e124fd6534f7cd6c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetBulletNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetBulletNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__560f598f65e293b503f3400f23efd513ab03c84628c075bff748f2b8626437db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe6291172534a4935e303c04f9be51259616f8bf6923acdf77d51a4e26617015)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetBulletNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9688324f769486db222ce4e4256d2ed930d82e968693182cb31653b37b4d0a62)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBulletNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBulletNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e8c6405014a01456d1eee04da05211a16a3685efc875b080ee4d59a9142c5908)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBulletNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9890b0e27ce7967366d7092fd8a3ecc9fa498bce3306101813ec5b6f771d90c2)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBulletNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1455735b1d55f515c80ac57a0f92440b50a938c45b87d2239e2bfdac1a21e22)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9e05d8d1679ae69d97df88ed6561005dfef5f074929c60201d623fef70e0f00)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e328007b60c7b70f98a4b4b56e77ed83960ed63bc0d850f6ae8d963f51b207ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__343138468c45cbc6e7f46b8caf88b14b84825584e1040c2fde766608142aafd8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bee58de26af03df23d545c59f4e66a18f42f522aab486e6acdcb8fe787a27517)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a2f20afa667c1ba0025d5eb1b16d2f01004f3b7faa7149c8dbb74249edc4e59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__598b53132c8c18c7b5c33d8640bb9cd9665b30b111b6f201f426651220d4eb06)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__79f9529f058a8c1b4b1f3a259b2f854a76f561ab6a069941bcb01b7625ad3315)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2cbc29faf7db3077ad18ed7adef206724bb40a3ec0c0e2635baf803de7c24b0c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef5896ac2635ed114876b278ff08cb66c4f23b1d69401266ffe78c5c4b89c826)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5728beceb9f56953f0d183a2bb30ebe4a8b6f9471be0483a5ad6df21e99f22cd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetBulletInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a91ddd8d69381a842f9e8b16f44cc9c751ad6a3e9cfed50a4047f1233b773177)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d966aaefdea751157316d4d8bdb50d06c9a59f2089f6cdae726d2025b06914c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d2054c04337a4da8d7008abb0c08915f3a55718e588373fcc1dc933ddd1ac0f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetBulletColorsList:
        return typing.cast(OneDashboardPageWidgetBulletColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetBulletDataFormatList:
        return typing.cast(OneDashboardPageWidgetBulletDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetBulletInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetBulletInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetBulletNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetBulletNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetBulletNullValuesList:
        return typing.cast(OneDashboardPageWidgetBulletNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetBulletUnitsList":
        return typing.cast("OneDashboardPageWidgetBulletUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetBulletInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetBulletInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="limitInput")
    def limit_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "limitInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__121461dfcf0f6009638d5315e2b760d253ce8e1db8dca3855ac882defed4adf1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23f1eb37da245f2e075a8d4e108f70114bedb75fc50586393e1de31b8b51c2a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ebde968b9e629fcdef60488d2d60b8ec38907c96327432783c2fd186c7b98e9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38cb579f1593999e34a2ac80a6f718e6affaefdb53153397b581fb23b2da3dd8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d99494d921c6b147ecd05f179c6ac0c0f2a21892504ae4a3118cac8a8512e8e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="limit")
    def limit(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "limit"))

    @limit.setter
    def limit(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2b7850fab8e4d9531df7225e0afff389f82087fc44c66a9afd7396ab056d045)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "limit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9c70a10ba16ddd6b3b1ec64b3226593f3be610f126ff66bbeac6462b7980018)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a50099ed247ebe9901b5b4b4c7ce3fafe5b9bdb09b181131ce7669e48ad8cb0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f9734507856a058302b91d644b544a4153903268d88dcdfbf1b0b666cf060fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0fe19dd3afd9bb3c6ffab99310f4916094d6e197e0d340940bdbdeba3410d6dc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2bf627d2ac0ff13a68ce47c0a74b6cd60ea857c6c812bf5c7761b341f56040c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a73b72d9ce486a8b0a82d903aa7d5eba9c72cf9d75546d0b7e6471a3dad73d9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBullet]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBullet]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBullet]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ea5a899a8dee914d61f6586ef998506dee739f05e07b2a761a79515f8c1ae23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetBulletUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27a8f9e2d01f4532b25526a4a4a66641badff393ce77706d63282d2eedd43914)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBulletUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBulletUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__399a3ec56a4befcb61dd53456a2a9a0e2d23d5edb7ba64163951d396c6248852)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBulletUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4a48cc1dd5efd88db08b174b5519b4d188d2ed28d343931802c6832845d3a33)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBulletUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c84a4106107ae33b78e836d249176a0852603a95c69c8df989052206c5613962)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1caa10aba2c77a6eed035276eee6e77fcb795ac6c591fa12b88ed05f12ef8a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7151104288984c5181e8ee344905f0a85e646cb737fba70507ff38480c77288d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb5a0d1896f90ce5ae93711ea29787efe3c18484e69d1db2c8d4de39a4eb163f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f77a042de46ccd523d7d07ea4f2f01eebabda5e2955bbe739952cfbe9b2211b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetBulletUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d66fa2c291fc8dbaba482f88560e87eb8bb015fa467b8217a590316d22a0399)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetBulletUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetBulletUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetBulletUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afb5ade8ea354ea50a3354acee4a4ee8547ce70e60afbbb3a4d983d874095b0e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1158821835013ce11dae9dc4ba80fddc90eb61d12d7867af3239684bb6703936)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetBulletUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5056f7723301000acbd4b53965de4363bc9a8412cae2d8b911b78ce43a4cc3a8)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetBulletUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetBulletUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13de16beccc33b8e87d9cc6d6d15a9da044dc18ac13391735afb1580e7c8590b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetBulletUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__378c98a562efae4b0897e377a11731c5cd986f7d7c0fce61c1ac2928728f1726)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetBulletUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1bed55703d8a03d60e86da99bc388208fbf08a948dcc51e824a7e90123b54546)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__045106f55a9856a87d63cf732373b5a47520178c8ebc3d58f60ec3be9ed8771e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d6bf16af6e653683bd10d211ce4c7b7aace7888ef9d3048a21a4d06386ea232)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__435a2b478beaffc5d01f48b91685daf30c5db7c42feeb257c61525173df8dcee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetBulletUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetBulletUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7953a8aee5654be9db94a910f2e1007c6b95db14615a16653e2a5b17eb2f4d1e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c371fa8d610897750c3894fc9454518ede75d0554f426df29aa6530d5352c75)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e014bcc82ec66f64d1df531b3732a81ed93e6f79705d26769120d254200b7167)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d10c0219cc849b4df058806f4184422d19a70112e1b3a594db7687bc3ca43ae9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnel",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetFunnel:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetFunnelInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetFunnelInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ecd9a6b0fb08de51cb5866fa122f575713c64086df42aff6d60640694311943)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetFunnelInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetFunnelInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnel(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetFunnelColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7f44355ee859935555ac21c58f63cc9044d18894f46233b486f6f447f9a2ca6)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnelColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetFunnelColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d09925cfa95c14057a83feae81f74ed6f85c3e813de7b45e2e8b86c4997ef498)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetFunnelColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f24322a42a3c2a27a47dd18babea3ad83a8b16d85d4101d46a450d6b0a55e3f8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetFunnelColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__625e2cdf0343f4849accb257c84b3f49d2bde4f7b0a382e387ac1b8388c42242)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5b3f32910a3cf4039fce290664acd496601fe099725d83f4a4fbb24dfbfa315)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6aff648ce7dd827ecce00280aa27f498a74aef3f5d87deba54182defeb50317)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76ec7b6af766cb0d882f857899926d441f7b280add088c328040f695b1465a2a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__086f223061b372243ef78921a4833e52084c660c3e6ebd8c61456c14175d4c6c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8fd0b0b314c11149d7dddb4ac53e667875353f7b7a106a4d8027e3e865ffdf21)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetFunnelColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetFunnelColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d4011d6fcb3fad0f94ea61358aa06ed864e32bf3aa831e923d98d4cdaa22e1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63a23ae2ad33aae179a133378a37ae7b5d802c81b613f43fba2598fa7fda34a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetFunnelColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__286a9225b03b83d5212800b22a8081a4f9f5a90ca3794632b10f68a1be1d1ff1)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnelColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetFunnelColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f171071a7583bcd76faafd549db0c2830125d83a37d0be4f93ee7c9dce1c9707)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetFunnelColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2555f8c387e5d61e48c239daabef2e30f60cf1d17bcb5ae2ee291beae38c97b)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetFunnelColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c147486bf5f9dd41ee0189c7352ff8e9c9c0c7be1109716923cf7927b781e3a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d367a64528a600ee3e36f43d33f82f3fefb2f4cd65810d855026f6fc1bc3d37d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__770251c5c4bba2c9d0094504fe0b90f0c661b7aebc027285654279e6c3a4de74)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ce1e64b5650ec0cf4868b649fb353df5882c3e2a6b430061db0d958e20e69fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2ff99bb6da4f141680cb4b8b3975bc7c101b289e1071c3938f67bc2669bee78)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8671fcbf1390c8161f5264a1c0d14c62d07be52bbbef816c7118d419c4e27249)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0fc63f16fd1403b6cc06048774890813ba6b2953c25c0c98f322afb6686d75b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa0c8e49548a9d55f4ca4085833d58a89f9be4fcbf57dbaef74dc512a5b1a9e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetFunnelDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1cb9f7d17d25b6918bf1f9d0f0899927552e6ac9c3b253082bd4b1ebf1dd25db)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnelDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetFunnelDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29d05adc71097624cff48b6d1755c39589ab14e5a0be93ace52915c04ffd186b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetFunnelDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f4b06bcfbac7eb3786dc69f40c3d8e8a01fa9e39ee2eb3c08e4a5a2ee7ed30f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetFunnelDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c59bda0853d7eb84f0949b9347d940375863d03c97ee4ee4704dcc7576f7fdc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14309174a74c4ccdb5f1999630bcc0895a444040afecc3132da68bd7a579e6a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f1ec592d77a8c24a4ce57e424c7e234af26b7b819021ed553bb13d9a4089040)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f01f0544b5d47e160cb99c1580d8c21c3f0d6a33dc5fd51123bd8d9dbc00f68e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b8fbff832200930b03fd963307f3e8e2c81ec1c0e8be602e8a4c25ebe78a55da)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81f4581871b40b83862957e81b0e4ad1097c373a29b3bcdcf6a38e4d4a5f4701)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d59a671ec20cd1e213fbff6f5e25097b0e5d293ce1024a7fa56a0eb669fcf5e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e95078b839ef7aaa6a353d829a0e03784a62a43778fa1d087d1a1730224089a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e9bc239d286e48424524c2f05cbc28b88c68259ff6e837148e92d995cd01a80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01f0e0e24942b8cada6e9cf5aa0594810e3115800e5d911f61630ce418051edf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetFunnelInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55a2a35c8d5d11e0986c58dab280e28dc73044f4b5dede7884c2b748bd9df052)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnelInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetFunnelInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16da27e56b030ae88c2445640cfd04194494db7df4d2ab9b1b29bdc198f7f852)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b528e2955e95a2639bc642bf64a0a4880d22e2c71fb38a421150506569b24148)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0493d29594853c930ce3d05a40d031a871c88be5e1d69d08659ba77933db583)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetFunnelInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetFunnelInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetFunnelInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6539d599be8e7342bacb4c492ddb7a7b9e2f2d2dacc505bbaa5688307da71f48)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21fceba0d6768354f26a811503217927cf9cd31b3bea45ac6d6e160498c9d54c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageWidgetFunnelOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d0f2f6545b1f8feaac3b067774befa68e457cd9399d2642c385c250ca011ba0)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetFunnelOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5361d9a7ced494aed67622964bcf1f686da82addf31c1a289df6a32043d96e41)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dde6feea9845fdf87fafb64f8cfffbddffc924b2c6cef3e951b548b06f83d9a1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88b6cdb94df3888c22adced4f1661a7add5472b58eaa84d640c8ceb428e7c9c1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnel]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnel]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnel]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76637a88105678d2f0c3f437e6dc18564e20d126c46e46b21ebc6fc1eb3f2a9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetFunnelNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c18599d442fc91055a62517eda1609f83a90bff913719ef9f7be06aff0640fa5)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnelNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetFunnelNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__304d58510782c486f012360f9c06311ab9b6f7d832a6a8ba982c00284fa902da)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetFunnelNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a42fa844c0b2250ee106c9b4c9fed2b4d76a02ca0966047fd3dda9f68f158b59)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetFunnelNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e018ca08335cba86810a716eaa08292df209c1fa0abf06f4e4d2d6e8311fdc1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63ee0c2ea00364fc8e40043b6d96de6918a8d77b54b57fa776aeb946348c9640)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c034c46b8e6f6ab36707ad3e3f44ae6007c429634d3164cc840454c033caeed2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6a0a82fae381d175bb094d91cc4289b4899030a57324be951223c2d56f5ea8f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2083d024a1fea48a05e376d09dbf600ddd0facbf33a12a36d3957057c19a4200)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__617570785272fc9cb485f7719e4d7052a00a05781dcfcb092a47f2441fade482)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7fbca120b6c6f516b2cd2b5c239538dcfd595aef472707099cba7098ea5a48c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d79eb646d91b56c6df7c99c2a364ff4627da7bf21e1075e00317e7b92b39ee20)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetFunnelNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__beb2ddccb7811601f8c64a0bb2383e16e9591169bf812cd39910823382269871)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnelNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetFunnelNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c0bb32226dc75976f68238a0fd6e18179d9466d44a5fd503418a4982f0910ac5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetFunnelNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d08b43b6e0311c0d2ac6a469a4f4c6911ac28a559045b2f33f6f22d3d40a5b1)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetFunnelNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6bbbdfa2efd4ff7566fe2e438d3c227efd60b24a07bee3123c4b3b74601ed7d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc97f0a780ae4d9faaef49aea74d01877f4f9ac81523e74d753e0c302082c7a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afeedf3f2a72010f07fe0dc5b4864a9e1ac1c1b172a90805c8ec574d49125ae1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3587ef1071235a1ccaf56ebe45aaeed67261caeef5281d3457709cb8feb0f397)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__903c4e55eaca13efe8b360ae0566e11f6df8fd25f8c949d37dba58a0f459b195)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2cdf19629b55663bf85041b485dfa6dd6d58a74ef5b8b25cbe5965252f1cbe6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetFunnelNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetFunnelNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4738adda2401f71040c0494e241149685a6140cbab5cb682d33b8df4cb50749b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__040b6fe00f7061e82c6f908c7e985b11226f72e67733d17ec969753bcd3d2091)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetFunnelNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89458db9a02086eb56aa3df45d2ac2f06afdb7e50c70999408d91e2e8a491686)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnelNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetFunnelNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1ad947d37e3e34974c968ed85338c23cc7fa52d16be547874941ebeb53012ea)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetFunnelNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57c5cc910f341eba9ebdb5239247b3ccc8d3bf604202fe52f4765c4d9ecc0e3f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetFunnelNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eaa9416b661a70ea421c2af6865110c40f26e899866657c733ae0c7c6a097bad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4581c3718d63e1612b8e61ef7410c562e101c2a29dcede03c51fe4ad27418e9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7c1d2b0498c81bca9fd546862e72efb962772fbdf8bc28dd119cbb8cc43eda3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba511da48cdc3ed7a7200c38a4814777c0b57955f4520014b3e8ebfa87776409)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc4e4af05284402a00fe51ce48138c2cde5a761053f3c2614006d2b41912cec2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45398cb2136b0eee3848f808c340655703ab0cc8c1b2d5116bad1626f9f1f9d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e0b52f7ee13e27d143d96cf7e65dd09f5fddce4c73808f88468af1f2613ff85)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c77c19a1735f376cd9c51643ff2b682d4c3407eae0f4eeb00f0fb46394ee271)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7212d0d1203e0b5cf6564bd475e8784e8b82316533aa1c6fb2a4fa1510ffeb6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__150ba1ee3efc27bc1e44a5d3f5952945cdd2d70ead12e11d98188c360270deb6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58780fe58d1ca1310d5be9a55e972a6c68860a5a9987cbe9e4cb90c2d8e8ed94)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetFunnelInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__137909aa4c853fe36b1cd736f01f94150c0ca1c7ce7872604e0f3d73cc821bbe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__793590e33880a3e941d8ac7c49189de2a591f18eb06e8926dc545355168061ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b35903ba2a68160abf7c5a2456e5f81cd962c73968f49a99e074af0b352c59f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetFunnelColorsList:
        return typing.cast(OneDashboardPageWidgetFunnelColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetFunnelDataFormatList:
        return typing.cast(OneDashboardPageWidgetFunnelDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetFunnelInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetFunnelInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetFunnelNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetFunnelNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetFunnelNullValuesList:
        return typing.cast(OneDashboardPageWidgetFunnelNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetFunnelUnitsList":
        return typing.cast("OneDashboardPageWidgetFunnelUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetFunnelInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetFunnelInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0aa2a7d357a9e1173b0f806439414ad5829fcf17f64d2a4cc971fdea7fa8f0d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3ae0920f07552a7eb268a7345f7d5b056eb6c852122e7f0ea78210814b30d44)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8342254ebd02fbe1767c7ec5272c45c0e0657e2a8774de30545ed853cd8c463b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d24270658967482c61afb5297c564dcc4550cf22a24dc32d514cfa55c1c0459e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3dbf8c8230df7703d92b2ef129bbfeda9e3e8c1a68bcd879880a29a53bfcc001)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d846ed9d6c605e0ce8a18c8bbda3dd1f1b3c355eaa03709bae3613aea69c72c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__79d8c46fd94511ab72c2e47bf9c68a68aee4cf05c061644dbe5e5de5a496d566)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fed1d12433c0c6ce3e4e934fe86ba5d7181916c9033f9973110babfa31dee7db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b87e22b23df9145d3912e5597245e5d6de128baa82a033f32a03134ab16f4e45)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21f3154426217d7bc7f43d383c6432077b2574aeeab0d90fdb45de0efd844534)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd44c121e76981160b66891dc69ccde9d2bab4c1a278bb46fbbfd09e3009d6dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnel]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnel]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnel]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d22a4e82cf4c04d694410031fe7806629d618879919776ed89900ff190990c5e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetFunnelUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f53fbd080c870c0ee8ffc537b87d7dfdc90b11a70569df24622c57e31628298a)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnelUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetFunnelUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a26b2dc01a67cfe4908a6522a3177350b80277c7d3a10b10915b9bfb43bc3daf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetFunnelUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71d405658e3c3bc84f2a8dc53b5643bc92da2204dbfdbe689416c889b2ceb7ec)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetFunnelUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54089906551bc572c0d8a3ebb7ee76635d42311def867ce33a9ba759b0fc7d0f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46b146fdfa2928655c349f18a83862c2c825389f1a4def8fd7082ad65e951bcd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d243624396e42554c0c2df270d1aaf38b4c454c700a2bea02ed30111866e637)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9285b790c216f9c7932b9e7f3b6850c8bf43a85beda5a476f7bcf8d9f55069f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af7c6798870d8163c7eb01fb223b30d4b3b7f16081c907b29fa76b101860fb03)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetFunnelUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a90d999a43d82510d72bf11138ff4e28fa8a8e827c10f15f5a7b03af56267d2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetFunnelUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetFunnelUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetFunnelUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3567bc6cddd58f3a24490e5ae478ee1b26134936fd7e694971983d3673cce84b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61f2b945a4b1ead20eaa6f5f740f9d42889557c2bca355bd6e569c3f7dcafaf9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetFunnelUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7fbe38e22b0413db8a372dc0a95855290e623f8495a4aa6ee17c3945cc9dfd8b)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetFunnelUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetFunnelUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c90e8412ae295431671867e533b166a5fe8dcd9f0d0ac4ce63a260fdcba61cbf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetFunnelUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4381a1ad2f39bf1e2b86525efc2c10ef0b0477ea1df8dc950d260a39db6561cc)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetFunnelUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f11039f360e969f3755c1ce9a947430b08fbcc9f49578c5286fda3d901d8ed4e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__710898e2a9e1b5726b6f8f275e18f08098d477bb39d31327c4c7284f657bcf81)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88aa13f3e77b09d0d0412ea289efebac3b2044bfca88fbc92c9e65a222900acf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7498d7de8af74733f60e4eac0f8407436d39430a398132399b9a9737163dd32d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetFunnelUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetFunnelUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c73d7601e17738d47691fc793ab5d42e4553b40acac3625f2047eb969f294220)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d6d71833b3d1058d266fec97330c804fde3ecb0d0f48ddc583342043e91b4bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0395d543167c89b747f5d0b880e564ad3c030103969499cf8d35aa8393af4f90)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__296091113cad90ae229fe0157a2e0abb49f3aa488c61cbd611ae65834e1a1b43)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmap",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "filter_current_dashboard": "filterCurrentDashboard",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "linked_entity_guids": "linkedEntityGuids",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetHeatmap:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        filter_current_dashboard: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetHeatmapInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        linked_entity_guids: typing.Optional[typing.Sequence[builtins.str]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param filter_current_dashboard: Use this item to filter the current dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#filter_current_dashboard OneDashboard#filter_current_dashboard}
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param linked_entity_guids: Related entities. Currently only supports Dashboard entities, but may allow other cases in the future. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#linked_entity_guids OneDashboard#linked_entity_guids}
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetHeatmapInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a48668e851711da36e9562bf945f2418c3a6c87d91621b6b38cd7de2c3cb5f3)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument filter_current_dashboard", value=filter_current_dashboard, expected_type=type_hints["filter_current_dashboard"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument linked_entity_guids", value=linked_entity_guids, expected_type=type_hints["linked_entity_guids"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if filter_current_dashboard is not None:
            self._values["filter_current_dashboard"] = filter_current_dashboard
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if linked_entity_guids is not None:
            self._values["linked_entity_guids"] = linked_entity_guids
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def filter_current_dashboard(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Use this item to filter the current dashboard.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#filter_current_dashboard OneDashboard#filter_current_dashboard}
        '''
        result = self._values.get("filter_current_dashboard")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetHeatmapInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetHeatmapInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def linked_entity_guids(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Related entities. Currently only supports Dashboard entities, but may allow other cases in the future.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#linked_entity_guids OneDashboard#linked_entity_guids}
        '''
        result = self._values.get("linked_entity_guids")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmap(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetHeatmapColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfb2a129b94eb23d499b2ef28c1358f0a7cdb05e17df928d13c5cf89c26cf686)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmapColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHeatmapColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__752b38359e280fcb67704589b985515e668b796e9c98a553eb64d5b3d2763a10)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHeatmapColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d493d30cf41162cb0d90b923c0dd0617e48ce7625e5e899c9a531b1513c51d28)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHeatmapColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5ff27f68f7040ecffe679af4e6d8f6c03730055cad6ee65f12d37112b0e7c16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e59db47f7bf444366412731753b97ce8b3b8e8fec6f3194ea34607dcc17dc471)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3d99d62ad19d7a924dcc4fb43994937bc81e6b1fb71b8bdf1a167cf34b36dd1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ebaeec17d2d297c07e17bd0dd04bae1d5616353b2ec7823b5eb97650d26d3793)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a61b7f4ef8f4d723b3acd53850922b507a870be151993cadbce187a2c87b3b8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26f20e3b2872d391fb990a155a32ede1875704aa3cb09b5387061827e6682929)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetHeatmapColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetHeatmapColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6dd4b3f7a4d19ef3d3e497cdfa6d3b47bd4f6267a3103360f4f22ee9bed16925)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08c6a3d26eaa932e9a496156febbcf4ecb2e92c8e82b0eb72d4646749295d7c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetHeatmapColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0dbdc4def8653f566450428803e91cbe421c8d2fcd8f0c48a83468aa974db45)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmapColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHeatmapColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__624180519b4a04ab64eacec5d74450f5ac5ee394129f672cdc93f5bd70e32ea0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHeatmapColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f447e61b87e26fd7b4226f7e539faa1c448cd98d9c1db69a8286af8b337c2a06)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHeatmapColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a9b9662a16c22fc9081b1e378ed6985e5a5843fa7b77e61b06d20f7fc4c7107)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c07dedb8d6f580ebf510860ad3063bf19c388aa19ced3636f356ddf871241a1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6d76b5f7eb2090dacb4a42f5958cf72a11994d17007346f59a6f919ce67e26c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b61b6f10288b61d3a491ec375fd0b893d7b09996e248e7a843064c80622dffd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59a3d6b239ae4973dfc1497135413d30d6ffeab6ef61fa8b25ac35117fd5c7a9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__294584d64fc9958f3760fba47de3aa3f263f829064223c874beec2d92e627564)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e83ae499f56e8ed0c4c1bfba4a4f28cb5c6a5bc0a6f5d2b1f77525a491a9b15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c1377a95bacfef4fcc9f7b988e108b7d723a51d6902dbeac3c74400c5bb2cc7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetHeatmapDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__610c215581e402011d33fd14ccb62ae3e624d701a912b0806abd966c7dd2110f)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmapDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHeatmapDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e037922843b3ab4413ce56e524ae8b590676d1890d943dd3576fb9ce21a0a3a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHeatmapDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0706860b27644c69a1abcd2ced70c5ae698ed4df65b4e71bc62debf0f216dd0d)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHeatmapDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__681af71ecf9a1b442a8deea72d5eef6b8351b599c0504ffe9ab7266b0ca9d22a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd28cb852e2b829a8aae2dc7a568b6a2704c7dfaca10a8f8a61f421582543669)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__742bda594621a170b804964459727b45493a350a427150c3e8ef7badea3a022e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1fffe13a07229cf98f2b8134ff4a293e4204594cb281fdb3edbc6be750d03d4c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffc25ae61f3ad22faeab62eb7c6d0c28c5c18f083dda582d8b1c30e7c5a03b73)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b82dc4e9e4401491621bd6680aebf15dcc81c493133bbe5af827823348ab4b2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16ff7427d12fdc8e616e19656f05699529f7b936ae84e059dfc8036fb871169d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6592bcd4ebb2d86fc84be54b76a6a01d0dc229d53d3bcf9d602863dd049dfa48)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f3ff30318945aaa73de2bd3ea8a76131c5ff2f02ea754f26cebebb5a0f79bba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fad438e9cfd3ccbed7b41081a9b17c10cf4c8c95f1fb13d7a809494f0ebdf4e6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetHeatmapInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a18dea5b9006233a85f336326f4b63b099a066f4cb7796fb3991f4263a3e593)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmapInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHeatmapInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a4f6aef23a7d0001cf00afdb6a294e28922b40dae65aacec32754c5af5905d3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f932e2ff27c6a955c817d97e1680ec8e1cbbe0c46b218406e3e7b5b359a62ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55dc945ac52b2307366ec66efd35555a780630a31d0161e91e6a95423c64abe9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetHeatmapInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetHeatmapInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetHeatmapInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27fd8df132111454d0d946426b0dce3daefb184cc4bdebf8f33e347d42559fdc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__51caa13b0ebb5bdb86ea44014acc44d3d15ba1ce9bd3d45c9176913accf7d07a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageWidgetHeatmapOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9f49a9514adc18db6a887eadaae2bb3210799ea2d37dff953b5ebc00c02b906)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHeatmapOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d6b9c8c9f6a45cd39eb97b05b41c146b2e533ba170a55cb90f3f5e0111e0d0f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e42431a8819d7cb334d968d4d03d1f384bf4c4fb29173d6b9cc2e3f1d7960de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f919e8ac7d53e5765149e96db31be15c67c2c9e47ddc09c84c17506728a08e8d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmap]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmap]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmap]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d23626f4696aa43f80dd511ada0bc63dd55cf49f173b155e41ad5a964f24e96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetHeatmapNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48f6ea791b34a1fab69ea90cc7a764d46c48a5859ac6aee2d122e71d1a6e0b49)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmapNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHeatmapNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e982f44ccdcefa53701b5f47c5822292ebf6544e48b8780914f24b5c81251695)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHeatmapNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0872650b35cdbbcd0aef59b5ec366915af24e187dcdb5b3e0546c0220e346138)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHeatmapNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92b032d7134f4987cc5efe53eaf4ae3ca3080307480f04d63237359af3ef8ee5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f12c7348622730b8456a40e83aa67fbc3c0e3e9244f159f02853dd6e61f1ac1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b06789c59c116f26a5c79c03e4de1cb6268d1da8273e0183e9dc3a3a36ef5f50)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__64491ce37caedf0753c638035eaaead850a5ef3535af87b337563b13cee38395)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44749baacbf0262c14a862db751c5f78e4c4ff426389a467a66b410680bb331e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07a47a015b5eeb328ed06dc15ba5ed4bd5ff30d0e9300233f866e1b21cd8db04)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54ede34d867fb31c22914653b4f50ceaead4e29583161ac77e97a6f8531147df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df5ec99b27d6ef8cd032b44e314d88089262af84fd7953cb3a6459576557a940)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetHeatmapNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__862bf6a34be0de448cac39d3040702b0adba33928654dca21724a4cb5f837438)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmapNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHeatmapNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7379466b535dd36b56abcc940e29b11e3f92bd3d709efea73ddf5ccc2ed91fd1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHeatmapNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__995afa29f554e4b6f716c9fa5f0430f3907152e26f68d44f635d5aaa850d9b58)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHeatmapNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63f7148351b99ab8f9ecb5b7501db898c304eec505f8419a114c3421da92189d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70035210cbfeeba4883057c3ce5ba3bdd5459761b6210abf64d73b0bbdfaa475)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b251124e8a70ff9cce9f9930616a70aea1417260114b3a0167cef497b9bf2bc8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a6609bc9dc00e1d531b061861be6faa2bfb27967f08d232e71bd5dbad5fa9c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21452451f10879650e4d6ec98b010ee6291f2ad208f5c131fa146a6871d0e6ef)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32d19535c3eca1cec8d77e358c3ca292640087f8a2de7d8f8b3ccf019b7fb70c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f05e8753088a08b26971b4c8315fcd342d7b14398ab7d2f022181c30debe1b38)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba734a5609f90dfecd085a3e50684c3bdfdded005effe4abe8181343cf12ab5d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ef81b97765258e72f1f3eb9c2b35174e8f5662a887bde24971bc271538266e6)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0bf7682c3c19237226bf11d4a69084bf896abd4b100e1f71fdb4c5b0d37d0431)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c22c646c288feaf7a0cd07bf6d8d544c06ce0f9abcd4a2b72441bd3826e56936)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c45f755d69d2aae7c4995e342ef2e06ce71c24adff998d4b1a77556881e853f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1233351f5eefacdd85838d272fee2e86cb29c4f4dd635548478b9b6a0aa56ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e82139ed943ead5bcdf6039a0073125de9ae9a0194c112e34330b78f087afa6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8372ab573298abb715a14849844031fc0c0141cffe3029fd0a1fcabb3ddbe572)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b78ae28c070c3951ef38a5f9ce454956635de3baca9555bd005a24c2d695d109)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d02d5187699e94f0e61d5529fc356a2795b4a3cac66e7c7759acf5a4861a03b2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdf529f9102c47b389c0ddeadff566c31d234598389da3bdb28b840b148b8483)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f943efbbf0c4314f98c014d56496d692911392ba28e435624dd324ab53d6d123)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6aee874e2c9d9750dcb6f1716b207575761476123496be60c7baae824b1818f1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00164ea48710504127850e63dbf4538b392728673f33071b01c5379d8513548f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46e246f71a5478067fe056cdda80295217e80f606292b5b287792908d21cff16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetHeatmapInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1cb92828002a2e7bf6629157c109bb376b5818eaea46a097ec37a88d5a2c953e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dcfd227c4de0d24bf50c0c7a92984f33138fa83009d4be79d5f4cfb600cadf2a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7452d477d5f507d43bb5ad7ead0df437904a0ff8597f0c387b50a0606f09a678)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetFilterCurrentDashboard")
    def reset_filter_current_dashboard(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterCurrentDashboard", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetLinkedEntityGuids")
    def reset_linked_entity_guids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLinkedEntityGuids", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetHeatmapColorsList:
        return typing.cast(OneDashboardPageWidgetHeatmapColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetHeatmapDataFormatList:
        return typing.cast(OneDashboardPageWidgetHeatmapDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetHeatmapInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetHeatmapInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetHeatmapNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetHeatmapNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetHeatmapNullValuesList:
        return typing.cast(OneDashboardPageWidgetHeatmapNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetHeatmapUnitsList":
        return typing.cast("OneDashboardPageWidgetHeatmapUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="filterCurrentDashboardInput")
    def filter_current_dashboard_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "filterCurrentDashboardInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetHeatmapInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetHeatmapInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="linkedEntityGuidsInput")
    def linked_entity_guids_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "linkedEntityGuidsInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9abd1b40d8a1f78d80eb6fdf923ba5203e87bcee56bd1a35179085f479abebf4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d22222432ad2e73b22f9bfe07c7c47f8dfcf89aa645fb961c29bb58648007f73)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filterCurrentDashboard")
    def filter_current_dashboard(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "filterCurrentDashboard"))

    @filter_current_dashboard.setter
    def filter_current_dashboard(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef559e2bb6d62fd16c601730fbd291e8f5c99d289f0892edca0d0f45f27c2e45)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filterCurrentDashboard", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99adce21d444150c4fff8cf2b58731b7762fcd4eb944547f0881621bc76831d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3532fe23ad894dc35fd8bee4d3cfe470d7a56877b192a7c39d0e6002845620c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef1f8211753baabefd80b8c7bc3849a91f28d17e05c9973cd445d423f84b8021)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="linkedEntityGuids")
    def linked_entity_guids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "linkedEntityGuids"))

    @linked_entity_guids.setter
    def linked_entity_guids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6cead5768d805a654e389dfe26c11ab254388cc9c981ea7f61e32262290a8b8b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "linkedEntityGuids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0848dc8be0328bdf349f635313c0dfb9a61cc8cc633e52a11e3099221313b6ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32ac7657c875baa52fde7960de56b697b4b03df37f49da61b129b5d5b3e4f9b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6e22bb6432ccfb959a2da6bba3ca2a5659bcb1f2c67df180aeff59ec752627f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec792db211d5952157b01d8d02b1b7c458cbf5f43e1e0032ab41edf563bf6de4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef0301019c478856afdd31dc511e8b8307fba8f22e139e5be7266149d468f53a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bac29c0d3c83fc418000f82c3a368acf1056d070c8730ba5f4e508361308b7fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmap]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmap]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmap]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f430c66f13f645b2dfa7fc39df2e05c8e8de8852ed511e6acce23761b52bef1d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetHeatmapUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__736abe77f4ceca8106db75de1a9db5a382276dd3a29f8446aabc45c80425f2f9)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmapUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHeatmapUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a707f485daf7c1d753b447976dbd47f9fc15191b1371b83a91fc106199e1ad0c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHeatmapUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93c87c24a86debe511f72bbd54755b5fe6be1de418c9f2fd75be3ea1f1dd5e8e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHeatmapUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c78937ee6c2ca15f06d9f1a03cd3f3b0ad9abd2b97b34608556a36d8609d073e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__accb9218a0da76a12f4b78d76febcf4a5a54bf1aedd8048f2c8d6496ae1304e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__986e97b2cfc44e5d1d8e7a96d8f5b74da017b7d06876c78eab2c7d4b64f62782)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30c93978bfb3f13e9e26ab707fc09ff4877cd921136cc2723955821b937c3ece)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3ec5086222905b7d6bc808b934746eee67a151601f70cf91646ebe2cd368434d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHeatmapUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5cdd2be041d26db03e27857e81a5bbbea8157ff1f41cf7140ae1dc9a701a77a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetHeatmapUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetHeatmapUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHeatmapUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14975c0dd9d0701c91fee5dc3f49722322b534479c1785ed80e2c6a354cfc517)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bb8c76b8698b01eb27654886a132a1e67a450612059036e2ac063cfb88d4e9c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetHeatmapUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2dc70c068462444eea504e9b5f5cb070e066f89af107521d8edee6ceebf9af2b)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHeatmapUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHeatmapUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__952368d72f19f043b4fe05c54926a0cb79141d5728b57d3a78a126b06879f7e0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHeatmapUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84151f5b0880f8c864cc7d21473a00f498f980fd4042e02f7a9262d1278db198)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHeatmapUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43329e8a65ec16bc31bc6baa371593753874be489ff19d2a2cbc36d148dc7f12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__396327179cc5eb0001d2126adf8b4ef3d8020ad242ba31ead87542c5b2c2b615)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db0353be3c58592de95b5415f04c712e63191a60aaf30ae563f3a727e331fe37)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7514a8b3dcd3a72cb426fd9f2b40b3b4a282195248889b44b744feca09cedc08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHeatmapUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHeatmapUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a666b25755d65df406599173d84b937abbccca349c3809a28ac2e851c3106c49)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82514252a9ec72b23b36d674cf3d8f49023d9733c7f48f47e4786f64e1e8c5d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b38bb0f5a2f3ddd4a89af941a54be3ae9088313572f7bf5d6dfcd9bcfedff68)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd88a2da4dc3ea012faed8637bc2d96400a2edf6cbddfa357da4a031729a39dc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogram",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetHistogram:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetHistogramInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetHistogramInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81b4aa18dfd455e9a25c069343ad099e643e61975ecc01a5a7679dc43460b07a)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetHistogramInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetHistogramInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogram(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetHistogramColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e74ce41a93874810262a455b1e253d1dbced3eff2d058ccf1177ba898515884e)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogramColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHistogramColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b224ddc469d72e7a4f378991bcc29ff6c2286e688ed559bd70abba85b1d3bef)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHistogramColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__79e389b1a2d3a7e410f91d2b5c7d6ab1f05c0741f9b87cdd8148d36ac5b5a4e8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHistogramColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a46d4e69ba1a5bc6c1cbc252236adc67add74d71814b1053435efa2fdff28883)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71bca1e5f1b20745ed9bb89be2e9869d8a25d2516a9a2c271f915a7bc1390d61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef0f38cb78d874869c50ff08d95f881f0228ef25e365e0fd11927f3b04c56cca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__561454c97c253360ee33e702405867dd813776aed3024e370ff95f969737516d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__edbde1b294adcead66db33d5fdbb08de8512880bff313a00e730935b6df0730a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab0ba8b22d05816c46ab888b773e5f08a8e4a9dfffc0b281015481d030fe8224)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetHistogramColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetHistogramColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01f04c593a11e949565d6e8d6e43a82c646d23a77a340d526eacd9233f1d1eba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a8b6e276c4aea36c0e114d14bd58ee2daffa9761c3ca74da1b4c9ae2b786bcd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetHistogramColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8afc9ac0de5e6410873792fa2a8576f17a62fe7032fdcaca4aa54a19ada7e2fa)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogramColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHistogramColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03f9e209a076723872afba9399dc4de4e43b46bf7bbf0ea9c9191f423e0b9fcd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHistogramColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81991d504f6e6d4a3718cd493fbbe01776c523b3e956f85e64d16256a490f524)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHistogramColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00f2042b99f9a2e1bb7a5b567e03b8db02f6621276c22cd858a5884eaa2a67f8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3e7750c4b0135042c116873c9eeabcd4597ce875d964a5b4705a621c9a965d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b93c8c4376cc796ffb38830856eb021bdc05cb9beaca557af00e1d4bc9f8008)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abfa8a061af75add47d08e680d31d89b50c3406287c351f11d02f062536c568c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f0193169d5d57062298cb56a281ad6b854378d131657fa3a592dda4596440cae)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f046a31fdbaa7c0efe28a56a60cef14c0af12b7ee54e9f13827c77669b4b665e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a0afc970f9c819c9a64e5f8e5a7f9a076209fc98639ca53d5771bbc37f62fd0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63d53aa91de6973dbe819091f1be0b87f7039cb03a108e224fbf21a35fe13374)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetHistogramDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2e8079a03ba37e06f9def80fd4014140a599ca1bedde16eb92c5f36c328b0a7)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogramDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHistogramDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9aeb33e38f383de4513c0023477454f2b2b4a828881dbcfbdc4dee9dafe41b43)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHistogramDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00c432ec253f9b298aa57ae3b09ed5f9063981bdb1ac9abb8edae0c128c09c84)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHistogramDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7904f3b89588423224d1385db4a925d571112f3b2575efc0433c7e3e2c6aa1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6892d484f8f22b27298b07b98abfb46cddc0126b7cda78e47ec7770d75b0920a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db9f4a016bf0e3a3b01cbe042d5a79a4fee8d74eaad8a396c289dc3cdb3f60f5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b071f703ba78f960a8fbeace6dfeaa221255b02752e8a9d7888a4c189d0958b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9092f5d64c2b1fddc1e825a5e3527fa6d17d3fad43b915f43ef079a00474e459)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b4b17080c79edc4ba8d1a3e120cf5fc59fdd44ba46ddb5719d5281cce0077e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af0665adc530813d8a9c30ce9f4e5e45e1d3f8da7826ebcdbd63ff9276fd4bdb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c47237f49a87a5ba3312f70f6e7b118dab8897b27d0e42e21179c31e41c362b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7df054ab54c82ab3142e1a335081181aab41262a46887d5875d4fbbef381075)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d001961f8ea62d8fe89103fdbf0c9fd3514f7d23f90ddf6d41d712120137ab6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetHistogramInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e52c3d30b5bf2db650fd875b8d4b6f6add489ff228f52765e763ea2825f66309)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogramInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHistogramInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e68db68bab3a3f8f82868fdccfa596f7b3564187ba01dc09506a3bd8eccce68)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b11de76b2ece6ec8c795d5a854c4c099d14dd6f86f27abbfc1efd23c58758d27)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c56a4f257932c3a09f6c750f58c12d9e461e47bf54ddddd450fd0da39553d52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetHistogramInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetHistogramInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetHistogramInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__747c405545e7f6509767b85e152608652effd03af58ae53261bd6888e77c82ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bdbc753eb485882022e483f950ed5ba3a004e02505bc09d3e24ddf7407a21e2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHistogramOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__134d64b2a4e3e32fb17f43e23f113f4e6490778b62e7bdc74c961712e73cbfbd)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHistogramOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__551efabbf8b6c3e236c38bcf66f4df5d6892cf5433fadff5e5295c948bcf7885)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce31c80552a3e7a4946008044af99b99c58e449494f800349cd5fb51edf24e5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab1abeb843fe9809ef99f6f284fa54e4f2d0f1029dcc1ca070f624b41110ef65)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogram]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogram]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogram]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35da2e69f7f8b923ace71d42847ca72cf2f6b4f49c50eb2a2261e60cbfb9e7c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetHistogramNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0960a9b185a5c7ab276087057011e25a6b3569b169865dc93219771e6db56e0a)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogramNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHistogramNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__477f5b48f4fbc6126151ce433af47e1d2b89e6c88fccc9b2e17a80cf9cdd0c24)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHistogramNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abab7167b3b5672991d21c8d78b89291fce3d7735ef11e293c8193b244f56823)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHistogramNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d59e280929e547b88de7338a57e9a1dc466856aa357e103ccbf1d73e28d5a9a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4781ea0ba02c72c39a65eeccc6b8907b94845db2d58afa16d818a823b56e85d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0074345df9f11abc8d5c6eb57be30a4497518b450bfe87742be670a11803986b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be7fc5e90430d1399f0cf7a3522d237b3f0502068bef3c3db2803fdd6ac1ffbd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__539b0a13f9d6f024250eb539a23601702c2200b4dade882c6a8a99d8f23cb91c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc0aaf10599f0bc10335914ebf8fa7b3e9c322e21fb4d8b1aaa212410c4ba438)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c93e0d6b02564a053feebe4970e6c965ed2788019fed15f03716775cbe98031)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6300feb44433e811c485b5f7eee5ddb0c090d4fdea770ceeea15df79479f1ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetHistogramNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b34d21ae929b3e238a130d183cba7e12dd46e0d02532ab9b5ef0b6429b1aa757)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogramNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHistogramNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57b933fc4bc67043ef1a25b00a3fc499318dcbdc4813256e8664ec5e10f3df92)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHistogramNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08a50e2fff5d815c63bd1d97ec9ac1f09b811f2e81b1b8d410383fb3351e556d)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHistogramNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c12a18cfae37e4923b72705933e07e88bd49618ec53db04a33adfb4ab657c751)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3a472ca26ed937c61cc6d0c089d1c922bc501d964b3b80424bac4dda9460b0f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d362a9bdb0fbb29b0e8c557fb93045e68c39e066131df2434e230d5f9f0d4bd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__102cda33b17a878a221cb7047ab3d246ddd13a62a12068ae9eec3b7897455f57)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__51c03d42731b231b3c1308bcfde87fcb2e72a211d2d913dec767a7a98031d8dd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a7473289ae50e50d62349891df6f4b661d09fa0522c5a132acd61e1008d97ff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetHistogramNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetHistogramNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06e216ec607db4fffe2ef0056b28e85d2f29033eb90bff02c560767e252538bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__838a7fb86a88acc744c8e74679be1794315f41eea4a3d47eef8d63ee009ec32f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetHistogramNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0bbef4c58750e47a03aba36016145a32578f170f93ec496a9624e7985e9493f2)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogramNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHistogramNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6657d51f102acedfab3680fceca037052d6f43507dc76361fa7450aff1408b0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHistogramNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__202a08dadbd159ede3218d9c4df4b8bfc1a8f73fce9443370a64867a2396e761)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHistogramNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__576b6bdc7b4bffc293ff2386c976b380113e386291d3d26b81ac3de30b173047)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a34ffc15a777d5af073b7c1d4c6fcc824e4e258b4c6bbd943e7f1ed7bd44662c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c92d6afb252638c611e27f65f4f1f8148e3ef5bda6762ae0fa1e7b97c1fe58f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f18fac44fbae4ba784e7c4b1d14e452a5505717b100dae57c120eea99fff0591)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__200f8359a176ac45dafad77b973a2c92dd803d88a6ce91059033dd485e75738e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1b3944c369d16123c334de37c896e5de687121f9ad187a4c1077f70b3fc74b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca206a8f03dc7a05b94a11ac1c54a415222097beb1f422dd9914094ae746460d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80cac8b9ed6471be6c66903c43bb9c6f38320c5ed2c7694cda37529871d3c410)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__edcd1ca27e962053e4bdfc4e45f2aa19c03849c71c50d7ec6c32d134884d8e17)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c1a235375591ad690cde246b5d32ff41dd0ea69e5aa39967306f6099b9b5323a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eea8506209c94bf84f68aacf76ce80457dffc831016e26141207117fb85fc976)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetHistogramInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__856797a553b2ebb48d41568daf37e7311f3f2da4efd8f6b5d055f79b9481eee5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1594ebfe7e6e3a447b2f183cd8439420be0b91605740144932eb82a0980b3aa9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9e5fdf1dd4b6a096c7baf7b2ca1d10f62f557d7f73d16f44b3245db5a593f7b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetHistogramColorsList:
        return typing.cast(OneDashboardPageWidgetHistogramColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetHistogramDataFormatList:
        return typing.cast(OneDashboardPageWidgetHistogramDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetHistogramInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetHistogramInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetHistogramNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetHistogramNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetHistogramNullValuesList:
        return typing.cast(OneDashboardPageWidgetHistogramNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetHistogramUnitsList":
        return typing.cast("OneDashboardPageWidgetHistogramUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetHistogramInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetHistogramInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1ed59404e17bd667c659646b329bc0226921210927b6730def796b2649eff78)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7da601a0b810cb31e17c271f156aebf7f7808f4d4b02e28fa618bff271a79459)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2937e081bdd8d5494995d827912515ffff9f16c81508d9d64beaed44721f7039)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e8cb99b41a4641f1d6bca29eebd410bc7f9bd7cfddc0f3c2cda72a17aa87c79c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da5fafe63cfd8713116bcc3431b17c951ab56fb9984dfdb2814a1d257e0c1638)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54ff1cbcc0d6fc55cfdc16ff31abbe33f50ca6e8618d6fe6a6354e32bbf2f588)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f480d4324c25cd6634803148565a5cf47b5d5b07ed308d1e7cc33b6abbde04a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d83f1b001f7b9ba2cf3d4099c0c428df293d34f43ac3ed014ba779b168d8558)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc11d3a37fa43ba0f0aef0156b49987969d239cdfb03e8da2c9ad29c0aed661a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab717f2579f61d703884e6156606eee790728ecfc625e38a4757384935beaa54)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__47a6b19a9791a649bda9f716192b437a57a81cddca6d3583c6bdf0fc2ef9ed52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogram]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogram]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogram]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c73d2d0888584fab272cc493928e6c0ef0e4cc6ed482adf0146f157b80e9c87c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetHistogramUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__067e48839e9387e42c86ba6880f10a42f5521a25b9a8db65130ad154a7cec15d)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogramUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHistogramUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c733f67ae44c9a5ee617a80ae5e912a557b29e984d6fc1b3ed23a1b58b6402d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHistogramUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8866568abd1e72c1477e1c8ce877ec753d1546607251ce45b0e0dd3f93cbe42f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHistogramUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5adb3b59342590a8738c631280eb727b1e2c0d02f86aa9876e543a73f151efdb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80b4e1223699568047bf629ed9946af2f5c97dfa9d3f5963d0a960f26d6f526c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dcf91c0d9a62cb7e5fc01d7da203aeba03d180fec06ab04ab113c10bc3472884)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e8b9e303544d197f659687441ca22dfc1da28e1400bb44e7b264440fd2846d75)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9cae951f9f9b345bf65fb299609569df58d279b46c96c7d8fba4ab306b16bbe3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetHistogramUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c80a0862c95480343ab009b281f2e1342c8ebee54f70009efb2ac2953afab30)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetHistogramUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetHistogramUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetHistogramUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ed016522cb65cc0241b3a9fd1a117c5a0dffeda88ec7687729a729a5504767cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec04a7f4c3f0f9d432e0cef15ddf29843da91cd1cddd071b3f893380dc172162)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetHistogramUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0570dd1a5e4b75d3f655cb593af661d345575af0f8df7f0519d1a6d37ad43dd)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetHistogramUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetHistogramUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d6a85a39873db7729920f4b287ce725ccee53a90f134d3b2df67ac11016b3a5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetHistogramUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5634f2707ab5f0a19f27fb241fe2df2c5cf04b4a208210d14dc16516c30741bc)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetHistogramUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__523b1d96cc3529202494211b601821c36ff6f0ea6e71463e3b32c962bfc8ba89)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2cb656355ea5fd1570c6be222b7bf755dcad97f1677d3ba50a8cf64c436395e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9b92acf9d84518f3a49e578f14f793954d954b1f44e4baadfe3ff382a749c23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8fcc7bbfa807fd79124620e4104391cc7cb67306edf8c5e04a2fc931b270983e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetHistogramUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetHistogramUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5b88ef0cb26eb3895c3152fb55fb64f773eb9a6b51036077747264b591461ef)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57e67b09e47bdc9b5fe32a4abc27b78b2cf08d4c07b67dbe387da97ade00e8a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba256026d7b28ead6de762f9aa4943b2952958f29e0a36af6bc765e87e577a10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ccb52a5edf7befb5c431cc048385912dee87bcf9eb915fe3e95ee0fc3ed027b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJson",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetJson:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetJsonInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetJsonInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc0c7da08740c8d81ea8e144152c334411c5fb54c9d1c704be0d8582e3db7f60)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetJsonInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetJsonInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJson(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetJsonColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__42bf75611fb44e50e9c8c33324af190dc1138afbabe3cdba6e38a4e8853e4541)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJsonColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetJsonColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a33728dbea85533e09afd7570e2de72c746a31d219c0063593572aefeb1a249)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetJsonColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__657960956d08473de22e85e98e2a682046964acc4ff72b3da356893e5374b4a8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetJsonColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09332d7a337ed475fe216e2d8b60e48918a7fde87029bae30912e975ade66717)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0988079bb5ee4b209858f18c94c3bd84c8c97527d950ad415f7f5f12605f6efa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6638fdaca0df7025f4ca2778c04e822114848efdc6c08c42ca216b85e131546)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__993ae9992fdee752498e35817d6c5d7da7c76b4519898ac202236c32b6b52e27)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d593bf894dafe0bb76bf372f0ad51077d973ab93be30c1d78ed65ad3d063abcf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d525c138b8ba63fd3eca17c3efed00f1735ec589eab7906da6dc31188ba8a4b7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetJsonColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetJsonColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d368d1ea49e0900b1771b69472da8dac830ee6b9e93129da602441b8d63b3472)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67cf6af8d25e948bade72a35d35cd9c74687cebf38e10a9d2e928d1b5a762429)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetJsonColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75fba15526d974a96afba8a780099ecd17b69da5e4e76ee456e80b772cd78e42)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJsonColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetJsonColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d21859aa802deccc98f35a3ab2fa85d9ca0a49b636e3f89ee5f0994012fa2ca3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetJsonColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57fa222aa6d5f22941ba8f2b9550f0fe3c9c0cbf157162b348a037ef20fe9cba)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetJsonColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84fdbdce7d8ee6b0cd5a08a5e8a0dec30a8a731dac27d81b3dd3ef6b2a7c62d0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68df9cfd3d558270683c722b5dcaba943c4f9a358dda47c56f301ad99aa488ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__944c9eaf8f4765f466bc77f425dcffffe45a271aaf75d587d74d76610c17a288)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5c76d9f65b151b2822b44319583685ab3ffab1504e9bd3e2f3d52e9997f02c1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a4e172bb4578533eb1fab0198f8e515b3261d1608ffd8fd05df5136df8c1c8e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d6ea01b9d2fd567927b33a17b57bb2b363f02a3fa69f7d39d13e8f0382385a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3588aaa291f4416267210f013a25022e39f3bedd1cb7602e417c8f683022a4b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b4e6e8dd0b79e3986bd2dcb1704fe1ea052a030816469fe384e8992d57c678b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetJsonDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a40a9ef01ababd4f15b0832162e698b02e0d0d8c98a2c984793d8558ef75e39)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJsonDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetJsonDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa156b067fa88da038d95c7cb831fd006cadf1bb8a8d1449ddf787f4b0e51568)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetJsonDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1ab281ff2c632a00fd780c7082d7a9d7485d9c82c1605f75ae52b6b2c8acba8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetJsonDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef07469601a27deb1a971fe6cbd46e2d43aff8688552ac0c2e4c2011969d51c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ac41fb64b97953076972a6df6d97e69cde027d532d67b79b63019836c7d3bab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82f70914da168d1eb8c406f7b5463d0aa05cd23e03cc67e7a849cb797bb9bc9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__316da5db37ffe1f963df7019a82059a5ee0bac74995743c25346f00b0732cccb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9765ba828aeae30d06c6e6f468f469765cff251931d4cc390d1203e6d422b1b0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__697fdcbed0f4492e3307247ab3c88cad8ff644d31b92c21e97daf34e7c68b145)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad77bab08c1c7746da05ad5bf08d0ad06187ab2dfabee97c927c59736023b973)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__647d00f27cfd904a53540b2224a018de7b5dd56c5b3eed85d74d6cbfce5b62a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2d67eb2cdf0dbf9672c3ec9e763072b92ce04f45e738c4eceec096077efc07c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b471cea3a969be8e191d5118eee8f258cd3c8822c0167eea7df545033a4ea57a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetJsonInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46edace2b69bcc7eae737ff4d5bce58822541fb52e7c2195ee9c15b8015c440a)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJsonInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetJsonInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7eb2a4718143731378ab337fd724c1852a47e45d39ca7ff6c248687c443882d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36e82b9e9dd3f511e5763ce11bb670be70286cc8110b37acefb46cf686ef2684)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__756bf29d85869453c645fc098ac9058fad2c3122d2e2c5f59c0d1f7b13e70131)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetJsonInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetJsonInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetJsonInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c75e5d5a234c54cad21623b322bfcab44cde6f2eb105b25d414507d1e48f40a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__282760c11198cf171a3fa1e162c3be860a192ed49a5871535666a7f9e97d211b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageWidgetJsonOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93b8f2a79f64a42fb0d9b4926a963cca9eee62fbc391f28b7d1ef2a231c52e45)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetJsonOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2203d0d6593bd758659857610be4edb5ffcf7e64089cfe7fd42cf12eef303be)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0df47a0c164cd86551428b2a117ae279a716451ac02cd1598ef5f79b8b724a6a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ac1f4cec76829acf5043ad93e0a36cb87560b0d038f833ad3f9de620e2cf83c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJson]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJson]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJson]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8aea7327d7e76db90b1eb66aeea782daf5a6e4e03d5031076d1c439ef65400b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetJsonNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b644b5c3d27e0e7c4665fd93b743ac4856e0f6baf4cad80991b9a524dc07258)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJsonNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetJsonNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70707c438dabb738e093c72dfebba5e5c96f2d04e9450f360b5dace34a770dca)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetJsonNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__178f1370df3ae1c0b8e4195891306c92ba30664e62a3735c140afabca080420f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetJsonNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61ac9c42920567ae5aab8e07ba921286fd99d492545969ffaca52c2b1d18235f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1409374d4ea3cd972ababe9e9ebca4eb06f6cea05dce4ef122323115a7d07d03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28c34cd4776caddaa86654a909cd633baa7614efe5fe0790afa9d0b8b480cf9e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3c8a408091e46575805940818632949c315ba1d6fdfd61b6f6fb05360c70b47)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a236c367885381343585a09804589944a5fbbf0bddb8b3a71329dbb2c73551bf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16f5f1e863c9bae6199c15a523d48571828b6f85fa52aa98ea6c3d96743eb089)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ae172cc5f3c0eda58d199f29e77fba4534ab7b4724c055b14b1747d18b8a264)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a401156f408835684fa95f04843a1373d41316a5841c73b90fcd07486887105)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetJsonNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85c10232417d48233773b0c50a84462debc514753d8c184f5258dfa22e781adb)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJsonNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetJsonNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__51f818f4bd4f361e621f332e4aca67239f95edbedfc40bf99de65d95e8ca3b0c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetJsonNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a5df088655d8e9874cf283cf3dfbb7ba7fa565b5b65479269e29f6fc9e7238e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetJsonNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa3fc53c360dd433a9b4da7caacf427081bb74824919df8582eb368ab759b25b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c82f2aa2cd665a5d36edb710bd6b7e822f6182dd85fb3c82304a67106071aa40)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d58d1f3b36dfeae499f53c4e2fa601d2fbce80539794a63b63111335924590f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80a7bc0901052048cc11b93de10f13322b2f75ab33ac9d34fa2decd57aa03908)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfa270cf6bbe91e84fbfe24ac2c5542739aadc03b8ad911dc9e781e452052370)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd57adc59e31b53a0682e3fbc6af5d151411629d44663ddbff85b0befc42162d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetJsonNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetJsonNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27fea028d60de5c844a2da72cd09340deb0063698f904d83277edb83488ee04b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b497ae730f657d66c1b32d06be314abb76022c6b5f54a2c1336e66a364eab88e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetJsonNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da3b816a92ae284ebdc569698be11dc40a2c171167f89d2e5c7e9e33f9cc6e8b)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJsonNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetJsonNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f5e79208a325c362a38088435ff4edea18cf4f055827c9528183364be9c97cf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetJsonNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__046aa914776677c754d5e1bd177ba8705df22a3c08946ce59b508947e18f1cb4)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetJsonNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa0e544aaa4532bdc510f18b330270c29ff07d482a179155fd11b95c47ab34ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2fecbf98f8cb8f729acb07de458b725336d8decfe7be4028684aac02ffd7e651)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c5991e330dd0def3e04d96bf5a52c9437456bc0ab8bde9af4ceb83e1ccbb025)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8994e58f0e2674e9b969d52775916b46bfbc35c3e25838858195ed5929c923b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7ef5d50e87a9c34055bc3f8dc0101246019358465fa873394a9e9fb6e092007)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e734936ea351c7c7e48c0c2f7cc14f281dc73009d19aded082be43da421938c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3bf741f9b855e557e1bc0507c83381a027db498b041cda93aa28f8c4dc40321b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8508c1ae242ca894384f3c7bcf323a67178b6e6259aaa2514a35261a6a393e66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d76b2e18c406bd5291d3d9f9885f2077f67e0c04ad6caa6b271cfb0edc1a8f7e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9703537bf46c3b6f84a005be962ea280c30f56290e5b2d82ddc53bca710d79b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16b4d62153a1ab9ddf646deadf24d554081834f92485a579cf4481838e57fe2c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetJsonInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68f49a3a167acd4007da90ddd15f6e8676ba5709eba0418eb45bf43cd896f550)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bf7e3925751ab515e52f7e7e7642acd2d03e66b0988bc55c9a6afb6c375e4ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0b74471acd60b0ef683f9801dfdbe17f94fe0201f1cb9df8b5958d7618ccf43)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetJsonColorsList:
        return typing.cast(OneDashboardPageWidgetJsonColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetJsonDataFormatList:
        return typing.cast(OneDashboardPageWidgetJsonDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetJsonInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetJsonInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetJsonNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetJsonNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetJsonNullValuesList:
        return typing.cast(OneDashboardPageWidgetJsonNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetJsonUnitsList":
        return typing.cast("OneDashboardPageWidgetJsonUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetJsonInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetJsonInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65e181007ab327b04f61c91ac379141b30e9c67d2b15d0e638b82bc2c71ff51a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56c8f5aceb078ba02b805f91f325f24a0c468dd39d78f7c9d50e064cfe72c9e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6899733ce2ea2d870c11e3150c0f6a0b477de931492d1e92ab7b956e9949e6d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39930dffa26f369afa3cd1691c85a1ef1543ca75f3748399f21268543f1ea8e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a22230b6e8b0eeaa852bc9e12a2b8fe4a6c945a5830ff0d2c28f07315174dd4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d509f18116dcb6061a43500ddac99bfcc19101e2ddaa1f52c69a666c4411d5d6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de568b12bda7868542d6003266158171c218b3d630a1d44631ef770283eef3f5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86ffdffe59db666bc41d1a8520846de54a9249afa98f165087126d5ef0064925)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e18ec56b5fa54bff76177bcbbcfae0d07878373cbc87d23d8ec80189fe88154)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__901c30824ac7fb33b92cf89758fb985be9053e7fdbe6349a726715709806ff96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ce0e2f185bc55701cbe122f5f7eb0162776d3d9d67ddca9a2de4b3e356bac2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJson]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJson]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJson]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c65e103e464726157303b7864c547f91698271946ec34779080ebbd11def47af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetJsonUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07df4c09e5bde1f1b664ec383317ed298ed43485009192fdf72bcffba2b5d106)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJsonUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetJsonUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f12e8034921c119e1550459f8fe5ac264de22e559d4a44424c3db7de04495c20)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetJsonUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f75ba481ea41eb0193e94f8cc16c2728e6df239a9c2045183ae22321f9ee8128)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetJsonUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__77093d8b36385b449ed0c62088073ab01491946c01e9b4e8eda0c60c50d3f275)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67d01013802448184c5cc4a0df87e45ed548abe44f0dd3a4a8706a19613aa65c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff22ce2b68abcfe0aae6a03b6c52f9091cfefa5625cce54cd11969ca396f8443)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81ad6b193e11d1576ba10bc7dbfa8def52e6f2c33ec2f9a51fa68661474fe563)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6497028c328421b21e6d629d3cd8d5e4ccb4e673dac4cc03875319a7e0572644)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetJsonUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d66272fd93263da7c241da77cdc740db9c5a5dbffd07e6477efeb83b99ca2b3a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetJsonUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetJsonUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetJsonUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1699c5b0ac39ceb6d51925722081c8c86c5a3532d023e6ba171133ee731e0f4e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c17fa9a2027f9957e6f59520b0154ce6dfd16593b00f67261f91728bfbb03b34)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetJsonUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1bc2ec0e51ad6a5cdaaf6747399a964310babc26736ae6ea30c58633d2bc70bb)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetJsonUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetJsonUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0646349caf533a895169506df8776f4e76a847f93f17ec75eb299d86b79c11a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetJsonUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80b853ec4713a1bda60b0e7cbe765f9b3ced244390e2362d11c35d839f0d8139)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetJsonUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__79bb9efaaaf35378e44f6aafbddb7a57f30da767df0f9d5aa0a2bce843511370)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cfdc153a4373b5d92cffccbd89252a1ddbdf04e7f1d883a5fc9f18005338fd86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5b67798e60773a42e49383e0c56caa80dde607f26b2f2f76115f06281cc67ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61e10d51cda3349586cac83dd2094ce5c76e9578a61eaeb67e122d6c09aff3c5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetJsonUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetJsonUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6827fc888ab8c09c11b61754410d07e1431b8553efb3482839fba4d3d64cee1e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac03807e478bd4f10eb0ecc522e28de01cbfaae516e68b75212e145387e84fb2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0d1b238270653520b0b9ef42a1bff66775061905bc70758e9605b2115ae6f0a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a00ea021c66adb44efed2a07adb60b95bbe8ab2ef988708759c0ad445fe1727)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLine",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "is_label_visible": "isLabelVisible",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "threshold": "threshold",
        "tooltip": "tooltip",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
        "y_axis_left_zero": "yAxisLeftZero",
        "y_axis_right": "yAxisRight",
    },
)
class OneDashboardPageWidgetLine:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetLineInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        is_label_visible: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        threshold: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineThreshold", typing.Dict[builtins.str, typing.Any]]]]] = None,
        tooltip: typing.Optional[typing.Union["OneDashboardPageWidgetLineTooltip", typing.Dict[builtins.str, typing.Any]]] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
        y_axis_left_zero: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        y_axis_right: typing.Optional[typing.Union["OneDashboardPageWidgetLineYAxisRight", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param is_label_visible: Specified if the label should be visible in the graph created when specified with thresholds. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#is_label_visible OneDashboard#is_label_visible}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param threshold: threshold block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#threshold OneDashboard#threshold}
        :param tooltip: tooltip block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#tooltip OneDashboard#tooltip}
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        :param y_axis_left_zero: Specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_zero OneDashboard#y_axis_left_zero}
        :param y_axis_right: y_axis_right block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right OneDashboard#y_axis_right}
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetLineInitialSorting(**initial_sorting)
        if isinstance(tooltip, dict):
            tooltip = OneDashboardPageWidgetLineTooltip(**tooltip)
        if isinstance(y_axis_right, dict):
            y_axis_right = OneDashboardPageWidgetLineYAxisRight(**y_axis_right)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18149664903820e719a1ae6d88101663f1385b175f6fe3fae3dec3bddd0115b3)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument is_label_visible", value=is_label_visible, expected_type=type_hints["is_label_visible"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument threshold", value=threshold, expected_type=type_hints["threshold"])
            check_type(argname="argument tooltip", value=tooltip, expected_type=type_hints["tooltip"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
            check_type(argname="argument y_axis_left_zero", value=y_axis_left_zero, expected_type=type_hints["y_axis_left_zero"])
            check_type(argname="argument y_axis_right", value=y_axis_right, expected_type=type_hints["y_axis_right"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if is_label_visible is not None:
            self._values["is_label_visible"] = is_label_visible
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if threshold is not None:
            self._values["threshold"] = threshold
        if tooltip is not None:
            self._values["tooltip"] = tooltip
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min
        if y_axis_left_zero is not None:
            self._values["y_axis_left_zero"] = y_axis_left_zero
        if y_axis_right is not None:
            self._values["y_axis_right"] = y_axis_right

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetLineInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetLineInitialSorting"], result)

    @builtins.property
    def is_label_visible(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Specified if the label should be visible in the graph created when specified with thresholds.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#is_label_visible OneDashboard#is_label_visible}
        '''
        result = self._values.get("is_label_visible")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def threshold(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineThreshold"]]]:
        '''threshold block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#threshold OneDashboard#threshold}
        '''
        result = self._values.get("threshold")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineThreshold"]]], result)

    @builtins.property
    def tooltip(self) -> typing.Optional["OneDashboardPageWidgetLineTooltip"]:
        '''tooltip block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#tooltip OneDashboard#tooltip}
        '''
        result = self._values.get("tooltip")
        return typing.cast(typing.Optional["OneDashboardPageWidgetLineTooltip"], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_zero(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_zero OneDashboard#y_axis_left_zero}
        '''
        result = self._values.get("y_axis_left_zero")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def y_axis_right(self) -> typing.Optional["OneDashboardPageWidgetLineYAxisRight"]:
        '''y_axis_right block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right OneDashboard#y_axis_right}
        '''
        result = self._values.get("y_axis_right")
        return typing.cast(typing.Optional["OneDashboardPageWidgetLineYAxisRight"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLine(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetLineColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d20e409d528bd2fc7baf74f8dbe5f556f95fe15e29f16538a3cd274326ffeac2)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__179ffcf2ffffaf7ceae5b8606efb411e8d8b02abc8c212499f8d83369edbdf36)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLineColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83ece2a190e5bb44adb139dd30649aaa79ffed1148bebdd7c91847fea9b11f43)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49a4e10163ee63007e31ffe6430395380e7a1b01400326288c3e277f93cc80c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d64b757bdd653e84a126f1a56259fa0762720bb5be83e510279f5daf10478dbb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9e5dc37e284262d4e058300e0f651650c7a679db7770cdba8027c5cf2ff065d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a227229be59daebd2b1156cbedbe03fb0eb7bec76938e9a5262a14249ddf6091)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__717fde96fb32ef3354a0ef1a6c6ccbf0e079c9673f400cc7c2d2700631749f78)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__098f3aea2dbc4c06c18e73d0c8a1be741f156e23780dff6df2fd0eff2775e935)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetLineColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetLineColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb92da9940e3f77368d1515b9da1b341388adeabf041c91c6da1cb8bb59fd0b7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5e54aa2e2baa169527e2af5b7abb16748f2c82257a85548e3b5cbf3a63a318f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetLineColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e8122d0c0d82d3e9d7787f1c8bc8280a39f6e48fc29259146b6c531734a2fcb9)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b709f92adc9f271b3126398ec4d64581681720be2b8a4176aa871afdd56d41ca)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLineColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1bdbae28c0680d35308f1c0a06731bee1a3597283b8c03f99bf3d68db5842bc0)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__178d873af665f190dfe66e7577c13ddd1fe6f136490a241f78650116e26d6f5c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d61696910005bed3c96b4f213dadeaa1ed07b9d72aa00896e94c2aa6fd33a660)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a216ab1dc371bb12aaa7be874c7a232ac3bd751a56ce7e2055fef8df79b08ab5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0668b47bb2f76032fb005c3b8f268c914aff05e440219e8066e7ef5526d10509)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0a2a648268f01174e55825a0c69e12551827f7000636002c2f5ed5c607003f4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5bd5a27bfa8e36ed344ebb969cadac096987b94085438495a171a8a18da7cf52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd00ffb879c420abffee861deab7b4db2d5f5c402ae5bf5e2c5ff0b806db22f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59dfcc77057fb4e0e89d0469d56abc5a991020b296c4cf2cfad79b7ff0330c1f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetLineDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a776492d23b1b96db3ed58abc5f0f44d580251da2ed4c56720d434c26679cd34)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f079ebc7ea823ab26684a6a702c849aa28a3fb43fecd7153de714821afad50c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLineDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d21e339cfa730f8dd226add28ae21e988984c6494ca78a89c8b637885aebdfd)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9dbce99a0c5488abee78a810f4d2b3b08ea6b0b30af4a1a92f57687cc6116deb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2410a16b12d59509b084820ed52fc1bc186dd72e9a469647cc77de3799ba909e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5422f5a4022e765ee46532334855ee3f0f6f9344bc6daeb45a6ebfb2c62a887a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__240afe7e377de419f29df1c42300ae594baffcebf7302c6e5737f8de7e0be64f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2debe852e7fd892b8c8f247f6bbd05c4818222873052bb1d37c2cf676b4a7be6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c676997e9b99c04da62b7d9a0e584707c7a78ad4e576309e372779ff2032e451)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__162fd04645cf9740abb97ebcccb103a396ab123199770b2c67091319809b1826)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d55630c86d43d6eb2ad4e34db45fdd784893c47dbafe8ff56662a234e1884a8b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61e3efdbfb094483faac2990282d9ef9d12445e9b3e4664d290b7e3bbdce30fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b283901a3acace85a52cf689ca80b90cd15b61eb3a5db10605171d58517198d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetLineInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e993d07c5e9e86b9c9c603f75b33aae7c929bc297e517920461dda0d1d52ed73)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ea383f592b6b3acdb13b6bc121e722f8f297543beb5b8b48a0603bb47735e776)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67810d03d6d7154c1fef677a4c855005d73bf83ad0154bf1d5f47b9242b2a4cc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8ba6f2d72fc8e65b8efa278abffe8ce45f3af013265b0c9210dfe411cfb1e32)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetLineInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetLineInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetLineInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4bf40c3f236cf5b6360830e328bb5e4328d7252c501f76d4058b941d391856b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__459b2b8d8365a03ec643ed1618c7a8cebafd7e7ed11180156ddb45b2e6ddc463)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageWidgetLineOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df34111e345276c1f29227917c86afe0a0d03f1fc37c955f4a758569825dc068)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__001fdc0128fe3746c02994c4cba36985d02d10a86772fa9758ec4cdac15754f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a16433a8b8de224813eb0e752c65656ae1a443b5743f1cf255b6e99959e4550)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20a1365d17c95f03f452afaa47032c128255b1bf2cc86342d5e1948907f1ef38)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLine]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLine]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLine]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7cc17e2c5816452eebf28e5d9b303944c9a6229b91171a23059c9c50b9e1b2c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetLineNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2e04d2773849871dc2fd8ae87adb5ff5bd10960506c1f80c01980b6f125a9aa)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65da24ed376189d012f38cdf2ff1caeb71d2402085fb6608ca4d0ab8243992fd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLineNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb8f3b65ce9d112d1ef61c252ac8a63a03b201ae2999b554c6f9d1d06bc3c5ab)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__088d18ad27f0e50d27cbe55b23ee35ad65c5f38757d1d76f648940cc79e12757)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bf2c70ded1112dd7e1e6b5121450104b752985743b2421e099a549ea0154398)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07e25ac40a8344f5c6c471584d6ba53d810d2aba73978233ec88d27f5049833b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16b53c5f2aa89dfef3fe92412a28ec9cefcd2b67d25560522f18c95863002b82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__629d2eb3fcc088d4ea88a049811b19a56ddb3c870fc54ca98c0e237097831f20)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1dacd1d1f0c3458b9d9504ed5684080a3500b056904feac7abcefdcc61bd3840)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16579d62ab3b349bb4c1ad35325bc68dd6224d568c9c58fad94df2d734df27c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27a87d4f99ee7913e63b2a560fe73be28b480b64eb5072dd7684569c2e3efc2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetLineNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b6ac923eeea7fbfa0a8a142a00a37bbdd40080d04a086dc0b500081fa1a3388)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9ad14a1f1c7283e5e32b29c90a351ecc68ac86a9d509f38265eba4da13f2d73)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLineNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a3bafafa6487963e4df4591fd30c89c165d91b45881a3f12e648a964df0bc73)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__564211c7be54412e4af87ff82da39d8c120089597a643947946276ce3d8139cf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c70869bf0f628c80883eedf033c370a49cc3c48c303d348f1569f8f3b3b3ae60)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5669bb92d4062c986d28c5c319c0f44cb006b8ad6cbe62496747267aa48eae1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bac238a96a6d778bc4f3221b1da4f2b0643877ad3b3e30e0d7b040951e1f4f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c14807170f24b2cb6c03730e7390795b0e435f1be35f0de7593e9375bf54269)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__587bffa286f437f3cf5c665fe5328ad40ed575b78b5834e6165b50822ac196ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetLineNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetLineNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e6305caa7f96c5149d390b191a16749aa38b55801317f8709e30bf9313f146b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d573d4b75cec73eb65f39d5be5a82969df7e5c9c2c8b9f8c02d936ad1bfbc89)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetLineNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de91c6819553ae81133c3df60a19c2dd87bfe97d40f9e886dc7ebf9403cbfe55)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c1cfb8aad807e4e8b1fe22eb49614bbc69d9d97481939337979a030ff28cd5f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLineNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e11cf270d0f62dce073c4c7d74c6130ba890ced9f1592b9fe4ce72e1ba7285d)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ebc6b2cfc0a1bdaacd5d1a50ddca1551c86d089e21499923c727968b181c36e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__107042923724cec2dce8927b77f0098b954fcdb1e074e59f0598633358258ebb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d1121eac0e0774dde5e95e25eec5d52d1271318c780c2519474568cb063514d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4857b3342b3b77f44db535be0e3f80a12485cab4705d1c7f55027dd5b2a2c858)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11994f1e2446a2b3080ed3f0cfb8ddc209fec816608394b84251847d3841d0ee)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afa52fb1ed1181aade3824cde50f11f23f99a2f43096f5160d3bc997a35d3432)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d32f21d2f9ba44ae221a38e21372b7cb56540ea5ad0dce91a106865aac1256ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd9eb79e78aa2c7f93f8498be5317e73ed2543464beaf3f9d93885d6a481f142)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c49be1160e85958c7a2a0f6635f47964cfaeb078de9066ff02bd9f059165787)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d2de1888689fdfa526b1f5b737f08b888d6082d93b380093c860d943a4f1feb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0960e861650ab120c90fb93edb98fa7fa391c7248155bceff1a4ba7a15182e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetLineInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eaf278546e6e79a818a4e82a55a7f3597c58a21e1f50102fd1a8f913a8c2d365)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1dfc230e3c786b3eae63eb6c25045bfa58eb9bac55645fe22003d11f12aa470e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putThreshold")
    def put_threshold(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineThreshold", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__506d56fd95d8312429d5b3c0bbadc874b9f97098ecdf59075e60abe6837b3094)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putThreshold", [value]))

    @jsii.member(jsii_name="putTooltip")
    def put_tooltip(self, *, mode: builtins.str) -> None:
        '''
        :param mode: Tooltip display mode. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#mode OneDashboard#mode}
        '''
        value = OneDashboardPageWidgetLineTooltip(mode=mode)

        return typing.cast(None, jsii.invoke(self, "putTooltip", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ee8f10efc9d3d98b714208e96868f74e8c6faba7d8557f5bf105135b334301f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="putYAxisRight")
    def put_y_axis_right(
        self,
        *,
        y_axis_right_max: typing.Optional[jsii.Number] = None,
        y_axis_right_min: typing.Optional[jsii.Number] = None,
        y_axis_right_series: typing.Optional[typing.Sequence[builtins.str]] = None,
        y_axis_right_zero: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param y_axis_right_max: Minimum value of the range to be specified with the Y-Axis on the right of the line widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_max OneDashboard#y_axis_right_max}
        :param y_axis_right_min: Minimum value of the range to be specified with the Y-Axis on the right of the line widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_min OneDashboard#y_axis_right_min}
        :param y_axis_right_series: A set of series that helps specify the Y-Axis on the right of the line widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_series OneDashboard#y_axis_right_series}
        :param y_axis_right_zero: An attribute that helps specify the Y-Axis on the right of the line widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_zero OneDashboard#y_axis_right_zero}
        '''
        value = OneDashboardPageWidgetLineYAxisRight(
            y_axis_right_max=y_axis_right_max,
            y_axis_right_min=y_axis_right_min,
            y_axis_right_series=y_axis_right_series,
            y_axis_right_zero=y_axis_right_zero,
        )

        return typing.cast(None, jsii.invoke(self, "putYAxisRight", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetIsLabelVisible")
    def reset_is_label_visible(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIsLabelVisible", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetThreshold")
    def reset_threshold(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetThreshold", []))

    @jsii.member(jsii_name="resetTooltip")
    def reset_tooltip(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTooltip", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @jsii.member(jsii_name="resetYAxisLeftZero")
    def reset_y_axis_left_zero(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftZero", []))

    @jsii.member(jsii_name="resetYAxisRight")
    def reset_y_axis_right(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisRight", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetLineColorsList:
        return typing.cast(OneDashboardPageWidgetLineColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetLineDataFormatList:
        return typing.cast(OneDashboardPageWidgetLineDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetLineInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetLineInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetLineNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetLineNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetLineNullValuesList:
        return typing.cast(OneDashboardPageWidgetLineNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="threshold")
    def threshold(self) -> "OneDashboardPageWidgetLineThresholdList":
        return typing.cast("OneDashboardPageWidgetLineThresholdList", jsii.get(self, "threshold"))

    @builtins.property
    @jsii.member(jsii_name="tooltip")
    def tooltip(self) -> "OneDashboardPageWidgetLineTooltipOutputReference":
        return typing.cast("OneDashboardPageWidgetLineTooltipOutputReference", jsii.get(self, "tooltip"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetLineUnitsList":
        return typing.cast("OneDashboardPageWidgetLineUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="yAxisRight")
    def y_axis_right(self) -> "OneDashboardPageWidgetLineYAxisRightOutputReference":
        return typing.cast("OneDashboardPageWidgetLineYAxisRightOutputReference", jsii.get(self, "yAxisRight"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetLineInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetLineInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="isLabelVisibleInput")
    def is_label_visible_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "isLabelVisibleInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="thresholdInput")
    def threshold_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineThreshold"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineThreshold"]]], jsii.get(self, "thresholdInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="tooltipInput")
    def tooltip_input(self) -> typing.Optional["OneDashboardPageWidgetLineTooltip"]:
        return typing.cast(typing.Optional["OneDashboardPageWidgetLineTooltip"], jsii.get(self, "tooltipInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftZeroInput")
    def y_axis_left_zero_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "yAxisLeftZeroInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisRightInput")
    def y_axis_right_input(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetLineYAxisRight"]:
        return typing.cast(typing.Optional["OneDashboardPageWidgetLineYAxisRight"], jsii.get(self, "yAxisRightInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46ab97ee40e807f6e93c068077ecf1a0eb04316591a6751cecc5b22c0898862c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57ba917a78a965883d6239a8411feecb7a4c1c6cc9f8fbd0082961a896c64d0a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55e5e8713630e8d855bb9f4c21327deb439efab4e64a7b0a8e65fd3ec1900d39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__79aebe376b7b245072b3423e251c29d1e3eaa6c880da37ec42947f28b3d1abfc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="isLabelVisible")
    def is_label_visible(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "isLabelVisible"))

    @is_label_visible.setter
    def is_label_visible(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a4a0b489e1c67dde45a87c3acda4b34919b302e0ece7c6940b80797748e32e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "isLabelVisible", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bb3ee44d9bec3b6b84d4d43ae6d5e84bf1b1947716e05d0b8210f0e329b1d10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a5afceeaabbb89485ebc96b57cc28eaf6a427ce119966644d9e2e5e47099da2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__091d501e7bd3e4067e8260b28f701572d17ace2d4d6ada367821469c9f77a335)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ce6c35b1dc673bcbf1f36d593239bd9dbd11a73127c820c1bb21a388f10cf5e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7cd7e243d4dd0ad9374e6173fc592ae3b9d2049a891160fe1831f6313a2926a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8de5ca16a73ad170c8bf8e4be42a28b86ad29713be779ba6465ad23057b6f686)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53163f6d451bde853024f398244c68ad5a7329d9dd34ad3d01a1f6b3d86fa332)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftZero")
    def y_axis_left_zero(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "yAxisLeftZero"))

    @y_axis_left_zero.setter
    def y_axis_left_zero(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65239b8f7e899dd614e7948abe6b895b122db62c3af0016e5508937ceff56c85)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftZero", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLine]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLine]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLine]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f111ca0289d6f0d2aa217b09e7f698c65d7b1e8045b55dd74ac4409b28c0338)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineThreshold",
    jsii_struct_bases=[],
    name_mapping={"from_": "from", "name": "name", "severity": "severity", "to": "to"},
)
class OneDashboardPageWidgetLineThreshold:
    def __init__(
        self,
        *,
        from_: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        severity: typing.Optional[builtins.str] = None,
        to: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param from_: The number from which the range starts in thresholds. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#from OneDashboard#from}
        :param name: Name of the threshold created. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param severity: Severity of the threshold, which would reflect in the widget, in the range of the threshold specified. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#severity OneDashboard#severity}
        :param to: The number at which the range ends in thresholds. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#to OneDashboard#to}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d4a09cd5e72d84fdfa16d24667eca96775ee29708d9b80f511f7cce2e21eadd)
            check_type(argname="argument from_", value=from_, expected_type=type_hints["from_"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument severity", value=severity, expected_type=type_hints["severity"])
            check_type(argname="argument to", value=to, expected_type=type_hints["to"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if from_ is not None:
            self._values["from_"] = from_
        if name is not None:
            self._values["name"] = name
        if severity is not None:
            self._values["severity"] = severity
        if to is not None:
            self._values["to"] = to

    @builtins.property
    def from_(self) -> typing.Optional[builtins.str]:
        '''The number from which the range starts in thresholds.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#from OneDashboard#from}
        '''
        result = self._values.get("from_")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Name of the threshold created.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def severity(self) -> typing.Optional[builtins.str]:
        '''Severity of the threshold, which would reflect in the widget, in the range of the threshold specified.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#severity OneDashboard#severity}
        '''
        result = self._values.get("severity")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def to(self) -> typing.Optional[builtins.str]:
        '''The number at which the range ends in thresholds.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#to OneDashboard#to}
        '''
        result = self._values.get("to")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineThreshold(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineThresholdList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineThresholdList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c82d1d5c0f4853d6f70a432d2c983e95acfd6f0a1b0bcc1870a38c67926ee9d7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLineThresholdOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__77b052041e4ac893aaed4b13dc2366c7db5b8a1fedeb0de36ca0e187904c2aa9)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineThresholdOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__920d8531c318083b7c8bc9fe8e3dee56de3ec9b882f6d0c3ffa3ce3175cc301b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__469fa738426737c7d0d06610ab4b63c8fbd5f9397d4a7f4294d041d3a92ce268)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8eeb38debfe93628755bfbda8aa0f494a99dcf87fbc39ef801cdda9a54e1c4f5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineThreshold]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineThreshold]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineThreshold]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cdbdb64b81a17fe52495bf209a1b0cbf8cf55f0251cf6354d00dbb06d6c5b07a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineThresholdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineThresholdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e7fbd405b5a3dd863065eb658af378fd273c95b310eaad3cba7194b747b9f47)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFrom")
    def reset_from(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrom", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetSeverity")
    def reset_severity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeverity", []))

    @jsii.member(jsii_name="resetTo")
    def reset_to(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTo", []))

    @builtins.property
    @jsii.member(jsii_name="fromInput")
    def from_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fromInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="severityInput")
    def severity_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "severityInput"))

    @builtins.property
    @jsii.member(jsii_name="toInput")
    def to_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "toInput"))

    @builtins.property
    @jsii.member(jsii_name="from")
    def from_(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "from"))

    @from_.setter
    def from_(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f5382331cd5706b60a0a86422b9f40d66ec882f529b8198b63f47bf2008d656)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "from", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c38e4c3eb48972cf7ee8c3d1566bdca502915ddc5a6194afbd28ace6ad4bacc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="severity")
    def severity(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "severity"))

    @severity.setter
    def severity(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__feed090e9546af734bddc8d484ce43ae0ba1cd6dbd9dfb8a6e43570d6bbf2ce0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "severity", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="to")
    def to(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "to"))

    @to.setter
    def to(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d4705de2dc0cbfe3067ca996b2adf871b7f36d54d828f5866393e3af9aea11f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "to", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineThreshold]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineThreshold]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineThreshold]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__717a9cd9a4bb5968416802acd5edc7ee5c39aa1d550635fb12a028d406bc76b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineTooltip",
    jsii_struct_bases=[],
    name_mapping={"mode": "mode"},
)
class OneDashboardPageWidgetLineTooltip:
    def __init__(self, *, mode: builtins.str) -> None:
        '''
        :param mode: Tooltip display mode. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#mode OneDashboard#mode}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be1daed1f6dd98e22376cedfa5618aed68233e1feaf346d954197200e2837492)
            check_type(argname="argument mode", value=mode, expected_type=type_hints["mode"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "mode": mode,
        }

    @builtins.property
    def mode(self) -> builtins.str:
        '''Tooltip display mode.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#mode OneDashboard#mode}
        '''
        result = self._values.get("mode")
        assert result is not None, "Required property 'mode' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineTooltip(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineTooltipOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineTooltipOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ccef30d31162e5590ffc8c54729ddf956fad36a5639e33ad567313fe0a070a6e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="modeInput")
    def mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "modeInput"))

    @builtins.property
    @jsii.member(jsii_name="mode")
    def mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "mode"))

    @mode.setter
    def mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5eb9c91ad501eb5be69df966138087e47bf53a277b78c52009c597624a9376ff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[OneDashboardPageWidgetLineTooltip]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetLineTooltip], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetLineTooltip],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65c3605696bd635a7df935ba201dfd37f575a7388617275c06d6365bd75af1d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetLineUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03c5cc00186a6bbb6289bc511ef790c0c0f6336b72d111fad1d244df632baeac)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4b75060c0d227e894fa7ec7715c5c120aeda93a382010d13b4f4c185472180b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLineUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ade2cbf1b8e1dd13da9622082757ff30b163cb38fdb93b3418e389ef021e6763)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__22b024ef16b9b44fa40701e6adf4a0a9b95b3a0061e6d4d1fe4acd9068287f0e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b77ed3fecdcc4223b5a71ed6fd5e9d75f1ce23e8cf056213c2a5e105e86c8728)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e10c6c24261e10b0b8e009ebeb0c348c37a9db6e0091131de24968d6016c267f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60d3cf490690ee191156ae98906ba22b70a10ca1304fe7d1d6c2612120abd593)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f3b6e3d8112345b34db99b450b4a6223797fb441b4c2755d21d2e87fba0f9ff)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLineUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c656d9b3a728abd6f288b5a2fbe98f2add986bf4e015adced062c84f43543ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetLineUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetLineUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLineUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2138226fa43ebc8b9191238173836cd82486721e1954cead4ca69f6193472914)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__50f365820c97266271a1b86bd244397b6f2a887631cad5ab930f8d469ce4f7f5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetLineUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e0ca61077d235b0bfe428f1c8d992970056e9027545af4a7541e5f8f22c404b)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdffa9ed4c51e6875bdc0ed4c70f3b391581e755c2ec2dba306bda2ca36270b8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLineUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__017da082358fd64d8581f973f025691839d2d9a5d3c027ba3642846797416297)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLineUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26200ec12287fe80f73ff3cfe9ffd977bb4e16aa734968f2fa7949a59690dcf5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93c7511ed631163e84a60c4f1320c27a6feca6e61cc83ab1b20edd85edb983d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e5046272eeafeb8076178b837283ecbcc2fb7f83f34a72b62812c3e69983c7d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__923ec9289f82f2b6c880f58f6154ac8132d8cafcc82fc20a5bbfe3b0f760ce8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLineUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__904ad87bfd88a323e165649126b7dce0305240c70a55de38faa38f03678403ef)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6833282d093e3725cfbe6a55d3c055b327c6b1db04d385a80c2da15f1dce9863)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__364cbdaf8b49d6bef1bdb9016c5bfc10050ebff932f14736bf26a39a89adb369)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2a1ab529d666e0e6f39d69da60c52516a8e982b710ffc75b4b51efe6e244444)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineYAxisRight",
    jsii_struct_bases=[],
    name_mapping={
        "y_axis_right_max": "yAxisRightMax",
        "y_axis_right_min": "yAxisRightMin",
        "y_axis_right_series": "yAxisRightSeries",
        "y_axis_right_zero": "yAxisRightZero",
    },
)
class OneDashboardPageWidgetLineYAxisRight:
    def __init__(
        self,
        *,
        y_axis_right_max: typing.Optional[jsii.Number] = None,
        y_axis_right_min: typing.Optional[jsii.Number] = None,
        y_axis_right_series: typing.Optional[typing.Sequence[builtins.str]] = None,
        y_axis_right_zero: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param y_axis_right_max: Minimum value of the range to be specified with the Y-Axis on the right of the line widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_max OneDashboard#y_axis_right_max}
        :param y_axis_right_min: Minimum value of the range to be specified with the Y-Axis on the right of the line widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_min OneDashboard#y_axis_right_min}
        :param y_axis_right_series: A set of series that helps specify the Y-Axis on the right of the line widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_series OneDashboard#y_axis_right_series}
        :param y_axis_right_zero: An attribute that helps specify the Y-Axis on the right of the line widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_zero OneDashboard#y_axis_right_zero}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8f195c7f4acd73b15d680d16b7f5be07e70adc15ea46609ca2ba46089989084)
            check_type(argname="argument y_axis_right_max", value=y_axis_right_max, expected_type=type_hints["y_axis_right_max"])
            check_type(argname="argument y_axis_right_min", value=y_axis_right_min, expected_type=type_hints["y_axis_right_min"])
            check_type(argname="argument y_axis_right_series", value=y_axis_right_series, expected_type=type_hints["y_axis_right_series"])
            check_type(argname="argument y_axis_right_zero", value=y_axis_right_zero, expected_type=type_hints["y_axis_right_zero"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if y_axis_right_max is not None:
            self._values["y_axis_right_max"] = y_axis_right_max
        if y_axis_right_min is not None:
            self._values["y_axis_right_min"] = y_axis_right_min
        if y_axis_right_series is not None:
            self._values["y_axis_right_series"] = y_axis_right_series
        if y_axis_right_zero is not None:
            self._values["y_axis_right_zero"] = y_axis_right_zero

    @builtins.property
    def y_axis_right_max(self) -> typing.Optional[jsii.Number]:
        '''Minimum value of the range to be specified with the Y-Axis on the right of the line widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_max OneDashboard#y_axis_right_max}
        '''
        result = self._values.get("y_axis_right_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_right_min(self) -> typing.Optional[jsii.Number]:
        '''Minimum value of the range to be specified with the Y-Axis on the right of the line widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_min OneDashboard#y_axis_right_min}
        '''
        result = self._values.get("y_axis_right_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_right_series(self) -> typing.Optional[typing.List[builtins.str]]:
        '''A set of series that helps specify the Y-Axis on the right of the line widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_series OneDashboard#y_axis_right_series}
        '''
        result = self._values.get("y_axis_right_series")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def y_axis_right_zero(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''An attribute that helps specify the Y-Axis on the right of the line widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_right_zero OneDashboard#y_axis_right_zero}
        '''
        result = self._values.get("y_axis_right_zero")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLineYAxisRight(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLineYAxisRightOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLineYAxisRightOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4e30046f34f7223df0e08983a5ec70ccff7da7dad1e7df26e3d39ed73e8d743)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetYAxisRightMax")
    def reset_y_axis_right_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisRightMax", []))

    @jsii.member(jsii_name="resetYAxisRightMin")
    def reset_y_axis_right_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisRightMin", []))

    @jsii.member(jsii_name="resetYAxisRightSeries")
    def reset_y_axis_right_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisRightSeries", []))

    @jsii.member(jsii_name="resetYAxisRightZero")
    def reset_y_axis_right_zero(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisRightZero", []))

    @builtins.property
    @jsii.member(jsii_name="yAxisRightMaxInput")
    def y_axis_right_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisRightMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisRightMinInput")
    def y_axis_right_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisRightMinInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisRightSeriesInput")
    def y_axis_right_series_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "yAxisRightSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisRightZeroInput")
    def y_axis_right_zero_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "yAxisRightZeroInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisRightMax")
    def y_axis_right_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisRightMax"))

    @y_axis_right_max.setter
    def y_axis_right_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f0add95446424e5c5a5d49b35b02f3fe00b8e34065db98f8374b0244faa1c4c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisRightMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisRightMin")
    def y_axis_right_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisRightMin"))

    @y_axis_right_min.setter
    def y_axis_right_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96ad567da00354c0f78bd0faf1c049ad9f4a05ec8c0ea0b42089d848a5dee43b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisRightMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisRightSeries")
    def y_axis_right_series(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "yAxisRightSeries"))

    @y_axis_right_series.setter
    def y_axis_right_series(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af311381cea4e3e9186ae0a72807a7132faec6cae619501be3bdeb4b4b9e0b3d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisRightSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisRightZero")
    def y_axis_right_zero(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "yAxisRightZero"))

    @y_axis_right_zero.setter
    def y_axis_right_zero(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c25b60312a8a6b7e831b2f1665f0321bd99ba206803dba65f3fa9c7e31237ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisRightZero", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[OneDashboardPageWidgetLineYAxisRight]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetLineYAxisRight], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetLineYAxisRight],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__327b4d8c2f32c533d0a23fd538734943210d2918dea82137feafff8baf11988f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTable",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetLogTable:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetLogTableInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetLogTableInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__256f0694cbefd9641e4281d2d5f9565b29cd1b64dd7a51e3b5c1fba334c804bb)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetLogTableInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetLogTableInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTable(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetLogTableColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b037e6df80f16f767af06d55baae1a52571e8ddf578b1ff78d2aaf8b2ee3fee4)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTableColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLogTableColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad1bdbde509a6b1bdffd2915a5118393e038981a33d315c6f1b316c1846d273b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLogTableColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1b895879fe0586ad7901a6f0733ee3a587b0692f0c73aa77e5a7b52e49a6885)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLogTableColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afe1fa50a56b43cd9c5b57c718be02ce643eba6e5073c44334376848a6c7a97e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2c3c5e014f92221daf969faa0420cc4ecdc4df9b9402bbe13ed4552e4b83d12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33ec835c4965aecb1ddf6793ace44b01f5679ae0021a26fcdd038d4cf87a2857)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__561c7a869a3c4e501fe7294dec0b0c0d78cb30de79739937d1b0c9a9bc3b90cf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c0caf616b2a79878a81091460f55fa56e8b7f22244349f9dce6d009140fdfc1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2a7f82e0f3dcc9b72e2d6863b2a109ae8303206fedbd36d2cca1a184f7ba11b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetLogTableColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetLogTableColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a68bf5ada04c89f376dc2a134e7cce261e8be6bba3c77ae3492d369910965368)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__faf43413c92de7f853b87d67cd844a5e510d5d4f8efc7b3ad5f1fb0707566060)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetLogTableColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b55f82c957abbe2259f7d8cb23676caca51bb3ec35b7e3a14235217d43ce4aed)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTableColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLogTableColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b9000ba6b247ed0bbfae3965bc650087e96bc9dd963f6a7c00f2c9ddfda5df6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLogTableColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20e0398d141e3642910f902d2c62282b205dfe8bc3383084bb67be5be83ef62a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLogTableColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d7fabfdfdbbb7cda7d137f54ead9fbfa5bae52a68c04aeeacf004865da7c44c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6cfe5b428f5483732490f52ae7b27885d2578ee4a23bde757a228955760e7f22)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25e787b33e5b8f6449c30e1188890ec19838150cd902e80a7174eb04f9415b44)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9292c143d55212c97b0b3f22d396fa95d4e1b271d10876e1d5afbc320f003c27)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__024b1775e6d2dc5a312949b283abbf523b1b2e2c2e6d4a66fd05c4bb41a0f42f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e621c2274c0fdbabc3354920725e366f23c071e056d4847043b16cebbd544b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf4ca26c08ef1cf8b8c9761501fdb9d4e5961a5a7392ee8da7072f91284c6cf1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bbb3e8d6110f659855fb2993c5f9d0eb2eb2befd74da269c4739038f64c45429)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetLogTableDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27ebd278c2de7030ff596ade83c2ae70aded579678da2906e9802c20ac5bdc00)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTableDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLogTableDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bd5b9cef0c98fbaf2987115fdd60a096358f9d62a9a0bdc6f7d101d212f48eb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLogTableDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__916bfa95bbbf7ea9e8e227ac846ca82f4ed91ef6ada88bbb3160b151e40bb24a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLogTableDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__423662cc4ef35c62aa34f137c20925969a2fc9b8dfef32278d676dff149fcef6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ab71c9a173be1591d61e3356c56753c19d5c575e709978b4ac128239769900b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e9e13441d5084599c0e482bd797e0caf269a37dbf1636941a0d6a7e8a8a7fd1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2e3fce9df92416ff9e92ad1d1aa82e4fc17d13f04260ccdfc0f4cd73b5968a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd7a4f0b11d48777ae6608a6e1c5e49b90f8856c0252bdd75377bd2c0b3fabbf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__469ac79dbb3d79e3bf8ddbbc69dc087d95de16bb09afc0df56b19fc26e65393c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0eca68c0bedf0628c42dfc9dce36f9524625613d837488bf12fc3af2f6ebdea4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__103b0c4752c423b5758b23e8786135e0bff170218e85287be19c5a6bf7570cbb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0d5d9c03b0e3a39ca0fbcf9f553f9e4c1025628a2d319cc85f21a91ce28be40)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf3cd1b30bc1fd8d5b44c9c990f9b8c9d12d7c078ef6a16d40d5401739c82a50)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetLogTableInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41f75063285276350f90e9c2771df9c6f816d3063d00807f850e53560868c748)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTableInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLogTableInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12806b952184f84d3cd641f846beea7221c2d2fa8a9c30fd0681810a9098d320)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6dcac1b2bb63c43f2b9bf1fda8b833f2ff2fd75c429ca4b9d0f923191b10f7a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ded3482a087238d1c58e89b9cac569aeec5e340cb26f824902e37cad493a5a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetLogTableInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetLogTableInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetLogTableInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f3b5affcb6a7fb56f3ab436f3965c947b23c6f9225ee2e1fde2acee558b0ff9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb08aae410359b8514f479a7d5180d126a5eba01c6d3d0627c84431f291bc51d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLogTableOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c69584cd969523c647b8d5f3b24198a5b88dc85cff40dd0a9db285d4b0577fa3)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLogTableOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4ac392e9d1b7fd186ef96e14481536686fcab0f6c996b041c6d1b00cbddf8ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1823c49b1f341a237515e35ff39b461da1077ff84d04ccc34d2c33d9b297f947)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee806efccdc8fa45cfe887643a888c30cc71a0624741e9cc4f354fb70ea4d835)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTable]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTable]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTable]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71dbf2a4c3f8246ea08bf1b1e30a3f88582a3db189a42d2e8897dfa324c0bb29)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetLogTableNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0faeb7a4013b88c959a6bd72f125b3b0b4610529ba148f3aa09e3c66d1151d6c)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTableNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLogTableNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0818cdd4cdcbf5130bdcc236665adce429997fe1aa717241b4f54254bade8f71)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLogTableNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__207f02806589225a9a681e9b9f1a5ab4cbf984336974082feda26feecf4baded)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLogTableNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce9fac8908b8071f10d6bd85667b76816f38dc88db04f6247200a22976c2b937)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53c1b7fdc09c94d22e4c92aff0dad6d289cd596f16d1796a38a9a157542621da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c3eca7fdc70000c45639886dcf28c6675acab2671d6fbacd2485d44e0648bbe0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94ba9ecad74ed48a93904e7f0dfbd162b497c9593e4e1d904cf1385462fae29a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df2284c8cc0d29a655f31446748a8c654de4d908db461cb8f7e4d0a1efa997e3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__77703fbf7f6a2ed15b75bec2842dbe6207d06ccb57767882ef983221b852cd76)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c1e59a4b47573c58beea681c7ca7d3c4398303538f881086d8b563edc7ed546)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e74ddadf831e7fd049a10a25cde67950862fff34250ce10c02256f0c770de12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetLogTableNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7940e0d251a6fd9e3f4c068b204daa73dafd26985132bc7300b43a25d5327a4d)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTableNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLogTableNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39d9f0cec7f31fe0a4fddb84e29d1744f5cadee54ae643512d3373d1dd023672)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLogTableNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c98c70623c09124fd99d0d2a54faeeece59df7723548c32ef519b6807286632)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLogTableNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76c2ee92acf7f9122d7e2a2ae4851264343e51ecccd10a43d6af02ae60595be5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ce995f055a6a01b9449560510829993fe58a75755c9d156bdd4eb1325214eb2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7ba3ffddc503c6c4f70d8a1e38a18c0c8c14add54c8f1ad0e1b538d47ff9b7d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c452166d16fda8998a3dbb123c44684d2da91c6b81914c4b846620e351da45a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6914282583398a2e1c9559bd0d1b46cecb4cd4990740e354cb8dc8356ecb86a8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aff29542967f050313f1e96fc20ae0eccd7b8a9ff07d4718c30f14a9bb9f0e92)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetLogTableNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetLogTableNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__055fef20c7a7e11a1da51af8718849377a749d1f3d1d7675316f0d5edc2725b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__519deb11a29c0a3b81ecefde91ca1946019007f11a0ce2439d35d416c3e21985)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetLogTableNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__081c8e3f42d1851ce7f44287156b6ef2869b760e4f60070a995ed6ba04a53707)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTableNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLogTableNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee851945a8ab8473323bb775c205f4b779a02f99eb4b2a0887c822ec1225d155)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLogTableNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__754bc7c2be96e24e130af634f4191e8e5e223936859ec4842b6a03ece87c82a8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLogTableNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6423d2e97353770057eca9eb98498de87a7ba9f8a213748cd58b852c8108d0ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f582608d26cdd71de6683818a166789576e24026be5877bfcea9595feb31d02)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0913d266bcaf43785fb093b5dcca0115d054817f5705297ccd381f90939a7e56)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43161e68aa125bc5174438456b619221fe16418a6810110d0669d9702770f3bd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2571d680d1fc5ca057546f1337d695e816fee45484f9e8d67215600c5264843)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6908c0d481d5dc5d3b761cb8d05d4b2e8d0a5f9af4f0b4a6ab1bb846d3798d03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2bc0a201bca4af8e335d308f413af4acb8d946f92f40eaad3c95ed4e1b499915)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c452a612d3db7d4e4a579f62870df2f4a9d79f838ccb217a77322911f16a7c78)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efff0c7a20e4209a519725b3ae5a1cb813a4e8b7aa4db605037cd2877fcfb07c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__905697e774734bdca2bd7cf1ac17e27773963aeb2782f09ec3e3de3a2e023f58)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3a1efc4f13cf40199d20a3d9e10b445fe8668c72121aed3d853b3df9bc9419f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetLogTableInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e19d40157f76867faf82951de958915e4209166cfa1b1f60572b095b70e66da2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb8412a2be8c1205aabbbfc550a77d4772d3c5ac93e59f05fed3ce15fdf70061)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d07fdd5d04f374539e0e9faa96b0eeee097cab5da5940c8c927a11e2d4797296)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetLogTableColorsList:
        return typing.cast(OneDashboardPageWidgetLogTableColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetLogTableDataFormatList:
        return typing.cast(OneDashboardPageWidgetLogTableDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetLogTableInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetLogTableInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetLogTableNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetLogTableNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetLogTableNullValuesList:
        return typing.cast(OneDashboardPageWidgetLogTableNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetLogTableUnitsList":
        return typing.cast("OneDashboardPageWidgetLogTableUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetLogTableInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetLogTableInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e26562561c45104585436cde1af74bba464c09985f5937495a119ba5bfc67fdb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__792530fe32a1ebe55bca543a4da56a369b67fa6a1ea7005938ab5a597fd6ef81)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__715a25e5536e5eddc7a4b3f692b2f3b5242b95fbd508a5ebf5214e32535fe8e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34f72efeac648d382e60fad088772e6017658da361bb30c02a24191d06ca6ee9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee38f3177023ff4085b49a53332649871e467d7ec45e3b174667f5e690be4e44)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__90b478e1f58c40831abee5afa1b9698968f38f63b6b14f4319ba6661ecc03d74)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89429449cb75f8abd67d09f246e03a4f94a31b2a718950a79cba72cef1f57595)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d4907e6f3f2e59069cfa2bfceff587895fa4324742e169f027417e60134f3d1d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d95effaf8a5d7b7ad8dc2913f66eaefb703ad9dfc53d340dfd8b5510634bc5cc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31a60d088a60cadf79bd124d746f37b185acb60aa20dcc66e87e24cd06b29f05)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f7098617a42b1bb6e618d3e6eb761ff1a0fe36241037f421f6b4d0974e965ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTable]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a7df64694de42fb61839df74840252ef8de380ffea6a4c4f3573c7b67d6de2d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetLogTableUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a998e63aa8ac392c3a33283a4baca6d57a445a5bdcdfb5d33ecbda0c4a55ac2f)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTableUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLogTableUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7f9bcbf310bc7e7c13ea42a026e1b7b4095ac01011bc652dfe3361551b9a720)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLogTableUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e72ca52db4d418c25aae24b74320d18f906b9091e668a1171f9209e9fb71875)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLogTableUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__789c953ca134b9fbc2849fba434a330115cdcf13ddbc9cc1c0fa13f724581d82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5881afd8fb2be95dd66de1c03850161f17e430eca248c15a5e20de54b1ed44e3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2eac5f690372f83b90a998f1e2989e3cc41b448f48b023d918adf7e087806126)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a08cb4137e17ba7dd391ce2d25ca308ff5a5939b5a8b0d7b76fbd502e0be79b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a22098c731ba1d4752c87729128efb5af25c3e390d0bf6611667d1fe26b15e9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetLogTableUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8aeb6c40f89559260089c02aa1d410e24c003f4d1e2c1682f5afc478ac56617e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetLogTableUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetLogTableUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetLogTableUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c37de4c42fdc2cf233f271dfde406ec7e248fe7987882ed491ac364ab1987f06)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5db30b76fb6324868580088a10744ef5a0ce72a3eba892873a11b27b7987438f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetLogTableUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1bbabf6e06c28ec9db5204f9c4f8ee77d0b1c5d1660bde75e082b9f06268c2c)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetLogTableUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetLogTableUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__349bc326ef71b8c8863318f3b3a76d51cb3152a4a0507d047b979147e11f553b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetLogTableUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02c5fe944edbce223a8511941bf5483ad568f967093b1721935f467b02892f33)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetLogTableUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11b5a221079611d77d31309d8042b60a456033bfa0c71a3c97749cb8aab95f34)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b9e89914ce1494385a54be3cce7d2d64164c6fdd494b7ac9193dcbaeac1a20e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c020fb250e63927a87af375222c747cf932e902c99211647b780868082c6754)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65a1fb78a9e80af3b6a88c71eb37684a76ed72d29c5def3d71b4b36f67343662)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetLogTableUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetLogTableUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f496000843e2a93e30bd30a8f408ed1d1cec30bd849ec4ff100be1f166627a7b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5969631aa39c22d90f66d7a4460d0a5fb23fa675da577bb5faaac5300fff8d61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7dbf474602455710e6cd96b16d045934c4fe6b6004dc8ab4617919c8861e9b10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d063ec1cf140b3c165d1e3e8b18ea1ced03f69f8867bbde60d4b8b3059320e51)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdown",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "row": "row",
        "text": "text",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetMarkdown:
    def __init__(
        self,
        *,
        column: jsii.Number,
        row: jsii.Number,
        text: builtins.str,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetMarkdownInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param text: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#text OneDashboard#text}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetMarkdownInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df4a6904314303931a0a073bebfa73c39a938a81fdf7a73bf9ecff8a81b093d9)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument text", value=text, expected_type=type_hints["text"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "row": row,
            "text": text,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def text(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#text OneDashboard#text}.'''
        result = self._values.get("text")
        assert result is not None, "Required property 'text' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetMarkdownInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetMarkdownInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetMarkdown(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetMarkdownColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8efca0fcfe71fac2a9019336f71da85c0d0273e5a7dcc85021996a1545f7257e)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetMarkdownColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetMarkdownColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd3fae3303269e28f582e8e46d497d0aca45ae1f6a5542e17a547678507af8cd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetMarkdownColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e19b0ee7ff390b8146ea0fdca8d28f96ede2c81964d4544e47873311508829c7)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetMarkdownColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b977d7ea4cb78a13b75e8c52a7239a6ecad6d95c54d846b2797d656aa679571a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06e7bf139d52501b836d2b1125829aaa78c158e61e859ddc0caeed5171c43b0e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eef0ad5c673a1b9a02ddca1c63ff6af2c9ef3fbe88a7939ad04a5294eb2a7a12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__05ef6fabc1b1e33fb1661cc32942b3b41e1f820ac34938334a76a7225f4d17b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetMarkdownColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eded0e5f5616f9cf740166fdc488265bbf1f9deb4e35de1a1a2de893b2739a7f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e24954f932387319e28545bb638289f0191390f15eac08fd00b037a35ab5fcb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetMarkdownColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetMarkdownColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2bf3b4d4f87e72b2aa3b35eda564347bf2d5b88bc5b0e3b7ebd89bab0174c74b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e9135130bb2a817c17d66885ef918aa557c1943b36baf0810e892b338540994)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetMarkdownColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e701b3af8481de5deb8f9ee9e259e6dff55b25f9f983d56e8a7f1cfc0a49aa2)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetMarkdownColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetMarkdownColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dec0a50bf97b89ce3f348b1b3736823601d3e4c7a3efb3bc5819a52787a51799)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetMarkdownColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41ac0989da0050a8ddf150c2b7574587531e699bbc5e2659a9e3ac3dd7e25dce)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetMarkdownColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e4436a9458269176fab43b5818ba293795f68dd7abfe927c6814847ff1d809b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a698e9429bf5370208238e2f0aedc755b686caf3cd3d8599e57e1a63862c5ee9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6510566264eb6119309710feeafee87641ac3d26e374eed37a000937225b5a9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a03e5cbc3a1bb1edde9d0e53ae169eae6e12913085dbe803e205607b8c712cdc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetMarkdownColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__169d1d593b5bf6f3521532235dfe8859205a853793f48acbf29d60dbfcf858d2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf19d474de658f107b958b88e791fd9f5fc7f366672d86be2795b421883ff17f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7f31935fc227fbd0b22caadc606df7f3050f18f00c9923091a12a655a2193f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5afa2114fa97daf6e26b2629e3fdbafa9b2a7c4db72fea2598a1682502a4c06a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetMarkdownDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d5b684ba4184efffe829146e8c539809fa4cd12763b67ff0bf9788f120c1568)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetMarkdownDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetMarkdownDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e9495f7eefdc7cb93b1bf09f4fd17872e8e393b4881edec4f437232f95f634f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetMarkdownDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32a150d9bc5c17b910219abad6c9c084e740513d7a3ff01064277db17033e33c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetMarkdownDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f31ec3d615e5627fe5bd5dd8016d5200ad58815ba607d8de5f73a512008b000)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c948657eca191c97223b2bd71364d18004a71648ee07631e08277114543c8e69)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af3214fb752d0095c8b8d0fb3574aea432fdc7482c020aa9da0f4a8725d020ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4e70366eb2c165d3aaf7121dc15f9cf5541f497248eff53b3ad43d2295143a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetMarkdownDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd34925a6332ca5df2c183c6a99b09c50a1b844bf1b86a5cf508ad2d8669dc79)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1dcb2d2a2cdd4b4df21f4decfc440d0ca2beb02d764192685f6a5e7849a1fb39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__22466ae15fbbc1b3cc83693a8cd8cf84c6936a0af317008f3efadb6a4d0090c7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c3c082f39ed79d36830249f8e8b05d71eacf15054826c2787ef29968b14385c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e99a4d55fc2688064e7a834b3079eeb148653c2a232bbd30541e5a9e35a9200)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f063e18e1dace5a543746872987c68a88f5a87790d66bc1f1f228a8b5c73249)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetMarkdownInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4886cc152f0cd0f627af477971fce8cfc90e4f875ea039f330995efbaeff512f)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetMarkdownInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetMarkdownInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a3bc24f70950589f98654a73efe7ee0128c4d42128fd5c2b46c7e2c9b554ce1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c053ad00308a25a7b172ebc32a48f410815f39b85afadcb3bb02054de6e8729)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc7ba9ec0f82f117a84a3307c838dcd1e081dc615e82084ef455c325ac661e86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetMarkdownInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetMarkdownInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetMarkdownInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c54dfb262f59e38d3498297b574a4fa80c8d725fbaa5f7903a2e02282e5416fb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetMarkdownList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d346dd67500886aa34481e3d852fe559fb963881db385fe9327907d1aecad28)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetMarkdownOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7d75b5f02def0af49f5d03221204464fc6f40a06d49618ee55a0a0aa1315453)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetMarkdownOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41964e1b3c7c5d1ee1693ae44ee0f29f3f61d66df7e2f6429ab5ed4654046df7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7b99e6f3d5e37ce6e02fef76e5a9ae595c68a55f777b417a5396f9cf40144bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ba67d602ca85599a539964c11dbdfb3718f4f36c3eca6f2871a01b618de1281)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdown]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdown]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdown]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2baf727b42457805b55d0a52eecc9375719f559a19e4f0f857e601bf9bc15b1d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetMarkdownNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__347ada2d0c180cc0d5ce4b621555cc4a7686ad472155ea0a79d7ffc2900a400e)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetMarkdownNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetMarkdownNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b6f556354dfcd15d581d4c1294795e4b34c4cba0ef4fce85ea7ad42373ae0e1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetMarkdownNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9552370e9aaa5011a59baa6a67d426ed162f771b446b63f6320f2675c4be66c9)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetMarkdownNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91d8b68aaa8726892fed76b58863de33714e12e54cb21bf01126f8f362868a87)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c972d6691ded17208dce25b64e31cf0f119cd0aae209d6b761bfeaf649881d3c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4d470506c7817b8f9a9d5cf553703255f761e3d5e0506cfe9780d2cad773d33)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d1e1cfb3f65a5f7eb288c7bb1d8b593b8c51ad90a647cbdc3505ebbdbccca80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetMarkdownNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39d81cf12752264bd8867b45638efe37d2d0fabbcc4768b36ceeb729eb903d33)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c46acee9ba81ec95104e583496d8db87588515818be7c655429ad991c1eb335e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ecb614aa6344dfc948a1311471aec2fec1dd4db7a9f78c2b64aad4811693508)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__708b03f723555f18f9c7bf8788936dd9fc13ff1a1723bd3684e3d9c35bffc62b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e1bc3387355924a024575b26ce419c49b2468eb0706c795211ab6aa52f63a32)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__840bd8d67d13febc4544ef5e37a6aad6e0bb0ee8c9cfb4fccd2ddd3f105661ad)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28fa743915ec9d5fdf532485b2889904a7da007ea8bc260b305c9ffc905ed64e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4458ba6daa9864da07f3eb9fe8238fc496c9203a9a09f36b8f1663483e5a8a73)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc7e0bd9cc7b3ce8c7f27873c5fd734dea4ca7c448c1cad3b5d41ed46329672b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a11b559220643accd4973df00ad53bce74aa25cfee353e70671437a56ab9afde)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96bca62e425d62993c574a94418b098a41e5a409b1ba741e35cf2e4dd0044bcd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfcb07db5e4e87433d872c2f2e5d37a2c4ec353a79229191731a1dbb703fdca3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37b9c6dbf6ece86a74f4ef34cba3d44fa61ac335c1de661ff61558c9d98fed4d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21d6a44c32e67653c4e15073e8b2b3554a86adef740e309b1b28162d11ccf20f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b8861f4f83c6102db433d3556c8acbbb2297e88a5542a2bbec1b85c81bd0cc02)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetMarkdownOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c5e86ca878b67dad2be8f47b6186fb2fc8f3b93efc81b98541141938c0587f8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bcf5f3ff9248c5fcb5251fd8157e5f95182d86b6a927ee984075737667ff2825)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70c7ae6ebfc98bc01cbe58891684b9a0373c2eef796dbcbb98a95b5a981db765)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetMarkdownInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__569c1cf4fe0ad357c4d38093fdb1fbeb98ee30fae60e1b9427b7bfdf265bdbda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__730c31769d889e32b3986840f06ebc8787e9c5c764ff6b26f5c2c2897539b86f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetMarkdownColorsList:
        return typing.cast(OneDashboardPageWidgetMarkdownColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetMarkdownDataFormatList:
        return typing.cast(OneDashboardPageWidgetMarkdownDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetMarkdownInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetMarkdownInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetMarkdownNullValuesList:
        return typing.cast(OneDashboardPageWidgetMarkdownNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetMarkdownUnitsList":
        return typing.cast("OneDashboardPageWidgetMarkdownUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetMarkdownInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetMarkdownInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="textInput")
    def text_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "textInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__072448ee639069c76c7d488a1900abeddf3f4b1a94ad24de6423fdfb460b7efc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c2fefe8d78ae5f0fb2d81e702abedbe5e347f456b18d17510a6369cf4c26fe3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__117f5873e79e46c76c3f879dbdbc170466bfee0a600abf0357cc29af00a30943)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c4a2ec317c7136fa28f7b085b5cc4253893d3099f2d3cd893cc180c651834ce1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a843e111b9b8f627103f98239f62a61c85ec86cc2040b293cf7ea2d892cf641)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fae9d71a54e4148f14bc9df86c1ef7b91ccbbad5e68dc779bd495a7ea6073105)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__646fff00e74ac395f992a218332fbe4de3603ee7e2f377bbb4db7bf19c2cc7a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="text")
    def text(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "text"))

    @text.setter
    def text(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b8aab6481189e9f6955ff36c76b8e202e9b6e9810a7616526d91b89424486a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "text", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce74b7ca7d5458495d6b6283a7943b3fceaab6b63d363e95af4694d78a334178)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d2556b7b671ddf2f493ffd04e42a21bfb87f81e981530661aa7aae2cc2bf8f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4030ad731536f82c84f0b28da6765eb1de6c9db1470a574f3a0fb2254ff21f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e290f96be63f6605f4fe184cdf84fc8024fd71738dc315e29db4584376e1834)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdown]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdown]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdown]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7ab3642467e08c1bf8b1eb5f075723e6a9143b4526b3b1939db9180276f8e9c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetMarkdownUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d0ae4871b35f7020c54b116ea3938717e6afdd7d8327f813cb17505e06ff927)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetMarkdownUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetMarkdownUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84f28333636f5a7abb05dc18beac450382418c01153235993a6c86e4b9e618d6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetMarkdownUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bdc3834f29ba406e01f85d3ef874836fe37b3b8ceb485a37e83ce168cac5de0f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetMarkdownUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b47dfdc649dc33b6a3d6a513504c4bcb28f01f67bd8aa1abc6460a0b4f2002a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76249e29fd12cd95a2b58295702f23844cc42e1853d8eea73791c58919a3dcc9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6575db7b3e523f86b1eb7c98c2e52b0c29ea204216a92490c6e0792d4a3e4653)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__601eca3e9aa530f1b69590425ddb2e18acced363520cf48a4eda80f4081f981b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetMarkdownUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25ecee0c4faa337a28d6c6d21080f7a69834079227a6b1605471414a810a3def)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetMarkdownUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2457898cf133c7a68eecaafd840bb6c721355ad955a942bb458463e37bc37a13)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetMarkdownUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetMarkdownUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetMarkdownUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e6b39a501740b61b75b507e91c5a7d0005aee62be8ea8b911ba97c7c2727e61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__110f6f6d330efe156563c28972f0c9da99ee01347e33029da30268afeb021640)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetMarkdownUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5799ff88f7998babea174ccddf76c5e70e2b6b7eb4a8b113644dfe3f20c659e3)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetMarkdownUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetMarkdownUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__74522a10a697231794235c58e1f007d018d509b9ad8f20da6490afba91cabfe9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetMarkdownUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e8950970c2db5d70c87dfbccc3d5fe91266ffc01d3d650b69d5e003962397fe0)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetMarkdownUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__818f7e4003c31630e0ce5e5c67cddb8eb6374f2e49bf166b401a7bf7c3635702)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3bcf92b1d289e5b00cf3a2ab68e493e2c92af880df92935173875bf7f7663ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e884d65afc62a8cef5a612f963f335b82612d1e68e465f2eb1cf9b8948747357)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__262f4ead1ea23f88ad96cc4f8d7185375f75d837bbfdfe6d63c424b4c4b6b964)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetMarkdownUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetMarkdownUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8d826095e9e98c07443c73f7200fd002ca49572fff37a537bf896eb0ffda9d6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__253432245bc2bc3e868e13e5863c1d1cf401c79bc3850e0eb343866e7d349853)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8e12f0d597e508a9cbdfa2cae1e5572f98e47f0b6500e934eb9fcc4287d0220)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__883a1b4831dd3927e1dcb962ff4496d6f827b24020a2fa751c0ec1aefd5e3c6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPie",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "filter_current_dashboard": "filterCurrentDashboard",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "linked_entity_guids": "linkedEntityGuids",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetPie:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        filter_current_dashboard: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetPieInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        linked_entity_guids: typing.Optional[typing.Sequence[builtins.str]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param filter_current_dashboard: Use this item to filter the current dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#filter_current_dashboard OneDashboard#filter_current_dashboard}
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param linked_entity_guids: Related entities. Currently only supports Dashboard entities, but may allow other cases in the future. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#linked_entity_guids OneDashboard#linked_entity_guids}
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetPieInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f4be3ef8b3adbedc30cf23f721a27f7ed100d6d9247520aecdaa0e9f8caad28)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument filter_current_dashboard", value=filter_current_dashboard, expected_type=type_hints["filter_current_dashboard"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument linked_entity_guids", value=linked_entity_guids, expected_type=type_hints["linked_entity_guids"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if filter_current_dashboard is not None:
            self._values["filter_current_dashboard"] = filter_current_dashboard
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if linked_entity_guids is not None:
            self._values["linked_entity_guids"] = linked_entity_guids
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def filter_current_dashboard(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Use this item to filter the current dashboard.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#filter_current_dashboard OneDashboard#filter_current_dashboard}
        '''
        result = self._values.get("filter_current_dashboard")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetPieInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetPieInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def linked_entity_guids(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Related entities. Currently only supports Dashboard entities, but may allow other cases in the future.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#linked_entity_guids OneDashboard#linked_entity_guids}
        '''
        result = self._values.get("linked_entity_guids")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPie(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetPieColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3f1d2fb598d057334470c27ffc26f399c52623d77ed9b739557ca4db6561eae)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPieColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetPieColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3157275241682a10c8d13b8aa2cd758b60ad8156229ea13ae32fffbb99b52f98)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetPieColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef0e311e9d29207704a624819dac125332372fc8b3abf963ba205f610b468de9)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetPieColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c730ae52e8e933fbbfde1baece2397300c18ec4822ae67b20d15aa3db623183c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf32d8e70b449b0a00e5202cfe8d27a80d2b3344b8fd7fcd50d807ea7559c716)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__774282d4519d24273f21687ef74119e7544fb80fd51d5ab944b0327d7cf66cfb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c4cd6718a74a6c6b26590fd2c56ac2a20f11f3c1cd8377d581b4a9057fe7544)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__608e2f8d78929a44ca24c09e27d8dc1b495213d3d6e6efbeebf3e6f77de0a091)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41a596508f83c4fcbad4a8103d36511de4cac67309b8d4e0b3650a14e36b3236)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetPieColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetPieColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7aabc00072bf81a2e023222ea20e68e173d6dc054ced0a3563884d8b2c9de63e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68f1553e94ceca27b9a7933e970f639d2a1337491c2a72b98a6cf8fc76c6906f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetPieColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__95aca5a29fdf8904a031e7ef9f4d39740623152df7cd5207461062b4e7301360)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPieColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetPieColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98ee28b575be27ea7f31fa9e7e5c7dee09b248d09d06b98ed98372644617ae98)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetPieColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eddd040752acac58ec17aa599af599a7dac1cbbdf28ee68df5e548eba97157fb)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetPieColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a088f95e4f5768e4f5a0831ce41489e6c55b2b3de958968db18c4ec6973b124)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__679e40a3429e82540a552af3b5d4b0efd579b67364f4419d4cc5e2fcd406c5ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__79c17d1a603fe631bc3424223ac393b4002114ad016082293e39f509f46f6052)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__785f66de0897a71af6dcfd655e3eb8d6beb4764b21f45b4111a0bcc3da0e9a4b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de80eae257a8479f300ea9e774744c0b255abc180c33f0a7d220b7956ef88759)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9cef449bbb54b10394cdee0492c04510a35d3ba95ad516939222aea22745d1d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b50a59c2f2f0b7e1b0c53ae47926f38fb0581770a14bd1edba21fb48bce3815)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd6a1c3ec80d629d450688428665876eee912d8c928fc7e3181f1eb79650cc62)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetPieDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b239ea4b34287e46debde26f1e17a058903e373e2a0e05ea06b3dc9772d827ff)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPieDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetPieDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36847d2a8be6b39adbfa2987c9d04e1b412d46e0dcb60f193e8f35b66be75408)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetPieDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e3b4c438e183cc81c18480e61ae319b4e618ed5a0dcb346c9a40075570b303f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetPieDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0766799d5d2e79cbbdafe66f6ca806bb5d9f3184d03d82b61d689f206787a4c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7bff14e7151dde99321d811e9b0f274abcef7e3c36c10e4ba9818ca1a1300aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7ce0d44bb8056c44633ce56fe4b7403bea3e12a4db010470d5660737641e75c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af687c6ebe940957feaa69ee9da70082b85965c14353dfe09765714ef70be6eb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c2388f6f2c9e1c2e17e0fcced9a2d271cfcd03ce687c50b3018e74e7dbccfbd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c863897ec1e5c57dea1992b5a4a878616aebf5ac9f8432510cd7c13ecf2ceda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71c663a36ebbdd2f27e903e9375db16cb708468d09c06e67a62073310fb4e12b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4858339baba44131b97581fe3e07239b720d5e3a0cc45c27ec9a77eb5ed92b75)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35d811ead833af772041c3327c250286dc9ef449931fcccc62a8c0349f866b82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc4c686667039488aa8af8fe59f4242c303a92034777df6d0e5f525447f5fd9b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetPieInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d6f61990625768ec35606f5ef406cd56f9be9b1aad665b4b8857a7d1776becab)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPieInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetPieInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f378b77725882952f15a5b66a992a958c0f57c82877da573ecac339b22d1b89c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bfdf7c592fd3a5be63303745481acf62927ec9748dfe60e7d12b4d35235ea6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09791039ae6b132b0102e8e94d025ee31ac6f9c2cb780704f88db8d0e6e5f52e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetPieInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetPieInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetPieInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8396b29bbd9bfb680984ad3cdda4b6c1b45aa581334d5123b37be9c8e573f0b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de4a24de83f3846c19fb67474ce2487f1bed35effdd7ca69e41a23734035725d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageWidgetPieOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a52e594e087a3c717344d2795417b3d166574731b8a312dd3842cd6048e4aa4a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetPieOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb749eb27d19032f19691f5de2aceae230c82e33eb6504f00ef622dccbabeb66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9eb0708237add8c980507cdb6169b42ac4c81cd964fb8395c0cf3b3f26fd0e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a17c963640dd5ccc10187741cf1712c2207a98ece8368c133612c14f31e791b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPie]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPie]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPie]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__226a3b713666576c12cb54f7435776aa7e033c0b3c0f74de36fb0a7aa5b5e056)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetPieNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__daf8bc34fee0d55fbee5733825bd4b8bdb1e4a6ea87c37c6f111f4aa2d2e30ce)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPieNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetPieNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1534743808bdec658a93bf6f529841ed4e36565db9df52b57c16944073409b05)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetPieNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc37352d2111de4790124bcd476ce8e850090dc1cb59bb8ce54a1b6bf5d670c4)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetPieNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee8df9a7bb19ffdcd70d169deafe9ad248ea0b61e0e6be2db02be3627bb69774)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffd6b85d1e7c7f6448cc12f955d00646107720b0ab351308e256d942286a48c1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d66ba4de97c8dae1fb4f46f317d38f704015ab1d7ac73d053af6d626570dd81)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89b2339f3d1b3e943630891240068e92a5b991c7eee9a7bc833ddc222fc3c147)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a43108d0e12501cc7fe372217c21216f6bbdeff848a0a7239358bf6c6f4df05b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08aeacd19cec5cf343f97ba2f39da767c21a2e0ec922fc58634672e99f9ed9b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__671ba42472b9942c48d6c19ad593d6956eaf5ebeea85fe995020d82c18ceac21)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc2be342c5a20894995b3403e763178ed9ba926ab059a7739d13dd77a1a27da2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetPieNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6679ca725b91e25bb545a7f8d0020cecafa37fced5659dd600847fef28953048)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPieNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetPieNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e2ce12dd2e4e169fce25009b4af64706d6d3cf01c0c882217b111481ddac00c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetPieNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9c69d106b8a2497556e43755144a8d05749ed9231575197f9e1452327fda7d2)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetPieNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d008883c7c91d2814337e7657fbcfa90666df982722a027e899a6fe6e9f763a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1af4ab22d3ed7ce94fb4205a47cd424c17019f146e8e290dd8710884814c48bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e20feeca1e7f6c0c08f0bd44cbe7386c51a4936a65cae6599ec71380ed7b5794)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6806844ceacaba4c2920f40eb931a9ccbf290bdd31c3e07de682f113387f8d5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e148c1b3af742a99f52822035b200239613aec729e2726f9a851fe497c19d47c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e3a668f0b388485337d5d630138a388cfd9f47f1bb868b0adfaeab950b54dff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetPieNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetPieNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__455be269328d41fd1daada677eb8453d64843a35684a93bc970d4e604fc8a8e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a1625fdce4d4adeb69d5aba8253d2d363fb84a3985fbd2337f30329fc48d19c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetPieNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7afbe4a5dd7c794623aca47e553c6ae8882e1b7dbefb0e794e73ec3342998b81)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPieNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetPieNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44f3f5b44ca8017750e44a660495acbb0039f2b7f3b801a9b3944442caf79603)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetPieNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a85856a0f48e26d94fab850ad1c4ffffd4a7228177527856fcfebba79a17478c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetPieNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__371449b2af5aafa8f6e1bf7677e9e4e27090f17dd082e5844ae6f9cda89c5172)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__889fda46116fc682a801bda4a85b44202687d37fd4c425ac5686e772f17247fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92208cd1da3079af7605452020e8d6069c14ccf4c595973bcbd00dcbf7ad9fb2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f697a9805089bcf9a712f3a0ea3ae01f0bfa7fb32d3034be20ec00776ff75718)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ee8d2bad189a7490c0046406045a6b94cece6301158d5fce6a5ea079b52854f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__421b0b883aa6d1d57e3cc268bbb24f3882e82c6cf20a700141c027bd918b5480)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c932b919b6c5a189ec7f82fdd97f1b462e702abb83cd5a29af611b88b9634ce1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__015ad51e6cd0f9b5f6fb6b5b8445b037515a4feeb6a2a194092b337b8390220c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a48569d9875f66ec42ac0c0cb25de11c1d40ea72eb9f4e95cfa0ab49d990fc0d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__475970a8c290a9b323fa9643209abc485d21bb311df3487d9972203ee66251c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5bd8af32752502fb7d92a00d9c6074bae565ee36c7c3b05d07098fab76b238c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetPieInitialSorting(direction=direction, name=name)

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54a107b7c9b50595e01744bd22abd61016b03f273135503bbb24453b2925dc15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a413998829e1128e463867b775f1a92297ac32317be455f49dc558eeb72687e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__77b737c6d4cc6764e7ade4792ba3ec713e326a98106bc79bc316e1d82ddf4d6e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetFilterCurrentDashboard")
    def reset_filter_current_dashboard(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterCurrentDashboard", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetLinkedEntityGuids")
    def reset_linked_entity_guids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLinkedEntityGuids", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetPieColorsList:
        return typing.cast(OneDashboardPageWidgetPieColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetPieDataFormatList:
        return typing.cast(OneDashboardPageWidgetPieDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(self) -> OneDashboardPageWidgetPieInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetPieInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetPieNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetPieNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetPieNullValuesList:
        return typing.cast(OneDashboardPageWidgetPieNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetPieUnitsList":
        return typing.cast("OneDashboardPageWidgetPieUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="filterCurrentDashboardInput")
    def filter_current_dashboard_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "filterCurrentDashboardInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetPieInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetPieInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="linkedEntityGuidsInput")
    def linked_entity_guids_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "linkedEntityGuidsInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6c5460f0bf46103ff40c84fe9daa81aac23aca47bae53fd8ca2c73a09499b22)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba65af6109e0139e51e2f2a23a7dec4d0619610cd91d2af2d0e01583cc2a6b26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filterCurrentDashboard")
    def filter_current_dashboard(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "filterCurrentDashboard"))

    @filter_current_dashboard.setter
    def filter_current_dashboard(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70d8e3d6ddf5a358ea55894d780f2de2e6e1ccdc44698e4813ce2739a1f106c5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filterCurrentDashboard", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18820545cac6ec1141c970ec804d77b7b9701669cc38796ce5d376cada0a683a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__272cc8dfeae4ac1d059d220761d7d21d214726563f7cbd427db17c060e60ef08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a97382b1df035111e70cd664672cb60d42193b25583ce18b4dc65751a0db3dcc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="linkedEntityGuids")
    def linked_entity_guids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "linkedEntityGuids"))

    @linked_entity_guids.setter
    def linked_entity_guids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26c37e65978ffcb6e8159267d463f46fe71783b999fce441243af6b85e04a27a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "linkedEntityGuids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c66fb726ace7f7e6b1ca3d89583ba29e72467c03226b4bec409442592a61b86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2ea80004105fac316a41a96e3f1d4fd157caca9d5b64646436182b047b6ad31)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6fbd364f5a105fa66cb9d35054b2ab83f70668e0cd379c713f8f428e526a9e5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__458bcdb43dd96ed6febc406e01ad103d00ccf8e2848842da23fdcf3bcc7d2e84)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba5ce6f96d5ff14a08507402e0360cff7006bed87b670c121cc72a3252e3eb14)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d453bcf57c568f5a0e931d68fb910e2faa03aa276698733d0f8efd25d53ee72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPie]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPie]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPie]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__caa101081971caa0bba52f44f14da9f7f0a0442c39d1f248075e90c01fc8cfce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetPieUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1da60083a7a2c86cbf3017b4abae2e8e51923e8f45f972a8386c060db0ef2028)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPieUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetPieUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3a1ab02c392542eef19eadb3c68876637cd266ac65f9b4c37c5623147d382cb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetPieUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__589bc3ba3ec9d186e97d444ffa0e504f4024e0806620d0fe7fbb4cd83bf25d4f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetPieUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc790feac33558ce82e7da6b46ea5abc0aa255680f412f8582eeccb4fbdc6c27)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c35d2e5bdf7a9ec1cb11dcb450fa76305b8ac2d5a9679a7970c1351d091c1fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__897163bfd663520b4a99a5bf32995c6575d409a765a466bb8a3d606726ec3123)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85f257581ad869b0703116e79f6aabb6b3fe7f50a2c963af1ecd8bfbd35b40ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c832b27e97c054556ef9647a53167551ccc5224930a0524e4971fac83ed1f16)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetPieUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__946d2e3f5e6f92a9f3a540a2221844c9f9de79d665da470516ff18a0535bc4ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetPieUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetPieUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetPieUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__791b849e93822f6e2b50e0660f6d560308e2ac6bbfa7a0284b1143c9e905ef65)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__494f6d0435a62cdb05ae005ef5670c47595ccc15777a9187a84cf4f13a53ed52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetPieUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb0bc17853bf6ca3e015226b3b64ee670f9ff5d020a809d92603b0aa69009efc)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetPieUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetPieUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04e7658a35735363b1e7771746fdd71e4da69a27cbb3ebf18d5556101a23f960)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetPieUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c64e0f09140c1a038f00cc2671b1cf00ced9b955d7f4371e267375e175e69eb0)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetPieUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__add0ee224b3bb710682e14f35fbec01f415c07194468cad73dd058d0746a3ce7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be915a26fc1686233f301f4a1089ecc50fbd44bc269a3410c247325726ee13be)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e2c8fd2f8eca9868c5439428ad1df6fe7102b6834d879bb0e418ba2c99a2171)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a346b292bcae172f07b82e49f3c124f879f3c4c074e31e30b0af90bdcba00f39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetPieUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetPieUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3009308d0fe0999b2152a55679a8e6b8da118dcfcc47d785d3576392e53fceae)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2defa39a0a4cebdaa6f74ad0282d6be95c73670a5a11fb1685e57792b91d9d9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54d4c98b151693c79dff089de0e383ee6fb056bb857d3769f566ecc3ffc8d577)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2189841696093ca91b1aff46ec4684d8a8c64488908efb934b74e9cf49d610f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBar",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "tooltip": "tooltip",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetStackedBar:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetStackedBarInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        tooltip: typing.Optional[typing.Union["OneDashboardPageWidgetStackedBarTooltip", typing.Dict[builtins.str, typing.Any]]] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param tooltip: tooltip block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#tooltip OneDashboard#tooltip}
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetStackedBarInitialSorting(**initial_sorting)
        if isinstance(tooltip, dict):
            tooltip = OneDashboardPageWidgetStackedBarTooltip(**tooltip)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6752f1dfb839e17794c3fc1984b2624fde4a1900abab3147046c9d149644df0)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument tooltip", value=tooltip, expected_type=type_hints["tooltip"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if tooltip is not None:
            self._values["tooltip"] = tooltip
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetStackedBarInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetStackedBarInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def tooltip(self) -> typing.Optional["OneDashboardPageWidgetStackedBarTooltip"]:
        '''tooltip block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#tooltip OneDashboard#tooltip}
        '''
        result = self._values.get("tooltip")
        return typing.cast(typing.Optional["OneDashboardPageWidgetStackedBarTooltip"], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBar(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetStackedBarColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0bd26eea911c5604fb0e77e17a59d35a9378edd60b6880ec2f96c34eb0fd75f3)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f839ef9ed337a4d13e949935494c0e42b8d9bfe656df2a6c1ccc89c558c53826)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetStackedBarColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb2dcce4a18927667ead62bd50c23761aa26c2d8d3b11d675fa1f6a50d640d7d)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetStackedBarColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__290aa61762b67f3361c0ce7558ed7e9fd91e6b46313cf72d5ab0ba0fcc928915)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58a2121577910d34fdf596430fc30f093dbd302c0dae22d75e7f10e1abd32ce6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3de0d4a1ee959bf5168e59f7c8982c446a71ebbde60d504985b417d3645def98)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f59bb95105e84eb84f8d1b3aee9b36e2754e794257b14a4784d56190aaa50b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fecc6c050d330d06ab7474627da4c003f82233268d013f13c50d9d01fadd0f27)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60b94100eb09cb81e3412d8bf60cd0030de4004db760f6d499798e6eafbb6187)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetStackedBarColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetStackedBarColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f96406b82c730669349823d3a84345566ed26c52a4ab0a887bf28261de1c85b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c572619186f7206f41324588175ed55ac4b0b9e3105bffaa6670a4df5d65ff00)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetStackedBarColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__932eeb23f27e24302faf82e7ce34278fde7540f1197d4f5d3d8c1612971db567)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ac342b8b5ff24332fdc0314ba2887c09b3b4e31bbcfb056794a622ae7695bda)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetStackedBarColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be73e97e0a2e9bf62f76616a95d69157418085f4eda3bed667a463fde4193c87)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetStackedBarColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ad73c3f44a19b82e35180855ea48b94d5b0206c5ce0e2c33cc87ee088d5c852)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__229495beb1cf659e1ca4fd7725ac22824b98f951b22a0e331d9b366ff9596594)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__50f9307c6cdcd8211b8bf36bcf1e2fa036e0268cb394a33334c42775d3c8931e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23db4c5e490c0732100bd077e954af4dd56b69541373928ce7b910f216c836e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b026b984c7cbeb3242de62cd5f12cb4fb8d58b540e599df15c70ab58710a2c1f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__060e5d2d002b86e05f3bee5d0eb4902734075c528db18d36c584a97146875aac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63badd15219ee4e72c8ff0cd07235f7be0ace619becf6994b149b00a0ead4ecb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c97c96681d7eadf6262c18cf0acddd217fb085e5d036de73c3abc8c10929aa9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetStackedBarDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fca95ff97c7603038a3b29463e72dea1f30f2ea99cb234c188258b50ebe2375f)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7914852b46f125dffc7a30dd0344fce70fd475ef289e13a20fec3f1c4970c650)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetStackedBarDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4535efb3f27cff0610164cc3c6fbbd9d026b4bf2d9f6cca8ba551956b1abe79)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetStackedBarDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29991d1b474023064ec2de11a730379d52605ced51db642050d61cfb5f616f55)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43e8cceaa67b731927ad02916218eaab1f5c3564dcaff1af46bf34d72784605b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a082a6cab50629c7033743b36c0c1240bfdb0f2f9708062708f87a8e09cf8cd2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ecabd0c3b45547abc05c2fdd583fc49fdd4df645ab0b5832580fe2df69535d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e51e070daf147c8fc2ff0c9bf69800bef431e82530bf8cf3e7d38d2035695226)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d194a0d0665783bc631b09e041154ca0c52b79b67d5cb79d70c2e6cc40415759)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59a30d9fa4f547018ad9632f470e738ff80bc38e15a05608ffa00e992ff9b803)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1bc80931f83bde8112fd91f49d3ad405657a3595a6954282d01933c91b528091)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d96ee217ceea3c1126461ab015bcc1012c93c6dda7799abfd2b2e20288420af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f150644e72776a818c01bbee4f95d782d972714ffdd6ac28a4fb61c389b3922c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetStackedBarInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0d43850e1b57915009072ceb2f53c85b445747c635c886ef020e5efe9f1773d)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__becc4ba4cbb05455b09463cc87cb95dea0fef2e5bc861ebfe37abd683e74050a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe79fa5ceda58f2a3658cb31c94745308f8fc309934f1b9aaba08e5a88c8bbc8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ac4b3adcb043cc172c2402008cb2c71daaf28d84f6176af612dd5b3711bfdef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetStackedBarInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetStackedBarInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetStackedBarInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec7369e4784a53ee68ecbcef217d7a71c00bb70064a38479aa9dd2f6da03a261)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7739749390fcf60819ca29cc89d7bff111cdf9337b53b4baedf7b807ec0dfdba)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetStackedBarOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88b8da7f7773242a083fe2c3b2a8ac2c1b548cb7ff3732d4e0090ae1fa781d2a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetStackedBarOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb678cbacd34a0b7f7fe1a9985dab6591b73bcd0395fc392145112a02166f090)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1df99e306c62e63dff9a99f2e342c93a560d7ea804dc6e564a1849c349387e58)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c870652350c0f8e7d52225b89e44aeb759132cf47e2a309bd218f114428c659)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBar]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBar]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBar]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9eb0ac332891ac39c43f8b85eb6ce9d1833d05adc4a1c63373782b595e04f53e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetStackedBarNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__675cef10884a25b5ee1a32a128aa3e81dbe8480ff251118aee9e1a53fc5e58e3)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bdb13b206502a46776dfd622a3a43ff090a0c05a2260889c977bf3c49418d078)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetStackedBarNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__885616935c40a2feb6fe1152ae3ff238d163c41d97e5e6f2cd05ca305ffd96d1)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetStackedBarNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c3c0830921379bb1f256c9d747acbcbb6cd5812c15836e961bd20490294228a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c36f1e8442ed392077525d4e26d3622df3eed7aa1f4d4965cb6a0b736154a7d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0aa9acfcdd431338fdc15a61e47121bed77875258d76fde9bc2efda07a94ec0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba97d3e9f11e6d564cd211dc98c08d55bda758317630adad98e616021f674549)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b1e17a98fc14e079d689b6cd35a7b75ad2a6ea8b31fb536eb7824c4e6565505)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__540db736bddcbd751f778c395122162cd7f0bffdcde421dbbc5acf108246b0ef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38366a4b73545e631e960d3dcd937673a9c38dec5bea6b071d66f7aa7d6f9676)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a1976160c58b5bafc8a490af099131212199a9b35cbfa3c2e359edc15314bb5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetStackedBarNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58c77d1258b3ae4e1f470c2618d46fdb75655fcd4dca9e63a09a6007ca946f04)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac3729438d1d26f228e16685f24730bb4b3981b547652c460423b54534713f7e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetStackedBarNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80154e14ecfdec68cf556f2e2f308ae1c5c8ffbcd153b0ce7aa625e2780e09a5)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetStackedBarNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a28fe2a94eb9639a887f9b68590e62b794dab093cb3329bd12adbe9d472d9386)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b2ebb0dd51ef555569782c45a308f6d84c748ebd64d85300e655bf60f5ac925)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a11826567b99602d2ad7dd54ddf66187a20ff2109cb8363181d67c77270e7af1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__838572e9bac204d02581c3391cef36287faa09f99c20acbdfb304bf292e81572)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f260d06e7e84dd27b5bb9f500eb81c1ffc6f6af4b8cdef7b1a866dddbd1129f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9267d6309f3891321fa02d0528570bde21947647cfcfbdb242cc550ed68dbb8d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cde01a61d52ac6ffff46f80bee5e33889a8117700fe37d1f1126b83c3f02e02b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45e8bacf877bfbc2695e35df7b91ddabc70107ac153ce00e08726311954d44a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ccbee92d66cafaa85b08ba6969b141e2fcfb2983051b62ac6fad9f597cb7e93f)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04a0712f807859e3fc7f2f62585abda52889c647ad497e1db15312d782d23e8e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a30678fd766a63fbceb4c771e555f0b7607d686c16b3a978e905275b5797d749)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39cb47e2d487fa252e9b081976219122e8340844da96566fea22eb440545bdd7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da96ec8f57651d5e1b3b830e8e0d61160edb4317f74923ee9319963d7ac2ed4f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88636ab4bc4a41040d0570bf35f1c680f223e6c1e3bffb12919288c540afcb63)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38e75e51f140c73d216c29b750179194ca782d693473626e1e2fab6a0effd3b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a44d6d4dc90e615f39fdf7c439fad2208982b77253a59287aac1b33b278499d4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9da76d6675a6fcc584d638c2ae8ab0a85b34a1ef4843bbd3d3308a614dc2c0f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0815387b81c5f4f46d31ac4a005517e464660521e77e3e16ef0da4470569c00)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__79b1b29086ae1549dfd3594db7c8f089ff93aad43f313ccf9c823d1a6418c7ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c90e1ed22d4114b53f5d992e667df316c2beb353bae8a3bb4bdcf7a7edd6ba0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b754c0c35aaf3b11584981a41dae41123aca194aed4c9a5eaa56d2727e79c48b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a151d236eb9affef570556865280cd4ccb0992710d11044eed4f284faa9d395b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetStackedBarInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4009e92e55ac01950ec924ffabedaabb7ae0de855e2efe2ee18926aea1dd46bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__947d9ef28a8ec62703ea868d8e0a136a1863147ef6558588898f8c37c2896b5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putTooltip")
    def put_tooltip(self, *, mode: builtins.str) -> None:
        '''
        :param mode: Tooltip display mode. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#mode OneDashboard#mode}
        '''
        value = OneDashboardPageWidgetStackedBarTooltip(mode=mode)

        return typing.cast(None, jsii.invoke(self, "putTooltip", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87a6440ccab91f7dd6e21306f803c36f5fbaceac39b5639d3ad966336b18eba7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetTooltip")
    def reset_tooltip(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTooltip", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetStackedBarColorsList:
        return typing.cast(OneDashboardPageWidgetStackedBarColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetStackedBarDataFormatList:
        return typing.cast(OneDashboardPageWidgetStackedBarDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetStackedBarInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetStackedBarInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetStackedBarNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetStackedBarNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetStackedBarNullValuesList:
        return typing.cast(OneDashboardPageWidgetStackedBarNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="tooltip")
    def tooltip(self) -> "OneDashboardPageWidgetStackedBarTooltipOutputReference":
        return typing.cast("OneDashboardPageWidgetStackedBarTooltipOutputReference", jsii.get(self, "tooltip"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetStackedBarUnitsList":
        return typing.cast("OneDashboardPageWidgetStackedBarUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetStackedBarInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetStackedBarInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="tooltipInput")
    def tooltip_input(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetStackedBarTooltip"]:
        return typing.cast(typing.Optional["OneDashboardPageWidgetStackedBarTooltip"], jsii.get(self, "tooltipInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__880a8bdf61bd79ab2a03d5fc19525b0c9024a584d4e74ad5553a56c7a6591a67)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__144792f09105d54075a8add19090621b2f21e9eac8a8dffe785e1e6fec041a92)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d85eb623e84b76a9fe9bc3d7d4cc9e3781778c79d57d682ab9c215c4572e9c68)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da9c539237347fcc20c85b90e3b69e2e80eb3133349bb938589d92fe16735072)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16587b5c3f4d6f52813579276b265b283fdbc2a33ce7d07855b9c52482618954)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eaeee0be6580621e9c7dc01cd15b9a73c0b8834a30ba6beddcbc89df27a4090c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f588099d5a482f85b77a737c70fe98b0809e9dc294fed5c3481d813f73e3ea81)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56fbe5d8eefcb3425822fe6f7a739e06ac6042f18b05188ba62f7c1b1f8fdd95)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0643ef223608f9bf5b09fe2ac8502237fd871fc2fd3c24e4de9b464ffa76174b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__635f537bb12fc0bd71ba38c0cdf646de9fb6db74019bf31cab0808f3de5aa68e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6871d88b1b24dc39cd96f9caa4a2fe2a3d7f278ddb911823a802fc9015b66211)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBar]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBar]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBar]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ea84a438a7a29412df38aaead8d0f114188e3516a0eae46ec97657f2049a50b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarTooltip",
    jsii_struct_bases=[],
    name_mapping={"mode": "mode"},
)
class OneDashboardPageWidgetStackedBarTooltip:
    def __init__(self, *, mode: builtins.str) -> None:
        '''
        :param mode: Tooltip display mode. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#mode OneDashboard#mode}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2253a77baf22128dafef6f6a40517aefcda2f6aa087f52ab6905b4d106ecf210)
            check_type(argname="argument mode", value=mode, expected_type=type_hints["mode"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "mode": mode,
        }

    @builtins.property
    def mode(self) -> builtins.str:
        '''Tooltip display mode.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#mode OneDashboard#mode}
        '''
        result = self._values.get("mode")
        assert result is not None, "Required property 'mode' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarTooltip(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarTooltipOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarTooltipOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9abb73c6384d5993dc1886d5bcd91f763e4b265b290bf58f578ad2056130c445)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="modeInput")
    def mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "modeInput"))

    @builtins.property
    @jsii.member(jsii_name="mode")
    def mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "mode"))

    @mode.setter
    def mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__78d7ed3f91112217d16562f94ce1b13f356ddf96fcbeba832158a13f4f79349c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetStackedBarTooltip]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetStackedBarTooltip], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetStackedBarTooltip],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c93572c5b13485345f10a192604f354014bbd9eb8fd2e47df63eb5880b22efe8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetStackedBarUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ed8dc5fcfbc760823ffefb6ed48e0aca5225c6034170285f4b684921aef5b9a)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e019d7e185f76e0d123ca7ed6f05276058c36fc43effd45ee5eef388c01ef541)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetStackedBarUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6fc9d448dcda3936d44c57d09e4132a8a1752ba9f932c85ab002cc4d18417610)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetStackedBarUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3500e22746b44fd5c2fbbd287ba0ad67f1b45db999a55b80df9c3121c08ac1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59e3e1e9a0cd797aa3324450c5dfe78252309ccdbe94ca4f114a8641c9e827b7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d167520b55813a1f32553db39f56acc43a3c942b86348f08caa1c6dcbd52a961)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9376b3a855aad8c9627df5f926bfe8bd98d53f9886e152c4b694e11207a9b3de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d21e790266419ab8ea79b67d35fd2f379bbcfa5a479487726128b7f20925f2e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetStackedBarUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e85f86561bd28d42b749835d2792a4c5462be30c3c4f2cb91a8072dfc2c07af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetStackedBarUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetStackedBarUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetStackedBarUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5a83ceb37b7b464542f318fe62e6c18be5e5abc6d60e00881e1e29eeb7b26f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46e5fb4ccbedaa8c21444fc140ef418c913e75e7d384f5e6360d7a6a16e53880)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetStackedBarUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21484fbbe56fbb32ab330df70a64e6073ec92e438719de2fa9365101e7da01a3)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetStackedBarUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetStackedBarUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1092a6298c446e45e448bbea841592bad2403297eb97de102270fd7f03db89b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetStackedBarUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e03fd5f6b479bae0dc0bab07d4eb9687cdefec9389d7f8184330481fb1a5c595)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetStackedBarUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b98f9603d2610ac4e2d8df9c37cc5767cbe5c652d4cf95a30aecc492810ee2d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f657230b7ba2288235c6953823a1c24741ec4c0dc19265377c4668e17df92b6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27b3040012e1133c9c4f2761da5b64349aa2e15494b46cbd235f41e4cde8c923)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7a7755d5e1fcd8a0364d65c260d5ddb8eca8982ab8973e5769d083ef459804e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetStackedBarUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetStackedBarUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__095411482b4abdeacf27d40c34319f7208747c54bc10bb920bd716e0e7891311)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b85f501b198711b2dbbd61900eff1ea7cc3d16ced11eb5183f4d6f07764fc28f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18874527e738c24014888fe31c9b021ddfaf03b5a13854ddb9b869dbc64d1e1f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5b9e7ed3926421eb8e97a4373b378cb1873e30489f33444163d486559ff9315)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTable",
    jsii_struct_bases=[],
    name_mapping={
        "column": "column",
        "nrql_query": "nrqlQuery",
        "row": "row",
        "title": "title",
        "colors": "colors",
        "data_format": "dataFormat",
        "facet_show_other_series": "facetShowOtherSeries",
        "filter_current_dashboard": "filterCurrentDashboard",
        "height": "height",
        "ignore_time_range": "ignoreTimeRange",
        "initial_sorting": "initialSorting",
        "legend_enabled": "legendEnabled",
        "linked_entity_guids": "linkedEntityGuids",
        "null_values": "nullValues",
        "refresh_rate": "refreshRate",
        "threshold": "threshold",
        "units": "units",
        "width": "width",
        "y_axis_left_max": "yAxisLeftMax",
        "y_axis_left_min": "yAxisLeftMin",
    },
)
class OneDashboardPageWidgetTable:
    def __init__(
        self,
        *,
        column: jsii.Number,
        nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableNrqlQuery", typing.Dict[builtins.str, typing.Any]]]],
        row: jsii.Number,
        title: builtins.str,
        colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableColors", typing.Dict[builtins.str, typing.Any]]]]] = None,
        data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableDataFormat", typing.Dict[builtins.str, typing.Any]]]]] = None,
        facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        filter_current_dashboard: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        height: typing.Optional[jsii.Number] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        initial_sorting: typing.Optional[typing.Union["OneDashboardPageWidgetTableInitialSorting", typing.Dict[builtins.str, typing.Any]]] = None,
        legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        linked_entity_guids: typing.Optional[typing.Sequence[builtins.str]] = None,
        null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableNullValues", typing.Dict[builtins.str, typing.Any]]]]] = None,
        refresh_rate: typing.Optional[builtins.str] = None,
        threshold: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableThreshold", typing.Dict[builtins.str, typing.Any]]]]] = None,
        units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableUnits", typing.Dict[builtins.str, typing.Any]]]]] = None,
        width: typing.Optional[jsii.Number] = None,
        y_axis_left_max: typing.Optional[jsii.Number] = None,
        y_axis_left_min: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param row: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.
        :param title: A title for the widget. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param colors: colors block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        :param data_format: data_format block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        :param facet_show_other_series: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.
        :param filter_current_dashboard: Use this item to filter the current dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#filter_current_dashboard OneDashboard#filter_current_dashboard}
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.
        :param ignore_time_range: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.
        :param initial_sorting: initial_sorting block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        :param legend_enabled: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.
        :param linked_entity_guids: Related entities. Currently only supports Dashboard entities, but may allow other cases in the future. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#linked_entity_guids OneDashboard#linked_entity_guids}
        :param null_values: null_values block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        :param refresh_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.
        :param threshold: threshold block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#threshold OneDashboard#threshold}
        :param units: units block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.
        :param y_axis_left_max: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.
        :param y_axis_left_min: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.
        '''
        if isinstance(initial_sorting, dict):
            initial_sorting = OneDashboardPageWidgetTableInitialSorting(**initial_sorting)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e0d83e80b6e042ca608dd188e4fb7a8c39b32a4189c287f49977da72e5dee31)
            check_type(argname="argument column", value=column, expected_type=type_hints["column"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument row", value=row, expected_type=type_hints["row"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument colors", value=colors, expected_type=type_hints["colors"])
            check_type(argname="argument data_format", value=data_format, expected_type=type_hints["data_format"])
            check_type(argname="argument facet_show_other_series", value=facet_show_other_series, expected_type=type_hints["facet_show_other_series"])
            check_type(argname="argument filter_current_dashboard", value=filter_current_dashboard, expected_type=type_hints["filter_current_dashboard"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
            check_type(argname="argument initial_sorting", value=initial_sorting, expected_type=type_hints["initial_sorting"])
            check_type(argname="argument legend_enabled", value=legend_enabled, expected_type=type_hints["legend_enabled"])
            check_type(argname="argument linked_entity_guids", value=linked_entity_guids, expected_type=type_hints["linked_entity_guids"])
            check_type(argname="argument null_values", value=null_values, expected_type=type_hints["null_values"])
            check_type(argname="argument refresh_rate", value=refresh_rate, expected_type=type_hints["refresh_rate"])
            check_type(argname="argument threshold", value=threshold, expected_type=type_hints["threshold"])
            check_type(argname="argument units", value=units, expected_type=type_hints["units"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
            check_type(argname="argument y_axis_left_max", value=y_axis_left_max, expected_type=type_hints["y_axis_left_max"])
            check_type(argname="argument y_axis_left_min", value=y_axis_left_min, expected_type=type_hints["y_axis_left_min"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "column": column,
            "nrql_query": nrql_query,
            "row": row,
            "title": title,
        }
        if colors is not None:
            self._values["colors"] = colors
        if data_format is not None:
            self._values["data_format"] = data_format
        if facet_show_other_series is not None:
            self._values["facet_show_other_series"] = facet_show_other_series
        if filter_current_dashboard is not None:
            self._values["filter_current_dashboard"] = filter_current_dashboard
        if height is not None:
            self._values["height"] = height
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range
        if initial_sorting is not None:
            self._values["initial_sorting"] = initial_sorting
        if legend_enabled is not None:
            self._values["legend_enabled"] = legend_enabled
        if linked_entity_guids is not None:
            self._values["linked_entity_guids"] = linked_entity_guids
        if null_values is not None:
            self._values["null_values"] = null_values
        if refresh_rate is not None:
            self._values["refresh_rate"] = refresh_rate
        if threshold is not None:
            self._values["threshold"] = threshold
        if units is not None:
            self._values["units"] = units
        if width is not None:
            self._values["width"] = width
        if y_axis_left_max is not None:
            self._values["y_axis_left_max"] = y_axis_left_max
        if y_axis_left_min is not None:
            self._values["y_axis_left_min"] = y_axis_left_min

    @builtins.property
    def column(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column OneDashboard#column}.'''
        result = self._values.get("column")
        assert result is not None, "Required property 'column' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def nrql_query(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableNrqlQuery"]]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        assert result is not None, "Required property 'nrql_query' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableNrqlQuery"]], result)

    @builtins.property
    def row(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#row OneDashboard#row}.'''
        result = self._values.get("row")
        assert result is not None, "Required property 'row' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''A title for the widget.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def colors(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableColors"]]]:
        '''colors block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#colors OneDashboard#colors}
        '''
        result = self._values.get("colors")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableColors"]]], result)

    @builtins.property
    def data_format(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableDataFormat"]]]:
        '''data_format block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#data_format OneDashboard#data_format}
        '''
        result = self._values.get("data_format")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableDataFormat"]]], result)

    @builtins.property
    def facet_show_other_series(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#facet_show_other_series OneDashboard#facet_show_other_series}.'''
        result = self._values.get("facet_show_other_series")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def filter_current_dashboard(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Use this item to filter the current dashboard.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#filter_current_dashboard OneDashboard#filter_current_dashboard}
        '''
        result = self._values.get("filter_current_dashboard")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#height OneDashboard#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}.'''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def initial_sorting(
        self,
    ) -> typing.Optional["OneDashboardPageWidgetTableInitialSorting"]:
        '''initial_sorting block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#initial_sorting OneDashboard#initial_sorting}
        '''
        result = self._values.get("initial_sorting")
        return typing.cast(typing.Optional["OneDashboardPageWidgetTableInitialSorting"], result)

    @builtins.property
    def legend_enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#legend_enabled OneDashboard#legend_enabled}.'''
        result = self._values.get("legend_enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def linked_entity_guids(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Related entities. Currently only supports Dashboard entities, but may allow other cases in the future.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#linked_entity_guids OneDashboard#linked_entity_guids}
        '''
        result = self._values.get("linked_entity_guids")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def null_values(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableNullValues"]]]:
        '''null_values block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_values OneDashboard#null_values}
        '''
        result = self._values.get("null_values")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableNullValues"]]], result)

    @builtins.property
    def refresh_rate(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#refresh_rate OneDashboard#refresh_rate}.'''
        result = self._values.get("refresh_rate")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def threshold(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableThreshold"]]]:
        '''threshold block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#threshold OneDashboard#threshold}
        '''
        result = self._values.get("threshold")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableThreshold"]]], result)

    @builtins.property
    def units(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableUnits"]]]:
        '''units block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#units OneDashboard#units}
        '''
        result = self._values.get("units")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableUnits"]]], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#width OneDashboard#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_max(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_max OneDashboard#y_axis_left_max}.'''
        result = self._values.get("y_axis_left_max")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_axis_left_min(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#y_axis_left_min OneDashboard#y_axis_left_min}.'''
        result = self._values.get("y_axis_left_min")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTable(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableColors",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetTableColors:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36193764262771f8a394b38eeab0c4114ae9dba200fd8c97ac700b05db5dd637)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}.'''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableColorsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableColorsSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableColors(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableColorsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableColorsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__578e5993e7edca8bd40678a583ee5f2b59226055519cb08d19b0a2824b59b354)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetTableColorsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eac9eb43895e8f8d3930fe83ef8cb54a6b83533fae6a5ac5fdd921f12ca4b31f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableColorsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c0f46a630cad3551a56b1f525ef5ddc05085c71e19af9f778d252cfca0a886d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f8d151dd97452260bf3065a64a45c9cd0fd94984c2645a39c40e221708dec5bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46ac10c08b2f5d927917b95571aae0b7dce987615562fcae3aa76fcf3e9e5992)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColors]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColors]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e29642d51e3611d555fc48ce0d0a667dfaf5e8633ae051ba3cbede85d36baf6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableColorsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableColorsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d4cbd00a87b0b78b20263c07f7dd58cecab0b472fc6ecd5435c965a853facbb4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableColorsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7fa8053a9743cfaf96fb0a5301359994079b4944283ea4c472c52f9dfa619563)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetTableColorsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetTableColorsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableColorsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableColorsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a489e62391fb07cf49db0a013010d9f9aa9931375e8e1b02af0e75b7f04fc1bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableColors]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableColors]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableColors]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f579841617173767d232e00887dac7d9e6983c32720440485f7d1e3d683e958)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableColorsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"color": "color", "series_name": "seriesName"},
)
class OneDashboardPageWidgetTableColorsSeriesOverrides:
    def __init__(
        self,
        *,
        color: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color: Color code. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2a0ed4a561354f134e7ed87107e7652d2eae4e0fa28ec2aac1aab1bf58c6123)
            check_type(argname="argument color", value=color, expected_type=type_hints["color"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color is not None:
            self._values["color"] = color
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def color(self) -> typing.Optional[builtins.str]:
        '''Color code.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#color OneDashboard#color}
        '''
        result = self._values.get("color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableColorsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableColorsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableColorsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c4c63cd8a0ce2b22015d068074645f9bd3565cfad4cabb5cb53b5e2756d9891)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetTableColorsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9041e84f9dc7ba83086319dbd43f8c1ea8e2a98f8b8601a47bad3799ce67a28f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableColorsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bbb256dfe396d74eb3fcb958b96f44999f2260f37c826b191dcd32d3ad0620b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d14fcc1b7030740c6975a0d7134b72cc39a0595c632e8851cbde03e0c3001c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65c0129a48ac6ad75b4248a2bf5a8867a0ffbb4e8c05451e0706cad3c465b03c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColorsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColorsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColorsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7c0a20120556a870bc632bce8da482b814c20652ccf143ae20d99ba51ef4615)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableColorsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableColorsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5c6ae4c8805e41482f1702956d1cc7ccc0907052c5d49342cc19b726f6814bf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColor")
    def reset_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColor", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="colorInput")
    def color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="color")
    def color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "color"))

    @color.setter
    def color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23ed91fc4d2af9d647a6526af6c1e7434d6df0e1d9a222e86765fbc9f886beb0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "color", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__750369cefcc65aa9c91c4950f42496eabd8462d5c0b672976a6cc0c68994ab10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableColorsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableColorsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableColorsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__447c2339585abaf4b31ceeac1576e8f316fbaea42775a1ba21c462f55e72fc99)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableDataFormat",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "type": "type",
        "format": "format",
        "precision": "precision",
    },
)
class OneDashboardPageWidgetTableDataFormat:
    def __init__(
        self,
        *,
        name: builtins.str,
        type: builtins.str,
        format: typing.Optional[builtins.str] = None,
        precision: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param type: Defines the type of the mentioned column. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param format: Defines the format of the mentioned type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        :param precision: The precision of the type. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28cd7623121a98aacb01bb47b0290b2c8756a7b51997588ee725a6a3dd3278ea)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument format", value=format, expected_type=type_hints["format"])
            check_type(argname="argument precision", value=precision, expected_type=type_hints["precision"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "type": type,
        }
        if format is not None:
            self._values["format"] = format
        if precision is not None:
            self._values["precision"] = precision

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Defines the type of the mentioned column.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def format(self) -> typing.Optional[builtins.str]:
        '''Defines the format of the mentioned type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#format OneDashboard#format}
        '''
        result = self._values.get("format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precision(self) -> typing.Optional[jsii.Number]:
        '''The precision of the type.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#precision OneDashboard#precision}
        '''
        result = self._values.get("precision")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableDataFormat(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableDataFormatList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableDataFormatList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__418fb53f92143e2dcdbd63a6fed4ef15d2f6d36d13a3f46711766d1739c41e1b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetTableDataFormatOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0c70031a20e228c3b12802e78c90df27e3e405f682956eb6cfaa5dfc2241fd4)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableDataFormatOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__787bd03b0e0235a857efdcae9daa76ab2d5656cd5dec8f563064bcbaecbf38fb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8793a3eb7f064712bcb555ae88e5c53149c10dd65b7362f58c33cd6a8f00a7c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dea4ff76f5c7f4e8275cb89b948dec416d5731170b909fbe0e740572d658e639)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableDataFormat]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableDataFormat]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a408521443abd3eb24d362cab37762462ae0a8e6a5380e2aadf67da4b6e419c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableDataFormatOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableDataFormatOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f534d88f0bf68dcc8b1f5ef7829a8f5ffd82c8421487488e073dd71d7a1c7c9c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetFormat")
    def reset_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFormat", []))

    @jsii.member(jsii_name="resetPrecision")
    def reset_precision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecision", []))

    @builtins.property
    @jsii.member(jsii_name="formatInput")
    def format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "formatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precisionInput")
    def precision_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precisionInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="format")
    def format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "format"))

    @format.setter
    def format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bcd9e2e2fe3d14b41182f7060e067e9db00e6190ebbb2708a911ece62d9f0592)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "format", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c4d056d7db0d825d63f6893d131811a5ba97bcab28c68fa8003e314bfc632cd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precision")
    def precision(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precision"))

    @precision.setter
    def precision(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48665f5f8f3998dfa2f6c927a803f96ea4fd690ed227e77704f9b08184468f1b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__064d9ed2162e2ac0fe2f2719ec68dfad56deedd28f1da41df94a59a2756f5dc2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableDataFormat]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableDataFormat]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableDataFormat]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a8991f6d329af57331d17ab78e10906088ca2af73afeb3536e5fe2f7fb9cea3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableInitialSorting",
    jsii_struct_bases=[],
    name_mapping={"direction": "direction", "name": "name"},
)
class OneDashboardPageWidgetTableInitialSorting:
    def __init__(self, *, direction: builtins.str, name: builtins.str) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4650d0fd1a42eac28dcd316d41dc2df4a608a59d0e5430e54851bd3056be8b2c)
            check_type(argname="argument direction", value=direction, expected_type=type_hints["direction"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "direction": direction,
            "name": name,
        }

    @builtins.property
    def direction(self) -> builtins.str:
        '''Defines the sort order. Either ascending or descending.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        '''
        result = self._values.get("direction")
        assert result is not None, "Required property 'direction' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The column name to be sorted.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableInitialSorting(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableInitialSortingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableInitialSortingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__230a2d015218017a8d249ad7af56d8a7ca2efaea2ca9dffca25c4a721aeb6de3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="directionInput")
    def direction_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="direction")
    def direction(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "direction"))

    @direction.setter
    def direction(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b0392908a2a2a1f67ff2f261d1883a31652384446e30dc7c588b871f9b1ade1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "direction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99cde6717f7cdd4565f0087967602a3833e28475e358d66f8f916bd420467880)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetTableInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetTableInitialSorting], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardPageWidgetTableInitialSorting],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca5fb21b9264b2a016b7ad9a182380b9c8e875b0516d544a84e3dc6e7b3d3c9e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02574d4454dbaef619ecfecb4ccf6190bd9302607082f68353a2e41bb57e366f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardPageWidgetTableOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce39f3fe98f3d4e9814def0c1a33984b40f831c11055b7578467140fb9d5c31a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a158f1356d6465699fa770b7014f12691b594286d63e4a06295940f5aa06bc3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad302fa991f646530ac262d2330db29b15c3464efae91000979c9372d71d541c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac332ea9a3809fa2ab65fc9f3f1f2a7477140e1159caac4b76d5bf7f067a57e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTable]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTable]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTable]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55da68ca642ff07e9327bf7be2d97152d8a5aa32cea5b84945fc44aea5d91ea5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_id": "accountId"},
)
class OneDashboardPageWidgetTableNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param query: The NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_id: The account ID(s) used for the NRQL query. Can be a single account ID or multiple account IDs in a JSON-encoded array. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9afa7c932bbf9161a7a7a0e2324d970afc058eddff7934ce23c3971040f81593)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_id is not None:
            self._values["account_id"] = account_id

    @builtins.property
    def query(self) -> builtins.str:
        '''The NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The account ID(s) used for the NRQL query.

        Can be a single account ID or multiple account IDs in a JSON-encoded array.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_id OneDashboard#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableNrqlQueryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableNrqlQueryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__498799cd268a3b287b5cf96fe92b288a513b4a2da6b76aac866192f1ec6517c8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetTableNrqlQueryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__446a425303b99fc048a966d559f01c5d5bb538155290b287d0ff87cff5158ef4)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableNrqlQueryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc480be70acfa273d06bf85dbce7328fb71f79b87ab239e599b08785862a8ef1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3501f231bd1c85e4fc96058972d7593e20244c75c5c5d288af6f88a3aa5ff151)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d783a2d6791b5ea0cd959bd588c45911ac0b87c54f1fcd11888747a020bd771)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNrqlQuery]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNrqlQuery]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53c6d34508347644857189fc9c70932610e371beda89eafabfb720e62d8b1e07)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5361b89f85af50d4a30569d0a9bf6d8255406ef0825a898e8b158facbd283d78)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__480680d2416b0d2a68a30d032f95c57c1ec3c57fdadffe157ff7cdc2936b3f50)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0e1e3b5c93ecb2f88b2eb94740523206a45d19dca8b8ee198ca4e874d912415)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNrqlQuery]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNrqlQuery]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNrqlQuery]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57e8bb4b2decc4557fc3d87c83bb7995b2c0a264c015e28f217abca8012c186b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableNullValues",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_overrides": "seriesOverrides"},
)
class OneDashboardPageWidgetTableNullValues:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param null_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4f76543b0ee4b6709af9837e3fb2438955a22dbe364897efab013d83cd5a6c5)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}.'''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableNullValuesSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableNullValuesSeriesOverrides"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableNullValues(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableNullValuesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableNullValuesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0525f59a33d390ce56fc0ad3f4023eb21b6f094624ec094a30354a76fa856c92)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetTableNullValuesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49ee606f84112c08e01c45e642d489cd5c717fb97ec7589fcf16e45f5a80e894)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableNullValuesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31f138b38bb4db38c93d4c0c62c5fb8ccd88c576cc1c4cf557d6f516c2ad683a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c32001567e167b38ba9ac01ae3e1c572083eed197ff9b44a8eaed99c67a0b16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__840697e0778624f353a7a9552fc068aada6f47fa9e2c7e8d734488716e613fbb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValues]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValues]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c97d2c6076c520a75ddb86bb029bda3039644a7961e8387c562aa77640ac21f3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableNullValuesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableNullValuesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d8bef9d9b0bba72c5e428d1a51f0acd6e41f8964d2a48a2a2b4eb0665504289)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableNullValuesSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44ede575579f2ef29b1aa3543474219a29cafd684cf106c9533d8ee2e9ffe82d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(
        self,
    ) -> "OneDashboardPageWidgetTableNullValuesSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetTableNullValuesSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableNullValuesSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableNullValuesSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1294c120ec238aaf698cc2718aa9490ab23dffe9c664652c2adcb7bffe6514ef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNullValues]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNullValues]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNullValues]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a9e784d55b1e583b966d2a253c47b51830e8ff2e60f6ad8544adaf39b7ccb21)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableNullValuesSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"null_value": "nullValue", "series_name": "seriesName"},
)
class OneDashboardPageWidgetTableNullValuesSeriesOverrides:
    def __init__(
        self,
        *,
        null_value: typing.Optional[builtins.str] = None,
        series_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param null_value: Null value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ca5a27ae756206f615318c2a7ed3c3dd28484c121320a0cf34824594aa32c40)
            check_type(argname="argument null_value", value=null_value, expected_type=type_hints["null_value"])
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if null_value is not None:
            self._values["null_value"] = null_value
        if series_name is not None:
            self._values["series_name"] = series_name

    @builtins.property
    def null_value(self) -> typing.Optional[builtins.str]:
        '''Null value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#null_value OneDashboard#null_value}
        '''
        result = self._values.get("null_value")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableNullValuesSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableNullValuesSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableNullValuesSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a608342a5bcb61dc99c8927c1e6dd1ff862b9b51c4faf8e7e7d90ca60a9c039e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetTableNullValuesSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9e5f6e73906e83263d999f7a70266eba50df773d8f27e858413638032397b6f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableNullValuesSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__703b5bfb40a73d5cacd7e6f7f543f2a2feee344879f8403ace1f9191ff371e59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f717031d0b59b6806e64cce3dfb3c2dacba44267feae22254b7a98bd48de6dc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca9adcc2f8dfe1beb9cd5dfcdb9ce706132140342cca829652cf766c46399197)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValuesSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValuesSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValuesSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58508b1d8ac5bfdfcecc49090313ae4ddbbfda8ae8c3cc894dcdeb793427f282)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableNullValuesSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableNullValuesSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f707ac0ce2e6464445bd60d683cb8ef9de76e4a16afae739aaa3019ff96f66d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetNullValue")
    def reset_null_value(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValue", []))

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @builtins.property
    @jsii.member(jsii_name="nullValueInput")
    def null_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nullValueInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValue")
    def null_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nullValue"))

    @null_value.setter
    def null_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a106f2e08b841f15eef4bee77d330b7d9e5f2d3b0f8bb7f31ce6cfec2e7ac63f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7a301e35f6ff77995493ee3e39bafc257cf0a6496a6d367d4a915c22327a19d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNullValuesSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNullValuesSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNullValuesSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__790e36529563f37151350221d7a24bc289658ad9c98770613337a394ae958fbf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__882201a67bdccd4708c68e0c382af63841d7d8aa66ca37245b529751f1872f7e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putColors")
    def put_colors(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableColors, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ab1972b64fb81d06720170c96a9bd1e5de385c7d51c836be26d66be65d5e594)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putColors", [value]))

    @jsii.member(jsii_name="putDataFormat")
    def put_data_format(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableDataFormat, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1726a2d4e033498b9e4564eaea4064818bd451dee917f08160ad1441248d8c53)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDataFormat", [value]))

    @jsii.member(jsii_name="putInitialSorting")
    def put_initial_sorting(
        self,
        *,
        direction: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param direction: Defines the sort order. Either ascending or descending. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#direction OneDashboard#direction}
        :param name: The column name to be sorted. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        value = OneDashboardPageWidgetTableInitialSorting(
            direction=direction, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putInitialSorting", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__408ad95c1b786a83ef249c142aa1746255ec248b8261a9e6cbd1bb2c62d41a6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putNullValues")
    def put_null_values(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableNullValues, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20010a340c717d6b428fb2116ce4ff8b63b67bea7cb231cb2b5f5a36202f9779)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNullValues", [value]))

    @jsii.member(jsii_name="putThreshold")
    def put_threshold(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableThreshold", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e4f3d72dbcfcde02fa5ffdf16e67b427fd2f9873db0952ed14f24553ff0c4d6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putThreshold", [value]))

    @jsii.member(jsii_name="putUnits")
    def put_units(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableUnits", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3b5e7937d7c22273c107c2324d5be855b04859afaa692edbf483f5e1134403b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUnits", [value]))

    @jsii.member(jsii_name="resetColors")
    def reset_colors(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColors", []))

    @jsii.member(jsii_name="resetDataFormat")
    def reset_data_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDataFormat", []))

    @jsii.member(jsii_name="resetFacetShowOtherSeries")
    def reset_facet_show_other_series(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFacetShowOtherSeries", []))

    @jsii.member(jsii_name="resetFilterCurrentDashboard")
    def reset_filter_current_dashboard(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterCurrentDashboard", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @jsii.member(jsii_name="resetInitialSorting")
    def reset_initial_sorting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialSorting", []))

    @jsii.member(jsii_name="resetLegendEnabled")
    def reset_legend_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLegendEnabled", []))

    @jsii.member(jsii_name="resetLinkedEntityGuids")
    def reset_linked_entity_guids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLinkedEntityGuids", []))

    @jsii.member(jsii_name="resetNullValues")
    def reset_null_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullValues", []))

    @jsii.member(jsii_name="resetRefreshRate")
    def reset_refresh_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshRate", []))

    @jsii.member(jsii_name="resetThreshold")
    def reset_threshold(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetThreshold", []))

    @jsii.member(jsii_name="resetUnits")
    def reset_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnits", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @jsii.member(jsii_name="resetYAxisLeftMax")
    def reset_y_axis_left_max(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMax", []))

    @jsii.member(jsii_name="resetYAxisLeftMin")
    def reset_y_axis_left_min(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYAxisLeftMin", []))

    @builtins.property
    @jsii.member(jsii_name="colors")
    def colors(self) -> OneDashboardPageWidgetTableColorsList:
        return typing.cast(OneDashboardPageWidgetTableColorsList, jsii.get(self, "colors"))

    @builtins.property
    @jsii.member(jsii_name="dataFormat")
    def data_format(self) -> OneDashboardPageWidgetTableDataFormatList:
        return typing.cast(OneDashboardPageWidgetTableDataFormatList, jsii.get(self, "dataFormat"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="initialSorting")
    def initial_sorting(
        self,
    ) -> OneDashboardPageWidgetTableInitialSortingOutputReference:
        return typing.cast(OneDashboardPageWidgetTableInitialSortingOutputReference, jsii.get(self, "initialSorting"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardPageWidgetTableNrqlQueryList:
        return typing.cast(OneDashboardPageWidgetTableNrqlQueryList, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="nullValues")
    def null_values(self) -> OneDashboardPageWidgetTableNullValuesList:
        return typing.cast(OneDashboardPageWidgetTableNullValuesList, jsii.get(self, "nullValues"))

    @builtins.property
    @jsii.member(jsii_name="threshold")
    def threshold(self) -> "OneDashboardPageWidgetTableThresholdList":
        return typing.cast("OneDashboardPageWidgetTableThresholdList", jsii.get(self, "threshold"))

    @builtins.property
    @jsii.member(jsii_name="units")
    def units(self) -> "OneDashboardPageWidgetTableUnitsList":
        return typing.cast("OneDashboardPageWidgetTableUnitsList", jsii.get(self, "units"))

    @builtins.property
    @jsii.member(jsii_name="colorsInput")
    def colors_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColors]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColors]]], jsii.get(self, "colorsInput"))

    @builtins.property
    @jsii.member(jsii_name="columnInput")
    def column_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnInput"))

    @builtins.property
    @jsii.member(jsii_name="dataFormatInput")
    def data_format_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableDataFormat]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableDataFormat]]], jsii.get(self, "dataFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeriesInput")
    def facet_show_other_series_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "facetShowOtherSeriesInput"))

    @builtins.property
    @jsii.member(jsii_name="filterCurrentDashboardInput")
    def filter_current_dashboard_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "filterCurrentDashboardInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="initialSortingInput")
    def initial_sorting_input(
        self,
    ) -> typing.Optional[OneDashboardPageWidgetTableInitialSorting]:
        return typing.cast(typing.Optional[OneDashboardPageWidgetTableInitialSorting], jsii.get(self, "initialSortingInput"))

    @builtins.property
    @jsii.member(jsii_name="legendEnabledInput")
    def legend_enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "legendEnabledInput"))

    @builtins.property
    @jsii.member(jsii_name="linkedEntityGuidsInput")
    def linked_entity_guids_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "linkedEntityGuidsInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNrqlQuery]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNrqlQuery]]], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="nullValuesInput")
    def null_values_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValues]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValues]]], jsii.get(self, "nullValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshRateInput")
    def refresh_rate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "refreshRateInput"))

    @builtins.property
    @jsii.member(jsii_name="rowInput")
    def row_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowInput"))

    @builtins.property
    @jsii.member(jsii_name="thresholdInput")
    def threshold_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableThreshold"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableThreshold"]]], jsii.get(self, "thresholdInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="unitsInput")
    def units_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableUnits"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableUnits"]]], jsii.get(self, "unitsInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMaxInput")
    def y_axis_left_max_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMaxInput"))

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMinInput")
    def y_axis_left_min_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yAxisLeftMinInput"))

    @builtins.property
    @jsii.member(jsii_name="column")
    def column(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "column"))

    @column.setter
    def column(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46ee3c5609ccacc176610decc594b865b63ddee7ea708c32e3747cd8d746a66f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "column", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="facetShowOtherSeries")
    def facet_show_other_series(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "facetShowOtherSeries"))

    @facet_show_other_series.setter
    def facet_show_other_series(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8c62fff94ba2f39c28a23a7f5b5eda5afde478bff5dfcab79b8b004a5f82dc4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "facetShowOtherSeries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filterCurrentDashboard")
    def filter_current_dashboard(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "filterCurrentDashboard"))

    @filter_current_dashboard.setter
    def filter_current_dashboard(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb3bc95990a9d17509b391017a7ca36cfc579da08a7bb481aa7141349bf24a77)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filterCurrentDashboard", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75683962dd9a30edf39ba94860edce0aea4eae429d6d67864270dcd4742c8fcb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6a2586e27f9052b869620594b521df447e8f9a5837acbb16fe5eed20c6b46c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="legendEnabled")
    def legend_enabled(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "legendEnabled"))

    @legend_enabled.setter
    def legend_enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a817c6be8d841c35e938eee5d3028d076891a8588136ad61b9087f230e17db75)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "legendEnabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="linkedEntityGuids")
    def linked_entity_guids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "linkedEntityGuids"))

    @linked_entity_guids.setter
    def linked_entity_guids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d391b7aaeacef1003dca7ec6cb36ebb2e5a445964e27166a65cc99c76ef70535)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "linkedEntityGuids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="refreshRate")
    def refresh_rate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "refreshRate"))

    @refresh_rate.setter
    def refresh_rate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5844e56ff3a15d1a29266f9a22cea556ff63e44b2be7961f5f0c81c2fd437c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "refreshRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="row")
    def row(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "row"))

    @row.setter
    def row(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__541d9e8714d1027ed6bf61b1412046f02794fc5e200cb78c61da461ac130c5ab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "row", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94248ff54c05f1f33a9f95d5ff07baa7172d646cdc28ecd1a9cbc4e725937069)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5e7e37886fc7740d0f33d8389324d0ba9c5136f02d081f75b5ce66da77445ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMax")
    def y_axis_left_max(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMax"))

    @y_axis_left_max.setter
    def y_axis_left_max(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9e21dfec71018d3c45a241b67edbecc962c9f9b71eb262a61ebb571d0254ee8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yAxisLeftMin")
    def y_axis_left_min(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yAxisLeftMin"))

    @y_axis_left_min.setter
    def y_axis_left_min(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6555d0ad8c2930d7a71788822e7da615b4fcfc7cff9ba1c776862c4c4e46a50c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yAxisLeftMin", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTable]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c4396cc0e7870c78943737b577eceab76f65cf0cb8a5afd74b2ce57f12d1dd9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableThreshold",
    jsii_struct_bases=[],
    name_mapping={
        "column_name": "columnName",
        "from_": "from",
        "severity": "severity",
        "to": "to",
    },
)
class OneDashboardPageWidgetTableThreshold:
    def __init__(
        self,
        *,
        column_name: typing.Optional[builtins.str] = None,
        from_: typing.Optional[builtins.str] = None,
        severity: typing.Optional[builtins.str] = None,
        to: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param column_name: Name of the column in the table, to which the threshold would be applied. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column_name OneDashboard#column_name}
        :param from_: The number from which the range starts in thresholds. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#from OneDashboard#from}
        :param severity: Severity of the threshold, which would reflect in the widget, in the range of the threshold specified. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#severity OneDashboard#severity}
        :param to: The number at which the range ends in thresholds. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#to OneDashboard#to}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f272ddfb7368b9d0622e90e76c24fdf504bbd8dd8616be19807b0af14df515e)
            check_type(argname="argument column_name", value=column_name, expected_type=type_hints["column_name"])
            check_type(argname="argument from_", value=from_, expected_type=type_hints["from_"])
            check_type(argname="argument severity", value=severity, expected_type=type_hints["severity"])
            check_type(argname="argument to", value=to, expected_type=type_hints["to"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if column_name is not None:
            self._values["column_name"] = column_name
        if from_ is not None:
            self._values["from_"] = from_
        if severity is not None:
            self._values["severity"] = severity
        if to is not None:
            self._values["to"] = to

    @builtins.property
    def column_name(self) -> typing.Optional[builtins.str]:
        '''Name of the column in the table, to which the threshold would be applied.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#column_name OneDashboard#column_name}
        '''
        result = self._values.get("column_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def from_(self) -> typing.Optional[builtins.str]:
        '''The number from which the range starts in thresholds.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#from OneDashboard#from}
        '''
        result = self._values.get("from_")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def severity(self) -> typing.Optional[builtins.str]:
        '''Severity of the threshold, which would reflect in the widget, in the range of the threshold specified.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#severity OneDashboard#severity}
        '''
        result = self._values.get("severity")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def to(self) -> typing.Optional[builtins.str]:
        '''The number at which the range ends in thresholds.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#to OneDashboard#to}
        '''
        result = self._values.get("to")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableThreshold(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableThresholdList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableThresholdList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab6ef96a37e2053f1be1d48ef24060a509aa82b16e1f3d40aeaa91bd073bd9ef)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetTableThresholdOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bdaab82d4e4f3382b22ea575370ca25447df0a6fccfb6f95d04cb07f089afc9)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableThresholdOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4adf135c9e675cb934d63e8a1d21301301d4f0e60769c8140c0097f9e764bd06)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f52bf81d0776fa0d4f09280f9246b327fd2e2326b8a775e15d28c9b94a968000)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__015edee0c52a12cd46a245eb73daf99e50e7e0af4abf5d404b2c5ed7294e5716)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableThreshold]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableThreshold]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableThreshold]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd8c913487fe875dc818543d1a7e43b1d7bfd7857a2c56b66e3bc4221c930906)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableThresholdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableThresholdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3aeb84417296f28ef8d008d37823377155b3b985c6b8fd8427590327a84f962)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetColumnName")
    def reset_column_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColumnName", []))

    @jsii.member(jsii_name="resetFrom")
    def reset_from(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrom", []))

    @jsii.member(jsii_name="resetSeverity")
    def reset_severity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeverity", []))

    @jsii.member(jsii_name="resetTo")
    def reset_to(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTo", []))

    @builtins.property
    @jsii.member(jsii_name="columnNameInput")
    def column_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "columnNameInput"))

    @builtins.property
    @jsii.member(jsii_name="fromInput")
    def from_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fromInput"))

    @builtins.property
    @jsii.member(jsii_name="severityInput")
    def severity_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "severityInput"))

    @builtins.property
    @jsii.member(jsii_name="toInput")
    def to_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "toInput"))

    @builtins.property
    @jsii.member(jsii_name="columnName")
    def column_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "columnName"))

    @column_name.setter
    def column_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__edec3fed5fb5315b9ffdde5345c46a6409471dc5969b41a23a3e07b59fc29a77)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "columnName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="from")
    def from_(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "from"))

    @from_.setter
    def from_(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__242a31303c15bcda217934e82e9f035b9267678f2ad7031320ef216b80110c8d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "from", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="severity")
    def severity(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "severity"))

    @severity.setter
    def severity(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8f52c173fb2e519b433390320f30d1a94be5f550311f7fca265f30b7fcce815)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "severity", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="to")
    def to(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "to"))

    @to.setter
    def to(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45a98125eded3ab45f4c916cd6ef7e3cc654243d61d776925d9c863a5c436416)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "to", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableThreshold]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableThreshold]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableThreshold]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f14eada92c80f0507d6366ba76181ade5e6ab4c7369153c51a20a5ed2e377044)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableUnits",
    jsii_struct_bases=[],
    name_mapping={"series_overrides": "seriesOverrides", "unit": "unit"},
)
class OneDashboardPageWidgetTableUnits:
    def __init__(
        self,
        *,
        series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]]] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_overrides: series_overrides block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        :param unit: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93c09a7d8da52b25428713b5dd8c0887c216fa3d03bf08e497a7b9b1689c08c9)
            check_type(argname="argument series_overrides", value=series_overrides, expected_type=type_hints["series_overrides"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_overrides is not None:
            self._values["series_overrides"] = series_overrides
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_overrides(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableUnitsSeriesOverrides"]]]:
        '''series_overrides block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_overrides OneDashboard#series_overrides}
        '''
        result = self._values.get("series_overrides")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableUnitsSeriesOverrides"]]], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}.'''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableUnits(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableUnitsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableUnitsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fda918e7c9d9f862ce7919759bcd428330057c8d43a829931337672cbb4c17af)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetTableUnitsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39a708eefb3b02ca549089c11f7997059753e2217f2c18114140ac9cd4c63dad)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableUnitsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d185d3796311efe10d6cd01e0a2709fd7fe732e689637d61584b65713d3d5c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__480d4a890c82a411722e2384767b8a0f32c5026f56ff3f0c3e58ae9d1ad6a204)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06a59f900c61025864f72f44f236c58b1914b96e84844a5ded666d05ddb5ed60)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableUnits]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableUnits]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableUnits]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7371b0ea2cb8856beeae111b69dbb5caa49fb26a1510d8b21d7a03421213534c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableUnitsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableUnitsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71411ee3855401cbf72d660741143ed8a890408684e193f919764a7110b6a2d5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSeriesOverrides")
    def put_series_overrides(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardPageWidgetTableUnitsSeriesOverrides", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9abdaaa965a0258c40aae8b2381f27221fecad2e23d378c8e8cc7004982d6958)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeriesOverrides", [value]))

    @jsii.member(jsii_name="resetSeriesOverrides")
    def reset_series_overrides(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesOverrides", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesOverrides")
    def series_overrides(self) -> "OneDashboardPageWidgetTableUnitsSeriesOverridesList":
        return typing.cast("OneDashboardPageWidgetTableUnitsSeriesOverridesList", jsii.get(self, "seriesOverrides"))

    @builtins.property
    @jsii.member(jsii_name="seriesOverridesInput")
    def series_overrides_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableUnitsSeriesOverrides"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardPageWidgetTableUnitsSeriesOverrides"]]], jsii.get(self, "seriesOverridesInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__66c09c99dee5f988251817cfec067e3030b2f92dbeaefe1ce9f53abb7d3ea84c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableUnits]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableUnits]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableUnits]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e1ccb2769a34554a76d7bf1ae0152232d3ba6a36ebaf6e54e0d74e395ad5030)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableUnitsSeriesOverrides",
    jsii_struct_bases=[],
    name_mapping={"series_name": "seriesName", "unit": "unit"},
)
class OneDashboardPageWidgetTableUnitsSeriesOverrides:
    def __init__(
        self,
        *,
        series_name: typing.Optional[builtins.str] = None,
        unit: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param series_name: Series name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        :param unit: Unit name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__446fc3b207943004b42d1be168fce7a81ecf111dc118c448aea23e91443be298)
            check_type(argname="argument series_name", value=series_name, expected_type=type_hints["series_name"])
            check_type(argname="argument unit", value=unit, expected_type=type_hints["unit"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if series_name is not None:
            self._values["series_name"] = series_name
        if unit is not None:
            self._values["unit"] = unit

    @builtins.property
    def series_name(self) -> typing.Optional[builtins.str]:
        '''Series name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#series_name OneDashboard#series_name}
        '''
        result = self._values.get("series_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def unit(self) -> typing.Optional[builtins.str]:
        '''Unit name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#unit OneDashboard#unit}
        '''
        result = self._values.get("unit")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardPageWidgetTableUnitsSeriesOverrides(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardPageWidgetTableUnitsSeriesOverridesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableUnitsSeriesOverridesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd99f9bd211994a5b3f2a007a7e10b80ed9054e851d675a4ffe01d3bec255020)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "OneDashboardPageWidgetTableUnitsSeriesOverridesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5667dc4f669fb1bd420d513d1f30aacd35944dc374202f0e3878226240c5ff8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardPageWidgetTableUnitsSeriesOverridesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a56f0629ec188d320c65b55d1d1045f86c307bec68e8657c038564fdb5715709)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c729870f047cff1c8caedcbba846129e096f30bff27e0c15130c4e9ced8d87c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16dd467d1eb3a8962efc60598499209907860fb887b413e91dc89e7fa2dc3703)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableUnitsSeriesOverrides]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableUnitsSeriesOverrides]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableUnitsSeriesOverrides]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__15b52d0380a138310ecf124a90070fb4c18e1ab62af66925137877e8889aaa9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardPageWidgetTableUnitsSeriesOverridesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardPageWidgetTableUnitsSeriesOverridesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9db65fd64fef84c8a8bd6c44fbe54da7cab89bde82df718089890a7309e0ba3f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetSeriesName")
    def reset_series_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeriesName", []))

    @jsii.member(jsii_name="resetUnit")
    def reset_unit(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUnit", []))

    @builtins.property
    @jsii.member(jsii_name="seriesNameInput")
    def series_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "seriesNameInput"))

    @builtins.property
    @jsii.member(jsii_name="unitInput")
    def unit_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "unitInput"))

    @builtins.property
    @jsii.member(jsii_name="seriesName")
    def series_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "seriesName"))

    @series_name.setter
    def series_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3ea7ad44ed2acc86e7c4a33f1359e6f90a4a7e03bbc31d1b3a631cb816786b6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "seriesName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="unit")
    def unit(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "unit"))

    @unit.setter
    def unit(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63a12cef140b6c1d99fca6f17a7ae5275a656946b6f5fb678b68aa435479e9d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "unit", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableUnitsSeriesOverrides]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableUnitsSeriesOverrides]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableUnitsSeriesOverrides]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c6bfa5ef4dc000c4065ff0d40b9ec6202a7d1ab0ec7ab0750d32ed70672ec8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariable",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "replacement_strategy": "replacementStrategy",
        "title": "title",
        "type": "type",
        "default_values": "defaultValues",
        "is_multi_selection": "isMultiSelection",
        "item": "item",
        "nrql_query": "nrqlQuery",
        "options": "options",
    },
)
class OneDashboardVariable:
    def __init__(
        self,
        *,
        name: builtins.str,
        replacement_strategy: builtins.str,
        title: builtins.str,
        type: builtins.str,
        default_values: typing.Optional[typing.Sequence[builtins.str]] = None,
        is_multi_selection: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        item: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardVariableItem", typing.Dict[builtins.str, typing.Any]]]]] = None,
        nrql_query: typing.Optional[typing.Union["OneDashboardVariableNrqlQuery", typing.Dict[builtins.str, typing.Any]]] = None,
        options: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["OneDashboardVariableOptions", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param name: The variable identifier. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        :param replacement_strategy: Indicates the strategy to apply when replacing a variable in a NRQL query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#replacement_strategy OneDashboard#replacement_strategy}
        :param title: Human-friendly display string for this variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        :param type: Specifies the data type of the variable and where its possible values may come from. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        :param default_values: Default values for this variable. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#default_values OneDashboard#default_values}
        :param is_multi_selection: Indicates whether this variable supports multiple selection or not. Only applies to variables of type NRQL or ENUM. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#is_multi_selection OneDashboard#is_multi_selection}
        :param item: item block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#item OneDashboard#item}
        :param nrql_query: nrql_query block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        :param options: options block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#options OneDashboard#options}
        '''
        if isinstance(nrql_query, dict):
            nrql_query = OneDashboardVariableNrqlQuery(**nrql_query)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1968b96825bdfd0e91e71911576bc8adf3dc036af0a58921ac6ad9fe53a79a25)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument replacement_strategy", value=replacement_strategy, expected_type=type_hints["replacement_strategy"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument default_values", value=default_values, expected_type=type_hints["default_values"])
            check_type(argname="argument is_multi_selection", value=is_multi_selection, expected_type=type_hints["is_multi_selection"])
            check_type(argname="argument item", value=item, expected_type=type_hints["item"])
            check_type(argname="argument nrql_query", value=nrql_query, expected_type=type_hints["nrql_query"])
            check_type(argname="argument options", value=options, expected_type=type_hints["options"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "replacement_strategy": replacement_strategy,
            "title": title,
            "type": type,
        }
        if default_values is not None:
            self._values["default_values"] = default_values
        if is_multi_selection is not None:
            self._values["is_multi_selection"] = is_multi_selection
        if item is not None:
            self._values["item"] = item
        if nrql_query is not None:
            self._values["nrql_query"] = nrql_query
        if options is not None:
            self._values["options"] = options

    @builtins.property
    def name(self) -> builtins.str:
        '''The variable identifier.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#name OneDashboard#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def replacement_strategy(self) -> builtins.str:
        '''Indicates the strategy to apply when replacing a variable in a NRQL query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#replacement_strategy OneDashboard#replacement_strategy}
        '''
        result = self._values.get("replacement_strategy")
        assert result is not None, "Required property 'replacement_strategy' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def title(self) -> builtins.str:
        '''Human-friendly display string for this variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        assert result is not None, "Required property 'title' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def type(self) -> builtins.str:
        '''Specifies the data type of the variable and where its possible values may come from.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#type OneDashboard#type}
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def default_values(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Default values for this variable.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#default_values OneDashboard#default_values}
        '''
        result = self._values.get("default_values")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def is_multi_selection(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Indicates whether this variable supports multiple selection or not. Only applies to variables of type NRQL or ENUM.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#is_multi_selection OneDashboard#is_multi_selection}
        '''
        result = self._values.get("is_multi_selection")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def item(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardVariableItem"]]]:
        '''item block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#item OneDashboard#item}
        '''
        result = self._values.get("item")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardVariableItem"]]], result)

    @builtins.property
    def nrql_query(self) -> typing.Optional["OneDashboardVariableNrqlQuery"]:
        '''nrql_query block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#nrql_query OneDashboard#nrql_query}
        '''
        result = self._values.get("nrql_query")
        return typing.cast(typing.Optional["OneDashboardVariableNrqlQuery"], result)

    @builtins.property
    def options(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardVariableOptions"]]]:
        '''options block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#options OneDashboard#options}
        '''
        result = self._values.get("options")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["OneDashboardVariableOptions"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardVariable(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableItem",
    jsii_struct_bases=[],
    name_mapping={"value": "value", "title": "title"},
)
class OneDashboardVariableItem:
    def __init__(
        self,
        *,
        value: builtins.str,
        title: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param value: A possible variable value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#value OneDashboard#value}
        :param title: A human-friendly display string for this value. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c64b88ec3f8bfa78bcee98491b15db8a1a80015a7e55cb0a68a4a9eef671a2e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "value": value,
        }
        if title is not None:
            self._values["title"] = title

    @builtins.property
    def value(self) -> builtins.str:
        '''A possible variable value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#value OneDashboard#value}
        '''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def title(self) -> typing.Optional[builtins.str]:
        '''A human-friendly display string for this value.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#title OneDashboard#title}
        '''
        result = self._values.get("title")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardVariableItem(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardVariableItemList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableItemList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab42c55be078e08fb4c34e3d675767321909300a2d1c70aefaa9c8d339423d6e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardVariableItemOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b875f342d0210dd335f9dbf8d8820362a974135eb518010ba23ad22a08b34e14)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardVariableItemOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b45434c39664813a8d67f3ebb82aa3ea99f4fdfdbb96f38e3af00f69a7187a13)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68b408951e1e79fe27b34038bbb8a8a1321e8c8fd57c87ab4ff8b2898cbb179c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36508e84671a342c97e43c005bd878c4e17fa6a2e78bac06d2e167d68836281c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableItem]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableItem]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableItem]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d2ce05d1c3c933016335982b1770e0c03e50c90d9b56c86a27b39cec1009dd8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardVariableItemOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableItemOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27dda56b51e4801d9ca5eca2b5200572fbe199b23bbea6b64ac712d6766cdd79)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetTitle")
    def reset_title(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTitle", []))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__329ef69b70c9b015549d46f7754657600af83678d54a6b795630c7b8159874c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b598cd1f307c0bab7d3c12fc3d3f7ceb4746b64f7826907c4a7254f095859bf9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariableItem]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariableItem]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariableItem]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba839e5d23d59f3cedb13e3e5d9c450787f78ef26fd677bdccc0eabafbe0aa1d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardVariableList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__374ae33ec3310b10a28d36163cf8cacfabfe5a42ab220b55b5ee9e39c279fec4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardVariableOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__013399c814170b817f6e3cb135b1a8330b36d55a632b9100778c357baa6200ef)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardVariableOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6dc49b0efa512ecd69af3a3e5fa33152c85c9448eef2df5d78401181564a30ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01f66025c6f4e1f38927490d03ce9811a6709ae7490ae208a84ca88c625e07d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f66aec6eccb9cdbac36f05f299876fc211bcfd283c2822f7533a11327e39faf9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariable]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariable]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariable]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__faee5bc8fa6762e3b08e1a2a12608fb013b3909cc1269620ef8e2eb52350f6ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableNrqlQuery",
    jsii_struct_bases=[],
    name_mapping={"query": "query", "account_ids": "accountIds"},
)
class OneDashboardVariableNrqlQuery:
    def __init__(
        self,
        *,
        query: builtins.str,
        account_ids: typing.Optional[typing.Sequence[jsii.Number]] = None,
    ) -> None:
        '''
        :param query: NRQL formatted query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_ids: New Relic account ID(s) to issue the query against. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_ids OneDashboard#account_ids}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d285e813593e095ff97a0067e82b0c88047e9ae8043d748fe8eaf2d53eeadbe5)
            check_type(argname="argument query", value=query, expected_type=type_hints["query"])
            check_type(argname="argument account_ids", value=account_ids, expected_type=type_hints["account_ids"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "query": query,
        }
        if account_ids is not None:
            self._values["account_ids"] = account_ids

    @builtins.property
    def query(self) -> builtins.str:
        '''NRQL formatted query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        '''
        result = self._values.get("query")
        assert result is not None, "Required property 'query' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def account_ids(self) -> typing.Optional[typing.List[jsii.Number]]:
        '''New Relic account ID(s) to issue the query against.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_ids OneDashboard#account_ids}
        '''
        result = self._values.get("account_ids")
        return typing.cast(typing.Optional[typing.List[jsii.Number]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardVariableNrqlQuery(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardVariableNrqlQueryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableNrqlQueryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d35b6d27305e5e882d833dd0481916828d26f8b8ea3e712c4746b8b80cdf31d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAccountIds")
    def reset_account_ids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountIds", []))

    @builtins.property
    @jsii.member(jsii_name="accountIdsInput")
    def account_ids_input(self) -> typing.Optional[typing.List[jsii.Number]]:
        return typing.cast(typing.Optional[typing.List[jsii.Number]], jsii.get(self, "accountIdsInput"))

    @builtins.property
    @jsii.member(jsii_name="queryInput")
    def query_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "queryInput"))

    @builtins.property
    @jsii.member(jsii_name="accountIds")
    def account_ids(self) -> typing.List[jsii.Number]:
        return typing.cast(typing.List[jsii.Number], jsii.get(self, "accountIds"))

    @account_ids.setter
    def account_ids(self, value: typing.List[jsii.Number]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__398a8abfaf045ade6ce38310b6dfec4ef8b712ca9ae7273a701d773504ae6d6e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountIds", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="query")
    def query(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "query"))

    @query.setter
    def query(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__10fc75e5b3cef8dd3556bbb8c1c34646e467c069627b91cd4d8e258102f337f8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "query", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[OneDashboardVariableNrqlQuery]:
        return typing.cast(typing.Optional[OneDashboardVariableNrqlQuery], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[OneDashboardVariableNrqlQuery],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7ad18d8caca4f2e686554b44699ff32666abc34757d97704163b5ed2bba2069)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableOptions",
    jsii_struct_bases=[],
    name_mapping={"excluded": "excluded", "ignore_time_range": "ignoreTimeRange"},
)
class OneDashboardVariableOptions:
    def __init__(
        self,
        *,
        excluded: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param excluded: Only applies to variables of type NRQL. With this turned on, query condition defined with the variable will not be included in the query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#excluded OneDashboard#excluded}
        :param ignore_time_range: Only applies to variables of type NRQL. With this turned on, the time range for the NRQL query will override the time picker on dashboards and other pages. Turn this off to use the time picker as normal. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ebd33c6be5b7883c54d853819be08868f6a8fe869ee87b92b11e8805d33caf4)
            check_type(argname="argument excluded", value=excluded, expected_type=type_hints["excluded"])
            check_type(argname="argument ignore_time_range", value=ignore_time_range, expected_type=type_hints["ignore_time_range"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if excluded is not None:
            self._values["excluded"] = excluded
        if ignore_time_range is not None:
            self._values["ignore_time_range"] = ignore_time_range

    @builtins.property
    def excluded(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Only applies to variables of type NRQL.

        With this turned on, query condition defined with the variable will not be included in the query.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#excluded OneDashboard#excluded}
        '''
        result = self._values.get("excluded")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def ignore_time_range(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Only applies to variables of type NRQL.

        With this turned on, the time range for the NRQL query will override the time picker on dashboards and other pages. Turn this off to use the time picker as normal.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#ignore_time_range OneDashboard#ignore_time_range}
        '''
        result = self._values.get("ignore_time_range")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OneDashboardVariableOptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class OneDashboardVariableOptionsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableOptionsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a28c4bd371fe554f257c24383203a184d32679798dea25b07a3f7ad347933de8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "OneDashboardVariableOptionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__259562032786ab1f53a448a9eee1f1305514d26b139470bdbc25f8f667da85f1)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("OneDashboardVariableOptionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4a5b28782f05ebdc00ec87c87785486c965262d0f039a7c9051dc84645421d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__572b15d1c8f34fedd89f0abc34744fbaf0cdd0707d3a1839e398bc27fdb10eda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2bf59a337715efcb0e47920839ac0ceae671f3bf6b5126a5a88872e6f2f0509d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableOptions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableOptions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableOptions]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2dade36851eaee6dc67bec14e698ebb9256d100be184f6621c91dd1d13c06545)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardVariableOptionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableOptionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__862a01be6894be7270120ccb6facd5e2630ed6a2a6520f70f3d55aa248861739)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetExcluded")
    def reset_excluded(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExcluded", []))

    @jsii.member(jsii_name="resetIgnoreTimeRange")
    def reset_ignore_time_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIgnoreTimeRange", []))

    @builtins.property
    @jsii.member(jsii_name="excludedInput")
    def excluded_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "excludedInput"))

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRangeInput")
    def ignore_time_range_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "ignoreTimeRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="excluded")
    def excluded(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "excluded"))

    @excluded.setter
    def excluded(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2bc394e3fe19ddb927b71a725b33b429b7f250a61c7e30a8ab6e2a8441e0003a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "excluded", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ignoreTimeRange")
    def ignore_time_range(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "ignoreTimeRange"))

    @ignore_time_range.setter
    def ignore_time_range(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de7f88317f44d076127906bfe7855c41d15707d173e53ed47af436c2d4678735)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ignoreTimeRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariableOptions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariableOptions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariableOptions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e08d73c11477a60864422971f5ccfabd4ecb2b076a0e26ffb95a69662df8130)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class OneDashboardVariableOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-newrelic.oneDashboard.OneDashboardVariableOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__647bb1d5fd9964d9a1d7f0a59f1f53dc23974b94888dc2bfd1286fc3eb3fa03e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putItem")
    def put_item(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardVariableItem, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__199c8ae56b09fe7ce101fa3fa08d98cf82e7734660cef96e35e848215912c934)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putItem", [value]))

    @jsii.member(jsii_name="putNrqlQuery")
    def put_nrql_query(
        self,
        *,
        query: builtins.str,
        account_ids: typing.Optional[typing.Sequence[jsii.Number]] = None,
    ) -> None:
        '''
        :param query: NRQL formatted query. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#query OneDashboard#query}
        :param account_ids: New Relic account ID(s) to issue the query against. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/newrelic/newrelic/3.73.0/docs/resources/one_dashboard#account_ids OneDashboard#account_ids}
        '''
        value = OneDashboardVariableNrqlQuery(query=query, account_ids=account_ids)

        return typing.cast(None, jsii.invoke(self, "putNrqlQuery", [value]))

    @jsii.member(jsii_name="putOptions")
    def put_options(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardVariableOptions, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fbd2ef235130a9fd9604cf24cc3bca3f30640c077621c944bfe64b71fdcff7e9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putOptions", [value]))

    @jsii.member(jsii_name="resetDefaultValues")
    def reset_default_values(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDefaultValues", []))

    @jsii.member(jsii_name="resetIsMultiSelection")
    def reset_is_multi_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIsMultiSelection", []))

    @jsii.member(jsii_name="resetItem")
    def reset_item(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetItem", []))

    @jsii.member(jsii_name="resetNrqlQuery")
    def reset_nrql_query(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNrqlQuery", []))

    @jsii.member(jsii_name="resetOptions")
    def reset_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOptions", []))

    @builtins.property
    @jsii.member(jsii_name="item")
    def item(self) -> OneDashboardVariableItemList:
        return typing.cast(OneDashboardVariableItemList, jsii.get(self, "item"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQuery")
    def nrql_query(self) -> OneDashboardVariableNrqlQueryOutputReference:
        return typing.cast(OneDashboardVariableNrqlQueryOutputReference, jsii.get(self, "nrqlQuery"))

    @builtins.property
    @jsii.member(jsii_name="options")
    def options(self) -> OneDashboardVariableOptionsList:
        return typing.cast(OneDashboardVariableOptionsList, jsii.get(self, "options"))

    @builtins.property
    @jsii.member(jsii_name="defaultValuesInput")
    def default_values_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "defaultValuesInput"))

    @builtins.property
    @jsii.member(jsii_name="isMultiSelectionInput")
    def is_multi_selection_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "isMultiSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="itemInput")
    def item_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableItem]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableItem]]], jsii.get(self, "itemInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="nrqlQueryInput")
    def nrql_query_input(self) -> typing.Optional[OneDashboardVariableNrqlQuery]:
        return typing.cast(typing.Optional[OneDashboardVariableNrqlQuery], jsii.get(self, "nrqlQueryInput"))

    @builtins.property
    @jsii.member(jsii_name="optionsInput")
    def options_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableOptions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableOptions]]], jsii.get(self, "optionsInput"))

    @builtins.property
    @jsii.member(jsii_name="replacementStrategyInput")
    def replacement_strategy_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "replacementStrategyInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="defaultValues")
    def default_values(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "defaultValues"))

    @default_values.setter
    def default_values(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7b932f814eb527d3f2922af4348cc2ed4534970133c8d1b26dddb6c27ef52d6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "defaultValues", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="isMultiSelection")
    def is_multi_selection(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "isMultiSelection"))

    @is_multi_selection.setter
    def is_multi_selection(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__991298da4497e9559b48676bd1fa45d3b7730c813f91c7e0d79c77170905af6c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "isMultiSelection", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96dda6e2a2e3e8301136d3cd29775e28536c1bd178be57bd5288f8f1870e86be)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="replacementStrategy")
    def replacement_strategy(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "replacementStrategy"))

    @replacement_strategy.setter
    def replacement_strategy(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7fe432e783cebe6ab52f4fd93ca6059e33dcc44373422c007a6baaea39ff129f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "replacementStrategy", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e91f797f13666d025deb8da8a75c1008e7aef914f91f580ffbb67dc55b65438)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2ac6cac34171e2c55ced2735f57678cfec0bc166c3e0103d8b89d2aa395c78f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariable]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d450835486c68dfac33e70d4f958f40f46494ed5bc5beba7c3dcdf9db6aeaf40)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


__all__ = [
    "OneDashboard",
    "OneDashboardConfig",
    "OneDashboardPage",
    "OneDashboardPageList",
    "OneDashboardPageOutputReference",
    "OneDashboardPageWidgetArea",
    "OneDashboardPageWidgetAreaColors",
    "OneDashboardPageWidgetAreaColorsList",
    "OneDashboardPageWidgetAreaColorsOutputReference",
    "OneDashboardPageWidgetAreaColorsSeriesOverrides",
    "OneDashboardPageWidgetAreaColorsSeriesOverridesList",
    "OneDashboardPageWidgetAreaColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetAreaDataFormat",
    "OneDashboardPageWidgetAreaDataFormatList",
    "OneDashboardPageWidgetAreaDataFormatOutputReference",
    "OneDashboardPageWidgetAreaInitialSorting",
    "OneDashboardPageWidgetAreaInitialSortingOutputReference",
    "OneDashboardPageWidgetAreaList",
    "OneDashboardPageWidgetAreaNrqlQuery",
    "OneDashboardPageWidgetAreaNrqlQueryList",
    "OneDashboardPageWidgetAreaNrqlQueryOutputReference",
    "OneDashboardPageWidgetAreaNullValues",
    "OneDashboardPageWidgetAreaNullValuesList",
    "OneDashboardPageWidgetAreaNullValuesOutputReference",
    "OneDashboardPageWidgetAreaNullValuesSeriesOverrides",
    "OneDashboardPageWidgetAreaNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetAreaNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetAreaOutputReference",
    "OneDashboardPageWidgetAreaTooltip",
    "OneDashboardPageWidgetAreaTooltipOutputReference",
    "OneDashboardPageWidgetAreaUnits",
    "OneDashboardPageWidgetAreaUnitsList",
    "OneDashboardPageWidgetAreaUnitsOutputReference",
    "OneDashboardPageWidgetAreaUnitsSeriesOverrides",
    "OneDashboardPageWidgetAreaUnitsSeriesOverridesList",
    "OneDashboardPageWidgetAreaUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetBar",
    "OneDashboardPageWidgetBarColors",
    "OneDashboardPageWidgetBarColorsList",
    "OneDashboardPageWidgetBarColorsOutputReference",
    "OneDashboardPageWidgetBarColorsSeriesOverrides",
    "OneDashboardPageWidgetBarColorsSeriesOverridesList",
    "OneDashboardPageWidgetBarColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetBarDataFormat",
    "OneDashboardPageWidgetBarDataFormatList",
    "OneDashboardPageWidgetBarDataFormatOutputReference",
    "OneDashboardPageWidgetBarInitialSorting",
    "OneDashboardPageWidgetBarInitialSortingOutputReference",
    "OneDashboardPageWidgetBarList",
    "OneDashboardPageWidgetBarNrqlQuery",
    "OneDashboardPageWidgetBarNrqlQueryList",
    "OneDashboardPageWidgetBarNrqlQueryOutputReference",
    "OneDashboardPageWidgetBarNullValues",
    "OneDashboardPageWidgetBarNullValuesList",
    "OneDashboardPageWidgetBarNullValuesOutputReference",
    "OneDashboardPageWidgetBarNullValuesSeriesOverrides",
    "OneDashboardPageWidgetBarNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetBarNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetBarOutputReference",
    "OneDashboardPageWidgetBarUnits",
    "OneDashboardPageWidgetBarUnitsList",
    "OneDashboardPageWidgetBarUnitsOutputReference",
    "OneDashboardPageWidgetBarUnitsSeriesOverrides",
    "OneDashboardPageWidgetBarUnitsSeriesOverridesList",
    "OneDashboardPageWidgetBarUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetBillboard",
    "OneDashboardPageWidgetBillboardBillboardSettings",
    "OneDashboardPageWidgetBillboardBillboardSettingsGridOptions",
    "OneDashboardPageWidgetBillboardBillboardSettingsGridOptionsOutputReference",
    "OneDashboardPageWidgetBillboardBillboardSettingsLink",
    "OneDashboardPageWidgetBillboardBillboardSettingsLinkOutputReference",
    "OneDashboardPageWidgetBillboardBillboardSettingsOutputReference",
    "OneDashboardPageWidgetBillboardBillboardSettingsVisual",
    "OneDashboardPageWidgetBillboardBillboardSettingsVisualOutputReference",
    "OneDashboardPageWidgetBillboardColors",
    "OneDashboardPageWidgetBillboardColorsList",
    "OneDashboardPageWidgetBillboardColorsOutputReference",
    "OneDashboardPageWidgetBillboardColorsSeriesOverrides",
    "OneDashboardPageWidgetBillboardColorsSeriesOverridesList",
    "OneDashboardPageWidgetBillboardColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetBillboardDataFormat",
    "OneDashboardPageWidgetBillboardDataFormatList",
    "OneDashboardPageWidgetBillboardDataFormatOutputReference",
    "OneDashboardPageWidgetBillboardInitialSorting",
    "OneDashboardPageWidgetBillboardInitialSortingOutputReference",
    "OneDashboardPageWidgetBillboardList",
    "OneDashboardPageWidgetBillboardNrqlQuery",
    "OneDashboardPageWidgetBillboardNrqlQueryList",
    "OneDashboardPageWidgetBillboardNrqlQueryOutputReference",
    "OneDashboardPageWidgetBillboardNullValues",
    "OneDashboardPageWidgetBillboardNullValuesList",
    "OneDashboardPageWidgetBillboardNullValuesOutputReference",
    "OneDashboardPageWidgetBillboardNullValuesSeriesOverrides",
    "OneDashboardPageWidgetBillboardNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetBillboardNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetBillboardOutputReference",
    "OneDashboardPageWidgetBillboardUnits",
    "OneDashboardPageWidgetBillboardUnitsList",
    "OneDashboardPageWidgetBillboardUnitsOutputReference",
    "OneDashboardPageWidgetBillboardUnitsSeriesOverrides",
    "OneDashboardPageWidgetBillboardUnitsSeriesOverridesList",
    "OneDashboardPageWidgetBillboardUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetBullet",
    "OneDashboardPageWidgetBulletColors",
    "OneDashboardPageWidgetBulletColorsList",
    "OneDashboardPageWidgetBulletColorsOutputReference",
    "OneDashboardPageWidgetBulletColorsSeriesOverrides",
    "OneDashboardPageWidgetBulletColorsSeriesOverridesList",
    "OneDashboardPageWidgetBulletColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetBulletDataFormat",
    "OneDashboardPageWidgetBulletDataFormatList",
    "OneDashboardPageWidgetBulletDataFormatOutputReference",
    "OneDashboardPageWidgetBulletInitialSorting",
    "OneDashboardPageWidgetBulletInitialSortingOutputReference",
    "OneDashboardPageWidgetBulletList",
    "OneDashboardPageWidgetBulletNrqlQuery",
    "OneDashboardPageWidgetBulletNrqlQueryList",
    "OneDashboardPageWidgetBulletNrqlQueryOutputReference",
    "OneDashboardPageWidgetBulletNullValues",
    "OneDashboardPageWidgetBulletNullValuesList",
    "OneDashboardPageWidgetBulletNullValuesOutputReference",
    "OneDashboardPageWidgetBulletNullValuesSeriesOverrides",
    "OneDashboardPageWidgetBulletNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetBulletNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetBulletOutputReference",
    "OneDashboardPageWidgetBulletUnits",
    "OneDashboardPageWidgetBulletUnitsList",
    "OneDashboardPageWidgetBulletUnitsOutputReference",
    "OneDashboardPageWidgetBulletUnitsSeriesOverrides",
    "OneDashboardPageWidgetBulletUnitsSeriesOverridesList",
    "OneDashboardPageWidgetBulletUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetFunnel",
    "OneDashboardPageWidgetFunnelColors",
    "OneDashboardPageWidgetFunnelColorsList",
    "OneDashboardPageWidgetFunnelColorsOutputReference",
    "OneDashboardPageWidgetFunnelColorsSeriesOverrides",
    "OneDashboardPageWidgetFunnelColorsSeriesOverridesList",
    "OneDashboardPageWidgetFunnelColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetFunnelDataFormat",
    "OneDashboardPageWidgetFunnelDataFormatList",
    "OneDashboardPageWidgetFunnelDataFormatOutputReference",
    "OneDashboardPageWidgetFunnelInitialSorting",
    "OneDashboardPageWidgetFunnelInitialSortingOutputReference",
    "OneDashboardPageWidgetFunnelList",
    "OneDashboardPageWidgetFunnelNrqlQuery",
    "OneDashboardPageWidgetFunnelNrqlQueryList",
    "OneDashboardPageWidgetFunnelNrqlQueryOutputReference",
    "OneDashboardPageWidgetFunnelNullValues",
    "OneDashboardPageWidgetFunnelNullValuesList",
    "OneDashboardPageWidgetFunnelNullValuesOutputReference",
    "OneDashboardPageWidgetFunnelNullValuesSeriesOverrides",
    "OneDashboardPageWidgetFunnelNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetFunnelNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetFunnelOutputReference",
    "OneDashboardPageWidgetFunnelUnits",
    "OneDashboardPageWidgetFunnelUnitsList",
    "OneDashboardPageWidgetFunnelUnitsOutputReference",
    "OneDashboardPageWidgetFunnelUnitsSeriesOverrides",
    "OneDashboardPageWidgetFunnelUnitsSeriesOverridesList",
    "OneDashboardPageWidgetFunnelUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetHeatmap",
    "OneDashboardPageWidgetHeatmapColors",
    "OneDashboardPageWidgetHeatmapColorsList",
    "OneDashboardPageWidgetHeatmapColorsOutputReference",
    "OneDashboardPageWidgetHeatmapColorsSeriesOverrides",
    "OneDashboardPageWidgetHeatmapColorsSeriesOverridesList",
    "OneDashboardPageWidgetHeatmapColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetHeatmapDataFormat",
    "OneDashboardPageWidgetHeatmapDataFormatList",
    "OneDashboardPageWidgetHeatmapDataFormatOutputReference",
    "OneDashboardPageWidgetHeatmapInitialSorting",
    "OneDashboardPageWidgetHeatmapInitialSortingOutputReference",
    "OneDashboardPageWidgetHeatmapList",
    "OneDashboardPageWidgetHeatmapNrqlQuery",
    "OneDashboardPageWidgetHeatmapNrqlQueryList",
    "OneDashboardPageWidgetHeatmapNrqlQueryOutputReference",
    "OneDashboardPageWidgetHeatmapNullValues",
    "OneDashboardPageWidgetHeatmapNullValuesList",
    "OneDashboardPageWidgetHeatmapNullValuesOutputReference",
    "OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides",
    "OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetHeatmapNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetHeatmapOutputReference",
    "OneDashboardPageWidgetHeatmapUnits",
    "OneDashboardPageWidgetHeatmapUnitsList",
    "OneDashboardPageWidgetHeatmapUnitsOutputReference",
    "OneDashboardPageWidgetHeatmapUnitsSeriesOverrides",
    "OneDashboardPageWidgetHeatmapUnitsSeriesOverridesList",
    "OneDashboardPageWidgetHeatmapUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetHistogram",
    "OneDashboardPageWidgetHistogramColors",
    "OneDashboardPageWidgetHistogramColorsList",
    "OneDashboardPageWidgetHistogramColorsOutputReference",
    "OneDashboardPageWidgetHistogramColorsSeriesOverrides",
    "OneDashboardPageWidgetHistogramColorsSeriesOverridesList",
    "OneDashboardPageWidgetHistogramColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetHistogramDataFormat",
    "OneDashboardPageWidgetHistogramDataFormatList",
    "OneDashboardPageWidgetHistogramDataFormatOutputReference",
    "OneDashboardPageWidgetHistogramInitialSorting",
    "OneDashboardPageWidgetHistogramInitialSortingOutputReference",
    "OneDashboardPageWidgetHistogramList",
    "OneDashboardPageWidgetHistogramNrqlQuery",
    "OneDashboardPageWidgetHistogramNrqlQueryList",
    "OneDashboardPageWidgetHistogramNrqlQueryOutputReference",
    "OneDashboardPageWidgetHistogramNullValues",
    "OneDashboardPageWidgetHistogramNullValuesList",
    "OneDashboardPageWidgetHistogramNullValuesOutputReference",
    "OneDashboardPageWidgetHistogramNullValuesSeriesOverrides",
    "OneDashboardPageWidgetHistogramNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetHistogramNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetHistogramOutputReference",
    "OneDashboardPageWidgetHistogramUnits",
    "OneDashboardPageWidgetHistogramUnitsList",
    "OneDashboardPageWidgetHistogramUnitsOutputReference",
    "OneDashboardPageWidgetHistogramUnitsSeriesOverrides",
    "OneDashboardPageWidgetHistogramUnitsSeriesOverridesList",
    "OneDashboardPageWidgetHistogramUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetJson",
    "OneDashboardPageWidgetJsonColors",
    "OneDashboardPageWidgetJsonColorsList",
    "OneDashboardPageWidgetJsonColorsOutputReference",
    "OneDashboardPageWidgetJsonColorsSeriesOverrides",
    "OneDashboardPageWidgetJsonColorsSeriesOverridesList",
    "OneDashboardPageWidgetJsonColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetJsonDataFormat",
    "OneDashboardPageWidgetJsonDataFormatList",
    "OneDashboardPageWidgetJsonDataFormatOutputReference",
    "OneDashboardPageWidgetJsonInitialSorting",
    "OneDashboardPageWidgetJsonInitialSortingOutputReference",
    "OneDashboardPageWidgetJsonList",
    "OneDashboardPageWidgetJsonNrqlQuery",
    "OneDashboardPageWidgetJsonNrqlQueryList",
    "OneDashboardPageWidgetJsonNrqlQueryOutputReference",
    "OneDashboardPageWidgetJsonNullValues",
    "OneDashboardPageWidgetJsonNullValuesList",
    "OneDashboardPageWidgetJsonNullValuesOutputReference",
    "OneDashboardPageWidgetJsonNullValuesSeriesOverrides",
    "OneDashboardPageWidgetJsonNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetJsonNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetJsonOutputReference",
    "OneDashboardPageWidgetJsonUnits",
    "OneDashboardPageWidgetJsonUnitsList",
    "OneDashboardPageWidgetJsonUnitsOutputReference",
    "OneDashboardPageWidgetJsonUnitsSeriesOverrides",
    "OneDashboardPageWidgetJsonUnitsSeriesOverridesList",
    "OneDashboardPageWidgetJsonUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetLine",
    "OneDashboardPageWidgetLineColors",
    "OneDashboardPageWidgetLineColorsList",
    "OneDashboardPageWidgetLineColorsOutputReference",
    "OneDashboardPageWidgetLineColorsSeriesOverrides",
    "OneDashboardPageWidgetLineColorsSeriesOverridesList",
    "OneDashboardPageWidgetLineColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetLineDataFormat",
    "OneDashboardPageWidgetLineDataFormatList",
    "OneDashboardPageWidgetLineDataFormatOutputReference",
    "OneDashboardPageWidgetLineInitialSorting",
    "OneDashboardPageWidgetLineInitialSortingOutputReference",
    "OneDashboardPageWidgetLineList",
    "OneDashboardPageWidgetLineNrqlQuery",
    "OneDashboardPageWidgetLineNrqlQueryList",
    "OneDashboardPageWidgetLineNrqlQueryOutputReference",
    "OneDashboardPageWidgetLineNullValues",
    "OneDashboardPageWidgetLineNullValuesList",
    "OneDashboardPageWidgetLineNullValuesOutputReference",
    "OneDashboardPageWidgetLineNullValuesSeriesOverrides",
    "OneDashboardPageWidgetLineNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetLineNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetLineOutputReference",
    "OneDashboardPageWidgetLineThreshold",
    "OneDashboardPageWidgetLineThresholdList",
    "OneDashboardPageWidgetLineThresholdOutputReference",
    "OneDashboardPageWidgetLineTooltip",
    "OneDashboardPageWidgetLineTooltipOutputReference",
    "OneDashboardPageWidgetLineUnits",
    "OneDashboardPageWidgetLineUnitsList",
    "OneDashboardPageWidgetLineUnitsOutputReference",
    "OneDashboardPageWidgetLineUnitsSeriesOverrides",
    "OneDashboardPageWidgetLineUnitsSeriesOverridesList",
    "OneDashboardPageWidgetLineUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetLineYAxisRight",
    "OneDashboardPageWidgetLineYAxisRightOutputReference",
    "OneDashboardPageWidgetLogTable",
    "OneDashboardPageWidgetLogTableColors",
    "OneDashboardPageWidgetLogTableColorsList",
    "OneDashboardPageWidgetLogTableColorsOutputReference",
    "OneDashboardPageWidgetLogTableColorsSeriesOverrides",
    "OneDashboardPageWidgetLogTableColorsSeriesOverridesList",
    "OneDashboardPageWidgetLogTableColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetLogTableDataFormat",
    "OneDashboardPageWidgetLogTableDataFormatList",
    "OneDashboardPageWidgetLogTableDataFormatOutputReference",
    "OneDashboardPageWidgetLogTableInitialSorting",
    "OneDashboardPageWidgetLogTableInitialSortingOutputReference",
    "OneDashboardPageWidgetLogTableList",
    "OneDashboardPageWidgetLogTableNrqlQuery",
    "OneDashboardPageWidgetLogTableNrqlQueryList",
    "OneDashboardPageWidgetLogTableNrqlQueryOutputReference",
    "OneDashboardPageWidgetLogTableNullValues",
    "OneDashboardPageWidgetLogTableNullValuesList",
    "OneDashboardPageWidgetLogTableNullValuesOutputReference",
    "OneDashboardPageWidgetLogTableNullValuesSeriesOverrides",
    "OneDashboardPageWidgetLogTableNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetLogTableNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetLogTableOutputReference",
    "OneDashboardPageWidgetLogTableUnits",
    "OneDashboardPageWidgetLogTableUnitsList",
    "OneDashboardPageWidgetLogTableUnitsOutputReference",
    "OneDashboardPageWidgetLogTableUnitsSeriesOverrides",
    "OneDashboardPageWidgetLogTableUnitsSeriesOverridesList",
    "OneDashboardPageWidgetLogTableUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetMarkdown",
    "OneDashboardPageWidgetMarkdownColors",
    "OneDashboardPageWidgetMarkdownColorsList",
    "OneDashboardPageWidgetMarkdownColorsOutputReference",
    "OneDashboardPageWidgetMarkdownColorsSeriesOverrides",
    "OneDashboardPageWidgetMarkdownColorsSeriesOverridesList",
    "OneDashboardPageWidgetMarkdownColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetMarkdownDataFormat",
    "OneDashboardPageWidgetMarkdownDataFormatList",
    "OneDashboardPageWidgetMarkdownDataFormatOutputReference",
    "OneDashboardPageWidgetMarkdownInitialSorting",
    "OneDashboardPageWidgetMarkdownInitialSortingOutputReference",
    "OneDashboardPageWidgetMarkdownList",
    "OneDashboardPageWidgetMarkdownNullValues",
    "OneDashboardPageWidgetMarkdownNullValuesList",
    "OneDashboardPageWidgetMarkdownNullValuesOutputReference",
    "OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides",
    "OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetMarkdownNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetMarkdownOutputReference",
    "OneDashboardPageWidgetMarkdownUnits",
    "OneDashboardPageWidgetMarkdownUnitsList",
    "OneDashboardPageWidgetMarkdownUnitsOutputReference",
    "OneDashboardPageWidgetMarkdownUnitsSeriesOverrides",
    "OneDashboardPageWidgetMarkdownUnitsSeriesOverridesList",
    "OneDashboardPageWidgetMarkdownUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetPie",
    "OneDashboardPageWidgetPieColors",
    "OneDashboardPageWidgetPieColorsList",
    "OneDashboardPageWidgetPieColorsOutputReference",
    "OneDashboardPageWidgetPieColorsSeriesOverrides",
    "OneDashboardPageWidgetPieColorsSeriesOverridesList",
    "OneDashboardPageWidgetPieColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetPieDataFormat",
    "OneDashboardPageWidgetPieDataFormatList",
    "OneDashboardPageWidgetPieDataFormatOutputReference",
    "OneDashboardPageWidgetPieInitialSorting",
    "OneDashboardPageWidgetPieInitialSortingOutputReference",
    "OneDashboardPageWidgetPieList",
    "OneDashboardPageWidgetPieNrqlQuery",
    "OneDashboardPageWidgetPieNrqlQueryList",
    "OneDashboardPageWidgetPieNrqlQueryOutputReference",
    "OneDashboardPageWidgetPieNullValues",
    "OneDashboardPageWidgetPieNullValuesList",
    "OneDashboardPageWidgetPieNullValuesOutputReference",
    "OneDashboardPageWidgetPieNullValuesSeriesOverrides",
    "OneDashboardPageWidgetPieNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetPieNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetPieOutputReference",
    "OneDashboardPageWidgetPieUnits",
    "OneDashboardPageWidgetPieUnitsList",
    "OneDashboardPageWidgetPieUnitsOutputReference",
    "OneDashboardPageWidgetPieUnitsSeriesOverrides",
    "OneDashboardPageWidgetPieUnitsSeriesOverridesList",
    "OneDashboardPageWidgetPieUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetStackedBar",
    "OneDashboardPageWidgetStackedBarColors",
    "OneDashboardPageWidgetStackedBarColorsList",
    "OneDashboardPageWidgetStackedBarColorsOutputReference",
    "OneDashboardPageWidgetStackedBarColorsSeriesOverrides",
    "OneDashboardPageWidgetStackedBarColorsSeriesOverridesList",
    "OneDashboardPageWidgetStackedBarColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetStackedBarDataFormat",
    "OneDashboardPageWidgetStackedBarDataFormatList",
    "OneDashboardPageWidgetStackedBarDataFormatOutputReference",
    "OneDashboardPageWidgetStackedBarInitialSorting",
    "OneDashboardPageWidgetStackedBarInitialSortingOutputReference",
    "OneDashboardPageWidgetStackedBarList",
    "OneDashboardPageWidgetStackedBarNrqlQuery",
    "OneDashboardPageWidgetStackedBarNrqlQueryList",
    "OneDashboardPageWidgetStackedBarNrqlQueryOutputReference",
    "OneDashboardPageWidgetStackedBarNullValues",
    "OneDashboardPageWidgetStackedBarNullValuesList",
    "OneDashboardPageWidgetStackedBarNullValuesOutputReference",
    "OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides",
    "OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetStackedBarNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetStackedBarOutputReference",
    "OneDashboardPageWidgetStackedBarTooltip",
    "OneDashboardPageWidgetStackedBarTooltipOutputReference",
    "OneDashboardPageWidgetStackedBarUnits",
    "OneDashboardPageWidgetStackedBarUnitsList",
    "OneDashboardPageWidgetStackedBarUnitsOutputReference",
    "OneDashboardPageWidgetStackedBarUnitsSeriesOverrides",
    "OneDashboardPageWidgetStackedBarUnitsSeriesOverridesList",
    "OneDashboardPageWidgetStackedBarUnitsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetTable",
    "OneDashboardPageWidgetTableColors",
    "OneDashboardPageWidgetTableColorsList",
    "OneDashboardPageWidgetTableColorsOutputReference",
    "OneDashboardPageWidgetTableColorsSeriesOverrides",
    "OneDashboardPageWidgetTableColorsSeriesOverridesList",
    "OneDashboardPageWidgetTableColorsSeriesOverridesOutputReference",
    "OneDashboardPageWidgetTableDataFormat",
    "OneDashboardPageWidgetTableDataFormatList",
    "OneDashboardPageWidgetTableDataFormatOutputReference",
    "OneDashboardPageWidgetTableInitialSorting",
    "OneDashboardPageWidgetTableInitialSortingOutputReference",
    "OneDashboardPageWidgetTableList",
    "OneDashboardPageWidgetTableNrqlQuery",
    "OneDashboardPageWidgetTableNrqlQueryList",
    "OneDashboardPageWidgetTableNrqlQueryOutputReference",
    "OneDashboardPageWidgetTableNullValues",
    "OneDashboardPageWidgetTableNullValuesList",
    "OneDashboardPageWidgetTableNullValuesOutputReference",
    "OneDashboardPageWidgetTableNullValuesSeriesOverrides",
    "OneDashboardPageWidgetTableNullValuesSeriesOverridesList",
    "OneDashboardPageWidgetTableNullValuesSeriesOverridesOutputReference",
    "OneDashboardPageWidgetTableOutputReference",
    "OneDashboardPageWidgetTableThreshold",
    "OneDashboardPageWidgetTableThresholdList",
    "OneDashboardPageWidgetTableThresholdOutputReference",
    "OneDashboardPageWidgetTableUnits",
    "OneDashboardPageWidgetTableUnitsList",
    "OneDashboardPageWidgetTableUnitsOutputReference",
    "OneDashboardPageWidgetTableUnitsSeriesOverrides",
    "OneDashboardPageWidgetTableUnitsSeriesOverridesList",
    "OneDashboardPageWidgetTableUnitsSeriesOverridesOutputReference",
    "OneDashboardVariable",
    "OneDashboardVariableItem",
    "OneDashboardVariableItemList",
    "OneDashboardVariableItemOutputReference",
    "OneDashboardVariableList",
    "OneDashboardVariableNrqlQuery",
    "OneDashboardVariableNrqlQueryOutputReference",
    "OneDashboardVariableOptions",
    "OneDashboardVariableOptionsList",
    "OneDashboardVariableOptionsOutputReference",
    "OneDashboardVariableOutputReference",
]

publication.publish()

def _typecheckingstub__feca567106b8718efc93d950aad2c0578a8de5ce54cbfc6f44ca17c804c2626f(
    scope: _constructs_77d1e7e8.Construct,
    id_: builtins.str,
    *,
    name: builtins.str,
    page: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPage, typing.Dict[builtins.str, typing.Any]]]],
    account_id: typing.Optional[jsii.Number] = None,
    description: typing.Optional[builtins.str] = None,
    id: typing.Optional[builtins.str] = None,
    permissions: typing.Optional[builtins.str] = None,
    variable: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardVariable, typing.Dict[builtins.str, typing.Any]]]]] = None,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37ba6755c3af60eb2a2647a143fa1809705fd7052f03611ca222569410282153(
    scope: _constructs_77d1e7e8.Construct,
    import_to_id: builtins.str,
    import_from_id: builtins.str,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80c4803501bb8b54897eae197c2cb79eae7f3709d0d16634d00d600dc23b0f9a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPage, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9de57c9e41664179a6133c15816d5cc1f1ca4ee5f82ea1597c3225a775e42ee(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardVariable, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1e89aeae913cc56708e3bbbe9107e552e4e5a954bdfd7067b870e5dbcb02b5a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__42ec2164b43e91f5ad208b6db064916847ef31a81a329fb92d562206cc3cddfd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f751be9c0fc528c2067b3d388841a0c0497c913308ec8296501ff22d1254445e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e256d2cd840af74023616f1df3551e739f981c27ffae0dffe75e35e283538fcb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c2c9555d9ec06b00b525f23399b17b061b23636caf36387a29a9908f2f48904(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dcf246025deeda1e6a2d2f0ee4748ee6ac41552f5535bd2c9fec6b73660b58ff(
    *,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: builtins.str,
    page: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPage, typing.Dict[builtins.str, typing.Any]]]],
    account_id: typing.Optional[jsii.Number] = None,
    description: typing.Optional[builtins.str] = None,
    id: typing.Optional[builtins.str] = None,
    permissions: typing.Optional[builtins.str] = None,
    variable: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardVariable, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ad90e159424eaeeb508b02cde06a6c3bdd8561b00435df1ce2dd2ebbbbb7fe6(
    *,
    name: builtins.str,
    description: typing.Optional[builtins.str] = None,
    widget_area: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetArea, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_bar: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_billboard: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboard, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_bullet: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBullet, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_funnel: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnel, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_heatmap: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmap, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_histogram: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogram, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_json: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJson, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_line: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLine, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_log_table: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTable, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_markdown: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdown, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_pie: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPie, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_stacked_bar: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBar, typing.Dict[builtins.str, typing.Any]]]]] = None,
    widget_table: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTable, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2cff5a67842ce39ee793086a8751ca33e6db073a384983147ac8b5a82a2bf90d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19fafd33a889731bf38d89935767917448bd94db445264feccf9799526b6392c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5c4cccd632b3d63b2e46a24a280f42abecf0e2775433501028069f320b8a914(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b557b195645bb7553b9deb9d116599cc8b20fd5bc19022186504ee6c236d9618(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__030b8a998f62bcb54c79ced0a98aa03b55acef12de0acd1f89d97ca232147bd1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82ff19f4a9b0e1cc4c0efe0ae026a121e88538f2ef4eeb5c8a4c6d620ee034b5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPage]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__812cda7b001a2fdcb6c1a9e9fa043d9092d77ff2c7b9a1583a90d7969348651c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3fc40807903017bb98d2bc10303e803173880f844245748c8ccc2f53de964066(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetArea, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70dccb11444f8b75235a86f241a576d426cb76ae4b4f99d8dbbd9b31f6d12f4c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f56c048406405ead03777bf8e7c4211d75e6f41c76ee8d8694d2e96c3ca4277(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboard, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__777087add7016c4857de95b7f8a53b06aaf674685e0b9f527e90971a4ce52472(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBullet, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4a865e47824c262809ae0c6eb30214c28fc1a9d4c3dcd4691d3ac5ece4d3423(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnel, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c57fd9012eb439ed8fe92047b0ee43fae8b291d7438f4322813dfceba9d9d5b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmap, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b448a939ecb5fe12b3d9d0a3a51f49ab77b9f9ce03c391ce898f826bcdc2937(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogram, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41e70f96de5d02450424dda738f11db90e35af6eb3cf1954f739695aba0117a8(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJson, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eefd6046dab76fe13e484e4ed3aeee6ae36ece945ef8bd2a7de2a25c6f8ea2ce(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLine, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71ccafb0891025b1e4de88c4a7d4d036065d9b7e843d5ab8cad1cc39678827dd(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTable, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a85d2e66a6af0d94b94ad2734a4cf09366ea58a431906830f37e9e9851cca8a6(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdown, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__396a554edb1a0ebf81e3c63cd05b160d67ad05f82b56df5907f28aacdc200b6a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPie, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6a66da789f19569d92b64b12b233faf45fd0ec90996eb25237a582345d8157b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBar, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6795d358808e2ddd9c69ec6409d7210f9d0967310cca777453726303510bd3b2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTable, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8b1deec46dac39726858185173d5ccb5acdc12a0988922bae82e579f334d4b4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7d0d6310069491de3c098640fd45c8b59928e2a1c55b8ba4ea371fc8cbfe14b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38905a63f7ca2cf0fa26532e7489db78097b0ac33dd4a9c9c1e9d9e26788f7a7(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPage]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17f54147f0484c97291ee89b7cc0b4a467986eff65c7bfade83cb0e27f7d5448(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetAreaInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    tooltip: typing.Optional[typing.Union[OneDashboardPageWidgetAreaTooltip, typing.Dict[builtins.str, typing.Any]]] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bcde2bbbd6c60f70ed165b29178a70e473261f24d48e814c2b6248986f812456(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84682846a3d5c1abb2199b6a68950cc82a9a258a0938251c4009ea161bc63068(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a3ee75c6d2118dbf34fede05d4b23a2337dc54a258ca18b9172debcf78419bd(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09166cd7bbc8d08fba73751c174bbd5bdb1f6e5ea8029ed57558dc762a64f21d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0c5f6fc6e7b35b682cc401c8440475204a735e250b3fc59968b67165c526f7d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0af3e9b9cc14bf12472e9c50ef5f375414c25cdf0dd5e6c37eeb99927bd7b22f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96b1f40cde20910f926cbcf7272a7188cf290050409ed9e220bfd13984fed6bb(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5b0479040430358e2deb34da3681849ec10b54e23ace165629865a59321baf2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62be1fa8e8bff7be2e0911113c3d578283e2557bc4e6140bd5d8fcdf00ae8cda(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8926893261a5f753059ac2a000eeed7aeb8fe6d90e983b29108288738cb764c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ea19b0c0af50ed33b1c5bfc2bb4729fce6eb09c875ecac9f8262724815173ed4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a40643434653583074b319196bb4b1e4762ee21ed4b9abd16c321810ad652af(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6871913b6b4e6cc4b7e91c15b9bd7cb6240d824ee6c0d6301a07c05b5be08cbd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e10f009c516c9923b64e1fbbd55988f462da006dd8226331c23c00cd184d92d(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5448a9b065b5e71b14271fb04c2bdc5be964e6e5e12650736208c2cff1a8807b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c39f58230132d56bc286078bbc1a6dabea088e30cbe99b8185e7e8960e704a2(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb0c1174d22dd9eb48385d1313ff2f3965eeec6cc7d27070aab57420ba281152(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54debdac23363643c2bf5828bc3cb6ffca8e372c8aae56ee578a6215044876d3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7a1c0e4ef2cb9e0f570a23dd8795187f5ed6d29ff50d91dc002f53d59addbb8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e40cedb023726e9d04e450feff1d9da404d40c5a4c50e41457da64d139058781(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5778bedd368940ac8a015c1d33f13af42e2df9ccdba967bdedfcaf85c404ca03(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b28db203ae7deb6cfa880d6838912131e1ac95f8f64454da61cb504cb2a8d972(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e86ce9edb6a4e0038bbe056d1e6620ad65fe3a71e35b05e9b0f92bb617d04caf(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f0f04f184725cf990814dfdbbbbdec9516a1b988f74d20556bbb8f27ccc788fb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98072a6186507bdc66addf302031972b3600e28af7dc0486abd0e6ff8c31df56(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db82af0bc1d68d48345e90daebbe29b3f82186f9a4114406572de02808576e72(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e30610e6f14b7defdbd6980ebb70126c40b03416f693a7f6910478c8b24b2a5(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__251e490ff31cce8d68e458b865155131c4e1b77327a35ee34bd556d399bf2616(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e82361dc0cf16c6e0344237868afcd7b45b4fe525e9e9d30613c6cf969e9ba96(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6551dff1d870e94ff0bf31fc8e9951077592fa5a304aa07d2f11365fa375071(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7cbafb37d923423cb04a7cd401ff50bed015b3b0db5982474a2d9f748443b5b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__948f3bbec3caedd90186b7e9b361589b5e81dcd718968cfc9ba0da37db516f74(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c08672bf641541c147555395e1c1b75f81bc2e370725c71331ba48346c3536f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__080cfa720ea15b7ce6ab5f1e637a07693ed9e6dbbbd2c23b23b5dd2d36ecda26(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4945a18889fcc303e0d8353424948ab15e39e94f0572ced8ec7681c8839e267d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fcf6e35a1c677038f2c1c73e004aa85694243559c8dd3168fa8d454486a53e76(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5dcdf869711253dcc627da3cae2297b091c12571381ec2fb172a08624095cd8d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31983f1619abb2dc2178773288b716e60126f75cfbd27d184c4be854d650c6df(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__796de82edf67367ede4953d4724c3dce40206fe0c8580ff5079f7155ee05b23e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55be10db349963671c73ac6f8249537f2e242411384a3824ea38031d42816ff3(
    value: typing.Optional[OneDashboardPageWidgetAreaInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61f57e7a42531872c8b50b58a8f3e4189fdd3bd7ad6b21ed8510103762887d67(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e7e2557492f7e3c22f77282de0fa5fd7a12f3871ea35624a4342fb721aeb629(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__219eea473fe7d0372257d6a8c5a06a26b15cf07893a39fab8931e50b5e5da411(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67da9de2ee0461ac9ddcf4923789cc45ca186593aa40d32c157372736a39464c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca2b2110e3751cfa4de2e7db8b5387a82c61e8a91154c25bd074342ba1a21e8e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d5f82482d2338f77c052b3f96b9daf2a93e44fa5c13b82d53ed00d0f91145ab(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetArea]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__957a77ef06d2b06a5ed740f10df5fea7f9c08a538f37ef5435446df7ab99fd05(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3700326127ab76a4fe666e375c5b74b367f238b0602323ad988c09e5bc72a686(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df4933d6a83022b05b4717e18e4297dcbf055c8b10671423fe4ae50885922de5(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c649c70a8ff909456d0de8eccdfc70d69bd3fa230c58100925c5215405f5927c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69ef6e7e29772966882d3cc62e8e856abcd16e4e7769ba232a39a026a6554f05(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72df003ff9d45093cbdba688a207d093dd4774cedecbaa105eee9f35eaf2f4bc(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c4a2ad5ed1541c1c0fa96d4df410c60218cefa1eabe123d4c6b7af674f77031(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__198506a28cc10e1cb203a914fd29564d95f805e118bb241ceac9b6e80110de73(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6e62be1affe33864dea41eed3b0c10dbdc3f65ca438c7c50bb012cbf5240f66(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0b19eaeb18507cd5eeedce89ef86fdaea7a0cb83533da28562c02f11735f7e3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9f6f1ac5d3ec75b2597b6a506f1866c22939fe9ea0f599e9eb2ebdac7c793dc(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__15ab7a3327e3ea4bb35348c811fdccf4fe12310fbf78dee835979df76cea801b(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3509dabd2d5d413278ed210ad61992e331cf2fd4d89b21cd1ab80c1b37bbf55(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__159eb188f1064db50b625aaa59b75e0a5613229904cdeb8d15aa2092750f5a13(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b993c8ab051a40ecd2d58e2b2d568815e066a36eacb99054abd57acbb3daa1dd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d920ef89d4b87fcc79179c3d880e2de682b931bf0d305e19fca2e6b324df3861(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0a169225dcc0e18dc24b1f07175a68e4a4643d6df813da7c61346da576e8885(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3ece645b44486f015aeb94018f4421039577d116a12d2621111993c59bc3c260(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3901b1c1eb8d3f92a8906ea66301bdb018af532cd0d7af7c9bf51304bd6ba4b7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__510000cd23e02bcd76816b3913ad8c74305daa99769f9633f57a01bc7dcf4ca1(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__faba77f6e8f94b8b99c610313ecf7a3f0e21345e79162a02f351b1909213d959(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be36ed8d7047cf036d2fef4ee2700d0d212c778505b2aff4c35eb88b2a679624(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e4f71e7e387dfb72b27a97f1b243b1717f6f60960dac09bc318c8f3ed42618e(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41f22e913a184ec03ff31b357c1766a5200d1de660c3fc570db78c3580d90449(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__daaa41ecfa36b211734cb683fbdd40fd4c280c0e5ed71e17b55f4f6ba13eb8e4(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cec08f8e9c9796ed5c45d5267ff1f2ad4b1de41357c247fb5268e5e149b11353(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa2cf615da3f6417d2d30045a82896afbb44efd562c7de6007d13f0fe9fe2b47(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2355b96057384a087f09241124cc84c3fc41f2e24694322ad4f17abbcabc3c96(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30257e180ba53cf65b038f7146f91a2383ef7aac022841528abd12a586761dd0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc2af344adf6972f303015201e2cf3012f333bba5c5ce91197cdf48020a488b9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__73cdd809212da11531554a3c2c3e11cd88d357fbbc058e05479e2d9e705e83d8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c5dda17daf98cf19078c1c4a64e409d4bd4726aac3dfa7359b58ebdd8caa3b4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b3794a43667c53eb881126656126b3c3e8cf3ab2c6cd0d081170c7d86008999(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e34f6d2f11ebffd5380995e337bd9918482bed3f521c0fadee03c5d200694cdd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3dcfd7ef896a2fff642328f8b12d32b84f2f5329da49c211803c761b10e74b26(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d819981fe054d605b6792dd4f371fb7be33cb5c39ec31790784564193fcd173(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1beb89b4a4773fa3959de85504057e34fe8666bd03e7a623e7cc731ed6a3e2c2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70984b5fc92ec3758483faef750c791d3e11814c0ce39e33d316ee74c793b5c7(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0855b7f051a019cbc25c3a96535df73d18d7235775b4f5431e7efded8da35ccd(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9ec47174de1df60d0e6656643a49fba7d15182277351b06eb5b5474227a63e5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11623933e89d3aa070717713de9eef6a539eea949035414c9ef7e1abec9cf3bd(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b925daa15a3c52ca42453cc7401e423c2ae2a37beb7861f8b523f6d4e4ba4489(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8dc0c44dbbddbaed7648c0c968649dfcf51b1335ba3bd372805405455eeea437(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__195942ab8a6f08e989eb3442e0136e64b40bb55bbe666e0394bbfabc61e44120(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ba954af68e09d72c6725ce28b0f60b1242f4f80c187fa82fe0788bbe6f0fe57(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a2526ff077a49d64dc0133bf9674ac9716540cdd52c84fe0666507f0cc44f61(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2785e9b50ef3975fd112f7847c6b01777127437d126e98bd5a927e93e1004c99(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2923b233cd6d7378eb5fd31112c2cb1acd6a5917505f9289d22c82e27b2be82(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e6d7baaca2adac0ea8ab999f01eab1ffb408ba0b8d62b498e838baadc88210c(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fceb4102761dbe324b7402fab5026b04d23a309868d432340a45dcab4adf8688(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24e8fed6d42099125f481658f092a85657f5a5c1d133caaace195eb11e918897(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetArea]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2374021dc435945953c1e4e676ee002eb0041d6e48fad8543f59aeb91dbbea6e(
    *,
    mode: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30a3905c8231abb71b82b0531a6cc6af788caec4e71272f666c00be3f4d14b99(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd19a0f88170edf64aa2ec9477bfff1e0942a6bd96a992de52fdcce85bd8be86(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52b6fd117e34fbac03dcbe371461a34c15faeb798c017706b10a9c094abf5e46(
    value: typing.Optional[OneDashboardPageWidgetAreaTooltip],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d86dffcfa8d9f42238ff2b604bbf94364bf7c8f140e684b6c6c77759efd9f16(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__acdf87d3b9d0d9092a8546d3454f49d780bdbf0f7b245f22288ac4e3590dbde6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6d5d01d6839cfdd83e9769eed8d1d8f559a4b5ce3eb2a1b4011762dca4695c8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__214405cb64fb0c9e3f5419b8536c872e88d1478085a840688bed00b7626ded6b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7999142dda4ba33f87883cfcbc0ca2a9bb5ffe00f17407e1f6a9556d83fc61a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a97a16f147e010d889dcc0f5a869d7d8c20deed7b4711071a013673d7130fa62(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b1771ec7c68c4d2d43d6a94da3b3c5312e40719c0a0e6de308390503b9225bb(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aef80025fa31bd3260d06a8d39788b38c35ee5feca732b08920402f696bbb89a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__302382a0426dd3defab99f60a87958cf16a6783b37f83198af2aeb6342c2b893(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetAreaUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3f0db21015a121610a6421825bf63750c464e9164c28bf861ca478aa980e4ca(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6baf348adccc312e92b63f3a30c06e4acb71b0c3463c6a555047bb5ffb98463(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__47ac549b38f315b81980d80569a9aa8648c9f2cbfdd9c0652d23dad5b1d7c786(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e41eb6b6c94190788cda052013f2391f35476685c3e1ec316f86c766f6fd298(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7aec69ae3087a095f0214b0ccc6171cc36763ed8abaceab529238cd1e04c140(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0dd0bfc29c8631fab508dcaf74899e41a2654a4d46d1ccfb616a2dce6ccf0869(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__445e0abfe46467479dcc7b57b384382d241557962a944e6e2b1c2d2772e3ddc9(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__daebd12157e877786bb69dbcbafa534ad4ec2cfa2d578805cb387e33d3d933e0(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9d87f981d07b460290590111e52371a959d7bd09affca6e6790878688b1ff26(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetAreaUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5ef67cb5698be421f647c53555255458585c695691fdaa61419f8932d323736(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e9def95b965f7022a3b28e24aee910ac15b0dfc432172bfc5216e5e783ae22d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d66bfb3ff6143ca64311e5631f52c89920a293408d20e28082603c6ac1eb06e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b515be05bb4a04e45a1e5858e6e690d425fe567b4a33a77432648e700f491986(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetAreaUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb7fd8f09732c40f5c70b0c3f4f6ccdd6538746442266f32a806a4c3c807c797(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    filter_current_dashboard: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetBarInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    linked_entity_guids: typing.Optional[typing.Sequence[builtins.str]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__64ac8537d731a60f182d1ecc3b1634067f44a0dce9e97ce01f5bd84044e599ea(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7387315a16b37def3546e1fbe684ce1651b864d96ff6ebccb0cd1541f44d4ed(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a3acd85cbf40979eda36a5445dc62b7d4d44de3e733123809afd811d39fb50e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__703aa4c2d25eafbdd90eae188f88fc62876eb4732c6a9936882550f623197364(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__993b8a478c6dc167fb2a6c9564284c36ed05b351bb129cf375a9ef141b68639c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6065a164765546bc9b10fc9299245662f90e765dc8ebfeb4c6146fce4cf491e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83f9221285570f81d21bf54c8d1a547a961b570c521d57503a9874c248ab32b9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3a11b19e4a55d71035d63e183d88b33c31fc40efe9924dfd05b931d2ae6ff93(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71a42590f7f38b2f9e2e8f9c67b5e812000bb3333e183a2cd028b48267effde2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93e67c25bc055023b5141191e2bb212b54fa4db24472da2007a0232404249132(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__607a9dac6af534f4597d4432260457eeb34db64fc131f08ad9c4c850059f49ed(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f94cb1a288ab14c6cd50f60ca7dbfc58bbdc11ff2b244d66e8658c512d9b7533(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__acc4b9f308ae00da17271466940168c88c033c80c75b8d47a483e8d100923bde(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a38b48108ea841ee68577137343a2c6170bdd6029411de877e8fb5115fd04113(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dba7fdd6c7c0b2b4592124aa7b5d0663e5a6356815834d77c20ccd0c9c1fad1e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4dddb5978773de4745acb537907ed80835cc6a8c8e021f64df54d45d4242ccbc(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac7a3eccc023d0688ad46ca58a43cdaff41c0e9fb6b09d5bdb5c88e99d2767d6(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17e5effd1f3126e36c0e660e6720689253f6ab97589868d4c8a01fd27c4f0b27(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1e0de9ac6586dcd216d6d137d29d36227d5ed02b3b55945dc360983ff4ff273(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e25febb2f03bbc5d1690cf1682b2f92da2ccabcfad8e5860822611dd8463da6d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2650183b40c2cb1733389a4935a8378674274f4e33533357bd5534330fd528ab(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7db44338112095c07d647195a37ae3b108217a24eeb64575674c81e41fb54e72(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44c2dfd8474768f75024a4a2e8df89763b9a228e30e321ec6701de1cef0a084f(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75ad81127c42f364154f92abe676946be71a9a7f4e160ec7216b8f266341d9c1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f32ec88bff90e9dc985adb719ff3c4779078d7bba51663792f3ec6f3b6d42ee(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__663f23ba04b42d9e5fa9002f208bf805d18435a3f2fb8d61d250e26a2d1013b1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__462530f3d4d9fc85d443a36668af1a364bf1b53c5975171e3f414b5f74254519(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__528b0fb7275857618deb1ac78edd3ca58e751311215ba79666012f6c675fea9d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88d3a9cf5ae8ce1f483885e752ae34e2445f8a282c859ec4dd65ef4d433ceeb3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc8f27de1c2e2923927b8d31bf66b04cf4c9e9ece4962d92dda2f034afd5e28e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c54051dc5faf00e163168e0bb0af72b774ceabd948500ea7d5e4ab41ec52205(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d24dd497285b7b08d2deee2194732e0f67adcc3501c8dc647c04dd584ebb0a24(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb41af7bc663c61e149863fae99ea2077bb879e5b6ed0c2fe210dcf4ddd2e832(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f87bcb661ec611cd8561be195ef872505164a6eee0a5d523e9c7a32b9f3f2d47(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d93329c8709130c58697bb10916cd90d1640feafc98e106a9c9c5fa4cf60ee23(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__213726c4d55ff4cf70abbab6fc48b4ccc6752142483f453feb61571c3b8bf389(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61db57d68925809dad005f7b6bd0b4d99f78c4ec7f36fcfba8f4a870218fd60c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a37b9d39b31eeacac7cb67568017b70d966d47a1baa6ba3c8057cf00ef5f34e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87de33bbf390ed5b24f20c45d50406fa6756814430fd2f7811e870076fb12cbc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1301f57742926a76ddaa623e7afda65cc34c810697ea9af8a7163203f78bd52(
    value: typing.Optional[OneDashboardPageWidgetBarInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85b5486f560cbe28b41402719068f9150ba0307b2e9e92fcf31f2205686d7b9a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0657dfa99d288047ff79f42ead5444750670c769866c9b74c2ba28d2f9c4a3c8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5d5c5fced03c6b0f78e95318b7d7ada3184262de6a9a5340cf9592ad8f056af(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6cb4689f24b1b13343b9023eaa9c0173103f4c86450d4391ed915ff954e468cf(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abb120db001e855d2ff7b2f885953d2a80565de28b7a26891c5f4a2cf20ab8fd(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11be4a4fbc649867e11e91216f90f4c0cfd8cbf394bed19d69c667c49b1ecb49(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06a9443b6c0754224b7df09b9601b83e2dffe0f14164ac765f119d65d6812dd2(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ac5c266eeef75b5b0cd5d5882576e74e14ce248ca9c192d7b2d6719954df06f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1657e5f419f31a9561ac3df55e1af295ad1aca3d91462a72586e7ffb415adb5f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5c9d1c5af069284cf3af71764ff14ca5a3839e369484920f04463743c9bce10(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e73fdb95acf20e9f7df0bfe45bdff630cf3de9011520f85b9b249f654de9ef4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9d8515f55c159fd6cc3d70d3fc78395afcea937334e87367e7bc08746a455f4(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__140bf3eeed3bad2af69c6de7632b56b01ede4e0f1fc8486859351322e801b5f9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f472d68d8ed0e291396f1e4e20c37ec1e178682d900070a8a82d04ae75eef53(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__945868a74b0681e0cd2b3cc9316a6c28ee3a852c5936aa321791b11a723670aa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b48ee21ae3d6865a2b4d284f94f6316f1ca8b24997b8c74a2bec609e44e4d05(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__443d296956e2a1e1f7b0f64b99e6fab3490408bcdca0c17be288dd59601ae766(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b7eee22f0978da030e8d5d2452155792faf50ec2c00ca07908902f22728741e(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ccc0d26f075cb632a4178eaaa9c9bd819a846d17be45dfee1f6798cc6fa08509(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3114fe9dfb730007d459650003d46442a4de36c76bbbbb2e66dfa853b05d1aca(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce20c167599da033a646e43d75f73903a1e3c173e126d50c559e2ccc860d2ddf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f83a9632b3c61f7dbaad571b72711334969ee798e366f2d0ece17c83ea9a7661(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__377507e1a87ae67b01476ab1ed646eb2bdbcc66ea7918c0a0d8a27b193d3cf0c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c57e5465b994409f73c780252241221c014a3ca297c3434e17a23ef29998147(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fee4b0067c97146b170a759cd02e07fd4ca1471cd370920f238723fb2a818153(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7fab48f035fe38b7ea54c0b9796c6a2cc389d641bd724b2bb9c9a88f2cebdc9(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92c281faa018aa1e4ccec28a7189f2bd0126bd4b61dba7e6f1d7c0f65ffec8da(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a0ab3e4b32585617dfe0895b256842dadce480379e27c7d79c6e2064c3f2590(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4391bcf3a68715de9736d8ad561c40c983e08a80084cf298bdf7f37cddb71fba(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ea3d1a6390b76e0ab8fef4cc929cbbe7bd96b0e5833b5df91b9179aeb07d4c7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__765b8f3cf007f410daeaa9bdd045bd92392a16b65311c1c59beec5c7df91cc07(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a385bef26402f8d2cd87f89ca2f7fcb6f3326ebb351507fc34989cbd61e34840(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2a2d7023f17ef18558164a4a03ca93c6feb96e30c557c791d163fad7af2cf02(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__380409480f0a8c9ff11ac4ce68730c957376270a5ccd772338b52f21beae7336(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86012daf20dd6f8824b85060c3d81f7b550fa8684c76f07809fe5b4a917442fe(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9b6ffe84e9d5d7e4b2832aa739c2abca32bcc80fca130083fcedcb305b4da26(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f19d53c8504d63607b5980ba3a23a658c5ff5e3a983a676316ed32ec73deb7ff(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f52ea46517573390b1351c02d46a0883ac9792835a1bc2da45c795115890b5f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20c6d21c9b34c2d0b3a820cb7cd5361f48ede719394a07f45b7e7eb63278c442(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14f0d3347255e73a5ab0040ae4818356866c1d01e6851264b11d2ae1f209895e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c55d88d6910c7a712f6f4e6542e3a229a7992b2c58cdd3c9fee1918088fa40a2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5cc166621af16dac9e2e60a4b05ee0151893d177578b47d29d45358dc8c422b9(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e49a042f684f05e397f03acd7d3d2ad9edd4badd08b576eb6e0a9a855f432529(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__648a1073766fb60fbd7fe2a71f3d9962a95e0effdb2199e665e9af83d8eff337(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e120a80ca1fdffa440a95afff099d7a501e378324dac308f3776d8241cc8157(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58c0a295dcaf6f2934705b69e71d6baa4091743148aa2df5c3198e9e334ca27e(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e89953a1fcfb58c37d4f793bb08b6e5554dab6a14ba97e1bc75f67d4e722853e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a09b0fac3db716b2bba83ee56eefd7ba60d07ac25fc367eada924a2bdfe7d573(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a21198abb6340923fa8e662cc2f258e227b8eb3fe7236a02c4bac6220d1d63ea(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd031a028f45f767d27837808315ae8250ec1c7a73bb4f2a0413baad3b55b93c(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2fbe3b1fd982e05861ae19ee7a5b83cb3b69ae72c738ff40c01b630421fb7fa(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01a54078c351d49bf3f83eda5da11fd9fd1b949b8f33ac6af0bb4919298be6c8(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46a3d7a65fae83e7605b1c1cfcd8993079ea175db4a2dc623ef1433caf67fcb3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20e47d5555af8927b028672ab5e440854d2ac9732cb8be92ed10ffe7df75d027(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80b3dbb25a65ff1b86cea9d0a720ea6a86ff5aba1a895bc2037775ac6b1f66bc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__257a41382f8f4cebf3117ea423737cd31517c06887a1adea9895a547ffe78fd1(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1857ec81d1f2bf0d274b2b13b23d16911347283c84216d985d50e8f06d754c7(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ef40c2bee931916c2fa4230e1a5ee20d15ea83c8edfc8811b8a9951ab0630a3(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72d03546533b8322f04e13122ff247c06e1fd29ad50251ea45fa8fb01ad4b88f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da8cc09bd4768056cfc55325aff9851e79273344eff99d6db58cc1eb31e3f0f5(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a70bfc8648018412e98925b31f4d95a9c4cd7b7b28d334aa149f64bb31abd80f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df4e037be7a39ecd7f468d39f9ea924fbdebc24fa533640f2a47d2fb1741d146(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5524774a68202001b115077fc45f8f884591677cc095d8e7772cef88853c4284(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4621cfa241d7c78208bbc3f01e5c520c1f6b616037d7a937fd6341dd2aed301(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44c219c7956859cfb68f0d6ffe90c32f841d0e48e564a2f74248fcea4618b203(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af87ce1b6f598d8e29a5180d878f61b499bff8125a8bb21e4704e305193a6762(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9860d79d9ee6e5d2bb410a58f08466286bcae85cf8981ff824cdfc1368f0ff3f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__254a94c38a30806e4fa2d82d3706a79a08ab3afee387a4897c58054ca1bc3675(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBarUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__044b8b2bbf168851cd2bfbf3bb85aeddfd6b00362e7c2171508a4604e315d19e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb2539dd74fc61fd5b6d7aa816ce69f88f09d1e611a31d95525bf461567af1af(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__989e6c10dc239615a9a0626664585620ffcbf159db493ebe6a2e94095905dc2e(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b04c8b895c461670cf786c567a5bc3677fddf63c4ca192f00fc57a169361c6b4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75d913e1f17a642ea4cc0f79c0f12f087af26d075d19afc14134824610a8a6da(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b771183986f1236628a5b1084c39239f430c4012bb8b1bdf9213575edb89a023(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b371edf6b1303d72a71c4dcd97cd5a1dc891f52eb8dba56c4d23f3952ba87af4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9bf104947ba8f7c4daf800f4c39d42bd579c2f2dc9b34084952ea0b89eb115ba(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f3d758c2fde0bf42c00bbf82355bdf0544b4d01cd86cb0eb8c173c92662ab2f2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBarUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1acf9c11d76dd631bf53bc35d4273be66bdc65a13b1663092ddb68b16dd18bae(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cad7961252356ced77efa0a53071059035d084a9596335a3190fc57bbac339f0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c847c1b4a0326a6d37ab50c969d54dbeb63e4314b23c957f583a5c536b777599(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa2ebc82e57cda6b25dfe5ab21a7cad2552359583fdd6096928ca69dfc118553(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBarUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4519ff1c610e118dde2c95bf8426f5724dfa9398cd0519416b372703ee0f53a6(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    billboard_settings: typing.Optional[typing.Union[OneDashboardPageWidgetBillboardBillboardSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    critical: typing.Optional[builtins.str] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetBillboardInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    warning: typing.Optional[builtins.str] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__05fcffe46215c3650369ffab1d8a482959cd5b9387cbebdd4d8a3628b961c0a6(
    *,
    grid_options: typing.Optional[typing.Union[OneDashboardPageWidgetBillboardBillboardSettingsGridOptions, typing.Dict[builtins.str, typing.Any]]] = None,
    link: typing.Optional[typing.Union[OneDashboardPageWidgetBillboardBillboardSettingsLink, typing.Dict[builtins.str, typing.Any]]] = None,
    visual: typing.Optional[typing.Union[OneDashboardPageWidgetBillboardBillboardSettingsVisual, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7fa3e844aa9cb4269195e73486fa39cae7cc5c90f29599310e6684445d3bf348(
    *,
    columns: typing.Optional[jsii.Number] = None,
    label: typing.Optional[jsii.Number] = None,
    value: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39fe81c039c0eef474784b3a3ee089d86b2501f3c37d688577e711a1eca35b0e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef824b9587042ab9c1dbd5a46cc657252346c717d530c5cf23916996f125dc9a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c1db9cb12b624acd529011e3afbefb0c287058b01df98b48aede646c12899456(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f28c4fbd961286680339743741a3615b9ae2db62dfbcc2e0eb1d16f88a364655(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68e1ae8019ff9f748e1b2fdf5809f25b44fe2d5fe9c7f86abfa19461f6c1a475(
    value: typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsGridOptions],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75d452c74f8a589cc340a0a15a025f7ce28678d2242d9bd001cd0a1da39c4f82(
    *,
    new_tab: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    title: typing.Optional[builtins.str] = None,
    url: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__919dc76aa342cb3652966983376b212fccec65a329c0384263fd257145539df7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e00f2e388dec9babe0507adbbebac4f2bbfb76813976149732df6d41982b5482(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b216a82ad12116f70ea0ba47cc3931b6c3ba438d5d378ca2edeabacc57c961c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32558524a20042bf2d8db595779ff03dd57a6f18ff1cf80ed781fb227811b01c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b719e82143b61f453eb6955384366137bcea945c314c51b52ce6da76cd79cc58(
    value: typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsLink],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b48fc480c4aa7224d48b51db796fc83558a4cae5e97f55f63bd2a2ad971e044c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6519b02ab32728770b6c7e1ddbc33de05132d0676e3df4f3d9c1ca2f573e5db2(
    value: typing.Optional[OneDashboardPageWidgetBillboardBillboardSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d44140ab8f3e4b2c2b6b8c612aeb94bf0500efb9bd030cbe6bb84b6009c7507a(
    *,
    alignment: typing.Optional[builtins.str] = None,
    display: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a5727d7fa8c5cf88f0e1ffa5c5548ec1e71b249e5e24e9a1383f48d859511a2d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31720b42e6ea4e734096ebf0de0b94b83822ca80c3773ff1e2c4a07b3354a2a8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a35fb7c21bd3e8b5bb77bfe72e2b43a7b9b6979399dca7a2b376cfb288394545(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3fcb4ba48122a27fa7e423125142dd8d546ef11944509a0fa890bdca8b1d0b2a(
    value: typing.Optional[OneDashboardPageWidgetBillboardBillboardSettingsVisual],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4eaff1c8f37c5283e965a9efdbdfb0946eacfb41338b3a32733c31dfbc40da8(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__171affe3bc0f63e8208ae42a410ffae01966f2e9852ed81bba9af2a20f7b1ff9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__712f721e9b69a0ce4574d9a288691d5b7e2750bbf88dcaf8362a380aaf80d222(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e959cc37ff113f8c3462ece125291c58c3e0dbd4bf38289dfe67a98697f1615(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__987ec2082a25178dec800274d341537102c23a0792998ce875d5593ac96f6480(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f9c45c482ce5ac5cefb0c1ad6b3f0fa9444ed6d934ffd4bbf0b9273c82b1a82(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a98cc5ba73436323386fb8e1f81e13338aba94d5239fd429cccacad0ddbb697a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe39dd705df5ba894fce271034ea70ec9b35f0c1d4d184a1d89186beaee73640(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7143a23a93439a1c41a579e8a8c1e5e55c51774a8b13aef8f262f2bbcad8b447(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0ea5d6ec2fa5b2423c568695131c1051a462abdbb6c0874d4ae7c8d79b15aff(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76d1d383bb39727c772c758e0a331af4e6f39d163ad9f6f96ca0007df88af5da(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ec55abb7e614c49f79c9631f50029f5bba4fa28ba786b3b31adc052c881b120(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c98c4e6f6bb341c186c35eaba9aeddda82ca32f4e3bc3f4fb48fb0406dd9733(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__230528cf973ee8c7b24ba987ee9bb205836f8bfd59806c82f0bcea8d71cea96a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33c1d6427844bee85ef4f19a70f71ef5712ca22314d45e2ed47a312c8c83827c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f3f4f81c821ad21c4241afd6e7e5020a98805f93d1e9476125cfc784fa8c47a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28a2d58c21180580540ad92f61ee5ab4567d3d0225fee0626f17072d52f7d5c6(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5845d4aa85e395d43fc49b8e5c911afe6cfe5f2f4c0e0cb28bd25cd63c7f26ba(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e537c439b1467860c75ffa9e0a7880493f7074392b10ebbd24ef8d46ef31f0c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f150c586101ce87f5ae1ea218255b9fc76bbccdd488bef7d5178baf85c16e7a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ca5197edfd5dd688563bc116d896e7cd8105c86c16b7a1b5f2eeda00e9319b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9bd26c3fe64a86cd7b4314d5a0284ca6ffb7035a248400c4b12130cc6bc57079(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cfe173c251a262aa652fe6b0b5af365608f0142fdc29d04fc3f4a6ab4e86a275(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33aff49656ebbb2bf9b464c49fc67171b5b3e70d1075b900d26d60cc49c25fd1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c0fb3c5e64f2227c4b538e097add0ab576a0bf1d14f4394753104cddd2ddc06(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__673574f5d47a5cc654002d39f45d85d25e2c9f5b27cd4a90235d27bb05e40b9a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70e5ad80b887eef4ca70842d855c9b1fff5f0e8f6afba7d04ab1a1dc3068282a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45daaacee1cf4f3f52c56ee06e72b8979abcd03d1d24111af5f7f485bd478a6d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__115eddc76a0574389ad86437f0a9449de857fa1f4e4d50023fc208baebef527e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e36f1214b8407dfcdb0b1e43868a55d3a0fb3c4ac74da650435c8027c6bdf382(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__04a09b7a078ff20aadd76cf5d622238739579198a81ff92eecaa42737b12aa7c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85f5dc0e7196b7cc30fbb9341537dc24cf15d0af66682bb22ccd0c3df09fa46b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__490e7057b6b7d46a8ccaccd9f6a3a75bc5f76ce2ab0f8c9156cefc5f2c21611e(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9ba1bbb5e912108e1b95f6973620c95ad68efa9f454ac10b42eabeee577aedc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8e3da82e1920be67372eb11784c479d63e992785044b1074d798aeff73431c3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f806648c315d97e695ec1b44e9461dd6271b6e8de51ddf455d33b36aa9c80ff3(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a01edc8a7fee34badb7f7587636d016b7ee74018aa6805dc051ba2bc4c3e9a00(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__15b3a00b92d712db344d291a5fea2e61e4814345bc75885c9db7f33f9edf2bad(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d30bfced0e71aa840a840e1e65605486668a50d84a0f387865391682e4df06c3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d69924831bf426fbc344afa77ec4d3bac1e001a902cbfa79f34b8fae6587cbae(
    value: typing.Optional[OneDashboardPageWidgetBillboardInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__894fdab0f58338f0b572982508016551d77bf9dea527bdcc9252b74d49d6c05e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c46e0c9c70918be2a6b2f97413afa7d53548ba4ffd44f4c28957b419fc720183(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3513ee2b75ba0a7cf72a8d2a3b666263335324ef3ab7ac439d658ecd79f6a5e7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b50e130bfe66b9e2248172a008b949d1b01b3dae6d5cdfaa3091b0cd847c9392(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72c36205dd37c589015f42cc775e72fa5cf6a5b36526e888f03aacb342768dd0(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72e79a0b43824b61866cfcdcdd1ef386ae5f13fb9fa13e7fbda439443a483467(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboard]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aafa3074e861e1d5ebf2e8c4077b3dfa1f545d4b2db6d102bae2a908189a3598(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48377d1f09f6fa228f0b8a8c06e85d85be44eeacf8f152b24da4f02b4e58c2f3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee644d2f4c7fb4dc3d5c77c8051148e822c03b5ef83ee9b02b93e3e1e31b8c87(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c3c47a15a87e0c14f9c702394fab3fc33effc9d1be71d23db9f18545329d317a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88f03eefe536ec78a1237cd8ad54fa4af08823da15946d3218a76b4caba9d9f2(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__418d6735c96d7f2144d86c144c05e84a9b5ffd3739348b45afce2841a416a1aa(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88631c13b2527746d3f58d88744cf32495cbfbf120427d3ca139acc8730ddd33(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f1a55f09aafc860275896e0376bf0dbcadd7982bae99a11e13444a5e58ce48a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76a466793b66e28573281916b44fc7d6344b2e8e84f025b8182c639f6772f6b7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4da882a93de44627d05dcfbdfb9d0b3f37a8d1ab73c978d6626d5c22105e7cc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e0279a8a50903b255714cc3158eeecc6134583afd1b2eec59f9432963da0e01(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a43a0e0883fc4855f2f335e405a8b15ddc90af57df4a64789821fe7d2d9e8fac(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7a3874ccebc16cbb7d19149e90d0cfce5e747e9acce53bccc388d55ad927215(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__575d597045786efc397d784a8d4340d096e66a45830aeb5c869062443420f1b7(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30b1ce763d9ae66057805f55bfd37e0e18a276eaa8123a2f8b66db98de2dd131(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c06150a150556aa219717d0dbf2c9e95ec57bdb54331475de7fa0b27334080e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92e26667d71d5a414ca4cb55f0dcbf4ffc995fe0cd3f5e17dccea5b51e29e796(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ae738072b46b2b09ecbb493b5bd62b45f87d26feaa22bc05620f33e21710ab3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e0991136fa3cee3a9842281feeb448cbdaa2323312940ca3388abb235b87918(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__927f6830d0009b7b215c813ceacbf8d84762e90478994dcb2f33a9097cf053e8(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c2c15e46e132464a6a558647e147bba6e84a442b81dd41d269cff816725cd50(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb21f78f5f8e319fa8cc59a98d8563e240e61ba5a75bd3234b16f3865cdc2210(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb885c72e3ee92c95c6cd188be7c2bde4733167f7637e50e2281277d3f545014(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__077dae17257dc5cae46fa9a1eefedd81499167a94c509d37e2d58e2cc031c346(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__492752b9c52044512fbab94ccefb89139d17ec78d56c1d671696b1c7be1da202(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f15e54481765c84fa677ff06218d93c100cf0c51cff8349a0d0f6dc9bc4e614f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76da3c425069e79ba2bdf3334315f414b425b5cb8e6413417cded41d8d6381b3(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a03da3d70d2554739bc1ba0c45d08dec0397acbca1e6f2721cc7dde56d7e6789(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6247e205a4006c6ac78b180dfa748ebf6dd32faad2be43aaf4476bc518c89d1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d86646d352b5f7b8f7b19ce04bd315ba93e6691c72ca1df692ed6f710e543ae(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b623e529f473b57eeee3db1c71332b134ddc4223a7818a63edec08370e4383e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17f796c5986951a8e77f5b29e40dcf56d8c3e80463bd34718c7844fb1a5f312d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2f6961fcd66b054aa9dc19b1f0e9a2f26204c6e0d915db3406f101d2ed7604b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b2a58c80eb16a1e50a5ab1bdaba280dfd71696708a83f71e15b5389bf845578(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f18efc626f74f839415f318dd1dba07e477f8f8c04b18e1812c0f2981b94344(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57a6589869ef20ad19bbf5961b267df5f6c383e7068ad344c9065399b9c1db57(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60a296a21633fa7f7b7a4d45fc88a73bb60b7641b013839bba730bb8a68150e5(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f2ace4486862b7e4f0852336320ba7e20741d4d17d17bf0b8182309313e0785(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__79aab97913de5ac0af13c6a45f4ce8610cf5d5691fdd0fe809cacf63c391a140(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a18dffa16f429263e7d27b2371285a08dd64bfab2e742f1f690cc46993bb7c0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e139c1d753b5fbe05a725c540362ffcf60a4f4c9efe95e76fbc01cacdc3b7962(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df4d123ab683d301f4bf2b7445d6f0a67f5efec113a1b9b2c1b0c8a959a814ed(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc0b1875c5ee7f0a0831783325d83299bb4b1489cd4847fad5446a0a5e8bc341(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a0de7ab04d21d6f62effbf6aa02e21c5a247caa8642170a1c186fdccccf43a6(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19fcacb5f7918b235b931757f2eb67c0391d93fdafc71883d9ac05ac12bd9411(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e30359a5e491137232f20a9970f2e97c6298f8853d2cc7efaf1a68d5863c77e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9e4fd9a3bba4caf7de4314341d1309ca69deac272637cdde9d618c5762c228c(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa6fc0e22620ebe540aedfb24f046292d0c0e3d9f315e858e80a66c993d85a30(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee9327724f805ffeaacb104c68f13bd5e209426601540f8b764d6ae606736558(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc40fb460a2882fbecb1c489b1626d7801f4545dbaa39bf186c99a5ffa7124c9(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__017c9a77feb859b30f87cbbb9daee38c28afa89dc31c9ffb9c32fb8849bb9221(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9efef549e7e9b0b6445631598d977019b7e4f0c9e5f2b51c857f2cee5a55835(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd280d1ba2eb59f0afb44d739c9133da4dc36f41160c491cf27a8aaa06c96411(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboard]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0cfdbd0aabaca23d5099d2b4da61a9e5c4fe0e847d6b4f594397740bbb05dd4b(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27ba137a67a4990b1660cc76d179f947dcb3f710b105001a4f44a747dc810484(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e4c791217e607eb485ca2843e8ea5a4ee230d463cbea28771c96804660daa1a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5fb534f5240c145601a8dccca225fc82752587edd442c0c4957259eda4333574(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f3dd46fb87f29100824211965e1ff03af40abe5994477733985596babf890350(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d961035ad678beb7d2176dfc0e8801c0304606dce6240bc89934c52a3164517(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fffc8ee089721ee38dc97ca47ab26c8da99e417013c1783678cfd3c49f802f99(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0700c78383c4de290682a928cef6024e5a489f71ba9121af6ebad7fc96619d5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb819774eb7d803202e0241f1ccb4e494317c3f9ea588435b1891fdd616d8d9a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBillboardUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d910fe1bf62090bd4610381427cece4dfd6a39b2fa0fe15f530ef1208a44fcf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d726581965e7a332eea7ccf84157ceb60215c06b05a239b1b9adc21d6b4b494(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b44fed7dfcee18274198ba6b40753ecc16a654ac2d89829fdd1ff693fff7671(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37e90d9f2dd8a1cdb01025b25be53ac42c990c987480d5058f2da4a259c88871(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2cedf626b6b19f6139ad6afe7f8dc36dddffcc0bc49a478e75b9081f23ad97a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c84edae1350e8c6e5a6d7ce19013da6b065fdf987e66bfa0072e06b75d3f238d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09b20cfd0c50fc14498e9021fcd638f17ed0d8c3d92ad7457eb3782237c301e4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc8803000634e5cd3c280edee94ce869deb89f0fb06895b69e31028f8d68f9ea(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c788871b7f9baf94472afb87e643b65974731f53c582af63b0a2943a80fb8d34(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBillboardUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__369d9e5f8f6af807674acc8e809d2bd0f8ff1c7d5e09faf5885f4c3a6336f57d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b39464b137005064a8b9d9c217e081281f590c5cdae05d3b60307804b60905b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a652b7855fb95a8cb17655b4ad17ddd363c3083cddfe446c9568653fb2f4772d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5cde19160fe910657c432a484571f1e9282b26ac2d98373d1924d350764483b8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBillboardUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1eddc8ab7bda5dc1856a97b6e9a0daa659f395c405b38d7f1aaed4d210e590f(
    *,
    column: jsii.Number,
    limit: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetBulletInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__375c3180949bf03ae6af872b4f7d9ddb2920a0f7d58d1704c7ef57cca8cebfdd(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__811086e29857c8b3719e5e2cba6615683b73eaca9e867a6c3468628b02637c19(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fffe9a3343bdd0473b90a3bdf089b243c7cbb96e9446df6aeaf250a6443fed1e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a230092a2d4df18fa0ad515b3bcbf8a2a49e0b4a1e373e69c55fbd6a38185538(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38f90e4da2ceab87301c6202b122e3a36a0ad0ce630e3da3ad40e299c6f719e1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b38125886ed6c5a2960bbd1dceabbc2898afcd69488e19ceb9f8facb03eb954(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__075abb3be3f5cbefd7322607a86aeac5e77a86c5bba4162bf43061e39f88f7a1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__138b65b8c068c3218c17625c7bc85e11aa9522cabb56ed8d51310450258af258(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__017406b33760a1933922a615ec82a91baecfd29c5a93459f71f9ab124cc3555a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__470cafcf30385dfacd04507d842b21cb1f94bb6fc67e062f14aeb746c78b6af7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55a9f9e58f725f66d99b4b64e4e9798dea17b085e9a108c7be2c981ef45ebea0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53c8428bad0a7bdda56f8b89ee97e39a38b7edc7662bfec4b4114726ae3e4c6c(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__527b0ab2d556bebbd9228f6884a42608445bc7ea5c5cf472784f6561f31746da(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63a9c0d9928a9ab8dbbc94b663530d73afca236cf88d3e4966623a0519ec1930(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d65ed26fbac9ef5fa13753f729a036af6bb4e73b27997255b46114ae403236ec(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3af6cfa0914e2ed3aa0500b243d6113869dafeb527bb191bab93c5750d123955(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c8919091d95ace0854a6baa56b27db28bf11cad88bcb58d2dc95f6b3698d67b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52923695623b2666c4477180141d21f759baab6478e264fbe793842d5c726828(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f34b0b1451516cf2ba3527a24f71424087c9ef29f70cef5cb46f16b2247d24e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d4d1d36f88ff89298bb10b00ce472f381d44abe7f24a15f49a60197787d325d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cecdf29e1b2653a146dd99c12ae06807601ff522005498fbc5c6d980ad638c8c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37895c6410a6932eeae0ee71fe3e46f973d833ae6556118033c542af3899f7f1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b11e2e988a8733056dc589231471720af0ff1399a100011fbc54947dc00a662(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f7e481c4309fdee9ad8eaec795a2bbc895f6c5482dbd1b1c0a3c86f01366f4a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0035eb2225a659256fcf53800be9f131a64b285a16fc7a406f34f2d4873dac92(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f8c1013900164c689ff9dc491192f4b59cc0087039e3b171d7280e3ec870ae56(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f880eb5fac1e8d858917d8ac8421a373cc9e5892c943bab4b1834f3dd222622(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43a65570bb1ef6853eb0e9013b7db439f4296cf906fee3ac06453cf78c65cf00(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8225eb2c73375d0d0058f089f878038eb2cbbff1f991792bdad9c8f7a4de2f6b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33596b881d1fabc80646991e8a30e324215482738e383d567c6a99c24ed99ef0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3bf67d1546b49e338ef39e8b0aa87136b0d08f92a1d044d392834f842009f5cf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3f49a4c6a263f8dfb73149c7bb2ff0bc7a37e67eee2a6bc9a075f6b647846b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e251b760dda30304413f2f031b6788bd3356a97bf1f9a326176c96d2d13db2f8(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f820da97a3ee393a4a0dace89a7763f4c869ee8ef52b367c6988607a60d51d78(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__10bbf631eab76e2791d5c85c8ef53e2aa87bdbfc9cf73abcaffa03454a84320e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80f6d93267f173c962f1b1a9b059a4dd6013c6cbe7433f0f8f9243d8771d0911(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db9ccb6a9eed925cedbe03e63dfdee2fc5bccc906347a7ee762e3ea20e1d04e2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13d8bdb9e6efd227e8da7e9d27b1be5af6e1885e76d24f2640f5621a31e1387b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__47de0c0f85c224336be23053d79784fb56ea02069912805ef7c8c279b96f801a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25f5e4ba5f6bc5f9f6b3d37e974f532d41a5e5f9e14a3597d6c5ebc6147fe813(
    value: typing.Optional[OneDashboardPageWidgetBulletInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3852ea534a10337bef8d8d4948320a74e40e6892d8eba9d3e90caf1733e347e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ccf70bb55a2d3ddbf1611a392159d3a4f32c3e0bd3ca126acce1dd602ff6b011(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c01d19b1a4ada2a2366f02c577516aa90772f1481174f54dcdd73eed3f38eaee(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d44eb5d97732f8a43e7e91ac2b25eafb65aa35e3cdc8b5f964908444523aa7d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa71dee47c241fb33bd778fe2964ca01d2f63bf794ec2dd8515da2b5e9a10574(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37d1466b5ed53a0a827db75cef6c6cacb917349c128cec6893f7fb464bb1134f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBullet]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__830407ff9c790892d7f3d865d2e12e4b5e33ea3848217ae530bfcb329328e5e2(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa632382ceb6ac5f9793b4e7f35a9cf5604ef143cee22563ad2f291349f31c6f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2234b67d237340a19724a04e952446ace59e80605aae39a64a31074f374cd05f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__539dcbd59fa549868ce6af9bca57a114e143e4689f65d7b84d82405966d13559(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf01d7766ccf39888ecf6c6ca8e82cd4abab920d2ec0ce2d576f5cb1f83d8bdf(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6a0d6fdec01fb5c0864a6d8e345e017cedd7856459d9c5546f8a487f1c362a5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa8124207fe863c347857484fdf131470697bcf90167e8ff518d174eed9b4bf0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7418bf484b6c56d82111e44b59e4537e944b10eef223caa83ba3c79b4e7c335b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e28b5a7c62256cac6bcea277a72794a992f5e547dc9038ac289e4aa8d94e6827(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__566768ac9cf64270dc0012afdeeb81aed713e2867f448ede93a8e7d28b16e73a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7ef039acd99a1484a800d026842f309dc2dd7772a344304840c835905c1bccf(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__78923789ee09ea534c17f58cae525ecc43b59da42804d939b6a15d3795a492be(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__792c3ac950aba5888296775d871a26bfb25ba1a9d46624603b38d24a266b921b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ada95c93219e5920f93a75e647759cece9d11689e95978a3d69b45ec7c79840b(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36a6b8f9e159e04f6d777381fe39c32fd94b8b512ce6d2fcc105b1e59682ee9b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c90c4b581ee4730bd9d747d5d6ec64f2df9fb1e849b78b346acdf9d6c87835d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f210dcec627489b1d501d6a9871fddefebe84fe33ef443c0282402586ce2aed6(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__965a10d73e447f440bf55ef1b4ca7625a3d781bc4ee05f6b87ede625ff640c22(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1bf1b1475d6686c642949634bc03f26c32bb321030b62c67fca07613c70261da(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72e526377e5a85e4424e837400a0cd83ca55a6bcaafc1a82e124fd6534f7cd6c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__560f598f65e293b503f3400f23efd513ab03c84628c075bff748f2b8626437db(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe6291172534a4935e303c04f9be51259616f8bf6923acdf77d51a4e26617015(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9688324f769486db222ce4e4256d2ed930d82e968693182cb31653b37b4d0a62(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e8c6405014a01456d1eee04da05211a16a3685efc875b080ee4d59a9142c5908(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9890b0e27ce7967366d7092fd8a3ecc9fa498bce3306101813ec5b6f771d90c2(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1455735b1d55f515c80ac57a0f92440b50a938c45b87d2239e2bfdac1a21e22(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9e05d8d1679ae69d97df88ed6561005dfef5f074929c60201d623fef70e0f00(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e328007b60c7b70f98a4b4b56e77ed83960ed63bc0d850f6ae8d963f51b207ad(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__343138468c45cbc6e7f46b8caf88b14b84825584e1040c2fde766608142aafd8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bee58de26af03df23d545c59f4e66a18f42f522aab486e6acdcb8fe787a27517(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a2f20afa667c1ba0025d5eb1b16d2f01004f3b7faa7149c8dbb74249edc4e59(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__598b53132c8c18c7b5c33d8640bb9cd9665b30b111b6f201f426651220d4eb06(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__79f9529f058a8c1b4b1f3a259b2f854a76f561ab6a069941bcb01b7625ad3315(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2cbc29faf7db3077ad18ed7adef206724bb40a3ec0c0e2635baf803de7c24b0c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef5896ac2635ed114876b278ff08cb66c4f23b1d69401266ffe78c5c4b89c826(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5728beceb9f56953f0d183a2bb30ebe4a8b6f9471be0483a5ad6df21e99f22cd(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a91ddd8d69381a842f9e8b16f44cc9c751ad6a3e9cfed50a4047f1233b773177(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d966aaefdea751157316d4d8bdb50d06c9a59f2089f6cdae726d2025b06914c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d2054c04337a4da8d7008abb0c08915f3a55718e588373fcc1dc933ddd1ac0f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__121461dfcf0f6009638d5315e2b760d253ce8e1db8dca3855ac882defed4adf1(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23f1eb37da245f2e075a8d4e108f70114bedb75fc50586393e1de31b8b51c2a0(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ebde968b9e629fcdef60488d2d60b8ec38907c96327432783c2fd186c7b98e9(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38cb579f1593999e34a2ac80a6f718e6affaefdb53153397b581fb23b2da3dd8(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d99494d921c6b147ecd05f179c6ac0c0f2a21892504ae4a3118cac8a8512e8e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2b7850fab8e4d9531df7225e0afff389f82087fc44c66a9afd7396ab056d045(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9c70a10ba16ddd6b3b1ec64b3226593f3be610f126ff66bbeac6462b7980018(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a50099ed247ebe9901b5b4b4c7ce3fafe5b9bdb09b181131ce7669e48ad8cb0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f9734507856a058302b91d644b544a4153903268d88dcdfbf1b0b666cf060fc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0fe19dd3afd9bb3c6ffab99310f4916094d6e197e0d340940bdbdeba3410d6dc(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2bf627d2ac0ff13a68ce47c0a74b6cd60ea857c6c812bf5c7761b341f56040c(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a73b72d9ce486a8b0a82d903aa7d5eba9c72cf9d75546d0b7e6471a3dad73d9f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ea5a899a8dee914d61f6586ef998506dee739f05e07b2a761a79515f8c1ae23(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBullet]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27a8f9e2d01f4532b25526a4a4a66641badff393ce77706d63282d2eedd43914(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__399a3ec56a4befcb61dd53456a2a9a0e2d23d5edb7ba64163951d396c6248852(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4a48cc1dd5efd88db08b174b5519b4d188d2ed28d343931802c6832845d3a33(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c84a4106107ae33b78e836d249176a0852603a95c69c8df989052206c5613962(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1caa10aba2c77a6eed035276eee6e77fcb795ac6c591fa12b88ed05f12ef8a7(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7151104288984c5181e8ee344905f0a85e646cb737fba70507ff38480c77288d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb5a0d1896f90ce5ae93711ea29787efe3c18484e69d1db2c8d4de39a4eb163f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f77a042de46ccd523d7d07ea4f2f01eebabda5e2955bbe739952cfbe9b2211b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d66fa2c291fc8dbaba482f88560e87eb8bb015fa467b8217a590316d22a0399(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetBulletUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afb5ade8ea354ea50a3354acee4a4ee8547ce70e60afbbb3a4d983d874095b0e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1158821835013ce11dae9dc4ba80fddc90eb61d12d7867af3239684bb6703936(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5056f7723301000acbd4b53965de4363bc9a8412cae2d8b911b78ce43a4cc3a8(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13de16beccc33b8e87d9cc6d6d15a9da044dc18ac13391735afb1580e7c8590b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__378c98a562efae4b0897e377a11731c5cd986f7d7c0fce61c1ac2928728f1726(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1bed55703d8a03d60e86da99bc388208fbf08a948dcc51e824a7e90123b54546(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__045106f55a9856a87d63cf732373b5a47520178c8ebc3d58f60ec3be9ed8771e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d6bf16af6e653683bd10d211ce4c7b7aace7888ef9d3048a21a4d06386ea232(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__435a2b478beaffc5d01f48b91685daf30c5db7c42feeb257c61525173df8dcee(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetBulletUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7953a8aee5654be9db94a910f2e1007c6b95db14615a16653e2a5b17eb2f4d1e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c371fa8d610897750c3894fc9454518ede75d0554f426df29aa6530d5352c75(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e014bcc82ec66f64d1df531b3732a81ed93e6f79705d26769120d254200b7167(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d10c0219cc849b4df058806f4184422d19a70112e1b3a594db7687bc3ca43ae9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetBulletUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ecd9a6b0fb08de51cb5866fa122f575713c64086df42aff6d60640694311943(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetFunnelInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7f44355ee859935555ac21c58f63cc9044d18894f46233b486f6f447f9a2ca6(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d09925cfa95c14057a83feae81f74ed6f85c3e813de7b45e2e8b86c4997ef498(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f24322a42a3c2a27a47dd18babea3ad83a8b16d85d4101d46a450d6b0a55e3f8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__625e2cdf0343f4849accb257c84b3f49d2bde4f7b0a382e387ac1b8388c42242(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5b3f32910a3cf4039fce290664acd496601fe099725d83f4a4fbb24dfbfa315(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6aff648ce7dd827ecce00280aa27f498a74aef3f5d87deba54182defeb50317(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76ec7b6af766cb0d882f857899926d441f7b280add088c328040f695b1465a2a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__086f223061b372243ef78921a4833e52084c660c3e6ebd8c61456c14175d4c6c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8fd0b0b314c11149d7dddb4ac53e667875353f7b7a106a4d8027e3e865ffdf21(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d4011d6fcb3fad0f94ea61358aa06ed864e32bf3aa831e923d98d4cdaa22e1a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63a23ae2ad33aae179a133378a37ae7b5d802c81b613f43fba2598fa7fda34a7(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__286a9225b03b83d5212800b22a8081a4f9f5a90ca3794632b10f68a1be1d1ff1(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f171071a7583bcd76faafd549db0c2830125d83a37d0be4f93ee7c9dce1c9707(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2555f8c387e5d61e48c239daabef2e30f60cf1d17bcb5ae2ee291beae38c97b(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c147486bf5f9dd41ee0189c7352ff8e9c9c0c7be1109716923cf7927b781e3a3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d367a64528a600ee3e36f43d33f82f3fefb2f4cd65810d855026f6fc1bc3d37d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__770251c5c4bba2c9d0094504fe0b90f0c661b7aebc027285654279e6c3a4de74(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ce1e64b5650ec0cf4868b649fb353df5882c3e2a6b430061db0d958e20e69fa(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2ff99bb6da4f141680cb4b8b3975bc7c101b289e1071c3938f67bc2669bee78(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8671fcbf1390c8161f5264a1c0d14c62d07be52bbbef816c7118d419c4e27249(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0fc63f16fd1403b6cc06048774890813ba6b2953c25c0c98f322afb6686d75b3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa0c8e49548a9d55f4ca4085833d58a89f9be4fcbf57dbaef74dc512a5b1a9e2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1cb9f7d17d25b6918bf1f9d0f0899927552e6ac9c3b253082bd4b1ebf1dd25db(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29d05adc71097624cff48b6d1755c39589ab14e5a0be93ace52915c04ffd186b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f4b06bcfbac7eb3786dc69f40c3d8e8a01fa9e39ee2eb3c08e4a5a2ee7ed30f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c59bda0853d7eb84f0949b9347d940375863d03c97ee4ee4704dcc7576f7fdc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14309174a74c4ccdb5f1999630bcc0895a444040afecc3132da68bd7a579e6a5(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f1ec592d77a8c24a4ce57e424c7e234af26b7b819021ed553bb13d9a4089040(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f01f0544b5d47e160cb99c1580d8c21c3f0d6a33dc5fd51123bd8d9dbc00f68e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b8fbff832200930b03fd963307f3e8e2c81ec1c0e8be602e8a4c25ebe78a55da(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81f4581871b40b83862957e81b0e4ad1097c373a29b3bcdcf6a38e4d4a5f4701(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d59a671ec20cd1e213fbff6f5e25097b0e5d293ce1024a7fa56a0eb669fcf5e7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e95078b839ef7aaa6a353d829a0e03784a62a43778fa1d087d1a1730224089a7(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e9bc239d286e48424524c2f05cbc28b88c68259ff6e837148e92d995cd01a80(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01f0e0e24942b8cada6e9cf5aa0594810e3115800e5d911f61630ce418051edf(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55a2a35c8d5d11e0986c58dab280e28dc73044f4b5dede7884c2b748bd9df052(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16da27e56b030ae88c2445640cfd04194494db7df4d2ab9b1b29bdc198f7f852(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b528e2955e95a2639bc642bf64a0a4880d22e2c71fb38a421150506569b24148(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0493d29594853c930ce3d05a40d031a871c88be5e1d69d08659ba77933db583(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6539d599be8e7342bacb4c492ddb7a7b9e2f2d2dacc505bbaa5688307da71f48(
    value: typing.Optional[OneDashboardPageWidgetFunnelInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21fceba0d6768354f26a811503217927cf9cd31b3bea45ac6d6e160498c9d54c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d0f2f6545b1f8feaac3b067774befa68e457cd9399d2642c385c250ca011ba0(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5361d9a7ced494aed67622964bcf1f686da82addf31c1a289df6a32043d96e41(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dde6feea9845fdf87fafb64f8cfffbddffc924b2c6cef3e951b548b06f83d9a1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88b6cdb94df3888c22adced4f1661a7add5472b58eaa84d640c8ceb428e7c9c1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76637a88105678d2f0c3f437e6dc18564e20d126c46e46b21ebc6fc1eb3f2a9d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnel]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c18599d442fc91055a62517eda1609f83a90bff913719ef9f7be06aff0640fa5(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__304d58510782c486f012360f9c06311ab9b6f7d832a6a8ba982c00284fa902da(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a42fa844c0b2250ee106c9b4c9fed2b4d76a02ca0966047fd3dda9f68f158b59(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e018ca08335cba86810a716eaa08292df209c1fa0abf06f4e4d2d6e8311fdc1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63ee0c2ea00364fc8e40043b6d96de6918a8d77b54b57fa776aeb946348c9640(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c034c46b8e6f6ab36707ad3e3f44ae6007c429634d3164cc840454c033caeed2(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6a0a82fae381d175bb094d91cc4289b4899030a57324be951223c2d56f5ea8f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2083d024a1fea48a05e376d09dbf600ddd0facbf33a12a36d3957057c19a4200(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__617570785272fc9cb485f7719e4d7052a00a05781dcfcb092a47f2441fade482(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7fbca120b6c6f516b2cd2b5c239538dcfd595aef472707099cba7098ea5a48c2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d79eb646d91b56c6df7c99c2a364ff4627da7bf21e1075e00317e7b92b39ee20(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__beb2ddccb7811601f8c64a0bb2383e16e9591169bf812cd39910823382269871(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c0bb32226dc75976f68238a0fd6e18179d9466d44a5fd503418a4982f0910ac5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d08b43b6e0311c0d2ac6a469a4f4c6911ac28a559045b2f33f6f22d3d40a5b1(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6bbbdfa2efd4ff7566fe2e438d3c227efd60b24a07bee3123c4b3b74601ed7d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc97f0a780ae4d9faaef49aea74d01877f4f9ac81523e74d753e0c302082c7a5(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afeedf3f2a72010f07fe0dc5b4864a9e1ac1c1b172a90805c8ec574d49125ae1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3587ef1071235a1ccaf56ebe45aaeed67261caeef5281d3457709cb8feb0f397(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__903c4e55eaca13efe8b360ae0566e11f6df8fd25f8c949d37dba58a0f459b195(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2cdf19629b55663bf85041b485dfa6dd6d58a74ef5b8b25cbe5965252f1cbe6(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4738adda2401f71040c0494e241149685a6140cbab5cb682d33b8df4cb50749b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__040b6fe00f7061e82c6f908c7e985b11226f72e67733d17ec969753bcd3d2091(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89458db9a02086eb56aa3df45d2ac2f06afdb7e50c70999408d91e2e8a491686(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1ad947d37e3e34974c968ed85338c23cc7fa52d16be547874941ebeb53012ea(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57c5cc910f341eba9ebdb5239247b3ccc8d3bf604202fe52f4765c4d9ecc0e3f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eaa9416b661a70ea421c2af6865110c40f26e899866657c733ae0c7c6a097bad(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4581c3718d63e1612b8e61ef7410c562e101c2a29dcede03c51fe4ad27418e9a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7c1d2b0498c81bca9fd546862e72efb962772fbdf8bc28dd119cbb8cc43eda3(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba511da48cdc3ed7a7200c38a4814777c0b57955f4520014b3e8ebfa87776409(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc4e4af05284402a00fe51ce48138c2cde5a761053f3c2614006d2b41912cec2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45398cb2136b0eee3848f808c340655703ab0cc8c1b2d5116bad1626f9f1f9d9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e0b52f7ee13e27d143d96cf7e65dd09f5fddce4c73808f88468af1f2613ff85(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c77c19a1735f376cd9c51643ff2b682d4c3407eae0f4eeb00f0fb46394ee271(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7212d0d1203e0b5cf6564bd475e8784e8b82316533aa1c6fb2a4fa1510ffeb6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__150ba1ee3efc27bc1e44a5d3f5952945cdd2d70ead12e11d98188c360270deb6(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58780fe58d1ca1310d5be9a55e972a6c68860a5a9987cbe9e4cb90c2d8e8ed94(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__137909aa4c853fe36b1cd736f01f94150c0ca1c7ce7872604e0f3d73cc821bbe(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__793590e33880a3e941d8ac7c49189de2a591f18eb06e8926dc545355168061ce(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b35903ba2a68160abf7c5a2456e5f81cd962c73968f49a99e074af0b352c59f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0aa2a7d357a9e1173b0f806439414ad5829fcf17f64d2a4cc971fdea7fa8f0d(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3ae0920f07552a7eb268a7345f7d5b056eb6c852122e7f0ea78210814b30d44(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8342254ebd02fbe1767c7ec5272c45c0e0657e2a8774de30545ed853cd8c463b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d24270658967482c61afb5297c564dcc4550cf22a24dc32d514cfa55c1c0459e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3dbf8c8230df7703d92b2ef129bbfeda9e3e8c1a68bcd879880a29a53bfcc001(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d846ed9d6c605e0ce8a18c8bbda3dd1f1b3c355eaa03709bae3613aea69c72c4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__79d8c46fd94511ab72c2e47bf9c68a68aee4cf05c061644dbe5e5de5a496d566(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fed1d12433c0c6ce3e4e934fe86ba5d7181916c9033f9973110babfa31dee7db(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b87e22b23df9145d3912e5597245e5d6de128baa82a033f32a03134ab16f4e45(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21f3154426217d7bc7f43d383c6432077b2574aeeab0d90fdb45de0efd844534(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd44c121e76981160b66891dc69ccde9d2bab4c1a278bb46fbbfd09e3009d6dd(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d22a4e82cf4c04d694410031fe7806629d618879919776ed89900ff190990c5e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnel]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f53fbd080c870c0ee8ffc537b87d7dfdc90b11a70569df24622c57e31628298a(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a26b2dc01a67cfe4908a6522a3177350b80277c7d3a10b10915b9bfb43bc3daf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71d405658e3c3bc84f2a8dc53b5643bc92da2204dbfdbe689416c889b2ceb7ec(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54089906551bc572c0d8a3ebb7ee76635d42311def867ce33a9ba759b0fc7d0f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46b146fdfa2928655c349f18a83862c2c825389f1a4def8fd7082ad65e951bcd(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d243624396e42554c0c2df270d1aaf38b4c454c700a2bea02ed30111866e637(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9285b790c216f9c7932b9e7f3b6850c8bf43a85beda5a476f7bcf8d9f55069f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af7c6798870d8163c7eb01fb223b30d4b3b7f16081c907b29fa76b101860fb03(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a90d999a43d82510d72bf11138ff4e28fa8a8e827c10f15f5a7b03af56267d2f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetFunnelUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3567bc6cddd58f3a24490e5ae478ee1b26134936fd7e694971983d3673cce84b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61f2b945a4b1ead20eaa6f5f740f9d42889557c2bca355bd6e569c3f7dcafaf9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7fbe38e22b0413db8a372dc0a95855290e623f8495a4aa6ee17c3945cc9dfd8b(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c90e8412ae295431671867e533b166a5fe8dcd9f0d0ac4ce63a260fdcba61cbf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4381a1ad2f39bf1e2b86525efc2c10ef0b0477ea1df8dc950d260a39db6561cc(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f11039f360e969f3755c1ce9a947430b08fbcc9f49578c5286fda3d901d8ed4e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__710898e2a9e1b5726b6f8f275e18f08098d477bb39d31327c4c7284f657bcf81(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88aa13f3e77b09d0d0412ea289efebac3b2044bfca88fbc92c9e65a222900acf(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7498d7de8af74733f60e4eac0f8407436d39430a398132399b9a9737163dd32d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetFunnelUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c73d7601e17738d47691fc793ab5d42e4553b40acac3625f2047eb969f294220(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d6d71833b3d1058d266fec97330c804fde3ecb0d0f48ddc583342043e91b4bc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0395d543167c89b747f5d0b880e564ad3c030103969499cf8d35aa8393af4f90(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__296091113cad90ae229fe0157a2e0abb49f3aa488c61cbd611ae65834e1a1b43(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetFunnelUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a48668e851711da36e9562bf945f2418c3a6c87d91621b6b38cd7de2c3cb5f3(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    filter_current_dashboard: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetHeatmapInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    linked_entity_guids: typing.Optional[typing.Sequence[builtins.str]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfb2a129b94eb23d499b2ef28c1358f0a7cdb05e17df928d13c5cf89c26cf686(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__752b38359e280fcb67704589b985515e668b796e9c98a553eb64d5b3d2763a10(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d493d30cf41162cb0d90b923c0dd0617e48ce7625e5e899c9a531b1513c51d28(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5ff27f68f7040ecffe679af4e6d8f6c03730055cad6ee65f12d37112b0e7c16(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e59db47f7bf444366412731753b97ce8b3b8e8fec6f3194ea34607dcc17dc471(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3d99d62ad19d7a924dcc4fb43994937bc81e6b1fb71b8bdf1a167cf34b36dd1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ebaeec17d2d297c07e17bd0dd04bae1d5616353b2ec7823b5eb97650d26d3793(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a61b7f4ef8f4d723b3acd53850922b507a870be151993cadbce187a2c87b3b8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26f20e3b2872d391fb990a155a32ede1875704aa3cb09b5387061827e6682929(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6dd4b3f7a4d19ef3d3e497cdfa6d3b47bd4f6267a3103360f4f22ee9bed16925(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08c6a3d26eaa932e9a496156febbcf4ecb2e92c8e82b0eb72d4646749295d7c0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0dbdc4def8653f566450428803e91cbe421c8d2fcd8f0c48a83468aa974db45(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__624180519b4a04ab64eacec5d74450f5ac5ee394129f672cdc93f5bd70e32ea0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f447e61b87e26fd7b4226f7e539faa1c448cd98d9c1db69a8286af8b337c2a06(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a9b9662a16c22fc9081b1e378ed6985e5a5843fa7b77e61b06d20f7fc4c7107(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c07dedb8d6f580ebf510860ad3063bf19c388aa19ced3636f356ddf871241a1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6d76b5f7eb2090dacb4a42f5958cf72a11994d17007346f59a6f919ce67e26c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b61b6f10288b61d3a491ec375fd0b893d7b09996e248e7a843064c80622dffd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59a3d6b239ae4973dfc1497135413d30d6ffeab6ef61fa8b25ac35117fd5c7a9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__294584d64fc9958f3760fba47de3aa3f263f829064223c874beec2d92e627564(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e83ae499f56e8ed0c4c1bfba4a4f28cb5c6a5bc0a6f5d2b1f77525a491a9b15(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c1377a95bacfef4fcc9f7b988e108b7d723a51d6902dbeac3c74400c5bb2cc7(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__610c215581e402011d33fd14ccb62ae3e624d701a912b0806abd966c7dd2110f(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e037922843b3ab4413ce56e524ae8b590676d1890d943dd3576fb9ce21a0a3a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0706860b27644c69a1abcd2ced70c5ae698ed4df65b4e71bc62debf0f216dd0d(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__681af71ecf9a1b442a8deea72d5eef6b8351b599c0504ffe9ab7266b0ca9d22a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd28cb852e2b829a8aae2dc7a568b6a2704c7dfaca10a8f8a61f421582543669(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__742bda594621a170b804964459727b45493a350a427150c3e8ef7badea3a022e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1fffe13a07229cf98f2b8134ff4a293e4204594cb281fdb3edbc6be750d03d4c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffc25ae61f3ad22faeab62eb7c6d0c28c5c18f083dda582d8b1c30e7c5a03b73(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b82dc4e9e4401491621bd6680aebf15dcc81c493133bbe5af827823348ab4b2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16ff7427d12fdc8e616e19656f05699529f7b936ae84e059dfc8036fb871169d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6592bcd4ebb2d86fc84be54b76a6a01d0dc229d53d3bcf9d602863dd049dfa48(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f3ff30318945aaa73de2bd3ea8a76131c5ff2f02ea754f26cebebb5a0f79bba(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fad438e9cfd3ccbed7b41081a9b17c10cf4c8c95f1fb13d7a809494f0ebdf4e6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a18dea5b9006233a85f336326f4b63b099a066f4cb7796fb3991f4263a3e593(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a4f6aef23a7d0001cf00afdb6a294e28922b40dae65aacec32754c5af5905d3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f932e2ff27c6a955c817d97e1680ec8e1cbbe0c46b218406e3e7b5b359a62ee(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55dc945ac52b2307366ec66efd35555a780630a31d0161e91e6a95423c64abe9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27fd8df132111454d0d946426b0dce3daefb184cc4bdebf8f33e347d42559fdc(
    value: typing.Optional[OneDashboardPageWidgetHeatmapInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__51caa13b0ebb5bdb86ea44014acc44d3d15ba1ce9bd3d45c9176913accf7d07a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9f49a9514adc18db6a887eadaae2bb3210799ea2d37dff953b5ebc00c02b906(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d6b9c8c9f6a45cd39eb97b05b41c146b2e533ba170a55cb90f3f5e0111e0d0f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e42431a8819d7cb334d968d4d03d1f384bf4c4fb29173d6b9cc2e3f1d7960de(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f919e8ac7d53e5765149e96db31be15c67c2c9e47ddc09c84c17506728a08e8d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d23626f4696aa43f80dd511ada0bc63dd55cf49f173b155e41ad5a964f24e96(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmap]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48f6ea791b34a1fab69ea90cc7a764d46c48a5859ac6aee2d122e71d1a6e0b49(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e982f44ccdcefa53701b5f47c5822292ebf6544e48b8780914f24b5c81251695(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0872650b35cdbbcd0aef59b5ec366915af24e187dcdb5b3e0546c0220e346138(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92b032d7134f4987cc5efe53eaf4ae3ca3080307480f04d63237359af3ef8ee5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f12c7348622730b8456a40e83aa67fbc3c0e3e9244f159f02853dd6e61f1ac1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b06789c59c116f26a5c79c03e4de1cb6268d1da8273e0183e9dc3a3a36ef5f50(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__64491ce37caedf0753c638035eaaead850a5ef3535af87b337563b13cee38395(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44749baacbf0262c14a862db751c5f78e4c4ff426389a467a66b410680bb331e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07a47a015b5eeb328ed06dc15ba5ed4bd5ff30d0e9300233f866e1b21cd8db04(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54ede34d867fb31c22914653b4f50ceaead4e29583161ac77e97a6f8531147df(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df5ec99b27d6ef8cd032b44e314d88089262af84fd7953cb3a6459576557a940(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__862bf6a34be0de448cac39d3040702b0adba33928654dca21724a4cb5f837438(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7379466b535dd36b56abcc940e29b11e3f92bd3d709efea73ddf5ccc2ed91fd1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__995afa29f554e4b6f716c9fa5f0430f3907152e26f68d44f635d5aaa850d9b58(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63f7148351b99ab8f9ecb5b7501db898c304eec505f8419a114c3421da92189d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70035210cbfeeba4883057c3ce5ba3bdd5459761b6210abf64d73b0bbdfaa475(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b251124e8a70ff9cce9f9930616a70aea1417260114b3a0167cef497b9bf2bc8(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a6609bc9dc00e1d531b061861be6faa2bfb27967f08d232e71bd5dbad5fa9c3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21452451f10879650e4d6ec98b010ee6291f2ad208f5c131fa146a6871d0e6ef(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32d19535c3eca1cec8d77e358c3ca292640087f8a2de7d8f8b3ccf019b7fb70c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f05e8753088a08b26971b4c8315fcd342d7b14398ab7d2f022181c30debe1b38(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba734a5609f90dfecd085a3e50684c3bdfdded005effe4abe8181343cf12ab5d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ef81b97765258e72f1f3eb9c2b35174e8f5662a887bde24971bc271538266e6(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0bf7682c3c19237226bf11d4a69084bf896abd4b100e1f71fdb4c5b0d37d0431(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c22c646c288feaf7a0cd07bf6d8d544c06ce0f9abcd4a2b72441bd3826e56936(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c45f755d69d2aae7c4995e342ef2e06ce71c24adff998d4b1a77556881e853f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1233351f5eefacdd85838d272fee2e86cb29c4f4dd635548478b9b6a0aa56ea(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e82139ed943ead5bcdf6039a0073125de9ae9a0194c112e34330b78f087afa6(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8372ab573298abb715a14849844031fc0c0141cffe3029fd0a1fcabb3ddbe572(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b78ae28c070c3951ef38a5f9ce454956635de3baca9555bd005a24c2d695d109(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d02d5187699e94f0e61d5529fc356a2795b4a3cac66e7c7759acf5a4861a03b2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdf529f9102c47b389c0ddeadff566c31d234598389da3bdb28b840b148b8483(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f943efbbf0c4314f98c014d56496d692911392ba28e435624dd324ab53d6d123(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6aee874e2c9d9750dcb6f1716b207575761476123496be60c7baae824b1818f1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00164ea48710504127850e63dbf4538b392728673f33071b01c5379d8513548f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46e246f71a5478067fe056cdda80295217e80f606292b5b287792908d21cff16(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1cb92828002a2e7bf6629157c109bb376b5818eaea46a097ec37a88d5a2c953e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dcfd227c4de0d24bf50c0c7a92984f33138fa83009d4be79d5f4cfb600cadf2a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7452d477d5f507d43bb5ad7ead0df437904a0ff8597f0c387b50a0606f09a678(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9abd1b40d8a1f78d80eb6fdf923ba5203e87bcee56bd1a35179085f479abebf4(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d22222432ad2e73b22f9bfe07c7c47f8dfcf89aa645fb961c29bb58648007f73(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef559e2bb6d62fd16c601730fbd291e8f5c99d289f0892edca0d0f45f27c2e45(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99adce21d444150c4fff8cf2b58731b7762fcd4eb944547f0881621bc76831d3(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3532fe23ad894dc35fd8bee4d3cfe470d7a56877b192a7c39d0e6002845620c0(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef1f8211753baabefd80b8c7bc3849a91f28d17e05c9973cd445d423f84b8021(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6cead5768d805a654e389dfe26c11ab254388cc9c981ea7f61e32262290a8b8b(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0848dc8be0328bdf349f635313c0dfb9a61cc8cc633e52a11e3099221313b6ee(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32ac7657c875baa52fde7960de56b697b4b03df37f49da61b129b5d5b3e4f9b3(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6e22bb6432ccfb959a2da6bba3ca2a5659bcb1f2c67df180aeff59ec752627f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec792db211d5952157b01d8d02b1b7c458cbf5f43e1e0032ab41edf563bf6de4(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef0301019c478856afdd31dc511e8b8307fba8f22e139e5be7266149d468f53a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bac29c0d3c83fc418000f82c3a368acf1056d070c8730ba5f4e508361308b7fd(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f430c66f13f645b2dfa7fc39df2e05c8e8de8852ed511e6acce23761b52bef1d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmap]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__736abe77f4ceca8106db75de1a9db5a382276dd3a29f8446aabc45c80425f2f9(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a707f485daf7c1d753b447976dbd47f9fc15191b1371b83a91fc106199e1ad0c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93c87c24a86debe511f72bbd54755b5fe6be1de418c9f2fd75be3ea1f1dd5e8e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c78937ee6c2ca15f06d9f1a03cd3f3b0ad9abd2b97b34608556a36d8609d073e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__accb9218a0da76a12f4b78d76febcf4a5a54bf1aedd8048f2c8d6496ae1304e7(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__986e97b2cfc44e5d1d8e7a96d8f5b74da017b7d06876c78eab2c7d4b64f62782(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30c93978bfb3f13e9e26ab707fc09ff4877cd921136cc2723955821b937c3ece(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3ec5086222905b7d6bc808b934746eee67a151601f70cf91646ebe2cd368434d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5cdd2be041d26db03e27857e81a5bbbea8157ff1f41cf7140ae1dc9a701a77a4(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHeatmapUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14975c0dd9d0701c91fee5dc3f49722322b534479c1785ed80e2c6a354cfc517(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bb8c76b8698b01eb27654886a132a1e67a450612059036e2ac063cfb88d4e9c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2dc70c068462444eea504e9b5f5cb070e066f89af107521d8edee6ceebf9af2b(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__952368d72f19f043b4fe05c54926a0cb79141d5728b57d3a78a126b06879f7e0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84151f5b0880f8c864cc7d21473a00f498f980fd4042e02f7a9262d1278db198(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43329e8a65ec16bc31bc6baa371593753874be489ff19d2a2cbc36d148dc7f12(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__396327179cc5eb0001d2126adf8b4ef3d8020ad242ba31ead87542c5b2c2b615(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db0353be3c58592de95b5415f04c712e63191a60aaf30ae563f3a727e331fe37(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7514a8b3dcd3a72cb426fd9f2b40b3b4a282195248889b44b744feca09cedc08(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHeatmapUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a666b25755d65df406599173d84b937abbccca349c3809a28ac2e851c3106c49(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82514252a9ec72b23b36d674cf3d8f49023d9733c7f48f47e4786f64e1e8c5d1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b38bb0f5a2f3ddd4a89af941a54be3ae9088313572f7bf5d6dfcd9bcfedff68(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd88a2da4dc3ea012faed8637bc2d96400a2edf6cbddfa357da4a031729a39dc(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHeatmapUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81b4aa18dfd455e9a25c069343ad099e643e61975ecc01a5a7679dc43460b07a(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetHistogramInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e74ce41a93874810262a455b1e253d1dbced3eff2d058ccf1177ba898515884e(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b224ddc469d72e7a4f378991bcc29ff6c2286e688ed559bd70abba85b1d3bef(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__79e389b1a2d3a7e410f91d2b5c7d6ab1f05c0741f9b87cdd8148d36ac5b5a4e8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a46d4e69ba1a5bc6c1cbc252236adc67add74d71814b1053435efa2fdff28883(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71bca1e5f1b20745ed9bb89be2e9869d8a25d2516a9a2c271f915a7bc1390d61(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef0f38cb78d874869c50ff08d95f881f0228ef25e365e0fd11927f3b04c56cca(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__561454c97c253360ee33e702405867dd813776aed3024e370ff95f969737516d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__edbde1b294adcead66db33d5fdbb08de8512880bff313a00e730935b6df0730a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab0ba8b22d05816c46ab888b773e5f08a8e4a9dfffc0b281015481d030fe8224(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01f04c593a11e949565d6e8d6e43a82c646d23a77a340d526eacd9233f1d1eba(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a8b6e276c4aea36c0e114d14bd58ee2daffa9761c3ca74da1b4c9ae2b786bcd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8afc9ac0de5e6410873792fa2a8576f17a62fe7032fdcaca4aa54a19ada7e2fa(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03f9e209a076723872afba9399dc4de4e43b46bf7bbf0ea9c9191f423e0b9fcd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81991d504f6e6d4a3718cd493fbbe01776c523b3e956f85e64d16256a490f524(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00f2042b99f9a2e1bb7a5b567e03b8db02f6621276c22cd858a5884eaa2a67f8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3e7750c4b0135042c116873c9eeabcd4597ce875d964a5b4705a621c9a965d4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b93c8c4376cc796ffb38830856eb021bdc05cb9beaca557af00e1d4bc9f8008(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abfa8a061af75add47d08e680d31d89b50c3406287c351f11d02f062536c568c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f0193169d5d57062298cb56a281ad6b854378d131657fa3a592dda4596440cae(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f046a31fdbaa7c0efe28a56a60cef14c0af12b7ee54e9f13827c77669b4b665e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a0afc970f9c819c9a64e5f8e5a7f9a076209fc98639ca53d5771bbc37f62fd0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63d53aa91de6973dbe819091f1be0b87f7039cb03a108e224fbf21a35fe13374(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2e8079a03ba37e06f9def80fd4014140a599ca1bedde16eb92c5f36c328b0a7(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9aeb33e38f383de4513c0023477454f2b2b4a828881dbcfbdc4dee9dafe41b43(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00c432ec253f9b298aa57ae3b09ed5f9063981bdb1ac9abb8edae0c128c09c84(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7904f3b89588423224d1385db4a925d571112f3b2575efc0433c7e3e2c6aa1a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6892d484f8f22b27298b07b98abfb46cddc0126b7cda78e47ec7770d75b0920a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db9f4a016bf0e3a3b01cbe042d5a79a4fee8d74eaad8a396c289dc3cdb3f60f5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b071f703ba78f960a8fbeace6dfeaa221255b02752e8a9d7888a4c189d0958b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9092f5d64c2b1fddc1e825a5e3527fa6d17d3fad43b915f43ef079a00474e459(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b4b17080c79edc4ba8d1a3e120cf5fc59fdd44ba46ddb5719d5281cce0077e2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af0665adc530813d8a9c30ce9f4e5e45e1d3f8da7826ebcdbd63ff9276fd4bdb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c47237f49a87a5ba3312f70f6e7b118dab8897b27d0e42e21179c31e41c362b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7df054ab54c82ab3142e1a335081181aab41262a46887d5875d4fbbef381075(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d001961f8ea62d8fe89103fdbf0c9fd3514f7d23f90ddf6d41d712120137ab6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e52c3d30b5bf2db650fd875b8d4b6f6add489ff228f52765e763ea2825f66309(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e68db68bab3a3f8f82868fdccfa596f7b3564187ba01dc09506a3bd8eccce68(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b11de76b2ece6ec8c795d5a854c4c099d14dd6f86f27abbfc1efd23c58758d27(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c56a4f257932c3a09f6c750f58c12d9e461e47bf54ddddd450fd0da39553d52(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__747c405545e7f6509767b85e152608652effd03af58ae53261bd6888e77c82ce(
    value: typing.Optional[OneDashboardPageWidgetHistogramInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bdbc753eb485882022e483f950ed5ba3a004e02505bc09d3e24ddf7407a21e2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__134d64b2a4e3e32fb17f43e23f113f4e6490778b62e7bdc74c961712e73cbfbd(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__551efabbf8b6c3e236c38bcf66f4df5d6892cf5433fadff5e5295c948bcf7885(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce31c80552a3e7a4946008044af99b99c58e449494f800349cd5fb51edf24e5a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab1abeb843fe9809ef99f6f284fa54e4f2d0f1029dcc1ca070f624b41110ef65(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35da2e69f7f8b923ace71d42847ca72cf2f6b4f49c50eb2a2261e60cbfb9e7c6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogram]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0960a9b185a5c7ab276087057011e25a6b3569b169865dc93219771e6db56e0a(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__477f5b48f4fbc6126151ce433af47e1d2b89e6c88fccc9b2e17a80cf9cdd0c24(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abab7167b3b5672991d21c8d78b89291fce3d7735ef11e293c8193b244f56823(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d59e280929e547b88de7338a57e9a1dc466856aa357e103ccbf1d73e28d5a9a4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4781ea0ba02c72c39a65eeccc6b8907b94845db2d58afa16d818a823b56e85d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0074345df9f11abc8d5c6eb57be30a4497518b450bfe87742be670a11803986b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be7fc5e90430d1399f0cf7a3522d237b3f0502068bef3c3db2803fdd6ac1ffbd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__539b0a13f9d6f024250eb539a23601702c2200b4dade882c6a8a99d8f23cb91c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc0aaf10599f0bc10335914ebf8fa7b3e9c322e21fb4d8b1aaa212410c4ba438(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c93e0d6b02564a053feebe4970e6c965ed2788019fed15f03716775cbe98031(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6300feb44433e811c485b5f7eee5ddb0c090d4fdea770ceeea15df79479f1ba(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b34d21ae929b3e238a130d183cba7e12dd46e0d02532ab9b5ef0b6429b1aa757(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57b933fc4bc67043ef1a25b00a3fc499318dcbdc4813256e8664ec5e10f3df92(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08a50e2fff5d815c63bd1d97ec9ac1f09b811f2e81b1b8d410383fb3351e556d(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c12a18cfae37e4923b72705933e07e88bd49618ec53db04a33adfb4ab657c751(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3a472ca26ed937c61cc6d0c089d1c922bc501d964b3b80424bac4dda9460b0f(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d362a9bdb0fbb29b0e8c557fb93045e68c39e066131df2434e230d5f9f0d4bd(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__102cda33b17a878a221cb7047ab3d246ddd13a62a12068ae9eec3b7897455f57(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__51c03d42731b231b3c1308bcfde87fcb2e72a211d2d913dec767a7a98031d8dd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a7473289ae50e50d62349891df6f4b661d09fa0522c5a132acd61e1008d97ff(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06e216ec607db4fffe2ef0056b28e85d2f29033eb90bff02c560767e252538bc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__838a7fb86a88acc744c8e74679be1794315f41eea4a3d47eef8d63ee009ec32f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0bbef4c58750e47a03aba36016145a32578f170f93ec496a9624e7985e9493f2(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6657d51f102acedfab3680fceca037052d6f43507dc76361fa7450aff1408b0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__202a08dadbd159ede3218d9c4df4b8bfc1a8f73fce9443370a64867a2396e761(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__576b6bdc7b4bffc293ff2386c976b380113e386291d3d26b81ac3de30b173047(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a34ffc15a777d5af073b7c1d4c6fcc824e4e258b4c6bbd943e7f1ed7bd44662c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c92d6afb252638c611e27f65f4f1f8148e3ef5bda6762ae0fa1e7b97c1fe58f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f18fac44fbae4ba784e7c4b1d14e452a5505717b100dae57c120eea99fff0591(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__200f8359a176ac45dafad77b973a2c92dd803d88a6ce91059033dd485e75738e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1b3944c369d16123c334de37c896e5de687121f9ad187a4c1077f70b3fc74b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca206a8f03dc7a05b94a11ac1c54a415222097beb1f422dd9914094ae746460d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80cac8b9ed6471be6c66903c43bb9c6f38320c5ed2c7694cda37529871d3c410(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__edcd1ca27e962053e4bdfc4e45f2aa19c03849c71c50d7ec6c32d134884d8e17(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c1a235375591ad690cde246b5d32ff41dd0ea69e5aa39967306f6099b9b5323a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eea8506209c94bf84f68aacf76ce80457dffc831016e26141207117fb85fc976(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__856797a553b2ebb48d41568daf37e7311f3f2da4efd8f6b5d055f79b9481eee5(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1594ebfe7e6e3a447b2f183cd8439420be0b91605740144932eb82a0980b3aa9(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9e5fdf1dd4b6a096c7baf7b2ca1d10f62f557d7f73d16f44b3245db5a593f7b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1ed59404e17bd667c659646b329bc0226921210927b6730def796b2649eff78(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7da601a0b810cb31e17c271f156aebf7f7808f4d4b02e28fa618bff271a79459(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2937e081bdd8d5494995d827912515ffff9f16c81508d9d64beaed44721f7039(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e8cb99b41a4641f1d6bca29eebd410bc7f9bd7cfddc0f3c2cda72a17aa87c79c(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da5fafe63cfd8713116bcc3431b17c951ab56fb9984dfdb2814a1d257e0c1638(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54ff1cbcc0d6fc55cfdc16ff31abbe33f50ca6e8618d6fe6a6354e32bbf2f588(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f480d4324c25cd6634803148565a5cf47b5d5b07ed308d1e7cc33b6abbde04a4(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d83f1b001f7b9ba2cf3d4099c0c428df293d34f43ac3ed014ba779b168d8558(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc11d3a37fa43ba0f0aef0156b49987969d239cdfb03e8da2c9ad29c0aed661a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab717f2579f61d703884e6156606eee790728ecfc625e38a4757384935beaa54(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__47a6b19a9791a649bda9f716192b437a57a81cddca6d3583c6bdf0fc2ef9ed52(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c73d2d0888584fab272cc493928e6c0ef0e4cc6ed482adf0146f157b80e9c87c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogram]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__067e48839e9387e42c86ba6880f10a42f5521a25b9a8db65130ad154a7cec15d(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c733f67ae44c9a5ee617a80ae5e912a557b29e984d6fc1b3ed23a1b58b6402d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8866568abd1e72c1477e1c8ce877ec753d1546607251ce45b0e0dd3f93cbe42f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5adb3b59342590a8738c631280eb727b1e2c0d02f86aa9876e543a73f151efdb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80b4e1223699568047bf629ed9946af2f5c97dfa9d3f5963d0a960f26d6f526c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dcf91c0d9a62cb7e5fc01d7da203aeba03d180fec06ab04ab113c10bc3472884(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e8b9e303544d197f659687441ca22dfc1da28e1400bb44e7b264440fd2846d75(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9cae951f9f9b345bf65fb299609569df58d279b46c96c7d8fba4ab306b16bbe3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c80a0862c95480343ab009b281f2e1342c8ebee54f70009efb2ac2953afab30(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetHistogramUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ed016522cb65cc0241b3a9fd1a117c5a0dffeda88ec7687729a729a5504767cb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec04a7f4c3f0f9d432e0cef15ddf29843da91cd1cddd071b3f893380dc172162(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0570dd1a5e4b75d3f655cb593af661d345575af0f8df7f0519d1a6d37ad43dd(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d6a85a39873db7729920f4b287ce725ccee53a90f134d3b2df67ac11016b3a5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5634f2707ab5f0a19f27fb241fe2df2c5cf04b4a208210d14dc16516c30741bc(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__523b1d96cc3529202494211b601821c36ff6f0ea6e71463e3b32c962bfc8ba89(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2cb656355ea5fd1570c6be222b7bf755dcad97f1677d3ba50a8cf64c436395e7(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9b92acf9d84518f3a49e578f14f793954d954b1f44e4baadfe3ff382a749c23(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8fcc7bbfa807fd79124620e4104391cc7cb67306edf8c5e04a2fc931b270983e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetHistogramUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5b88ef0cb26eb3895c3152fb55fb64f773eb9a6b51036077747264b591461ef(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57e67b09e47bdc9b5fe32a4abc27b78b2cf08d4c07b67dbe387da97ade00e8a5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba256026d7b28ead6de762f9aa4943b2952958f29e0a36af6bc765e87e577a10(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ccb52a5edf7befb5c431cc048385912dee87bcf9eb915fe3e95ee0fc3ed027b5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetHistogramUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc0c7da08740c8d81ea8e144152c334411c5fb54c9d1c704be0d8582e3db7f60(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetJsonInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__42bf75611fb44e50e9c8c33324af190dc1138afbabe3cdba6e38a4e8853e4541(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a33728dbea85533e09afd7570e2de72c746a31d219c0063593572aefeb1a249(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__657960956d08473de22e85e98e2a682046964acc4ff72b3da356893e5374b4a8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09332d7a337ed475fe216e2d8b60e48918a7fde87029bae30912e975ade66717(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0988079bb5ee4b209858f18c94c3bd84c8c97527d950ad415f7f5f12605f6efa(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6638fdaca0df7025f4ca2778c04e822114848efdc6c08c42ca216b85e131546(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__993ae9992fdee752498e35817d6c5d7da7c76b4519898ac202236c32b6b52e27(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d593bf894dafe0bb76bf372f0ad51077d973ab93be30c1d78ed65ad3d063abcf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d525c138b8ba63fd3eca17c3efed00f1735ec589eab7906da6dc31188ba8a4b7(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d368d1ea49e0900b1771b69472da8dac830ee6b9e93129da602441b8d63b3472(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67cf6af8d25e948bade72a35d35cd9c74687cebf38e10a9d2e928d1b5a762429(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75fba15526d974a96afba8a780099ecd17b69da5e4e76ee456e80b772cd78e42(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d21859aa802deccc98f35a3ab2fa85d9ca0a49b636e3f89ee5f0994012fa2ca3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57fa222aa6d5f22941ba8f2b9550f0fe3c9c0cbf157162b348a037ef20fe9cba(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84fdbdce7d8ee6b0cd5a08a5e8a0dec30a8a731dac27d81b3dd3ef6b2a7c62d0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68df9cfd3d558270683c722b5dcaba943c4f9a358dda47c56f301ad99aa488ed(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__944c9eaf8f4765f466bc77f425dcffffe45a271aaf75d587d74d76610c17a288(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5c76d9f65b151b2822b44319583685ab3ffab1504e9bd3e2f3d52e9997f02c1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a4e172bb4578533eb1fab0198f8e515b3261d1608ffd8fd05df5136df8c1c8e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d6ea01b9d2fd567927b33a17b57bb2b363f02a3fa69f7d39d13e8f0382385a4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3588aaa291f4416267210f013a25022e39f3bedd1cb7602e417c8f683022a4b4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b4e6e8dd0b79e3986bd2dcb1704fe1ea052a030816469fe384e8992d57c678b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a40a9ef01ababd4f15b0832162e698b02e0d0d8c98a2c984793d8558ef75e39(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa156b067fa88da038d95c7cb831fd006cadf1bb8a8d1449ddf787f4b0e51568(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1ab281ff2c632a00fd780c7082d7a9d7485d9c82c1605f75ae52b6b2c8acba8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef07469601a27deb1a971fe6cbd46e2d43aff8688552ac0c2e4c2011969d51c2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ac41fb64b97953076972a6df6d97e69cde027d532d67b79b63019836c7d3bab(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82f70914da168d1eb8c406f7b5463d0aa05cd23e03cc67e7a849cb797bb9bc9f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__316da5db37ffe1f963df7019a82059a5ee0bac74995743c25346f00b0732cccb(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9765ba828aeae30d06c6e6f468f469765cff251931d4cc390d1203e6d422b1b0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__697fdcbed0f4492e3307247ab3c88cad8ff644d31b92c21e97daf34e7c68b145(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad77bab08c1c7746da05ad5bf08d0ad06187ab2dfabee97c927c59736023b973(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__647d00f27cfd904a53540b2224a018de7b5dd56c5b3eed85d74d6cbfce5b62a7(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2d67eb2cdf0dbf9672c3ec9e763072b92ce04f45e738c4eceec096077efc07c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b471cea3a969be8e191d5118eee8f258cd3c8822c0167eea7df545033a4ea57a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46edace2b69bcc7eae737ff4d5bce58822541fb52e7c2195ee9c15b8015c440a(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7eb2a4718143731378ab337fd724c1852a47e45d39ca7ff6c248687c443882d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36e82b9e9dd3f511e5763ce11bb670be70286cc8110b37acefb46cf686ef2684(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__756bf29d85869453c645fc098ac9058fad2c3122d2e2c5f59c0d1f7b13e70131(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c75e5d5a234c54cad21623b322bfcab44cde6f2eb105b25d414507d1e48f40a5(
    value: typing.Optional[OneDashboardPageWidgetJsonInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__282760c11198cf171a3fa1e162c3be860a192ed49a5871535666a7f9e97d211b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93b8f2a79f64a42fb0d9b4926a963cca9eee62fbc391f28b7d1ef2a231c52e45(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2203d0d6593bd758659857610be4edb5ffcf7e64089cfe7fd42cf12eef303be(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0df47a0c164cd86551428b2a117ae279a716451ac02cd1598ef5f79b8b724a6a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ac1f4cec76829acf5043ad93e0a36cb87560b0d038f833ad3f9de620e2cf83c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8aea7327d7e76db90b1eb66aeea782daf5a6e4e03d5031076d1c439ef65400b9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJson]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b644b5c3d27e0e7c4665fd93b743ac4856e0f6baf4cad80991b9a524dc07258(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70707c438dabb738e093c72dfebba5e5c96f2d04e9450f360b5dace34a770dca(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__178f1370df3ae1c0b8e4195891306c92ba30664e62a3735c140afabca080420f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61ac9c42920567ae5aab8e07ba921286fd99d492545969ffaca52c2b1d18235f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1409374d4ea3cd972ababe9e9ebca4eb06f6cea05dce4ef122323115a7d07d03(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28c34cd4776caddaa86654a909cd633baa7614efe5fe0790afa9d0b8b480cf9e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3c8a408091e46575805940818632949c315ba1d6fdfd61b6f6fb05360c70b47(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a236c367885381343585a09804589944a5fbbf0bddb8b3a71329dbb2c73551bf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16f5f1e863c9bae6199c15a523d48571828b6f85fa52aa98ea6c3d96743eb089(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ae172cc5f3c0eda58d199f29e77fba4534ab7b4724c055b14b1747d18b8a264(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a401156f408835684fa95f04843a1373d41316a5841c73b90fcd07486887105(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85c10232417d48233773b0c50a84462debc514753d8c184f5258dfa22e781adb(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__51f818f4bd4f361e621f332e4aca67239f95edbedfc40bf99de65d95e8ca3b0c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a5df088655d8e9874cf283cf3dfbb7ba7fa565b5b65479269e29f6fc9e7238e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa3fc53c360dd433a9b4da7caacf427081bb74824919df8582eb368ab759b25b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c82f2aa2cd665a5d36edb710bd6b7e822f6182dd85fb3c82304a67106071aa40(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d58d1f3b36dfeae499f53c4e2fa601d2fbce80539794a63b63111335924590f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80a7bc0901052048cc11b93de10f13322b2f75ab33ac9d34fa2decd57aa03908(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfa270cf6bbe91e84fbfe24ac2c5542739aadc03b8ad911dc9e781e452052370(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd57adc59e31b53a0682e3fbc6af5d151411629d44663ddbff85b0befc42162d(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27fea028d60de5c844a2da72cd09340deb0063698f904d83277edb83488ee04b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b497ae730f657d66c1b32d06be314abb76022c6b5f54a2c1336e66a364eab88e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da3b816a92ae284ebdc569698be11dc40a2c171167f89d2e5c7e9e33f9cc6e8b(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f5e79208a325c362a38088435ff4edea18cf4f055827c9528183364be9c97cf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__046aa914776677c754d5e1bd177ba8705df22a3c08946ce59b508947e18f1cb4(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa0e544aaa4532bdc510f18b330270c29ff07d482a179155fd11b95c47ab34ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2fecbf98f8cb8f729acb07de458b725336d8decfe7be4028684aac02ffd7e651(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c5991e330dd0def3e04d96bf5a52c9437456bc0ab8bde9af4ceb83e1ccbb025(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8994e58f0e2674e9b969d52775916b46bfbc35c3e25838858195ed5929c923b3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7ef5d50e87a9c34055bc3f8dc0101246019358465fa873394a9e9fb6e092007(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e734936ea351c7c7e48c0c2f7cc14f281dc73009d19aded082be43da421938c6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3bf741f9b855e557e1bc0507c83381a027db498b041cda93aa28f8c4dc40321b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8508c1ae242ca894384f3c7bcf323a67178b6e6259aaa2514a35261a6a393e66(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d76b2e18c406bd5291d3d9f9885f2077f67e0c04ad6caa6b271cfb0edc1a8f7e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9703537bf46c3b6f84a005be962ea280c30f56290e5b2d82ddc53bca710d79b1(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16b4d62153a1ab9ddf646deadf24d554081834f92485a579cf4481838e57fe2c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68f49a3a167acd4007da90ddd15f6e8676ba5709eba0418eb45bf43cd896f550(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bf7e3925751ab515e52f7e7e7642acd2d03e66b0988bc55c9a6afb6c375e4ba(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0b74471acd60b0ef683f9801dfdbe17f94fe0201f1cb9df8b5958d7618ccf43(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65e181007ab327b04f61c91ac379141b30e9c67d2b15d0e638b82bc2c71ff51a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56c8f5aceb078ba02b805f91f325f24a0c468dd39d78f7c9d50e064cfe72c9e2(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6899733ce2ea2d870c11e3150c0f6a0b477de931492d1e92ab7b956e9949e6d4(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39930dffa26f369afa3cd1691c85a1ef1543ca75f3748399f21268543f1ea8e4(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a22230b6e8b0eeaa852bc9e12a2b8fe4a6c945a5830ff0d2c28f07315174dd4(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d509f18116dcb6061a43500ddac99bfcc19101e2ddaa1f52c69a666c4411d5d6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de568b12bda7868542d6003266158171c218b3d630a1d44631ef770283eef3f5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86ffdffe59db666bc41d1a8520846de54a9249afa98f165087126d5ef0064925(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e18ec56b5fa54bff76177bcbbcfae0d07878373cbc87d23d8ec80189fe88154(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__901c30824ac7fb33b92cf89758fb985be9053e7fdbe6349a726715709806ff96(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ce0e2f185bc55701cbe122f5f7eb0162776d3d9d67ddca9a2de4b3e356bac2f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c65e103e464726157303b7864c547f91698271946ec34779080ebbd11def47af(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJson]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07df4c09e5bde1f1b664ec383317ed298ed43485009192fdf72bcffba2b5d106(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f12e8034921c119e1550459f8fe5ac264de22e559d4a44424c3db7de04495c20(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f75ba481ea41eb0193e94f8cc16c2728e6df239a9c2045183ae22321f9ee8128(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__77093d8b36385b449ed0c62088073ab01491946c01e9b4e8eda0c60c50d3f275(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67d01013802448184c5cc4a0df87e45ed548abe44f0dd3a4a8706a19613aa65c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff22ce2b68abcfe0aae6a03b6c52f9091cfefa5625cce54cd11969ca396f8443(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81ad6b193e11d1576ba10bc7dbfa8def52e6f2c33ec2f9a51fa68661474fe563(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6497028c328421b21e6d629d3cd8d5e4ccb4e673dac4cc03875319a7e0572644(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d66272fd93263da7c241da77cdc740db9c5a5dbffd07e6477efeb83b99ca2b3a(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetJsonUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1699c5b0ac39ceb6d51925722081c8c86c5a3532d023e6ba171133ee731e0f4e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c17fa9a2027f9957e6f59520b0154ce6dfd16593b00f67261f91728bfbb03b34(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1bc2ec0e51ad6a5cdaaf6747399a964310babc26736ae6ea30c58633d2bc70bb(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0646349caf533a895169506df8776f4e76a847f93f17ec75eb299d86b79c11a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80b853ec4713a1bda60b0e7cbe765f9b3ced244390e2362d11c35d839f0d8139(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__79bb9efaaaf35378e44f6aafbddb7a57f30da767df0f9d5aa0a2bce843511370(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cfdc153a4373b5d92cffccbd89252a1ddbdf04e7f1d883a5fc9f18005338fd86(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5b67798e60773a42e49383e0c56caa80dde607f26b2f2f76115f06281cc67ed(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61e10d51cda3349586cac83dd2094ce5c76e9578a61eaeb67e122d6c09aff3c5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetJsonUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6827fc888ab8c09c11b61754410d07e1431b8553efb3482839fba4d3d64cee1e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac03807e478bd4f10eb0ecc522e28de01cbfaae516e68b75212e145387e84fb2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0d1b238270653520b0b9ef42a1bff66775061905bc70758e9605b2115ae6f0a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a00ea021c66adb44efed2a07adb60b95bbe8ab2ef988708759c0ad445fe1727(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetJsonUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18149664903820e719a1ae6d88101663f1385b175f6fe3fae3dec3bddd0115b3(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetLineInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    is_label_visible: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    threshold: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineThreshold, typing.Dict[builtins.str, typing.Any]]]]] = None,
    tooltip: typing.Optional[typing.Union[OneDashboardPageWidgetLineTooltip, typing.Dict[builtins.str, typing.Any]]] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
    y_axis_left_zero: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    y_axis_right: typing.Optional[typing.Union[OneDashboardPageWidgetLineYAxisRight, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d20e409d528bd2fc7baf74f8dbe5f556f95fe15e29f16538a3cd274326ffeac2(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__179ffcf2ffffaf7ceae5b8606efb411e8d8b02abc8c212499f8d83369edbdf36(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83ece2a190e5bb44adb139dd30649aaa79ffed1148bebdd7c91847fea9b11f43(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49a4e10163ee63007e31ffe6430395380e7a1b01400326288c3e277f93cc80c8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d64b757bdd653e84a126f1a56259fa0762720bb5be83e510279f5daf10478dbb(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9e5dc37e284262d4e058300e0f651650c7a679db7770cdba8027c5cf2ff065d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a227229be59daebd2b1156cbedbe03fb0eb7bec76938e9a5262a14249ddf6091(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__717fde96fb32ef3354a0ef1a6c6ccbf0e079c9673f400cc7c2d2700631749f78(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__098f3aea2dbc4c06c18e73d0c8a1be741f156e23780dff6df2fd0eff2775e935(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb92da9940e3f77368d1515b9da1b341388adeabf041c91c6da1cb8bb59fd0b7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5e54aa2e2baa169527e2af5b7abb16748f2c82257a85548e3b5cbf3a63a318f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e8122d0c0d82d3e9d7787f1c8bc8280a39f6e48fc29259146b6c531734a2fcb9(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b709f92adc9f271b3126398ec4d64581681720be2b8a4176aa871afdd56d41ca(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1bdbae28c0680d35308f1c0a06731bee1a3597283b8c03f99bf3d68db5842bc0(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__178d873af665f190dfe66e7577c13ddd1fe6f136490a241f78650116e26d6f5c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d61696910005bed3c96b4f213dadeaa1ed07b9d72aa00896e94c2aa6fd33a660(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a216ab1dc371bb12aaa7be874c7a232ac3bd751a56ce7e2055fef8df79b08ab5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0668b47bb2f76032fb005c3b8f268c914aff05e440219e8066e7ef5526d10509(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0a2a648268f01174e55825a0c69e12551827f7000636002c2f5ed5c607003f4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5bd5a27bfa8e36ed344ebb969cadac096987b94085438495a171a8a18da7cf52(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd00ffb879c420abffee861deab7b4db2d5f5c402ae5bf5e2c5ff0b806db22f1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59dfcc77057fb4e0e89d0469d56abc5a991020b296c4cf2cfad79b7ff0330c1f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a776492d23b1b96db3ed58abc5f0f44d580251da2ed4c56720d434c26679cd34(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f079ebc7ea823ab26684a6a702c849aa28a3fb43fecd7153de714821afad50c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d21e339cfa730f8dd226add28ae21e988984c6494ca78a89c8b637885aebdfd(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9dbce99a0c5488abee78a810f4d2b3b08ea6b0b30af4a1a92f57687cc6116deb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2410a16b12d59509b084820ed52fc1bc186dd72e9a469647cc77de3799ba909e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5422f5a4022e765ee46532334855ee3f0f6f9344bc6daeb45a6ebfb2c62a887a(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__240afe7e377de419f29df1c42300ae594baffcebf7302c6e5737f8de7e0be64f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2debe852e7fd892b8c8f247f6bbd05c4818222873052bb1d37c2cf676b4a7be6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c676997e9b99c04da62b7d9a0e584707c7a78ad4e576309e372779ff2032e451(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__162fd04645cf9740abb97ebcccb103a396ab123199770b2c67091319809b1826(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d55630c86d43d6eb2ad4e34db45fdd784893c47dbafe8ff56662a234e1884a8b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61e3efdbfb094483faac2990282d9ef9d12445e9b3e4664d290b7e3bbdce30fa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b283901a3acace85a52cf689ca80b90cd15b61eb3a5db10605171d58517198d4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e993d07c5e9e86b9c9c603f75b33aae7c929bc297e517920461dda0d1d52ed73(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ea383f592b6b3acdb13b6bc121e722f8f297543beb5b8b48a0603bb47735e776(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67810d03d6d7154c1fef677a4c855005d73bf83ad0154bf1d5f47b9242b2a4cc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8ba6f2d72fc8e65b8efa278abffe8ce45f3af013265b0c9210dfe411cfb1e32(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4bf40c3f236cf5b6360830e328bb5e4328d7252c501f76d4058b941d391856b(
    value: typing.Optional[OneDashboardPageWidgetLineInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__459b2b8d8365a03ec643ed1618c7a8cebafd7e7ed11180156ddb45b2e6ddc463(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df34111e345276c1f29227917c86afe0a0d03f1fc37c955f4a758569825dc068(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__001fdc0128fe3746c02994c4cba36985d02d10a86772fa9758ec4cdac15754f1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a16433a8b8de224813eb0e752c65656ae1a443b5743f1cf255b6e99959e4550(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20a1365d17c95f03f452afaa47032c128255b1bf2cc86342d5e1948907f1ef38(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7cc17e2c5816452eebf28e5d9b303944c9a6229b91171a23059c9c50b9e1b2c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLine]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2e04d2773849871dc2fd8ae87adb5ff5bd10960506c1f80c01980b6f125a9aa(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65da24ed376189d012f38cdf2ff1caeb71d2402085fb6608ca4d0ab8243992fd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb8f3b65ce9d112d1ef61c252ac8a63a03b201ae2999b554c6f9d1d06bc3c5ab(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__088d18ad27f0e50d27cbe55b23ee35ad65c5f38757d1d76f648940cc79e12757(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bf2c70ded1112dd7e1e6b5121450104b752985743b2421e099a549ea0154398(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07e25ac40a8344f5c6c471584d6ba53d810d2aba73978233ec88d27f5049833b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16b53c5f2aa89dfef3fe92412a28ec9cefcd2b67d25560522f18c95863002b82(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__629d2eb3fcc088d4ea88a049811b19a56ddb3c870fc54ca98c0e237097831f20(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1dacd1d1f0c3458b9d9504ed5684080a3500b056904feac7abcefdcc61bd3840(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16579d62ab3b349bb4c1ad35325bc68dd6224d568c9c58fad94df2d734df27c8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27a87d4f99ee7913e63b2a560fe73be28b480b64eb5072dd7684569c2e3efc2b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b6ac923eeea7fbfa0a8a142a00a37bbdd40080d04a086dc0b500081fa1a3388(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9ad14a1f1c7283e5e32b29c90a351ecc68ac86a9d509f38265eba4da13f2d73(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a3bafafa6487963e4df4591fd30c89c165d91b45881a3f12e648a964df0bc73(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__564211c7be54412e4af87ff82da39d8c120089597a643947946276ce3d8139cf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c70869bf0f628c80883eedf033c370a49cc3c48c303d348f1569f8f3b3b3ae60(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5669bb92d4062c986d28c5c319c0f44cb006b8ad6cbe62496747267aa48eae1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bac238a96a6d778bc4f3221b1da4f2b0643877ad3b3e30e0d7b040951e1f4f6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c14807170f24b2cb6c03730e7390795b0e435f1be35f0de7593e9375bf54269(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__587bffa286f437f3cf5c665fe5328ad40ed575b78b5834e6165b50822ac196ba(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e6305caa7f96c5149d390b191a16749aa38b55801317f8709e30bf9313f146b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d573d4b75cec73eb65f39d5be5a82969df7e5c9c2c8b9f8c02d936ad1bfbc89(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de91c6819553ae81133c3df60a19c2dd87bfe97d40f9e886dc7ebf9403cbfe55(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c1cfb8aad807e4e8b1fe22eb49614bbc69d9d97481939337979a030ff28cd5f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e11cf270d0f62dce073c4c7d74c6130ba890ced9f1592b9fe4ce72e1ba7285d(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ebc6b2cfc0a1bdaacd5d1a50ddca1551c86d089e21499923c727968b181c36e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__107042923724cec2dce8927b77f0098b954fcdb1e074e59f0598633358258ebb(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d1121eac0e0774dde5e95e25eec5d52d1271318c780c2519474568cb063514d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4857b3342b3b77f44db535be0e3f80a12485cab4705d1c7f55027dd5b2a2c858(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11994f1e2446a2b3080ed3f0cfb8ddc209fec816608394b84251847d3841d0ee(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afa52fb1ed1181aade3824cde50f11f23f99a2f43096f5160d3bc997a35d3432(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d32f21d2f9ba44ae221a38e21372b7cb56540ea5ad0dce91a106865aac1256ad(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd9eb79e78aa2c7f93f8498be5317e73ed2543464beaf3f9d93885d6a481f142(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c49be1160e85958c7a2a0f6635f47964cfaeb078de9066ff02bd9f059165787(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d2de1888689fdfa526b1f5b737f08b888d6082d93b380093c860d943a4f1feb(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0960e861650ab120c90fb93edb98fa7fa391c7248155bceff1a4ba7a15182e7(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eaf278546e6e79a818a4e82a55a7f3597c58a21e1f50102fd1a8f913a8c2d365(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1dfc230e3c786b3eae63eb6c25045bfa58eb9bac55645fe22003d11f12aa470e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__506d56fd95d8312429d5b3c0bbadc874b9f97098ecdf59075e60abe6837b3094(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineThreshold, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ee8f10efc9d3d98b714208e96868f74e8c6faba7d8557f5bf105135b334301f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46ab97ee40e807f6e93c068077ecf1a0eb04316591a6751cecc5b22c0898862c(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57ba917a78a965883d6239a8411feecb7a4c1c6cc9f8fbd0082961a896c64d0a(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55e5e8713630e8d855bb9f4c21327deb439efab4e64a7b0a8e65fd3ec1900d39(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__79aebe376b7b245072b3423e251c29d1e3eaa6c880da37ec42947f28b3d1abfc(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a4a0b489e1c67dde45a87c3acda4b34919b302e0ece7c6940b80797748e32e1(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bb3ee44d9bec3b6b84d4d43ae6d5e84bf1b1947716e05d0b8210f0e329b1d10(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a5afceeaabbb89485ebc96b57cc28eaf6a427ce119966644d9e2e5e47099da2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__091d501e7bd3e4067e8260b28f701572d17ace2d4d6ada367821469c9f77a335(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ce6c35b1dc673bcbf1f36d593239bd9dbd11a73127c820c1bb21a388f10cf5e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7cd7e243d4dd0ad9374e6173fc592ae3b9d2049a891160fe1831f6313a2926a2(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8de5ca16a73ad170c8bf8e4be42a28b86ad29713be779ba6465ad23057b6f686(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53163f6d451bde853024f398244c68ad5a7329d9dd34ad3d01a1f6b3d86fa332(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65239b8f7e899dd614e7948abe6b895b122db62c3af0016e5508937ceff56c85(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f111ca0289d6f0d2aa217b09e7f698c65d7b1e8045b55dd74ac4409b28c0338(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLine]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d4a09cd5e72d84fdfa16d24667eca96775ee29708d9b80f511f7cce2e21eadd(
    *,
    from_: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    severity: typing.Optional[builtins.str] = None,
    to: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c82d1d5c0f4853d6f70a432d2c983e95acfd6f0a1b0bcc1870a38c67926ee9d7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__77b052041e4ac893aaed4b13dc2366c7db5b8a1fedeb0de36ca0e187904c2aa9(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__920d8531c318083b7c8bc9fe8e3dee56de3ec9b882f6d0c3ffa3ce3175cc301b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__469fa738426737c7d0d06610ab4b63c8fbd5f9397d4a7f4294d041d3a92ce268(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8eeb38debfe93628755bfbda8aa0f494a99dcf87fbc39ef801cdda9a54e1c4f5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cdbdb64b81a17fe52495bf209a1b0cbf8cf55f0251cf6354d00dbb06d6c5b07a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineThreshold]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e7fbd405b5a3dd863065eb658af378fd273c95b310eaad3cba7194b747b9f47(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f5382331cd5706b60a0a86422b9f40d66ec882f529b8198b63f47bf2008d656(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c38e4c3eb48972cf7ee8c3d1566bdca502915ddc5a6194afbd28ace6ad4bacc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__feed090e9546af734bddc8d484ce43ae0ba1cd6dbd9dfb8a6e43570d6bbf2ce0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d4705de2dc0cbfe3067ca996b2adf871b7f36d54d828f5866393e3af9aea11f9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__717a9cd9a4bb5968416802acd5edc7ee5c39aa1d550635fb12a028d406bc76b4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineThreshold]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be1daed1f6dd98e22376cedfa5618aed68233e1feaf346d954197200e2837492(
    *,
    mode: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ccef30d31162e5590ffc8c54729ddf956fad36a5639e33ad567313fe0a070a6e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5eb9c91ad501eb5be69df966138087e47bf53a277b78c52009c597624a9376ff(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65c3605696bd635a7df935ba201dfd37f575a7388617275c06d6365bd75af1d4(
    value: typing.Optional[OneDashboardPageWidgetLineTooltip],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03c5cc00186a6bbb6289bc511ef790c0c0f6336b72d111fad1d244df632baeac(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4b75060c0d227e894fa7ec7715c5c120aeda93a382010d13b4f4c185472180b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ade2cbf1b8e1dd13da9622082757ff30b163cb38fdb93b3418e389ef021e6763(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__22b024ef16b9b44fa40701e6adf4a0a9b95b3a0061e6d4d1fe4acd9068287f0e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b77ed3fecdcc4223b5a71ed6fd5e9d75f1ce23e8cf056213c2a5e105e86c8728(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e10c6c24261e10b0b8e009ebeb0c348c37a9db6e0091131de24968d6016c267f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60d3cf490690ee191156ae98906ba22b70a10ca1304fe7d1d6c2612120abd593(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f3b6e3d8112345b34db99b450b4a6223797fb441b4c2755d21d2e87fba0f9ff(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c656d9b3a728abd6f288b5a2fbe98f2add986bf4e015adced062c84f43543ca(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLineUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2138226fa43ebc8b9191238173836cd82486721e1954cead4ca69f6193472914(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__50f365820c97266271a1b86bd244397b6f2a887631cad5ab930f8d469ce4f7f5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e0ca61077d235b0bfe428f1c8d992970056e9027545af4a7541e5f8f22c404b(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdffa9ed4c51e6875bdc0ed4c70f3b391581e755c2ec2dba306bda2ca36270b8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__017da082358fd64d8581f973f025691839d2d9a5d3c027ba3642846797416297(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26200ec12287fe80f73ff3cfe9ffd977bb4e16aa734968f2fa7949a59690dcf5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93c7511ed631163e84a60c4f1320c27a6feca6e61cc83ab1b20edd85edb983d7(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e5046272eeafeb8076178b837283ecbcc2fb7f83f34a72b62812c3e69983c7d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__923ec9289f82f2b6c880f58f6154ac8132d8cafcc82fc20a5bbfe3b0f760ce8a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLineUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__904ad87bfd88a323e165649126b7dce0305240c70a55de38faa38f03678403ef(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6833282d093e3725cfbe6a55d3c055b327c6b1db04d385a80c2da15f1dce9863(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__364cbdaf8b49d6bef1bdb9016c5bfc10050ebff932f14736bf26a39a89adb369(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2a1ab529d666e0e6f39d69da60c52516a8e982b710ffc75b4b51efe6e244444(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLineUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8f195c7f4acd73b15d680d16b7f5be07e70adc15ea46609ca2ba46089989084(
    *,
    y_axis_right_max: typing.Optional[jsii.Number] = None,
    y_axis_right_min: typing.Optional[jsii.Number] = None,
    y_axis_right_series: typing.Optional[typing.Sequence[builtins.str]] = None,
    y_axis_right_zero: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4e30046f34f7223df0e08983a5ec70ccff7da7dad1e7df26e3d39ed73e8d743(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f0add95446424e5c5a5d49b35b02f3fe00b8e34065db98f8374b0244faa1c4c(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96ad567da00354c0f78bd0faf1c049ad9f4a05ec8c0ea0b42089d848a5dee43b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af311381cea4e3e9186ae0a72807a7132faec6cae619501be3bdeb4b4b9e0b3d(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c25b60312a8a6b7e831b2f1665f0321bd99ba206803dba65f3fa9c7e31237ed(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__327b4d8c2f32c533d0a23fd538734943210d2918dea82137feafff8baf11988f(
    value: typing.Optional[OneDashboardPageWidgetLineYAxisRight],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__256f0694cbefd9641e4281d2d5f9565b29cd1b64dd7a51e3b5c1fba334c804bb(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetLogTableInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b037e6df80f16f767af06d55baae1a52571e8ddf578b1ff78d2aaf8b2ee3fee4(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad1bdbde509a6b1bdffd2915a5118393e038981a33d315c6f1b316c1846d273b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1b895879fe0586ad7901a6f0733ee3a587b0692f0c73aa77e5a7b52e49a6885(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afe1fa50a56b43cd9c5b57c718be02ce643eba6e5073c44334376848a6c7a97e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2c3c5e014f92221daf969faa0420cc4ecdc4df9b9402bbe13ed4552e4b83d12(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33ec835c4965aecb1ddf6793ace44b01f5679ae0021a26fcdd038d4cf87a2857(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__561c7a869a3c4e501fe7294dec0b0c0d78cb30de79739937d1b0c9a9bc3b90cf(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c0caf616b2a79878a81091460f55fa56e8b7f22244349f9dce6d009140fdfc1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2a7f82e0f3dcc9b72e2d6863b2a109ae8303206fedbd36d2cca1a184f7ba11b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a68bf5ada04c89f376dc2a134e7cce261e8be6bba3c77ae3492d369910965368(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__faf43413c92de7f853b87d67cd844a5e510d5d4f8efc7b3ad5f1fb0707566060(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b55f82c957abbe2259f7d8cb23676caca51bb3ec35b7e3a14235217d43ce4aed(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b9000ba6b247ed0bbfae3965bc650087e96bc9dd963f6a7c00f2c9ddfda5df6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20e0398d141e3642910f902d2c62282b205dfe8bc3383084bb67be5be83ef62a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d7fabfdfdbbb7cda7d137f54ead9fbfa5bae52a68c04aeeacf004865da7c44c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6cfe5b428f5483732490f52ae7b27885d2578ee4a23bde757a228955760e7f22(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25e787b33e5b8f6449c30e1188890ec19838150cd902e80a7174eb04f9415b44(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9292c143d55212c97b0b3f22d396fa95d4e1b271d10876e1d5afbc320f003c27(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__024b1775e6d2dc5a312949b283abbf523b1b2e2c2e6d4a66fd05c4bb41a0f42f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e621c2274c0fdbabc3354920725e366f23c071e056d4847043b16cebbd544b9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf4ca26c08ef1cf8b8c9761501fdb9d4e5961a5a7392ee8da7072f91284c6cf1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bbb3e8d6110f659855fb2993c5f9d0eb2eb2befd74da269c4739038f64c45429(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27ebd278c2de7030ff596ade83c2ae70aded579678da2906e9802c20ac5bdc00(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bd5b9cef0c98fbaf2987115fdd60a096358f9d62a9a0bdc6f7d101d212f48eb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__916bfa95bbbf7ea9e8e227ac846ca82f4ed91ef6ada88bbb3160b151e40bb24a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__423662cc4ef35c62aa34f137c20925969a2fc9b8dfef32278d676dff149fcef6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ab71c9a173be1591d61e3356c56753c19d5c575e709978b4ac128239769900b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e9e13441d5084599c0e482bd797e0caf269a37dbf1636941a0d6a7e8a8a7fd1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2e3fce9df92416ff9e92ad1d1aa82e4fc17d13f04260ccdfc0f4cd73b5968a3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd7a4f0b11d48777ae6608a6e1c5e49b90f8856c0252bdd75377bd2c0b3fabbf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__469ac79dbb3d79e3bf8ddbbc69dc087d95de16bb09afc0df56b19fc26e65393c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0eca68c0bedf0628c42dfc9dce36f9524625613d837488bf12fc3af2f6ebdea4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__103b0c4752c423b5758b23e8786135e0bff170218e85287be19c5a6bf7570cbb(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0d5d9c03b0e3a39ca0fbcf9f553f9e4c1025628a2d319cc85f21a91ce28be40(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf3cd1b30bc1fd8d5b44c9c990f9b8c9d12d7c078ef6a16d40d5401739c82a50(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41f75063285276350f90e9c2771df9c6f816d3063d00807f850e53560868c748(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12806b952184f84d3cd641f846beea7221c2d2fa8a9c30fd0681810a9098d320(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6dcac1b2bb63c43f2b9bf1fda8b833f2ff2fd75c429ca4b9d0f923191b10f7a7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ded3482a087238d1c58e89b9cac569aeec5e340cb26f824902e37cad493a5a6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f3b5affcb6a7fb56f3ab436f3965c947b23c6f9225ee2e1fde2acee558b0ff9(
    value: typing.Optional[OneDashboardPageWidgetLogTableInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb08aae410359b8514f479a7d5180d126a5eba01c6d3d0627c84431f291bc51d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c69584cd969523c647b8d5f3b24198a5b88dc85cff40dd0a9db285d4b0577fa3(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4ac392e9d1b7fd186ef96e14481536686fcab0f6c996b041c6d1b00cbddf8ca(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1823c49b1f341a237515e35ff39b461da1077ff84d04ccc34d2c33d9b297f947(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee806efccdc8fa45cfe887643a888c30cc71a0624741e9cc4f354fb70ea4d835(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71dbf2a4c3f8246ea08bf1b1e30a3f88582a3db189a42d2e8897dfa324c0bb29(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTable]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0faeb7a4013b88c959a6bd72f125b3b0b4610529ba148f3aa09e3c66d1151d6c(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0818cdd4cdcbf5130bdcc236665adce429997fe1aa717241b4f54254bade8f71(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__207f02806589225a9a681e9b9f1a5ab4cbf984336974082feda26feecf4baded(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce9fac8908b8071f10d6bd85667b76816f38dc88db04f6247200a22976c2b937(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53c1b7fdc09c94d22e4c92aff0dad6d289cd596f16d1796a38a9a157542621da(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c3eca7fdc70000c45639886dcf28c6675acab2671d6fbacd2485d44e0648bbe0(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94ba9ecad74ed48a93904e7f0dfbd162b497c9593e4e1d904cf1385462fae29a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df2284c8cc0d29a655f31446748a8c654de4d908db461cb8f7e4d0a1efa997e3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__77703fbf7f6a2ed15b75bec2842dbe6207d06ccb57767882ef983221b852cd76(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c1e59a4b47573c58beea681c7ca7d3c4398303538f881086d8b563edc7ed546(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e74ddadf831e7fd049a10a25cde67950862fff34250ce10c02256f0c770de12(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7940e0d251a6fd9e3f4c068b204daa73dafd26985132bc7300b43a25d5327a4d(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39d9f0cec7f31fe0a4fddb84e29d1744f5cadee54ae643512d3373d1dd023672(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c98c70623c09124fd99d0d2a54faeeece59df7723548c32ef519b6807286632(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76c2ee92acf7f9122d7e2a2ae4851264343e51ecccd10a43d6af02ae60595be5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ce995f055a6a01b9449560510829993fe58a75755c9d156bdd4eb1325214eb2(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7ba3ffddc503c6c4f70d8a1e38a18c0c8c14add54c8f1ad0e1b538d47ff9b7d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c452166d16fda8998a3dbb123c44684d2da91c6b81914c4b846620e351da45a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6914282583398a2e1c9559bd0d1b46cecb4cd4990740e354cb8dc8356ecb86a8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aff29542967f050313f1e96fc20ae0eccd7b8a9ff07d4718c30f14a9bb9f0e92(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__055fef20c7a7e11a1da51af8718849377a749d1f3d1d7675316f0d5edc2725b8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__519deb11a29c0a3b81ecefde91ca1946019007f11a0ce2439d35d416c3e21985(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__081c8e3f42d1851ce7f44287156b6ef2869b760e4f60070a995ed6ba04a53707(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee851945a8ab8473323bb775c205f4b779a02f99eb4b2a0887c822ec1225d155(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__754bc7c2be96e24e130af634f4191e8e5e223936859ec4842b6a03ece87c82a8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6423d2e97353770057eca9eb98498de87a7ba9f8a213748cd58b852c8108d0ce(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f582608d26cdd71de6683818a166789576e24026be5877bfcea9595feb31d02(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0913d266bcaf43785fb093b5dcca0115d054817f5705297ccd381f90939a7e56(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43161e68aa125bc5174438456b619221fe16418a6810110d0669d9702770f3bd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2571d680d1fc5ca057546f1337d695e816fee45484f9e8d67215600c5264843(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6908c0d481d5dc5d3b761cb8d05d4b2e8d0a5f9af4f0b4a6ab1bb846d3798d03(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2bc0a201bca4af8e335d308f413af4acb8d946f92f40eaad3c95ed4e1b499915(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c452a612d3db7d4e4a579f62870df2f4a9d79f838ccb217a77322911f16a7c78(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efff0c7a20e4209a519725b3ae5a1cb813a4e8b7aa4db605037cd2877fcfb07c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__905697e774734bdca2bd7cf1ac17e27773963aeb2782f09ec3e3de3a2e023f58(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3a1efc4f13cf40199d20a3d9e10b445fe8668c72121aed3d853b3df9bc9419f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e19d40157f76867faf82951de958915e4209166cfa1b1f60572b095b70e66da2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb8412a2be8c1205aabbbfc550a77d4772d3c5ac93e59f05fed3ce15fdf70061(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d07fdd5d04f374539e0e9faa96b0eeee097cab5da5940c8c927a11e2d4797296(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e26562561c45104585436cde1af74bba464c09985f5937495a119ba5bfc67fdb(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__792530fe32a1ebe55bca543a4da56a369b67fa6a1ea7005938ab5a597fd6ef81(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__715a25e5536e5eddc7a4b3f692b2f3b5242b95fbd508a5ebf5214e32535fe8e1(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34f72efeac648d382e60fad088772e6017658da361bb30c02a24191d06ca6ee9(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee38f3177023ff4085b49a53332649871e467d7ec45e3b174667f5e690be4e44(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__90b478e1f58c40831abee5afa1b9698968f38f63b6b14f4319ba6661ecc03d74(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89429449cb75f8abd67d09f246e03a4f94a31b2a718950a79cba72cef1f57595(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d4907e6f3f2e59069cfa2bfceff587895fa4324742e169f027417e60134f3d1d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d95effaf8a5d7b7ad8dc2913f66eaefb703ad9dfc53d340dfd8b5510634bc5cc(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31a60d088a60cadf79bd124d746f37b185acb60aa20dcc66e87e24cd06b29f05(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f7098617a42b1bb6e618d3e6eb761ff1a0fe36241037f421f6b4d0974e965ad(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a7df64694de42fb61839df74840252ef8de380ffea6a4c4f3573c7b67d6de2d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a998e63aa8ac392c3a33283a4baca6d57a445a5bdcdfb5d33ecbda0c4a55ac2f(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7f9bcbf310bc7e7c13ea42a026e1b7b4095ac01011bc652dfe3361551b9a720(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e72ca52db4d418c25aae24b74320d18f906b9091e668a1171f9209e9fb71875(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__789c953ca134b9fbc2849fba434a330115cdcf13ddbc9cc1c0fa13f724581d82(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5881afd8fb2be95dd66de1c03850161f17e430eca248c15a5e20de54b1ed44e3(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2eac5f690372f83b90a998f1e2989e3cc41b448f48b023d918adf7e087806126(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a08cb4137e17ba7dd391ce2d25ca308ff5a5939b5a8b0d7b76fbd502e0be79b8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a22098c731ba1d4752c87729128efb5af25c3e390d0bf6611667d1fe26b15e9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8aeb6c40f89559260089c02aa1d410e24c003f4d1e2c1682f5afc478ac56617e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetLogTableUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c37de4c42fdc2cf233f271dfde406ec7e248fe7987882ed491ac364ab1987f06(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5db30b76fb6324868580088a10744ef5a0ce72a3eba892873a11b27b7987438f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1bbabf6e06c28ec9db5204f9c4f8ee77d0b1c5d1660bde75e082b9f06268c2c(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__349bc326ef71b8c8863318f3b3a76d51cb3152a4a0507d047b979147e11f553b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02c5fe944edbce223a8511941bf5483ad568f967093b1721935f467b02892f33(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11b5a221079611d77d31309d8042b60a456033bfa0c71a3c97749cb8aab95f34(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b9e89914ce1494385a54be3cce7d2d64164c6fdd494b7ac9193dcbaeac1a20e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c020fb250e63927a87af375222c747cf932e902c99211647b780868082c6754(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65a1fb78a9e80af3b6a88c71eb37684a76ed72d29c5def3d71b4b36f67343662(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetLogTableUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f496000843e2a93e30bd30a8f408ed1d1cec30bd849ec4ff100be1f166627a7b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5969631aa39c22d90f66d7a4460d0a5fb23fa675da577bb5faaac5300fff8d61(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7dbf474602455710e6cd96b16d045934c4fe6b6004dc8ab4617919c8861e9b10(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d063ec1cf140b3c165d1e3e8b18ea1ced03f69f8867bbde60d4b8b3059320e51(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetLogTableUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df4a6904314303931a0a073bebfa73c39a938a81fdf7a73bf9ecff8a81b093d9(
    *,
    column: jsii.Number,
    row: jsii.Number,
    text: builtins.str,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetMarkdownInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8efca0fcfe71fac2a9019336f71da85c0d0273e5a7dcc85021996a1545f7257e(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd3fae3303269e28f582e8e46d497d0aca45ae1f6a5542e17a547678507af8cd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e19b0ee7ff390b8146ea0fdca8d28f96ede2c81964d4544e47873311508829c7(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b977d7ea4cb78a13b75e8c52a7239a6ecad6d95c54d846b2797d656aa679571a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06e7bf139d52501b836d2b1125829aaa78c158e61e859ddc0caeed5171c43b0e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eef0ad5c673a1b9a02ddca1c63ff6af2c9ef3fbe88a7939ad04a5294eb2a7a12(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__05ef6fabc1b1e33fb1661cc32942b3b41e1f820ac34938334a76a7225f4d17b0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eded0e5f5616f9cf740166fdc488265bbf1f9deb4e35de1a1a2de893b2739a7f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e24954f932387319e28545bb638289f0191390f15eac08fd00b037a35ab5fcb(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2bf3b4d4f87e72b2aa3b35eda564347bf2d5b88bc5b0e3b7ebd89bab0174c74b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e9135130bb2a817c17d66885ef918aa557c1943b36baf0810e892b338540994(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e701b3af8481de5deb8f9ee9e259e6dff55b25f9f983d56e8a7f1cfc0a49aa2(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dec0a50bf97b89ce3f348b1b3736823601d3e4c7a3efb3bc5819a52787a51799(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41ac0989da0050a8ddf150c2b7574587531e699bbc5e2659a9e3ac3dd7e25dce(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e4436a9458269176fab43b5818ba293795f68dd7abfe927c6814847ff1d809b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a698e9429bf5370208238e2f0aedc755b686caf3cd3d8599e57e1a63862c5ee9(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6510566264eb6119309710feeafee87641ac3d26e374eed37a000937225b5a9d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a03e5cbc3a1bb1edde9d0e53ae169eae6e12913085dbe803e205607b8c712cdc(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__169d1d593b5bf6f3521532235dfe8859205a853793f48acbf29d60dbfcf858d2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf19d474de658f107b958b88e791fd9f5fc7f366672d86be2795b421883ff17f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7f31935fc227fbd0b22caadc606df7f3050f18f00c9923091a12a655a2193f7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5afa2114fa97daf6e26b2629e3fdbafa9b2a7c4db72fea2598a1682502a4c06a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d5b684ba4184efffe829146e8c539809fa4cd12763b67ff0bf9788f120c1568(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e9495f7eefdc7cb93b1bf09f4fd17872e8e393b4881edec4f437232f95f634f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32a150d9bc5c17b910219abad6c9c084e740513d7a3ff01064277db17033e33c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f31ec3d615e5627fe5bd5dd8016d5200ad58815ba607d8de5f73a512008b000(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c948657eca191c97223b2bd71364d18004a71648ee07631e08277114543c8e69(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af3214fb752d0095c8b8d0fb3574aea432fdc7482c020aa9da0f4a8725d020ed(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4e70366eb2c165d3aaf7121dc15f9cf5541f497248eff53b3ad43d2295143a6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd34925a6332ca5df2c183c6a99b09c50a1b844bf1b86a5cf508ad2d8669dc79(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1dcb2d2a2cdd4b4df21f4decfc440d0ca2beb02d764192685f6a5e7849a1fb39(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__22466ae15fbbc1b3cc83693a8cd8cf84c6936a0af317008f3efadb6a4d0090c7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c3c082f39ed79d36830249f8e8b05d71eacf15054826c2787ef29968b14385c2(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e99a4d55fc2688064e7a834b3079eeb148653c2a232bbd30541e5a9e35a9200(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f063e18e1dace5a543746872987c68a88f5a87790d66bc1f1f228a8b5c73249(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4886cc152f0cd0f627af477971fce8cfc90e4f875ea039f330995efbaeff512f(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a3bc24f70950589f98654a73efe7ee0128c4d42128fd5c2b46c7e2c9b554ce1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c053ad00308a25a7b172ebc32a48f410815f39b85afadcb3bb02054de6e8729(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc7ba9ec0f82f117a84a3307c838dcd1e081dc615e82084ef455c325ac661e86(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c54dfb262f59e38d3498297b574a4fa80c8d725fbaa5f7903a2e02282e5416fb(
    value: typing.Optional[OneDashboardPageWidgetMarkdownInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d346dd67500886aa34481e3d852fe559fb963881db385fe9327907d1aecad28(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7d75b5f02def0af49f5d03221204464fc6f40a06d49618ee55a0a0aa1315453(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41964e1b3c7c5d1ee1693ae44ee0f29f3f61d66df7e2f6429ab5ed4654046df7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7b99e6f3d5e37ce6e02fef76e5a9ae595c68a55f777b417a5396f9cf40144bb(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ba67d602ca85599a539964c11dbdfb3718f4f36c3eca6f2871a01b618de1281(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2baf727b42457805b55d0a52eecc9375719f559a19e4f0f857e601bf9bc15b1d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdown]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__347ada2d0c180cc0d5ce4b621555cc4a7686ad472155ea0a79d7ffc2900a400e(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b6f556354dfcd15d581d4c1294795e4b34c4cba0ef4fce85ea7ad42373ae0e1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9552370e9aaa5011a59baa6a67d426ed162f771b446b63f6320f2675c4be66c9(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91d8b68aaa8726892fed76b58863de33714e12e54cb21bf01126f8f362868a87(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c972d6691ded17208dce25b64e31cf0f119cd0aae209d6b761bfeaf649881d3c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4d470506c7817b8f9a9d5cf553703255f761e3d5e0506cfe9780d2cad773d33(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d1e1cfb3f65a5f7eb288c7bb1d8b593b8c51ad90a647cbdc3505ebbdbccca80(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39d81cf12752264bd8867b45638efe37d2d0fabbcc4768b36ceeb729eb903d33(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c46acee9ba81ec95104e583496d8db87588515818be7c655429ad991c1eb335e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ecb614aa6344dfc948a1311471aec2fec1dd4db7a9f78c2b64aad4811693508(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__708b03f723555f18f9c7bf8788936dd9fc13ff1a1723bd3684e3d9c35bffc62b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e1bc3387355924a024575b26ce419c49b2468eb0706c795211ab6aa52f63a32(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__840bd8d67d13febc4544ef5e37a6aad6e0bb0ee8c9cfb4fccd2ddd3f105661ad(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28fa743915ec9d5fdf532485b2889904a7da007ea8bc260b305c9ffc905ed64e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4458ba6daa9864da07f3eb9fe8238fc496c9203a9a09f36b8f1663483e5a8a73(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc7e0bd9cc7b3ce8c7f27873c5fd734dea4ca7c448c1cad3b5d41ed46329672b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a11b559220643accd4973df00ad53bce74aa25cfee353e70671437a56ab9afde(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96bca62e425d62993c574a94418b098a41e5a409b1ba741e35cf2e4dd0044bcd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfcb07db5e4e87433d872c2f2e5d37a2c4ec353a79229191731a1dbb703fdca3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37b9c6dbf6ece86a74f4ef34cba3d44fa61ac335c1de661ff61558c9d98fed4d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21d6a44c32e67653c4e15073e8b2b3554a86adef740e309b1b28162d11ccf20f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b8861f4f83c6102db433d3556c8acbbb2297e88a5542a2bbec1b85c81bd0cc02(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c5e86ca878b67dad2be8f47b6186fb2fc8f3b93efc81b98541141938c0587f8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bcf5f3ff9248c5fcb5251fd8157e5f95182d86b6a927ee984075737667ff2825(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70c7ae6ebfc98bc01cbe58891684b9a0373c2eef796dbcbb98a95b5a981db765(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__569c1cf4fe0ad357c4d38093fdb1fbeb98ee30fae60e1b9427b7bfdf265bdbda(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__730c31769d889e32b3986840f06ebc8787e9c5c764ff6b26f5c2c2897539b86f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__072448ee639069c76c7d488a1900abeddf3f4b1a94ad24de6423fdfb460b7efc(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c2fefe8d78ae5f0fb2d81e702abedbe5e347f456b18d17510a6369cf4c26fe3(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__117f5873e79e46c76c3f879dbdbc170466bfee0a600abf0357cc29af00a30943(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c4a2ec317c7136fa28f7b085b5cc4253893d3099f2d3cd893cc180c651834ce1(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a843e111b9b8f627103f98239f62a61c85ec86cc2040b293cf7ea2d892cf641(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fae9d71a54e4148f14bc9df86c1ef7b91ccbbad5e68dc779bd495a7ea6073105(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__646fff00e74ac395f992a218332fbe4de3603ee7e2f377bbb4db7bf19c2cc7a5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b8aab6481189e9f6955ff36c76b8e202e9b6e9810a7616526d91b89424486a4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce74b7ca7d5458495d6b6283a7943b3fceaab6b63d363e95af4694d78a334178(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d2556b7b671ddf2f493ffd04e42a21bfb87f81e981530661aa7aae2cc2bf8f0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4030ad731536f82c84f0b28da6765eb1de6c9db1470a574f3a0fb2254ff21f1(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e290f96be63f6605f4fe184cdf84fc8024fd71738dc315e29db4584376e1834(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7ab3642467e08c1bf8b1eb5f075723e6a9143b4526b3b1939db9180276f8e9c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdown]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d0ae4871b35f7020c54b116ea3938717e6afdd7d8327f813cb17505e06ff927(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84f28333636f5a7abb05dc18beac450382418c01153235993a6c86e4b9e618d6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bdc3834f29ba406e01f85d3ef874836fe37b3b8ceb485a37e83ce168cac5de0f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b47dfdc649dc33b6a3d6a513504c4bcb28f01f67bd8aa1abc6460a0b4f2002a2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76249e29fd12cd95a2b58295702f23844cc42e1853d8eea73791c58919a3dcc9(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6575db7b3e523f86b1eb7c98c2e52b0c29ea204216a92490c6e0792d4a3e4653(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__601eca3e9aa530f1b69590425ddb2e18acced363520cf48a4eda80f4081f981b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25ecee0c4faa337a28d6c6d21080f7a69834079227a6b1605471414a810a3def(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2457898cf133c7a68eecaafd840bb6c721355ad955a942bb458463e37bc37a13(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetMarkdownUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e6b39a501740b61b75b507e91c5a7d0005aee62be8ea8b911ba97c7c2727e61(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__110f6f6d330efe156563c28972f0c9da99ee01347e33029da30268afeb021640(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5799ff88f7998babea174ccddf76c5e70e2b6b7eb4a8b113644dfe3f20c659e3(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__74522a10a697231794235c58e1f007d018d509b9ad8f20da6490afba91cabfe9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e8950970c2db5d70c87dfbccc3d5fe91266ffc01d3d650b69d5e003962397fe0(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__818f7e4003c31630e0ce5e5c67cddb8eb6374f2e49bf166b401a7bf7c3635702(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3bcf92b1d289e5b00cf3a2ab68e493e2c92af880df92935173875bf7f7663ca(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e884d65afc62a8cef5a612f963f335b82612d1e68e465f2eb1cf9b8948747357(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__262f4ead1ea23f88ad96cc4f8d7185375f75d837bbfdfe6d63c424b4c4b6b964(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetMarkdownUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8d826095e9e98c07443c73f7200fd002ca49572fff37a537bf896eb0ffda9d6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__253432245bc2bc3e868e13e5863c1d1cf401c79bc3850e0eb343866e7d349853(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8e12f0d597e508a9cbdfa2cae1e5572f98e47f0b6500e934eb9fcc4287d0220(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__883a1b4831dd3927e1dcb962ff4496d6f827b24020a2fa751c0ec1aefd5e3c6b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetMarkdownUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f4be3ef8b3adbedc30cf23f721a27f7ed100d6d9247520aecdaa0e9f8caad28(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    filter_current_dashboard: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetPieInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    linked_entity_guids: typing.Optional[typing.Sequence[builtins.str]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3f1d2fb598d057334470c27ffc26f399c52623d77ed9b739557ca4db6561eae(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3157275241682a10c8d13b8aa2cd758b60ad8156229ea13ae32fffbb99b52f98(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef0e311e9d29207704a624819dac125332372fc8b3abf963ba205f610b468de9(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c730ae52e8e933fbbfde1baece2397300c18ec4822ae67b20d15aa3db623183c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf32d8e70b449b0a00e5202cfe8d27a80d2b3344b8fd7fcd50d807ea7559c716(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__774282d4519d24273f21687ef74119e7544fb80fd51d5ab944b0327d7cf66cfb(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c4cd6718a74a6c6b26590fd2c56ac2a20f11f3c1cd8377d581b4a9057fe7544(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__608e2f8d78929a44ca24c09e27d8dc1b495213d3d6e6efbeebf3e6f77de0a091(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41a596508f83c4fcbad4a8103d36511de4cac67309b8d4e0b3650a14e36b3236(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7aabc00072bf81a2e023222ea20e68e173d6dc054ced0a3563884d8b2c9de63e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68f1553e94ceca27b9a7933e970f639d2a1337491c2a72b98a6cf8fc76c6906f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__95aca5a29fdf8904a031e7ef9f4d39740623152df7cd5207461062b4e7301360(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98ee28b575be27ea7f31fa9e7e5c7dee09b248d09d06b98ed98372644617ae98(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eddd040752acac58ec17aa599af599a7dac1cbbdf28ee68df5e548eba97157fb(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a088f95e4f5768e4f5a0831ce41489e6c55b2b3de958968db18c4ec6973b124(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__679e40a3429e82540a552af3b5d4b0efd579b67364f4419d4cc5e2fcd406c5ce(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__79c17d1a603fe631bc3424223ac393b4002114ad016082293e39f509f46f6052(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__785f66de0897a71af6dcfd655e3eb8d6beb4764b21f45b4111a0bcc3da0e9a4b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de80eae257a8479f300ea9e774744c0b255abc180c33f0a7d220b7956ef88759(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9cef449bbb54b10394cdee0492c04510a35d3ba95ad516939222aea22745d1d3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b50a59c2f2f0b7e1b0c53ae47926f38fb0581770a14bd1edba21fb48bce3815(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd6a1c3ec80d629d450688428665876eee912d8c928fc7e3181f1eb79650cc62(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b239ea4b34287e46debde26f1e17a058903e373e2a0e05ea06b3dc9772d827ff(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36847d2a8be6b39adbfa2987c9d04e1b412d46e0dcb60f193e8f35b66be75408(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e3b4c438e183cc81c18480e61ae319b4e618ed5a0dcb346c9a40075570b303f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0766799d5d2e79cbbdafe66f6ca806bb5d9f3184d03d82b61d689f206787a4c8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7bff14e7151dde99321d811e9b0f274abcef7e3c36c10e4ba9818ca1a1300aa(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7ce0d44bb8056c44633ce56fe4b7403bea3e12a4db010470d5660737641e75c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af687c6ebe940957feaa69ee9da70082b85965c14353dfe09765714ef70be6eb(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c2388f6f2c9e1c2e17e0fcced9a2d271cfcd03ce687c50b3018e74e7dbccfbd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c863897ec1e5c57dea1992b5a4a878616aebf5ac9f8432510cd7c13ecf2ceda(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71c663a36ebbdd2f27e903e9375db16cb708468d09c06e67a62073310fb4e12b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4858339baba44131b97581fe3e07239b720d5e3a0cc45c27ec9a77eb5ed92b75(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35d811ead833af772041c3327c250286dc9ef449931fcccc62a8c0349f866b82(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc4c686667039488aa8af8fe59f4242c303a92034777df6d0e5f525447f5fd9b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d6f61990625768ec35606f5ef406cd56f9be9b1aad665b4b8857a7d1776becab(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f378b77725882952f15a5b66a992a958c0f57c82877da573ecac339b22d1b89c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bfdf7c592fd3a5be63303745481acf62927ec9748dfe60e7d12b4d35235ea6f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09791039ae6b132b0102e8e94d025ee31ac6f9c2cb780704f88db8d0e6e5f52e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8396b29bbd9bfb680984ad3cdda4b6c1b45aa581334d5123b37be9c8e573f0b4(
    value: typing.Optional[OneDashboardPageWidgetPieInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de4a24de83f3846c19fb67474ce2487f1bed35effdd7ca69e41a23734035725d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a52e594e087a3c717344d2795417b3d166574731b8a312dd3842cd6048e4aa4a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb749eb27d19032f19691f5de2aceae230c82e33eb6504f00ef622dccbabeb66(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9eb0708237add8c980507cdb6169b42ac4c81cd964fb8395c0cf3b3f26fd0e7(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a17c963640dd5ccc10187741cf1712c2207a98ece8368c133612c14f31e791b4(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__226a3b713666576c12cb54f7435776aa7e033c0b3c0f74de36fb0a7aa5b5e056(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPie]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__daf8bc34fee0d55fbee5733825bd4b8bdb1e4a6ea87c37c6f111f4aa2d2e30ce(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1534743808bdec658a93bf6f529841ed4e36565db9df52b57c16944073409b05(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc37352d2111de4790124bcd476ce8e850090dc1cb59bb8ce54a1b6bf5d670c4(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee8df9a7bb19ffdcd70d169deafe9ad248ea0b61e0e6be2db02be3627bb69774(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffd6b85d1e7c7f6448cc12f955d00646107720b0ab351308e256d942286a48c1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d66ba4de97c8dae1fb4f46f317d38f704015ab1d7ac73d053af6d626570dd81(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89b2339f3d1b3e943630891240068e92a5b991c7eee9a7bc833ddc222fc3c147(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a43108d0e12501cc7fe372217c21216f6bbdeff848a0a7239358bf6c6f4df05b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08aeacd19cec5cf343f97ba2f39da767c21a2e0ec922fc58634672e99f9ed9b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__671ba42472b9942c48d6c19ad593d6956eaf5ebeea85fe995020d82c18ceac21(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc2be342c5a20894995b3403e763178ed9ba926ab059a7739d13dd77a1a27da2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6679ca725b91e25bb545a7f8d0020cecafa37fced5659dd600847fef28953048(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e2ce12dd2e4e169fce25009b4af64706d6d3cf01c0c882217b111481ddac00c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9c69d106b8a2497556e43755144a8d05749ed9231575197f9e1452327fda7d2(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d008883c7c91d2814337e7657fbcfa90666df982722a027e899a6fe6e9f763a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1af4ab22d3ed7ce94fb4205a47cd424c17019f146e8e290dd8710884814c48bc(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e20feeca1e7f6c0c08f0bd44cbe7386c51a4936a65cae6599ec71380ed7b5794(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6806844ceacaba4c2920f40eb931a9ccbf290bdd31c3e07de682f113387f8d5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e148c1b3af742a99f52822035b200239613aec729e2726f9a851fe497c19d47c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e3a668f0b388485337d5d630138a388cfd9f47f1bb868b0adfaeab950b54dff(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__455be269328d41fd1daada677eb8453d64843a35684a93bc970d4e604fc8a8e1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a1625fdce4d4adeb69d5aba8253d2d363fb84a3985fbd2337f30329fc48d19c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7afbe4a5dd7c794623aca47e553c6ae8882e1b7dbefb0e794e73ec3342998b81(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44f3f5b44ca8017750e44a660495acbb0039f2b7f3b801a9b3944442caf79603(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a85856a0f48e26d94fab850ad1c4ffffd4a7228177527856fcfebba79a17478c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__371449b2af5aafa8f6e1bf7677e9e4e27090f17dd082e5844ae6f9cda89c5172(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__889fda46116fc682a801bda4a85b44202687d37fd4c425ac5686e772f17247fd(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92208cd1da3079af7605452020e8d6069c14ccf4c595973bcbd00dcbf7ad9fb2(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f697a9805089bcf9a712f3a0ea3ae01f0bfa7fb32d3034be20ec00776ff75718(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ee8d2bad189a7490c0046406045a6b94cece6301158d5fce6a5ea079b52854f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__421b0b883aa6d1d57e3cc268bbb24f3882e82c6cf20a700141c027bd918b5480(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c932b919b6c5a189ec7f82fdd97f1b462e702abb83cd5a29af611b88b9634ce1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__015ad51e6cd0f9b5f6fb6b5b8445b037515a4feeb6a2a194092b337b8390220c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a48569d9875f66ec42ac0c0cb25de11c1d40ea72eb9f4e95cfa0ab49d990fc0d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__475970a8c290a9b323fa9643209abc485d21bb311df3487d9972203ee66251c0(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5bd8af32752502fb7d92a00d9c6074bae565ee36c7c3b05d07098fab76b238c4(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54a107b7c9b50595e01744bd22abd61016b03f273135503bbb24453b2925dc15(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a413998829e1128e463867b775f1a92297ac32317be455f49dc558eeb72687e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__77b737c6d4cc6764e7ade4792ba3ec713e326a98106bc79bc316e1d82ddf4d6e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6c5460f0bf46103ff40c84fe9daa81aac23aca47bae53fd8ca2c73a09499b22(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba65af6109e0139e51e2f2a23a7dec4d0619610cd91d2af2d0e01583cc2a6b26(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70d8e3d6ddf5a358ea55894d780f2de2e6e1ccdc44698e4813ce2739a1f106c5(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18820545cac6ec1141c970ec804d77b7b9701669cc38796ce5d376cada0a683a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__272cc8dfeae4ac1d059d220761d7d21d214726563f7cbd427db17c060e60ef08(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a97382b1df035111e70cd664672cb60d42193b25583ce18b4dc65751a0db3dcc(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26c37e65978ffcb6e8159267d463f46fe71783b999fce441243af6b85e04a27a(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c66fb726ace7f7e6b1ca3d89583ba29e72467c03226b4bec409442592a61b86(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2ea80004105fac316a41a96e3f1d4fd157caca9d5b64646436182b047b6ad31(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6fbd364f5a105fa66cb9d35054b2ab83f70668e0cd379c713f8f428e526a9e5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__458bcdb43dd96ed6febc406e01ad103d00ccf8e2848842da23fdcf3bcc7d2e84(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba5ce6f96d5ff14a08507402e0360cff7006bed87b670c121cc72a3252e3eb14(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d453bcf57c568f5a0e931d68fb910e2faa03aa276698733d0f8efd25d53ee72(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__caa101081971caa0bba52f44f14da9f7f0a0442c39d1f248075e90c01fc8cfce(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPie]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1da60083a7a2c86cbf3017b4abae2e8e51923e8f45f972a8386c060db0ef2028(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3a1ab02c392542eef19eadb3c68876637cd266ac65f9b4c37c5623147d382cb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__589bc3ba3ec9d186e97d444ffa0e504f4024e0806620d0fe7fbb4cd83bf25d4f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc790feac33558ce82e7da6b46ea5abc0aa255680f412f8582eeccb4fbdc6c27(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c35d2e5bdf7a9ec1cb11dcb450fa76305b8ac2d5a9679a7970c1351d091c1fc(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__897163bfd663520b4a99a5bf32995c6575d409a765a466bb8a3d606726ec3123(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85f257581ad869b0703116e79f6aabb6b3fe7f50a2c963af1ecd8bfbd35b40ec(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c832b27e97c054556ef9647a53167551ccc5224930a0524e4971fac83ed1f16(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__946d2e3f5e6f92a9f3a540a2221844c9f9de79d665da470516ff18a0535bc4ed(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetPieUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__791b849e93822f6e2b50e0660f6d560308e2ac6bbfa7a0284b1143c9e905ef65(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__494f6d0435a62cdb05ae005ef5670c47595ccc15777a9187a84cf4f13a53ed52(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb0bc17853bf6ca3e015226b3b64ee670f9ff5d020a809d92603b0aa69009efc(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__04e7658a35735363b1e7771746fdd71e4da69a27cbb3ebf18d5556101a23f960(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c64e0f09140c1a038f00cc2671b1cf00ced9b955d7f4371e267375e175e69eb0(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__add0ee224b3bb710682e14f35fbec01f415c07194468cad73dd058d0746a3ce7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be915a26fc1686233f301f4a1089ecc50fbd44bc269a3410c247325726ee13be(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e2c8fd2f8eca9868c5439428ad1df6fe7102b6834d879bb0e418ba2c99a2171(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a346b292bcae172f07b82e49f3c124f879f3c4c074e31e30b0af90bdcba00f39(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetPieUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3009308d0fe0999b2152a55679a8e6b8da118dcfcc47d785d3576392e53fceae(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2defa39a0a4cebdaa6f74ad0282d6be95c73670a5a11fb1685e57792b91d9d9f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54d4c98b151693c79dff089de0e383ee6fb056bb857d3769f566ecc3ffc8d577(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2189841696093ca91b1aff46ec4684d8a8c64488908efb934b74e9cf49d610f4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetPieUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6752f1dfb839e17794c3fc1984b2624fde4a1900abab3147046c9d149644df0(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetStackedBarInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    tooltip: typing.Optional[typing.Union[OneDashboardPageWidgetStackedBarTooltip, typing.Dict[builtins.str, typing.Any]]] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0bd26eea911c5604fb0e77e17a59d35a9378edd60b6880ec2f96c34eb0fd75f3(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f839ef9ed337a4d13e949935494c0e42b8d9bfe656df2a6c1ccc89c558c53826(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb2dcce4a18927667ead62bd50c23761aa26c2d8d3b11d675fa1f6a50d640d7d(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__290aa61762b67f3361c0ce7558ed7e9fd91e6b46313cf72d5ab0ba0fcc928915(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58a2121577910d34fdf596430fc30f093dbd302c0dae22d75e7f10e1abd32ce6(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3de0d4a1ee959bf5168e59f7c8982c446a71ebbde60d504985b417d3645def98(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f59bb95105e84eb84f8d1b3aee9b36e2754e794257b14a4784d56190aaa50b3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fecc6c050d330d06ab7474627da4c003f82233268d013f13c50d9d01fadd0f27(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60b94100eb09cb81e3412d8bf60cd0030de4004db760f6d499798e6eafbb6187(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f96406b82c730669349823d3a84345566ed26c52a4ab0a887bf28261de1c85b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c572619186f7206f41324588175ed55ac4b0b9e3105bffaa6670a4df5d65ff00(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__932eeb23f27e24302faf82e7ce34278fde7540f1197d4f5d3d8c1612971db567(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ac342b8b5ff24332fdc0314ba2887c09b3b4e31bbcfb056794a622ae7695bda(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be73e97e0a2e9bf62f76616a95d69157418085f4eda3bed667a463fde4193c87(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ad73c3f44a19b82e35180855ea48b94d5b0206c5ce0e2c33cc87ee088d5c852(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__229495beb1cf659e1ca4fd7725ac22824b98f951b22a0e331d9b366ff9596594(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__50f9307c6cdcd8211b8bf36bcf1e2fa036e0268cb394a33334c42775d3c8931e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23db4c5e490c0732100bd077e954af4dd56b69541373928ce7b910f216c836e2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b026b984c7cbeb3242de62cd5f12cb4fb8d58b540e599df15c70ab58710a2c1f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__060e5d2d002b86e05f3bee5d0eb4902734075c528db18d36c584a97146875aac(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63badd15219ee4e72c8ff0cd07235f7be0ace619becf6994b149b00a0ead4ecb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c97c96681d7eadf6262c18cf0acddd217fb085e5d036de73c3abc8c10929aa9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fca95ff97c7603038a3b29463e72dea1f30f2ea99cb234c188258b50ebe2375f(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7914852b46f125dffc7a30dd0344fce70fd475ef289e13a20fec3f1c4970c650(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4535efb3f27cff0610164cc3c6fbbd9d026b4bf2d9f6cca8ba551956b1abe79(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29991d1b474023064ec2de11a730379d52605ced51db642050d61cfb5f616f55(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43e8cceaa67b731927ad02916218eaab1f5c3564dcaff1af46bf34d72784605b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a082a6cab50629c7033743b36c0c1240bfdb0f2f9708062708f87a8e09cf8cd2(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ecabd0c3b45547abc05c2fdd583fc49fdd4df645ab0b5832580fe2df69535d2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e51e070daf147c8fc2ff0c9bf69800bef431e82530bf8cf3e7d38d2035695226(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d194a0d0665783bc631b09e041154ca0c52b79b67d5cb79d70c2e6cc40415759(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59a30d9fa4f547018ad9632f470e738ff80bc38e15a05608ffa00e992ff9b803(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1bc80931f83bde8112fd91f49d3ad405657a3595a6954282d01933c91b528091(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d96ee217ceea3c1126461ab015bcc1012c93c6dda7799abfd2b2e20288420af(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f150644e72776a818c01bbee4f95d782d972714ffdd6ac28a4fb61c389b3922c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0d43850e1b57915009072ceb2f53c85b445747c635c886ef020e5efe9f1773d(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__becc4ba4cbb05455b09463cc87cb95dea0fef2e5bc861ebfe37abd683e74050a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe79fa5ceda58f2a3658cb31c94745308f8fc309934f1b9aaba08e5a88c8bbc8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ac4b3adcb043cc172c2402008cb2c71daaf28d84f6176af612dd5b3711bfdef(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec7369e4784a53ee68ecbcef217d7a71c00bb70064a38479aa9dd2f6da03a261(
    value: typing.Optional[OneDashboardPageWidgetStackedBarInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7739749390fcf60819ca29cc89d7bff111cdf9337b53b4baedf7b807ec0dfdba(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88b8da7f7773242a083fe2c3b2a8ac2c1b548cb7ff3732d4e0090ae1fa781d2a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb678cbacd34a0b7f7fe1a9985dab6591b73bcd0395fc392145112a02166f090(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1df99e306c62e63dff9a99f2e342c93a560d7ea804dc6e564a1849c349387e58(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c870652350c0f8e7d52225b89e44aeb759132cf47e2a309bd218f114428c659(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9eb0ac332891ac39c43f8b85eb6ce9d1833d05adc4a1c63373782b595e04f53e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBar]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__675cef10884a25b5ee1a32a128aa3e81dbe8480ff251118aee9e1a53fc5e58e3(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bdb13b206502a46776dfd622a3a43ff090a0c05a2260889c977bf3c49418d078(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__885616935c40a2feb6fe1152ae3ff238d163c41d97e5e6f2cd05ca305ffd96d1(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c3c0830921379bb1f256c9d747acbcbb6cd5812c15836e961bd20490294228a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c36f1e8442ed392077525d4e26d3622df3eed7aa1f4d4965cb6a0b736154a7d(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0aa9acfcdd431338fdc15a61e47121bed77875258d76fde9bc2efda07a94ec0(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba97d3e9f11e6d564cd211dc98c08d55bda758317630adad98e616021f674549(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b1e17a98fc14e079d689b6cd35a7b75ad2a6ea8b31fb536eb7824c4e6565505(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__540db736bddcbd751f778c395122162cd7f0bffdcde421dbbc5acf108246b0ef(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38366a4b73545e631e960d3dcd937673a9c38dec5bea6b071d66f7aa7d6f9676(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a1976160c58b5bafc8a490af099131212199a9b35cbfa3c2e359edc15314bb5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58c77d1258b3ae4e1f470c2618d46fdb75655fcd4dca9e63a09a6007ca946f04(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac3729438d1d26f228e16685f24730bb4b3981b547652c460423b54534713f7e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80154e14ecfdec68cf556f2e2f308ae1c5c8ffbcd153b0ce7aa625e2780e09a5(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a28fe2a94eb9639a887f9b68590e62b794dab093cb3329bd12adbe9d472d9386(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b2ebb0dd51ef555569782c45a308f6d84c748ebd64d85300e655bf60f5ac925(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a11826567b99602d2ad7dd54ddf66187a20ff2109cb8363181d67c77270e7af1(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__838572e9bac204d02581c3391cef36287faa09f99c20acbdfb304bf292e81572(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f260d06e7e84dd27b5bb9f500eb81c1ffc6f6af4b8cdef7b1a866dddbd1129f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9267d6309f3891321fa02d0528570bde21947647cfcfbdb242cc550ed68dbb8d(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cde01a61d52ac6ffff46f80bee5e33889a8117700fe37d1f1126b83c3f02e02b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45e8bacf877bfbc2695e35df7b91ddabc70107ac153ce00e08726311954d44a2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ccbee92d66cafaa85b08ba6969b141e2fcfb2983051b62ac6fad9f597cb7e93f(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__04a0712f807859e3fc7f2f62585abda52889c647ad497e1db15312d782d23e8e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a30678fd766a63fbceb4c771e555f0b7607d686c16b3a978e905275b5797d749(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39cb47e2d487fa252e9b081976219122e8340844da96566fea22eb440545bdd7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da96ec8f57651d5e1b3b830e8e0d61160edb4317f74923ee9319963d7ac2ed4f(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88636ab4bc4a41040d0570bf35f1c680f223e6c1e3bffb12919288c540afcb63(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38e75e51f140c73d216c29b750179194ca782d693473626e1e2fab6a0effd3b9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a44d6d4dc90e615f39fdf7c439fad2208982b77253a59287aac1b33b278499d4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9da76d6675a6fcc584d638c2ae8ab0a85b34a1ef4843bbd3d3308a614dc2c0f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0815387b81c5f4f46d31ac4a005517e464660521e77e3e16ef0da4470569c00(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__79b1b29086ae1549dfd3594db7c8f089ff93aad43f313ccf9c823d1a6418c7ec(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c90e1ed22d4114b53f5d992e667df316c2beb353bae8a3bb4bdcf7a7edd6ba0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b754c0c35aaf3b11584981a41dae41123aca194aed4c9a5eaa56d2727e79c48b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a151d236eb9affef570556865280cd4ccb0992710d11044eed4f284faa9d395b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4009e92e55ac01950ec924ffabedaabb7ae0de855e2efe2ee18926aea1dd46bc(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__947d9ef28a8ec62703ea868d8e0a136a1863147ef6558588898f8c37c2896b5b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87a6440ccab91f7dd6e21306f803c36f5fbaceac39b5639d3ad966336b18eba7(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__880a8bdf61bd79ab2a03d5fc19525b0c9024a584d4e74ad5553a56c7a6591a67(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__144792f09105d54075a8add19090621b2f21e9eac8a8dffe785e1e6fec041a92(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d85eb623e84b76a9fe9bc3d7d4cc9e3781778c79d57d682ab9c215c4572e9c68(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da9c539237347fcc20c85b90e3b69e2e80eb3133349bb938589d92fe16735072(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16587b5c3f4d6f52813579276b265b283fdbc2a33ce7d07855b9c52482618954(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eaeee0be6580621e9c7dc01cd15b9a73c0b8834a30ba6beddcbc89df27a4090c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f588099d5a482f85b77a737c70fe98b0809e9dc294fed5c3481d813f73e3ea81(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56fbe5d8eefcb3425822fe6f7a739e06ac6042f18b05188ba62f7c1b1f8fdd95(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0643ef223608f9bf5b09fe2ac8502237fd871fc2fd3c24e4de9b464ffa76174b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__635f537bb12fc0bd71ba38c0cdf646de9fb6db74019bf31cab0808f3de5aa68e(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6871d88b1b24dc39cd96f9caa4a2fe2a3d7f278ddb911823a802fc9015b66211(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ea84a438a7a29412df38aaead8d0f114188e3516a0eae46ec97657f2049a50b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBar]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2253a77baf22128dafef6f6a40517aefcda2f6aa087f52ab6905b4d106ecf210(
    *,
    mode: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9abb73c6384d5993dc1886d5bcd91f763e4b265b290bf58f578ad2056130c445(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__78d7ed3f91112217d16562f94ce1b13f356ddf96fcbeba832158a13f4f79349c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c93572c5b13485345f10a192604f354014bbd9eb8fd2e47df63eb5880b22efe8(
    value: typing.Optional[OneDashboardPageWidgetStackedBarTooltip],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ed8dc5fcfbc760823ffefb6ed48e0aca5225c6034170285f4b684921aef5b9a(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e019d7e185f76e0d123ca7ed6f05276058c36fc43effd45ee5eef388c01ef541(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6fc9d448dcda3936d44c57d09e4132a8a1752ba9f932c85ab002cc4d18417610(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3500e22746b44fd5c2fbbd287ba0ad67f1b45db999a55b80df9c3121c08ac1a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59e3e1e9a0cd797aa3324450c5dfe78252309ccdbe94ca4f114a8641c9e827b7(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d167520b55813a1f32553db39f56acc43a3c942b86348f08caa1c6dcbd52a961(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9376b3a855aad8c9627df5f926bfe8bd98d53f9886e152c4b694e11207a9b3de(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d21e790266419ab8ea79b67d35fd2f379bbcfa5a479487726128b7f20925f2e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e85f86561bd28d42b749835d2792a4c5462be30c3c4f2cb91a8072dfc2c07af(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetStackedBarUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5a83ceb37b7b464542f318fe62e6c18be5e5abc6d60e00881e1e29eeb7b26f1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46e5fb4ccbedaa8c21444fc140ef418c913e75e7d384f5e6360d7a6a16e53880(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21484fbbe56fbb32ab330df70a64e6073ec92e438719de2fa9365101e7da01a3(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1092a6298c446e45e448bbea841592bad2403297eb97de102270fd7f03db89b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e03fd5f6b479bae0dc0bab07d4eb9687cdefec9389d7f8184330481fb1a5c595(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b98f9603d2610ac4e2d8df9c37cc5767cbe5c652d4cf95a30aecc492810ee2d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f657230b7ba2288235c6953823a1c24741ec4c0dc19265377c4668e17df92b6(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27b3040012e1133c9c4f2761da5b64349aa2e15494b46cbd235f41e4cde8c923(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7a7755d5e1fcd8a0364d65c260d5ddb8eca8982ab8973e5769d083ef459804e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetStackedBarUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__095411482b4abdeacf27d40c34319f7208747c54bc10bb920bd716e0e7891311(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b85f501b198711b2dbbd61900eff1ea7cc3d16ced11eb5183f4d6f07764fc28f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18874527e738c24014888fe31c9b021ddfaf03b5a13854ddb9b869dbc64d1e1f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5b9e7ed3926421eb8e97a4373b378cb1873e30489f33444163d486559ff9315(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetStackedBarUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e0d83e80b6e042ca608dd188e4fb7a8c39b32a4189c287f49977da72e5dee31(
    *,
    column: jsii.Number,
    nrql_query: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
    row: jsii.Number,
    title: builtins.str,
    colors: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableColors, typing.Dict[builtins.str, typing.Any]]]]] = None,
    data_format: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableDataFormat, typing.Dict[builtins.str, typing.Any]]]]] = None,
    facet_show_other_series: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    filter_current_dashboard: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    height: typing.Optional[jsii.Number] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    initial_sorting: typing.Optional[typing.Union[OneDashboardPageWidgetTableInitialSorting, typing.Dict[builtins.str, typing.Any]]] = None,
    legend_enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    linked_entity_guids: typing.Optional[typing.Sequence[builtins.str]] = None,
    null_values: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableNullValues, typing.Dict[builtins.str, typing.Any]]]]] = None,
    refresh_rate: typing.Optional[builtins.str] = None,
    threshold: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableThreshold, typing.Dict[builtins.str, typing.Any]]]]] = None,
    units: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableUnits, typing.Dict[builtins.str, typing.Any]]]]] = None,
    width: typing.Optional[jsii.Number] = None,
    y_axis_left_max: typing.Optional[jsii.Number] = None,
    y_axis_left_min: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36193764262771f8a394b38eeab0c4114ae9dba200fd8c97ac700b05db5dd637(
    *,
    color: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__578e5993e7edca8bd40678a583ee5f2b59226055519cb08d19b0a2824b59b354(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eac9eb43895e8f8d3930fe83ef8cb54a6b83533fae6a5ac5fdd921f12ca4b31f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c0f46a630cad3551a56b1f525ef5ddc05085c71e19af9f778d252cfca0a886d7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f8d151dd97452260bf3065a64a45c9cd0fd94984c2645a39c40e221708dec5bc(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46ac10c08b2f5d927917b95571aae0b7dce987615562fcae3aa76fcf3e9e5992(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e29642d51e3611d555fc48ce0d0a667dfaf5e8633ae051ba3cbede85d36baf6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColors]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d4cbd00a87b0b78b20263c07f7dd58cecab0b472fc6ecd5435c965a853facbb4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7fa8053a9743cfaf96fb0a5301359994079b4944283ea4c472c52f9dfa619563(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableColorsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a489e62391fb07cf49db0a013010d9f9aa9931375e8e1b02af0e75b7f04fc1bb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f579841617173767d232e00887dac7d9e6983c32720440485f7d1e3d683e958(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableColors]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2a0ed4a561354f134e7ed87107e7652d2eae4e0fa28ec2aac1aab1bf58c6123(
    *,
    color: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c4c63cd8a0ce2b22015d068074645f9bd3565cfad4cabb5cb53b5e2756d9891(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9041e84f9dc7ba83086319dbd43f8c1ea8e2a98f8b8601a47bad3799ce67a28f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bbb256dfe396d74eb3fcb958b96f44999f2260f37c826b191dcd32d3ad0620b8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d14fcc1b7030740c6975a0d7134b72cc39a0595c632e8851cbde03e0c3001c2(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65c0129a48ac6ad75b4248a2bf5a8867a0ffbb4e8c05451e0706cad3c465b03c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7c0a20120556a870bc632bce8da482b814c20652ccf143ae20d99ba51ef4615(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableColorsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5c6ae4c8805e41482f1702956d1cc7ccc0907052c5d49342cc19b726f6814bf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23ed91fc4d2af9d647a6526af6c1e7434d6df0e1d9a222e86765fbc9f886beb0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__750369cefcc65aa9c91c4950f42496eabd8462d5c0b672976a6cc0c68994ab10(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__447c2339585abaf4b31ceeac1576e8f316fbaea42775a1ba21c462f55e72fc99(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableColorsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28cd7623121a98aacb01bb47b0290b2c8756a7b51997588ee725a6a3dd3278ea(
    *,
    name: builtins.str,
    type: builtins.str,
    format: typing.Optional[builtins.str] = None,
    precision: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__418fb53f92143e2dcdbd63a6fed4ef15d2f6d36d13a3f46711766d1739c41e1b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0c70031a20e228c3b12802e78c90df27e3e405f682956eb6cfaa5dfc2241fd4(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__787bd03b0e0235a857efdcae9daa76ab2d5656cd5dec8f563064bcbaecbf38fb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8793a3eb7f064712bcb555ae88e5c53149c10dd65b7362f58c33cd6a8f00a7c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dea4ff76f5c7f4e8275cb89b948dec416d5731170b909fbe0e740572d658e639(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a408521443abd3eb24d362cab37762462ae0a8e6a5380e2aadf67da4b6e419c6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableDataFormat]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f534d88f0bf68dcc8b1f5ef7829a8f5ffd82c8421487488e073dd71d7a1c7c9c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bcd9e2e2fe3d14b41182f7060e067e9db00e6190ebbb2708a911ece62d9f0592(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c4d056d7db0d825d63f6893d131811a5ba97bcab28c68fa8003e314bfc632cd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48665f5f8f3998dfa2f6c927a803f96ea4fd690ed227e77704f9b08184468f1b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__064d9ed2162e2ac0fe2f2719ec68dfad56deedd28f1da41df94a59a2756f5dc2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a8991f6d329af57331d17ab78e10906088ca2af73afeb3536e5fe2f7fb9cea3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableDataFormat]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4650d0fd1a42eac28dcd316d41dc2df4a608a59d0e5430e54851bd3056be8b2c(
    *,
    direction: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__230a2d015218017a8d249ad7af56d8a7ca2efaea2ca9dffca25c4a721aeb6de3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b0392908a2a2a1f67ff2f261d1883a31652384446e30dc7c588b871f9b1ade1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99cde6717f7cdd4565f0087967602a3833e28475e358d66f8f916bd420467880(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca5fb21b9264b2a016b7ad9a182380b9c8e875b0516d544a84e3dc6e7b3d3c9e(
    value: typing.Optional[OneDashboardPageWidgetTableInitialSorting],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02574d4454dbaef619ecfecb4ccf6190bd9302607082f68353a2e41bb57e366f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce39f3fe98f3d4e9814def0c1a33984b40f831c11055b7578467140fb9d5c31a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a158f1356d6465699fa770b7014f12691b594286d63e4a06295940f5aa06bc3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad302fa991f646530ac262d2330db29b15c3464efae91000979c9372d71d541c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac332ea9a3809fa2ab65fc9f3f1f2a7477140e1159caac4b76d5bf7f067a57e2(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55da68ca642ff07e9327bf7be2d97152d8a5aa32cea5b84945fc44aea5d91ea5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTable]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9afa7c932bbf9161a7a7a0e2324d970afc058eddff7934ce23c3971040f81593(
    *,
    query: builtins.str,
    account_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__498799cd268a3b287b5cf96fe92b288a513b4a2da6b76aac866192f1ec6517c8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__446a425303b99fc048a966d559f01c5d5bb538155290b287d0ff87cff5158ef4(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc480be70acfa273d06bf85dbce7328fb71f79b87ab239e599b08785862a8ef1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3501f231bd1c85e4fc96058972d7593e20244c75c5c5d288af6f88a3aa5ff151(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d783a2d6791b5ea0cd959bd588c45911ac0b87c54f1fcd11888747a020bd771(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53c6d34508347644857189fc9c70932610e371beda89eafabfb720e62d8b1e07(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNrqlQuery]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5361b89f85af50d4a30569d0a9bf6d8255406ef0825a898e8b158facbd283d78(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__480680d2416b0d2a68a30d032f95c57c1ec3c57fdadffe157ff7cdc2936b3f50(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0e1e3b5c93ecb2f88b2eb94740523206a45d19dca8b8ee198ca4e874d912415(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57e8bb4b2decc4557fc3d87c83bb7995b2c0a264c015e28f217abca8012c186b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNrqlQuery]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4f76543b0ee4b6709af9837e3fb2438955a22dbe364897efab013d83cd5a6c5(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0525f59a33d390ce56fc0ad3f4023eb21b6f094624ec094a30354a76fa856c92(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49ee606f84112c08e01c45e642d489cd5c717fb97ec7589fcf16e45f5a80e894(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31f138b38bb4db38c93d4c0c62c5fb8ccd88c576cc1c4cf557d6f516c2ad683a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c32001567e167b38ba9ac01ae3e1c572083eed197ff9b44a8eaed99c67a0b16(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__840697e0778624f353a7a9552fc068aada6f47fa9e2c7e8d734488716e613fbb(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c97d2c6076c520a75ddb86bb029bda3039644a7961e8387c562aa77640ac21f3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValues]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d8bef9d9b0bba72c5e428d1a51f0acd6e41f8964d2a48a2a2b4eb0665504289(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44ede575579f2ef29b1aa3543474219a29cafd684cf106c9533d8ee2e9ffe82d(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableNullValuesSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1294c120ec238aaf698cc2718aa9490ab23dffe9c664652c2adcb7bffe6514ef(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a9e784d55b1e583b966d2a253c47b51830e8ff2e60f6ad8544adaf39b7ccb21(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNullValues]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ca5a27ae756206f615318c2a7ed3c3dd28484c121320a0cf34824594aa32c40(
    *,
    null_value: typing.Optional[builtins.str] = None,
    series_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a608342a5bcb61dc99c8927c1e6dd1ff862b9b51c4faf8e7e7d90ca60a9c039e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9e5f6e73906e83263d999f7a70266eba50df773d8f27e858413638032397b6f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__703b5bfb40a73d5cacd7e6f7f543f2a2feee344879f8403ace1f9191ff371e59(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f717031d0b59b6806e64cce3dfb3c2dacba44267feae22254b7a98bd48de6dc(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca9adcc2f8dfe1beb9cd5dfcdb9ce706132140342cca829652cf766c46399197(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58508b1d8ac5bfdfcecc49090313ae4ddbbfda8ae8c3cc894dcdeb793427f282(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableNullValuesSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f707ac0ce2e6464445bd60d683cb8ef9de76e4a16afae739aaa3019ff96f66d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a106f2e08b841f15eef4bee77d330b7d9e5f2d3b0f8bb7f31ce6cfec2e7ac63f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7a301e35f6ff77995493ee3e39bafc257cf0a6496a6d367d4a915c22327a19d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__790e36529563f37151350221d7a24bc289658ad9c98770613337a394ae958fbf(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableNullValuesSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__882201a67bdccd4708c68e0c382af63841d7d8aa66ca37245b529751f1872f7e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ab1972b64fb81d06720170c96a9bd1e5de385c7d51c836be26d66be65d5e594(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableColors, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1726a2d4e033498b9e4564eaea4064818bd451dee917f08160ad1441248d8c53(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableDataFormat, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__408ad95c1b786a83ef249c142aa1746255ec248b8261a9e6cbd1bb2c62d41a6f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableNrqlQuery, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20010a340c717d6b428fb2116ce4ff8b63b67bea7cb231cb2b5f5a36202f9779(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableNullValues, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e4f3d72dbcfcde02fa5ffdf16e67b427fd2f9873db0952ed14f24553ff0c4d6(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableThreshold, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3b5e7937d7c22273c107c2324d5be855b04859afaa692edbf483f5e1134403b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableUnits, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46ee3c5609ccacc176610decc594b865b63ddee7ea708c32e3747cd8d746a66f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8c62fff94ba2f39c28a23a7f5b5eda5afde478bff5dfcab79b8b004a5f82dc4(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb3bc95990a9d17509b391017a7ca36cfc579da08a7bb481aa7141349bf24a77(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75683962dd9a30edf39ba94860edce0aea4eae429d6d67864270dcd4742c8fcb(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6a2586e27f9052b869620594b521df447e8f9a5837acbb16fe5eed20c6b46c0(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a817c6be8d841c35e938eee5d3028d076891a8588136ad61b9087f230e17db75(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d391b7aaeacef1003dca7ec6cb36ebb2e5a445964e27166a65cc99c76ef70535(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5844e56ff3a15d1a29266f9a22cea556ff63e44b2be7961f5f0c81c2fd437c9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__541d9e8714d1027ed6bf61b1412046f02794fc5e200cb78c61da461ac130c5ab(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94248ff54c05f1f33a9f95d5ff07baa7172d646cdc28ecd1a9cbc4e725937069(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5e7e37886fc7740d0f33d8389324d0ba9c5136f02d081f75b5ce66da77445ae(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9e21dfec71018d3c45a241b67edbecc962c9f9b71eb262a61ebb571d0254ee8(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6555d0ad8c2930d7a71788822e7da615b4fcfc7cff9ba1c776862c4c4e46a50c(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c4396cc0e7870c78943737b577eceab76f65cf0cb8a5afd74b2ce57f12d1dd9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f272ddfb7368b9d0622e90e76c24fdf504bbd8dd8616be19807b0af14df515e(
    *,
    column_name: typing.Optional[builtins.str] = None,
    from_: typing.Optional[builtins.str] = None,
    severity: typing.Optional[builtins.str] = None,
    to: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab6ef96a37e2053f1be1d48ef24060a509aa82b16e1f3d40aeaa91bd073bd9ef(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bdaab82d4e4f3382b22ea575370ca25447df0a6fccfb6f95d04cb07f089afc9(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4adf135c9e675cb934d63e8a1d21301301d4f0e60769c8140c0097f9e764bd06(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f52bf81d0776fa0d4f09280f9246b327fd2e2326b8a775e15d28c9b94a968000(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__015edee0c52a12cd46a245eb73daf99e50e7e0af4abf5d404b2c5ed7294e5716(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd8c913487fe875dc818543d1a7e43b1d7bfd7857a2c56b66e3bc4221c930906(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableThreshold]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3aeb84417296f28ef8d008d37823377155b3b985c6b8fd8427590327a84f962(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__edec3fed5fb5315b9ffdde5345c46a6409471dc5969b41a23a3e07b59fc29a77(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__242a31303c15bcda217934e82e9f035b9267678f2ad7031320ef216b80110c8d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8f52c173fb2e519b433390320f30d1a94be5f550311f7fca265f30b7fcce815(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45a98125eded3ab45f4c916cd6ef7e3cc654243d61d776925d9c863a5c436416(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f14eada92c80f0507d6366ba76181ade5e6ab4c7369153c51a20a5ed2e377044(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableThreshold]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93c09a7d8da52b25428713b5dd8c0887c216fa3d03bf08e497a7b9b1689c08c9(
    *,
    series_overrides: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]]] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fda918e7c9d9f862ce7919759bcd428330057c8d43a829931337672cbb4c17af(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39a708eefb3b02ca549089c11f7997059753e2217f2c18114140ac9cd4c63dad(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d185d3796311efe10d6cd01e0a2709fd7fe732e689637d61584b65713d3d5c8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__480d4a890c82a411722e2384767b8a0f32c5026f56ff3f0c3e58ae9d1ad6a204(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06a59f900c61025864f72f44f236c58b1914b96e84844a5ded666d05ddb5ed60(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7371b0ea2cb8856beeae111b69dbb5caa49fb26a1510d8b21d7a03421213534c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableUnits]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71411ee3855401cbf72d660741143ed8a890408684e193f919764a7110b6a2d5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9abdaaa965a0258c40aae8b2381f27221fecad2e23d378c8e8cc7004982d6958(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardPageWidgetTableUnitsSeriesOverrides, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__66c09c99dee5f988251817cfec067e3030b2f92dbeaefe1ce9f53abb7d3ea84c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e1ccb2769a34554a76d7bf1ae0152232d3ba6a36ebaf6e54e0d74e395ad5030(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableUnits]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__446fc3b207943004b42d1be168fce7a81ecf111dc118c448aea23e91443be298(
    *,
    series_name: typing.Optional[builtins.str] = None,
    unit: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd99f9bd211994a5b3f2a007a7e10b80ed9054e851d675a4ffe01d3bec255020(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5667dc4f669fb1bd420d513d1f30aacd35944dc374202f0e3878226240c5ff8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a56f0629ec188d320c65b55d1d1045f86c307bec68e8657c038564fdb5715709(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c729870f047cff1c8caedcbba846129e096f30bff27e0c15130c4e9ced8d87c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16dd467d1eb3a8962efc60598499209907860fb887b413e91dc89e7fa2dc3703(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__15b52d0380a138310ecf124a90070fb4c18e1ab62af66925137877e8889aaa9f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardPageWidgetTableUnitsSeriesOverrides]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9db65fd64fef84c8a8bd6c44fbe54da7cab89bde82df718089890a7309e0ba3f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3ea7ad44ed2acc86e7c4a33f1359e6f90a4a7e03bbc31d1b3a631cb816786b6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63a12cef140b6c1d99fca6f17a7ae5275a656946b6f5fb678b68aa435479e9d1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c6bfa5ef4dc000c4065ff0d40b9ec6202a7d1ab0ec7ab0750d32ed70672ec8a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardPageWidgetTableUnitsSeriesOverrides]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1968b96825bdfd0e91e71911576bc8adf3dc036af0a58921ac6ad9fe53a79a25(
    *,
    name: builtins.str,
    replacement_strategy: builtins.str,
    title: builtins.str,
    type: builtins.str,
    default_values: typing.Optional[typing.Sequence[builtins.str]] = None,
    is_multi_selection: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    item: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardVariableItem, typing.Dict[builtins.str, typing.Any]]]]] = None,
    nrql_query: typing.Optional[typing.Union[OneDashboardVariableNrqlQuery, typing.Dict[builtins.str, typing.Any]]] = None,
    options: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardVariableOptions, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c64b88ec3f8bfa78bcee98491b15db8a1a80015a7e55cb0a68a4a9eef671a2e(
    *,
    value: builtins.str,
    title: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab42c55be078e08fb4c34e3d675767321909300a2d1c70aefaa9c8d339423d6e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b875f342d0210dd335f9dbf8d8820362a974135eb518010ba23ad22a08b34e14(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b45434c39664813a8d67f3ebb82aa3ea99f4fdfdbb96f38e3af00f69a7187a13(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68b408951e1e79fe27b34038bbb8a8a1321e8c8fd57c87ab4ff8b2898cbb179c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36508e84671a342c97e43c005bd878c4e17fa6a2e78bac06d2e167d68836281c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d2ce05d1c3c933016335982b1770e0c03e50c90d9b56c86a27b39cec1009dd8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableItem]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27dda56b51e4801d9ca5eca2b5200572fbe199b23bbea6b64ac712d6766cdd79(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__329ef69b70c9b015549d46f7754657600af83678d54a6b795630c7b8159874c8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b598cd1f307c0bab7d3c12fc3d3f7ceb4746b64f7826907c4a7254f095859bf9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba839e5d23d59f3cedb13e3e5d9c450787f78ef26fd677bdccc0eabafbe0aa1d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariableItem]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__374ae33ec3310b10a28d36163cf8cacfabfe5a42ab220b55b5ee9e39c279fec4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__013399c814170b817f6e3cb135b1a8330b36d55a632b9100778c357baa6200ef(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6dc49b0efa512ecd69af3a3e5fa33152c85c9448eef2df5d78401181564a30ad(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01f66025c6f4e1f38927490d03ce9811a6709ae7490ae208a84ca88c625e07d2(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f66aec6eccb9cdbac36f05f299876fc211bcfd283c2822f7533a11327e39faf9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__faee5bc8fa6762e3b08e1a2a12608fb013b3909cc1269620ef8e2eb52350f6ad(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariable]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d285e813593e095ff97a0067e82b0c88047e9ae8043d748fe8eaf2d53eeadbe5(
    *,
    query: builtins.str,
    account_ids: typing.Optional[typing.Sequence[jsii.Number]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d35b6d27305e5e882d833dd0481916828d26f8b8ea3e712c4746b8b80cdf31d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__398a8abfaf045ade6ce38310b6dfec4ef8b712ca9ae7273a701d773504ae6d6e(
    value: typing.List[jsii.Number],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__10fc75e5b3cef8dd3556bbb8c1c34646e467c069627b91cd4d8e258102f337f8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7ad18d8caca4f2e686554b44699ff32666abc34757d97704163b5ed2bba2069(
    value: typing.Optional[OneDashboardVariableNrqlQuery],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ebd33c6be5b7883c54d853819be08868f6a8fe869ee87b92b11e8805d33caf4(
    *,
    excluded: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ignore_time_range: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a28c4bd371fe554f257c24383203a184d32679798dea25b07a3f7ad347933de8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__259562032786ab1f53a448a9eee1f1305514d26b139470bdbc25f8f667da85f1(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4a5b28782f05ebdc00ec87c87785486c965262d0f039a7c9051dc84645421d1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__572b15d1c8f34fedd89f0abc34744fbaf0cdd0707d3a1839e398bc27fdb10eda(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2bf59a337715efcb0e47920839ac0ceae671f3bf6b5126a5a88872e6f2f0509d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2dade36851eaee6dc67bec14e698ebb9256d100be184f6621c91dd1d13c06545(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[OneDashboardVariableOptions]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__862a01be6894be7270120ccb6facd5e2630ed6a2a6520f70f3d55aa248861739(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2bc394e3fe19ddb927b71a725b33b429b7f250a61c7e30a8ab6e2a8441e0003a(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de7f88317f44d076127906bfe7855c41d15707d173e53ed47af436c2d4678735(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e08d73c11477a60864422971f5ccfabd4ecb2b076a0e26ffb95a69662df8130(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariableOptions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__647bb1d5fd9964d9a1d7f0a59f1f53dc23974b94888dc2bfd1286fc3eb3fa03e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__199c8ae56b09fe7ce101fa3fa08d98cf82e7734660cef96e35e848215912c934(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardVariableItem, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fbd2ef235130a9fd9604cf24cc3bca3f30640c077621c944bfe64b71fdcff7e9(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[OneDashboardVariableOptions, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7b932f814eb527d3f2922af4348cc2ed4534970133c8d1b26dddb6c27ef52d6(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__991298da4497e9559b48676bd1fa45d3b7730c813f91c7e0d79c77170905af6c(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96dda6e2a2e3e8301136d3cd29775e28536c1bd178be57bd5288f8f1870e86be(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7fe432e783cebe6ab52f4fd93ca6059e33dcc44373422c007a6baaea39ff129f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e91f797f13666d025deb8da8a75c1008e7aef914f91f580ffbb67dc55b65438(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2ac6cac34171e2c55ced2735f57678cfec0bc166c3e0103d8b89d2aa395c78f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d450835486c68dfac33e70d4f958f40f46494ed5bc5beba7c3dcdf9db6aeaf40(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, OneDashboardVariable]],
) -> None:
    """Type checking stubs"""
    pass
