
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jneqsim.neqsim.process.equipment
import typing



class BatteryStorage(jneqsim.neqsim.process.equipment.ProcessEquipmentBaseClass):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], double: float): ...
    def charge(self, double: float, double2: float) -> None: ...
    def discharge(self, double: float, double2: float) -> float: ...
    def getCapacity(self) -> float: ...
    def getStateOfCharge(self) -> float: ...
    def getStateOfChargeFraction(self) -> float: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setCapacity(self, double: float) -> None: ...
    def setStateOfCharge(self, double: float) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.process.equipment.battery")``.

    BatteryStorage: typing.Type[BatteryStorage]
