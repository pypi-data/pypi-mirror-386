
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jneqsim.neqsim.process.equipment
import jneqsim.neqsim.process.equipment.compressor
import jneqsim.neqsim.process.equipment.stream
import jneqsim.neqsim.process.mechanicaldesign.compressor
import jneqsim.neqsim.thermo.system
import typing



class FuelCell(jneqsim.neqsim.process.equipment.TwoPortEquipment):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.process.equipment.stream.StreamInterface, streamInterface2: jneqsim.neqsim.process.equipment.stream.StreamInterface): ...
    def getEfficiency(self) -> float: ...
    def getHeatLoss(self) -> float: ...
    def getOxidantStream(self) -> jneqsim.neqsim.process.equipment.stream.StreamInterface: ...
    def getPower(self) -> float: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setEfficiency(self, double: float) -> None: ...
    def setOxidantStream(self, streamInterface: jneqsim.neqsim.process.equipment.stream.StreamInterface) -> None: ...

class GasTurbine(jneqsim.neqsim.process.equipment.TwoPortEquipment):
    thermoSystem: jneqsim.neqsim.thermo.system.SystemInterface = ...
    airStream: jneqsim.neqsim.process.equipment.stream.StreamInterface = ...
    airCompressor: jneqsim.neqsim.process.equipment.compressor.Compressor = ...
    combustionpressure: float = ...
    power: float = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.process.equipment.stream.StreamInterface): ...
    def calcIdealAirFuelRatio(self) -> float: ...
    def getHeat(self) -> float: ...
    def getMechanicalDesign(self) -> jneqsim.neqsim.process.mechanicaldesign.compressor.CompressorMechanicalDesign: ...
    def getPower(self) -> float: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.process.equipment.stream.StreamInterface) -> None: ...

class SolarPanel(jneqsim.neqsim.process.equipment.ProcessEquipmentBaseClass):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], double: float, double2: float, double3: float): ...
    def getPower(self) -> float: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setEfficiency(self, double: float) -> None: ...
    def setIrradiance(self, double: float) -> None: ...
    def setPanelArea(self, double: float) -> None: ...

class WindTurbine(jneqsim.neqsim.process.equipment.ProcessEquipmentBaseClass):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    def getAirDensity(self) -> float: ...
    def getPower(self) -> float: ...
    def getPowerCoefficient(self) -> float: ...
    def getRotorArea(self) -> float: ...
    def getWindSpeed(self) -> float: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setAirDensity(self, double: float) -> None: ...
    def setPowerCoefficient(self, double: float) -> None: ...
    def setRotorArea(self, double: float) -> None: ...
    def setWindSpeed(self, double: float) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.process.equipment.powergeneration")``.

    FuelCell: typing.Type[FuelCell]
    GasTurbine: typing.Type[GasTurbine]
    SolarPanel: typing.Type[SolarPanel]
    WindTurbine: typing.Type[WindTurbine]
