
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jneqsim.neqsim.process.equipment
import jneqsim.neqsim.process.processmodel
import jneqsim.neqsim.thermo.system
import typing



class Report:
    @typing.overload
    def __init__(self, processEquipmentBaseClass: jneqsim.neqsim.process.equipment.ProcessEquipmentBaseClass): ...
    @typing.overload
    def __init__(self, processModel: jneqsim.neqsim.process.processmodel.ProcessModel): ...
    @typing.overload
    def __init__(self, processModule: jneqsim.neqsim.process.processmodel.ProcessModule): ...
    @typing.overload
    def __init__(self, processModuleBaseClass: jneqsim.neqsim.process.processmodel.ProcessModuleBaseClass): ...
    @typing.overload
    def __init__(self, processSystem: jneqsim.neqsim.process.processmodel.ProcessSystem): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    @typing.overload
    def generateJsonReport(self) -> java.lang.String: ...
    @typing.overload
    def generateJsonReport(self, reportConfig: 'ReportConfig') -> java.lang.String: ...

class ReportConfig:
    detailLevel: 'ReportConfig.DetailLevel' = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, detailLevel: 'ReportConfig.DetailLevel'): ...
    def getDetailLevel(self, string: typing.Union[java.lang.String, str]) -> 'ReportConfig.DetailLevel': ...
    def setDetailLevel(self, string: typing.Union[java.lang.String, str], detailLevel: 'ReportConfig.DetailLevel') -> None: ...
    class DetailLevel(java.lang.Enum['ReportConfig.DetailLevel']):
        MINIMUM: typing.ClassVar['ReportConfig.DetailLevel'] = ...
        SUMMARY: typing.ClassVar['ReportConfig.DetailLevel'] = ...
        FULL: typing.ClassVar['ReportConfig.DetailLevel'] = ...
        HIDE: typing.ClassVar['ReportConfig.DetailLevel'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: typing.Union[java.lang.String, str]) -> 'ReportConfig.DetailLevel': ...
        @staticmethod
        def values() -> typing.MutableSequence['ReportConfig.DetailLevel']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.process.util.report")``.

    Report: typing.Type[Report]
    ReportConfig: typing.Type[ReportConfig]
