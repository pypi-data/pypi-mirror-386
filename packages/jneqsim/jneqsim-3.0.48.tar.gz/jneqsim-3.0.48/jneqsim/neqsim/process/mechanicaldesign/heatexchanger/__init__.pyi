
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jneqsim.neqsim.process.equipment
import jneqsim.neqsim.process.equipment.heatexchanger
import jneqsim.neqsim.process.mechanicaldesign
import typing



class HeatExchangerMechanicalDesign(jneqsim.neqsim.process.mechanicaldesign.MechanicalDesign):
    def __init__(self, processEquipmentInterface: jneqsim.neqsim.process.equipment.ProcessEquipmentInterface): ...
    def calcDesign(self) -> None: ...
    def getApproachTemperature(self) -> float: ...
    def getCalculatedUA(self) -> float: ...
    def getCandidateTypes(self) -> java.util.List['HeatExchangerType']: ...
    def getLogMeanTemperatureDifference(self) -> float: ...
    def getManualSelection(self) -> 'HeatExchangerType': ...
    def getSelectedSizingResult(self) -> 'HeatExchangerSizingResult': ...
    def getSelectedType(self) -> 'HeatExchangerType': ...
    def getSelectionCriterion(self) -> 'HeatExchangerMechanicalDesign.SelectionCriterion': ...
    def getSizingResults(self) -> java.util.List['HeatExchangerSizingResult']: ...
    def getSizingSummary(self) -> java.lang.String: ...
    def getUsedOverallHeatTransferCoefficient(self) -> float: ...
    @typing.overload
    def setCandidateTypes(self, list: java.util.List['HeatExchangerType']) -> None: ...
    @typing.overload
    def setCandidateTypes(self, *heatExchangerType: 'HeatExchangerType') -> None: ...
    def setManualSelection(self, heatExchangerType: 'HeatExchangerType') -> None: ...
    def setSelectionCriterion(self, selectionCriterion: 'HeatExchangerMechanicalDesign.SelectionCriterion') -> None: ...
    class SelectionCriterion(java.lang.Enum['HeatExchangerMechanicalDesign.SelectionCriterion']):
        MIN_AREA: typing.ClassVar['HeatExchangerMechanicalDesign.SelectionCriterion'] = ...
        MIN_WEIGHT: typing.ClassVar['HeatExchangerMechanicalDesign.SelectionCriterion'] = ...
        MIN_PRESSURE_DROP: typing.ClassVar['HeatExchangerMechanicalDesign.SelectionCriterion'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: typing.Union[java.lang.String, str]) -> 'HeatExchangerMechanicalDesign.SelectionCriterion': ...
        @staticmethod
        def values() -> typing.MutableSequence['HeatExchangerMechanicalDesign.SelectionCriterion']: ...

class HeatExchangerSizingResult:
    @staticmethod
    def builder() -> 'HeatExchangerSizingResult.Builder': ...
    def getApproachTemperature(self) -> float: ...
    def getEstimatedLength(self) -> float: ...
    def getEstimatedPressureDrop(self) -> float: ...
    def getEstimatedWeight(self) -> float: ...
    def getFinSurfaceArea(self) -> float: ...
    def getInnerDiameter(self) -> float: ...
    def getMetric(self, selectionCriterion: HeatExchangerMechanicalDesign.SelectionCriterion) -> float: ...
    def getModuleHeight(self) -> float: ...
    def getModuleLength(self) -> float: ...
    def getModuleWidth(self) -> float: ...
    def getOuterDiameter(self) -> float: ...
    def getOverallHeatTransferCoefficient(self) -> float: ...
    def getRequiredArea(self) -> float: ...
    def getRequiredUA(self) -> float: ...
    def getTubeCount(self) -> int: ...
    def getTubePasses(self) -> int: ...
    def getType(self) -> 'HeatExchangerType': ...
    def getWallThickness(self) -> float: ...
    def toString(self) -> java.lang.String: ...
    class Builder:
        def approachTemperature(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def build(self) -> 'HeatExchangerSizingResult': ...
        def estimatedLength(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def estimatedPressureDrop(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def estimatedWeight(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def finSurfaceArea(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def innerDiameter(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def moduleHeight(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def moduleLength(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def moduleWidth(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def outerDiameter(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def overallHeatTransferCoefficient(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def requiredArea(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def requiredUA(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...
        def tubeCount(self, int: int) -> 'HeatExchangerSizingResult.Builder': ...
        def tubePasses(self, int: int) -> 'HeatExchangerSizingResult.Builder': ...
        def type(self, heatExchangerType: 'HeatExchangerType') -> 'HeatExchangerSizingResult.Builder': ...
        def wallThickness(self, double: float) -> 'HeatExchangerSizingResult.Builder': ...

class HeatExchangerType(java.lang.Enum['HeatExchangerType']):
    SHELL_AND_TUBE: typing.ClassVar['HeatExchangerType'] = ...
    PLATE_AND_FRAME: typing.ClassVar['HeatExchangerType'] = ...
    AIR_COOLER: typing.ClassVar['HeatExchangerType'] = ...
    DOUBLE_PIPE: typing.ClassVar['HeatExchangerType'] = ...
    def createSizingResult(self, heatExchanger: jneqsim.neqsim.process.equipment.heatexchanger.HeatExchanger, double: float, double2: float, double3: float) -> HeatExchangerSizingResult: ...
    def getAllowableApproachTemperature(self) -> float: ...
    def getDisplayName(self) -> java.lang.String: ...
    def getTypicalOverallHeatTransferCoefficient(self) -> float: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: typing.Union[java.lang.String, str]) -> 'HeatExchangerType': ...
    @staticmethod
    def values() -> typing.MutableSequence['HeatExchangerType']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.process.mechanicaldesign.heatexchanger")``.

    HeatExchangerMechanicalDesign: typing.Type[HeatExchangerMechanicalDesign]
    HeatExchangerSizingResult: typing.Type[HeatExchangerSizingResult]
    HeatExchangerType: typing.Type[HeatExchangerType]
