
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.nio.file
import java.util
import jpype.protocol
import jneqsim.neqsim.blackoil
import typing



class EclipseBlackOilImporter:
    def __init__(self): ...
    @staticmethod
    def fromFile(path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath]) -> 'EclipseBlackOilImporter.Result': ...
    @staticmethod
    def fromReader(reader: java.io.Reader) -> 'EclipseBlackOilImporter.Result': ...
    class Result:
        pvt: jneqsim.neqsim.blackoil.BlackOilPVTTable = ...
        system: jneqsim.neqsim.blackoil.SystemBlackOil = ...
        rho_o_sc: float = ...
        rho_w_sc: float = ...
        rho_g_sc: float = ...
        bubblePoint: float = ...
        log: java.util.List = ...
        def __init__(self): ...
    class Units(java.lang.Enum['EclipseBlackOilImporter.Units']):
        METRIC: typing.ClassVar['EclipseBlackOilImporter.Units'] = ...
        FIELD: typing.ClassVar['EclipseBlackOilImporter.Units'] = ...
        LAB: typing.ClassVar['EclipseBlackOilImporter.Units'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: typing.Union[java.lang.String, str]) -> 'EclipseBlackOilImporter.Units': ...
        @staticmethod
        def values() -> typing.MutableSequence['EclipseBlackOilImporter.Units']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.blackoil.io")``.

    EclipseBlackOilImporter: typing.Type[EclipseBlackOilImporter]
