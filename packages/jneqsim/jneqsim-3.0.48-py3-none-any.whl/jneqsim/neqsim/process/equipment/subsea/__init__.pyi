
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jpype
import jneqsim.neqsim.process.equipment
import jneqsim.neqsim.process.equipment.pipeline
import jneqsim.neqsim.process.equipment.stream
import jneqsim.neqsim.thermo.system
import typing



class SimpleFlowLine(jneqsim.neqsim.process.equipment.TwoPortEquipment):
    length: float = ...
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.process.equipment.stream.StreamInterface): ...
    def getHeight(self) -> float: ...
    def getPipeline(self) -> jneqsim.neqsim.process.equipment.pipeline.AdiabaticTwoPhasePipe: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setHeight(self, double: float) -> None: ...

class SubseaWell(jneqsim.neqsim.process.equipment.TwoPortEquipment):
    height: float = ...
    length: float = ...
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.process.equipment.stream.StreamInterface): ...
    def getPipeline(self) -> jneqsim.neqsim.process.equipment.pipeline.AdiabaticTwoPhasePipe: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.process.equipment.subsea")``.

    SimpleFlowLine: typing.Type[SimpleFlowLine]
    SubseaWell: typing.Type[SubseaWell]
