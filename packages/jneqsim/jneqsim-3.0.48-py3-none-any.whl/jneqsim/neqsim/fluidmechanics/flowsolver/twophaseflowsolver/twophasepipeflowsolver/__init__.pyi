
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jneqsim.neqsim.fluidmechanics.flowsolver.onephaseflowsolver
import jneqsim.neqsim.fluidmechanics.flowsystem
import jneqsim.neqsim.thermo
import typing



class TwoPhasePipeFlowSolver(jneqsim.neqsim.fluidmechanics.flowsolver.onephaseflowsolver.OnePhaseFlowSolver):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, flowSystemInterface: jneqsim.neqsim.fluidmechanics.flowsystem.FlowSystemInterface, double: float, int: int): ...
    def clone(self) -> 'TwoPhasePipeFlowSolver': ...

class TwoPhaseFixedStaggeredGridSolver(TwoPhasePipeFlowSolver, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, flowSystemInterface: jneqsim.neqsim.fluidmechanics.flowsystem.FlowSystemInterface, double: float, int: int): ...
    @typing.overload
    def __init__(self, flowSystemInterface: jneqsim.neqsim.fluidmechanics.flowsystem.FlowSystemInterface, double: float, int: int, boolean: bool): ...
    def calcFluxes(self) -> None: ...
    def clone(self) -> 'TwoPhaseFixedStaggeredGridSolver': ...
    def initComposition(self, int: int, int2: int) -> None: ...
    def initFinalResults(self, int: int) -> None: ...
    def initMatrix(self) -> None: ...
    def initNodes(self) -> None: ...
    def initPhaseFraction(self, int: int) -> None: ...
    def initPressure(self, int: int) -> None: ...
    def initProfiles(self) -> None: ...
    def initTemperature(self, int: int) -> None: ...
    def initVelocity(self, int: int) -> None: ...
    def setComponentConservationMatrix(self, int: int, int2: int) -> None: ...
    def setComponentConservationMatrix2(self, int: int, int2: int) -> None: ...
    def setEnergyMatrixTDMA(self, int: int) -> None: ...
    def setImpulsMatrixTDMA(self, int: int) -> None: ...
    def setMassConservationMatrix(self, int: int) -> None: ...
    def setPhaseFractionMatrix(self, int: int) -> None: ...
    def solveTDMA(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.fluidmechanics.flowsolver.twophaseflowsolver.twophasepipeflowsolver")``.

    TwoPhaseFixedStaggeredGridSolver: typing.Type[TwoPhaseFixedStaggeredGridSolver]
    TwoPhasePipeFlowSolver: typing.Type[TwoPhasePipeFlowSolver]
