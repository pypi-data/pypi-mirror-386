
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jpype
import jneqsim.neqsim.thermo.phase
import org.netlib.util
import typing



class NeqSimVega:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface): ...
    def getAlpha0_Vega(self) -> typing.MutableSequence[org.netlib.util.doubleW]: ...
    def getAlphares_Vega(self) -> typing.MutableSequence[typing.MutableSequence[org.netlib.util.doubleW]]: ...
    @typing.overload
    def getDensity(self) -> float: ...
    @typing.overload
    def getDensity(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> float: ...
    @typing.overload
    def getMolarDensity(self) -> float: ...
    @typing.overload
    def getMolarDensity(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> float: ...
    def getPressure(self) -> float: ...
    def getProperties(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> typing.MutableSequence[float]: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    @typing.overload
    def propertiesVega(self) -> typing.MutableSequence[float]: ...
    @typing.overload
    def propertiesVega(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> typing.MutableSequence[float]: ...
    def setPhase(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> None: ...

class Vega:
    def __init__(self): ...
    def DensityVega(self, int: int, double: float, double2: float, doubleW: org.netlib.util.doubleW, intW: org.netlib.util.intW, stringW: org.netlib.util.StringW) -> None: ...
    def PressureVega(self, double: float, double2: float, doubleW: org.netlib.util.doubleW, doubleW2: org.netlib.util.doubleW) -> None: ...
    def SetupVega(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    def propertiesVega(self, double: float, double2: float, doubleW: org.netlib.util.doubleW, doubleW2: org.netlib.util.doubleW, doubleW3: org.netlib.util.doubleW, doubleW4: org.netlib.util.doubleW, doubleW5: org.netlib.util.doubleW, doubleW6: org.netlib.util.doubleW, doubleW7: org.netlib.util.doubleW, doubleW8: org.netlib.util.doubleW, doubleW9: org.netlib.util.doubleW, doubleW10: org.netlib.util.doubleW, doubleW11: org.netlib.util.doubleW, doubleW12: org.netlib.util.doubleW, doubleW13: org.netlib.util.doubleW, doubleW14: org.netlib.util.doubleW, doubleW15: org.netlib.util.doubleW, doubleW16: org.netlib.util.doubleW) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.thermo.util.Vega")``.

    NeqSimVega: typing.Type[NeqSimVega]
    Vega: typing.Type[Vega]
