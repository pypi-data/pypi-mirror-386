"""Request Body Schemas for API Tools

DO NOT EDIT THIS MODULE DIRECTLY.

THIS MODULE WAS AUTO-GENERATED AND CONTAINS OpenAPI REQUEST BODY SCHEMAS
FOR TOOLS WITH COMPLEX REQUEST BODIES. ANY CHANGES TO THIS MODULE WILL
BE OVERWRITTEN BY THE TRANSPILER.
"""

from typing import Any

REQUEST_BODY_SCHEMAS: dict[str, Any] = {
    "CREATEMIROBOARD": '{"type": "object", "properties": {"description": {"type": "string", "description": "Description of the board.", "maxLength": 300, "minLength": 0}, "name": {"type": "string", "default": "Untitled", "description": "Name for the board.", "maxLength": 60, "minLength": 1}, "policy": {"type": "object", "description": "Defines the permissions policies and sharing policies for the board.", "properties": {"permissionsPolicy": {"type": "object", "description": "Defines the permissions policies for the board.", "properties": {"collaborationToolsStartAccess": {"type": "string", "default": "all_editors", "description": "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.", "enum": ["all_editors", "board_owners_and_coowners"]}, "copyAccess": {"type": "string", "default": "anyone", "description": "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.", "enum": ["anyone", "team_members", "team_editors", "board_owner"]}, "sharingAccess": {"type": "string", "default": "team_members_with_editing_rights", "description": "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.", "enum": ["team_members_with_editing_rights", "owner_and_coowners"]}}}, "sharingPolicy": {"type": "object", "description": "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.", "properties": {"access": {"type": "string", "default": "private", "description": "Defines the public-level access to the board.", "enum": ["private", "view", "edit", "comment"]}, "inviteToAccountAndBoardLinkAccess": {"type": "string", "default": "no_access", "description": "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access` regardless of the value that you assign for this parameter.", "enum": ["viewer", "commenter", "editor", "no_access"]}, "organizationAccess": {"type": "string", "default": "private", "description": "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.", "enum": ["private", "view", "comment", "edit"]}, "teamAccess": {"type": "string", "description": "Defines the team-level access to the board. By default, **edit** for the free plan and **private** for other plans.", "enum": ["private", "view", "comment", "edit"]}}}}}, "teamId": {"type": "string", "description": "Unique identifier (ID) of the team where the board must be placed."}, "projectId": {"type": "string", "description": "Unique identifier (ID) of the project to which the board must be added."}}}',  # noqa: E501
    "COPYMIROBOARD": '{"type": "object", "properties": {"description": {"type": "string", "description": "Description of the board.", "maxLength": 300, "minLength": 0}, "name": {"type": "string", "default": "Untitled", "description": "Name for the board.", "maxLength": 60, "minLength": 1}, "policy": {"type": "object", "description": "Defines the permissions policies and sharing policies for the board.", "properties": {"permissionsPolicy": {"type": "object", "description": "Defines the permissions policies for the board.", "properties": {"collaborationToolsStartAccess": {"type": "string", "default": "all_editors", "description": "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.", "enum": ["all_editors", "board_owners_and_coowners"]}, "copyAccess": {"type": "string", "default": "anyone", "description": "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.", "enum": ["anyone", "team_members", "team_editors", "board_owner"]}, "sharingAccess": {"type": "string", "default": "team_members_with_editing_rights", "description": "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.", "enum": ["team_members_with_editing_rights", "owner_and_coowners"]}}}, "sharingPolicy": {"type": "object", "description": "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.", "properties": {"access": {"type": "string", "default": "private", "description": "Defines the public-level access to the board.", "enum": ["private", "view", "edit", "comment"]}, "inviteToAccountAndBoardLinkAccess": {"type": "string", "default": "no_access", "description": "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access` regardless of the value that you assign for this parameter.", "enum": ["viewer", "commenter", "editor", "no_access"]}, "organizationAccess": {"type": "string", "default": "private", "description": "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.", "enum": ["private", "view", "comment", "edit"]}, "teamAccess": {"type": "string", "description": "Defines the team-level access to the board. By default, **edit** for the free plan and **private** for other plans.", "enum": ["private", "view", "comment", "edit"]}}}}}, "teamId": {"type": "string", "description": "Unique identifier (ID) of the team where the board must be placed."}}}',  # noqa: E501
    "UPDATEMIROBOARD": '{"type": "object", "properties": {"description": {"type": "string", "description": "Description of the board.", "maxLength": 300, "minLength": 0}, "name": {"type": "string", "default": "Untitled", "description": "Name for the board.", "maxLength": 60, "minLength": 1}, "policy": {"type": "object", "description": "Defines the permissions policies and sharing policies for the board.", "properties": {"permissionsPolicy": {"type": "object", "description": "Defines the permissions policies for the board.", "properties": {"collaborationToolsStartAccess": {"type": "string", "default": "all_editors", "description": "Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.", "enum": ["all_editors", "board_owners_and_coowners"]}, "copyAccess": {"type": "string", "default": "anyone", "description": "Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.", "enum": ["anyone", "team_members", "team_editors", "board_owner"]}, "sharingAccess": {"type": "string", "default": "team_members_with_editing_rights", "description": "Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.", "enum": ["team_members_with_editing_rights", "owner_and_coowners"]}}}, "sharingPolicy": {"type": "object", "description": "Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access.", "properties": {"access": {"type": "string", "default": "private", "description": "Defines the public-level access to the board.", "enum": ["private", "view", "edit", "comment"]}, "inviteToAccountAndBoardLinkAccess": {"type": "string", "default": "no_access", "description": "Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access` regardless of the value that you assign for this parameter.", "enum": ["viewer", "commenter", "editor", "no_access"]}, "organizationAccess": {"type": "string", "default": "private", "description": "Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.", "enum": ["private", "view", "comment", "edit"]}, "teamAccess": {"type": "string", "description": "Defines the team-level access to the board. By default, **edit** for the free plan and **private** for other plans.", "enum": ["private", "view", "comment", "edit"]}}}}}, "teamId": {"type": "string", "description": "Unique identifier (ID) of the team where the board must be placed."}, "projectId": {"type": "string", "description": "Unique identifier (ID) of the project to which the board must be added."}}}',  # noqa: E501
    "ADDAPPCARDTOBOARD": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains app card item data, such as the title, description, or fields.", "properties": {"description": {"type": "string", "description": "A short text description to add context about the app card.", "example": "Sample app card description"}, "fields": {"type": "array", "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.", "items": {"type": "object", "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.", "properties": {"fillColor": {"type": "string", "description": "Hex value representing the color that fills the background area of the preview field, when it\'s displayed on the app card.", "example": "#2fa9e3"}, "iconShape": {"type": "string", "default": "round", "description": "The shape of the icon on the preview field.", "enum": ["round", "square"]}, "iconUrl": {"type": "string", "description": "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.", "example": "https://cdn-icons-png.flaticon.com/512/5695/5695864.png"}, "textColor": {"type": "string", "description": "Hex value representing the color of the text string assigned to `value`.", "example": "#1a1a1a"}, "tooltip": {"type": "string", "description": "A short text displayed in a tooltip when clicking or hovering over the preview field.", "example": "Completion status indicator"}, "value": {"type": "string", "description": "The actual data value of the custom field.\nIt can be any type of information that you want to convey.", "example": "Status: in progress"}}}}, "status": {"type": "string", "default": "disconnected", "description": "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.", "enum": ["disconnected", "connected", "disabled"]}, "title": {"type": "string", "default": "sample app card item", "description": "A short text header to identify the app card."}}}, "style": {"type": "object", "description": "Contains information about the style of an app card item, such as the fill color.", "properties": {"fillColor": {"type": "string", "description": "Hex value of the border color of the app card.\nDefault: `#2d9bf0`.", "example": "#2d9bf0"}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels.", "example": 60}, "rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.", "example": 320}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "UPDATEMIROAPPCARD": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains app card item data, such as the title, description, or fields.", "properties": {"description": {"type": "string", "description": "A short text description to add context about the app card.", "example": "Sample app card description"}, "fields": {"type": "array", "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.", "items": {"type": "object", "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.", "properties": {"fillColor": {"type": "string", "description": "Hex value representing the color that fills the background area of the preview field, when it\'s displayed on the app card.", "example": "#2fa9e3"}, "iconShape": {"type": "string", "default": "round", "description": "The shape of the icon on the preview field.", "enum": ["round", "square"]}, "iconUrl": {"type": "string", "description": "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.", "example": "https://cdn-icons-png.flaticon.com/512/5695/5695864.png"}, "textColor": {"type": "string", "description": "Hex value representing the color of the text string assigned to `value`.", "example": "#1a1a1a"}, "tooltip": {"type": "string", "description": "A short text displayed in a tooltip when clicking or hovering over the preview field.", "example": "Completion status indicator"}, "value": {"type": "string", "description": "The actual data value of the custom field.\nIt can be any type of information that you want to convey.", "example": "Status: in progress"}}}}, "status": {"type": "string", "default": "disconnected", "description": "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.", "enum": ["disconnected", "connected", "disabled"]}, "title": {"type": "string", "default": "sample app card item", "description": "A short text header to identify the app card."}}}, "style": {"type": "object", "description": "Contains information about the style of an app card item, such as the fill color.", "properties": {"fillColor": {"type": "string", "description": "Hex value of the border color of the app card.", "example": "#2d9bf0"}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels.", "example": 60}, "rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.", "example": 320}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "ADDCARDTOMIROBOARD": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains card item data, such as the title, description, due date, or assignee ID.", "properties": {"assigneeId": {"type": "string", "format": "int64", "description": "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is numeric, and it is automatically assigned to a user when they first sign up.", "example": "3074457362577955300"}, "description": {"type": "string", "description": "A short text description to add context about the card.", "example": "sample card description"}, "dueDate": {"type": "string", "format": "date-time", "description": "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).", "example": "2023-10-12T22:00:55.000Z"}, "title": {"type": "string", "description": "A short text header for the card.", "example": "sample card item"}}}, "style": {"type": "object", "description": "Contains information about the style of a card item, such as the card theme.", "properties": {"cardTheme": {"type": "string", "description": "Hex value of the border color of the card.\nDefault: `#2d9bf0`.", "example": "#2d9bf0"}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels.", "example": 60}, "rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.", "example": 320}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "UPDATECARDONBOARD": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains card item data, such as the title, description, due date, or assignee ID.", "properties": {"assigneeId": {"type": "string", "format": "int64", "description": "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is numeric, and it is automatically assigned to a user when they first sign up.", "example": "3074457362577955300"}, "description": {"type": "string", "description": "A short text description to add context about the card.", "example": "sample card description"}, "dueDate": {"type": "string", "format": "date-time", "description": "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).", "example": "2023-10-12T22:00:55.000Z"}, "title": {"type": "string", "description": "A short text header for the card.", "example": "sample card item"}}}, "style": {"type": "object", "description": "Contains information about the style of a card item, such as the card theme.", "properties": {"cardTheme": {"type": "string", "description": "Hex value of the border color of the card.", "example": "#2d9bf0"}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels.", "example": 60}, "rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.", "example": 320}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "ADDCONNECTORTOBOARD": '{"type": "object", "description": "startItem.id must be different from endItem.id", "properties": {"startItem": {"type": "object", "description": "The end point of the connector. endItem.id must be different from startItem.id", "properties": {"id": {"type": "string", "description": "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.", "example": "3458764517517818867"}, "position": {"type": "object", "description": "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.", "properties": {"x": {"type": "string", "description": "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.", "example": "50%"}, "y": {"type": "string", "description": "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.", "example": "0%"}}}, "snapTo": {"type": "string", "description": "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.", "enum": ["auto", "top", "right", "bottom", "left"]}}}, "endItem": {"type": "object", "description": "The end point of the connector. endItem.id must be different from startItem.id", "properties": {"id": {"type": "string", "description": "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.", "example": "3458764517517818867"}, "position": {"type": "object", "description": "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.", "properties": {"x": {"type": "string", "description": "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.", "example": "50%"}, "y": {"type": "string", "description": "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.", "example": "0%"}}}, "snapTo": {"type": "string", "description": "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.", "enum": ["auto", "top", "right", "bottom", "left"]}}}, "shape": {"type": "string", "description": "The path type of the connector line, defines curvature. Default: curved.", "enum": ["straight", "elbowed", "curved"]}, "captions": {"type": "array", "description": "Blocks of text you want to display on the connector.", "items": {"type": "object", "description": "Contains the connector\'s caption data, such as content and its position.", "properties": {"content": {"type": "string", "description": "The text you want to display on the connector. Supports inline HTML tags.", "example": "<p>Caption text</p>", "maxLength": 200, "minLength": 0}, "position": {"type": "string", "description": "The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%", "example": "50%"}, "textAlignVertical": {"type": "string", "description": "The vertical position of the text on the connector. Default: middle", "enum": ["top", "middle", "bottom"]}}, "required": ["content"]}, "maxItems": 20, "maxLength": 20, "minItems": 0}, "style": {"type": "object", "description": "Contains information about the style of a connector, such as the color or caption font size", "properties": {"color": {"type": "string", "description": "Hex value representing the color for the captions on the connector. Default: `#1a1a1a`", "example": "#9510ac"}, "endStrokeCap": {"type": "string", "description": "The decoration cap of the connector end, like an arrow or circle. Default: stealth.", "enum": ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"]}, "fontSize": {"type": "string", "description": "Defines the font size, in dp, for the captions on the connector. Default: 14", "example": "15", "maximum": 288, "minimum": 10}, "startStrokeCap": {"type": "string", "description": "The decoration cap of the connector end, like an arrow or circle. Default: none.", "enum": ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"]}, "strokeColor": {"type": "string", "description": "Hex value of the color of the connector line. Default: #000000.", "example": "#2d9bf0"}, "strokeStyle": {"type": "string", "description": "The stroke pattern of the connector line. Default: normal.", "enum": ["normal", "dotted", "dashed"]}, "strokeWidth": {"type": "string", "description": "The thickness of the connector line, in dp. Default: 1.0.", "example": "2.0", "maximum": 24, "minimum": 1}, "textOrientation": {"type": "string", "description": "The captions orientation relatively to the connector line curvature. Default: aligned.", "enum": ["horizontal", "aligned"]}}}}, "required": ["endItem", "startItem"]}',  # noqa: E501
    "UPDATECONNECTORONBOARD": '{"type": "object", "description": "If both are provided, startItem.id must be different from endItem.id", "properties": {"startItem": {"type": "object", "description": "The ending point of the connector. If startItem is also provided, endItem.id must be different from startItem.id", "properties": {"id": {"type": "string", "description": "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.", "example": "3458764517517818867"}, "position": {"type": "object", "description": "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.", "properties": {"x": {"type": "string", "description": "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.", "example": "50%"}, "y": {"type": "string", "description": "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.", "example": "0%"}}}, "snapTo": {"type": "string", "description": "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.", "enum": ["auto", "top", "right", "bottom", "left"]}}}, "endItem": {"type": "object", "description": "The ending point of the connector. If startItem is also provided, endItem.id must be different from startItem.id", "properties": {"id": {"type": "string", "description": "Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.", "example": "3458764517517818867"}, "position": {"type": "object", "description": "The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner.", "properties": {"x": {"type": "string", "description": "X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.", "example": "50%"}, "y": {"type": "string", "description": "Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.", "example": "0%"}}}, "snapTo": {"type": "string", "description": "The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.", "enum": ["auto", "top", "right", "bottom", "left"]}}}, "shape": {"type": "string", "description": "The path type of the connector line, defines curvature. Default: curved.", "enum": ["straight", "elbowed", "curved"]}, "captions": {"type": "array", "description": "Blocks of text you want to display on the connector.", "items": {"type": "object", "description": "Contains the connector\'s caption data, such as content and its position.", "properties": {"content": {"type": "string", "description": "The text you want to display on the connector. Supports inline HTML tags.", "example": "<p>Caption text</p>", "maxLength": 200, "minLength": 0}, "position": {"type": "string", "description": "The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%", "example": "50%"}, "textAlignVertical": {"type": "string", "description": "The vertical position of the text on the connector. Default: middle", "enum": ["top", "middle", "bottom"]}}, "required": ["content"]}, "maxItems": 20, "maxLength": 20, "minItems": 0}, "style": {"type": "object", "description": "Contains information about the style of a connector, such as the color or caption font size", "properties": {"color": {"type": "string", "description": "Hex value representing the color for the captions on the connector.", "example": "#9510ac"}, "endStrokeCap": {"type": "string", "description": "The decoration cap of the connector end, like an arrow or circle.", "enum": ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"]}, "fontSize": {"type": "string", "description": "Defines the font size, in dp, for the captions on the connector.", "example": "15", "maximum": 288, "minimum": 10}, "startStrokeCap": {"type": "string", "description": "The decoration cap of the connector end, like an arrow or circle.", "enum": ["none", "stealth", "rounded_stealth", "diamond", "filled_diamond", "oval", "filled_oval", "arrow", "triangle", "filled_triangle", "erd_one", "erd_many", "erd_only_one", "erd_zero_or_one", "erd_one_or_many", "erd_zero_or_many", "unknown"]}, "strokeColor": {"type": "string", "description": "Hex value of the color of the connector line.", "example": "#2d9bf0"}, "strokeStyle": {"type": "string", "description": "The stroke pattern of the connector line.", "enum": ["normal", "dotted", "dashed"]}, "strokeWidth": {"type": "string", "description": "The thickness of the connector line, in dp.", "example": "2.0", "maximum": 24, "minimum": 1}, "textOrientation": {"type": "string", "description": "The captions orientation relatively to the connector line curvature.", "enum": ["horizontal", "aligned"]}}}}}',  # noqa: E501
    "ADDSHAPETOMIROBOARD": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains shape item data, such as the content or the type of the shape.", "properties": {"content": {"type": "string", "description": "The text you want to display on the shape.\n<br>**Not supported for shapes:**\n<ul>\n  <li>flow_chart_or</li>\n  <li>flow_chart_summing_junction</li>\n</ul>", "example": "Hello"}, "shape": {"type": "string", "default": "rectangle", "description": "Defines the geometric shape of the item when it is rendered on the board. <details>\n  <summary>Basic shapes</summary>\n  <ul>\n    <li>rectangle</li>\n    <li>round_rectangle</li>\n    <li>circle</li>\n    <li>triangle</li>\n    <li>rhombus</li>\n    <li>parallelogram</li>\n    <li>trapezoid</li>\n    <li>pentagon</li>\n    <li>hexagon</li>\n    <li>octagon</li>\n    <li>wedge_round_rectangle_callout</li>\n    <li>star</li>\n    <li>flow_chart_predefined_process</li>\n    <li>cloud</li>\n    <li>cross</li>\n    <li>can</li>\n    <li>right_arrow</li>\n    <li>left_arrow</li>\n    <li>left_right_arrow</li>\n    <li>left_brace</li>\n    <li>right_brace</li>\n  </ul>\n</details>\n<details>\n  <summary>Flowchart shapes</summary>\n  <ul>\n    <li>flow_chart_connector</li>\n    <li>flow_chart_magnetic_disk</li>\n    <li>flow_chart_input_output</li>\n    <li>flow_chart_decision</li>\n    <li>flow_chart_delay</li>\n    <li>flow_chart_display</li>\n    <li>flow_chart_document</li>\n    <li>flow_chart_magnetic_drum</li>\n    <li>flow_chart_internal_storage</li>\n    <li>flow_chart_manual_input</li>\n    <li>flow_chart_manual_operation</li>\n    <li>flow_chart_merge</li>\n    <li>flow_chart_multidocuments</li>\n    <li>flow_chart_note_curly_left</li>\n    <li>flow_chart_note_curly_right</li>\n    <li>flow_chart_note_square</li>\n    <li>flow_chart_offpage_connector</li>\n    <li>flow_chart_or</li>\n    <li>flow_chart_predefined_process_2</li>\n    <li>flow_chart_preparation</li>\n    <li>flow_chart_process</li>\n    <li>flow_chart_online_storage</li>\n    <li>flow_chart_summing_junction</li>\n    <li>flow_chart_terminator</li>\n  </ul>\n</details>"}}}, "style": {"type": "object", "description": "Contains information about the shape style, such as the border color or opacity. <br> All properties in style object are supported for shape types aren\'t listed below. <br> <table>\n  <tr>\n    <th align="left">Shape type</th>\n    <th align="left">Unsupported properties</th>\n  </tr>\n  <tr>\n    <td>flow_chart_or</td>\n    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_summing_junction</td>\n    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_left</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_right</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_square</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n</table>", "properties": {"borderColor": {"type": "string", "description": "Defines the color of the border of the shape.\nDefault: `#1a1a1a` (dark gray)."}, "borderOpacity": {"type": "string", "description": "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` (solid color).", "maximum": 1, "minimum": 0}, "borderStyle": {"type": "string", "description": "Defines the style used to represent the border of the shape.\nDefault: `normal`.", "enum": ["normal", "dotted", "dashed"]}, "borderWidth": {"type": "string", "description": "Defines the thickness of the shape border, in dp.\nDefault: `2.0`.", "maximum": 24, "minimum": 1}, "color": {"type": "string", "description": "Hex value representing the color for the text within the shape item.\nDefault: `#1a1a1a`.", "example": "#1a1a1a"}, "fillColor": {"type": "string", "description": "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`\nDefault: #ffffff.", "example": "#8fd14f"}, "fillOpacity": {"type": "string", "description": "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `Flowchart` shapes: `1.0`. `Basic` shapes: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.\n", "maximum": 1, "minimum": 0}, "fontFamily": {"type": "string", "description": "Defines the font type for the text in the shape item.\nDefault: `arial`.", "enum": ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"]}, "fontSize": {"type": "string", "description": "Defines the font size, in dp, for the text on the shape.\nDefault: `14`.", "maximum": 288, "minimum": 10}, "textAlign": {"type": "string", "description": "Defines how the shape text is horizontally aligned.\nDefault:\nFlowchart shapes: `center`.\nBasic shapes: `left`.\n\n`unknown` is returned for unsupported shapes.", "enum": ["left", "right", "center", "unknown"]}, "textAlignVertical": {"type": "string", "description": "Defines how the shape text is vertically aligned.\nDefault:\nFlowchart shapes: `middle`.\nBasic shapes: `top`.\n\n`unknown` is returned for unsupported shapes.", "enum": ["top", "middle", "bottom", "unknown"]}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels.", "example": 60}, "rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.", "example": 320}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "UPDATEBOARDSHAPE": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains shape item data, such as the content or the type of the shape.", "properties": {"content": {"type": "string", "description": "The text you want to display on the shape.\n**Note: When updating a shape type to one of the types below, existing `content` will be lost.**\n<br>**Not supported for shapes:**\n<ul>\n  <li>flow_chart_or</li>\n  <li>flow_chart_summing_junction</li>\n</ul>", "example": "Hello"}, "shape": {"type": "string", "default": "rectangle", "description": "Defines the geometric shape of the item when it is rendered on the board. <details>\n  <summary>Basic shapes</summary>\n  <ul>\n    <li>rectangle</li>\n    <li>round_rectangle</li>\n    <li>circle</li>\n    <li>triangle</li>\n    <li>rhombus</li>\n    <li>parallelogram</li>\n    <li>trapezoid</li>\n    <li>pentagon</li>\n    <li>hexagon</li>\n    <li>octagon</li>\n    <li>wedge_round_rectangle_callout</li>\n    <li>star</li>\n    <li>flow_chart_predefined_process</li>\n    <li>cloud</li>\n    <li>cross</li>\n    <li>can</li>\n    <li>right_arrow</li>\n    <li>left_arrow</li>\n    <li>left_right_arrow</li>\n    <li>left_brace</li>\n    <li>right_brace</li>\n  </ul>\n</details>\n<details>\n  <summary>Flowchart shapes</summary>\n  <ul>\n    <li>flow_chart_connector</li>\n    <li>flow_chart_magnetic_disk</li>\n    <li>flow_chart_input_output</li>\n    <li>flow_chart_decision</li>\n    <li>flow_chart_delay</li>\n    <li>flow_chart_display</li>\n    <li>flow_chart_document</li>\n    <li>flow_chart_magnetic_drum</li>\n    <li>flow_chart_internal_storage</li>\n    <li>flow_chart_manual_input</li>\n    <li>flow_chart_manual_operation</li>\n    <li>flow_chart_merge</li>\n    <li>flow_chart_multidocuments</li>\n    <li>flow_chart_note_curly_left</li>\n    <li>flow_chart_note_curly_right</li>\n    <li>flow_chart_note_square</li>\n    <li>flow_chart_offpage_connector</li>\n    <li>flow_chart_or</li>\n    <li>flow_chart_predefined_process_2</li>\n    <li>flow_chart_preparation</li>\n    <li>flow_chart_process</li>\n    <li>flow_chart_online_storage</li>\n    <li>flow_chart_summing_junction</li>\n    <li>flow_chart_terminator</li>\n  </ul>\n</details>"}}}, "style": {"type": "object", "description": "Contains information about the shape style, such as the border color or opacity. <br> All properties in style object are supported for shape types aren\'t listed below. <br> <table>\n  <tr>\n    <th align="left">Shape type</th>\n    <th align="left">Unsupported properties</th>\n  </tr>\n  <tr>\n    <td>flow_chart_or</td>\n    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_summing_junction</td>\n    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_left</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_right</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_square</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n</table>", "properties": {"borderColor": {"type": "string", "description": "Defines the color of the border of the shape."}, "borderOpacity": {"type": "string", "description": "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid", "maximum": 1, "minimum": 0}, "borderStyle": {"type": "string", "description": "Defines the style used to represent the border of the shape.", "enum": ["normal", "dotted", "dashed"]}, "borderWidth": {"type": "string", "description": "Defines the thickness of the shape border, in dp.", "maximum": 24, "minimum": 1}, "color": {"type": "string", "description": "Hex value representing the color for the text within the shape item.", "example": "#1a1a1a"}, "fillColor": {"type": "string", "description": "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`", "example": "#8fd14f"}, "fillOpacity": {"type": "string", "description": "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\n", "maximum": 1, "minimum": 0}, "fontFamily": {"type": "string", "description": "Defines the font type for the text in the shape item.", "enum": ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"]}, "fontSize": {"type": "string", "description": "Defines the font size, in dp, for the text on the shape.", "maximum": 288, "minimum": 10}, "textAlign": {"type": "string", "description": "Defines how the sticky note text is horizontally aligned.", "enum": ["left", "right", "center"]}, "textAlignVertical": {"type": "string", "description": "Defines how the sticky note text is vertically aligned.", "enum": ["top", "middle", "bottom"]}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels.", "example": 60}, "rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.", "example": 320}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "ADDSTICKYNOTETOBOARD": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains sticky note item data, such as the content or shape of the sticky note.", "properties": {"content": {"type": "string", "description": "The actual text (content) that appears in the sticky note item.", "example": "Hello"}, "shape": {"type": "string", "default": "square", "description": "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.", "enum": ["square", "rectangle"]}}}, "style": {"type": "object", "description": "Contains information about the style of a sticky note item, such as the fill color or text alignment.", "properties": {"fillColor": {"type": "string", "description": "Fill color for the sticky note.\nDefault: `light_yellow`.", "enum": ["gray", "light_yellow", "yellow", "orange", "light_green", "green", "dark_green", "cyan", "light_pink", "pink", "violet", "red", "light_blue", "blue", "dark_blue", "black"]}, "textAlign": {"type": "string", "description": "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.", "enum": ["left", "right", "center"]}, "textAlignVertical": {"type": "string", "description": "Defines how the sticky note text is vertically aligned.\nDefault: `top`.", "enum": ["top", "middle", "bottom"]}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item. You can set either the width or height. You cannot set both the width and height at the same time.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels."}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "UPDATESTICKYNOTE": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains sticky note item data, such as the content or shape of the sticky note.", "properties": {"content": {"type": "string", "description": "The actual text (content) that appears in the sticky note item.", "example": "Hello"}, "shape": {"type": "string", "default": "square", "description": "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.", "enum": ["square", "rectangle"]}}}, "style": {"type": "object", "description": "Contains information about the style of a sticky note item, such as the fill color or text alignment.", "properties": {"fillColor": {"type": "string", "description": "Fill color for the sticky note.", "enum": ["gray", "light_yellow", "yellow", "orange", "light_green", "green", "dark_green", "cyan", "light_pink", "pink", "violet", "red", "light_blue", "blue", "dark_blue", "black"]}, "textAlign": {"type": "string", "description": "Defines how the sticky note text is horizontally aligned.", "enum": ["left", "right", "center"]}, "textAlignVertical": {"type": "string", "description": "Defines how the sticky note text is vertically aligned.", "enum": ["top", "middle", "bottom"]}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item. You can set either the width or height. You cannot set both the width and height at the same time.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels."}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "ADDTEXTTOMIROBOARD": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).", "properties": {"content": {"type": "string", "description": "The actual text (content) that appears in the text item.", "example": "Hello"}}, "required": ["content"]}, "style": {"type": "object", "description": "Contains information about the style of a text item, such as the fill color or font family.", "properties": {"color": {"type": "string", "description": "Hex value representing the color for the text within the text item.\nDefault: `#1a1a1a`.", "example": "#1a1a1a"}, "fillColor": {"type": "string", "description": "Background color of the text item.\nDefault: `#ffffff`.", "example": "#e6e6e6"}, "fillOpacity": {"type": "string", "description": "Opacity level of the background color.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible.\n`1.0`: the background color is completely opaque or solid.\nDefault: `1.0` if `fillColor` is provided, `0.0` if `fillColor` is not provided.", "maximum": 1, "minimum": 0}, "fontFamily": {"type": "string", "description": "Font type for the text in the text item.\nDefault: `arial`.", "enum": ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"]}, "fontSize": {"type": "string", "description": "Font size, in dp.\nDefault: `14`.", "minimum": 1}, "textAlign": {"type": "string", "description": "Horizontal alignment for the item\'s content.\nDefault: `center.`", "enum": ["left", "right", "center"]}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or rotation. You can only specify the width of the text item as the height is dynamically updated based on the content.", "properties": {"rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.\nThe minimum `width` of a `text` widget is relative to the font size of the `text` widget. The width must be at least 1.7 times wider than the font size.\nFor example, if the font size of the `text` item is `14`, the minimum `width` is `24`."}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}, "required": ["data"]}',  # noqa: E501
    "UPDATEBOARDTEXT": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).", "properties": {"content": {"type": "string", "description": "The actual text (content) that appears in the text item.", "example": "Hello"}}, "required": ["content"]}, "style": {"type": "object", "description": "Contains information about the style of a text item, such as the fill color or font family.", "properties": {"color": {"type": "string", "description": "Hex value representing the color for the text within the text item.", "example": "#1a1a1a"}, "fillColor": {"type": "string", "description": "Background color of the text item.", "example": "#e6e6e6"}, "fillOpacity": {"type": "string", "description": "Opacity level of the background color.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid", "maximum": 1, "minimum": 0}, "fontFamily": {"type": "string", "description": "Font type for the text in the text item.", "enum": ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"]}, "fontSize": {"type": "string", "description": "Font size, in dp.", "minimum": 1}, "textAlign": {"type": "string", "description": "Horizontal alignment for the item\'s content.", "enum": ["left", "right", "center"]}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or rotation. You can only specify the width of the text item as the height is dynamically updated based on the content.", "properties": {"rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.\nThe minimum `width` of a `text` widget is relative to the font size of the `text` widget. The width must be at least 1.7 times wider than the font size.\nFor example, if the font size of the `text` item is `14`, the minimum `width` is `24`."}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "ADDITEMSTOMIROBOARD": '{"type": "array", "items": {"type": "object", "description": "Creates one or more items in one request. You can create up to 20 items per request.", "properties": {"type": {"type": "string", "description": "Type of item that you want to create.", "enum": ["app_card", "text", "shape", "sticky_note", "image", "document", "card", "frame", "embed"], "example": "text"}, "data": {"type": "object", "description": "Contains data information applicable for each item type.", "oneOf": [{"type": "object", "description": "Contains app card item data, such as the title, description, or fields.", "properties": {"description": {"type": "string", "description": "A short text description to add context about the app card.", "example": "Sample app card description"}, "fields": {"type": "array", "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.", "items": {"type": "object", "description": "Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.", "properties": {"fillColor": {"type": "string", "description": "Hex value representing the color that fills the background area of the preview field, when it\'s displayed on the app card.", "example": "#2fa9e3"}, "iconShape": {"type": "string", "default": "round", "description": "The shape of the icon on the preview field.", "enum": ["round", "square"]}, "iconUrl": {"type": "string", "description": "A valid URL pointing to an image available online.\nThe transport protocol must be HTTPS.\nPossible image file formats: JPG/JPEG, PNG, SVG.", "example": "https://cdn-icons-png.flaticon.com/512/5695/5695864.png"}, "textColor": {"type": "string", "description": "Hex value representing the color of the text string assigned to `value`.", "example": "#1a1a1a"}, "tooltip": {"type": "string", "description": "A short text displayed in a tooltip when clicking or hovering over the preview field.", "example": "Completion status indicator"}, "value": {"type": "string", "description": "The actual data value of the custom field.\nIt can be any type of information that you want to convey.", "example": "Status: in progress"}}}}, "owned": {"type": "boolean", "description": "Defines whether the card is owned by the application making the call."}, "status": {"type": "string", "description": "Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.", "enum": ["disconnected", "connected", "disabled"]}, "title": {"type": "string", "description": "A short text header to identify the app card.", "example": "sample app card item"}}}, {"type": "object", "description": "Contains card item data, such as the title, description, due date, or assignee ID.", "properties": {"assigneeId": {"type": "string", "format": "int64", "description": "Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is numeric, and it is automatically assigned to a user when they first sign up.", "example": "3074457362577955300"}, "description": {"type": "string", "description": "A short text description to add context about the card.", "example": "sample card description"}, "dueDate": {"type": "string", "format": "date-time", "description": "The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).", "example": "2023-10-12T22:00:55.000Z"}, "title": {"type": "string", "description": "A short text header for the card.", "example": "sample card item"}}}, {"type": "object", "description": "Contains information about the document URL.", "properties": {"title": {"type": "string", "description": "A short text header to identify the document.", "example": "Sample document title"}, "url": {"type": "string", "default": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf", "description": "URL where the document is hosted.", "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"}}, "required": ["url"]}, {"type": "object", "description": "Contains information about the embed URL.", "properties": {"mode": {"type": "string", "description": "Defines how the content in the embed item is displayed on the board.\n`inline`: The embedded content is displayed directly on the board.\n`modal`: The embedded content is displayed inside a modal overlay on the board.", "enum": ["inline", "modal"]}, "previewUrl": {"type": "string", "description": "URL of the image to be used as the preview image for the embedded item."}, "url": {"type": "string", "default": "https://www.youtube.com/watch?v=HlVSNEiFCBk", "description": "A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS."}}, "required": ["url"]}, {"type": "object", "description": "Contains information about the image URL.", "properties": {"title": {"type": "string", "description": "A short text header to identify the image.", "example": "Sample image title"}, "url": {"type": "string", "default": "https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png", "description": "URL of the image.", "example": "https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png"}}, "required": ["url"]}, {"type": "object", "description": "Contains shape item data, such as the content or shape type of the shape.", "properties": {"content": {"type": "string", "description": "The text you want to display on the shape.", "example": "Hello"}, "shape": {"type": "string", "default": "rectangle", "description": "Defines the geometric shape of the item when it is rendered on the board.", "enum": ["rectangle", "round_rectangle", "circle", "triangle", "rhombus", "parallelogram", "trapezoid", "pentagon", "hexagon", "octagon", "wedge_round_rectangle_callout", "star", "flow_chart_predefined_process", "cloud", "cross", "can", "right_arrow", "left_arrow", "left_right_arrow", "left_brace", "right_brace"]}}}, {"type": "object", "description": "Contains sticky note item data, such as the content or shape of the sticky note.", "properties": {"content": {"type": "string", "description": "The actual text (content) that appears in the sticky note item.", "example": "Hello"}, "shape": {"type": "string", "default": "square", "description": "Defines the geometric shape of the sticky note and aspect ratio for its dimensions.", "enum": ["square", "rectangle"]}}}, {"type": "object", "description": "Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data).", "properties": {"content": {"type": "string", "description": "The actual text (content) that appears in the text item.", "example": "Hello"}}, "required": ["content"]}]}, "style": {"type": "object", "description": "Contains information about item-specific styles.", "oneOf": [{"type": "object", "description": "Contains information about the style of an app card item, such as the fill color.", "properties": {"fillColor": {"type": "string", "description": "Hex value of the border color of the app card.\nDefault: `#2d9bf0`.", "example": "#2d9bf0"}}}, {"type": "object", "description": "Contains information about the style of a card item, such as the card theme.", "properties": {"cardTheme": {"type": "string", "description": "Hex value of the border color of the card.\nDefault: `#2d9bf0`.", "example": "#2d9bf0"}}}, {"type": "object", "description": "Contains information about the shape style, such as the border color or opacity.", "properties": {"borderColor": {"type": "string", "description": "Defines the color of the border of the shape.\nDefault: `#1a1a1a` (dark gray)."}, "borderOpacity": {"type": "string", "description": "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` (solid color).", "maximum": 1, "minimum": 0}, "borderStyle": {"type": "string", "description": "Defines the style used to represent the border of the shape.\nDefault: `normal`.", "enum": ["normal", "dotted", "dashed"]}, "borderWidth": {"type": "string", "description": "Defines the thickness of the shape border, in dp.\nDefault: `2.0`.", "maximum": 24, "minimum": 1}, "color": {"type": "string", "description": "Hex value representing the color for the text within the shape item.\nDefault: `#1a1a1a`.", "example": "#1a1a1a"}, "fillColor": {"type": "string", "description": "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`\nDefault: #ffffff.", "example": "#8fd14f"}, "fillOpacity": {"type": "string", "description": "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible.\n`1.0`: the background color is completely opaque or solid.\n\n Default: `1.0` if `fillColor` is provided, `0.0` if `fillColor` is not provided.\n", "maximum": 1, "minimum": 0}, "fontFamily": {"type": "string", "description": "Defines the font type for the text in the shape item.\nDefault: `arial`.", "enum": ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"]}, "fontSize": {"type": "string", "description": "Defines the font size, in dp, for the text on the shape.\nDefault: `14`.", "maximum": 288, "minimum": 10}, "textAlign": {"type": "string", "description": "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.", "enum": ["left", "right", "center"]}, "textAlignVertical": {"type": "string", "description": "Defines how the sticky note text is vertically aligned.\nDefault: `top`.", "enum": ["top", "middle", "bottom"]}}}, {"type": "object", "description": "Contains information about the style of a sticky note item, such as the fill color or text alignment.", "properties": {"fillColor": {"type": "string", "description": "Fill color for the sticky note.\nDefault: `light_yellow`.", "enum": ["gray", "light_yellow", "yellow", "orange", "light_green", "green", "dark_green", "cyan", "light_pink", "pink", "violet", "red", "light_blue", "blue", "dark_blue", "black"]}, "textAlign": {"type": "string", "description": "Defines how the sticky note text is horizontally aligned.\nDefault: `center`.", "enum": ["left", "right", "center"]}, "textAlignVertical": {"type": "string", "description": "Defines how the sticky note text is vertically aligned.\nDefault: `top`.", "enum": ["top", "middle", "bottom"]}}}, {"type": "object", "description": "Contains information about the style of a text item, such as the fill color or font family.", "properties": {"color": {"type": "string", "description": "Hex value representing the color for the text within the text item.\nDefault: `#1a1a1a`.", "example": "#1a1a1a"}, "fillColor": {"type": "string", "description": "Background color of the text item.\nDefault: `#ffffff`.", "example": "#e6e6e6"}, "fillOpacity": {"type": "string", "description": "Opacity level of the background color.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible.\n`1.0`: the background color is completely opaque or solid.\nDefault: `1.0` if `fillColor` is provided, `0.0` if `fillColor` is not provided.", "maximum": 1, "minimum": 0}, "fontFamily": {"type": "string", "description": "Font type for the text in the text item.\nDefault: `arial`.", "enum": ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"]}, "fontSize": {"type": "string", "description": "Font size, in dp.\nDefault: `14`.", "minimum": 1}, "textAlign": {"type": "string", "description": "Horizontal alignment for the item\'s content.\nDefault: `center.`", "enum": ["left", "right", "center"]}}}]}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels.", "example": 60}, "rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.", "example": 320}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}, "required": ["type"]}, "minItems": 1, "maxItems": 20}',  # noqa: E501
    "UPDATEMIROBOARDFRAME": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains frame item data, such as the title, frame type, or frame format.", "properties": {"format": {"type": "string", "default": "custom", "description": "Only custom frames are supported at the moment.", "enum": ["custom"]}, "title": {"type": "string", "default": "Sample frame title", "description": "Title of the frame. This title appears at the top of the frame."}, "type": {"type": "string", "default": "freeform", "description": "Only free form frames are supported at the moment.", "enum": ["freeform"]}, "showContent": {"type": "boolean", "default": true, "description": "Hide or reveal the content inside a frame (Enterprise plan only)."}}}, "style": {"type": "object", "description": "Contains information about the style of a frame item, such as the fill color.", "properties": {"fillColor": {"type": "string", "description": "Fill color for the frame.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`", "example": "#ffffffff"}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels."}}}}}',  # noqa: E501
    "ADDFLOWCHARTSHAPETOBOARD": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains shape item data, such as the content or the type of the shape.", "properties": {"content": {"type": "string", "description": "The text you want to display on the shape.\n<br>**Not supported for shapes:**\n<ul>\n  <li>flow_chart_or</li>\n  <li>flow_chart_summing_junction</li>\n</ul>", "example": "Hello"}, "shape": {"type": "string", "default": "rectangle", "description": "Defines the geometric shape of the item when it is rendered on the board. <details>\n  <summary>Basic shapes</summary>\n  <ul>\n    <li>rectangle</li>\n    <li>round_rectangle</li>\n    <li>circle</li>\n    <li>triangle</li>\n    <li>rhombus</li>\n    <li>parallelogram</li>\n    <li>trapezoid</li>\n    <li>pentagon</li>\n    <li>hexagon</li>\n    <li>octagon</li>\n    <li>wedge_round_rectangle_callout</li>\n    <li>star</li>\n    <li>flow_chart_predefined_process</li>\n    <li>cloud</li>\n    <li>cross</li>\n    <li>can</li>\n    <li>right_arrow</li>\n    <li>left_arrow</li>\n    <li>left_right_arrow</li>\n    <li>left_brace</li>\n    <li>right_brace</li>\n  </ul>\n</details>\n<details>\n  <summary>Flowchart shapes</summary>\n  <ul>\n    <li>flow_chart_connector</li>\n    <li>flow_chart_magnetic_disk</li>\n    <li>flow_chart_input_output</li>\n    <li>flow_chart_decision</li>\n    <li>flow_chart_delay</li>\n    <li>flow_chart_display</li>\n    <li>flow_chart_document</li>\n    <li>flow_chart_magnetic_drum</li>\n    <li>flow_chart_internal_storage</li>\n    <li>flow_chart_manual_input</li>\n    <li>flow_chart_manual_operation</li>\n    <li>flow_chart_merge</li>\n    <li>flow_chart_multidocuments</li>\n    <li>flow_chart_note_curly_left</li>\n    <li>flow_chart_note_curly_right</li>\n    <li>flow_chart_note_square</li>\n    <li>flow_chart_offpage_connector</li>\n    <li>flow_chart_or</li>\n    <li>flow_chart_predefined_process_2</li>\n    <li>flow_chart_preparation</li>\n    <li>flow_chart_process</li>\n    <li>flow_chart_online_storage</li>\n    <li>flow_chart_summing_junction</li>\n    <li>flow_chart_terminator</li>\n  </ul>\n</details>"}}}, "style": {"type": "object", "description": "Contains information about the shape style, such as the border color or opacity. <br> All properties in style object are supported for shape types aren\'t listed below. <br> <table>\n  <tr>\n    <th align="left">Shape type</th>\n    <th align="left">Unsupported properties</th>\n  </tr>\n  <tr>\n    <td>flow_chart_or</td>\n    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_summing_junction</td>\n    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_left</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_right</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_square</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n</table>", "properties": {"borderColor": {"type": "string", "description": "Defines the color of the border of the shape.\nDefault: `#1a1a1a` (dark gray)."}, "borderOpacity": {"type": "string", "description": "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `1.0` (solid color).", "maximum": 1, "minimum": 0}, "borderStyle": {"type": "string", "description": "Defines the style used to represent the border of the shape.\nDefault: `normal`.", "enum": ["normal", "dotted", "dashed"]}, "borderWidth": {"type": "string", "description": "Defines the thickness of the shape border, in dp.\nDefault: `2.0`.", "maximum": 24, "minimum": 1}, "color": {"type": "string", "description": "Hex value representing the color for the text within the shape item.\nDefault: `#1a1a1a`.", "example": "#1a1a1a"}, "fillColor": {"type": "string", "description": "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`\nDefault: #ffffff.", "example": "#8fd14f"}, "fillOpacity": {"type": "string", "description": "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\nDefault: `Flowchart` shapes: `1.0`. `Basic` shapes: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.\n", "maximum": 1, "minimum": 0}, "fontFamily": {"type": "string", "description": "Defines the font type for the text in the shape item.\nDefault: `arial`.", "enum": ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"]}, "fontSize": {"type": "string", "description": "Defines the font size, in dp, for the text on the shape.\nDefault: `14`.", "maximum": 288, "minimum": 10}, "textAlign": {"type": "string", "description": "Defines how the shape text is horizontally aligned.\nDefault:\nFlowchart shapes: `center`.\nBasic shapes: `left`.\n\n`unknown` is returned for unsupported shapes.", "enum": ["left", "right", "center", "unknown"]}, "textAlignVertical": {"type": "string", "description": "Defines how the shape text is vertically aligned.\nDefault:\nFlowchart shapes: `middle`.\nBasic shapes: `top`.\n\n`unknown` is returned for unsupported shapes.", "enum": ["top", "middle", "bottom", "unknown"]}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels.", "example": 60}, "rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.", "example": 320}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "UPDATEFLOWCHARTSHAPE": '{"type": "object", "properties": {"data": {"type": "object", "description": "Contains shape item data, such as the content or the type of the shape.", "properties": {"content": {"type": "string", "description": "The text you want to display on the shape.\n**Note: When updating a shape type to one of the types below, existing `content` will be lost.**\n<br>**Not supported for shapes:**\n<ul>\n  <li>flow_chart_or</li>\n  <li>flow_chart_summing_junction</li>\n</ul>", "example": "Hello"}, "shape": {"type": "string", "default": "rectangle", "description": "Defines the geometric shape of the item when it is rendered on the board. <details>\n  <summary>Basic shapes</summary>\n  <ul>\n    <li>rectangle</li>\n    <li>round_rectangle</li>\n    <li>circle</li>\n    <li>triangle</li>\n    <li>rhombus</li>\n    <li>parallelogram</li>\n    <li>trapezoid</li>\n    <li>pentagon</li>\n    <li>hexagon</li>\n    <li>octagon</li>\n    <li>wedge_round_rectangle_callout</li>\n    <li>star</li>\n    <li>flow_chart_predefined_process</li>\n    <li>cloud</li>\n    <li>cross</li>\n    <li>can</li>\n    <li>right_arrow</li>\n    <li>left_arrow</li>\n    <li>left_right_arrow</li>\n    <li>left_brace</li>\n    <li>right_brace</li>\n  </ul>\n</details>\n<details>\n  <summary>Flowchart shapes</summary>\n  <ul>\n    <li>flow_chart_connector</li>\n    <li>flow_chart_magnetic_disk</li>\n    <li>flow_chart_input_output</li>\n    <li>flow_chart_decision</li>\n    <li>flow_chart_delay</li>\n    <li>flow_chart_display</li>\n    <li>flow_chart_document</li>\n    <li>flow_chart_magnetic_drum</li>\n    <li>flow_chart_internal_storage</li>\n    <li>flow_chart_manual_input</li>\n    <li>flow_chart_manual_operation</li>\n    <li>flow_chart_merge</li>\n    <li>flow_chart_multidocuments</li>\n    <li>flow_chart_note_curly_left</li>\n    <li>flow_chart_note_curly_right</li>\n    <li>flow_chart_note_square</li>\n    <li>flow_chart_offpage_connector</li>\n    <li>flow_chart_or</li>\n    <li>flow_chart_predefined_process_2</li>\n    <li>flow_chart_preparation</li>\n    <li>flow_chart_process</li>\n    <li>flow_chart_online_storage</li>\n    <li>flow_chart_summing_junction</li>\n    <li>flow_chart_terminator</li>\n  </ul>\n</details>"}}}, "style": {"type": "object", "description": "Contains information about the shape style, such as the border color or opacity. <br> All properties in style object are supported for shape types aren\'t listed below. <br> <table>\n  <tr>\n    <th align="left">Shape type</th>\n    <th align="left">Unsupported properties</th>\n  </tr>\n  <tr>\n    <td>flow_chart_or</td>\n    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_summing_junction</td>\n    <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_left</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_curly_right</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n  <tr>\n    <td>flow_chart_note_square</td>\n    <td>fillColor, fillOpacity</td>\n  </tr>\n</table>", "properties": {"borderColor": {"type": "string", "description": "Defines the color of the border of the shape."}, "borderOpacity": {"type": "string", "description": "Defines the opacity level of the shape border.\nPossible values: any number between `0.0` and `1.0`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid", "maximum": 1, "minimum": 0}, "borderStyle": {"type": "string", "description": "Defines the style used to represent the border of the shape.", "enum": ["normal", "dotted", "dashed"]}, "borderWidth": {"type": "string", "description": "Defines the thickness of the shape border, in dp.", "maximum": 24, "minimum": 1}, "color": {"type": "string", "description": "Hex value representing the color for the text within the shape item.", "example": "#1a1a1a"}, "fillColor": {"type": "string", "description": "Fill color for the shape.\nHex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`", "example": "#8fd14f"}, "fillOpacity": {"type": "string", "description": "Opacity level of the fill color.\nPossible values: any number between `0` and `1`, where:\n`0.0`: the background color is completely transparent or invisible\n`1.0`: the background color is completely opaque or solid\n", "maximum": 1, "minimum": 0}, "fontFamily": {"type": "string", "description": "Defines the font type for the text in the shape item.", "enum": ["arial", "abril_fatface", "bangers", "eb_garamond", "georgia", "graduate", "gravitas_one", "fredoka_one", "nixie_one", "open_sans", "permanent_marker", "pt_sans", "pt_sans_narrow", "pt_serif", "rammetto_one", "roboto", "roboto_condensed", "roboto_slab", "caveat", "times_new_roman", "titan_one", "lemon_tuesday", "roboto_mono", "noto_sans", "plex_sans", "plex_serif", "plex_mono", "spoof", "tiempos_text", "formular"]}, "fontSize": {"type": "string", "description": "Defines the font size, in dp, for the text on the shape.", "maximum": 288, "minimum": 10}, "textAlign": {"type": "string", "description": "Defines how the sticky note text is horizontally aligned.", "enum": ["left", "right", "center"]}, "textAlignVertical": {"type": "string", "description": "Defines how the sticky note text is vertically aligned.", "enum": ["top", "middle", "bottom"]}}}, "position": {"type": "object", "description": "Contains information about the item\'s position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates.", "properties": {"x": {"type": "number", "format": "double", "description": "X-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}, "y": {"type": "number", "format": "double", "description": "Y-axis coordinate of the location of the item on the board.\nBy default, all items have absolute positioning to the board, not the current viewport. Default: `0`.\nThe center point of the board has `x: 0` and `y: 0` coordinates.", "default": 0, "example": 100}}}, "geometry": {"type": "object", "description": "Contains geometrical information about the item, such as its width or height.", "properties": {"height": {"type": "number", "format": "double", "description": "Height of the item, in pixels.", "example": 60}, "rotation": {"type": "number", "format": "double", "description": "Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively."}, "width": {"type": "number", "format": "double", "description": "Width of the item, in pixels.", "example": 320}}}, "parent": {"type": "object", "description": "Contains information about the parent frame for the item.", "properties": {"id": {"type": "string", "format": "int64", "description": "Unique identifier (ID) of the parent frame for the item.", "example": "3074457362577955300"}}}}}',  # noqa: E501
    "UPDATETEAMSETTINGS": '{"type": "object", "properties": {"teamAccountDiscoverySettings": {"type": "object", "properties": {"accountDiscovery": {"type": "string", "description": "\n* "hidden":  Only invited users can see and access the team.\n* "request": Members of organization can find and request to join with admin approval.\n* "join":    Members of organization can find and join.\n", "enum": ["hidden", "request", "join"]}}, "description": "Team account discovery settings"}, "teamCollaborationSettings": {"type": "object", "properties": {"coOwnerRole": {"type": "string", "description": "\n* "enabled": Enable Co-owner role on boards and projects\n* "disabled": Disabled Co-owner role on boards and projects\n", "enum": ["enabled", "disabled"]}}, "description": "Team collaboration settings"}, "teamCopyAccessLevelSettings": {"type": "object", "properties": {"copyAccessLevel": {"type": "string", "description": "\n* "anyone":       Anyone with the board access can copy board content on newly created boards.\n* "team_members": Team members can copy board content on newly created boards.\n* "team_editors": Team members with editing rights can copy board content on newly created boards.\n* "board_owner":  Board owners only can copy board content on newly created boards.\n", "enum": ["anyone", "team_members", "team_editors", "board_owner"]}, "copyAccessLevelLimitation": {"type": "string", "description": "\n* "anyone":       Team members and users outside team can be given permission to copy board content.\n* "team_members": Only team members can be given permission to copy board content.\n", "enum": ["anyone", "team_members"]}}, "description": "Team copy access settings"}, "teamInvitationSettings": {"type": "object", "properties": {"inviteExternalUsers": {"type": "string", "description": "\n* "allowed": Allow non-team collaborators for team\n* "not_allowed": Not Allow non-team collaborators for team\n", "enum": ["allowed", "not_allowed"]}, "whoCanInvite": {"type": "string", "description": "\n* "only_org_admins": Company admins only can invite\n* "admins":          Company admins and team admins can invite\n* "all_members":     All team members can invite\n", "enum": ["only_org_admins", "admins", "all_members"]}}, "description": "Team invitation settings"}, "teamSharingPolicySettings": {"type": "object", "properties": {"allowListedDomains": {"type": "array", "description": "Allow listed domains", "items": {"type": "string", "description": "Allow listed domains"}}, "createAssetAccessLevel": {"type": "string", "description": "\n* "company_admins": Only company admins can create assets in a team\n* "admins": Both team and company admins can create assets in a team.\n* "all_members": all_members\n", "enum": ["company_admins", "admins", "all_members"]}, "defaultBoardAccess": {"type": "string", "description": "\nDefault board access\n* "private": Only board owners can access\n* "view":    Anyone in the team can view\n* "comment": Anyone in the team can comment\n* "edit":    Anyone in the team can edit\n", "enum": ["private", "view", "comment", "edit"]}, "defaultBoardSharingAccess": {"type": "string", "default": "team_members_with_editing_rights", "description": "\nIndicates who can change board access and invite users to boards in this team, by default.\n* "team_members_with_editing_rights": Any team member with editing rights on the board.\n* "owner_and_coowners":               Only the owner and co-owners of the board.\n", "enum": ["team_members_with_editing_rights", "owner_and_coowners"]}, "defaultOrganizationAccess": {"type": "string", "description": "\nDefault organization access\n* "private": Only board owners can access\n* "view":    Anyone in the team can view\n* "comment": Anyone in the team can comment\n* "edit":    Anyone in the team can edit\n", "enum": ["private", "view", "comment", "edit"]}, "defaultProjectAccess": {"type": "string", "description": "\nDefault project access\n* "private": Only board owners can access\n* "view":    Anyone in the team can view\n", "enum": ["private", "view"]}, "moveBoardToAccount": {"type": "string", "description": "\n* "allowed": Allow move board to team\n* "not_allowed": Not allow move board to team\n", "enum": ["allowed", "not_allowed"]}, "restrictAllowedDomains": {"type": "string", "description": "\n* "enabled": Enabled. Restrict to listed domain.\n* "disabled": Disabled. No domain restriction.\n* "enabled_with_external_users_access": Enabled. Restrict to listed domain but allows external users to access.\n", "enum": ["enabled", "enabled_with_external_user_access", "disabled"]}, "sharingOnAccount": {"type": "string", "description": "\n* "allowed": Allow sharing on team\n* "not_allowed": Not allow sharing on team\n", "enum": ["allowed", "not_allowed"]}, "sharingOnOrganization": {"type": "string", "description": "\n* "allowed": Allow sharing on organization\n* "allowed_with_editing": Allow sharing with editing on organization\n* "not_allowed": Not allow sharing on organization\n", "enum": ["allowed", "allowed_with_editing", "not_allowed"]}, "sharingViaPublicLink": {"type": "string", "description": "\n* "allowed": Allow sharing via public link\n* "allowed_with_editing": Allow sharing with editing via public link\n* "not_allowed": Not allow sharing via public link\n", "enum": ["allowed", "allowed_with_editing", "not_allowed"]}}, "description": "Team sharing policy settings"}}}',  # noqa: E501
}
