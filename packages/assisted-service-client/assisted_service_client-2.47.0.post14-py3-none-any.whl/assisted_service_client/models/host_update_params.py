# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HostUpdateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_role': 'str',
        'host_name': 'str',
        'disks_selected_config': 'list[DiskConfigParams]',
        'disks_skip_formatting': 'list[DiskSkipFormattingParams]',
        'machine_config_pool_name': 'str',
        'ignition_endpoint_token': 'str',
        'ignition_endpoint_http_headers': 'list[IgnitionEndpointHttpHeadersParams]',
        'node_labels': 'list[NodeLabelParams]',
        'fencing_credentials': 'FencingCredentialsParams'
    }

    attribute_map = {
        'host_role': 'host_role',
        'host_name': 'host_name',
        'disks_selected_config': 'disks_selected_config',
        'disks_skip_formatting': 'disks_skip_formatting',
        'machine_config_pool_name': 'machine_config_pool_name',
        'ignition_endpoint_token': 'ignition_endpoint_token',
        'ignition_endpoint_http_headers': 'ignition_endpoint_http_headers',
        'node_labels': 'node_labels',
        'fencing_credentials': 'fencing_credentials'
    }

    def __init__(self, host_role=None, host_name=None, disks_selected_config=None, disks_skip_formatting=None, machine_config_pool_name=None, ignition_endpoint_token=None, ignition_endpoint_http_headers=None, node_labels=None, fencing_credentials=None):  # noqa: E501
        """HostUpdateParams - a model defined in Swagger"""  # noqa: E501

        self._host_role = None
        self._host_name = None
        self._disks_selected_config = None
        self._disks_skip_formatting = None
        self._machine_config_pool_name = None
        self._ignition_endpoint_token = None
        self._ignition_endpoint_http_headers = None
        self._node_labels = None
        self._fencing_credentials = None
        self.discriminator = None

        if host_role is not None:
            self.host_role = host_role
        if host_name is not None:
            self.host_name = host_name
        if disks_selected_config is not None:
            self.disks_selected_config = disks_selected_config
        if disks_skip_formatting is not None:
            self.disks_skip_formatting = disks_skip_formatting
        if machine_config_pool_name is not None:
            self.machine_config_pool_name = machine_config_pool_name
        if ignition_endpoint_token is not None:
            self.ignition_endpoint_token = ignition_endpoint_token
        if ignition_endpoint_http_headers is not None:
            self.ignition_endpoint_http_headers = ignition_endpoint_http_headers
        if node_labels is not None:
            self.node_labels = node_labels
        if fencing_credentials is not None:
            self.fencing_credentials = fencing_credentials

    @property
    def host_role(self):
        """Gets the host_role of this HostUpdateParams.  # noqa: E501


        :return: The host_role of this HostUpdateParams.  # noqa: E501
        :rtype: str
        """
        return self._host_role

    @host_role.setter
    def host_role(self, host_role):
        """Sets the host_role of this HostUpdateParams.


        :param host_role: The host_role of this HostUpdateParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto-assign", "master", "arbiter", "worker"]  # noqa: E501
        if host_role not in allowed_values:
            raise ValueError(
                "Invalid value for `host_role` ({0}), must be one of {1}"  # noqa: E501
                .format(host_role, allowed_values)
            )

        self._host_role = host_role

    @property
    def host_name(self):
        """Gets the host_name of this HostUpdateParams.  # noqa: E501


        :return: The host_name of this HostUpdateParams.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this HostUpdateParams.


        :param host_name: The host_name of this HostUpdateParams.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def disks_selected_config(self):
        """Gets the disks_selected_config of this HostUpdateParams.  # noqa: E501


        :return: The disks_selected_config of this HostUpdateParams.  # noqa: E501
        :rtype: list[DiskConfigParams]
        """
        return self._disks_selected_config

    @disks_selected_config.setter
    def disks_selected_config(self, disks_selected_config):
        """Sets the disks_selected_config of this HostUpdateParams.


        :param disks_selected_config: The disks_selected_config of this HostUpdateParams.  # noqa: E501
        :type: list[DiskConfigParams]
        """

        self._disks_selected_config = disks_selected_config

    @property
    def disks_skip_formatting(self):
        """Gets the disks_skip_formatting of this HostUpdateParams.  # noqa: E501

        Allows changing the host's skip_formatting_disks parameter  # noqa: E501

        :return: The disks_skip_formatting of this HostUpdateParams.  # noqa: E501
        :rtype: list[DiskSkipFormattingParams]
        """
        return self._disks_skip_formatting

    @disks_skip_formatting.setter
    def disks_skip_formatting(self, disks_skip_formatting):
        """Sets the disks_skip_formatting of this HostUpdateParams.

        Allows changing the host's skip_formatting_disks parameter  # noqa: E501

        :param disks_skip_formatting: The disks_skip_formatting of this HostUpdateParams.  # noqa: E501
        :type: list[DiskSkipFormattingParams]
        """

        self._disks_skip_formatting = disks_skip_formatting

    @property
    def machine_config_pool_name(self):
        """Gets the machine_config_pool_name of this HostUpdateParams.  # noqa: E501


        :return: The machine_config_pool_name of this HostUpdateParams.  # noqa: E501
        :rtype: str
        """
        return self._machine_config_pool_name

    @machine_config_pool_name.setter
    def machine_config_pool_name(self, machine_config_pool_name):
        """Sets the machine_config_pool_name of this HostUpdateParams.


        :param machine_config_pool_name: The machine_config_pool_name of this HostUpdateParams.  # noqa: E501
        :type: str
        """

        self._machine_config_pool_name = machine_config_pool_name

    @property
    def ignition_endpoint_token(self):
        """Gets the ignition_endpoint_token of this HostUpdateParams.  # noqa: E501

        A string which will be used as Authorization Bearer token to fetch the ignition from ignition_endpoint_url.  # noqa: E501

        :return: The ignition_endpoint_token of this HostUpdateParams.  # noqa: E501
        :rtype: str
        """
        return self._ignition_endpoint_token

    @ignition_endpoint_token.setter
    def ignition_endpoint_token(self, ignition_endpoint_token):
        """Sets the ignition_endpoint_token of this HostUpdateParams.

        A string which will be used as Authorization Bearer token to fetch the ignition from ignition_endpoint_url.  # noqa: E501

        :param ignition_endpoint_token: The ignition_endpoint_token of this HostUpdateParams.  # noqa: E501
        :type: str
        """

        self._ignition_endpoint_token = ignition_endpoint_token

    @property
    def ignition_endpoint_http_headers(self):
        """Gets the ignition_endpoint_http_headers of this HostUpdateParams.  # noqa: E501

        JSON-formatted string of additional HTTP headers when fetching the ignition.  # noqa: E501

        :return: The ignition_endpoint_http_headers of this HostUpdateParams.  # noqa: E501
        :rtype: list[IgnitionEndpointHttpHeadersParams]
        """
        return self._ignition_endpoint_http_headers

    @ignition_endpoint_http_headers.setter
    def ignition_endpoint_http_headers(self, ignition_endpoint_http_headers):
        """Sets the ignition_endpoint_http_headers of this HostUpdateParams.

        JSON-formatted string of additional HTTP headers when fetching the ignition.  # noqa: E501

        :param ignition_endpoint_http_headers: The ignition_endpoint_http_headers of this HostUpdateParams.  # noqa: E501
        :type: list[IgnitionEndpointHttpHeadersParams]
        """

        self._ignition_endpoint_http_headers = ignition_endpoint_http_headers

    @property
    def node_labels(self):
        """Gets the node_labels of this HostUpdateParams.  # noqa: E501

        Labels to be added to the corresponding node.  # noqa: E501

        :return: The node_labels of this HostUpdateParams.  # noqa: E501
        :rtype: list[NodeLabelParams]
        """
        return self._node_labels

    @node_labels.setter
    def node_labels(self, node_labels):
        """Sets the node_labels of this HostUpdateParams.

        Labels to be added to the corresponding node.  # noqa: E501

        :param node_labels: The node_labels of this HostUpdateParams.  # noqa: E501
        :type: list[NodeLabelParams]
        """

        self._node_labels = node_labels

    @property
    def fencing_credentials(self):
        """Gets the fencing_credentials of this HostUpdateParams.  # noqa: E501

        The host's BMC credentials that will be used in TNF.  # noqa: E501

        :return: The fencing_credentials of this HostUpdateParams.  # noqa: E501
        :rtype: FencingCredentialsParams
        """
        return self._fencing_credentials

    @fencing_credentials.setter
    def fencing_credentials(self, fencing_credentials):
        """Sets the fencing_credentials of this HostUpdateParams.

        The host's BMC credentials that will be used in TNF.  # noqa: E501

        :param fencing_credentials: The fencing_credentials of this HostUpdateParams.  # noqa: E501
        :type: FencingCredentialsParams
        """

        self._fencing_credentials = fencing_credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostUpdateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostUpdateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
