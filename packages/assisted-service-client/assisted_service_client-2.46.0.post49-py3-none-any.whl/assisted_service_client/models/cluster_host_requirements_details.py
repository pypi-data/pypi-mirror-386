# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterHostRequirementsDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_cores': 'int',
        'ram_mib': 'int',
        'disk_size_gb': 'int',
        'installation_disk_speed_threshold_ms': 'int',
        'network_latency_threshold_ms': 'float',
        'packet_loss_percentage': 'float',
        'tpm_enabled_in_bios': 'bool'
    }

    attribute_map = {
        'cpu_cores': 'cpu_cores',
        'ram_mib': 'ram_mib',
        'disk_size_gb': 'disk_size_gb',
        'installation_disk_speed_threshold_ms': 'installation_disk_speed_threshold_ms',
        'network_latency_threshold_ms': 'network_latency_threshold_ms',
        'packet_loss_percentage': 'packet_loss_percentage',
        'tpm_enabled_in_bios': 'tpm_enabled_in_bios'
    }

    def __init__(self, cpu_cores=None, ram_mib=None, disk_size_gb=None, installation_disk_speed_threshold_ms=None, network_latency_threshold_ms=None, packet_loss_percentage=None, tpm_enabled_in_bios=None):  # noqa: E501
        """ClusterHostRequirementsDetails - a model defined in Swagger"""  # noqa: E501

        self._cpu_cores = None
        self._ram_mib = None
        self._disk_size_gb = None
        self._installation_disk_speed_threshold_ms = None
        self._network_latency_threshold_ms = None
        self._packet_loss_percentage = None
        self._tpm_enabled_in_bios = None
        self.discriminator = None

        if cpu_cores is not None:
            self.cpu_cores = cpu_cores
        if ram_mib is not None:
            self.ram_mib = ram_mib
        if disk_size_gb is not None:
            self.disk_size_gb = disk_size_gb
        if installation_disk_speed_threshold_ms is not None:
            self.installation_disk_speed_threshold_ms = installation_disk_speed_threshold_ms
        if network_latency_threshold_ms is not None:
            self.network_latency_threshold_ms = network_latency_threshold_ms
        if packet_loss_percentage is not None:
            self.packet_loss_percentage = packet_loss_percentage
        if tpm_enabled_in_bios is not None:
            self.tpm_enabled_in_bios = tpm_enabled_in_bios

    @property
    def cpu_cores(self):
        """Gets the cpu_cores of this ClusterHostRequirementsDetails.  # noqa: E501

        Required number of CPU cores  # noqa: E501

        :return: The cpu_cores of this ClusterHostRequirementsDetails.  # noqa: E501
        :rtype: int
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """Sets the cpu_cores of this ClusterHostRequirementsDetails.

        Required number of CPU cores  # noqa: E501

        :param cpu_cores: The cpu_cores of this ClusterHostRequirementsDetails.  # noqa: E501
        :type: int
        """

        self._cpu_cores = cpu_cores

    @property
    def ram_mib(self):
        """Gets the ram_mib of this ClusterHostRequirementsDetails.  # noqa: E501

        Required number of RAM in MiB  # noqa: E501

        :return: The ram_mib of this ClusterHostRequirementsDetails.  # noqa: E501
        :rtype: int
        """
        return self._ram_mib

    @ram_mib.setter
    def ram_mib(self, ram_mib):
        """Sets the ram_mib of this ClusterHostRequirementsDetails.

        Required number of RAM in MiB  # noqa: E501

        :param ram_mib: The ram_mib of this ClusterHostRequirementsDetails.  # noqa: E501
        :type: int
        """

        self._ram_mib = ram_mib

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this ClusterHostRequirementsDetails.  # noqa: E501

        Required disk size in GB  # noqa: E501

        :return: The disk_size_gb of this ClusterHostRequirementsDetails.  # noqa: E501
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this ClusterHostRequirementsDetails.

        Required disk size in GB  # noqa: E501

        :param disk_size_gb: The disk_size_gb of this ClusterHostRequirementsDetails.  # noqa: E501
        :type: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def installation_disk_speed_threshold_ms(self):
        """Gets the installation_disk_speed_threshold_ms of this ClusterHostRequirementsDetails.  # noqa: E501

        Required installation disk speed in ms  # noqa: E501

        :return: The installation_disk_speed_threshold_ms of this ClusterHostRequirementsDetails.  # noqa: E501
        :rtype: int
        """
        return self._installation_disk_speed_threshold_ms

    @installation_disk_speed_threshold_ms.setter
    def installation_disk_speed_threshold_ms(self, installation_disk_speed_threshold_ms):
        """Sets the installation_disk_speed_threshold_ms of this ClusterHostRequirementsDetails.

        Required installation disk speed in ms  # noqa: E501

        :param installation_disk_speed_threshold_ms: The installation_disk_speed_threshold_ms of this ClusterHostRequirementsDetails.  # noqa: E501
        :type: int
        """

        self._installation_disk_speed_threshold_ms = installation_disk_speed_threshold_ms

    @property
    def network_latency_threshold_ms(self):
        """Gets the network_latency_threshold_ms of this ClusterHostRequirementsDetails.  # noqa: E501

        Maximum network average latency (RTT) at L3 for role.  # noqa: E501

        :return: The network_latency_threshold_ms of this ClusterHostRequirementsDetails.  # noqa: E501
        :rtype: float
        """
        return self._network_latency_threshold_ms

    @network_latency_threshold_ms.setter
    def network_latency_threshold_ms(self, network_latency_threshold_ms):
        """Sets the network_latency_threshold_ms of this ClusterHostRequirementsDetails.

        Maximum network average latency (RTT) at L3 for role.  # noqa: E501

        :param network_latency_threshold_ms: The network_latency_threshold_ms of this ClusterHostRequirementsDetails.  # noqa: E501
        :type: float
        """

        self._network_latency_threshold_ms = network_latency_threshold_ms

    @property
    def packet_loss_percentage(self):
        """Gets the packet_loss_percentage of this ClusterHostRequirementsDetails.  # noqa: E501

        Maximum packet loss allowed at L3 for role.  # noqa: E501

        :return: The packet_loss_percentage of this ClusterHostRequirementsDetails.  # noqa: E501
        :rtype: float
        """
        return self._packet_loss_percentage

    @packet_loss_percentage.setter
    def packet_loss_percentage(self, packet_loss_percentage):
        """Sets the packet_loss_percentage of this ClusterHostRequirementsDetails.

        Maximum packet loss allowed at L3 for role.  # noqa: E501

        :param packet_loss_percentage: The packet_loss_percentage of this ClusterHostRequirementsDetails.  # noqa: E501
        :type: float
        """

        self._packet_loss_percentage = packet_loss_percentage

    @property
    def tpm_enabled_in_bios(self):
        """Gets the tpm_enabled_in_bios of this ClusterHostRequirementsDetails.  # noqa: E501

        Whether TPM module should be enabled in host's BIOS.  # noqa: E501

        :return: The tpm_enabled_in_bios of this ClusterHostRequirementsDetails.  # noqa: E501
        :rtype: bool
        """
        return self._tpm_enabled_in_bios

    @tpm_enabled_in_bios.setter
    def tpm_enabled_in_bios(self, tpm_enabled_in_bios):
        """Sets the tpm_enabled_in_bios of this ClusterHostRequirementsDetails.

        Whether TPM module should be enabled in host's BIOS.  # noqa: E501

        :param tpm_enabled_in_bios: The tpm_enabled_in_bios of this ClusterHostRequirementsDetails.  # noqa: E501
        :type: bool
        """

        self._tpm_enabled_in_bios = tpm_enabled_in_bios

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterHostRequirementsDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterHostRequirementsDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
