# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FeatureSupportLevelId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    SNO = "SNO"
    TNA = "TNA"
    VIP_AUTO_ALLOC = "VIP_AUTO_ALLOC"
    CUSTOM_MANIFEST = "CUSTOM_MANIFEST"
    SINGLE_NODE_EXPANSION = "SINGLE_NODE_EXPANSION"
    LVM = "LVM"
    ODF = "ODF"
    LSO = "LSO"
    CNV = "CNV"
    MCE = "MCE"
    MTV = "MTV"
    OSC = "OSC"
    NUTANIX_INTEGRATION = "NUTANIX_INTEGRATION"
    BAREMETAL_PLATFORM = "BAREMETAL_PLATFORM"
    NONE_PLATFORM = "NONE_PLATFORM"
    VSPHERE_INTEGRATION = "VSPHERE_INTEGRATION"
    DUAL_STACK_VIPS = "DUAL_STACK_VIPS"
    CLUSTER_MANAGED_NETWORKING = "CLUSTER_MANAGED_NETWORKING"
    USER_MANAGED_NETWORKING = "USER_MANAGED_NETWORKING"
    MINIMAL_ISO = "MINIMAL_ISO"
    FULL_ISO = "FULL_ISO"
    EXTERNAL_PLATFORM_OCI = "EXTERNAL_PLATFORM_OCI"
    DUAL_STACK = "DUAL_STACK"
    PLATFORM_MANAGED_NETWORKING = "PLATFORM_MANAGED_NETWORKING"
    EXTERNAL_PLATFORM = "EXTERNAL_PLATFORM"
    OVN_NETWORK_TYPE = "OVN_NETWORK_TYPE"
    SDN_NETWORK_TYPE = "SDN_NETWORK_TYPE"
    NODE_FEATURE_DISCOVERY = "NODE_FEATURE_DISCOVERY"
    NVIDIA_GPU = "NVIDIA_GPU"
    PIPELINES = "PIPELINES"
    SERVICEMESH = "SERVICEMESH"
    SERVERLESS = "SERVERLESS"
    OPENSHIFT_AI = "OPENSHIFT_AI"
    NON_STANDARD_HA_CONTROL_PLANE = "NON_STANDARD_HA_CONTROL_PLANE"
    AUTHORINO = "AUTHORINO"
    USER_MANAGED_LOAD_BALANCER = "USER_MANAGED_LOAD_BALANCER"
    NMSTATE = "NMSTATE"
    AMD_GPU = "AMD_GPU"
    KMM = "KMM"
    NODE_HEALTHCHECK = "NODE_HEALTHCHECK"
    SELF_NODE_REMEDIATION = "SELF_NODE_REMEDIATION"
    FENCE_AGENTS_REMEDIATION = "FENCE_AGENTS_REMEDIATION"
    NODE_MAINTENANCE = "NODE_MAINTENANCE"
    KUBE_DESCHEDULER = "KUBE_DESCHEDULER"
    CLUSTER_OBSERVABILITY = "CLUSTER_OBSERVABILITY"
    NUMA_RESOURCES = "NUMA_RESOURCES"
    OADP = "OADP"
    METALLB = "METALLB"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """FeatureSupportLevelId - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureSupportLevelId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureSupportLevelId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
