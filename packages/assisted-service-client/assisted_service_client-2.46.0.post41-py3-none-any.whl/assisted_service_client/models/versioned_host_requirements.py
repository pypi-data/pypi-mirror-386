# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VersionedHostRequirements(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'master': 'ClusterHostRequirementsDetails',
        'arbiter': 'ClusterHostRequirementsDetails',
        'worker': 'ClusterHostRequirementsDetails',
        'sno': 'ClusterHostRequirementsDetails',
        'edge_worker': 'ClusterHostRequirementsDetails'
    }

    attribute_map = {
        'version': 'version',
        'master': 'master',
        'arbiter': 'arbiter',
        'worker': 'worker',
        'sno': 'sno',
        'edge_worker': 'edge-worker'
    }

    def __init__(self, version=None, master=None, arbiter=None, worker=None, sno=None, edge_worker=None):  # noqa: E501
        """VersionedHostRequirements - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._master = None
        self._arbiter = None
        self._worker = None
        self._sno = None
        self._edge_worker = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if master is not None:
            self.master = master
        if arbiter is not None:
            self.arbiter = arbiter
        if worker is not None:
            self.worker = worker
        if sno is not None:
            self.sno = sno
        if edge_worker is not None:
            self.edge_worker = edge_worker

    @property
    def version(self):
        """Gets the version of this VersionedHostRequirements.  # noqa: E501

        Version of the component for which requirements are defined  # noqa: E501

        :return: The version of this VersionedHostRequirements.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VersionedHostRequirements.

        Version of the component for which requirements are defined  # noqa: E501

        :param version: The version of this VersionedHostRequirements.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def master(self):
        """Gets the master of this VersionedHostRequirements.  # noqa: E501

        Master node requirements  # noqa: E501

        :return: The master of this VersionedHostRequirements.  # noqa: E501
        :rtype: ClusterHostRequirementsDetails
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this VersionedHostRequirements.

        Master node requirements  # noqa: E501

        :param master: The master of this VersionedHostRequirements.  # noqa: E501
        :type: ClusterHostRequirementsDetails
        """

        self._master = master

    @property
    def arbiter(self):
        """Gets the arbiter of this VersionedHostRequirements.  # noqa: E501

        Arbiter node requirements  # noqa: E501

        :return: The arbiter of this VersionedHostRequirements.  # noqa: E501
        :rtype: ClusterHostRequirementsDetails
        """
        return self._arbiter

    @arbiter.setter
    def arbiter(self, arbiter):
        """Sets the arbiter of this VersionedHostRequirements.

        Arbiter node requirements  # noqa: E501

        :param arbiter: The arbiter of this VersionedHostRequirements.  # noqa: E501
        :type: ClusterHostRequirementsDetails
        """

        self._arbiter = arbiter

    @property
    def worker(self):
        """Gets the worker of this VersionedHostRequirements.  # noqa: E501

        Worker node requirements  # noqa: E501

        :return: The worker of this VersionedHostRequirements.  # noqa: E501
        :rtype: ClusterHostRequirementsDetails
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this VersionedHostRequirements.

        Worker node requirements  # noqa: E501

        :param worker: The worker of this VersionedHostRequirements.  # noqa: E501
        :type: ClusterHostRequirementsDetails
        """

        self._worker = worker

    @property
    def sno(self):
        """Gets the sno of this VersionedHostRequirements.  # noqa: E501

        Single node OpenShift node requirements  # noqa: E501

        :return: The sno of this VersionedHostRequirements.  # noqa: E501
        :rtype: ClusterHostRequirementsDetails
        """
        return self._sno

    @sno.setter
    def sno(self, sno):
        """Sets the sno of this VersionedHostRequirements.

        Single node OpenShift node requirements  # noqa: E501

        :param sno: The sno of this VersionedHostRequirements.  # noqa: E501
        :type: ClusterHostRequirementsDetails
        """

        self._sno = sno

    @property
    def edge_worker(self):
        """Gets the edge_worker of this VersionedHostRequirements.  # noqa: E501

        Edge Worker OpenShift node requirements  # noqa: E501

        :return: The edge_worker of this VersionedHostRequirements.  # noqa: E501
        :rtype: ClusterHostRequirementsDetails
        """
        return self._edge_worker

    @edge_worker.setter
    def edge_worker(self, edge_worker):
        """Sets the edge_worker of this VersionedHostRequirements.

        Edge Worker OpenShift node requirements  # noqa: E501

        :param edge_worker: The edge_worker of this VersionedHostRequirements.  # noqa: E501
        :type: ClusterHostRequirementsDetails
        """

        self._edge_worker = edge_worker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VersionedHostRequirements, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionedHostRequirements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
