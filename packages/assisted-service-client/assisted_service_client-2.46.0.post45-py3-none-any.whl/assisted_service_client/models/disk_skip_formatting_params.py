# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DiskSkipFormattingParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disk_id': 'str',
        'skip_formatting': 'bool'
    }

    attribute_map = {
        'disk_id': 'disk_id',
        'skip_formatting': 'skip_formatting'
    }

    def __init__(self, disk_id=None, skip_formatting=None):  # noqa: E501
        """DiskSkipFormattingParams - a model defined in Swagger"""  # noqa: E501

        self._disk_id = None
        self._skip_formatting = None
        self.discriminator = None

        self.disk_id = disk_id
        self.skip_formatting = skip_formatting

    @property
    def disk_id(self):
        """Gets the disk_id of this DiskSkipFormattingParams.  # noqa: E501

        The ID of the disk that is being added to or removed from the host's skip_formatting_disks list  # noqa: E501

        :return: The disk_id of this DiskSkipFormattingParams.  # noqa: E501
        :rtype: str
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """Sets the disk_id of this DiskSkipFormattingParams.

        The ID of the disk that is being added to or removed from the host's skip_formatting_disks list  # noqa: E501

        :param disk_id: The disk_id of this DiskSkipFormattingParams.  # noqa: E501
        :type: str
        """
        if disk_id is None:
            raise ValueError("Invalid value for `disk_id`, must not be `None`")  # noqa: E501

        self._disk_id = disk_id

    @property
    def skip_formatting(self):
        """Gets the skip_formatting of this DiskSkipFormattingParams.  # noqa: E501

        True if you wish to add the disk to the skip_formatting_disks list, false if you wish to remove it  # noqa: E501

        :return: The skip_formatting of this DiskSkipFormattingParams.  # noqa: E501
        :rtype: bool
        """
        return self._skip_formatting

    @skip_formatting.setter
    def skip_formatting(self, skip_formatting):
        """Sets the skip_formatting of this DiskSkipFormattingParams.

        True if you wish to add the disk to the skip_formatting_disks list, false if you wish to remove it  # noqa: E501

        :param skip_formatting: The skip_formatting of this DiskSkipFormattingParams.  # noqa: E501
        :type: bool
        """
        if skip_formatting is None:
            raise ValueError("Invalid value for `skip_formatting`, must not be `None`")  # noqa: E501

        self._skip_formatting = skip_formatting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiskSkipFormattingParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskSkipFormattingParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
