# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OperatorHardwareRequirements(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator_name': 'str',
        'dependencies': 'list[str]',
        'requirements': 'HostTypeHardwareRequirementsWrapper'
    }

    attribute_map = {
        'operator_name': 'operator_name',
        'dependencies': 'dependencies',
        'requirements': 'requirements'
    }

    def __init__(self, operator_name=None, dependencies=None, requirements=None):  # noqa: E501
        """OperatorHardwareRequirements - a model defined in Swagger"""  # noqa: E501

        self._operator_name = None
        self._dependencies = None
        self._requirements = None
        self.discriminator = None

        if operator_name is not None:
            self.operator_name = operator_name
        if dependencies is not None:
            self.dependencies = dependencies
        if requirements is not None:
            self.requirements = requirements

    @property
    def operator_name(self):
        """Gets the operator_name of this OperatorHardwareRequirements.  # noqa: E501

        Unique name of the operator. Corresponds to name property of the monitored-operator, i.e. \"lso\", \"cnv\", etc.  # noqa: E501

        :return: The operator_name of this OperatorHardwareRequirements.  # noqa: E501
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this OperatorHardwareRequirements.

        Unique name of the operator. Corresponds to name property of the monitored-operator, i.e. \"lso\", \"cnv\", etc.  # noqa: E501

        :param operator_name: The operator_name of this OperatorHardwareRequirements.  # noqa: E501
        :type: str
        """

        self._operator_name = operator_name

    @property
    def dependencies(self):
        """Gets the dependencies of this OperatorHardwareRequirements.  # noqa: E501

        List of other operator unique names that are required to be installed. Corresponds to name property of the monitored-operator, i.e. \"lso\", \"cnv\", etc.  # noqa: E501

        :return: The dependencies of this OperatorHardwareRequirements.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this OperatorHardwareRequirements.

        List of other operator unique names that are required to be installed. Corresponds to name property of the monitored-operator, i.e. \"lso\", \"cnv\", etc.  # noqa: E501

        :param dependencies: The dependencies of this OperatorHardwareRequirements.  # noqa: E501
        :type: list[str]
        """

        self._dependencies = dependencies

    @property
    def requirements(self):
        """Gets the requirements of this OperatorHardwareRequirements.  # noqa: E501


        :return: The requirements of this OperatorHardwareRequirements.  # noqa: E501
        :rtype: HostTypeHardwareRequirementsWrapper
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this OperatorHardwareRequirements.


        :param requirements: The requirements of this OperatorHardwareRequirements.  # noqa: E501
        :type: HostTypeHardwareRequirementsWrapper
        """

        self._requirements = requirements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperatorHardwareRequirements, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatorHardwareRequirements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
