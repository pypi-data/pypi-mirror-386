# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Operator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_support_level_id': 'FeatureSupportLevelId',
        'support_level': 'SupportLevel',
        'reason': 'IncompatibilityReason',
        'incompatibilities': 'list[FeatureSupportLevelId]',
        'name': 'str',
        'dependencies': 'list[FeatureSupportLevelId]'
    }

    attribute_map = {
        'feature_support_level_id': 'feature-support-level-id',
        'support_level': 'support_level',
        'reason': 'reason',
        'incompatibilities': 'incompatibilities',
        'name': 'name',
        'dependencies': 'dependencies'
    }

    def __init__(self, feature_support_level_id=None, support_level=None, reason=None, incompatibilities=None, name=None, dependencies=None):  # noqa: E501
        """Operator - a model defined in Swagger"""  # noqa: E501

        self._feature_support_level_id = None
        self._support_level = None
        self._reason = None
        self._incompatibilities = None
        self._name = None
        self._dependencies = None
        self.discriminator = None

        self.feature_support_level_id = feature_support_level_id
        self.support_level = support_level
        if reason is not None:
            self.reason = reason
        self.incompatibilities = incompatibilities
        self.name = name
        self.dependencies = dependencies

    @property
    def feature_support_level_id(self):
        """Gets the feature_support_level_id of this Operator.  # noqa: E501


        :return: The feature_support_level_id of this Operator.  # noqa: E501
        :rtype: FeatureSupportLevelId
        """
        return self._feature_support_level_id

    @feature_support_level_id.setter
    def feature_support_level_id(self, feature_support_level_id):
        """Sets the feature_support_level_id of this Operator.


        :param feature_support_level_id: The feature_support_level_id of this Operator.  # noqa: E501
        :type: FeatureSupportLevelId
        """
        if feature_support_level_id is None:
            raise ValueError("Invalid value for `feature_support_level_id`, must not be `None`")  # noqa: E501

        self._feature_support_level_id = feature_support_level_id

    @property
    def support_level(self):
        """Gets the support_level of this Operator.  # noqa: E501


        :return: The support_level of this Operator.  # noqa: E501
        :rtype: SupportLevel
        """
        return self._support_level

    @support_level.setter
    def support_level(self, support_level):
        """Sets the support_level of this Operator.


        :param support_level: The support_level of this Operator.  # noqa: E501
        :type: SupportLevel
        """
        if support_level is None:
            raise ValueError("Invalid value for `support_level`, must not be `None`")  # noqa: E501

        self._support_level = support_level

    @property
    def reason(self):
        """Gets the reason of this Operator.  # noqa: E501


        :return: The reason of this Operator.  # noqa: E501
        :rtype: IncompatibilityReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Operator.


        :param reason: The reason of this Operator.  # noqa: E501
        :type: IncompatibilityReason
        """

        self._reason = reason

    @property
    def incompatibilities(self):
        """Gets the incompatibilities of this Operator.  # noqa: E501


        :return: The incompatibilities of this Operator.  # noqa: E501
        :rtype: list[FeatureSupportLevelId]
        """
        return self._incompatibilities

    @incompatibilities.setter
    def incompatibilities(self, incompatibilities):
        """Sets the incompatibilities of this Operator.


        :param incompatibilities: The incompatibilities of this Operator.  # noqa: E501
        :type: list[FeatureSupportLevelId]
        """
        if incompatibilities is None:
            raise ValueError("Invalid value for `incompatibilities`, must not be `None`")  # noqa: E501

        self._incompatibilities = incompatibilities

    @property
    def name(self):
        """Gets the name of this Operator.  # noqa: E501

        Name of the operator  # noqa: E501

        :return: The name of this Operator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Operator.

        Name of the operator  # noqa: E501

        :param name: The name of this Operator.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def dependencies(self):
        """Gets the dependencies of this Operator.  # noqa: E501


        :return: The dependencies of this Operator.  # noqa: E501
        :rtype: list[FeatureSupportLevelId]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this Operator.


        :param dependencies: The dependencies of this Operator.  # noqa: E501
        :type: list[FeatureSupportLevelId]
        """
        if dependencies is None:
            raise ValueError("Invalid value for `dependencies`, must not be `None`")  # noqa: E501

        self._dependencies = dependencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Operator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Operator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
