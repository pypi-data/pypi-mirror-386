# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterDefaultConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_network_cidr': 'str',
        'cluster_network_host_prefix': 'int',
        'inactive_deletion_hours': 'int',
        'service_network_cidr': 'str',
        'ntp_source': 'str',
        'cluster_networks_ipv4': 'list[ClusterNetwork]',
        'cluster_networks_dualstack': 'list[ClusterNetwork]',
        'service_networks_ipv4': 'list[ServiceNetwork]',
        'service_networks_dualstack': 'list[ServiceNetwork]',
        'forbidden_hostnames': 'list[str]'
    }

    attribute_map = {
        'cluster_network_cidr': 'cluster_network_cidr',
        'cluster_network_host_prefix': 'cluster_network_host_prefix',
        'inactive_deletion_hours': 'inactive_deletion_hours',
        'service_network_cidr': 'service_network_cidr',
        'ntp_source': 'ntp_source',
        'cluster_networks_ipv4': 'cluster_networks_ipv4',
        'cluster_networks_dualstack': 'cluster_networks_dualstack',
        'service_networks_ipv4': 'service_networks_ipv4',
        'service_networks_dualstack': 'service_networks_dualstack',
        'forbidden_hostnames': 'forbidden_hostnames'
    }

    def __init__(self, cluster_network_cidr=None, cluster_network_host_prefix=None, inactive_deletion_hours=None, service_network_cidr=None, ntp_source=None, cluster_networks_ipv4=None, cluster_networks_dualstack=None, service_networks_ipv4=None, service_networks_dualstack=None, forbidden_hostnames=None):  # noqa: E501
        """ClusterDefaultConfig - a model defined in Swagger"""  # noqa: E501

        self._cluster_network_cidr = None
        self._cluster_network_host_prefix = None
        self._inactive_deletion_hours = None
        self._service_network_cidr = None
        self._ntp_source = None
        self._cluster_networks_ipv4 = None
        self._cluster_networks_dualstack = None
        self._service_networks_ipv4 = None
        self._service_networks_dualstack = None
        self._forbidden_hostnames = None
        self.discriminator = None

        if cluster_network_cidr is not None:
            self.cluster_network_cidr = cluster_network_cidr
        if cluster_network_host_prefix is not None:
            self.cluster_network_host_prefix = cluster_network_host_prefix
        if inactive_deletion_hours is not None:
            self.inactive_deletion_hours = inactive_deletion_hours
        if service_network_cidr is not None:
            self.service_network_cidr = service_network_cidr
        if ntp_source is not None:
            self.ntp_source = ntp_source
        if cluster_networks_ipv4 is not None:
            self.cluster_networks_ipv4 = cluster_networks_ipv4
        if cluster_networks_dualstack is not None:
            self.cluster_networks_dualstack = cluster_networks_dualstack
        if service_networks_ipv4 is not None:
            self.service_networks_ipv4 = service_networks_ipv4
        if service_networks_dualstack is not None:
            self.service_networks_dualstack = service_networks_dualstack
        if forbidden_hostnames is not None:
            self.forbidden_hostnames = forbidden_hostnames

    @property
    def cluster_network_cidr(self):
        """Gets the cluster_network_cidr of this ClusterDefaultConfig.  # noqa: E501


        :return: The cluster_network_cidr of this ClusterDefaultConfig.  # noqa: E501
        :rtype: str
        """
        return self._cluster_network_cidr

    @cluster_network_cidr.setter
    def cluster_network_cidr(self, cluster_network_cidr):
        """Sets the cluster_network_cidr of this ClusterDefaultConfig.


        :param cluster_network_cidr: The cluster_network_cidr of this ClusterDefaultConfig.  # noqa: E501
        :type: str
        """

        self._cluster_network_cidr = cluster_network_cidr

    @property
    def cluster_network_host_prefix(self):
        """Gets the cluster_network_host_prefix of this ClusterDefaultConfig.  # noqa: E501


        :return: The cluster_network_host_prefix of this ClusterDefaultConfig.  # noqa: E501
        :rtype: int
        """
        return self._cluster_network_host_prefix

    @cluster_network_host_prefix.setter
    def cluster_network_host_prefix(self, cluster_network_host_prefix):
        """Sets the cluster_network_host_prefix of this ClusterDefaultConfig.


        :param cluster_network_host_prefix: The cluster_network_host_prefix of this ClusterDefaultConfig.  # noqa: E501
        :type: int
        """
        if cluster_network_host_prefix is not None and cluster_network_host_prefix > 32:  # noqa: E501
            raise ValueError("Invalid value for `cluster_network_host_prefix`, must be a value less than or equal to `32`")  # noqa: E501
        if cluster_network_host_prefix is not None and cluster_network_host_prefix < 1:  # noqa: E501
            raise ValueError("Invalid value for `cluster_network_host_prefix`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cluster_network_host_prefix = cluster_network_host_prefix

    @property
    def inactive_deletion_hours(self):
        """Gets the inactive_deletion_hours of this ClusterDefaultConfig.  # noqa: E501


        :return: The inactive_deletion_hours of this ClusterDefaultConfig.  # noqa: E501
        :rtype: int
        """
        return self._inactive_deletion_hours

    @inactive_deletion_hours.setter
    def inactive_deletion_hours(self, inactive_deletion_hours):
        """Sets the inactive_deletion_hours of this ClusterDefaultConfig.


        :param inactive_deletion_hours: The inactive_deletion_hours of this ClusterDefaultConfig.  # noqa: E501
        :type: int
        """

        self._inactive_deletion_hours = inactive_deletion_hours

    @property
    def service_network_cidr(self):
        """Gets the service_network_cidr of this ClusterDefaultConfig.  # noqa: E501


        :return: The service_network_cidr of this ClusterDefaultConfig.  # noqa: E501
        :rtype: str
        """
        return self._service_network_cidr

    @service_network_cidr.setter
    def service_network_cidr(self, service_network_cidr):
        """Sets the service_network_cidr of this ClusterDefaultConfig.


        :param service_network_cidr: The service_network_cidr of this ClusterDefaultConfig.  # noqa: E501
        :type: str
        """

        self._service_network_cidr = service_network_cidr

    @property
    def ntp_source(self):
        """Gets the ntp_source of this ClusterDefaultConfig.  # noqa: E501


        :return: The ntp_source of this ClusterDefaultConfig.  # noqa: E501
        :rtype: str
        """
        return self._ntp_source

    @ntp_source.setter
    def ntp_source(self, ntp_source):
        """Sets the ntp_source of this ClusterDefaultConfig.


        :param ntp_source: The ntp_source of this ClusterDefaultConfig.  # noqa: E501
        :type: str
        """

        self._ntp_source = ntp_source

    @property
    def cluster_networks_ipv4(self):
        """Gets the cluster_networks_ipv4 of this ClusterDefaultConfig.  # noqa: E501


        :return: The cluster_networks_ipv4 of this ClusterDefaultConfig.  # noqa: E501
        :rtype: list[ClusterNetwork]
        """
        return self._cluster_networks_ipv4

    @cluster_networks_ipv4.setter
    def cluster_networks_ipv4(self, cluster_networks_ipv4):
        """Sets the cluster_networks_ipv4 of this ClusterDefaultConfig.


        :param cluster_networks_ipv4: The cluster_networks_ipv4 of this ClusterDefaultConfig.  # noqa: E501
        :type: list[ClusterNetwork]
        """

        self._cluster_networks_ipv4 = cluster_networks_ipv4

    @property
    def cluster_networks_dualstack(self):
        """Gets the cluster_networks_dualstack of this ClusterDefaultConfig.  # noqa: E501


        :return: The cluster_networks_dualstack of this ClusterDefaultConfig.  # noqa: E501
        :rtype: list[ClusterNetwork]
        """
        return self._cluster_networks_dualstack

    @cluster_networks_dualstack.setter
    def cluster_networks_dualstack(self, cluster_networks_dualstack):
        """Sets the cluster_networks_dualstack of this ClusterDefaultConfig.


        :param cluster_networks_dualstack: The cluster_networks_dualstack of this ClusterDefaultConfig.  # noqa: E501
        :type: list[ClusterNetwork]
        """

        self._cluster_networks_dualstack = cluster_networks_dualstack

    @property
    def service_networks_ipv4(self):
        """Gets the service_networks_ipv4 of this ClusterDefaultConfig.  # noqa: E501


        :return: The service_networks_ipv4 of this ClusterDefaultConfig.  # noqa: E501
        :rtype: list[ServiceNetwork]
        """
        return self._service_networks_ipv4

    @service_networks_ipv4.setter
    def service_networks_ipv4(self, service_networks_ipv4):
        """Sets the service_networks_ipv4 of this ClusterDefaultConfig.


        :param service_networks_ipv4: The service_networks_ipv4 of this ClusterDefaultConfig.  # noqa: E501
        :type: list[ServiceNetwork]
        """

        self._service_networks_ipv4 = service_networks_ipv4

    @property
    def service_networks_dualstack(self):
        """Gets the service_networks_dualstack of this ClusterDefaultConfig.  # noqa: E501


        :return: The service_networks_dualstack of this ClusterDefaultConfig.  # noqa: E501
        :rtype: list[ServiceNetwork]
        """
        return self._service_networks_dualstack

    @service_networks_dualstack.setter
    def service_networks_dualstack(self, service_networks_dualstack):
        """Sets the service_networks_dualstack of this ClusterDefaultConfig.


        :param service_networks_dualstack: The service_networks_dualstack of this ClusterDefaultConfig.  # noqa: E501
        :type: list[ServiceNetwork]
        """

        self._service_networks_dualstack = service_networks_dualstack

    @property
    def forbidden_hostnames(self):
        """Gets the forbidden_hostnames of this ClusterDefaultConfig.  # noqa: E501

        This provides a list of forbidden hostnames. If this list is empty or not present, this implies that the UI should fall back to a hard coded list.  # noqa: E501

        :return: The forbidden_hostnames of this ClusterDefaultConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._forbidden_hostnames

    @forbidden_hostnames.setter
    def forbidden_hostnames(self, forbidden_hostnames):
        """Sets the forbidden_hostnames of this ClusterDefaultConfig.

        This provides a list of forbidden hostnames. If this list is empty or not present, this implies that the UI should fall back to a hard coded list.  # noqa: E501

        :param forbidden_hostnames: The forbidden_hostnames of this ClusterDefaultConfig.  # noqa: E501
        :type: list[str]
        """

        self._forbidden_hostnames = forbidden_hostnames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterDefaultConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterDefaultConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
