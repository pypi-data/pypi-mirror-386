# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpgradeChannel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_architecture': 'str',
        'channels': 'list[ReleaseChannel]'
    }

    attribute_map = {
        'cpu_architecture': 'cpu_architecture',
        'channels': 'channels'
    }

    def __init__(self, cpu_architecture=None, channels=None):  # noqa: E501
        """UpgradeChannel - a model defined in Swagger"""  # noqa: E501

        self._cpu_architecture = None
        self._channels = None
        self.discriminator = None

        self.cpu_architecture = cpu_architecture
        self.channels = channels

    @property
    def cpu_architecture(self):
        """Gets the cpu_architecture of this UpgradeChannel.  # noqa: E501

        The CPU architecture of the image.  # noqa: E501

        :return: The cpu_architecture of this UpgradeChannel.  # noqa: E501
        :rtype: str
        """
        return self._cpu_architecture

    @cpu_architecture.setter
    def cpu_architecture(self, cpu_architecture):
        """Sets the cpu_architecture of this UpgradeChannel.

        The CPU architecture of the image.  # noqa: E501

        :param cpu_architecture: The cpu_architecture of this UpgradeChannel.  # noqa: E501
        :type: str
        """
        if cpu_architecture is None:
            raise ValueError("Invalid value for `cpu_architecture`, must not be `None`")  # noqa: E501
        allowed_values = ["x86_64", "aarch64", "arm64", "ppc64le", "s390x", "multi"]  # noqa: E501
        if cpu_architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `cpu_architecture` ({0}), must be one of {1}"  # noqa: E501
                .format(cpu_architecture, allowed_values)
            )

        self._cpu_architecture = cpu_architecture

    @property
    def channels(self):
        """Gets the channels of this UpgradeChannel.  # noqa: E501


        :return: The channels of this UpgradeChannel.  # noqa: E501
        :rtype: list[ReleaseChannel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this UpgradeChannel.


        :param channels: The channels of this UpgradeChannel.  # noqa: E501
        :type: list[ReleaseChannel]
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")  # noqa: E501

        self._channels = channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeChannel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeChannel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
