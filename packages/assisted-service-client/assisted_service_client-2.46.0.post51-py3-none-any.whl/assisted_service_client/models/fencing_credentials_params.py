# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FencingCredentialsParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'username': 'str',
        'password': 'str',
        'certificate_verification': 'str'
    }

    attribute_map = {
        'address': 'address',
        'username': 'username',
        'password': 'password',
        'certificate_verification': 'certificate_verification'
    }

    def __init__(self, address=None, username=None, password=None, certificate_verification='Enabled'):  # noqa: E501
        """FencingCredentialsParams - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._username = None
        self._password = None
        self._certificate_verification = None
        self.discriminator = None

        self.address = address
        self.username = username
        self.password = password
        if certificate_verification is not None:
            self.certificate_verification = certificate_verification

    @property
    def address(self):
        """Gets the address of this FencingCredentialsParams.  # noqa: E501

        The URL of the host's BMC, for example https://bmc1.example.com.  # noqa: E501

        :return: The address of this FencingCredentialsParams.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this FencingCredentialsParams.

        The URL of the host's BMC, for example https://bmc1.example.com.  # noqa: E501

        :param address: The address of this FencingCredentialsParams.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def username(self):
        """Gets the username of this FencingCredentialsParams.  # noqa: E501

        The username to connect to the host's BMC.  # noqa: E501

        :return: The username of this FencingCredentialsParams.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this FencingCredentialsParams.

        The username to connect to the host's BMC.  # noqa: E501

        :param username: The username of this FencingCredentialsParams.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this FencingCredentialsParams.  # noqa: E501

        The password to connect to the host's BMC.  # noqa: E501

        :return: The password of this FencingCredentialsParams.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FencingCredentialsParams.

        The password to connect to the host's BMC.  # noqa: E501

        :param password: The password of this FencingCredentialsParams.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def certificate_verification(self):
        """Gets the certificate_verification of this FencingCredentialsParams.  # noqa: E501

        Whether to enable or disable certificate verification when connecting to the host's BMC.  # noqa: E501

        :return: The certificate_verification of this FencingCredentialsParams.  # noqa: E501
        :rtype: str
        """
        return self._certificate_verification

    @certificate_verification.setter
    def certificate_verification(self, certificate_verification):
        """Sets the certificate_verification of this FencingCredentialsParams.

        Whether to enable or disable certificate verification when connecting to the host's BMC.  # noqa: E501

        :param certificate_verification: The certificate_verification of this FencingCredentialsParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if certificate_verification not in allowed_values:
            raise ValueError(
                "Invalid value for `certificate_verification` ({0}), must be one of {1}"  # noqa: E501
                .format(certificate_verification, allowed_values)
            )

        self._certificate_verification = certificate_verification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FencingCredentialsParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FencingCredentialsParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
