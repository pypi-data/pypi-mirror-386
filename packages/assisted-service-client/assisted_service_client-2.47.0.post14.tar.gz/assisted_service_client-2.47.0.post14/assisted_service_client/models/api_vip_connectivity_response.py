# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiVipConnectivityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_success': 'bool',
        'url': 'str',
        'download_error': 'str',
        'ignition': 'str'
    }

    attribute_map = {
        'is_success': 'is_success',
        'url': 'url',
        'download_error': 'download_error',
        'ignition': 'ignition'
    }

    def __init__(self, is_success=None, url=None, download_error=None, ignition=None):  # noqa: E501
        """ApiVipConnectivityResponse - a model defined in Swagger"""  # noqa: E501

        self._is_success = None
        self._url = None
        self._download_error = None
        self._ignition = None
        self.discriminator = None

        if is_success is not None:
            self.is_success = is_success
        if url is not None:
            self.url = url
        if download_error is not None:
            self.download_error = download_error
        if ignition is not None:
            self.ignition = ignition

    @property
    def is_success(self):
        """Gets the is_success of this ApiVipConnectivityResponse.  # noqa: E501

        Whether the agent was able to download the ignition or not  # noqa: E501

        :return: The is_success of this ApiVipConnectivityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this ApiVipConnectivityResponse.

        Whether the agent was able to download the ignition or not  # noqa: E501

        :param is_success: The is_success of this ApiVipConnectivityResponse.  # noqa: E501
        :type: bool
        """

        self._is_success = is_success

    @property
    def url(self):
        """Gets the url of this ApiVipConnectivityResponse.  # noqa: E501

        This parameter mirrors the url parameter of the corresponding api_vip_connectivity_request  # noqa: E501

        :return: The url of this ApiVipConnectivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ApiVipConnectivityResponse.

        This parameter mirrors the url parameter of the corresponding api_vip_connectivity_request  # noqa: E501

        :param url: The url of this ApiVipConnectivityResponse.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def download_error(self):
        """Gets the download_error of this ApiVipConnectivityResponse.  # noqa: E501

        The error that occurred while downloading the worker ignition file, ignored when is_success is true  # noqa: E501

        :return: The download_error of this ApiVipConnectivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._download_error

    @download_error.setter
    def download_error(self, download_error):
        """Sets the download_error of this ApiVipConnectivityResponse.

        The error that occurred while downloading the worker ignition file, ignored when is_success is true  # noqa: E501

        :param download_error: The download_error of this ApiVipConnectivityResponse.  # noqa: E501
        :type: str
        """

        self._download_error = download_error

    @property
    def ignition(self):
        """Gets the ignition of this ApiVipConnectivityResponse.  # noqa: E501

        Ignition file fetched from the target cluster's API machine config server. This ignition file may be incomplete as almost all files / systemd units are removed from it by the agent in order to save space.  # noqa: E501

        :return: The ignition of this ApiVipConnectivityResponse.  # noqa: E501
        :rtype: str
        """
        return self._ignition

    @ignition.setter
    def ignition(self, ignition):
        """Sets the ignition of this ApiVipConnectivityResponse.

        Ignition file fetched from the target cluster's API machine config server. This ignition file may be incomplete as almost all files / systemd units are removed from it by the agent in order to save space.  # noqa: E501

        :param ignition: The ignition of this ApiVipConnectivityResponse.  # noqa: E501
        :type: str
        """

        self._ignition = ignition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiVipConnectivityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiVipConnectivityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
