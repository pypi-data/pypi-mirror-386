# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TangConnectivityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_success': 'bool',
        'tang_server_response': 'list[TangConnectivityResponseTangServerResponse]'
    }

    attribute_map = {
        'is_success': 'is_success',
        'tang_server_response': 'tang_server_response'
    }

    def __init__(self, is_success=None, tang_server_response=None):  # noqa: E501
        """TangConnectivityResponse - a model defined in Swagger"""  # noqa: E501

        self._is_success = None
        self._tang_server_response = None
        self.discriminator = None

        if is_success is not None:
            self.is_success = is_success
        if tang_server_response is not None:
            self.tang_server_response = tang_server_response

    @property
    def is_success(self):
        """Gets the is_success of this TangConnectivityResponse.  # noqa: E501

        Tang check result.  # noqa: E501

        :return: The is_success of this TangConnectivityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this TangConnectivityResponse.

        Tang check result.  # noqa: E501

        :param is_success: The is_success of this TangConnectivityResponse.  # noqa: E501
        :type: bool
        """

        self._is_success = is_success

    @property
    def tang_server_response(self):
        """Gets the tang_server_response of this TangConnectivityResponse.  # noqa: E501


        :return: The tang_server_response of this TangConnectivityResponse.  # noqa: E501
        :rtype: list[TangConnectivityResponseTangServerResponse]
        """
        return self._tang_server_response

    @tang_server_response.setter
    def tang_server_response(self, tang_server_response):
        """Sets the tang_server_response of this TangConnectivityResponse.


        :param tang_server_response: The tang_server_response of this TangConnectivityResponse.  # noqa: E501
        :type: list[TangConnectivityResponseTangServerResponse]
        """

        self._tang_server_response = tang_server_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TangConnectivityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TangConnectivityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
