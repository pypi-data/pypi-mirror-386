# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoadBalancer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str'
    }

    attribute_map = {
        'type': 'type'
    }

    def __init__(self, type=None):  # noqa: E501
        """LoadBalancer - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self.discriminator = None

        if type is not None:
            self.type = type

    @property
    def type(self):
        """Gets the type of this LoadBalancer.  # noqa: E501

        Indicates if the load balancer will be managed by the cluster or by the user. This is optional and The default is `cluster-managed`.  `cluster-managed` means that the cluster will start the components that assign the API and ingress VIPs to the nodes of the cluster automatically.  `user-managed` means that the user is responsible for configuring an external load balancer and assign the API and ingress VIPs to it. Note that this configuration needs to be completed before starting the installation of the cluster, as it is needed during the installation process.   # noqa: E501

        :return: The type of this LoadBalancer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LoadBalancer.

        Indicates if the load balancer will be managed by the cluster or by the user. This is optional and The default is `cluster-managed`.  `cluster-managed` means that the cluster will start the components that assign the API and ingress VIPs to the nodes of the cluster automatically.  `user-managed` means that the user is responsible for configuring an external load balancer and assign the API and ingress VIPs to it. Note that this configuration needs to be completed before starting the installation of the cluster, as it is needed during the installation process.   # noqa: E501

        :param type: The type of this LoadBalancer.  # noqa: E501
        :type: str
        """
        allowed_values = ["cluster-managed", "user-managed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoadBalancer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadBalancer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
