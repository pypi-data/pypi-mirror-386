# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Gpu(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor': 'str',
        'vendor_id': 'str',
        'device_id': 'str',
        'name': 'str',
        'address': 'str'
    }

    attribute_map = {
        'vendor': 'vendor',
        'vendor_id': 'vendor_id',
        'device_id': 'device_id',
        'name': 'name',
        'address': 'address'
    }

    def __init__(self, vendor=None, vendor_id=None, device_id=None, name=None, address=None):  # noqa: E501
        """Gpu - a model defined in Swagger"""  # noqa: E501

        self._vendor = None
        self._vendor_id = None
        self._device_id = None
        self._name = None
        self._address = None
        self.discriminator = None

        if vendor is not None:
            self.vendor = vendor
        if vendor_id is not None:
            self.vendor_id = vendor_id
        if device_id is not None:
            self.device_id = device_id
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address

    @property
    def vendor(self):
        """Gets the vendor of this Gpu.  # noqa: E501

        The name of the device vendor (for example \"Intel Corporation\")  # noqa: E501

        :return: The vendor of this Gpu.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Gpu.

        The name of the device vendor (for example \"Intel Corporation\")  # noqa: E501

        :param vendor: The vendor of this Gpu.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def vendor_id(self):
        """Gets the vendor_id of this Gpu.  # noqa: E501

        ID of the vendor (for example \"8086\")  # noqa: E501

        :return: The vendor_id of this Gpu.  # noqa: E501
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this Gpu.

        ID of the vendor (for example \"8086\")  # noqa: E501

        :param vendor_id: The vendor_id of this Gpu.  # noqa: E501
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def device_id(self):
        """Gets the device_id of this Gpu.  # noqa: E501

        ID of the device (for example \"3ea0\")  # noqa: E501

        :return: The device_id of this Gpu.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Gpu.

        ID of the device (for example \"3ea0\")  # noqa: E501

        :param device_id: The device_id of this Gpu.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def name(self):
        """Gets the name of this Gpu.  # noqa: E501

        Product name of the device (for example \"UHD Graphics 620 (Whiskey Lake)\")  # noqa: E501

        :return: The name of this Gpu.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Gpu.

        Product name of the device (for example \"UHD Graphics 620 (Whiskey Lake)\")  # noqa: E501

        :param name: The name of this Gpu.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this Gpu.  # noqa: E501

        Device address (for example \"0000:00:02.0\")  # noqa: E501

        :return: The address of this Gpu.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Gpu.

        Device address (for example \"0000:00:02.0\")  # noqa: E501

        :param address: The address of this Gpu.  # noqa: E501
        :type: str
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Gpu, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Gpu):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
