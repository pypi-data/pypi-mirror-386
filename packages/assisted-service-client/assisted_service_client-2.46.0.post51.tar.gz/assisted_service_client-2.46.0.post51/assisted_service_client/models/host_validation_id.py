# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HostValidationId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CONNECTED = "connected"
    MEDIA_CONNECTED = "media-connected"
    HAS_INVENTORY = "has-inventory"
    HAS_MIN_CPU_CORES = "has-min-cpu-cores"
    HAS_MIN_VALID_DISKS = "has-min-valid-disks"
    HAS_MIN_MEMORY = "has-min-memory"
    MACHINE_CIDR_DEFINED = "machine-cidr-defined"
    HAS_CPU_CORES_FOR_ROLE = "has-cpu-cores-for-role"
    HAS_MEMORY_FOR_ROLE = "has-memory-for-role"
    HOSTNAME_UNIQUE = "hostname-unique"
    HOSTNAME_VALID = "hostname-valid"
    BELONGS_TO_MACHINE_CIDR = "belongs-to-machine-cidr"
    IGNITION_DOWNLOADABLE = "ignition-downloadable"
    BELONGS_TO_MAJORITY_GROUP = "belongs-to-majority-group"
    VALID_PLATFORM_NETWORK_SETTINGS = "valid-platform-network-settings"
    NTP_SYNCED = "ntp-synced"
    TIME_SYNCED_BETWEEN_HOST_AND_SERVICE = "time-synced-between-host-and-service"
    CONTAINER_IMAGES_AVAILABLE = "container-images-available"
    LSO_REQUIREMENTS_SATISFIED = "lso-requirements-satisfied"
    OCS_REQUIREMENTS_SATISFIED = "ocs-requirements-satisfied"
    ODF_REQUIREMENTS_SATISFIED = "odf-requirements-satisfied"
    LVM_REQUIREMENTS_SATISFIED = "lvm-requirements-satisfied"
    MCE_REQUIREMENTS_SATISFIED = "mce-requirements-satisfied"
    MTV_REQUIREMENTS_SATISFIED = "mtv-requirements-satisfied"
    OSC_REQUIREMENTS_SATISFIED = "osc-requirements-satisfied"
    SUFFICIENT_INSTALLATION_DISK_SPEED = "sufficient-installation-disk-speed"
    CNV_REQUIREMENTS_SATISFIED = "cnv-requirements-satisfied"
    SUFFICIENT_NETWORK_LATENCY_REQUIREMENT_FOR_ROLE = "sufficient-network-latency-requirement-for-role"
    SUFFICIENT_PACKET_LOSS_REQUIREMENT_FOR_ROLE = "sufficient-packet-loss-requirement-for-role"
    HAS_DEFAULT_ROUTE = "has-default-route"
    API_DOMAIN_NAME_RESOLVED_CORRECTLY = "api-domain-name-resolved-correctly"
    API_INT_DOMAIN_NAME_RESOLVED_CORRECTLY = "api-int-domain-name-resolved-correctly"
    APPS_DOMAIN_NAME_RESOLVED_CORRECTLY = "apps-domain-name-resolved-correctly"
    RELEASE_DOMAIN_NAME_RESOLVED_CORRECTLY = "release-domain-name-resolved-correctly"
    COMPATIBLE_WITH_CLUSTER_PLATFORM = "compatible-with-cluster-platform"
    DNS_WILDCARD_NOT_CONFIGURED = "dns-wildcard-not-configured"
    DISK_ENCRYPTION_REQUIREMENTS_SATISFIED = "disk-encryption-requirements-satisfied"
    NON_OVERLAPPING_SUBNETS = "non-overlapping-subnets"
    VSPHERE_DISK_UUID_ENABLED = "vsphere-disk-uuid-enabled"
    COMPATIBLE_AGENT = "compatible-agent"
    NO_SKIP_INSTALLATION_DISK = "no-skip-installation-disk"
    NO_SKIP_MISSING_DISK = "no-skip-missing-disk"
    NO_IP_COLLISIONS_IN_NETWORK = "no-ip-collisions-in-network"
    NO_ISCSI_NIC_BELONGS_TO_MACHINE_CIDR = "no-iscsi-nic-belongs-to-machine-cidr"
    NODE_FEATURE_DISCOVERY_REQUIREMENTS_SATISFIED = "node-feature-discovery-requirements-satisfied"
    NVIDIA_GPU_REQUIREMENTS_SATISFIED = "nvidia-gpu-requirements-satisfied"
    PIPELINES_REQUIREMENTS_SATISFIED = "pipelines-requirements-satisfied"
    SERVICEMESH_REQUIREMENTS_SATISFIED = "servicemesh-requirements-satisfied"
    SERVERLESS_REQUIREMENTS_SATISFIED = "serverless-requirements-satisfied"
    OPENSHIFT_AI_REQUIREMENTS_SATISFIED = "openshift-ai-requirements-satisfied"
    AUTHORINO_REQUIREMENTS_SATISFIED = "authorino-requirements-satisfied"
    MTU_VALID = "mtu-valid"
    NMSTATE_REQUIREMENTS_SATISFIED = "nmstate-requirements-satisfied"
    AMD_GPU_REQUIREMENTS_SATISFIED = "amd-gpu-requirements-satisfied"
    KMM_REQUIREMENTS_SATISFIED = "kmm-requirements-satisfied"
    NODE_HEALTHCHECK_REQUIREMENTS_SATISFIED = "node-healthcheck-requirements-satisfied"
    SELF_NODE_REMEDIATION_REQUIREMENTS_SATISFIED = "self-node-remediation-requirements-satisfied"
    FENCE_AGENTS_REMEDIATION_REQUIREMENTS_SATISFIED = "fence-agents-remediation-requirements-satisfied"
    NODE_MAINTENANCE_REQUIREMENTS_SATISFIED = "node-maintenance-requirements-satisfied"
    KUBE_DESCHEDULER_REQUIREMENTS_SATISFIED = "kube-descheduler-requirements-satisfied"
    CLUSTER_OBSERVABILITY_REQUIREMENTS_SATISFIED = "cluster-observability-requirements-satisfied"
    NUMA_RESOURCES_REQUIREMENTS_SATISFIED = "numa-resources-requirements-satisfied"
    OADP_REQUIREMENTS_SATISFIED = "oadp-requirements-satisfied"
    METALLB_REQUIREMENTS_SATISFIED = "metallb-requirements-satisfied"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """HostValidationId - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostValidationId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostValidationId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
