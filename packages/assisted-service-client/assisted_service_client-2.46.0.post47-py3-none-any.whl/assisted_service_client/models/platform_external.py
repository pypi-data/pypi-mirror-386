# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PlatformExternal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform_name': 'str',
        'cloud_controller_manager': 'str'
    }

    attribute_map = {
        'platform_name': 'platform_name',
        'cloud_controller_manager': 'cloud_controller_manager'
    }

    def __init__(self, platform_name=None, cloud_controller_manager=''):  # noqa: E501
        """PlatformExternal - a model defined in Swagger"""  # noqa: E501

        self._platform_name = None
        self._cloud_controller_manager = None
        self.discriminator = None

        if platform_name is not None:
            self.platform_name = platform_name
        if cloud_controller_manager is not None:
            self.cloud_controller_manager = cloud_controller_manager

    @property
    def platform_name(self):
        """Gets the platform_name of this PlatformExternal.  # noqa: E501

        Holds the arbitrary string representing the infrastructure provider name.  # noqa: E501

        :return: The platform_name of this PlatformExternal.  # noqa: E501
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this PlatformExternal.

        Holds the arbitrary string representing the infrastructure provider name.  # noqa: E501

        :param platform_name: The platform_name of this PlatformExternal.  # noqa: E501
        :type: str
        """
        if platform_name is not None and len(platform_name) < 1:
            raise ValueError("Invalid value for `platform_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._platform_name = platform_name

    @property
    def cloud_controller_manager(self):
        """Gets the cloud_controller_manager of this PlatformExternal.  # noqa: E501

        When set to external, this property will enable an external cloud provider.  # noqa: E501

        :return: The cloud_controller_manager of this PlatformExternal.  # noqa: E501
        :rtype: str
        """
        return self._cloud_controller_manager

    @cloud_controller_manager.setter
    def cloud_controller_manager(self, cloud_controller_manager):
        """Sets the cloud_controller_manager of this PlatformExternal.

        When set to external, this property will enable an external cloud provider.  # noqa: E501

        :param cloud_controller_manager: The cloud_controller_manager of this PlatformExternal.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "External"]  # noqa: E501
        if cloud_controller_manager not in allowed_values:
            raise ValueError(
                "Invalid value for `cloud_controller_manager` ({0}), must be one of {1}"  # noqa: E501
                .format(cloud_controller_manager, allowed_values)
            )

        self._cloud_controller_manager = cloud_controller_manager

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlatformExternal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlatformExternal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
