# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Route(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interface': 'str',
        'gateway': 'str',
        'destination': 'str',
        'family': 'int',
        'metric': 'int'
    }

    attribute_map = {
        'interface': 'interface',
        'gateway': 'gateway',
        'destination': 'destination',
        'family': 'family',
        'metric': 'metric'
    }

    def __init__(self, interface=None, gateway=None, destination=None, family=None, metric=None):  # noqa: E501
        """Route - a model defined in Swagger"""  # noqa: E501

        self._interface = None
        self._gateway = None
        self._destination = None
        self._family = None
        self._metric = None
        self.discriminator = None

        if interface is not None:
            self.interface = interface
        if gateway is not None:
            self.gateway = gateway
        if destination is not None:
            self.destination = destination
        if family is not None:
            self.family = family
        if metric is not None:
            self.metric = metric

    @property
    def interface(self):
        """Gets the interface of this Route.  # noqa: E501

        Interface to which packets for this route will be sent  # noqa: E501

        :return: The interface of this Route.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this Route.

        Interface to which packets for this route will be sent  # noqa: E501

        :param interface: The interface of this Route.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def gateway(self):
        """Gets the gateway of this Route.  # noqa: E501

        Gateway address where the packets are sent  # noqa: E501

        :return: The gateway of this Route.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this Route.

        Gateway address where the packets are sent  # noqa: E501

        :param gateway: The gateway of this Route.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def destination(self):
        """Gets the destination of this Route.  # noqa: E501

        The destination network or destination host  # noqa: E501

        :return: The destination of this Route.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this Route.

        The destination network or destination host  # noqa: E501

        :param destination: The destination of this Route.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def family(self):
        """Gets the family of this Route.  # noqa: E501

        Defines whether this is an IPv4 (4) or IPv6 route (6)  # noqa: E501

        :return: The family of this Route.  # noqa: E501
        :rtype: int
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Route.

        Defines whether this is an IPv4 (4) or IPv6 route (6)  # noqa: E501

        :param family: The family of this Route.  # noqa: E501
        :type: int
        """

        self._family = family

    @property
    def metric(self):
        """Gets the metric of this Route.  # noqa: E501

        Route priority metric  # noqa: E501

        :return: The metric of this Route.  # noqa: E501
        :rtype: int
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Route.

        Route priority metric  # noqa: E501

        :param metric: The metric of this Route.  # noqa: E501
        :type: int
        """

        self._metric = metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Route, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Route):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
