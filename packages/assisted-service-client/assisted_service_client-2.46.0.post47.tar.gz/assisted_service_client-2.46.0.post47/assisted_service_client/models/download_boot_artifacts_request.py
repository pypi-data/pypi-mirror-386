# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DownloadBootArtifactsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kernel_url': 'str',
        'rootfs_url': 'str',
        'initrd_url': 'str',
        'host_fs_mount_dir': 'str'
    }

    attribute_map = {
        'kernel_url': 'kernel_url',
        'rootfs_url': 'rootfs_url',
        'initrd_url': 'initrd_url',
        'host_fs_mount_dir': 'host_fs_mount_dir'
    }

    def __init__(self, kernel_url=None, rootfs_url=None, initrd_url=None, host_fs_mount_dir=None):  # noqa: E501
        """DownloadBootArtifactsRequest - a model defined in Swagger"""  # noqa: E501

        self._kernel_url = None
        self._rootfs_url = None
        self._initrd_url = None
        self._host_fs_mount_dir = None
        self.discriminator = None

        self.kernel_url = kernel_url
        self.rootfs_url = rootfs_url
        self.initrd_url = initrd_url
        self.host_fs_mount_dir = host_fs_mount_dir

    @property
    def kernel_url(self):
        """Gets the kernel_url of this DownloadBootArtifactsRequest.  # noqa: E501

        URL address to download the kernel.  # noqa: E501

        :return: The kernel_url of this DownloadBootArtifactsRequest.  # noqa: E501
        :rtype: str
        """
        return self._kernel_url

    @kernel_url.setter
    def kernel_url(self, kernel_url):
        """Sets the kernel_url of this DownloadBootArtifactsRequest.

        URL address to download the kernel.  # noqa: E501

        :param kernel_url: The kernel_url of this DownloadBootArtifactsRequest.  # noqa: E501
        :type: str
        """
        if kernel_url is None:
            raise ValueError("Invalid value for `kernel_url`, must not be `None`")  # noqa: E501

        self._kernel_url = kernel_url

    @property
    def rootfs_url(self):
        """Gets the rootfs_url of this DownloadBootArtifactsRequest.  # noqa: E501

        URL address to download the rootfs.  # noqa: E501

        :return: The rootfs_url of this DownloadBootArtifactsRequest.  # noqa: E501
        :rtype: str
        """
        return self._rootfs_url

    @rootfs_url.setter
    def rootfs_url(self, rootfs_url):
        """Sets the rootfs_url of this DownloadBootArtifactsRequest.

        URL address to download the rootfs.  # noqa: E501

        :param rootfs_url: The rootfs_url of this DownloadBootArtifactsRequest.  # noqa: E501
        :type: str
        """
        if rootfs_url is None:
            raise ValueError("Invalid value for `rootfs_url`, must not be `None`")  # noqa: E501

        self._rootfs_url = rootfs_url

    @property
    def initrd_url(self):
        """Gets the initrd_url of this DownloadBootArtifactsRequest.  # noqa: E501

        URL address to download the initrd.  # noqa: E501

        :return: The initrd_url of this DownloadBootArtifactsRequest.  # noqa: E501
        :rtype: str
        """
        return self._initrd_url

    @initrd_url.setter
    def initrd_url(self, initrd_url):
        """Sets the initrd_url of this DownloadBootArtifactsRequest.

        URL address to download the initrd.  # noqa: E501

        :param initrd_url: The initrd_url of this DownloadBootArtifactsRequest.  # noqa: E501
        :type: str
        """
        if initrd_url is None:
            raise ValueError("Invalid value for `initrd_url`, must not be `None`")  # noqa: E501

        self._initrd_url = initrd_url

    @property
    def host_fs_mount_dir(self):
        """Gets the host_fs_mount_dir of this DownloadBootArtifactsRequest.  # noqa: E501

        The base directory on the host that contains the /boot folder. The host will download boot artifacts into a folder in this directory.  # noqa: E501

        :return: The host_fs_mount_dir of this DownloadBootArtifactsRequest.  # noqa: E501
        :rtype: str
        """
        return self._host_fs_mount_dir

    @host_fs_mount_dir.setter
    def host_fs_mount_dir(self, host_fs_mount_dir):
        """Sets the host_fs_mount_dir of this DownloadBootArtifactsRequest.

        The base directory on the host that contains the /boot folder. The host will download boot artifacts into a folder in this directory.  # noqa: E501

        :param host_fs_mount_dir: The host_fs_mount_dir of this DownloadBootArtifactsRequest.  # noqa: E501
        :type: str
        """
        if host_fs_mount_dir is None:
            raise ValueError("Invalid value for `host_fs_mount_dir`, must not be `None`")  # noqa: E501

        self._host_fs_mount_dir = host_fs_mount_dir

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DownloadBootArtifactsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DownloadBootArtifactsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
