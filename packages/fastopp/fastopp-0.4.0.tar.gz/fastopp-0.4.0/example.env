# FastOpp Environment Configuration Example
# Copy this file to .env and update the values for your environment
#
# QUICK START:
# 1. Copy this file: cp example.env .env
# 2. Generate a secret key: uv run python oppman.py secrets
# 3. Copy the generated SECRET_KEY line into your .env file
# 4. Start the app: uv run python main.py
# 5. Visit /oppman/emergency to create your first admin user (this will create the database tables)
#
# REQUIRED SETTINGS:
# - SECRET_KEY: Used for session management and JWT tokens
# - DATABASE_URL: Database connection string (required for emergency access to work)
#
# OPTIONAL SETTINGS:
# - All other settings have sensible defaults
# - Uncomment and modify only what you need

# =============================================================================
# REQUIRED SETTINGS
# =============================================================================

# Secret key for session management and JWT tokens
# Generate a secure random key for production
# You can use: uv run python oppman.py secrets
SECRET_KEY=your_secret_key_here_change_in_production

# Database URL for SQLAlchemy
# For SQLite (default development):
# Note: The database file will be created automatically, but the URL must be set
DATABASE_URL=sqlite+aiosqlite:///./test.db

# =============================================================================
# OPTIONAL SECURITY SETTINGS
# =============================================================================

# Enable emergency access for password recovery
# Set to true to enable /oppman/emergency route
# WARNING: Only enable this temporarily for password recovery
EMERGENCY_ACCESS_ENABLED=false

# =============================================================================
# OPTIONAL DATABASE SETTINGS
# =============================================================================

# Default SQLite database (development):
# DATABASE_URL=sqlite+aiosqlite:///./test.db
# Note: You can change the database filename by modifying the URL:
# DATABASE_URL=sqlite+aiosqlite:///./product.db
# DATABASE_URL=sqlite+aiosqlite:///./myapp.db

# For PostgreSQL with asyncpg driver (production/testing):
# Uses asyncpg driver for async operations - no additional packages needed
# DATABASE_URL=postgresql+asyncpg://username:password@localhost:5432/fastopp

# For PostgreSQL with SSL (required for cloud providers like Leapcell):
# DATABASE_URL=postgresql+asyncpg://username:password@host:port/database?sslmode=require
# DATABASE_URL=postgresql+asyncpg://username:password@host:port/database?sslmode=prefer
# DATABASE_URL=postgresql+asyncpg://username:password@host:port/database?sslmode=verify-full

# =============================================================================
# OPTIONAL AUTHENTICATION SETTINGS
# =============================================================================

# JWT token expiration time in minutes (default: 30)
# ACCESS_TOKEN_EXPIRE_MINUTES=30

# =============================================================================
# OPTIONAL APPLICATION SETTINGS
# =============================================================================

# Debug mode (default: true)
# DEBUG=false

# Environment (default: development)
# ENVIRONMENT=production

# =============================================================================
# OPTIONAL SERVER SETTINGS
# =============================================================================
# change if you have a conflict on the host or port
# when you deploy
# Host to bind to (default: 0.0.0.0)
# HOST=0.0.0.0

# Port to run on (default: 8000)
# PORT=8000

# =============================================================================
# OPTIONAL FILE UPLOAD SETTINGS (services/storage/)
# =============================================================================

# Storage type: "filesystem" or "s3" (default: filesystem)
# STORAGE_TYPE=filesystem

# Upload directory for filesystem storage (default: static/uploads)
# UPLOAD_DIR=static/uploads


# =============================================================================
# S3/OBJECT STORAGE SETTINGS (for STORAGE_TYPE=s3)
# =============================================================================

# S3 Access Key (required for S3 storage)
# S3_ACCESS_KEY=your_s3_access_key

# S3 Secret Key (required for S3 storage)
# S3_SECRET_KEY=your_s3_secret_key

# S3 Bucket Name (required for S3 storage)
# S3_BUCKET=your_bucket_name

# S3 Endpoint URL (optional, for non-AWS services like LeapCell)
# S3_ENDPOINT_URL=https://objstorage.leapcell.io

# S3 Region (default: us-east-1)
# S3_REGION=us-east-1

# CDN URL for public file access (optional)
# S3_CDN_URL=https://your-account.leapcellobj.com/your-bucket

# =============================================================================
# OPTIONAL API KEYS
# =============================================================================

# OpenRouter API key for LLM access
# OPENROUTER_API_KEY=your_openrouter_api_key_here


# =============================================================================
# OPTIONAL OPENROUTER LLM MODELS
# =============================================================================
# Highly suggest you use a paid model as the free version
# has strict usage limits
# default: meta-llama/llama-3.3-70b-instruct:free  
# OPENROUTER_LLM_MODEL=meta-llama/llama-3.3-70b-instruct:free
# Alternative models you can use:
# OPENROUTER_LLM_MODEL=meta-llama/llama-3.3-70b-instruct  # Paid version
# OPENROUTER_LLM_MODEL=anthropic/claude-3.5-sonnet:free    # Claude 3.5 Sonnet
# OPENROUTER_LLM_MODEL=openai/gpt-4o-mini:free             # GPT-4o Mini
# OPENROUTER_LLM_MODEL=google/gemini-pro:free              # Gemini Pro

# =============================================================================
# NOTES
# =============================================================================

# 1. Never commit the actual .env file to version control
# 2. Use strong, unique secrets for production
# 3. Regularly rotate your SECRET_KEY and JWT_SECRET
# 4. Set EMERGENCY_ACCESS_ENABLED=false in production after setup
# 5. Use environment-specific values for different deployments
# 6. Consider using a secrets management service for production
