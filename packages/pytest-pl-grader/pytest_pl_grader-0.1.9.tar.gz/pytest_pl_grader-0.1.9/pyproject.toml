[project]
name = "pytest-pl-grader"
dynamic = ["version"]
description = "A pytest plugin for autograding Python code. Designed for use with the PrairieLearn platform."
readme = "README.md"
authors = [{ name = "Eliot Robson", email = "eliot.robson24@gmail.com" }]
requires-python = ">=3.10"
dependencies = ["dill>=0.4.0", "pytest", "prettytable>=3.8.0"]
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.urls]
repository = "https://github.com/eliotwrobson/pl-python-autograder-v2"

[dependency-groups]
dev = [
    "numpy>=2.0",
    "pandas>=2.0",
    "mypy",
    "ruff>=0.11.12",
    "sympy",
    "pandas-stubs",
    "matplotlib-stubs",
    "matplotlib",
    "plot-serializer",
]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"

[tool.ruff]
line-length = 140
src = ["src", "tests"]
target-version = "py310"


[tool.ruff.lint]
ignore = [
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "S101",   # flake8-bandit assert
    "S308",   # flake8-bandit suspicious-mark-safe-usage
    "E501",   # pycodestyle line-too-long
    "PT004",
    "PT011",
    "PT013",
    "S603",
    "S607",
]
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "EXE", # flake8-executable
    "F",   # pyflakes
    "I",   # isort
    "INT", # flake8-gettext
    "PIE", # flake8-pie
    "PLC", # pylint convention
    "PLE", # pylint errors
    "PT",  # flake8-pytest-style
    #    "PTH", # flake8-use-pathlib
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S",   # flake8-bandit
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
forced-separate = ["conftest"]
force-single-line = true

[project.entry-points.pytest11]
pl-grader = "pytest_pl_grader.plugin"

# TODO uncomment to add a separate CLI entrypoint.
# [project.scripts]
# pl-pytest-autograder = "pl_pytest_autograder.cli:main"

[tool.mypy]
exclude = "tests/scenario_root/.*student_code.*\\.py"

[[tool.mypy.overrides]]
module = ["sympy.*", "dill.*", "plot_serializer.*"]
ignore_missing_imports = true
