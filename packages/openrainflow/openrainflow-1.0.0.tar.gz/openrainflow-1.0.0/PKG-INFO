Metadata-Version: 2.4
Name: openrainflow
Version: 1.0.0
Summary: High-performance fatigue analysis package with rainflow counting, Eurocode fatigue curves, and Miner's damage calculation
Author: OpenRainflow Contributors
License: MIT
Project-URL: Homepage, https://github.com/Pavlishenku/OpenRainflow
Project-URL: Repository, https://github.com/Pavlishenku/OpenRainflow
Project-URL: Bug Tracker, https://github.com/Pavlishenku/OpenRainflow/issues
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20.0
Requires-Dist: numba>=0.56.0
Requires-Dist: scipy>=1.7.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Requires-Dist: mypy>=0.990; extra == "dev"
Provides-Extra: parallel
Requires-Dist: joblib>=1.2.0; extra == "parallel"
Dynamic: license-file

# OpenRainflow

[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

Un package Python haute performance pour l'analyse de fatigue avec la m√©thode rainflow, les courbes d'endurance de l'Eurocode, et le calcul de dommage selon la r√®gle de cumul lin√©aire de Miner.

## Caract√©ristiques

- ‚ú® **Impl√©mentation optimis√©e** de l'algorithme rainflow avec Numba JIT compilation
- üöÄ **Haute performance** : traitement rapide avec gestion m√©moire optimale
- üîÑ **Parall√©lisation** : support multi-threading pour grandes donn√©es
- üìä **Courbes Eurocode** : impl√©mentation compl√®te des courbes d'endurance EN 1993-1-9
- üî¨ **Calcul de dommage** : r√®gle de Miner pour √©valuation de dur√©e de vie
- üß™ **Test√©** : couverture compl√®te avec tests unitaires

## Installation

```bash
pip install -e .
```

Pour le support de parall√©lisation :
```bash
pip install -e ".[parallel]"
```

Pour le d√©veloppement :
```bash
pip install -e ".[dev]"
```

## Utilisation rapide

```python
import numpy as np
from openrainflow import rainflow_count, calculate_damage
from openrainflow.eurocode import EurocodeCategory

# Donn√©es de contrainte temporelle
stress_history = np.random.randn(10000) * 100 + 200

# Comptage rainflow
cycles = rainflow_count(stress_history)

# D√©finir la courbe d'endurance (cat√©gorie 36 de l'Eurocode)
fatigue_curve = EurocodeCategory.get_curve('36')

# Calculer le dommage cumul√©
damage = calculate_damage(cycles, fatigue_curve)

print(f"Dommage cumul√© : {damage:.6f}")
print(f"Dur√©e de vie estim√©e : {1/damage:.2f} r√©p√©titions" if damage > 0 else "Infini")
```

## Algorithme Rainflow

L'algorithme rainflow est une m√©thode de comptage de cycles utilis√©e pour analyser les historiques de contraintes variables. Cette impl√©mentation utilise :

- **ASTM E1049-85** : Standard de comptage rainflow
- **Numba JIT** : compilation Just-In-Time pour performances optimales
- **NumPy** : op√©rations vectoris√©es sur tableaux

## Courbes d'endurance Eurocode

Impl√©mentation des courbes S-N selon EN 1993-1-9 :

- Cat√©gories : 160, 125, 112, 100, 90, 80, 71, 63, 56, 50, 45, 40, 36
- Support de la limite d'endurance
- Correction pour contrainte moyenne (option)

## R√®gle de Miner

Calcul du dommage cumul√© selon :

\[D = \sum_{i=1}^{k} \frac{n_i}{N_i}\]

o√π :
- \(n_i\) : nombre de cycles √† l'amplitude \(\Delta\sigma_i\)
- \(N_i\) : nombre de cycles √† rupture pour \(\Delta\sigma_i\)

## Structure du package

```
openrainflow/
‚îú‚îÄ‚îÄ __init__.py           # API principale
‚îú‚îÄ‚îÄ rainflow.py           # Algorithme rainflow
‚îú‚îÄ‚îÄ eurocode.py           # Courbes d'endurance Eurocode
‚îú‚îÄ‚îÄ damage.py             # Calcul de dommage Miner
‚îú‚îÄ‚îÄ parallel.py           # Traitement parall√®le
‚îî‚îÄ‚îÄ utils.py              # Utilitaires
```

## Performance

Benchmarks sur Intel Core i7 (8 threads) :

- **Rainflow counting** : ~1M points/seconde (mode JIT)
- **Damage calculation** : ~100k cycles/seconde
- **Memory usage** : optimis√© pour grandes s√©ries (>10M points)

## Contribution

Les contributions sont bienvenues ! Voir [CONTRIBUTING.md](CONTRIBUTING.md).

## Licence

MIT License - voir [LICENSE](LICENSE) pour d√©tails.

## Benchmarks

Des benchmarks comparatifs avec d'autres packages (`fatpack`, `rainflow`) sont disponibles dans le dossier `benchmarks/`.

```bash
# Installer les packages de comparaison
pip install fatpack rainflow matplotlib

# Ex√©cuter tous les benchmarks
python benchmarks/run_all_benchmarks.py

# Ou individuellement
python benchmarks/benchmark_speed.py      # Vitesse
python benchmarks/benchmark_accuracy.py   # Pr√©cision
python benchmarks/benchmark_memory.py     # M√©moire
python benchmarks/benchmark_features.py   # Fonctionnalit√©s
```

R√©sultats typiques : OpenRainflow est **3-4x plus rapide** apr√®s compilation JIT.

## R√©f√©rences

1. ASTM E1049-85, "Standard Practices for Cycle Counting in Fatigue Analysis"
2. EN 1993-1-9:2005, "Eurocode 3: Design of steel structures - Part 1-9: Fatigue"
3. Miner, M. A. (1945), "Cumulative damage in fatigue"

