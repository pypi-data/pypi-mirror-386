"""JSON Schema validation helpers for plugin configuration"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/validation.ipynb.

# %% auto 0
__all__ = ['validate_config', 'extract_defaults']

# %% ../../nbs/utils/validation.ipynb 3
from typing import Dict, Any, Tuple, Optional

try:
    import jsonschema
    HAS_JSONSCHEMA = True
except ImportError:
    HAS_JSONSCHEMA = False

# %% ../../nbs/utils/validation.ipynb 5
def validate_config(
    config:Dict[str, Any], # Configuration to validate
    schema:Dict[str, Any] # JSON Schema to validate against
) -> Tuple[bool, Optional[str]]: # (is_valid, error_message)
    """Validate a configuration dictionary against a JSON Schema."""
    # If jsonschema is available, use it for validation
    if HAS_JSONSCHEMA:
        try:
            jsonschema.validate(instance=config, schema=schema)
            return True, None
        except jsonschema.exceptions.ValidationError as e:
            return False, str(e)
        except Exception as e:
            return False, f"Validation error: {str(e)}"
    else:
        # Basic validation without jsonschema
        return _basic_validate(config, schema)

# %% ../../nbs/utils/validation.ipynb 7
def _basic_validate(
    config:Dict[str, Any], # Configuration to validate
    schema:Dict[str, Any] # JSON Schema to validate against
) -> Tuple[bool, Optional[str]]: # (is_valid, error_message)
    """Basic validation without jsonschema library."""
    try:
        # Check required fields
        required_fields = schema.get("required", [])
        for field in required_fields:
            if field not in config:
                return False, f"Missing required field: {field}"

        # Check field types if properties are defined
        properties = schema.get("properties", {})
        for key, value in config.items():
            if key in properties:
                prop_schema = properties[key]

                # Check enum values
                if "enum" in prop_schema and value not in prop_schema["enum"]:
                    return False, f"Invalid value for {key}: {value}. Must be one of {prop_schema['enum']}"

                # Basic type checking
                expected_type = prop_schema.get("type")
                if expected_type:
                    # Handle nullable types (e.g., ["string", "null"])
                    if isinstance(expected_type, list):
                        if value is None and "null" in expected_type:
                            continue
                        # Get the non-null type
                        types = [t for t in expected_type if t != "null"]
                        if types:
                            expected_type = types[0]

                    type_map = {
                        "string": str,
                        "number": (int, float),
                        "integer": int,
                        "boolean": bool,
                        "array": list,
                        "object": dict
                    }
                    expected_python_type = type_map.get(expected_type)
                    if expected_python_type and not isinstance(value, expected_python_type):
                        return False, f"Invalid type for {key}: expected {expected_type}, got {type(value).__name__}"

                # Check numeric constraints
                if isinstance(value, (int, float)):
                    if "minimum" in prop_schema and value < prop_schema["minimum"]:
                        return False, f"Value for {key} is below minimum: {value} < {prop_schema['minimum']}"
                    if "maximum" in prop_schema and value > prop_schema["maximum"]:
                        return False, f"Value for {key} is above maximum: {value} > {prop_schema['maximum']}"

        return True, None
    except Exception as e:
        return False, f"Validation error: {str(e)}"

# %% ../../nbs/utils/validation.ipynb 8
def extract_defaults(
    schema:Dict[str, Any] # JSON Schema
) -> Dict[str, Any]: # Default values from schema
    """Extract default values from a JSON Schema."""
    defaults = {}

    properties = schema.get("properties", {})
    for key, prop_schema in properties.items():
        if "default" in prop_schema:
            defaults[key] = prop_schema["default"]

    return defaults
