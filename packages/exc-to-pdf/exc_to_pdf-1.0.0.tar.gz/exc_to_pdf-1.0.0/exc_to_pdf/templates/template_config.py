"""
Template configuration for advanced template system.

This module provides configuration classes for template settings,
branding, and styling options.
"""

from dataclasses import dataclass, field
from typing import Dict, Any, Optional, List
from pathlib import Path
import json

from ..exceptions import ConfigurationException


@dataclass
class BrandingConfig:
    """Configuration for custom branding."""

    # Company information
    company_name: str = ""
    company_logo_path: Optional[str] = None
    company_website: str = ""

    # Brand colors
    primary_color: str = "#2E86AB"
    secondary_color: str = "#A23B72"
    accent_color: str = "#F18F01"
    text_color: str = "#212529"

    # Typography
    font_family: str = "Helvetica"
    header_font: str = "Helvetica-Bold"

    # Logo settings
    logo_size: tuple[float, float] = (100, 50)  # width, height in points
    logo_position: str = "header"  # header, footer, watermark

    # Watermark settings
    watermark_text: str = ""
    watermark_opacity: float = 0.1
    watermark_rotation: int = 45

    def __post_init__(self) -> None:
        """Validate branding configuration."""
        self._validate_colors()
        self._validate_logo_path()

    def _validate_colors(self) -> None:
        """Validate color format."""
        colors = [
            ("primary_color", self.primary_color),
            ("secondary_color", self.secondary_color),
            ("accent_color", self.accent_color),
            ("text_color", self.text_color),
        ]

        for color_name, color_value in colors:
            if not isinstance(color_value, str) or not color_value.startswith("#"):
                raise ConfigurationException(
                    f"{color_name} must be a hex color string (e.g., '#FF0000'), got {color_value}"
                )
            if len(color_value) != 7:
                raise ConfigurationException(
                    f"{color_name} must be 7 characters hex color (e.g., '#FF0000'), got {color_value}"
                )

    def _validate_logo_path(self) -> None:
        """Validate logo file path."""
        if self.company_logo_path:
            logo_path = Path(self.company_logo_path)
            if not logo_path.exists():
                raise ConfigurationException(
                    f"Logo file not found: {self.company_logo_path}"
                )


@dataclass
class TemplateConfig:
    """Configuration for template system."""

    # Template identification
    template_name: str = "modern"
    base_template: Optional[str] = None
    template_version: str = "1.0"

    # Page settings
    page_size: str = "A4"
    orientation: str = "portrait"
    margin_top: float = 72
    margin_bottom: float = 72
    margin_left: float = 72
    margin_right: float = 72

    # Table styling
    table_style: str = "modern"
    header_background: str = "#2E86AB"
    header_text_color: str = "#FFFFFF"
    alternate_rows: bool = True
    alternate_row_color: str = "#F8F8F8"
    border_color: str = "#CCCCCC"
    grid_color: str = "#E0E0E0"

    # Typography
    font_family: str = "Helvetica"
    font_size: int = 10
    header_font_size: int = 12
    title_font_size: int = 16

    # Content styling
    title_alignment: str = "center"
    header_alignment: str = "center"
    data_alignment: str = "left"

    # Footer settings
    include_footer: bool = True
    footer_text: str = "Generated by exc-to-pdf"
    footer_alignment: str = "center"
    footer_font_size: int = 8

    # Header settings
    include_header: bool = True
    header_text: str = ""
    show_page_numbers: bool = True
    page_number_format: str = "Page {page}"  # Can include {page} and {total}

    # Dynamic styling
    dynamic_column_width: bool = True
    auto_adjust_margins: bool = False
    responsive_tables: bool = True

    # Advanced features
    include_charts: bool = True
    chart_position: str = "after_table"  # after_table, before_table, separate_page
    chart_max_size: tuple[float, float] = (400, 300)  # width, height in points

    # Branding
    branding: Optional[BrandingConfig] = None

    # Custom CSS/Style overrides
    custom_styles: Dict[str, Any] = field(default_factory=dict)

    def __post_init__(self) -> None:
        """Validate template configuration."""
        if self.branding is None:
            self.branding = BrandingConfig()

        self._validate_config()

    def _validate_config(self) -> None:
        """Validate configuration parameters."""
        # Validate page size
        valid_page_sizes = ["A4", "A3", "A5", "Letter", "Legal"]
        if self.page_size not in valid_page_sizes:
            raise ConfigurationException(
                f"Invalid page_size: {self.page_size}. Must be one of {valid_page_sizes}"
            )

        # Validate orientation
        valid_orientations = ["portrait", "landscape"]
        if self.orientation not in valid_orientations:
            raise ConfigurationException(
                f"Invalid orientation: {self.orientation}. Must be one of {valid_orientations}"
            )

        # Validate alignments
        valid_alignments = ["left", "center", "right", "justify"]
        for align_name, align_value in [
            ("title_alignment", self.title_alignment),
            ("header_alignment", self.header_alignment),
            ("data_alignment", self.data_alignment),
            ("footer_alignment", self.footer_alignment),
        ]:
            if align_value not in valid_alignments:
                raise ConfigurationException(
                    f"Invalid {align_name}: {align_value}. Must be one of {valid_alignments}"
                )

        # Validate font sizes
        for size_name, size_value in [
            ("font_size", self.font_size),
            ("header_font_size", self.header_font_size),
            ("title_font_size", self.title_font_size),
            ("footer_font_size", self.footer_font_size),
        ]:
            if size_value <= 0 or size_value > 72:
                raise ConfigurationException(
                    f"{size_name} must be between 1 and 72, got {size_value}"
                )

        # Validate chart position
        valid_chart_positions = ["after_table", "before_table", "separate_page"]
        if self.chart_position not in valid_chart_positions:
            raise ConfigurationException(
                f"Invalid chart_position: {self.chart_position}. Must be one of {valid_chart_positions}"
            )

    def to_dict(self) -> Dict[str, Any]:
        """Convert configuration to dictionary."""
        return {
            "template_name": self.template_name,
            "base_template": self.base_template,
            "template_version": self.template_version,
            "page_size": self.page_size,
            "orientation": self.orientation,
            "margin_top": self.margin_top,
            "margin_bottom": self.margin_bottom,
            "margin_left": self.margin_left,
            "margin_right": self.margin_right,
            "table_style": self.table_style,
            "header_background": self.header_background,
            "header_text_color": self.header_text_color,
            "alternate_rows": self.alternate_rows,
            "alternate_row_color": self.alternate_row_color,
            "border_color": self.border_color,
            "grid_color": self.grid_color,
            "font_family": self.font_family,
            "font_size": self.font_size,
            "header_font_size": self.header_font_size,
            "title_font_size": self.title_font_size,
            "title_alignment": self.title_alignment,
            "header_alignment": self.header_alignment,
            "data_alignment": self.data_alignment,
            "include_footer": self.include_footer,
            "footer_text": self.footer_text,
            "footer_alignment": self.footer_alignment,
            "footer_font_size": self.footer_font_size,
            "include_header": self.include_header,
            "header_text": self.header_text,
            "show_page_numbers": self.show_page_numbers,
            "page_number_format": self.page_number_format,
            "dynamic_column_width": self.dynamic_column_width,
            "auto_adjust_margins": self.auto_adjust_margins,
            "responsive_tables": self.responsive_tables,
            "include_charts": self.include_charts,
            "chart_position": self.chart_position,
            "chart_max_size": self.chart_max_size,
            "branding": self.branding.__dict__ if self.branding else None,
            "custom_styles": self.custom_styles,
        }

    @classmethod
    def from_dict(cls, config_dict: Dict[str, Any]) -> "TemplateConfig":
        """Create configuration from dictionary."""
        # Handle branding configuration
        branding_dict = config_dict.pop("branding", None)
        branding = BrandingConfig(**branding_dict) if branding_dict else None

        return cls(**config_dict, branding=branding)

    def save_to_file(self, file_path: str) -> None:
        """Save configuration to JSON file."""
        try:
            with open(file_path, "w") as f:
                json.dump(self.to_dict(), f, indent=2)
        except Exception as e:
            raise ConfigurationException(
                f"Failed to save template config to {file_path}: {e}"
            )

    @classmethod
    def load_from_file(cls, file_path: str) -> "TemplateConfig":
        """Load configuration from JSON file."""
        try:
            with open(file_path, "r") as f:
                config_dict = json.load(f)
            return cls.from_dict(config_dict)
        except FileNotFoundError:
            raise ConfigurationException(f"Template config file not found: {file_path}")
        except json.JSONDecodeError as e:
            raise ConfigurationException(
                f"Invalid JSON in template config file {file_path}: {e}"
            )
        except Exception as e:
            raise ConfigurationException(
                f"Failed to load template config from {file_path}: {e}"
            )

    def merge_with_base(self, base_config: "TemplateConfig") -> "TemplateConfig":
        """Merge this configuration with a base configuration.

        Args:
            base_config: Base template configuration to inherit from

        Returns:
            New TemplateConfig with merged settings
        """
        merged_dict = base_config.to_dict()

        # Override with current configuration values
        current_dict = self.to_dict()
        for key, value in current_dict.items():
            if value is not None and value != "":
                merged_dict[key] = value

        # Handle branding merge specially
        if self.branding:
            if merged_dict["branding"]:
                # Merge branding dictionaries
                base_branding = merged_dict["branding"]
                current_branding = self.branding.__dict__
                for key, value in current_branding.items():
                    if value is not None and value != "":
                        base_branding[key] = value
                merged_dict["branding"] = base_branding
            else:
                merged_dict["branding"] = self.branding.__dict__

        return self.__class__.from_dict(merged_dict)
