__version__ = "0.3.10"  # noqa: PYI052

import contextlib
from collections.abc import Generator
from typing import Literal

from matplotlib._stubs_utils._typing import PathLike

from . import colors as colors

class __getattr__:
    URL_REGEX = ...

def set_loglevel(
    level: Literal["notset", "debug", "info", "warning", "error", "critical"],
) -> None: ...

class ExecutableNotFoundError(FileNotFoundError): ...

def checkdep_usetex(s) -> bool: ...
def get_configdir() -> str: ...
def get_cachedir() -> str: ...
def get_data_path() -> str: ...
def matplotlib_fname() -> str: ...

class RcParams(dict):
    validate = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def find_all(self, pattern) -> RcParams: ...
    def copy(self) -> RcParams: ...

def rc_params(fail_on_error: bool = ...) -> RcParams: ...
def is_url(filename: str) -> bool: ...
def rc_params_from_file(
    fname: str | PathLike,
    fail_on_error: bool = ...,
    use_default_template: bool = ...,
) -> RcParams: ...

rcParamsDefault: RcParams = ...
rcParams: RcParams = ...
rcParamsOrig: RcParams = ...

def rc(group, **kwargs) -> None: ...
def rcdefaults() -> None: ...
def rc_file_defaults() -> None: ...
def rc_file(fname: str | PathLike, *, use_default_template: bool = ...) -> None: ...
@contextlib.contextmanager
def rc_context(rc: dict = ..., fname: str | PathLike = ...) -> Generator: ...
def use(backend: str, *, force: bool = True) -> None: ...
def get_backend() -> str: ...
def interactive(b) -> bool: ...
def is_interactive() -> bool: ...

default_test_modules: list[str] = ...
