# .github/workflows/deploy-docs.yml
name: Deploy Docs (on latest push to main branch)
# It builds and deploys the latest version of the documentation to GitHub Pages.
# IMPORTANT: Ensure Repo Settings / Pages / Build and deployment / Set Source to `GitHub Actions`.

# CI PHASES A-B-C-D:
# - Assemble: Install dependencies, verify environment setup
# - Baseline: Core validation (types exist, lint passes, tests pass)
# - Coverage: Generate reports and upload artifacts
# - Deploy: Build package and docs (sanity checks for release readiness)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write # gh-pages deployment

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1" # real-time logging
  PYTHONIOENCODING: "utf-8"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: write # gh-pages in docs job

    steps:
      # ------------------- ASSEMBLE -------------------

      - name: A1) Checkout (with full history for tags)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Full history for tags

      - name: A2) Install uv (with caching)
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: A3) Pin Python version for consistency
        run: uv python pin 3.12

      - name: A4) Display version information
        run: |
          python --version
          uv --version
          uv pip list | head -n 50

      - name: A5) Sync to install dependencies
        run: uv sync --extra dev --extra docs --upgrade

      # ------------------- BASELINE CHECKS -------------------

      - name: B1) Fail fast if no MkDocs configuration
        run: |
          if [ -f "mkdocs.yml" ] || [ -f "mkdocs.yaml" ]; then
            echo "MkDocs configuration found. Proceeding."
          else
            echo "ERROR: mkdocs.yml not found."
            echo "If you do not want documentation deployment,"
            echo "delete .github/workflows/deploy-docs.yml (or add mkdocs.yml)."
            exit 1
          fi

      - name: B2) Verify mike is installed
        run: |
          if ! uv run mike --version >/dev/null 2>&1; then
            echo "ERROR: 'mike' is not installed. Ensure it's in your 'docs' extra."
            exit 1
          fi

      # ------------ DEPLOY ------------------

      - name: D1) Build docs (mkdocs --strict)
        if: github.ref == 'refs/heads/main'
        run: uv run mkdocs build --strict

      - name: D2) Build package (sanity check, no publish)
        run: uv build

      - name: D3) Deploy docs with Mike (SCM version) and set latest
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          VERSION="main"   # rolling docs version for branch builds
          echo "Deploying docs for version: $VERSION"

          # Ensure we never treat 'latest' as a version; ignore if absent.
          uv run mike delete latest --push || true

          uv run mike deploy --push --update-aliases "$VERSION" latest
          uv run mike set-default --push latest
