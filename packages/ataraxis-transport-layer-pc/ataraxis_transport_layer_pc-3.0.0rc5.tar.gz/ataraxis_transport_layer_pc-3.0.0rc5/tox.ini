# This file provides configurations for tox-based project automation tasks. Generally, this project uses tox similar
# to how some other projects use build-systems.

# Base tox configurations. Note, the 'envlist' will run in the listed order whenever 'tox' is used without an -e
# specifier.
[tox]
requires =
    tox>=4,<5
    tox-uv>=1,<2
envlist =
    uninstall
    export
    lint
    stubs
    {py312, py313}-test
    coverage
    docs
    build
    install

# This forces tox to create a 'sterile' environment into which the project with all dependencies is installed prior to
# running the requested tasks, isolating the process from the rest of the system. This is almost always the desired
# runtime mode.
isolated_build = True

# Note: The 'basepython' argument should either be set to the oldest version in the supported stack. It controls the
# specific ruleset used to format and (especially) style-check the code. Also, existing stubs prevent mypy from
# checking source code, so they are removed before linting.
[testenv: lint]
description =
    Runs static code formatting, style, and typing checkers. Mypy may not always work properly until py.typed marker is
    added the first time the 'stubs' task is executed.
extras = dev
basepython = py312
commands =
    automation-cli purge-stubs
    ruff format
    ruff check --fix ./src
    mypy ./src

# Note: if py.typed is not present, generates the marker in the highest library source code directory before generating
# stub files. Builds and uses the distribution package to generate the stubs.
[testenv: stubs]
description =
    Generates the py.typed marker and the stub files using the built library wheel. Formats the stubs with ruff before
    moving them to appropriate source sub-directories.
depends = lint
extras = dev
commands =
    automation-cli process-typed-markers
    stubgen -o stubs --include-private -p ataraxis_transport_layer_pc -v
    automation-cli process-stubs
    ruff format
    ruff check --select I --fix ./src

# Note: The test source code should be written to import and use intended library name, as the project is compiled and
# installed as a library prior to running the tests. Therefore, the tests need to be designed to test the distributed
# library, rather than the source code.
[testenv: {py312, py313}-test]
package = wheel
description =
    Runs unit and integration tests for each of the python versions listed in the task name. Uses 'loadgroup' balancing
    and all logical cores to optimize runtime speed while allowing manual control over which cores execute tasks (see
    pytest-xdist documentation).
extras = dev
setenv =
    # Sets environment parameters, which includes intermediate coverage aggregation file used by coverage.
    COVERAGE_FILE = reports{/}.coverage.{envname}
commands =
    # Make sure the --cov is always set to the intended library name, so that coverage runs on the whole library
    # exactly once.
    pytest --import-mode=append --cov=ataraxis_transport_layer_pc --cov-config=pyproject.toml --cov-report=xml \
    --junitxml=reports/pytest.xml.{envname} -n logical --dist loadgroup

[testenv:coverage]
skip_install = true
description =
    Combines test-coverage data from multiple test runs (for different python versions) into a single html file. The
    file can be viewed by loading the 'reports/coverage_html/index.html'.
setenv = COVERAGE_FILE = reports/.coverage
deps = ataraxis-automation==7.0.0
depends = {py312, py313}-test
commands =
    junitparser merge --glob reports/pytest.xml.* reports/pytest.xml
    coverage combine --keep
    coverage xml
    coverage html

# Uses '-j auto' to parallelize the build process and '-v' to make it verbose.
[testenv:docs]
description =
    Builds the API documentation from source code docstrings using Sphinx. The result can be viewed by loading
    'docs/build/html/index.html'.
deps = ataraxis-automation==7.0.0
depends =
    uninstall
    doxygen
commands =
    sphinx-build -b html -d docs/build/doctrees docs/source docs/build/html -j auto -v

[testenv:build]
skip_install = true
description =
    Builds the source code distribution (sdist) and the binary distribution package (wheel). Use 'upload' task to
    subsequently upload built wheels to PyPI.
deps = ataraxis-automation==7.0.0
allowlist_externals =
    docker
commands =
    python -m build . --sdist
    python -m build . --wheel

# Pass the '--replace-token' flag from the command line to replace the token stored in the .pypirc file.
[testenv:upload]
skip_install = true
description =
    Uses twine to upload all files inside the '/dist' folder to PyPI, ignoring any files that are already uploaded.
    Uses API token stored in '.pypirc' file or provided by user to authenticate the upload.
deps = ataraxis-automation==7.0.0
allowlist_externals =
    distutils
commands =
    automation-cli acquire-pypi-token {posargs:}
    twine upload dist/* --skip-existing --config-file .pypirc

[testenv:install]
skip_install = true
deps = ataraxis-automation==7.0.0
depends =
    lint
    stubs
    {py312, py313}-test
    coverage
    docs
    export
description =
    Builds and installs the project into the specified mamba environment. The environment must already exist for this
    task to run as expected.
commands =
    automation-cli install-project --environment_name axtlpc_dev

[testenv:uninstall]
skip_install = true
deps = ataraxis-automation==7.0.0
description =
    Uninstalls the project from the specified mamba environment. If the environment does not exist this task silently
    succeeds.
commands =
    automation-cli uninstall-project --environment_name axtlpc_dev

[testenv:create]
skip_install = true
deps = ataraxis-automation==7.0.0
description =
    Creates the mamba environment using the requested python version and installs runtime and development project
    dependencies extracted from the pyproject.toml file into the environment. Does not install the project library.
commands =
    automation-cli create-environment --environment_name axtlpc_dev --python_version 3.13

[testenv:remove]
skip_install = true
deps = ataraxis-automation==7.0.0
description =
    Removes the requested mamba environment.
commands =
    automation-cli remove-environment --environment_name axtlpc_dev

[testenv:provision]
skip_install = true
deps = ataraxis-automation==7.0.0
description =
    Provisions the requested mamba environment by removing and (re)creating the environment.
commands =
    automation-cli provision-environment --environment_name axtlpc_dev --python_version 3.13

[testenv:export]
skip_install = true
deps = ataraxis-automation==7.0.0
description =
    Exports the requested mamba environment to the 'envs' folder as a .yml file and as a spec.txt with revision history.
commands =
    automation-cli export-environment --environment_name axtlpc_dev

[testenv:import]
skip_install = true
deps = ataraxis-automation==7.0.0
description =
    Discovers and imports (installs) a new or updates an already existing mamba environment using the .yml file
    stored in the 'envs' directory.
commands =
    automation-cli import-environment --environment_name axtlpc_dev
