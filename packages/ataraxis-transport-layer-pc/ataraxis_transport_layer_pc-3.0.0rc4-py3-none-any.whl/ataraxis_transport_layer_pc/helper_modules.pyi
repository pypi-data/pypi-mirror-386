from typing import Any

import numpy as np
from _typeshed import Incomplete
from numpy.typing import NDArray as NDArray

_ZERO: Incomplete
_ONE_BYTE: int
_TWO_BYTE: int
_BYTE_SIZE: int
type CRCType = np.uint8 | np.uint16 | np.uint32

class _COBSProcessor:
    maximum_payload_size: int
    minimum_payload_size: int
    maximum_packet_size: int
    minimum_packet_size: int
    delimiter: int
    def __init__(self) -> None: ...
    def encode_payload(self, payload: NDArray[np.uint8]) -> NDArray[np.uint8]: ...
    def decode_payload(self, packet: NDArray[np.uint8]) -> NDArray[np.uint8]: ...

class COBSProcessor:
    _processor: _COBSProcessor
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def encode_payload(self, payload: NDArray[np.uint8]) -> NDArray[np.uint8]: ...
    def decode_payload(self, packet: NDArray[np.uint8]) -> NDArray[np.uint8]: ...
    @property
    def processor(self) -> _COBSProcessor: ...

class _CRCProcessor:
    polynomial: CRCType
    initial_crc_value: CRCType
    final_xor_value: CRCType
    crc_byte_length: np.uint8
    crc_table: Incomplete
    def __init__(self, polynomial: CRCType, initial_crc_value: CRCType, final_xor_value: CRCType) -> None: ...
    def calculate_checksum(self, buffer: NDArray[np.uint8], check: bool = False) -> np.uint16: ...
    def _generate_crc_table(self, polynomial: CRCType) -> None: ...
    def _make_polynomial_type(self, value: Any) -> CRCType: ...

class CRCProcessor:
    _processor: _CRCProcessor
    def __init__(self, polynomial: CRCType, initial_crc_value: CRCType, final_xor_value: CRCType) -> None: ...
    def __repr__(self) -> str: ...
    def calculate_checksum(self, buffer: NDArray[np.uint8], check: bool) -> np.uint16: ...
    @property
    def crc_byte_length(self) -> np.uint8: ...
    @property
    def crc_table(self) -> NDArray[CRCType]: ...
    @property
    def processor(self) -> _CRCProcessor: ...
    @property
    def polynomial(self) -> CRCType: ...
    @property
    def initial_crc_value(self) -> CRCType: ...
    @property
    def final_xor_value(self) -> CRCType: ...

class SerialMock:
    is_open: bool
    tx_buffer: bytes
    rx_buffer: bytes
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def write(self, data: bytes) -> None: ...
    def read(self, size: int = 1) -> bytes: ...
    def reset_input_buffer(self) -> None: ...
    def reset_output_buffer(self) -> None: ...
    @property
    def in_waiting(self) -> int: ...
    @property
    def out_waiting(self) -> int: ...
