"""Alert components for displaying success, error, warning, and info messages"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/alerts.ipynb.

# %% auto 0
__all__ = ['create_success_alert', 'create_error_alert', 'create_warning_alert', 'create_info_alert']

# %% ../../nbs/components/alerts.ipynb 3
from pathlib import Path
from typing import Dict, Any, Optional
from fasthtml.common import *
from fasthtml.svg import Svg, Path as SvgPath
from cjm_fasthtml_daisyui.components.feedback.alert import alert, alert_colors
from cjm_fasthtml_daisyui.utilities.semantic_colors import stroke_dui, text_dui
from cjm_fasthtml_tailwind.utilities.effects import shadow
from cjm_fasthtml_tailwind.utilities.spacing import m
from cjm_fasthtml_tailwind.utilities.sizing import w, h
from cjm_fasthtml_tailwind.utilities.typography import font_size
from cjm_fasthtml_tailwind.core.base import combine_classes

from ..core.html_ids import AppHtmlIds

# %% ../../nbs/components/alerts.ipynb 6
def _create_auto_dismiss_script(
    timeout_ms:int=3000 # Time in milliseconds before auto-dismiss
) -> FT: # Script element for auto-dismissing alerts
    """Create a script that auto-dismisses the alert after a timeout."""
    return Script(f"""
        // Clear any existing timeout
        if (window.alertTimeout) {{
            clearTimeout(window.alertTimeout);
            clearTimeout(window.alertFadeTimeout);
        }}

        // Remove any existing alert immediately
        var existingAlert = document.getElementById('{AppHtmlIds.ALERT_CONTAINER}');
        if (existingAlert && existingAlert !== document.currentScript.parentElement) {{
            existingAlert.remove();
        }}

        // Set new timeout for this alert
        window.alertTimeout = setTimeout(function() {{
            var alertEl = document.getElementById('{AppHtmlIds.ALERT_CONTAINER}');
            if (alertEl) {{
                alertEl.style.transition = 'opacity 0.5s';
                alertEl.style.opacity = '0';
                window.alertFadeTimeout = setTimeout(function() {{
                    if (alertEl) {{
                        alertEl.remove();
                    }}
                }}, 500);
            }}
        }}, {timeout_ms});
    """)

# %% ../../nbs/components/alerts.ipynb 9
def create_success_alert(
    message:str, # The success message to display
    timeout_ms:int=3000 # Time in milliseconds before auto-dismiss
) -> FT: # Div element containing the success alert
    """Create a success alert that auto-dismisses."""
    return Div(
        Div(
            Svg(
                SvgPath(
                    stroke_linecap="round",
                    stroke_linejoin="round",
                    stroke_width="2",
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                ),
                xmlns="http://www.w3.org/2000/svg",
                fill="none",
                viewBox="0 0 24 24",
                cls=combine_classes(w(6), h(6), stroke_dui.success_content)
            ),
            Span(message),
            cls=combine_classes(
                alert,
                alert_colors.success,
                shadow.md,
                m.b(4)
            )
        ),
        _create_auto_dismiss_script(timeout_ms),
        id=AppHtmlIds.ALERT_CONTAINER
    )

# %% ../../nbs/components/alerts.ipynb 13
def create_error_alert(
    message:str, # The error message to display
    details:Optional[str]=None # Optional additional details text
) -> FT: # Div element containing the error alert
    """Create an error alert with optional details."""
    content = [
        Svg(
            SvgPath(
                stroke_linecap="round",
                stroke_linejoin="round",
                stroke_width="2",
                d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
            ),
            xmlns="http://www.w3.org/2000/svg",
            fill="none",
            viewBox="0 0 24 24",
            cls=combine_classes(w(6), h(6), stroke_dui.error_content)
        ),
        Span(message)
    ]

    if details:
        content.append(
            Span(details, cls=combine_classes(font_size.sm, text_dui.base_content.opacity(60)))
        )

    return Div(
        Div(
            *content,
            cls=combine_classes(
                alert,
                alert_colors.error,
                shadow.md,
                m.b(4)
            )
        ),
        id=AppHtmlIds.ALERT_CONTAINER
    )

# %% ../../nbs/components/alerts.ipynb 17
def create_warning_alert(
    message: str,  # The warning message to display
    details: Optional[str] = None  # Optional additional details text
) -> Div:  # Div element containing the warning alert
    """Create a warning alert with optional details."""
    content = [
        Svg(
            SvgPath(
                stroke_linecap="round",
                stroke_linejoin="round",
                stroke_width="2",
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
            ),
            xmlns="http://www.w3.org/2000/svg",
            fill="none",
            viewBox="0 0 24 24",
            cls=combine_classes(w(6), h(6), stroke_dui.warning_content)
        ),
        Span(message)
    ]

    if details:
        content.append(
            Span(details, cls=combine_classes(font_size.sm, text_dui.base_content.opacity(60)))
        )

    return Div(
        Div(
            *content,
            cls=combine_classes(
                alert,
                alert_colors.warning,
                shadow.md,
                m.b(4)
            )
        ),
        id=AppHtmlIds.ALERT_CONTAINER
    )

# %% ../../nbs/components/alerts.ipynb 21
def create_info_alert(
    message:str, # The info message to display
    details:Optional[str]=None # Optional additional details text
) -> FT: # Div element containing the info alert
    """Create an info alert with optional details."""
    content = [
        Svg(
            SvgPath(
                stroke_linecap="round",
                stroke_linejoin="round",
                stroke_width="2",
                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            ),
            xmlns="http://www.w3.org/2000/svg",
            fill="none",
            viewBox="0 0 24 24",
            cls=combine_classes(w(6), h(6), stroke_dui.info_content)
        ),
        Span(message)
    ]

    if details:
        content.append(
            Span(details, cls=combine_classes(font_size.sm, text_dui.base_content.opacity(60)))
        )

    return Div(
        Div(
            *content,
            cls=combine_classes(
                alert,
                alert_colors.info,
                shadow.md,
                m.b(4)
            )
        ),
        id=AppHtmlIds.ALERT_CONTAINER
    )
