"""Responsive navigation bar components with mobile support"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/navbar.ipynb.

# %% auto 0
__all__ = ['create_nav_link', 'create_navbar']

# %% ../../nbs/components/navbar.ipynb 3
from typing import List, Tuple, Optional, Any
from fasthtml.common import *
from fasthtml.svg import Svg, Path as SvgPath
from cjm_fasthtml_daisyui.core.testing import create_theme_selector
from cjm_fasthtml_daisyui.components.navigation.navbar import navbar, navbar_start, navbar_end, navbar_center
from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles, btn_sizes, btn_modifiers
from cjm_fasthtml_daisyui.components.actions.dropdown import dropdown, dropdown_content
from cjm_fasthtml_daisyui.components.navigation.menu import menu, menu_directions
from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui, stroke_dui
from cjm_fasthtml_daisyui.utilities.border_radius import border_radius
from cjm_fasthtml_tailwind.utilities.effects import shadow
from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, flex_display
from cjm_fasthtml_tailwind.utilities.spacing import p, m
from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, text_wrap
from cjm_fasthtml_tailwind.utilities.layout import display_tw, z
from cjm_fasthtml_tailwind.utilities.sizing import h, max_w, w
from cjm_fasthtml_tailwind.core.base import combine_classes

from ..core.html_ids import AppHtmlIds

# %% ../../nbs/components/navbar.ipynb 6
def create_nav_link(
    label:str, # Link text to display
    route, # FastHTML route object with .to() method
    target_id:str=AppHtmlIds.MAIN_CONTENT # HTMX target container ID
) -> FT: # Anchor element with HTMX attributes
    """Create a navigation link with HTMX attributes for SPA-like behavior."""
    return A(
        label,
        href=route.to(),
        hx_get=route.to(),
        hx_target=f"#{target_id}",
        hx_push_url="true",
    )

# %% ../../nbs/components/navbar.ipynb 11
def create_navbar(
    title:str, # Application title
    nav_items:List[Tuple[str, Any]], # List of (label, route) tuples
    home_route:Optional[Any]=None, # Optional home route for title link
    theme_selector:bool=True, # Whether to include theme selector
    target_id:str=AppHtmlIds.MAIN_CONTENT, # HTMX target container ID
    **navbar_kwargs # Additional kwargs for navbar styling
) -> FT: # Navbar component
    """Create a responsive navigation bar with mobile dropdown menu."""
    # Use first nav item as home if not specified
    if home_route is None and nav_items:
        home_route = nav_items[0][1]
    
    # Hamburger menu icon for mobile
    hamburger_icon = Svg(
        SvgPath(
            stroke_linecap="round",
            stroke_linejoin="round",
            stroke_width="2",
            d="M4 6h16M4 12h8m-8 6h16"
        ),
        xmlns="http://www.w3.org/2000/svg",
        cls=combine_classes(h._5, w._5, stroke_dui.base_content),
        fill="none",
        viewBox="0 0 24 24",
    )
    
    # Mobile dropdown menu items
    mobile_nav_items = Ul(
        *[Li(create_nav_link(label, route, target_id)) for label, route in nav_items],
        tabindex="0",
        cls=combine_classes(
            menu,
            dropdown_content,
            bg_dui.base_100,
            border_radius.box,
            z._1,
            m.t._3,
            w._52,
            p._2,
            shadow.lg
        )
    )
    
    # Build navbar
    navbar_cls = combine_classes(
        navbar,
        bg_dui.base_100,
        shadow.sm,
        m.b(6),
        p(4)
    )
    
    # Add any custom styling
    if 'cls' in navbar_kwargs:
        navbar_cls = combine_classes(navbar_cls, navbar_kwargs.pop('cls'))
    
    return Div(
        Div(
            # Navbar Start: Logo + Mobile Dropdown
            Div(
                # Mobile dropdown (hidden on lg and above)
                Div(
                    Div(
                        hamburger_icon,
                        tabindex="0",
                        role="button",
                        cls=combine_classes(btn, btn_styles.ghost, btn_modifiers.square)
                    ),
                    mobile_nav_items,
                    cls=combine_classes(dropdown, display_tw.hidden.lg)
                ),
                # Logo/Title
                A(
                    H1(
                        title,
                        cls=combine_classes(
                            font_size.xl,
                            font_size._2xl.md,
                            font_weight.bold,
                            text_dui.base_content,
                            text_wrap,
                            max_w.full
                        )
                    ),
                    href=home_route.to() if home_route else "/",
                    hx_get=home_route.to() if home_route else "/",
                    hx_target=f"#{target_id}",
                    hx_push_url=home_route.to() if home_route else "/",
                    cls=combine_classes(btn, btn_styles.ghost, p(0), max_w.full)
                ) if home_route else H1(
                    title,
                    cls=combine_classes(
                        font_size.xl,
                        font_size._2xl.md,
                        font_weight.bold,
                        text_dui.base_content
                    )
                ),
                cls=combine_classes(navbar_start, gap(2))
            ),
            # Navbar Center: Desktop navigation (hidden on mobile, flex on lg)
            Div(
                Ul(
                    *[Li(create_nav_link(label, route, target_id)) for label, route in nav_items],
                    cls=combine_classes(menu, menu_directions.horizontal, p.x._1)
                ),
                cls=combine_classes(navbar_center, display_tw.hidden, flex_display.lg)
            ) if nav_items else None,
            # Navbar End: Theme selector
            Div(
                create_theme_selector() if theme_selector else None,
                cls=str(navbar_end)
            ) if theme_selector else None,
            cls=navbar_cls,
            **navbar_kwargs
        )
    )
