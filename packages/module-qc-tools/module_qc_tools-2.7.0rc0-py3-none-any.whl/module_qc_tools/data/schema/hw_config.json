{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Schema for QC Hardware config file",
  "description": "Raw data json",
  "type": "object",
  "properties": {
    "yarr": {
      "description": "Block containing path to YARR directory and executables",
      "type": "object",
      "properties": {
        "run_dir": {
          "description": "Path (absolute or relative) to YARR directory",
          "type": "string"
        },
        "controller": {
          "description": "Path (relative to run_dir or absolute) to the controller file",
          "type": "string"
        },
        "scanConsole_exe": {
          "description": "Path (relative to run_dir or absolute) to the scanConsole executable",
          "type": "string"
        },
        "write_register_exe": {
          "description": "Path (relative to run_dir or absolute) to the write_register executable",
          "type": "string"
        },
        "read_register_exe": {
          "description": "Path (relative to run_dir or absolute) to the read_register executable",
          "type": "string"
        },
        "read_adc_exe": {
          "description": "Path (relative to run_dir or absolute) to the read_adc executable",
          "type": "string"
        },
        "switchLPM_exe": {
          "description": "Path (relative to run_dir or absolute) to the executable that turns on/off LP-mode",
          "type": "string"
        },
        "eyeDiagram_exe": {
          "description": "Path (relative to run_dir or absolute) to the eye-diagram executable",
          "type": "string"
        },
        "lpm_digitalscan": {
          "description": "Path (relative to run_dir or absolute) to the low-power mode digital scan in YARR",
          "type": "string"
        },
        "read_ringosc_exe": {
          "description": "Path (relative to run_dir or absolute) to the read_wringosc executbable",
          "type": "string"
        },
        "success_code": {
          "description": "Exit status that indicates success. The default is 0.",
          "type": "number"
        },
        "max_attempts": {
          "description": "Maximum number of attempts to try communicating with module. Default is 2 attempts.",
          "type": "number"
        },
        "sleep_attempts": {
          "description": "Time to wait in between attempts to communicate with module, in seconds. Default is 2 seconds.",
          "type": "number"
        }
      },
      "required": ["run_dir", "controller", "scanConsole_exe", "write_register_exe", "read_register_exe", "read_adc_exe", "switchLPM_exe", "lpm_digitalscan", "eyeDiagram_exe", "read_ringosc_exe"]
    },
    "power_supply": {
      "description": "Block specifying path and commands for handling power supply",
      "type": "object",
      "properties": {
        "run_dir": {
          "description": "Path (relative to run_dir or absolute) to where power supply commands should be run",
          "type": "string"
        },
        "on_cmd": {
          "description": "Command to turn on power supply.",
          "type": "string"
        },
        "off_cmd": {
          "description": "Command to turn off power supply.",
          "type": "string"
        },
        "set_cmd": {
          "description": "Command to set voltage and current for power supply. Use the syntax {v} and {i} to represent the voltage and current that are to be given as input arguments",
          "type": "string"
        },
        "getI_cmd": {
          "description": "Command to inquire set current of the power supply. This command shall return an std output which represents the value of the current (float in unit of [A]",
          "type": "string"
        },
        "getV_cmd": {
          "description": "Command to inquire set voltage of the power supply. This command shall return an std output which represents the value of the voltage (float in units of [V]",
          "type": "string"
        },
        "measI_cmd": {
          "description": "Command to measure current of the power supply. This command shall return an std output which represents the value of the current (float in unit of [A]",
          "type": "string"
        },
        "measV_cmd": {
          "description": "Command to measure voltage of the power supply. This command shall return an std output which represents the value of the voltage (float in units of [V]",
          "type": "string"
        },
        "n_try": {
          "description": "Number of re-tries in case the script fails to read from the multimeter",
          "type": "number"
        },
        "timeout": {
	      "description": "Timeout (in sec.) when checking current target is reached after `set_cmd` call. The default is 30 sec.",
          "type": "number"
    	},
    	"success_code": {
          "description": "Exit status that indicates success. The default is 0.",
          "type": "number"
        }
      },
      "required": ["run_dir", "on_cmd", "off_cmd", "set_cmd", "getI_cmd", "getV_cmd", "measI_cmd", "measV_cmd"]
    },
    "high_voltage": {
      "description": "Block specifying path and commands for handling high voltage power supply",
      "type": "object",
      "properties": {
        "run_dir": {
          "description": "Path (relative to run_dir or absolute) to where power supply commands should be run",
          "type": "string"
        },
        "on_cmd": {
          "description": "Command to turn on power supply.",
          "type": "string"
        },
        "off_cmd": {
          "description": "Command to turn off power supply.",
          "type": "string"
        },
        "set_cmd": {
          "description": "Command to set voltage and current for power supply. Use the syntax {v} and {i} to represent the voltage and current that are to be given as input arguments",
          "type": "string"
        },
        "getI_cmd": {
          "description": "Command to inquire set current of the power supply. This command shall return an std output which represents the value of the current (float in unit of [A]",
          "type": "string"
        },
        "getV_cmd": {
          "description": "Command to inquire set voltage of the power supply. This command shall return an std output which represents the value of the voltage (float in units of [V]",
          "type": "string"
        },
        "measI_cmd": {
          "description": "Command to measure current of the power supply. This command shall return an std output which represents the value of the current (float in unit of [A]",
          "type": "string"
        },
        "measV_cmd": {
          "description": "Command to measure voltage of the power supply. This command shall return an std output which represents the value of the voltage (float in units of [V]",
          "type": "string"
        },
        "n_try": {
          "description": "Number of re-tries in case the script fails to read from the multimeter",
          "type": "number"
        },
        "timeout": {
    	  "description": "Timeout (in sec.) when checking voltage target is reached after `set_cmd` call. The default is 30 sec.",
          "type": "number"
    	},
    	"polarity": {
          "description": "Normal (1) or reverse (-1) polarity. Use reverse polarity if the HV power supply only has one fixed (positive) polarity.",
          "type": ["number", "string"]
        },
        "success_code": {
          "description": "Exit status that indicates success. The default is 0.",
          "type": "number"
        }
      },
      "required": ["run_dir", "on_cmd", "off_cmd", "set_cmd", "getI_cmd", "getV_cmd", "measI_cmd", "measV_cmd"]
    },
    "multimeter": {
      "description": "Block specifying the path and the commands for handling the multimeter",
      "type": "object",
      "properties": {
        "run_dir": {
          "description": "Path (relative to run_dir or absolute) to where power supply commands should be run",
          "type": "string"
        },
        "dcv_cmd": {
          "description": "List of commands to measure voltages from the multimeter. Each command corresponds to a single multimeter channel (only the used channels need to be listed). Each command returns an std output which repreasents the value of measured voltage (float in [V]). ",
          "type": "array"
        },
        "n_try": {
          "description": "Number of re-tries in case the script fails to read from the multimeter",
          "type": "number"
        },
        "success_code": {
          "description": "Exit status that indicates success. The default is 0.",
          "type": "number"
        },
        "share_vmux": {
          "description": "Indicates if the vmux is shared or separate.",
          "type": "boolean"
        },
        "v_mux_channels": {
          "description": "Maps the v_mux measurement channels to the chips (shoould be [0,0,0,0] for shared v_mux and [0,1,2,3] for separte v_mux).",
          "type": "array"
        }
      },
      "required": ["run_dir", "dcv_cmd","share_vmux","v_mux_channels"]
    },
    "ntc": {
      "description": "Block specifying the path and the commands for handling the NTC",
      "type": "object",
      "properties": {
        "run_dir": {
          "description": "Path (relative to run_dir or absolute) to where power supply commands should be run",
          "type": "string"
        },
        "cmd": {
          "description": "Command to measure temperature from the module NTC. The command returns an std output which represents the value of measured temperature (float in unit of [C]",
          "type": "string"

        },
        "n_try": {
          "description": "Number of re-tries in case the script fails to read from the multimeter",
          "type": "number"
        },
        "success_code": {
          "description": "Exit status that indicates success. The default is 0.",
          "type": "number"
        }
      },
      "required": ["run_dir", "cmd"]
    }
  }
}
