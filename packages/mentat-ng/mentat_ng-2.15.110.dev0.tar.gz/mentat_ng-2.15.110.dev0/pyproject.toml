[build-system]
requires = ["setuptools >= 64.0"]
build-backend = "setuptools.build_meta"

[project]
name = "mentat-ng"
dynamic = ["version"]
description = "Distributed modular SIEM system designed to monitor networks of all sizes"
readme = "README.rst"
requires-python = ">=3.11"
license = "MIT"
authors = [
    {name = "CESNET-CERTS Development Team", email = "csirt@cesnet.cz"}
]
maintainers = [
    {name = "Pavel Kácha", email = "ph@cesnet.cz"},
    {name = "Rajmund H. Hruška", email = "rajmund.hruska@cesnet.cz"},
    {name = "Jakub Maloštík", email = "malostik@cesnet.cz"},
    {name = "Jakub Judiny", email = "judiny@cesnet.cz"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3 :: Only",
    "Framework :: Flask",
]
keywords = ["mentat", "hawat", "SIEM"]
dependencies = [
    "pytz>=2025.2,<2025.3",
    "psycopg2>=2.9.9,<2.10",
    "babel>=2.17,<2.18",
    "wtforms[email]>=3.2.1,<3.3",
    "sqlalchemy>=2.0.41,<=2.1",
    "alembic>=1.16.1,<1.17",
    "jinja2>=3.1.5,<3.2",
    "jinja2-highlight>=0.6.1,<1.0",
    "werkzeug>=3.1.3,<4.0",
    "click>=8.2.1,<9.0",
    "flask>=3.1.1,<4.0",
    "flask-login>=0.6.3,<0.7",
    "flask-migrate>=4.1,<5.0",
    "flask-babel>=4.0,<5.0",
    "flask-principal>=0.4.0,<1.0",
    "flask-wtf>=1.2.1,<2.0",
    "flask-sqlalchemy>=3.1,<3.2",
    "flask-debugtoolbar>=0.16,<0.17",
    "flask-jsglue>=0.3.1,<1.0",
    "dnspython>=2.7,<3.0",
    "geoip2>=5.1,<6.0",
    "requests>=2.32.4,<3.0",
    "rrdtool>=0.1.16,<0.2",
    "pyzenkit>=0.66,<1.0",
    "ransacklib>=0.1.10,<1.0",
    "ipranges>=0.1.13,<1.0",
    "typedcols>=0.1.15,<1.0",
    "idea-format>=0.1.15,<1.0",
    "itsdangerous>=2.2,<2.3",
    "plotly>=6.1.2,<6.2",
    "pandas>=2.3,<2.4"
]

[project.optional-dependencies]
dev = [
    "build>=1.2,<1.3",
    "setuptools>=80.9,<81.0",
    "wheel>=0.45.1,<0.46",
    "nose2>=0.15,<1.0",
    "coverage>=7.9,<8.0",
    "pylint>=3.3.7,<3.4",
    "sphinx>=8.2,<9.0",
    "sphinx-rtd-theme>=3.0.2,<4.0",
    "twine>=6.1,<7.0",
    "djlint>=1.36.4,<2.0",
    "ruff>=0.13.1,<0.14",
    "mypy>=1.16,<1.17",
    "types-pytz",
    "pandas-stubs",
    "types-Flask",
    "types-Flask-Migrate",
    "types-requests",
    "types-psycopg2"
]

[project.urls]
Homepage = "https://mentat.cesnet.cz"
Repository = "https://gitlab.cesnet.cz/713/mentat/mentat"
Documentation = "https://713.gitlab-pages.cesnet.cz/mentat/mentat/master/html/manual.html"
Issues = "https://gitlab.cesnet.cz/713/mentat/mentat/-/issues"

[tool.setuptools.packages.find]
where = ["lib"]

# script-files is discouraged to use, but works in the same way as scripts in setup.py.
[tool.setuptools]
script-files = [
    "bin/mentat-backup.py",
    "bin/mentat-cleanup.py",
    "bin/mentat-controller.py",
    "bin/mentat-dbmngr.py",
    "bin/mentat-detmngr.py",
    "bin/mentat-enricher.py",
    "bin/mentat-hawat.wsgi",
    "bin/mentat-hawat-dev.wsgi",
    "bin/mentat-ideagen.py",
    "bin/mentat-informant.py",
    "bin/mentat-inspector.py",
    "bin/mentat-netmngr.py",
    "bin/mentat-precache.py",
    "bin/mentat-reporter.py",
    "bin/mentat-sampler.py",
    "bin/mentat-statistician.py",
    "bin/mentat-storage.py"
]

[project.scripts]
hawat-cli = "hawat:cli"

[tool.setuptools.dynamic]
version = {attr = "mentat.__version__"}

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "UP",  # pyupgrade
    "PL",  # pylint
    # "ERA",  # eradicate (commented-out code) (FIX)
    "PERF",  # Perflint
    "FURB",  # refurb
    "RUF",  # ruff-specific rules
    "A",  # flake8-builtins,
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    # "DTZ",  # flake8-datetimez (FIX?)
    "FLY",  # flynt (FLY)
    "LOG",  # flake8-logging
    "PIE",  # flake8-piej
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
]
ignore = [
    "B905",  # zip-without-explicit-strict (FIX?)
    "E501",  # line too long
    "E722",  # bare-except (FIX)
    "E731",  # lambda-assignment (FIX?)
    "E741",  # ambiguous-variable-name
    "PLW0603",  # global-statement
    "PLW2901",  # redefined-loop-name (FIX)
    "PLR09",  # "too many ..." warnings from pylint
    "PLR2004",  # magic-value-comparison
    "PLR5501",  # collapsible-else-if
    "PLC0415",  # import-outside-top-level (not working correctly, FIX later)
    "UP007",  # non-pep604-annotation-union (FIX?)
    "UP012",  # unnecessary-encode-utf8
    "UP015",  # redundant-open-modes
    "UP045",  # non-pep604-annotation-optional
    "PERF401",  # manual-list-comprehension
    "PERF203",  # try-except-in-loop
    "RUF005",  # collection-literal-concatenation (FIX?)
    "RUF012",  # mutable-class-default (FIX?)
    "RUF015",  # unnecessary-iterable-allocation-for-first-element
    "SIM102",  # collapsible-if
    "SIM108",  # Use ternary if operator
    "SIM910",  # dict-get-with-none-default
]

[tool.ruff.lint.isort]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]
known-first-party= [
    "idea-format",
    "ipranges",
    "ransack",
    "pyzenkit",
    "typedcols",
]
known-local-folder = ["hawat", "mentat"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["flask_babel.lazy_gettext"]

[tool.mypy]
plugins = "sqlalchemy.ext.mypy.plugin"

warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
extra_checks = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
no_implicit_reexport = true
warn_return_any = true

[[tool.mypy.overrides]]  # Submodules with strict type checking
module = [
    "hawat.charts.*",
    "hawat.blueprints.cross_table.*",
    "hawat.blueprints.reports.forms",
    "hawat.blueprints.event_classes.forms",
    "mentat.reports.aggregations",
    "mentat.reports.data",
    "mentat.services.sner",
    "mentat.services.pdnsr",
    "mentat.services.nerd"
]
check_untyped_defs = true
disallow_subclassing_any = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]  # Turn off strict type checking for tests
module = "*.test.*"
check_untyped_defs = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_defs = false
no_implicit_reexport = false

[[tool.mypy.overrides]]  # Libraries without available stubs
module = [
    "ipranges.*",
    "pyzenkit.*",
    "idea.*",
    "typedcols.*",
    "wtforms.*",
    "flask_wtf.*",
    "flask_babel.*",
    "flask_sqlalchemy.*",
    "flask_login.*",
    "flask_principal.*",
    "flask_debugtoolbar.*",
    "plotly.*",
    "rrdtool.*"
]
ignore_missing_imports = true


[tool.djlint]
profile = "jinja"
ignore = "H006,H014,H021,H029,H030,H031,T028"
enable = "H017,H035,H036"
max_blank_lines = 3
line_break_after_multiline_tag = true
format_js = true
format_css = true

[tool.djlint.per-file-ignores]
".*\\.(txt|idea)\\.j2" = "H025"
"_macros_site.html" = "H025,T001"


[tool.nose2.unittest]
plugins = "nose2.plugins.junitxml"
start-dir = "lib"
test-file-pattern = "*.py"


[tool.coverage.run]
source = ["./lib"]


[tool.pylint]
ignored-modules = ["rrdtool","geoip2.records"]
disable = [
    "line-too-long",
    "wrong-import-order",
    "too-many-instance-attributes",
    "too-many-branches",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-lines",
    "consider-using-f-string",
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-nested-blocks",
    "too-many-locals",
    "attribute-defined-outside-init",
    "inconsistent-return-statements",
    "global-statement",
    "abstract-method",
    "too-many-arguments",
    "unused-variable",
    "too-many-ancestors",
    "unnecessary-lambda-assignment",
    "unused-argument",
    "duplicate-code",
    "arguments-differ",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "empty-docstring",
    "no-member",
    "broad-exception-caught",
    "broad-exception-raised",
    "invalid-name",
    "too-many-positional-arguments",
]
