from investor import _InvestorBase,InvestorGroup
from ..helper import DateStr,InterValInvestor,SymbolArg
import pandas as pd 

class StockInvestor(_InvestorBase):
    _endpoint_root = "stock"

    def flow(
        self,
        symbol: SymbolArg,
        *,
        group: InvestorGroup = "foreign",
        start: DateStr = None,
        end: DateStr = None,
        interval: InterValInvestor = "1D",
    ) -> pd.DataFrame:
        """
        L·∫•y d·ªØ li·ªáu **d√≤ng ti·ªÅn r√≤ng (net buy/sell flow)** theo nh√≥m nh√† ƒë·∫ßu t∆∞ 
        cho t·ª´ng m√£ c·ªï phi·∫øu ho·∫∑c danh s√°ch m√£.

        H√†m n√†y cho ph√©p theo d√µi ho·∫°t ƒë·ªông mua b√°n r√≤ng c·ªßa t·ª´ng nh√≥m nh√† ƒë·∫ßu t∆∞ 
        (c√° nh√¢n, t·ªï ch·ª©c, n∆∞·ªõc ngo√†i, t·ª± doanh...) trong m·ªôt kho·∫£ng th·ªùi gian x√°c ƒë·ªãnh.  
        D·ªØ li·ªáu tr·∫£ v·ªÅ gi√∫p nh·∫≠n bi·∫øt xu h∆∞·ªõng d√≤ng ti·ªÅn ‚Äî ai ƒëang mua, ai ƒëang b√°n, 
        v√† c∆∞·ªùng ƒë·ªô d√≤ng v·ªën v√†o/ra kh·ªèi m√£ c·ªï phi·∫øu.

        Parameters
        ----------
        symbol : str or Sequence[str]
            M√£ c·ªï phi·∫øu ho·∫∑c danh s√°ch m√£ c·∫ßn l·∫•y d·ªØ li·ªáu 
            (v√≠ d·ª•: `"HPG"` ho·∫∑c `["HPG", "VCB", "FPT"]`).
        group : {"foreign", "proprietary", "local_institutional", "local_individual",
                 "foreign_institutional", "foreign_individual"}, default "foreign"
            Nh√≥m nh√† ƒë·∫ßu t∆∞ c·∫ßn l·∫•y d·ªØ li·ªáu:
            - `"foreign"` ‚Äî Nh√† ƒë·∫ßu t∆∞ n∆∞·ªõc ngo√†i (t·ªïng h·ª£p)
            - `"proprietary"` ‚Äî T·ª± doanh c√¥ng ty ch·ª©ng kho√°n
            - `"local_institutional"` ‚Äî T·ªï ch·ª©c trong n∆∞·ªõc
            - `"local_individual"` ‚Äî C√° nh√¢n trong n∆∞·ªõc
            - `"foreign_institutional"` ‚Äî T·ªï ch·ª©c n∆∞·ªõc ngo√†i
            - `"foreign_individual"` ‚Äî C√° nh√¢n n∆∞·ªõc ngo√†i
        start : str, optional
            Ng√†y b·∫Øt ƒë·∫ßu, ƒë·ªãnh d·∫°ng `"YYYY-MM-DD"`.  
            N·∫øu kh√¥ng truy·ªÅn, h·ªá th·ªëng t·ª± ƒë·ªông l·∫•y theo gi·ªõi h·∫°n m·∫∑c ƒë·ªãnh.
        end : str, optional
            Ng√†y k·∫øt th√∫c, ƒë·ªãnh d·∫°ng `"YYYY-MM-DD"`.  
            N·∫øu kh√¥ng truy·ªÅn, m·∫∑c ƒë·ªãnh l√† ng√†y hi·ªán t·∫°i.
        interval : {"1D", "1W", "1M"}, default "1D"
            T·∫ßn su·∫•t d·ªØ li·ªáu mong mu·ªën:
            - `"1D"` ‚Äî Theo ng√†y  
            - `"1W"` ‚Äî Theo tu·∫ßn  
            - `"1M"` ‚Äî Theo th√°ng

        Returns
        -------
        DataFrame
            B·∫£ng d·ªØ li·ªáu g·ªìm c√°c c·ªôt:
            - `symbol` : m√£ c·ªï phi·∫øu  
            - `Date` : ng√†y giao d·ªãch  
            - `net_value` : gi√° tr·ªã mua r√≤ng (VNƒê)  
            - `net_volume` : kh·ªëi l∆∞·ª£ng mua r√≤ng  
            - C√°c c·ªôt kh√°c (n·∫øu c√≥) nh∆∞ `buy_value`, `sell_value`, `buy_volume`, `sell_volume`.

        Raises
        ------
        ValueError
            N·∫øu `group` ho·∫∑c `interval` kh√¥ng h·ª£p l·ªá.
        RuntimeError
            N·∫øu qu√° tr√¨nh truy v·∫•n t·ª´ private_core th·∫•t b·∫°i.

        Notes
        -----
        - D·ªØ li·ªáu ƒë∆∞·ª£c chu·∫©n h√≥a d∆∞·ªõi d·∫°ng `pandas.DataFrame`.
        - D√πng ƒë·ªÉ ƒë√°nh gi√° h√†nh vi mua/b√°n r√≤ng theo nh√≥m nh√† ƒë·∫ßu t∆∞ cho t·ª´ng c·ªï phi·∫øu.

        Examples
        --------
        from fin68 import client

        cli = client(api_key="sk_live_...")
        investor = cli.eod.stock.investor

        # L·∫•y d√≤ng ti·ªÅn r√≤ng c·ªßa c·ªï phi·∫øu HPG trong 6 th√°ng ƒë·∫ßu nƒÉm 2024
        df = investor.flow("HPG", start="2024-01-01", end="2024-06-30, group='foreign", interval='1D')

        # L·∫•y d√≤ng ti·ªÅn r√≤ng c·ªßa nh√≥m nh√† ƒë·∫ßu t∆∞ n∆∞·ªõc ngo√†i cho nhi·ªÅu m√£
        df = investor.flow(["HPG", "VCB", "FPT"], group="foreign", interval="1W")
        """
        if isinstance(interval, str):
            interval=interval.upper()
        else:
            print(f"üö´ L·ªói ki·ªÉu d·ªØ li·ªáu interval: {interval}\n‚ÑπÔ∏è  Vui l√≤ng ch·ªçn ƒë√∫ng 1 trong c√°c option sau: {InterValInvestor}. V√≠ d·ª•: interval='1D'")
            return 
        params = self._build_params(
            ids=symbol, label="symbol", group=group, start=start, end=end, interval=interval
        )
    
        return self._fetch_df(op="flow", params=params)
