# fin68\__init__.py
from __future__ import annotations

"""
Fin68 Python Client
===================

Client c·∫•p cao gi√∫p x√°c th·ª±c API Key, hi·ªÉn th·ªã th√¥ng b√°o t·ª´ backend v√† cung c·∫•p
c√°c domain client nh∆∞ :class:`EodClient`. Thi·∫øt k·∫ø theo pattern "facade" ƒë·ªÉ ng∆∞·ªùi
d√πng kh·ªüi t·∫°o m·ªôt l·∫ßn v√† l√†m vi·ªác qua thu·ªôc t√≠nh `client.eod`, v.v.

Notes
-----
- S·ª≠ d·ª•ng `private_core.HttpSession` ƒë·ªÉ g·∫Øn `base_url`, `timeout` v√† `user-agent`.
- T·ª± ƒë·ªông g·ªçi `validate_api_key` khi kh·ªüi t·∫°o ƒë·ªÉ nh·∫≠n th√¥ng tin phi√™n b·∫£n, c·∫£nh b√°o
  v√† meta c·ªßa API key.
- T·∫•t c·∫£ c·∫£nh b√°o/nh·∫Øc n√¢ng c·∫•p ƒë∆∞·ª£c hi·ªÉn th·ªã qua `warnings.warn` ho·∫∑c `logging`.

See Also
--------
EodClient
    Domain client cho d·ªØ li·ªáu EOD.
"""

import logging
import warnings
from typing import Optional

from private_core.auth_core import validate_api_key
from private_core.http_core import BASE_URL, DEFAULT_TIMEOUT, HttpSession

from ._version import __version__
from .clients import EodClient
from .exceptions import ApiKeyValidationError, ConfigurationError
from .types import ApiKeyMeta, ApiKeyValidationResponse, BackendMessage, MessageType

logger = logging.getLogger(__name__)


class Fin68Client:
    """
    ƒêi·ªÉm truy c·∫≠p ch√≠nh t·ªïng h·ª£p c√°c domain client c·ªßa Fin68.

    Khi kh·ªüi t·∫°o, client s·∫Ω:
    1) T·∫°o `HttpSession` v·ªõi API key.
    2) G·ªçi `validate_api_key` ƒë·ªÉ x√°c th·ª±c v√† l·∫•y th√¥ng tin phi√™n b·∫£n.
    3) Hi·ªÉn th·ªã c√°c th√¥ng b√°o (n√¢ng c·∫•p/b√°o l·ªói/c·∫£nh b√°o) t·ª´ backend t·ªõi ng∆∞·ªùi d√πng.
    4) Kh·ªüi t·∫°o c√°c domain client (hi·ªán t·∫°i: `eod`).

    Parameters
    ----------
    api_key : str
        API key h·ª£p l·ªá do Fin68 ph√°t h√†nh.
    extra_context : dict, optional
        Ng·ªØ c·∫£nh b·ªï sung g·ª≠i l√™n backend khi validate (VD: m√¥i tr∆∞·ªùng ch·∫°y, app_name).

    Attributes
    ----------
    eod : EodClient
        Domain client cho d·ªØ li·ªáu EOD (OHLCV, technical, ...).
    _session : HttpSession
        Phi√™n HTTP d√πng chung cho to√†n b·ªô domain client.
    _api_key_meta : ApiKeyMeta or None
        Th√¥ng tin meta c·ªßa API key sau khi x√°c th·ª±c.
    _messages : list[BackendMessage]
        Danh s√°ch th√¥ng ƒëi·ªáp backend tr·∫£ v·ªÅ sau validate.

    Raises
    ------
    ConfigurationError
        Khi `api_key` r·ªóng/kh√¥ng ƒë∆∞·ª£c cung c·∫•p.
    ApiKeyValidationError
        Khi x√°c th·ª±c API key th·∫•t b·∫°i (kh√≥a sai/h·∫øt h·∫°n/h·ªá th·ªëng t·ª´ ch·ªëi).

    Examples
    --------
    Kh·ªüi t·∫°o v√† d√πng nh∆∞ context manager:

    >>> from fin68 import client
    >>> with client(api_key="sk_live_...") as cli:
    ...     df = cli.eod.ohlcv("HPG", start="2024-01-01", end="2024-12-31")

    Ho·∫∑c qu·∫£n l√Ω v√≤ng ƒë·ªùi th·ªß c√¥ng:

    >>> cli = client(api_key="sk_live_...")
    >>> try:
    ...     meta = cli.api_key_metadata
    ...     data = cli.eod.ohlcv("VCB")
    ... finally:
    ...     cli.close()
    """

    def __init__(
        self,
        api_key: str,
        *,
        extra_context: Optional[dict] = None,
    ) -> None:
        """
        Kh·ªüi t·∫°o client v√† x√°c th·ª±c API key ngay l·∫≠p t·ª©c.

        Parameters
        ----------
        api_key : str
            API key h·ª£p l·ªá.
        extra_context : dict, optional
            Context b·ªï sung g·ª≠i k√®m khi validate.

        Raises
        ------
        ConfigurationError
            Khi kh√¥ng cung c·∫•p API key.
        ApiKeyValidationError
            Khi backend t·ª´ ch·ªëi API key (h·∫øt h·∫°n, kh√¥ng h·ª£p l·ªá, ...).
        """
        if not api_key:
            raise ConfigurationError("C·∫ßn cung c·∫•p API key ƒë·ªÉ kh·ªüi t·∫°o fin68.client()")

        self._session = HttpSession(
            api_key,
            base_url=BASE_URL,
            timeout=DEFAULT_TIMEOUT,
            version=__version__,
        )
        self._api_key_meta: Optional[ApiKeyMeta] = None
        self._messages: list[BackendMessage] = []

        try:
            validation = validate_api_key(
                self._session,
                client_version=__version__,
                include_messages=True,
                extra_context=extra_context,
            )
        except ApiKeyValidationError:
            # ƒê·∫£m b·∫£o ƒë√≥ng session n·∫øu validate th·∫•t b·∫°i
            self._session.close()
            raise
        self._api_key_meta = validation.meta
        self._messages = list(validation.iter_messages())

        self._surface_messages(validation)

        # Domain clients
        self.eod = EodClient(self._session)

    def _surface_messages(self, validation: ApiKeyValidationResponse) -> None:
        """
        Hi·ªÉn th·ªã c√°c th√¥ng ƒëi·ªáp t·ª´ backend (c·∫£nh b√°o, l·ªói, nh·∫Øc n√¢ng c·∫•p).

        Parameters
        ----------
        validation : ApiKeyValidationResponse
            K·∫øt qu·∫£ validate t·ª´ backend, bao g·ªìm th√¥ng tin version v√† danh s√°ch messages.

        Notes
        -----
        - C√°c th√¥ng ƒëi·ªáp lo·∫°i `WARNING`, `ERROR`, `NOTIFY_API_KEY_EXPIRING/EXPIRED`
          s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã qua `warnings.warn(...)`.
        - Th√¥ng b√°o n√¢ng c·∫•p (khi client c≈© h∆°n phi√™n b·∫£n t·ªëi thi·ªÉu/khuy·∫øn ngh·ªã)
          c≈©ng ƒë∆∞·ª£c c·∫£nh b√°o b·∫±ng `warnings.warn(...)` ƒë·ªÉ ng∆∞·ªùi d√πng s·ªõm c·∫≠p nh·∫≠t.
        """
        version_info = validation.version
   
        for message in self._messages:
            if message.is_upgrade_notice() and version_info.requires_upgrade():
                
                _emit_upgrade_notice(message, version_info.backend_version)
            elif message.type in {
                MessageType.NOTIFY_API_KEY_EXPIRING,
                MessageType.NOTIFY_API_KEY_EXPIRED,
                MessageType.WARNING,
                MessageType.ERROR,
            }:
                warnings.warn(message.message, stacklevel=2)
            else:
                logger.info("Th√¥ng b√°o t·ª´ Fin68: %s", message.message)

        if version_info.requires_upgrade() and not any(m.is_upgrade_notice() for m in self._messages):
            warnings.warn(
                (
                    f"ƒê√£ c√≥ phi√™n b·∫£n fin68 m·ªõi h∆°n ({version_info.backend_version}). "
                    "H√£y c·∫≠p nh·∫≠t ƒë·ªÉ s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng v√† b·∫£n s·ª≠a l·ªói m·ªõi nh·∫•t."
                ),
                stacklevel=2,
            )

        if version_info.is_out_of_support():
            warnings.warn(
                (
                    f"Phi√™n b·∫£n fin68 hi·ªán t·∫°i ({version_info.client_version}) "
                    f"ƒë√£ th·∫•p h∆°n m·ª©c t·ªëi thi·ªÉu ƒë∆∞·ª£c h·ªó tr·ª£ ({version_info.minimum_supported_version}). "
                    "M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng c√≤n ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh."
                ),
                stacklevel=2,
            )

    @property
    def api_key_metadata(self) -> Optional[ApiKeyMeta]:
        """
        Tr·∫£ v·ªÅ meta c·ªßa API key sau khi x√°c th·ª±c.

        Returns
        -------
        ApiKeyMeta or None
            Meta c·ªßa API key (ng√†y h·∫øt h·∫°n, tr·∫°ng th√°i, ...), ho·∫∑c `None` n·∫øu kh√¥ng s·∫µn c√≥.
        """
        return self._api_key_meta

    @property
    def messages(self) -> list[BackendMessage]:
        """
        Danh s√°ch th√¥ng ƒëi·ªáp backend tr·∫£ v·ªÅ khi validate.

        Returns
        -------
        list[BackendMessage]
            B·∫£n sao danh s√°ch th√¥ng ƒëi·ªáp ƒë·ªÉ tr√°nh ch·ªânh s·ª≠a ngo√†i √Ω mu·ªën.
        """
        return list(self._messages)

    def close(self) -> None:
        """
        ƒê√≥ng phi√™n HTTP b√™n d∆∞·ªõi v√† gi·∫£i ph√≥ng t√†i nguy√™n.

        Notes
        -----
        - N√™n g·ªçi trong `finally` ho·∫∑c d√πng context manager ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√≥ng phi√™n.
        """
        self._session.close()

    def __enter__(self) -> "Fin68Client":
        """
        V√†o ng·ªØ c·∫£nh `with`.

        Returns
        -------
        Fin68Client
            Ch√≠nh instance hi·ªán t·∫°i.
        """
        return self

    def __exit__(self, exc_type, exc, tb) -> None:
        """
        Tho√°t ng·ªØ c·∫£nh `with` v√† t·ª± ƒë·ªông ƒë√≥ng phi√™n HTTP.

        Parameters
        ----------
        exc_type, exc, tb
            Th√¥ng tin ngo·∫°i l·ªá (n·∫øu c√≥). Kh√¥ng can thi·ªáp v√†o flow ngo·∫°i l·ªá.
        """
        self.close()


def _emit_upgrade_notice(message: BackendMessage, latest_version: Optional[str]) -> None:
    """
    Hi·ªÉn th·ªã c·∫£nh b√°o n√¢ng c·∫•p phi√™n b·∫£n client.

    Parameters
    ----------
    message : BackendMessage
        Th√¥ng ƒëi·ªáp n√¢ng c·∫•p t·ª´ backend.
    latest_version : str or None
        Phi√™n b·∫£n m·ªõi nh·∫•t ph√≠a backend bi·∫øt ƒë·∫øn (n·∫øu c√≥).

    Notes
    -----
    - S·ª≠ d·ª•ng `warnings.warn(..., stacklevel=3)` ƒë·ªÉ ƒë·∫©y c·∫£nh b√°o l√™n callsite ng∆∞·ªùi d√πng.
    """
    CYAN = "\033[96m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RESET = "\033[0m"
    BOLD = "\033[1m"

    print(f"""
{YELLOW}üöÄ {BOLD}{message.message}{RESET}

{GREEN}‚ñ∂ C·∫≠p nh·∫≠t ngay:{RESET} 
  pip install --upgrade fin68

{CYAN}üìò T√†i li·ªáu h∆∞·ªõng d·∫´n:{RESET} {message.doc_url}
""")


def client(
    apiKey: Optional[str] = None,
    *,
    api_key: Optional[str] = None,
    extra_context: Optional[dict] = None,
) -> Fin68Client:
    """
    Factory t·∫°o ra m·ªôt :class:`Fin68Client` ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng.

    H·ªó tr·ª£ c·∫£ hai t√™n tham s·ªë `api_key` (chu·∫©n Python) v√† `apiKey` (th√¢n thi·ªán
    v·ªõi ng∆∞·ªùi d√πng/JS). N·∫øu truy·ªÅn c·∫£ hai, `api_key` s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n.

    Parameters
    ----------
    apiKey : str, optional
        API key. Ch·ªâ d√πng khi kh√¥ng truy·ªÅn `api_key`.
    api_key : str, optional
        API key chu·∫©n (∆∞u ti√™n n·∫øu ƒë∆∞·ª£c truy·ªÅn).
    extra_context : dict, optional
        Ng·ªØ c·∫£nh b·ªï sung g·ª≠i l√™n backend khi validate.

    Returns
    -------
    Fin68Client
        Client ƒë√£ x√°c th·ª±c xong, k√®m c√°c domain client nh∆∞ `eod`.

    Raises
    ------
    ConfigurationError
        Khi kh√¥ng cung c·∫•p `api_key`/`apiKey`.
    ApiKeyValidationError
        Khi backend t·ª´ ch·ªëi API key trong qu√° tr√¨nh kh·ªüi t·∫°o.

    Examples
    --------
    >>> from fin68 import client
    >>> cli = client(api_key="sk_live_...")
    >>> try:
    ...     df = cli.eod.ohlcv("HPG", start="2024-01-01", end="2024-06-30")
    ... finally:
    ...     cli.close()
    """
    key = api_key or apiKey
    if not key:
        raise ConfigurationError("C·∫ßn truy·ªÅn tham s·ªë apiKey ho·∫∑c api_key khi kh·ªüi t·∫°o fin68.client()")

    return Fin68Client(
        key,
        extra_context=extra_context,
    )


__all__ = ["Fin68Client", "client", "__version__"]
