from investor import _InvestorBase, InvestorGroup
from typing import ClassVar, Iterable, Literal
from ..helper import DateStr, InterValInvestor
from ..icb_types import SectorArg, icbMap
import pandas as pd

InvestorGroupSector = Literal[
    "foreign",
    "proprietary",
]
class SectorInvestor(_InvestorBase):
    """
    Namespace d·ªØ li·ªáu **nh√† ƒë·∫ßu t∆∞** cho c·∫•p ƒë·ªô **ng√†nh (sector-level)**.

    Cung c·∫•p c√°c endpoint ƒë·ªÉ theo d√µi ho·∫°t ƒë·ªông mua/b√°n r√≤ng c·ªßa t·ª´ng nh√≥m nh√† ƒë·∫ßu t∆∞
    trong c√°c **ng√†nh ho·∫∑c nh√≥m ng√†nh** (ICB code).  
    D·ªØ li·ªáu ph·∫£n √°nh d√≤ng v·ªën gi·ªØa c√°c nh√≥m ng√†nh ‚Äî cho ph√©p ƒë√°nh gi√° d√≤ng ti·ªÅn lu√¢n chuy·ªÉn
    (sector rotation) tr√™n to√†n th·ªã tr∆∞·ªùng.

    Notes
    -----
    - Cho ph√©p truy·ªÅn **t√™n ng√†nh ti·∫øng Vi·ªát**.
    """

    _endpoint_root = "sector"

    def flow(
        self,
        symbol: SectorArg,
        *,
        group: InvestorGroupSector = "foreign",
        start: DateStr = None,
        end: DateStr = None,
        interval: InterValInvestor = "1D",
    ) -> pd.DataFrame:
        """
        L·∫•y d·ªØ li·ªáu **d√≤ng ti·ªÅn r√≤ng (net buy/sell flow)** theo nh√≥m nh√† ƒë·∫ßu t∆∞
        cho t·ª´ng **ng√†nh ho·∫∑c nh√≥m ng√†nh** (ICB sector).

        H√†m n√†y cho ph√©p theo d√µi xu h∆∞·ªõng d√≤ng v·ªën c·ªßa c√°c nh√≥m nh√† ƒë·∫ßu t∆∞
        (n∆∞·ªõc ngo√†i, t·ª± doanh, t·ªï ch·ª©c, c√° nh√¢n...) gi·ªØa c√°c ng√†nh kh√°c nhau.  
        D·ªØ li·ªáu gi√∫p x√°c ƒë·ªãnh **ng√†nh n√†o ƒëang h√∫t v·ªën ho·∫∑c b·ªã r√∫t v·ªën**, 
        h·ªó tr·ª£ ph√¢n t√≠ch xoay v√≤ng ng√†nh (sector rotation).

        Parameters
        ----------
        symbol : str or Sequence[str]
            T√™n ng√†nh (c√≥ th·ªÉ truy·ªÅn nhi·ªÅu gi√° tr·ªã).  
            V√≠ d·ª•: `"Ng√¢n h√†ng"`, `"C√¥ng ngh·ªá"`, ho·∫∑c `["Ng√¢n h√†ng", "D·∫ßu kh√≠"]`.  
            H√†m t·ª± ƒë·ªông map t√™n ng√†nh sang m√£ ICB th√¥ng qua `icbMap`.
        group : {"foreign", "proprietary"}, default "foreign"
            Nh√≥m nh√† ƒë·∫ßu t∆∞ c·∫ßn l·∫•y d·ªØ li·ªáu:
            - `"foreign"` ‚Äî Nh√† ƒë·∫ßu t∆∞ n∆∞·ªõc ngo√†i (t·ªïng h·ª£p)
            - `"proprietary"` ‚Äî T·ª± doanh c√¥ng ty ch·ª©ng kho√°n
        start : str, optional
            Ng√†y b·∫Øt ƒë·∫ßu, ƒë·ªãnh d·∫°ng `"YYYY-MM-DD"`.  
            N·∫øu kh√¥ng truy·ªÅn, h·ªá th·ªëng t·ª± ƒë·ªông l·∫•y theo kho·∫£ng m·∫∑c ƒë·ªãnh.
        end : str, optional
            Ng√†y k·∫øt th√∫c, ƒë·ªãnh d·∫°ng `"YYYY-MM-DD"`.  
            N·∫øu kh√¥ng truy·ªÅn, m·∫∑c ƒë·ªãnh l√† ng√†y hi·ªán t·∫°i.
        interval : {"1D", "1W", "1M"}, default "1D"
            T·∫ßn su·∫•t d·ªØ li·ªáu mong mu·ªën:
            - `"1D"` ‚Äî Theo ng√†y  
            - `"1W"` ‚Äî Theo tu·∫ßn  
            - `"1M"` ‚Äî Theo th√°ng

        Returns
        -------
        DataFrame
            B·∫£ng d·ªØ li·ªáu g·ªìm c√°c c·ªôt:
            - `symbol` : m√£ ng√†nh (ICB code)  
            - `Date` : ng√†y giao d·ªãch  
            - `net_value` : gi√° tr·ªã mua r√≤ng (VNƒê)  
            - `net_volume` : kh·ªëi l∆∞·ª£ng mua r√≤ng  
            - C√°c c·ªôt kh√°c (n·∫øu c√≥) nh∆∞ `buy_value`, `sell_value`, `buy_volume`, `sell_volume`.

        Raises
        ------
        ValueError
            N·∫øu kh√¥ng t√¨m th·∫•y m√£ ng√†nh h·ª£p l·ªá trong `icbMap`,
            ho·∫∑c n·∫øu `group`/`interval` kh√¥ng h·ª£p l·ªá.
        RuntimeError
            N·∫øu truy v·∫•n t·ª´ private_core th·∫•t b·∫°i.

        Notes
        -----
        - Wrapper c·ªßa `private_core.investor.fetch_df(namespace="sector", op="flow")`.
        - T·ª± ƒë·ªông √°nh x·∫° t√™n ng√†nh ti·∫øng Vi·ªát sang m√£ ICB tr∆∞·ªõc khi truy v·∫•n.
        - D·ªØ li·ªáu ƒë∆∞·ª£c chu·∫©n h√≥a v·ªÅ `pandas.DataFrame`.

        Examples
        --------
        from fin68 import client

        cli = client(api_key="sk_live_...")
        investor = cli.eod.sector.investor

        # D√≤ng ti·ªÅn r√≤ng c·ªßa nh√≥m ng√†nh "Ng√¢n h√†ng" trong 6 th√°ng ƒë·∫ßu nƒÉm 2024
        df = investor.flow("Ng√¢n h√†ng", start="2024-01-01", end="2024-06-30")

        # D√≤ng ti·ªÅn r√≤ng theo tu·∫ßn c·ªßa c√°c nh√≥m ng√†nh D·∫ßu kh√≠ v√† C√¥ng ngh·ªá
        df = investor.flow(["D·∫ßu kh√≠", "C√¥ng ngh·ªá"], group="foreign", interval="1W")
        """
        icb_codes = []
        if isinstance(symbol, list):
            for sec in symbol:
                if sec.lower() not in icbMap:
                    raise ValueError(f"Kh√¥ng t√¨m th·∫•y m√£ ng√†nh cho t√™n '{sec}'")
                icb_codes.append(icbMap.get(sec.lower()))
        else:
            if symbol.lower() not in icbMap:
                raise ValueError(f"Kh√¥ng t√¨m th·∫•y m√£ ng√†nh cho t√™n '{symbol}'")
            icb_codes.append(icbMap.get(symbol.lower()))

        if not symbol:
            raise ValueError(f"Kh√¥ng t√¨m th·∫•y m√£ ng√†nh cho t√™n '{symbol}'")
        if isinstance(interval, str):
            interval=interval.upper()
        else:
            print(f"üö´ L·ªói ki·ªÉu d·ªØ li·ªáu interval: {interval}\n‚ÑπÔ∏è  Vui l√≤ng ch·ªçn ƒë√∫ng 1 trong c√°c option sau: {InterValInvestor}. V√≠ d·ª•: interval='1D'")
            return
        if group not in ['foreign','proprietary']:
            print(f"üö´ Kh√¥ng c√≥ d·ªØ li·ªáu: {group} ƒë·ªëi v·ªõi cls.eod.sector.flow()\n group vui l√≤ng l√† m·ªôt trong c√°c option sau: 'foreign' | 'proprietary'")
            return
       
        params = self._build_params(
            ids=icb_codes, label="symbol", group=group, start=start, end=end, interval=interval
        )

        return self._fetch_df(op="flow", params=params)
