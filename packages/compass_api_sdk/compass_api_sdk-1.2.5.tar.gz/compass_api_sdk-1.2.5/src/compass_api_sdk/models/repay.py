"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .reserve import Reserve, ReserveTypedDict
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal
from typing_extensions import Annotated, TypedDict


class RepayTypedDict(TypedDict):
    id: str
    r"""The id of a historical transaction on aave"""
    timestamp: int
    r"""Timestamp in unix time"""
    tx_hash: str
    r"""Transaction hash. You can paste these into the search bar on etherscan"""
    amount: float
    r"""Quantity of token"""
    reserve: ReserveTypedDict
    asset_price_usd: float
    block: int
    action: Literal["Repay"]
    r"""The type of transaction"""


class Repay(BaseModel):
    id: str
    r"""The id of a historical transaction on aave"""

    timestamp: int
    r"""Timestamp in unix time"""

    tx_hash: Annotated[str, pydantic.Field(alias="txHash")]
    r"""Transaction hash. You can paste these into the search bar on etherscan"""

    amount: float
    r"""Quantity of token"""

    reserve: Reserve

    asset_price_usd: Annotated[float, pydantic.Field(alias="assetPriceUSD")]

    block: int

    ACTION: Annotated[
        Annotated[Literal["Repay"], AfterValidator(validate_const("Repay"))],
        pydantic.Field(alias="action"),
    ] = "Repay"
    r"""The type of transaction"""
