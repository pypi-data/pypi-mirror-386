"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class Movement10PercentTypedDict(TypedDict):
    pt_movement_up_usd: NotRequired[Nullable[float]]
    pt_movement_down_usd: NotRequired[Nullable[float]]
    yt_movement_up_usd: NotRequired[Nullable[float]]
    yt_movement_down_usd: NotRequired[Nullable[float]]


class Movement10Percent(BaseModel):
    pt_movement_up_usd: Annotated[
        OptionalNullable[float], pydantic.Field(alias="ptMovementUpUsd")
    ] = UNSET

    pt_movement_down_usd: Annotated[
        OptionalNullable[float], pydantic.Field(alias="ptMovementDownUsd")
    ] = UNSET

    yt_movement_up_usd: Annotated[
        OptionalNullable[float], pydantic.Field(alias="ytMovementUpUsd")
    ] = UNSET

    yt_movement_down_usd: Annotated[
        OptionalNullable[float], pydantic.Field(alias="ytMovementDownUsd")
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "ptMovementUpUsd",
            "ptMovementDownUsd",
            "ytMovementUpUsd",
            "ytMovementDownUsd",
        ]
        nullable_fields = [
            "ptMovementUpUsd",
            "ptMovementDownUsd",
            "ytMovementUpUsd",
            "ytMovementDownUsd",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
