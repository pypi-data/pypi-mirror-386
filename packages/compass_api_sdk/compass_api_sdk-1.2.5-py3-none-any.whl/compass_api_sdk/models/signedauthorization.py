"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import BaseModel
import pydantic
from typing import Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


RTypedDict = TypeAliasType("RTypedDict", Union[int, str])
r"""The r value of the signature"""


R = TypeAliasType("R", Union[int, str])
r"""The r value of the signature"""


STypedDict = TypeAliasType("STypedDict", Union[int, str])
r"""The s value of the signature"""


S = TypeAliasType("S", Union[int, str])
r"""The s value of the signature"""


class SignedAuthorizationTypedDict(TypedDict):
    nonce: int
    r"""The nonce of the authorization"""
    address: str
    r"""The address of the authorization"""
    chain_id: int
    r"""The chain ID"""
    r: RTypedDict
    r"""The r value of the signature"""
    s: STypedDict
    r"""The s value of the signature"""
    y_parity: int
    r"""The y-parity of the signature (0 or 1)"""


class SignedAuthorization(BaseModel):
    nonce: int
    r"""The nonce of the authorization"""

    address: str
    r"""The address of the authorization"""

    chain_id: Annotated[int, pydantic.Field(alias="chainId")]
    r"""The chain ID"""

    r: R
    r"""The r value of the signature"""

    s: S
    r"""The s value of the signature"""

    y_parity: Annotated[int, pydantic.Field(alias="yParity")]
    r"""The y-parity of the signature (0 or 1)"""
