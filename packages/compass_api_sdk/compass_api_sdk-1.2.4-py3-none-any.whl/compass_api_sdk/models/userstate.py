"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class UserStateTypedDict(TypedDict):
    vaults_pnl_usd: Nullable[str]
    vaults_assets_usd: str
    markets_pnl_usd: Nullable[str]
    markets_borrow_assets_usd: str
    markets_collateral_usd: str
    markets_supply_assets_usd: str


class UserState(BaseModel):
    vaults_pnl_usd: Annotated[Nullable[str], pydantic.Field(alias="vaultsPnlUsd")]

    vaults_assets_usd: Annotated[str, pydantic.Field(alias="vaultsAssetsUsd")]

    markets_pnl_usd: Annotated[Nullable[str], pydantic.Field(alias="marketsPnlUsd")]

    markets_borrow_assets_usd: Annotated[
        str, pydantic.Field(alias="marketsBorrowAssetsUsd")
    ]

    markets_collateral_usd: Annotated[str, pydantic.Field(alias="marketsCollateralUsd")]

    markets_supply_assets_usd: Annotated[
        str, pydantic.Field(alias="marketsSupplyAssetsUsd")
    ]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["vaultsPnlUsd", "marketsPnlUsd"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
