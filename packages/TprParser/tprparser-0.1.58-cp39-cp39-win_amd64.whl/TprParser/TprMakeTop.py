# make top from tpr
# 2024.10.11 - use list for context to save time on Windows

import sys
from collections import defaultdict

try:
    from TprParser.TprReader import TprReader
except ImportError:
    sys.exit('Can not import TprReader')

def _get_bonds(rd:TprReader):
    """ @brief get bonds from tpr handle

    Return
    ------
    return None if No bonds exits
    """
    bonds = None
    try:
        bonds = rd.get_bonded('bonds')
    except:
        pass
    return bonds

def _get_pairs(rd:TprReader):
    """ @brief get pairs from tpr handle

    Return
    ------
    return None if No pairs exits
    """
    pairs = None
    try:
        pairs = rd.get_nonbonded('pairs')
    except:
        pass
    return pairs

def _get_atomtypes(rd:TprReader):
    """ @brief get atomtypes lj parameters for each atoms from tpr handle

    Return
    ------
    return None if No atomtypes exits
    """
    atypes = None
    try:
        atypes = rd.get_nonbonded('lj')
    except:
        pass
    return atypes[:, 1:] # drop functype

def _get_angles(rd:TprReader):
    """ @brief get angles from tpr handle

    Return
    ------
    return None if No angles exits
    """
    angles = None
    try:
        angles = rd.get_bonded('angles')
    except:
        pass
    return angles

def _get_dihedrals(rd:TprReader, type:str = 'dihedrals'):
    """ @brief get dihedrals/impropers from tpr handle

    Return
    ------
    return None if No dihedrals exits
    """
    dihedrals = None
    try:
        dihedrals = rd.get_bonded(type)
    except:
        pass
    return dihedrals

def make_top_from_tpr(fname:str = 'md.tpr', topfile:str='md.top'):
    """ @brief Make a gromacs top from given tpr file

    Note
    ----
    The top is different from origin because some changes have been done by 
    gmx grompp stage, like convert bonds to constrains by h-bonds in mdp, etc. 
    
    Note
    ----
    Water molecules can not be converted correctly because it uses SETTLE

    TODO
    ----
    Maybe need fix residue number
    """
    # get tpr handle
    rd = TprReader(fname)

    # get parameters
    atomtypename = rd.get_name('type')
    atomname = rd.get_name('atom')
    resname  = rd.get_name('res')
    charge   = rd.get_mq('q')
    mass     = rd.get_mq('m')
    resids   = rd.get_ivector('resid')
    # atnums   = rd.get_ivector('atnum') # some tpr not include atomnumber!
    ljparams = _get_atomtypes(rd)
    natoms   = len(atomname)

    # header 
    context = []
    context.append('; A gromacs top from tpr generated by TprParser.TprMakeTop\n')
    context.append('; NOTE: Testing\n\n')
    context.append('#include "amber99sb-ildn.ff/forcefield.itp"\n\n')

    # Maybe not exist << 2024.09.30
    # [ atomtypes ]
    atypedict = defaultdict(list)
    if (ljparams is not None) and ljparams.shape[1]>0:
        for atype, m, sigma, epsion in zip(atomtypename, mass, ljparams[:, 0], ljparams[:, 1]):
            #print(atype, m, sigma, epsion)
            atypedict[atype] = [m, sigma, epsion]

    # print(len(atnums))
    # print(len(atypedict))
    # print(len(set(atomtypename)))

    #assert len(atnums) == len(atypedict), f'the length of atnums != len(atypedict.keys())'

    context.append('[ atomtypes ]\n; name     mass       charge  ptype sigma   epsilon\n')
    for key, [m, sigma, epsion] in atypedict.items():
        ptype = 'A' if abs(m)>1E-5 else 'D'
        context.append('%10s %10.6f %10.6f %s %8.4f %8.4f\n' %(
            key, m, 0.0, ptype, sigma, epsion
        ))
    context.append('\n[ moleculetype ]\n;name  nrexcl\nMOL    3\n\n')

    # atoms
    context.append('[ atoms ]\n')
    context.append(';   nr  type  resi  res  atom  cgnr     charge      mass\n')
    for i in range(natoms):
        context.append('%5d %10s %5d %5s %5s %5d %10.6f %10.6f\n' %(
            i+1, atomtypename[i], resids[i], resname[i], atomname[i], i+1, 
            charge[i], mass[i]
        ))
    context.append('\n')

    # bonds
    bonds = _get_bonds(rd)
    if bonds is not None:
        for i in range(bonds.shape[0]):
            # [ constraints ] from constraints=h-bonds in mdp
            if len(bonds[i][3:])==2 and abs(bonds[i][3]-bonds[i][4]) < 1E-5:
                context.append('[ constraints ] ; from mdp\n')
            else:
                context.append('[ bonds ]\n')

            # normal bonds
            context.append('%5d %5d %5d' %(
                bonds[i][0], bonds[i][1], bonds[i][2]
            ))
            for param in bonds[i][3:]:
                context.append(' %10.6e' %param)
            context.append('\n')
    context.append('\n')

    # get pairs
    context.append('[ pairs ]\n')
    pairs = _get_pairs(rd)
    if pairs is not None:
        for i in range(pairs.shape[0]):
            # normal bonds
            context.append('%5d %5d %5d ;' %(
                pairs[i][0], pairs[i][1], pairs[i][2]
            ))
            for param in pairs[i][3:]:
                context.append(' %10.6e' %param)
            context.append('\n')
    context.append('\n')

    context.append('[ angles ]\n')
    angles = _get_angles(rd)
    if angles is not None:
        for i in range(angles.shape[0]):
            context.append('%5d %5d %5d %5d' %(
                angles[i][0], angles[i][1], angles[i][2], angles[i][3]
            ))
            for param in angles[i][4:]:
                context.append(' %10.6e' %param)
            context.append('\n')

    context.append('\n[ dihedrals ] ; proper\n')
    dihedrals = _get_dihedrals(rd, 'dihedrals')
    if dihedrals is not None:
        for i in range(dihedrals.shape[0]):
            context.append('%5d %5d %5d %5d %5d' %(
                dihedrals[i][0], dihedrals[i][1], dihedrals[i][2], dihedrals[i][3], 
                dihedrals[i][4]
            ))
            # for type=9, remove abandon params
            if dihedrals[i][4] == 9:
                param = dihedrals[i][5:]
                context.append(' %10.6e %10.6e %d' %(
                    param[0], param[1], int(param[-1])
                ))
            else:
                for param in dihedrals[i][5:]:
                    context.append(' %10.6e' %param)
            context.append('\n')

    context.append('\n[ dihedrals ] ; improper\n')
    dihedrals = _get_dihedrals(rd, 'impropers')
    if dihedrals is not None:
        for i in range(dihedrals.shape[0]):
            context.append('%5d %5d %5d %5d %5d' %(
                dihedrals[i][0], dihedrals[i][1], dihedrals[i][2], dihedrals[i][3], 
                dihedrals[i][4]
            ))

            # for type=4, remove abandon params
            if dihedrals[i][4] == 4:
                param = dihedrals[i][5:]
                context.append(' %10.6e %10.6e %d' %(
                    param[0], param[1], 2
                ))
            else:
                for param in dihedrals[i][5:]:
                    context.append(' %10.6e' %param)
            context.append('\n')
    # add tail
    context.append('\n[ system ]\n System\n')
    context.append('\n[ molecules ]\nMOL      1\n')
    with open(topfile, 'w') as w:
        w.writelines(context)

    del rd

if __name__ == '__main__':
    make_top_from_tpr('../test/md.tpr', 'md.top')
