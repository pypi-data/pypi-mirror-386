# coding: utf-8

"""
    OurSky Astro

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class V1PredictedStreakLocation(BaseModel):
    """
    V1PredictedStreakLocation
    """
    start_x: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="startX")
    start_y: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="startY")
    end_x: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="endX")
    end_y: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="endY")
    __properties = ["startX", "startY", "endX", "endY"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PredictedStreakLocation:
        """Create an instance of V1PredictedStreakLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PredictedStreakLocation:
        """Create an instance of V1PredictedStreakLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PredictedStreakLocation.parse_obj(obj)

        _obj = V1PredictedStreakLocation.parse_obj({
            "start_x": obj.get("startX"),
            "start_y": obj.get("startY"),
            "end_x": obj.get("endX"),
            "end_y": obj.get("endY")
        })
        return _obj


