# coding: utf-8

"""
    OurSky Astro

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class V1AstroProject(BaseModel):
    """
    Astro Project  # noqa: E501
    """
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    target_id: Optional[StrictStr] = Field(None, alias="targetId")
    ra: Optional[Union[StrictFloat, StrictInt]] = None
    dec: Optional[Union[StrictFloat, StrictInt]] = None
    camera_id: StrictStr = Field(..., alias="cameraId")
    ota_id: StrictStr = Field(..., alias="otaId")
    image_sets: Optional[conlist(StrictStr)] = Field(None, alias="imageSets")
    created_at: datetime = Field(..., alias="createdAt")
    updated_at: Optional[datetime] = Field(None, alias="updatedAt")
    total_images: StrictInt = Field(..., alias="totalImages")
    uploaded_images: StrictInt = Field(..., alias="uploadedImages")
    __properties = ["id", "name", "targetId", "ra", "dec", "cameraId", "otaId", "imageSets", "createdAt", "updatedAt", "totalImages", "uploadedImages"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1AstroProject:
        """Create an instance of V1AstroProject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1AstroProject:
        """Create an instance of V1AstroProject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1AstroProject.parse_obj(obj)

        _obj = V1AstroProject.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "target_id": obj.get("targetId"),
            "ra": obj.get("ra"),
            "dec": obj.get("dec"),
            "camera_id": obj.get("cameraId"),
            "ota_id": obj.get("otaId"),
            "image_sets": obj.get("imageSets"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "total_images": obj.get("totalImages"),
            "uploaded_images": obj.get("uploadedImages")
        })
        return _obj


