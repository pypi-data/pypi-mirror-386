# coding: utf-8

"""
    OurSky Astro

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from ourskyai_astro_api.models.location import Location
from ourskyai_astro_api.models.node_state import NodeState
from ourskyai_astro_api.models.v1_elevation_mask_point import V1ElevationMaskPoint
from ourskyai_astro_api.models.v1_slew_timing import V1SlewTiming

class V1Node(BaseModel):
    """
    Node  # noqa: E501
    """
    name: StrictStr = Field(...)
    observatory_id: Optional[StrictStr] = Field(None, alias="observatoryId")
    organization_id: StrictStr = Field(..., alias="organizationId")
    camera_id: StrictStr = Field(..., alias="cameraId")
    optical_tube_id: StrictStr = Field(..., alias="opticalTubeId")
    mount_id: StrictStr = Field(..., alias="mountId")
    filter_wheel_id: Optional[StrictStr] = Field(None, alias="filterWheelId")
    min_altitude: StrictInt = Field(..., alias="minAltitude")
    elevation_mask: Optional[conlist(V1ElevationMaskPoint)] = Field(None, alias="elevationMask")
    slew_timing: Optional[V1SlewTiming] = Field(None, alias="slewTiming")
    created_at: datetime = Field(..., alias="createdAt")
    updated_at: Optional[datetime] = Field(None, alias="updatedAt")
    state: Optional[NodeState] = None
    id: StrictStr = Field(...)
    lineage_id: StrictStr = Field(..., alias="lineageId")
    location: Location = Field(...)
    __properties = ["name", "observatoryId", "organizationId", "cameraId", "opticalTubeId", "mountId", "filterWheelId", "minAltitude", "elevationMask", "slewTiming", "createdAt", "updatedAt", "state", "id", "lineageId", "location"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Node:
        """Create an instance of V1Node from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in elevation_mask (list)
        _items = []
        if self.elevation_mask:
            for _item in self.elevation_mask:
                if _item:
                    _items.append(_item.to_dict())
            _dict['elevationMask'] = _items
        # override the default output from pydantic by calling `to_dict()` of slew_timing
        if self.slew_timing:
            _dict['slewTiming'] = self.slew_timing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Node:
        """Create an instance of V1Node from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Node.parse_obj(obj)

        _obj = V1Node.parse_obj({
            "name": obj.get("name"),
            "observatory_id": obj.get("observatoryId"),
            "organization_id": obj.get("organizationId"),
            "camera_id": obj.get("cameraId"),
            "optical_tube_id": obj.get("opticalTubeId"),
            "mount_id": obj.get("mountId"),
            "filter_wheel_id": obj.get("filterWheelId"),
            "min_altitude": obj.get("minAltitude"),
            "elevation_mask": [V1ElevationMaskPoint.from_dict(_item) for _item in obj.get("elevationMask")] if obj.get("elevationMask") is not None else None,
            "slew_timing": V1SlewTiming.from_dict(obj.get("slewTiming")) if obj.get("slewTiming") is not None else None,
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "state": obj.get("state"),
            "id": obj.get("id"),
            "lineage_id": obj.get("lineageId"),
            "location": Location.from_dict(obj.get("location")) if obj.get("location") is not None else None
        })
        return _obj


