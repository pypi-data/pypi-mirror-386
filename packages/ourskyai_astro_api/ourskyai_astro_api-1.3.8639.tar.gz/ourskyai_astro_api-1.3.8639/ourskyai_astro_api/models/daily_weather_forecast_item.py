# coding: utf-8

"""
    OurSky Astro

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from ourskyai_astro_api.models.daily_weather_forecast_item_temp import DailyWeatherForecastItemTemp
from ourskyai_astro_api.models.daily_weather_forecast_item_weather_inner import DailyWeatherForecastItemWeatherInner

class DailyWeatherForecastItem(BaseModel):
    """
    DailyWeatherForecastItem
    """
    dt: Optional[StrictInt] = Field(None, description="Timestamp of the weather data in UNIX timestamp")
    sunrise: Optional[StrictInt] = Field(None, description="Sunrise time in UNIX timestamp")
    sunset: Optional[StrictInt] = Field(None, description="Sunset time in UNIX timestamp")
    temp: Optional[DailyWeatherForecastItemTemp] = None
    humidity: Optional[StrictInt] = Field(None, description="Humidity percentage")
    weather: Optional[conlist(DailyWeatherForecastItemWeatherInner)] = None
    speed: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Wind speed in m/s")
    deg: Optional[StrictInt] = Field(None, description="Wind direction in degrees")
    clouds: Optional[StrictInt] = Field(None, description="Cloudiness percentage")
    pop: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Probability of precipitation in %")
    rain: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Rain volume for the last 3 hours in mm/h")
    __properties = ["dt", "sunrise", "sunset", "temp", "humidity", "weather", "speed", "deg", "clouds", "pop", "rain"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DailyWeatherForecastItem:
        """Create an instance of DailyWeatherForecastItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of temp
        if self.temp:
            _dict['temp'] = self.temp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in weather (list)
        _items = []
        if self.weather:
            for _item in self.weather:
                if _item:
                    _items.append(_item.to_dict())
            _dict['weather'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DailyWeatherForecastItem:
        """Create an instance of DailyWeatherForecastItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DailyWeatherForecastItem.parse_obj(obj)

        _obj = DailyWeatherForecastItem.parse_obj({
            "dt": obj.get("dt"),
            "sunrise": obj.get("sunrise"),
            "sunset": obj.get("sunset"),
            "temp": DailyWeatherForecastItemTemp.from_dict(obj.get("temp")) if obj.get("temp") is not None else None,
            "humidity": obj.get("humidity"),
            "weather": [DailyWeatherForecastItemWeatherInner.from_dict(_item) for _item in obj.get("weather")] if obj.get("weather") is not None else None,
            "speed": obj.get("speed"),
            "deg": obj.get("deg"),
            "clouds": obj.get("clouds"),
            "pop": obj.get("pop"),
            "rain": obj.get("rain")
        })
        return _obj


