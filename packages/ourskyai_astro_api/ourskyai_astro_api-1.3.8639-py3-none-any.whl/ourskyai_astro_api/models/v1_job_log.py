# coding: utf-8

"""
    OurSky Astro

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from ourskyai_astro_api.models.v1_job_kind import V1JobKind
from ourskyai_astro_api.models.v1_job_status import V1JobStatus

class V1JobLog(BaseModel):
    """
    Job Log  # noqa: E501
    """
    id: StrictStr = Field(...)
    job_kind: V1JobKind = Field(..., alias="jobKind")
    job_status: V1JobStatus = Field(..., alias="jobStatus")
    created_at: datetime = Field(..., alias="createdAt")
    started_at: Optional[datetime] = Field(None, alias="startedAt")
    finished_at: Optional[datetime] = Field(None, alias="finishedAt")
    progress: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["id", "jobKind", "jobStatus", "createdAt", "startedAt", "finishedAt", "progress"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1JobLog:
        """Create an instance of V1JobLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1JobLog:
        """Create an instance of V1JobLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1JobLog.parse_obj(obj)

        _obj = V1JobLog.parse_obj({
            "id": obj.get("id"),
            "job_kind": obj.get("jobKind"),
            "job_status": obj.get("jobStatus"),
            "created_at": obj.get("createdAt"),
            "started_at": obj.get("startedAt"),
            "finished_at": obj.get("finishedAt"),
            "progress": obj.get("progress")
        })
        return _obj


