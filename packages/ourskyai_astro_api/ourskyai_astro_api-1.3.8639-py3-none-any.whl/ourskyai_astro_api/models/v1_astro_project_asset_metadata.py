# coding: utf-8

"""
    OurSky Astro

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from ourskyai_astro_api.models.integration_time import IntegrationTime
from ourskyai_astro_api.models.v1_astro_project_asset_metadata_color_combination import V1AstroProjectAssetMetadataColorCombination

class V1AstroProjectAssetMetadata(BaseModel):
    """
    V1AstroProjectAssetMetadata
    """
    integration_time: Optional[conlist(IntegrationTime)] = Field(None, alias="integrationTime")
    color_combination: Optional[V1AstroProjectAssetMetadataColorCombination] = Field(None, alias="colorCombination")
    __properties = ["integrationTime", "colorCombination"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1AstroProjectAssetMetadata:
        """Create an instance of V1AstroProjectAssetMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in integration_time (list)
        _items = []
        if self.integration_time:
            for _item in self.integration_time:
                if _item:
                    _items.append(_item.to_dict())
            _dict['integrationTime'] = _items
        # override the default output from pydantic by calling `to_dict()` of color_combination
        if self.color_combination:
            _dict['colorCombination'] = self.color_combination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1AstroProjectAssetMetadata:
        """Create an instance of V1AstroProjectAssetMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1AstroProjectAssetMetadata.parse_obj(obj)

        _obj = V1AstroProjectAssetMetadata.parse_obj({
            "integration_time": [IntegrationTime.from_dict(_item) for _item in obj.get("integrationTime")] if obj.get("integrationTime") is not None else None,
            "color_combination": V1AstroProjectAssetMetadataColorCombination.from_dict(obj.get("colorCombination")) if obj.get("colorCombination") is not None else None
        })
        return _obj


