Metadata-Version: 2.4
Name: flight-radar
Version: 0.0.4
Summary: An unofficial Python SDK for the FlightRadar24 API.
Author-email: Amir Muminovic <amir.muminovic192@gmail.com>
License: Copyright (c) 2025 <copyright holders>
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/amirmuminovic/flight_radar
Project-URL: Documentation, https://amirmuminovic.github.io/flight_radar/
Project-URL: Repository, https://github.com/amirmuminovic/flight_radar
Project-URL: Bug Tracker, https://github.com/amirmuminovic/flight_radar/issues
Keywords: flight-radar,api,sdk,aviation,flights
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pydantic>=2.11.5
Requires-Dist: requests>=2.32.4
Requires-Dist: pydantic-settings>=2.10.1
Requires-Dist: urllib3>=2.5.0
Provides-Extra: dev
Requires-Dist: pytest-cov>=6.2.1; extra == "dev"
Requires-Dist: pytest>=8.4.1; extra == "dev"
Requires-Dist: ruff>=0.4.4; extra == "dev"
Requires-Dist: pip-audit>=2.9.0; extra == "dev"
Requires-Dist: sphinx>=8.2.3; extra == "dev"
Requires-Dist: furo>=2024.8.6; extra == "dev"
Requires-Dist: sphinx-autobuild>=2024.10.3; extra == "dev"
Requires-Dist: sphinx-autodoc-typehints>=3.2.0; extra == "dev"
Requires-Dist: sphinx-copybutton>=0.5.2; extra == "dev"
Requires-Dist: docutils>=0.21.2; extra == "dev"
Requires-Dist: autodoc-pydantic>=2.2.0; extra == "dev"
Requires-Dist: pre-commit>=4.2.0; extra == "dev"
Dynamic: license-file

# Flight Radar API Client

This project provides a Python client for interacting with the Flight Radar API. It simplifies the process of fetching flight-related data, such as live and historic flight positions, flight summaries, and airline and airport information.

## Features

- **Live Flight Data:** Get real-time flight positions for aircraft around the world.
- **Historic Flight Data:** Access historical flight data, including positions, summaries, and events.
- **Flight Details:** Retrieve detailed information about specific flights, including their tracks.
- **Airline & Airport Information:** Look up details about airlines and airports.
- **API Usage Monitoring:** Check your API usage statistics.

## Installation

To install the Flight Radar API Client, you can use pip:

```bash
pip install flight-radar
```

## Quickstart

Here's a simple example of how to use the client to get live flight positions:

```python
from flight_radar.factory import get_flight_radar_client
from flight_radar.models import LiveFlightPositionRequest

# Create a flight radar client
client = get_flight_radar_client()

# Create a request to get the live flight positions
request = LiveFlightPositionRequest(
    limit=10,
    # Add any other parameters you might need
)

# Get the live flight positions
positions = client.get_live_flight_positions(request)

# Print the positions
for position in positions:
    print(position)
```

This will output a list of `FlightPosition` objects, each containing information about a live flight.

## Documentation

For more detailed information about the available methods and models, please refer to the [official documentation](https://amirmuminovic.github.io/flight-radar/).

## Contributing

Contributions are welcome! If you'd like to contribute, please check out the [CONTRIBUTING.md](CONTRIBUTING.md).

## Local Development

To set up the project for local development, follow these steps. This project uses `uv` for package management.

1.  **Install uv:**

    Follow the [official installation guide](https://docs.astral.sh/uv/getting-started/installation/) to install `uv`.

2. **Create and activate a virtual environment:**

    To run the examples, you first need to create and activate a virtual environment:

    ```bash
    uv venv
    source .venv/bin/activate
    ```

3.  **Install dependencies:**

    Install the project dependencies, including the development dependencies:
    ```bash
    uv sync --extra dev
    ```

4.  **Set up pre-commit hooks:**

    This project uses pre-commit hooks to ensure code quality. Install them by running:
    ```bash
    uv run pre-commit install
    ```

5.  **Run an example:**

    Then, you can run any of the example scripts:

    ```bash
    python examples/alert_when_flight_enters_circular_area.py
    ```

Now you are all set up to run the project locally and contribute to its development.
