"""Configuration utilities for the mock LiteLLM proxy."""

from pydantic import BaseModel, Field


class MockLLMSettings(BaseModel):
    """Runtime configuration for the mock proxy server."""

    host: str = Field(default="0.0.0.0", description="Host interface to bind on.")
    port: int = Field(default=8010, description="TCP port to listen on.")
    mock_metric_score: float = Field(
        default=0.75,
        description="Default score to return when structured responses are requested.",
    )
    mock_reasoning: str = Field(
        default="Mock evaluation generated by the LiteLLM proxy.",
        description="Default reasoning to return in responses.",
    )
    response_latency_min_ms: float = Field(
        default=100.0,
        ge=0.0,
        description="Lower bound (inclusive) for simulated latency sampling, in milliseconds.",
    )
    response_latency_max_ms: float = Field(
        default=500.0,
        ge=0.0,
        description="Upper bound (inclusive) for simulated latency sampling, in milliseconds.",
    )


def load_settings(overrides: dict | None = None) -> MockLLMSettings:
    """Create settings, allowing explicit overrides for CLI usage."""

    overrides = overrides or {}
    return MockLLMSettings(**overrides)
