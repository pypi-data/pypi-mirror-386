[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'

[project]
name = "anfis-toolbox"
dynamic = ["version"]
description = "A Python toolbox for building, training, and evaluating Adaptive Neuro-Fuzzy Inference System (ANFIS) models."
authors = [{ name = "Daniel FranÃ§a", email = "daniel@ci.ufpb.br" }]
license = { text = "MIT" }
dependencies = [
    "numpy>=1.23, <3.0",
]
requires-python = ">=3.10"
readme = "README.md"
keywords = ["anfis", "neuro-fuzzy", "fuzzy logic", "machine learning", "explainable ai"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
]

[project.urls]
Homepage = "https://github.com/dcruzf/anfis-toolbox"
Documentation = "https://dcruzf.github.io/anfis-toolbox/"
Source = "https://github.com/dcruzf/anfis-toolbox"
Tracker = "https://github.com/dcruzf/anfis-toolbox/issues"
DOI = "https://doi.org/10.5281/zenodo.17437179"

[tool.hatch.version]
path = 'anfis_toolbox/__init__.py'

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.build]
include = ["docs/assets/logo.svg", "LICENSE"]

[tool.hatch.build.targets.wheel]
only-include = ["anfis_toolbox", "docs/assets/logo.svg", "LICENSE"]

[tool.hatch.build.targets.sdist]
include = ["/README.md", "/Makefile", "/anfis_toolbox", "/tests", "/docs/assets/logo.svg", "/LICENSE"]


[tool.hatch.envs.hatch-test]
installer = "uv"
dependencies = [
    "coverage[toml]>=7.6.1",
    "pytest>=7.0.0",
    "pytest-cov>=5.0.0",
    "scikit-learn>=1.7.2",
]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.14","3.13", "3.12", "3.11", "3.10"]

[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
cov-combine = "coverage combine"
cov-report = "coverage report -m"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    'F',      # Pyflakes
    'E',      # pycodestyle (Error)
    'I',      # isort
    'D',      # pydocstyle
    'UP',     # pyupgrade
    'YTT',    # flake8-2020
    'B',      # flake8-bugbear
    'T10',    # flake8-debugger
    'T20',    # flake8-print
    'C4',     # flake8-comprehensions
    'PYI006', # flake8-pyi
]
ignore = ['D100', 'D104']
pydocstyle = { convention = 'google' }
isort = { known-first-party = ['anfis_toolbox', 'tests'] }

[tool.ruff.lint.per-file-ignores]
'tests/*' = ['D']

[tool.pytest.ini_options]
testpaths = 'tests'
xfail_strict = true

[tool.coverage.run]
source = ['anfis_toolbox']
branch = true
relative_files = true

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "scikit-learn>=1.7.2",
    "mypy>=1.10.0",
    "bandit>=1.7.9",
]

[tool.mypy]
python_version = "3.10"
files = ["anfis_toolbox", "tests"]
ignore_missing_imports = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
pretty = true
show_column_numbers = true
show_error_context = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_errors = true

[tool.bandit]
targets = ["anfis_toolbox"]
exclude_dirs = ["tests", "docs", "site"]
