# tasks/persistence/port.py
from abc import ABC
from ..core.events import TaskLifecycleEvent

class BasePersistence(ABC):
    # No-op defaults â€” override only what you need
    def on_created(self, e: TaskLifecycleEvent) -> None: ...
    def on_running(self, e: TaskLifecycleEvent) -> None: ...
    def on_skipped(self, e: TaskLifecycleEvent) -> None: ...
    def on_final(self,  e: TaskLifecycleEvent) -> None: ...

    # Optional: explicit finals (if you ever want per-status overrides)
    def on_success(self, e: TaskLifecycleEvent) -> None: ...
    def on_failed(self, e: TaskLifecycleEvent) -> None: ...
    def on_cancelled(self, e: TaskLifecycleEvent) -> None: ...
    def on_manual_cancelled(self, e: TaskLifecycleEvent) -> None: ...
    def on_error(self, e: TaskLifecycleEvent) -> None: ...
    def on_timeout(self, e: TaskLifecycleEvent) -> None: ...
    def on_dead(self, e: TaskLifecycleEvent) -> None: ...
