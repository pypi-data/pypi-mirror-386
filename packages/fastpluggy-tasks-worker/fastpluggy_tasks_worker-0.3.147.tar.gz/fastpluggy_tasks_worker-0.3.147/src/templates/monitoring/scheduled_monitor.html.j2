{# scheduled_monitor.html.j2 #}

{# Helper functions for pagination and filtering #}
{% macro _build_pagination_url(params, page_num) %}
    {% set url_parts = [] %}
    {% if params.task_name %}{% set _ = url_parts.append('task_name=' + params.task_name) %}{% endif %}
    {% if params.start_time %}{% set _ = url_parts.append('start_time=' + params.start_time) %}{% endif %}
    {% if params.end_time %}{% set _ = url_parts.append('end_time=' + params.end_time) %}{% endif %}
    {% if params.max_reports_per_task %}
        {% set _ = url_parts.append('max_reports_per_task=' + params.max_reports_per_task|string) %}{% endif %}
    {% if params.page_size %}{% set _ = url_parts.append('page_size=' + params.page_size|string) %}{% endif %}
    {% set _ = url_parts.append('page=' + page_num|string) %}
    {{ url_parts|join('&') }}
{% endmacro %}

{% macro _build_filter_url(params, filter_value) %}
    {% set url_parts = [] %}
    {% if filter_value != 'all' %}{% set _ = url_parts.append('task_name=' + filter_value) %}
    {% elif params.task_name %}{% set _ = url_parts.append('task_name=' + params.task_name) %}{% endif %}
    {% if params.start_time %}{% set _ = url_parts.append('start_time=' + params.start_time) %}{% endif %}
    {% if params.end_time %}{% set _ = url_parts.append('end_time=' + params.end_time) %}{% endif %}
    {% if params.max_reports_per_task %}
        {% set _ = url_parts.append('max_reports_per_task=' + params.max_reports_per_task|string) %}{% endif %}
    {% if params.page_size %}{% set _ = url_parts.append('page_size=' + params.page_size|string) %}{% endif %}
    {% set _ = url_parts.append('page=1') %}
    {{ url_parts|join('&') }}
{% endmacro %}


<style>
    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 8px;
    }

    .status-up {
        background-color: #2fb344;
        box-shadow: 0 0 0 3px rgba(47, 179, 68, 0.2);
    }

    .status-down {
        background-color: #d63384;
        box-shadow: 0 0 0 3px rgba(214, 51, 132, 0.2);
    }

    .status-warning {
        background-color: #f76707;
        box-shadow: 0 0 0 3px rgba(247, 103, 7, 0.2);
    }

    .status-maintenance {
        background-color: #868e96;
        box-shadow: 0 0 0 3px rgba(134, 142, 150, 0.2);
    }

    .task-status-card {
        transition: all 0.3s ease;
        border-left: 4px solid transparent;
    }

    .task-status-card.status-operational {
        border-left-color: #2fb344;
    }

    .task-status-card.status-issues {
        border-left-color: #d63384;
    }

    .task-status-card.status-degraded {
        border-left-color: #f76707;
    }

    .task-status-card.status-maintenance {
        border-left-color: #868e96;
    }

    .task-status-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .uptime-bar {
        height: 4px;
        background: #e9ecef;
        border-radius: 2px;
        overflow: hidden;
        margin: 8px 0;
    }

    .uptime-fill {
        height: 100%;
        transition: width 0.3s ease;
    }

    .uptime-fill.high {
        background: linear-gradient(90deg, #2fb344, #51cf66);
    }

    .uptime-fill.medium {
        background: linear-gradient(90deg, #f76707, #ff8c42);
    }

    .uptime-fill.low {
        background: linear-gradient(90deg, #d63384, #e64980);
    }

    .incident-timeline {
        display: flex;
        gap: 2px;
        height: 20px;
        margin: 8px 0;
    }

    .incident-day {
        flex: 1;
        border-radius: 2px;
        min-width: 3px;
    }

    .incident-day.good {
        background: #2fb344;
    }

    .incident-day.minor {
        background: #f76707;
    }

    .incident-day.major {
        background: #d63384;
    }

    .incident-day.maintenance {
        background: #868e96;
    }

    .metric-big {
        font-size: 2.5rem;
        font-weight: 300;
        line-height: 1.2;
    }

    .overall-status {
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 2rem;
    }

    .overall-status.operational {
        background: linear-gradient(135deg, rgba(47, 179, 68, 0.1), rgba(47, 179, 68, 0.05));
        border: 1px solid rgba(47, 179, 68, 0.2);
    }

    .overall-status.issues {
        background: linear-gradient(135deg, rgba(214, 51, 132, 0.1), rgba(214, 51, 132, 0.05));
        border: 1px solid rgba(214, 51, 132, 0.2);
    }

    .cron-expression {
        font-family: 'JetBrains Mono', 'Courier New', monospace;
        background: rgba(0, 0, 0, 0.05);
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 0.85rem;
    }

    .last-execution {
        font-size: 0.9rem;
        color: #666;
    }

    .timeline {
        position: relative;
    }

    .timeline-item {
        position: relative;
        padding-left: 2rem;
        padding-bottom: 1rem;
    }

    .timeline-item:not(:last-child)::before {
        content: '';
        position: absolute;
        left: 0.5rem;
        top: 1.5rem;
        bottom: -1rem;
        width: 2px;
        background: #e9ecef;
    }

    .timeline-badge {
        position: absolute;
        left: 0;
        top: 0;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
        border: 2px solid #fff;
    }

    .timeline-time {
        font-size: 0.75rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
    }

    .timeline-title {
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .timeline-body {
        font-size: 0.875rem;
    }

    /* Add to your existing CSS */
    .task-timeline {
        display: flex;
        gap: 2px;
        height: 20px;
        margin: 8px 0;
    }

    .run-item {
        flex: 1;
        border-radius: 2px;
        min-width: 3px;
    }

    .run-success {
        background: #2fb344;
    }

    .run-warning {
        background: #f76707;
    }

    .run-failure {
        background: #d63384;
    }

    .run-empty {
        background: #e9ecef;
        opacity: 0.5;
    }
</style>

<style>
    /* Related activity under each card */
    .related-activity {
        margin-top: 8px;
    }

    .related-activity .activity-item {
        font-size: 0.85rem;
        color: #555;
    }

    .related-activity .activity-item.success {
        color: #2fb344;
    }

    .related-activity .activity-item.warning {
        color: #f76707;
    }

    .related-activity .activity-item.error {
        color: #d63384;
    }

    /* Basic modal styling using Tabler/Bootstrap classes are assumed available */
</style>

<div class="page">
    <div class="page-wrapper">
        <!-- Header -->
        <div class="page-header d-print-none">
            <div class="container-xl">
                <div class="row g-2 align-items-center">
                    <div class="col">
                        <div class="d-flex align-items-center">
                            <span class="status-indicator"></span>
                            <h2 class="page-title">Cron Task Status</h2>
                        </div>
                        <div class="text-muted">
                            Monitoring {{ widget.scheduled_tasks | length }} scheduled tasks
                        </div>
                    </div>
                    <div class="col-auto">
                        <div class="btn-list">
                            <button class="btn btn-primary" onclick="location.reload()">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24"
                                     viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none">
                                    <path d="M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4m0 6a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4"/>
                                </svg>
                                Refresh
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Page body -->
        <div class="page-body">
            <div class="container-xl">

                <!-- Filter Form -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h3 class="card-title">Filter Tasks</h3>
                    </div>
                    <div class="card-body">
                        <form method="get" action="">
                            <div class="row g-3">
                                <div class="col-md-3">
                                    <label class="form-label">Task Name</label>
                                    <input type="text" class="form-control" name="task_name"
                                           value="{{ widget.current_params.task_name or '' }}"
                                           placeholder="Filter by name">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Start Time</label>
                                    <input type="text" class="form-control" name="start_time"
                                           value="{{ widget.current_params.start_time or '' }}"
                                           placeholder="e.g., 1d, 7d, 2025-01-01">
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">End Time</label>
                                    <input type="text" class="form-control" name="end_time"
                                           value="{{ widget.current_params.end_time or '' }}"
                                           placeholder="e.g., now, 2025-01-31">
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">Reports Per Task</label>
                                    <select class="form-select" name="max_reports_per_task">
                                        {% for n in [5, 10, 25, 50] %}
                                            <option value="{{ n }}"
                                                    {% if widget.current_params.max_reports_per_task|int == n %}selected{% endif %}>{{ n }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="col-md-1 d-flex align-items-end">
                                    <button type="submit" class="btn btn-primary w-100">Apply</button>
                                </div>
                            </div>
                        </form>
                    </div>
                    {% if widget.filter_info and widget.filter_info.has_filters %}
                        <div class="card-footer">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="text-muted">Filters: </span>
                                    {% for filter in widget.filter_info.active_filters %}
                                        <span class="badge bg-primary me-1">{{ filter }}</span>
                                    {% endfor %}
                                </div>
                                <a href="?" class="btn btn-sm btn-outline-secondary">Clear Filters</a>
                            </div>
                        </div>
                    {% endif %}
                </div>

                <!-- Overall Status -->
                <div class="overall-status" id="overall-status">
                    <div class="row align-items-center">
                        <div class="col">
                            <h3 class="mb-1" id="status-title">overall_title</h3>
                            <p class="text-muted mb-0"
                               id="status-description">overall_description</p>
                        </div>
                        <div class="col-auto">
                            <div class="metric-big" id="overall-uptime">overall_uptime</div>
                            <div class="text-muted">Overall Uptime</div>
                        </div>
                    </div>
                </div>

                <!-- Task Status Cards -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h4 class="mb-3">Task Status</h4>
                        <div id="task-status-container">
                            {% for task in widget.scheduled_tasks %}
                                <div class="card task-status-card mb-3" data-schedule-id="{{ task.id }}">
                                    <div class="card-body">
                                        <div class="placeholder-glow">
                                            <span class="placeholder col-8"></span>
                                            <div class="mt-2"><span class="placeholder col-6"></span></div>
                                            <div class="mt-2"><span class="placeholder col-4"></span></div>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>

                <!-- Detailed Task List -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">Task Details</h3>
                                <div class="card-actions">
                                    <div class="dropdown">
                                        <button class="btn btn-outline-secondary dropdown-toggle"
                                                data-bs-toggle="dropdown">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24"
                                                 viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none">
                                                <path d="M3 6h18M7 12h10m-7 6h4"/>
                                            </svg>
                                            Filter
                                        </button>
                                        <div class="dropdown-menu">
                                            <a class="dropdown-item"
                                               href="?{{ _build_filter_url(widget.current_params, 'all') }}">All
                                                Tasks</a>
                                            <a class="dropdown-item"
                                               href="?{{ _build_filter_url(widget.current_params, 'operational') }}">Operational</a>
                                            <a class="dropdown-item"
                                               href="?{{ _build_filter_url(widget.current_params, 'issues') }}">Issues</a>
                                            <a class="dropdown-item"
                                               href="?{{ _build_filter_url(widget.current_params, 'maintenance') }}">Maintenance</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-vcenter">
                                    <thead>
                                    <tr>
                                        <th>Task</th>
                                        <th>Status</th>
                                        <th>Schedule</th>
                                        <th>Uptime</th>
                                        <th>Last Execution</th>
                                        <th>Next Run</th>
                                        <th>Actions</th>
                                    </tr>
                                    </thead>
                                    <tbody id="detailed-tasks-table">
                                        {% for task in widget.scheduled_tasks %}
                                            <tr data-schedule-id="{{ task.id }}">
                                                <td colspan="7">
                                                    <div class="placeholder-glow">
                                                        <span class="placeholder col-8"></span>
                                                        <div class="mt-2"><span class="placeholder col-6"></span></div>
                                                    </div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination Controls -->
                            {% if widget.pagination and widget.pagination.total_pages > 1 %}
                                <div class="card-footer">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="text-muted">
                                            Showing {{ (widget.pagination.current_page - 1) * widget.pagination.page_size + 1 }}
                                            to {{ [widget.pagination.current_page * widget.pagination.page_size, widget.pagination.total_items] | min }}
                                            of {{ widget.pagination.total_items }} tasks
                                        </div>
                                        <ul class="pagination m-0">
                                            <li class="page-item {% if not widget.pagination.has_previous %}disabled{% endif %}">
                                                <a class="page-link"
                                                   href="?{{ _build_pagination_url(widget.current_params, 1) }}"
                                                   aria-label="First">
                                                    <span aria-hidden="true">&laquo;&laquo;</span>
                                                </a>
                                            </li>
                                            <li class="page-item {% if not widget.pagination.has_previous %}disabled{% endif %}">
                                                <a class="page-link"
                                                   href="?{{ _build_pagination_url(widget.current_params, widget.pagination.previous_page or 1) }}"
                                                   aria-label="Previous">
                                                    <span aria-hidden="true">&laquo;</span>
                                                </a>
                                            </li>

                                            {% set start_page = [widget.pagination.current_page - 2, 1] | max %}
                                            {% set end_page = [start_page + 4, widget.pagination.total_pages] | min %}
                                            {% set start_page = [end_page - 4, 1] | max %}

                                            {% for page_num in range(start_page, end_page + 1) %}
                                                <li class="page-item {% if page_num == widget.pagination.current_page %}active{% endif %}">
                                                    <a class="page-link"
                                                       href="?{{ _build_pagination_url(widget.current_params, page_num) }}">{{ page_num }}</a>
                                                </li>
                                            {% endfor %}

                                            <li class="page-item {% if not widget.pagination.has_next %}disabled{% endif %}">
                                                <a class="page-link"
                                                   href="?{{ _build_pagination_url(widget.current_params, widget.pagination.next_page or widget.pagination.total_pages) }}"
                                                   aria-label="Next">
                                                    <span aria-hidden="true">&raquo;</span>
                                                </a>
                                            </li>
                                            <li class="page-item {% if not widget.pagination.has_next %}disabled{% endif %}">
                                                <a class="page-link"
                                                   href="?{{ _build_pagination_url(widget.current_params, widget.pagination.total_pages) }}"
                                                   aria-label="Last">
                                                    <span aria-hidden="true">&raquo;&raquo;</span>
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>
</div>

<!-- Modal for timeline details -->
<div class="modal" id="runDetailModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Task Run Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="runDetailBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    const detailUrlTemplate = "{{ widget.url_task_detail_data }}";

    function buildTaskCardHTML(task) {
        // Helpers: escape for HTML text and for attributes
        const escMap = {'&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'};
        const escapeHTML = (s) => (s == null ? '' : String(s).replace(/[&<>"']/g, ch => escMap[ch]));
        const escapeAttr = (s) => (s == null ? '' : String(s).replace(/[&<>"']/g, ch => escMap[ch]));

        // task has fields from TaskData
        const lastRunStr = task.last_run ? new Date(task.last_run).toLocaleString() : 'Never';
        const nextRunStr = task.next_run ? new Date(task.next_run).toLocaleString() : '—';

        // Build timeline safely (attribute-escaped titles)
        const timeline = (task.runs || []).map((run, idx) => {
            const cls =
                run.type === 'success' ? 'run-success' :
                    run.type === 'warning' ? 'run-warning' : 'run-failure';

            const titleRaw = `${new Date(run.timestamp).toLocaleString()} » ${run.message}`;
            return `<div class="run-item ${cls}" data-run-index="${idx}" title="${escapeAttr(titleRaw)}"></div>`;
        }).join('');

        const remaining = Math.max(0, ({{ widget.current_params.max_reports_per_task|int }}) - (task.runs ? task.runs.length : 0));
        const padding = Array.from({length: remaining})
            .map(() => '<div class="run-item run-empty" title="No data"></div>')
            .join('');

        // Related activity list (escape HTML content)
        const related = (task.runs || []).map(r => {
            const iconClass = r.type === 'success' ? 'bg-success' :
                (r.type === 'warning' ? 'bg-warning' : 'bg-danger');
            const taskDetailsUrl = "{{ widget.url_task_details }}".replace("TASK_ID_REPLACE", r.task_id || task.id);
            const timeStr = new Date(r.timestamp).toLocaleString('en-US', {
                timeZone: 'UTC',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            return `
      <div class="timeline-item">
        <div class="timeline-badge ${iconClass}"></div>
        <div class="timeline-content">
          <div class="timeline-time">${timeStr} UTC</div>
          <div class="timeline-title"><a href="${taskDetailsUrl}">${escapeHTML(task.name)}</a></div>
          <div class="timeline-body text-muted">${escapeHTML(r.message)}</div>
        </div>
      </div>
    `;
        }).join('') || '<div class="text-muted">No recent activity</div>';

        const statusText = String(task.status || '');
        const statusLabel = statusText ? statusText.charAt(0).toUpperCase() + statusText.slice(1) : '';

        return `
    <div class="card-body">
      <div class="row">
        <div class="col">
          <div class="d-flex align-items-center mb-2">
            <span class="status-indicator ${task.status_indicator_class}"></span>
            <h4 class="mb-0">${escapeHTML(task.name)}</h4>
            <span class="badge bg-${task.card_badge_color} ms-2">${escapeHTML(statusLabel)}</span>
          </div>
          <p class="text-muted mb-2">${escapeHTML(task.description || '')}</p>
          <div class="d-flex align-items-center">
            Frequency : <span class="cron-expression text-muted">${escapeHTML(task.schedule_text || '')}</span>
          </div>
        </div>
        <div class="col-auto text-end">
          <div class="h3 mb-1">${escapeHTML(String(task.uptime ?? ''))}%</div>
          <div class="text-muted small">Uptime</div>
          <div class="last-execution mt-2">
            Last: ${escapeHTML(lastRunStr)}<br>
            <strong>${escapeHTML(task.execution_time || '')}</strong>
          </div>
        </div>
      </div>

      <div class="task-timeline" data-schedule-id="${task.id}">
        ${timeline}${padding}
      </div>

      <div class="d-flex justify-content-between align-items-center mt-2">
        <div class="related-activity">
          <button class="btn btn-sm btn-outline-secondary mb-2" type="button"
                  data-bs-toggle="collapse"
                  data-bs-target="#activityCollapse-${task.id}"
                  aria-expanded="false"
                  aria-controls="activityCollapse-${task.id}"
                  id="activityToggleBtn-${task.id}">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none">
              <path d="M6 9l6 6 6-6"/>
            </svg>
            Show Activity
          </button>
          <div class="collapse" id="activityCollapse-${task.id}">
            <div class="activity-content">
              <div class="timeline">
                ${related}
              </div>
            </div>
          </div>
        </div>
        <span class="text-muted small">Last ${(task.runs || []).length} runs</span>
        <div class="btn-list">
          ${task.last_task_id ? `<button class="btn btn-sm btn-outline-secondary" onclick="runTaskNow('${escapeAttr(task.last_task_id)}')">Run Now</button>` : ''}
          ${task.last_task_id ? `<button class="btn btn-sm btn-outline-primary" onclick="viewTaskLogs('${escapeAttr(task.last_task_id)}')">Last Logs</button>` : ''}
        </div>
      </div>
    </div>
  `;
    }

    function attachTimelineHandlers(cardEl, runs, taskId) {
        const timeline = cardEl.querySelector('.task-timeline');
        if (!timeline) return;
        timeline.addEventListener('click', (e) => {
            const item = e.target.closest('.run-item');
            if (!item) return;
            const idx = parseInt(item.getAttribute('data-run-index'));
            if (isNaN(idx) || !runs || !runs[idx]) return;
            const r = runs[idx];
            const body = document.getElementById('runDetailBody');
            body.innerHTML = `
                <div><strong>Status:</strong> ${r.type}</div>
                <div><strong>When:</strong> ${new Date(r.timestamp).toLocaleString()}</div>
                <div class="mt-2">${r.message}</div>
                <div class="mt-2"><a href="{{ widget.url_task_details }}" target="_blank">Open full details</a></div>
            `.replace("TASK_ID_REPLACE", r.task_id);
            const modalEl = document.getElementById('runDetailModal');
            // Bootstrap/Tabler modal
            if (window.bootstrap && bootstrap.Modal) {
                const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
                modal.show();
            } else {
                modalEl.style.display = 'block';
            }
        });

        // Handle activity toggle for this specific task
        const activityCollapse = cardEl.querySelector(`#activityCollapse-${taskId}`);
        const activityToggleBtn = cardEl.querySelector(`#activityToggleBtn-${taskId}`);

        if (activityCollapse && activityToggleBtn) {
            activityCollapse.addEventListener('show.bs.collapse', function () {
                activityToggleBtn.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none">
                        <path d="M18 15l-6-6-6 6"/>
                    </svg>
                    Hide Activity
                `;
            });

            activityCollapse.addEventListener('hide.bs.collapse', function () {
                activityToggleBtn.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none">
                        <path d="M6 9l6 6 6-6"/>
                    </svg>
                    Show Activity
                `;
            });
        }
    }

    function viewTaskLogs(taskId) {
        const url = "{{ widget.url_task_details }}".replace("TASK_ID_REPLACE", taskId);

        // You can implement this to redirect to a logs page or open a modal
        window.location.href = url;
    }

    function runTaskNow(taskId) {
        if (confirm('Run this task immediately?')) {
            const url = "{{ widget.url_retry_task }}".replace("TASK_ID_REPLACE", taskId);
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(response => response.json())
                .then(data => {
                    alert('Task execution initiated. Check the activity timeline for updates.');
                    // Optionally refresh the page after a delay
                    setTimeout(() => location.reload(), 2000);
                })
                .catch(error => {
                    alert('Error running task: ' + error.message);
                });
        }
    }

    function buildDetailedTaskRow(task) {
        // Helper functions for escaping
        const escMap = {'&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'};
        const escapeHTML = (s) => (s == null ? '' : String(s).replace(/[&<>"']/g, ch => escMap[ch]));
        const escapeAttr = (s) => (s == null ? '' : String(s).replace(/[&<>"']/g, ch => escMap[ch]));

        // Format dates
        const lastAttemptStr = task.last_attempt || task.last_run ? 
            new Date(task.last_attempt || task.last_run).toLocaleDateString('en-US', {
                month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'
            }) : 'Never';
        
        const nextRunStr = task.next_run ? 
            new Date(task.next_run).toLocaleDateString('en-US', {
                month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'
            }) : '—';

        const statusLabel = task.status ? task.status.charAt(0).toUpperCase() + task.status.slice(1) : '';

        return `
            <tr data-task-status="${escapeAttr(task.status || '')}">
                <td>
                    <div class="d-flex align-items-center">
                        <span class="status-indicator ${escapeAttr(task.status_indicator_class || '')}"></span>
                        <div>
                            <strong>${escapeHTML(task.name)}</strong>
                            <div class="text-muted small">${escapeHTML(task.description || '')}</div>
                        </div>
                    </div>
                </td>
                <td>
                    <span class="badge bg-${escapeAttr(task.card_badge_color || 'secondary')}">${escapeHTML(statusLabel)}</span>
                </td>
                <td>
                    <div class="text-muted small">${escapeHTML(task.schedule_text || '')}</div>
                </td>
                <td>
                    <div class="h4 mb-0">${escapeHTML(String(task.uptime || '0'))}%</div>
                </td>
                <td>
                    <div>${escapeHTML(lastAttemptStr)}</div>
                    <div class="text-muted small">${escapeHTML(task.execution_time || '')}</div>
                </td>
                <td>
                    ${nextRunStr === '—' ? '<span class="text-muted">—</span>' : escapeHTML(nextRunStr)}
                </td>
                <td>
                    <div class="btn-list">
                        <button class="btn btn-sm btn-outline-primary" onclick="viewTaskLogs('${escapeAttr(task.last_task_id || task.id)}')">Last Logs</button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="runTaskNow('${escapeAttr(task.last_task_id || task.id)}')">Run</button>
                    </div>
                </td>
            </tr>
        `;
    }

    function updateOverallStatus(tasks) {
        // Calculate overall status based on task statuses
        const totalTasks = tasks.length;
        if (totalTasks === 0) return;

        const statusCounts = {
            operational: 0,
            issues: 0,
            degraded: 0,
            maintenance: 0
        };

        tasks.forEach(task => {
            if (task.status === 'operational') statusCounts.operational++;
            else if (task.status === 'issues') statusCounts.issues++;
            else if (task.status === 'degraded') statusCounts.degraded++;
            else if (task.status === 'maintenance') statusCounts.maintenance++;
        });

        // Determine overall status class based on task statuses
        let overallStatusClass = 'operational';
        let overallTitle = 'All Systems Operational';
        let overallDescription = 'All scheduled tasks are running normally.';

        if (statusCounts.issues > 0) {
            overallStatusClass = 'issues';
            overallTitle = 'System Issues Detected';
            overallDescription = `${statusCounts.issues} task(s) experiencing issues.`;
        } else if (statusCounts.degraded > 0) {
            overallStatusClass = 'degraded';
            overallTitle = 'Degraded Performance';
            overallDescription = `${statusCounts.degraded} task(s) running with degraded performance.`;
        } else if (statusCounts.maintenance > 0 && statusCounts.operational === 0) {
            overallStatusClass = 'maintenance';
            overallTitle = 'Under Maintenance';
            overallDescription = `${statusCounts.maintenance} task(s) under maintenance.`;
        }

        // Calculate overall uptime as average of all task uptimes
        let totalUptime = 0;
        let uptimeTaskCount = 0;
        tasks.forEach(task => {
            if (task.uptime !== undefined && task.uptime !== null) {
                // Parse uptime if it's a string with % sign
                const uptimeValue = typeof task.uptime === 'string' ?
                    parseFloat(task.uptime.replace('%', '')) :
                    parseFloat(task.uptime);
                if (!isNaN(uptimeValue)) {
                    totalUptime += uptimeValue;
                    uptimeTaskCount++;
                }
            }
        });
        const overallUptime = uptimeTaskCount > 0 ? (totalUptime / uptimeTaskCount).toFixed(1) : '0.0';

        // Update the overall status section
        const overallStatusEl = document.getElementById('overall-status');
        const statusTitle = document.getElementById('status-title');
        const statusDescription = document.getElementById('status-description');
        const overallUptimeEl = document.getElementById('overall-uptime');

        // Remove existing status classes
        overallStatusEl.classList.remove('operational', 'issues', 'degraded', 'maintenance');
        // Add new status class
        overallStatusEl.classList.add(overallStatusClass);
        statusTitle.textContent = overallTitle;
        statusDescription.textContent = overallDescription;
        overallUptimeEl.textContent = overallUptime + '%';

        // Update status indicator in header
        const headerStatusIndicator = document.querySelector('.page-header .status-indicator');
        if (headerStatusIndicator) {
            headerStatusIndicator.classList.remove('status-up', 'status-down', 'status-warning', 'status-maintenance');
            if (overallStatusClass === 'issues') {
                headerStatusIndicator.classList.add('status-down');
            } else if (overallStatusClass === 'degraded') {
                headerStatusIndicator.classList.add('status-warning');
            } else if (overallStatusClass === 'maintenance') {
                headerStatusIndicator.classList.add('status-maintenance');
            } else {
                headerStatusIndicator.classList.add('status-up');
            }
        }
    }

    function filterTable(statusFilter) {
        const tableRows = document.querySelectorAll('#detailed-tasks-table tr[data-task-status]');
        tableRows.forEach(row => {
            const taskStatus = row.getAttribute('data-task-status');
            if (statusFilter === 'all' || taskStatus === statusFilter) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        const tasks = [];
        const cards = document.querySelectorAll('#task-status-container [data-schedule-id]');
        const tableRows = document.querySelectorAll('#detailed-tasks-table tr[data-schedule-id]');
        let completedRequests = 0;
        const totalElements = cards.length;

        // For each placeholder, fetch and render details
        cards.forEach((card, index) => {
            const schedId = card.getAttribute('data-schedule-id');
            const tableRow = tableRows[index]; // Corresponding table row
            const url = detailUrlTemplate.replace('SCHED_ID_REPLACE', schedId);
            
            fetch(url)
                .then(r => r.json())
                .then(task => {
                    // Update card
                    card.innerHTML = buildTaskCardHTML(task);
                    
                    // Add status class to card
                    card.classList.remove('status-operational', 'status-issues', 'status-degraded', 'status-maintenance');
                    if (task.status) {
                        card.classList.add(`status-${task.status}`);
                    }
                    
                    attachTimelineHandlers(card, task.runs || [], task.id);
                    
                    // Update table row
                    if (tableRow) {
                        tableRow.outerHTML = buildDetailedTaskRow(task);
                    }
                    
                    tasks.push(task);
                    completedRequests++;

                    // Update overall status when all tasks are loaded
                    if (completedRequests === totalElements) {
                        updateOverallStatus(tasks);
                        setupFilterHandlers();
                    }
                })
                .catch(err => {
                    // Handle card error
                    if (card.querySelector('.card-body')) {
                        card.querySelector('.card-body').innerHTML = `<div class="text-danger">Failed to load task data: ${err}</div>`;
                    }
                    
                    // Handle table row error
                    if (tableRow) {
                        tableRow.innerHTML = `<td colspan="7"><div class="text-danger">Failed to load task data: ${err}</div></td>`;
                    }
                    
                    completedRequests++;

                    // Still check if we're done, even with errors
                    if (completedRequests === totalElements) {
                        updateOverallStatus(tasks);
                        setupFilterHandlers();
                    }
                });
        });

    });

    function setupFilterHandlers() {
        // Replace server-side filter links with client-side filtering
        // Only target dropdown items within the task filter dropdown, not all dropdowns on the page
        const filterDropdown = document.querySelector('.card-actions .dropdown-menu');
        if (filterDropdown) {
            const filterLinks = filterDropdown.querySelectorAll('.dropdown-item');
            filterLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const href = link.getAttribute('href');
                    const urlParams = new URLSearchParams(href.split('?')[1] || '');
                    const taskName = urlParams.get('task_name') || 'all';
                    filterTable(taskName);
                });
            });
        }
    }
</script>
