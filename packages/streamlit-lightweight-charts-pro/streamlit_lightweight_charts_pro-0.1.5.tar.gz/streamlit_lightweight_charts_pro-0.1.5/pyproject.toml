[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["setup"]

[project]
name = "streamlit_lightweight_charts_pro"
version = "0.1.5"
description = "Enhanced Streamlit wrapper for TradingView's lightweight-charts with ultra-simplified API and performance optimizations"
authors = [{ name = "Nand Kapadia", email = "nand.kapadia@gmail.com" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.7"
dependencies = [
    "streamlit>=1.0",
    "pandas>=1.0",
    "numpy>=1.19"
]
keywords = ["streamlit", "tradingview", "charts", "visualization", "trading", "financial"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Visualization"
]

[project.scripts]
streamlit-lightweight-charts-pro = "streamlit_lightweight_charts_pro.cli:main"

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "pylint>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "bandit[toml]>=1.7.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
    "mkdocs-minify-plugin>=0.7.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.0.0",
    "sniffio>=1.3.0",
    "jsonschema>=4.0.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["streamlit_lightweight_charts_pro*"]

# Black code formatter configuration
[tool.black]
line-length = 100
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | frontend
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["streamlit_lightweight_charts_pro"]
known_third_party = ["streamlit", "pandas", "numpy", "yfinance"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "W0621",  # redefined-outer-name
    "W0622",  # redefined-builtin
    "W0703",  # broad-except
    "W0612",  # unused-variable
    "W0613",  # unused-argument
]

# Pytest configuration
[tool.pytest.ini_options]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--maxfail=10",
    "--durations=10",
    "--cov=streamlit_lightweight_charts_pro",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "-n 4",
    "--dist=loadfile"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "e2e: End-to-end tests",
    "visual: Visual regression tests",
    "e2e_visual: End-to-end visual regression tests",
    "slow: Slow running tests",
    "fast: Fast running tests",
    "data: Data class tests",
    "series: Series class tests",
    "options: Options class tests",
    "frontend: Frontend integration tests",
    "type_definitions: Type definitions tests",
    "utils: Utils module tests",
    "component: Component module tests",
    "logging_tests: Logging module tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:pandas.*",
    "ignore::FutureWarning:numpy.*"
]
minversion = "6.0"

[tool.pylint.format]
max-line-length = 100
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db"]

[tool.pylint.design]
max-args = 10
max-attributes = 10
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50

[tool.pylint.similarities]
min-similarity-lines = 4
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db"]

[tool.pylint.master]
persistent = "yes"
load-plugins = []

[tool.pylint.reports]
output-format = "text"
reports = "no"
score = "yes"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "frontend",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.7+
target-version = "py37"

# Enable unsafe fixes by default (like Black does)
unsafe-fixes = true

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    "E4",   # pycodestyle errors
    "E7",   # pycodestyle errors
    "E9",   # pycodestyle errors
    "E501", # line too long (includes comments)
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "Q",    # flake8-quotes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "S",    # flake8-bandit
    "T20",  # flake8-print
    "RET",  # flake8-return
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C90",  # mccabe
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # numpy
    "AIR",  # airflow
    "PERF", # perflint
    "FURB", # refurb
    "RUF",  # Ruff-specific rules
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore use of random (not cryptographic) - fine for test data generation
    "S311",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow magic values
    "PLR2004",
    # Ignore long lines (handled by formatter)
    "W505",
    # Allow print statements (useful for debugging)
    "T201",
    # Allow relative imports
    "TID252",
    # Allow non-ASCII characters in strings
    "RUF001", "RUF002", "RUF003",
    # Allow commented-out code
    "ERA001",
    # Allow unused imports in __init__.py
    "F401",
    # Allow unused variables that start with _
    "F841",
    # Allow long docstrings
    "D213", "D214",
    # Allow missing docstrings
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    # Allow missing docstrings but enforce Google format
    "D203", "D211", "D212", "D213", "D214", "D215", "D300", "D301", "D404", "D405", "D406", "D407", "D408", "D409", "D410", "D411", "D412", "D413", "D414", "D415", "D416", "D417",
    # Temporarily ignore remaining issues for commit
    "E501",  # Line too long
    "TRY003",  # Long exception messages
    "S603",  # Subprocess calls
    "PLC0415",  # Import outside top-level
    "A003",  # Builtin shadowing
    # Disable COM812 - conflicts with formatter
    "COM812",
]

[tool.ruff.lint.pydocstyle]
# Enforce Google docstring format
convention = "google"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*.py" = [
    "S101",  # Use of `assert` detected
    "S106",  # Possible hardcoded password
    "PLR2004",  # Magic value used in comparison
    "TID252",  # Relative imports are banned
    "D",  # Disable all docstring rules for tests
]

# Allow magic values in configuration files
"**/settings.py" = ["PLR2004"]
"**/conf.py" = ["PLR2004"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = 100

# Enable more aggressive formatting for strings and comments
# Note: Ruff's formatter is conservative about wrapping text content

# Bandit security linter configuration
[tool.bandit]
# Note: cli.py is excluded via command-line flag in CI workflow
# It contains safe subprocess calls for build/dev tools
exclude_dirs = [
    "tests",
    "frontend",
    "docs",
    "build",
    "dist",
]
