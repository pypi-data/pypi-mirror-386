name: Build SHiP-framework

on:
  push:
    tags:
      - 'v*'
      - 't*'

jobs:
  # Create sdist file
  make-sdist:
    name: Make source distribution
    runs-on: ubuntu-latest
    steps:
      - name: "[Checkout] Checkout repository"
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: "[Cache] Cache sdist build"
        id: cache-sdist
        uses: actions/cache@v4
        with:
          path: dist/
          key: sdist-${{ hashFiles('**/*.hpp', '**/*.cpp') }}
          restore-keys: |
            sdist-${{ hashFiles('**/*.hpp', '**/*.cpp') }}

      # Initialize environment
      - name: "[Init] Set up Python"
        if: steps.cache-sdist.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: "[Init] Install Python dependencies and init conan"
        if: steps.cache-sdist.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install numpy scikit-learn scipy pybind11 conan build
          conan profile detect
          conan remote update conancenter --url="https://center2.conan.io"

      - name: "[Init] Install C++ build tools"
        if: steps.cache-sdist.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ make ccache ninja-build

      # Build SDist
      - name: "[Build] Build SDist"
        if: steps.cache-sdist.outputs.cache-hit != 'true'
        run: |
          python3 -m build --sdist

      # Upload SDist
      - name: "[Upload] Upload SDist"
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  # Build wheels for all platforms
  build-wheels:
    name: "[${{ matrix.os }}] Build wheel"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] #, windows-latest, macos-latest]

    steps:
      - name: "[Checkout] Checkout repository"
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Cache wheel build outputs
      - name: "[Cache] Cache wheel build outputs"
        id: cache-wheel
        uses: actions/cache@v4
        with:
          path: wheelhouse/
          key: ${{ runner.os }}-wheels-${{ hashFiles('**/*.hpp', '**/*.cpp') }}
          restore-keys: |
            ${{ runner.os }}-wheels-${{ hashFiles('**/*.hpp', '**/*.cpp') }}

      # Install libomp on macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install libomp

      # Initialize environment
      - name: "[Init] Set up Python"
        if: steps.cache-wheel.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: "[Init] Install Python dependencies and init conan"
        if: steps.cache-wheel.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install conan cibuildwheel
          conan profile detect
          conan remote update conancenter --url="https://center2.conan.io"

      # Build wheels
      - name: "[Build] Build wheels"
        if: steps.cache-wheel.outputs.cache-hit != 'true'
        env:
          CMAKE_VERBOSE_MAKEFILE: ON
          CIBW_BUILD_VERBOSITY: 3
          PIP_PROGRESS_BAR: off
          CIBW_SKIP: "pp* *-musllinux_*"
        run: |
          cibuildwheel --output-dir wheelhouse

      # Upload wheels
      - name: "[Upload] Upload built wheels"
        uses: actions/upload-artifact@v4
        with:
          name: built-wheels-${{ matrix.os }}
          path: wheelhouse/

  # Test wheels on platforms
  test-wheels:
    name: "[${{ matrix.os }}] Test wheel"
    needs: build-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] #, windows-latest, macos-latest]

    steps:
      # Checkout the repository
      - name: "[Checkout] Checkout repository"
        uses: actions/checkout@v4

      - name: "[Download] Download built wheels"
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-${{ matrix.os }}
          path: dist/

      # Initialize environment
      - name: "[Init] Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: "[Install] Install the wheel for the current platform"
        shell: bash
        working-directory: ./.github/
        run: |
          python -m pip install --upgrade pip
          pip install numpy scikit-learn scipy
          chmod +x ./install_compatible_wheel.sh
          bash ./install_compatible_wheel.sh

      # Test SHiP framework
      - name: "[Test] Run tests"
        shell: bash
        working-directory: ./experiments/
        run: |
          python -u ./test.py > >(tee test_output.log) 2> >(tee test_error.log >&2)

      # Upload logs
      - name: "[Upload] Upload test logs"
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.os }}
          path: |
            experiments/test_output.log
            experiments/test_error.log

  publish-to-testpypi:
    name: "Publish SHiP framework to TestPyPI"
    if: startsWith(github.ref_name, 't')
    needs:
      - make-sdist
      - build-wheels
      - test-wheels
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/SHiP-framework

    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: "[TestPyPI] Download sdist"
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist/

      - name: "[TestPyPI] Download all built ubuntu-latest wheels"
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-ubuntu-latest
          path: dist/

      - name: "[TestPyPI] Download all built windows-latest wheels"
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-windows-latest
          path: dist/

      - name: "[TestPyPI] Download all built macos-latest wheels"
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-macos-latest
          path: dist/

      - name: "[TestPyPI] Publish to TestPyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  publish-to-pypi:
    name: "Publish SHiP framework to PyPI"
    if: startsWith(github.ref_name, 'v')
    needs:
      - make-sdist
      - build-wheels
      - test-wheels
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/SHiP-framework

    permissions:
      id-token: write # mandatory for trusted publishing

    steps:
      - name: "[PyPI] Download sdist"
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist/

      - name: "[PyPI] Download built ubuntu-latest wheels"
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-ubuntu-latest
          path: dist/

      - name: "[PyPI] Download built windows-latest wheels"
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-windows-latest
          path: dist/

      - name: "[PyPI] Download built macos-latest wheels"
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-macos-latest
          path: dist/

      - name: "[PyPI] Publish to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
