# Generated by Django 5.2.4 on 2025-07-28 11:10

import django.contrib.postgres.fields
import django.db.models.deletion
# import netbox.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


def create_default_setting(apps, schema_editor):
    """Insert default setting if none exists"""
    Setting = apps.get_model('netpicker', 'Setting')

    # Check if any settings exist
    if not Setting.objects.exists():
        Setting.objects.create(
            server_url='https://sandbox.netpicker.io',
            api_key='ey...',
            tenant='default',
            connection_status='not_configured'
        )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dcim', '0190_nested_modules'),
        ('extras', '0122_charfield_null_choices'),
    ]

    operations = [
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('id', models.CharField(primary_key=True, serialize=False)),
                ('commit', models.CharField()),
                ('upload_date', models.DateTimeField()),
                ('file_size', models.IntegerField()),
                ('initiator', models.CharField()),
                ('readout_error', models.TextField(null=True)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BackupHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('timestamp', models.DateTimeField()),
                ('diff', models.TextField()),
                ('deltas', models.TextField()),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BackupSearchHit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('custom_field_data',
                 models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('ipaddress', models.CharField()),
                ('device_id', models.IntegerField()),
                ('matches', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(), size=None)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('author', models.TextField()),
                ('platforms', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('is_simple', models.BooleanField()),
                ('commands', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('signature', models.Field()),
            ],
            options={
                'verbose_name': 'job',
                'verbose_name_plural': 'jobs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('id', models.CharField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('job_name', models.TextField()),
                ('ipaddress', models.TextField()),
                ('variables', models.TextField()),
                ('status', models.TextField()),
                ('created', models.DateTimeField()),
                ('exec_at', models.DateTimeField()),
                ('exec_ns', models.BigIntegerField()),
                ('initiator', models.TextField()),
                ('return_value', models.TextField()),
                ('log', models.TextField()),
            ],
            options={
                'verbose_name': 'log',
                'verbose_name_plural': 'logs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NetpickerDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('ipaddress', models.CharField()),
                ('tenant', models.CharField()),
                ('platform', models.CharField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('server_url', models.CharField()),
                ('api_key', models.CharField(default='ey...')),
                ('tenant', models.CharField(default='default', max_length=250)),
                ('last_synced', models.DateTimeField(auto_now=True, null=True)),
                ('connection_status', models.CharField(default='', editable=False, max_length=50, null=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'setting',
                'verbose_name_plural': 'settings',
            },
            # bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.RunPython(
            create_default_setting,
        ),
        migrations.CreateModel(
            name='MappedDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('ipaddress', models.CharField()),
                ('tenant', models.CharField()),
                ('platform', models.CharField()),
                ('netbox', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='netpickers', to='dcim.device')),
            ],
            options={
                'unique_together': {('ipaddress', 'tenant')},
            },
        ),
    ]
