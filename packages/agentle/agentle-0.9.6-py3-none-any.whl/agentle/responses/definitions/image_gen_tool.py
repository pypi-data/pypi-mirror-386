# Auto-generated from responses_api.py
# Model: ImageGenTool

# generated by datamodel-codegen:
#   filename:  filtered_openapi.yaml
#   timestamp: 2025-10-18T15:02:20+00:00


from typing import Annotated, Literal, Optional

from pydantic import BaseModel, Field


# Model dependencies
from .background import Background
from .input_fidelity import InputFidelity
from .input_image_mask import InputImageMask
from .model import Model
from .moderation import Moderation
from .output_format import OutputFormat
from .quality import Quality
from .size import Size


class ImageGenTool(BaseModel):
    type: Literal["image_gen"] = Field(
        ...,
        description="The type of the image generation tool. Always `image_generation`.\n",
    )
    model: Optional[Model] = Field(
        default=Model.gpt_image_1,
        description="The image generation model to use. Default: `gpt-image-1`.\n",
    )
    quality: Optional[Quality] = Field(
        default=Quality.auto,
        description="The quality of the generated image. One of `low`, `medium`, `high`,\nor `auto`. Default: `auto`.\n",
    )
    size: Optional[Size] = Field(
        default=Size.auto,
        description="The size of the generated image. One of `1024x1024`, `1024x1536`,\n`1536x1024`, or `auto`. Default: `auto`.\n",
    )
    output_format: Optional[OutputFormat] = Field(
        default=OutputFormat.png,
        description="The output format of the generated image. One of `png`, `webp`, or\n`jpeg`. Default: `png`.\n",
    )
    output_compression: Optional[Annotated[int, Field(ge=0, le=100)]] = Field(
        default=100,
        description="Compression level for the output image. Default: 100.\n",
    )
    moderation: Optional[Moderation] = Field(
        default=Moderation.auto,
        description="Moderation level for the generated image. Default: `auto`.\n",
    )
    background: Optional[Background] = Field(
        default=Background.auto,
        description="Background type for the generated image. One of `transparent`,\n`opaque`, or `auto`. Default: `auto`.\n",
    )
    input_fidelity: Optional[InputFidelity] = None
    input_image_mask: Optional[InputImageMask] = Field(
        None,
        description="Optional mask for inpainting. Contains `image_url`\n(string, optional) and `file_id` (string, optional).\n",
    )
    partial_images: Optional[Annotated[int, Field(ge=0, le=3)]] = Field(
        default=0,
        description="Number of partial images to generate in streaming mode, from 0 (default value) to 3.\n",
    )
