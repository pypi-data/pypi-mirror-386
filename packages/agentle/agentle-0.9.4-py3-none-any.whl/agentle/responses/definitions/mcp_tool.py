# Auto-generated from responses_api.py
# Model: MCPTool

# generated by datamodel-codegen:
#   filename:  filtered_openapi.yaml
#   timestamp: 2025-10-18T15:02:20+00:00


from typing import Dict, List, Literal, Optional, Union

from pydantic import BaseModel, Field


# Model dependencies
from .connector_id import ConnectorId
from .mcp_tool_filter import MCPToolFilter
from .require_approval import RequireApproval
from .require_approval1 import RequireApproval1


class MCPTool(BaseModel):
    type: Literal["mcp"] = Field(
        ..., description="The type of the MCP tool. Always `mcp`."
    )
    server_label: str = Field(
        ...,
        description="A label for this MCP server, used to identify it in tool calls.\n",
    )
    server_url: Optional[str] = Field(
        None,
        description="The URL for the MCP server. One of `server_url` or `connector_id` must be\nprovided.\n",
    )
    connector_id: Optional[ConnectorId] = Field(
        None,
        description="Identifier for service connectors, like those available in ChatGPT. One of\n`server_url` or `connector_id` must be provided. Learn more about service\nconnectors [here](https://platform.openai.com/docs/guides/tools-remote-mcp#connectors).\n\nCurrently supported `connector_id` values are:\n\n- Dropbox: `connector_dropbox`\n- Gmail: `connector_gmail`\n- Google Calendar: `connector_googlecalendar`\n- Google Drive: `connector_googledrive`\n- Microsoft Teams: `connector_microsoftteams`\n- Outlook Calendar: `connector_outlookcalendar`\n- Outlook Email: `connector_outlookemail`\n- SharePoint: `connector_sharepoint`\n",
    )
    authorization: Optional[str] = Field(
        None,
        description="An OAuth access token that can be used with a remote MCP server, either\nwith a custom MCP server URL or a service connector. Your application\nmust handle the OAuth authorization flow and provide the token here.\n",
    )
    server_description: Optional[str] = Field(
        None,
        description="Optional description of the MCP server, used to provide more context.\n",
    )
    headers: Optional[Dict[str, str]] = None
    allowed_tools: Optional[Union[List[str], MCPToolFilter]] = None
    require_approval: Optional[Union[RequireApproval, RequireApproval1]] = None
