# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import struct_pb2 as google_dot_protobuf_dot_struct__pb2
from spaceone.api.notification.v1 import user_channel_pb2 as spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2


class UserChannelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/create',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.CreateUserChannelRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
                )
        self.update = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/update',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UpdateUserChannelRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
                )
        self.set_schedule = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/set_schedule',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UpdateUserChannelScheduleRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
                )
        self.set_subscription = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/set_subscription',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UpdateUserChannelSubscriptionRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
                )
        self.enable = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/enable',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
                )
        self.disable = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/disable',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
                )
        self.delete = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/delete',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.get = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/get',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.GetUserChannelRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
                )
        self.list = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/list',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelQuery.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelsInfo.FromString,
                )
        self.stat = channel.unary_unary(
                '/spaceone.api.notification.v1.UserChannel/stat',
                request_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelStatQuery.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_struct__pb2.Struct.FromString,
                )


class UserChannelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """
        desc: Creates a new UserChannel. A UserChannel is a channel that delivers a Notification to users when the Notification is created. When creating a UserChannel, one Protocol must be selected, and an Notification is dispatched via the selected Protocol.
        request_example: >-
        {
        "protocol_id": "protocol-123456789012",
        "name": "Email",
        "data": {
        "email": "user1@email.com"
        },
        "user_id": "user1@email.com",
        "domain_id": "domain-123456789012"
        }
        response_example: >-
        {
        "user_channel_id": "user-ch-123456789012",
        "name": "Email",
        "state": "ENABLED",
        "data": {
        "email": "user1@email.com"
        },
        "protocol_id": "protocol-123456789012",
        "user_id": "user1@email.com",
        "domain_id": "domain-123456789012",
        "created_at": "2022-01-01T08:28:49.108Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """
        desc: Updates a specific UserChannel. A UserChannel that has already been configured cannot be changed. Instead, the data required for dispatching Notifications to a UserChannel can be updated.
        request_example: >-
        {
        "user_channel_id": "user-ch-123456789012",
        "name": "Email2",
        "data": {
        "email": "user1@gmail.com"
        },
        "tags": {
        "type": "test"
        }
        }
        response_example: >-
        {
        "user_channel_id": "user-ch-123456789012",
        "name": "Email2",
        "state": "ENABLED",
        "data": {
        "email": "user1@gmail.com"
        },
        "protocol_id": "protocol-123456789012",
        "user_id": "user1@email.com",
        "tags": {
        "type": "test"
        },
        "domain_id": "domain-123456789012",
        "created_at": "2022-01-01T08:28:49.108Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_schedule(self, request, context):
        """
        desc: Sets a schedule for a UserChannel. A schedule defines the time to receive a Notification. When a Notification is created, you can set the day of the week and time you want to receive it. When you set the day of the week, you can receive a notification only on the day of the week you set. If you also set the start time and end time with the day of the week, you can receive a Notification only at the scheduled time on the day of the week you set. If there is no schedule set in a UserChannel, Notifications will be dispatched at all times via the UserChannel.
        request_example: >-
        {
        "user_channel_id": "user-ch-28097e8d5d59",
        "is_scheduled": true,
        "schedule": {
        "day_of_week": [
        "MON",
        "TUE",
        "WED",
        "THU",
        "FRI"
        ],
        "end_hour": 9
        },
        "domain_id": "domain-58010aa2e451"
        }
        response_example: >-
        {
        "user_channel_id": "user-ch-28097e8d5d59",
        "name": "my-email",
        "state": "ENABLED",
        "data": {
        "email": "seolmin@mz.co.kr"
        },
        "is_scheduled": true,
        "schedule": {
        "day_of_week": [
        "MON",
        "TUE",
        "WED",
        "THU",
        "FRI"
        ],
        "end_hour": 9
        },
        "protocol_id": "protocol-e000a677ebdb",
        "user_id": "user1@cloudforet.io",
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-06-03T08:28:49.108Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_subscription(self, request, context):
        """
        desc: Sets a subscription for a UserChannel. A subscription is a topic for channels to subscribe to and get notified about. If a UserChannel has subscriptions, a Notification is dispatched only if the topic of the Notification is the same as the one set in the subscriptions. If there is no subscription in a UserChannel, all Notifications will be dispatched.
        request_example: >-
        {
        "user_channel_id": "user-ch-28097e8d5d59",
        "is_subscribe": true,
        "subscriptions": [
        "monitoring.Alert"
        ],
        "domain_id": "domain-58010aa2e451"
        }
        response_example: >-
        {
        "user_channel_id": "user-ch-28097e8d5d59",
        "name": "my-email",
        "state": "ENABLED",
        "data": {
        "email": "user1@cloudforet.io"
        },
        "is_subscribe": true,
        "subscriptions": [
        "monitoring.Alert"
        ],
        "is_scheduled": true,
        "schedule": {
        "day_of_week": [
        "MON",
        "TUE",
        "WED",
        "THU",
        "FRI"
        ],
        "end_hour": 9
        },
        "protocol_id": "protocol-e000a677ebdb",
        "user_id": "user1@cloudforet.io",
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-06-03T08:28:49.108Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enable(self, request, context):
        """
        desc: Enables a specific UserChannel. If a UserChannel is enabled, the UserChannel can be used and the Notification can be dispatched. Even if a UserChannel is enabled, if the Protocol used in the UserChannel is disabled, the Notification is not dispatched.
        request_example: >-
        {
        "user_channel_id": "user-ch-123456789012"
        }
        response_example: >-
        {
        "user_channel_id": "user-ch-123456789012",
        "name": "Email",
        "state": "ENABLED",
        "data": {
        "email": "user1@email.com"
        },
        "protocol_id": "protocol-123456789012",
        "user_id": "user1@email.com",
        "domain_id": "domain-123456789012",
        "created_at": "2022-01-01T08:28:49.108Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disable(self, request, context):
        """
        desc: Disables a specific UserChannel. If a UserChannel is disabled, the Notification is not dispatched, even if it is created.
        request_example: >-
        {
        "user_channel_id": "user-ch-123456789012"
        }
        response_example: >-
        {
        "user_channel_id": "user-ch-123456789012",
        "name": "Email",
        "state": "DISABLED",
        "data": {
        "email": "user1@email.com"
        },
        "protocol_id": "protocol-123456789012",
        "user_id": "user1@email.com",
        "domain_id": "domain-123456789012",
        "created_at": "2022-01-01T08:28:49.108Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """
        desc: Deletes a specific UserChannel. You must specify the `user_channel_id` of the UserChannel to delete.
        request_example: >-
        {
        "user_channel_id": "user-ch-123456789012"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """
        desc: Gets a specific UserChannel. Prints detailed information about the UserChannel, including the Protocol configured and the Notification settings.
        request_example: >-
        {
        "user_channel_id": "user-ch-123456789012"
        }
        response_example: >-
        {
        "user_channel_id": "user-ch-123456789012",
        "name": "Email",
        "state": "ENABLED",
        "data": {
        "email": "user1@email.com"
        },
        "protocol_id": "protocol-123456789012",
        "user_id": "user1@email.com",
        "domain_id": "domain-123456789012",
        "created_at": "2022-01-01T08:28:49.108Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
        """
        desc: Gets a list of all UserChannels. You can use a query to get a filtered list of UserChannels.
        request_example: >-
        {
        "query": {}
        }
        response_example: >-
        {
        "results": [
        {
        "user_channel_id": "user-ch-123456789012",
        "name": "Email",
        "state": "ENABLED",
        "data": {
        "email": "user1@email.com"
        },
        "protocol_id": "protocol-123456789012",
        "user_id": "user1@email.com",
        "domain_id": "domain-123456789012",
        "created_at": "2022-01-01T08:28:49.108Z"
        },
        {
        "user_channel_id": "user-ch-98765432109",
        "name": "Email",
        "state": "ENABLED",
        "data": {
        "email": "user2@email.com"
        },
        "is_scheduled": true,
        "schedule": {
        "day_of_week": [
        "MON",
        "TUE",
        "WED",
        "THU",
        "FRI"
        ],
        "start_hour": 3,
        "end_hour": 23
        },
        "protocol_id": "protocol-123456789012",
        "user_id": "user2@email.com",
        "domain_id": "domain-123456789012",
        "created_at": "2022-01-01T06:45:57.260Z"
        }
        ],
        "total_count": 2
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserChannelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.CreateUserChannelRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UpdateUserChannelRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.SerializeToString,
            ),
            'set_schedule': grpc.unary_unary_rpc_method_handler(
                    servicer.set_schedule,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UpdateUserChannelScheduleRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.SerializeToString,
            ),
            'set_subscription': grpc.unary_unary_rpc_method_handler(
                    servicer.set_subscription,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UpdateUserChannelSubscriptionRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.SerializeToString,
            ),
            'enable': grpc.unary_unary_rpc_method_handler(
                    servicer.enable,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.SerializeToString,
            ),
            'disable': grpc.unary_unary_rpc_method_handler(
                    servicer.disable,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.GetUserChannelRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.SerializeToString,
            ),
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelQuery.FromString,
                    response_serializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelsInfo.SerializeToString,
            ),
            'stat': grpc.unary_unary_rpc_method_handler(
                    servicer.stat,
                    request_deserializer=spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelStatQuery.FromString,
                    response_serializer=google_dot_protobuf_dot_struct__pb2.Struct.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spaceone.api.notification.v1.UserChannel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserChannel(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/create',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.CreateUserChannelRequest.SerializeToString,
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/update',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UpdateUserChannelRequest.SerializeToString,
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_schedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/set_schedule',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UpdateUserChannelScheduleRequest.SerializeToString,
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_subscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/set_subscription',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UpdateUserChannelSubscriptionRequest.SerializeToString,
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def enable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/enable',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelRequest.SerializeToString,
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/disable',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelRequest.SerializeToString,
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/delete',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/get',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.GetUserChannelRequest.SerializeToString,
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/list',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelQuery.SerializeToString,
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelsInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.notification.v1.UserChannel/stat',
            spaceone_dot_api_dot_notification_dot_v1_dot_user__channel__pb2.UserChannelStatQuery.SerializeToString,
            google_dot_protobuf_dot_struct__pb2.Struct.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
