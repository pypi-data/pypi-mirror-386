# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import struct_pb2 as google_dot_protobuf_dot_struct__pb2
from spaceone.api.cost_analysis.v1 import data_source_pb2 as spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2
from spaceone.api.cost_analysis.v1 import job_pb2 as spaceone_dot_api_dot_cost__analysis_dot_v1_dot_job__pb2


class DataSourceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/register',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.RegisterDataSourceRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
                )
        self.update = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/update',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.UpdateDataSourceRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
                )
        self.update_plugin = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/update_plugin',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.UpdateDataSourcePluginRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
                )
        self.verify_plugin = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/verify_plugin',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.enable = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/enable',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
                )
        self.disable = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/disable',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
                )
        self.deregister = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/deregister',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.sync = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/sync',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.SyncDataSourceRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_job__pb2.JobInfo.FromString,
                )
        self.get = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/get',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.GetDataSourceRequest.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
                )
        self.list = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/list',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceQuery.SerializeToString,
                response_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourcesInfo.FromString,
                )
        self.stat = channel.unary_unary(
                '/spaceone.api.cost_analysis.v1.DataSource/stat',
                request_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceStatQuery.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_struct__pb2.Struct.FromString,
                )


class DataSourceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """
        desc: Registers a DataSource with information of the plugin to use. Information of the plugin includes `version`, `provider`, and `upgrade_mode`.
        request_example: >-
        {
        "name": "AWS HyperBilling Data Source test",
        "data_source_type": "EXTERNAL",
        "plugin_info": {
        "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
        "version": "1.0.4",
        "options": {},
        "metadata": {
        "data_source_rules": [
        {
        "conditions_policy": "ALWAYS",
        "options": {
        "stop_processing": true
        },
        "actions": {
        "match_service_account": {
        "source": "account",
        "target": "data.account_id"
        }
        },
        "conditions": [],
        "tags": {},
        "name": "match_service_account"
        }
        ]
        },
        "secret_id": "secret-ca134639483",
        "upgrade_mode": "AUTO"
        },
        "tags": {"a": "b"}
        }
        response_example: >-
        {
        "data_source_id": "ds-085d1e872789",
        "name": "AWS HyperBilling Data Source test",
        "state": "ENABLED",
        "data_source_type": "EXTERNAL",
        "plugin_info": {
        "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
        "version": "1.0.4",
        "options": {},
        "metadata": {
        "data_source_rules": [
        {
        "options": {
        "stop_processing": true
        },
        "actions": {
        "match_service_account": {
        "source": "account",
        "target": "data.account_id"
        }
        },
        "domain_id": "domain-58010aa2e451",
        "conditions": [],
        "name": "match_service_account",
        "tags": {},
        "data_source_id": "ds-085d1e872789",
        "conditions_policy": "ALWAYS"
        }
        ]
        },
        "secret_id": "secret-ca134639483",
        "upgrade_mode": "AUTO"
        },
        "template": {},
        "tags": {
        "a": "b"
        },
        "cost_tag_keys": [
        "Name",
        "Environment",
        "Role",
        "Service"
        ],
        "cost_additional_info_keys": [
        "raw_usage_type"
        ],
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-07-19T10:58:36.080Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """
        desc: Updates a specific DataSource. You can make changes in DataSource settings, including `name` and `tags`.
        request_example: >-
        {
        "data_source_id": "ds-085d1e872789",
        "name": "AWS HyperBilling Data Source test2",
        "tags": {
        "type": "test"
        }
        }
        response_example: >-
        {
        "data_source_id": "ds-085d1e872789",
        "name": "AWS HyperBilling Data Source test2",
        "state": "ENABLED",
        "data_source_type": "EXTERNAL",
        "plugin_info": {
        "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
        "version": "1.0.4",
        "options": {},
        "metadata": {
        "data_source_rules": [
        {
        "tags": {},
        "name": "match_service_account",
        "conditions_policy": "ALWAYS",
        "actions": {
        "match_service_account": {
        "target": "data.account_id",
        "source": "account"
        }
        },
        "options": {
        "stop_processing": true
        },
        "conditions": []
        }
        ]
        },
        "secret_id": "secret-dca385e85a27",
        "upgrade_mode": "AUTO"
        },
        "template": {},
        "tags": {
        "type": "test"
        },
        "cost_tag_keys": [
        "Name",
        "Environment",
        "Role",
        "Service"
        ],
        "cost_additional_info_keys": [
        "raw_usage_type"
        ],
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-07-19T10:58:36.080Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_plugin(self, request, context):
        """
        desc: Updates the plugin of a specific DataSource. This method resets the plugin data in the DataSource to update the `metadata`.
        request_example: >-
        {
        "data_source_id": "ds-085d1e872789",
        "version": "1.0.4",
        "options": {},
        "upgrade_mode": "AUTO"
        }
        response_example: >-
        {
        "data_source_id": "ds-085d1e872789",
        "name": "AWS HyperBilling Data Source test2",
        "state": "DISABLED",
        "data_source_type": "EXTERNAL",
        "plugin_info": {
        "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
        "version": "1.0.4",
        "options": {},
        "metadata": {
        "data_source_rules": [
        {
        "tags": {},
        "actions": {
        "match_service_account": {
        "source": "account",
        "target": "data.account_id"
        }
        },
        "options": {
        "stop_processing": true
        },
        "conditions_policy": "ALWAYS",
        "name": "match_service_account",
        "conditions": []
        }
        ]
        },
        "secret_id": "secret-dca385e85a27",
        "upgrade_mode": "AUTO"
        },
        "template": {},
        "tags": {
        "type": "test"
        },
        "cost_tag_keys": [
        "Name",
        "Environment",
        "Role",
        "Service"
        ],
        "cost_additional_info_keys": [
        "raw_usage_type"
        ],
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-07-19T10:58:36.080Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def verify_plugin(self, request, context):
        """
        desc: Verifies the plugin of a specific DataSource. This method validates the plugin data, `version` and `endpoint`.
        request_example: >-
        {
        "data_source_id": "ds-085d1e872789"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enable(self, request, context):
        """
        desc: Enables a specific DataSource. By enabling a DataSource, you can communicate with an external cloud service via the plugin.
        request_example: >-
        {
        "data_source_id": "ds-085d1e872789"
        }
        response_example: >-
        {
        "data_source_id": "ds-085d1e872789",
        "name": "AWS HyperBilling Data Source test2",
        "state": "ENABLED",
        "data_source_type": "EXTERNAL",
        "plugin_info": {
        "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
        "version": "1.0.4",
        "options": {},
        "metadata": {
        "data_source_rules": [
        {
        "actions": {
        "match_service_account": {
        "target": "data.account_id",
        "source": "account"
        }
        },
        "conditions_policy": "ALWAYS",
        "conditions": [],
        "options": {
        "stop_processing": true
        },
        "name": "match_service_account",
        "tags": {}
        }
        ]
        },
        "secret_id": "secret-dca385e85a27",
        "upgrade_mode": "AUTO"
        },
        "template": {},
        "tags": {
        "type": "test"
        },
        "cost_tag_keys": [
        "Name",
        "Environment",
        "Role",
        "Service"
        ],
        "cost_additional_info_keys": [
        "raw_usage_type"
        ],
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-07-19T10:58:36.080Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disable(self, request, context):
        """
        desc: Disables a specific DataSource. By disabling a DataSource, you can block communication with an external cloud service via the plugin.
        request_example: >-
        {
        "data_source_id": "ds-085d1e872789"
        }
        response_example: >-
        {
        "data_source_id": "ds-085d1e872789",
        "name": "AWS HyperBilling Data Source test2",
        "state": "DISABLED",
        "data_source_type": "EXTERNAL",
        "plugin_info": {
        "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
        "version": "1.0.4",
        "options": {},
        "metadata": {
        "data_source_rules": [
        {
        "name": "match_service_account",
        "options": {
        "stop_processing": true
        },
        "conditions_policy": "ALWAYS",
        "conditions": [],
        "actions": {
        "match_service_account": {
        "source": "account",
        "target": "data.account_id"
        }
        },
        "tags": {}
        }
        ]
        },
        "secret_id": "secret-dca385e85a27",
        "upgrade_mode": "AUTO"
        },
        "template": {},
        "tags": {
        "type": "test"
        },
        "cost_tag_keys": [
        "Name",
        "Environment",
        "Role",
        "Service"
        ],
        "cost_additional_info_keys": [
        "raw_usage_type"
        ],
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-07-19T10:58:36.080Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deregister(self, request, context):
        """
        desc: Deregisters and deletes a specific DataSource. You must specify the `data_source_id` of the DataSource to deregister.
        request_example: >-
        {
        "data_source_id": "ds-085d1e872789"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sync(self, request, context):
        """
        desc: Manually runs a specific DataSource to collect the cost data. This method is to get up-to-date cost data.
        request_example: >-
        {
        "data_source_id": "ds-c96609f5afeb"
        }
        response_example: >-
        {
        "job_id": "job-ba2598167785",
        "status": "IN_PROGRESS",
        "options": {
        "no_preload_cache": false,
        "start": null
        },
        "total_tasks": 1,
        "remained_tasks": 1,
        "data_source_id": "ds-c96609f5afeb",
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-07-19T11:16:59.923Z",
        "updated_at": "2022-07-19T11:16:59.923Z",
        "changed": [
        {
        "start": "2022-07-01T00:00:00.000Z"
        }
        ]
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """
        desc: Gets a specific DataSource. Prints detailed information about the DataSource, including `name`, `state`, and `plugin_info`.
        request_example: >-
        {
        "data_source_id": "ds-fcba92ca73b1"
        }
        response_example: >-
        {
        "data_source_id": "ds-fcba92ca73b1",
        "name": "AWS HyperBilling Data Source",
        "state": "ENABLED",
        "data_source_type": "EXTERNAL",
        "plugin_info": {
        "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
        "version": "1.0.4",
        "options": {},
        "metadata": {
        "data_source_rules": [
        {
        "conditions_policy": "ALWAYS",
        "options": {
        "stop_processing": true
        },
        "tags": {},
        "conditions": [],
        "name": "match_service_account",
        "actions": {
        "match_service_account": {
        "source": "account",
        "target": "data.account_id"
        }
        }
        }
        ]
        },
        "secret_id": "secret-dca385e85a27",
        "upgrade_mode": "AUTO"
        },
        "template": {},
        "tags": {
        "a": "b"
        },
        "cost_tag_keys": [
        "Name",
        "Environment",
        "Role",
        "Service"
        ],
        "cost_additional_info_keys": [
        "raw_usage_type"
        ],
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-03-30T02:21:28.756Z",
        "last_synchronized_at": "2022-07-17T16:00:05.077Z"
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
        """
        desc: Gets a list of all DataSources. You can use a query to get a filtered list of DataSources.
        request_example: >-
        {
        "query": {}
        }
        response_example: >-
        {
        "results": [
        {
        "data_source_id": "ds-fcba92ca73b1",
        "name": "AWS HyperBilling Data Source",
        "state": "ENABLED",
        "data_source_type": "EXTERNAL",
        "plugin_info": {
        "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
        "version": "1.0.4",
        "options": {},
        "metadata": {
        "data_source_rules": [
        {
        "name": "match_service_account",
        "conditions": [],
        "actions": {
        "match_service_account": {
        "source": "account",
        "target": "data.account_id"
        }
        },
        "conditions_policy": "ALWAYS",
        "tags": {},
        "options": {
        "stop_processing": true
        }
        }
        ]
        },
        "secret_id": "secret-dca385e85a27",
        "upgrade_mode": "AUTO"
        },
        "template": {},
        "tags": {
        "a": "b"
        },
        "cost_tag_keys": [
        "Name",
        "Environment",
        "Role",
        "Service"
        ],
        "cost_additional_info_keys": [
        "raw_usage_type"
        ],
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-03-30T02:21:28.756Z",
        "last_synchronized_at": "2022-07-17T16:00:05.077Z"
        },
        {
        "data_source_id": "ds-c96609f5afeb",
        "name": "MZC HyperBilling Data Source",
        "state": "ENABLED",
        "data_source_type": "EXTERNAL",
        "plugin_info": {
        "plugin_id": "plugin-mzc-hyperbilling-cost-datasource",
        "version": "1.0.3",
        "options": {},
        "metadata": {
        "data_source_rules": [
        {
        "conditions": [],
        "options": {
        "stop_processing": true
        },
        "conditions_policy": "ALWAYS",
        "name": "match_service_account",
        "tags": {},
        "actions": {
        "match_service_account": {
        "source": "account",
        "target": "data.project_id"
        }
        }
        }
        ]
        },
        "secret_id": "secret-354d142229e5",
        "upgrade_mode": "AUTO"
        },
        "template": {},
        "tags": {},
        "cost_tag_keys": [],
        "cost_additional_info_keys": [],
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-04-13T05:34:54.223Z",
        "last_synchronized_at": "2022-07-17T16:00:08.254Z"
        }
        ],
        "total_count": 2
        }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataSourceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.RegisterDataSourceRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.UpdateDataSourceRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.SerializeToString,
            ),
            'update_plugin': grpc.unary_unary_rpc_method_handler(
                    servicer.update_plugin,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.UpdateDataSourcePluginRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.SerializeToString,
            ),
            'verify_plugin': grpc.unary_unary_rpc_method_handler(
                    servicer.verify_plugin,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'enable': grpc.unary_unary_rpc_method_handler(
                    servicer.enable,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.SerializeToString,
            ),
            'disable': grpc.unary_unary_rpc_method_handler(
                    servicer.disable,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.SerializeToString,
            ),
            'deregister': grpc.unary_unary_rpc_method_handler(
                    servicer.deregister,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'sync': grpc.unary_unary_rpc_method_handler(
                    servicer.sync,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.SyncDataSourceRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_job__pb2.JobInfo.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.GetDataSourceRequest.FromString,
                    response_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.SerializeToString,
            ),
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceQuery.FromString,
                    response_serializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourcesInfo.SerializeToString,
            ),
            'stat': grpc.unary_unary_rpc_method_handler(
                    servicer.stat,
                    request_deserializer=spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceStatQuery.FromString,
                    response_serializer=google_dot_protobuf_dot_struct__pb2.Struct.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spaceone.api.cost_analysis.v1.DataSource', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataSource(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/register',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.RegisterDataSourceRequest.SerializeToString,
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/update',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.UpdateDataSourceRequest.SerializeToString,
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_plugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/update_plugin',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.UpdateDataSourcePluginRequest.SerializeToString,
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def verify_plugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/verify_plugin',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def enable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/enable',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.SerializeToString,
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/disable',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.SerializeToString,
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/deregister',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/sync',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.SyncDataSourceRequest.SerializeToString,
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_job__pb2.JobInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/get',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.GetDataSourceRequest.SerializeToString,
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/list',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceQuery.SerializeToString,
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourcesInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spaceone.api.cost_analysis.v1.DataSource/stat',
            spaceone_dot_api_dot_cost__analysis_dot_v1_dot_data__source__pb2.DataSourceStatQuery.SerializeToString,
            google_dot_protobuf_dot_struct__pb2.Struct.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
