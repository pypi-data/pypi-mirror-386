[build-system]
requires = ["setuptools >= 61.0.0", "setuptools_scm >= 7.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lymph-model"
description = "Package for statistical modelling of lymphatic metastatic spread."
authors = [
    { name = "Roman Ludwig", email = "gygqdstu3@mozmail.com" },
    { name = "Yoel Pérez Haas", email = "yoel.perezhaas@usz.ch" },
    { name = "Noemi Bührer", email = "noemi.buehrer@usz.ch" },
]
readme = "README.rst"
requires-python = ">=3.10"
keywords = ["cancer", "metastasis", "lymphatic progression", "model"]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries",
]
dependencies = ["numpy", "pandas", "cachetools"]
dynamic = ["version"]

[project.optional-dependencies]
tests = [
    "pytest",
    "pytest-cov",
    "scipy",
    "emcee",
]
dev = [
    "pre-commit",
    "git-cliff",
]
docs = [
    "sphinx",
    "sphinx-book-theme",
    "sphinx-autodoc-typehints",
    "myst-nb",
    "ipython",
    "matplotlib",
    "scipy",
    "emcee",
]

[project.urls]
source = "https://github.com/lycosystem/lymph"
documentation = "https://lymph-model.readthedocs.io"

[tool.setuptools_scm]
write_to = "src/lymph/_version.py"
local_scheme = "no-local-version"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["ignore::pandas.errors.PerformanceWarning"]

[tool.coverage.paths]
source = [
    "src/",
    "**/site-packages/",
]

[tool.coverage.run]
relative_files = true


[tool.ruff.lint]
select = [
    "E",
    "F",
    "W",
    "B",
    "C",
    "R",
    "U",
    "D",
    "I",
    "S",
    "T",
    "A",
    "N",
    "COM",
    "FURB",
    "NPY",
    "UP",
]
ignore = ["B028"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D102",
    "S101",
    "RET503",
]


# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[tool.git-cliff.changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for c in commits %}
        - {% if c.breaking %}⚠ **BREAKING** {% endif -%}
        {% if c.scope %}(**{{ c.scope }}**) {% endif -%}
        {{ c.message | upper_first }}.
        {%- if c.footers %}{% for f in c.footers %}{% if not f.breaking %} {{ f.token }} [{{ f.value }}].{% endif %}{% endfor %}{% endif %}
        {%- if c.body %}\\
        {{ c.body | indent(prefix="  ", first=True) }}
        {% endif -%}
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^docs", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactor" },
    { message = "^style", group = "Styling" },
    { message = "^test", group = "Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore", group = "Miscellaneous Tasks" },
    { body = ".*security", group = "Security" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
