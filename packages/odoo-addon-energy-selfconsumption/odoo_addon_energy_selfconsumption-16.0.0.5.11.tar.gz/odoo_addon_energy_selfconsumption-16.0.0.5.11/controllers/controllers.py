import logging

from odoo import http
from odoo.exceptions import AccessError, UserError
from odoo.http import request

# Constants for report controller
CONTENT_TYPE_TEXT = "application/text; charset=utf-8"
CONTENT_DISPOSITION_HEADER = "Content-Disposition"
ATTACHMENT_FILENAME_TEMPLATE = "attachment; filename={filename}"

logger = logging.getLogger(__name__)


class ReportController(http.Controller):
    """
    Report Controller for Energy Self-consumption

    This controller handles report downloads for the energy self-consumption module,
    specifically for coefficient reports and other downloadable documents.

    Features:
    - Secure report download with authentication
    - Proper content type handling
    - Error handling and logging
    - File name sanitization
    """

    @http.route(
        "/energy_selfconsumption/download_report",
        type="http",
        auth="user",
        methods=["GET"],
    )
    def download_report(self, **kwargs):
        """
        Download coefficient report file

        This endpoint allows authenticated users to download coefficient reports
        generated by the system. The report ID must be provided as a parameter.

        Args:
            **kwargs: Request parameters, expecting 'id' parameter

        Returns:
            http.Response: File download response with proper headers

        Raises:
            AccessError: If user doesn't have access to the report
            UserError: If report ID is invalid or report not found
        """
        try:
            # Validate and get report ID
            report_id = self._validate_report_id(kwargs.get("id"))

            # Get coefficient report with security check
            coefficient_report = self._get_coefficient_report(report_id)

            # Validate report data
            self._validate_report_data(coefficient_report)

            # Log download activity
            logger.info(f"User {request.env.user.id} downloading report {report_id}")

            # Prepare response headers
            headers = self._prepare_response_headers(coefficient_report)

            # Return file response
            return request.make_response(coefficient_report.report_data, headers)

        except (AccessError, UserError) as e:
            logger.warning(
                f"Report download failed for user {request.env.user.id}: {e}"
            )
            return request.not_found()
        except Exception as e:
            logger.error(f"Unexpected error in report download: {e}")
            return request.render(
                "http_routing.http_error",
                {"status_code": 500, "status_message": "Internal Server Error"},
            )

    def _validate_report_id(self, report_id_param):
        """
        Validate and convert report ID parameter

        Args:
            report_id_param: Report ID parameter from request

        Returns:
            int: Validated report ID

        Raises:
            UserError: If report ID is invalid
        """
        if not report_id_param:
            raise UserError("Report ID parameter is required")

        try:
            report_id = int(report_id_param)
            if report_id <= 0:
                raise ValueError("Report ID must be positive")
            return report_id
        except (ValueError, TypeError):
            raise UserError(f"Invalid report ID: {report_id_param}")

    def _get_coefficient_report(self, report_id):
        """
        Get coefficient report with security checks

        Args:
            report_id: ID of the report to retrieve

        Returns:
            coefficient_report: Report record

        Raises:
            AccessError: If user doesn't have access
            UserError: If report not found
        """
        try:
            coefficient_report = request.env[
                "energy_selfconsumption.coefficient_report"
            ].browse(report_id)

            if not coefficient_report.exists():
                raise UserError(f"Report with ID {report_id} not found")

            # Check if user has read access
            coefficient_report.check_access_rights("read")
            coefficient_report.check_access_rule("read")

            return coefficient_report

        except AccessError:
            raise AccessError("You don't have permission to access this report")

    def _validate_report_data(self, coefficient_report):
        """
        Validate report data before download

        Args:
            coefficient_report: Report record to validate

        Raises:
            UserError: If report data is invalid
        """
        if not coefficient_report.report_data:
            raise UserError("Report data is empty or not available")

        if not coefficient_report.file_name:
            raise UserError("Report file name is not available")

    def _prepare_response_headers(self, coefficient_report):
        """
        Prepare HTTP response headers for file download

        Args:
            coefficient_report: Report record

        Returns:
            list: List of header tuples
        """
        # Sanitize filename to prevent header injection
        safe_filename = self._sanitize_filename(coefficient_report.file_name)

        return [
            ("Content-Type", CONTENT_TYPE_TEXT),
            (
                CONTENT_DISPOSITION_HEADER,
                ATTACHMENT_FILENAME_TEMPLATE.format(filename=safe_filename),
            ),
        ]

    def _sanitize_filename(self, filename):
        """
        Sanitize filename to prevent security issues

        Args:
            filename: Original filename

        Returns:
            str: Sanitized filename
        """
        if not filename:
            return "report.txt"

        # Remove potentially dangerous characters
        import re

        safe_filename = re.sub(r"[^\w\-_\.]", "_", filename)

        # Ensure filename is not empty after sanitization
        if not safe_filename or safe_filename.isspace():
            return "report.txt"

        return safe_filename

    # Utility methods
    def get_controller_info(self):
        """
        Get information about this controller

        Returns:
            dict: Controller information
        """
        return {
            "controller_name": "ReportController",
            "supported_routes": ["/energy_selfconsumption/download_report"],
            "authentication_required": True,
            "supported_methods": ["GET"],
        }
