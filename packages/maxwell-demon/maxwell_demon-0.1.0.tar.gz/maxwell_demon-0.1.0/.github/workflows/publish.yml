name: Publish Maxwell to PyPI

on:
  release:
    types: [published]

  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Test build without publishing'
        required: false
        default: 'false'

jobs:
  validate-and-publish:
    runs-on: ubuntu-latest
    environment: pypi

    permissions:
      # Required for OIDC authentication with PyPI
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Verify package metadata
      run: |
        echo "=== Checking pyproject.toml ==="
        if [ ! -f pyproject.toml ]; then
          echo "Error: pyproject.toml not found"
          exit 1
        fi

        echo "=== Package name and version ==="
        grep -E "^name = " pyproject.toml || true
        grep -E "^version = " pyproject.toml || true

    - name: Build Maxwell package
      run: |
        echo "=== Building source distribution and wheel ==="
        python -m build

        echo "=== Build artifacts ==="
        ls -lh dist/

    - name: Check package with twine
      run: |
        echo "=== Validating package distributions ==="
        twine check dist/*

    - name: Install and test package
      run: |
        echo "=== Installing Maxwell from wheel ==="
        pip install dist/*.whl

        echo "=== Testing Maxwell installation ==="
        maxwell --help || true
        maxwell list-workflows || true

        echo "=== Verifying imports ==="
        python -c "import maxwell; from maxwell.registry import get_workflow_registry; print('âœ“ Maxwell imported successfully')"

    - name: Publish to PyPI
      if: github.event_name == 'release' || github.event.inputs.dry_run != 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true
        verbose: true

    - name: Dry run summary
      if: github.event.inputs.dry_run == 'true'
      run: |
        echo "=== DRY RUN COMPLETE ==="
        echo "Package built and validated successfully!"
        echo "Skipping PyPI upload (dry_run=true)"
        echo ""
        echo "To publish for real, create a GitHub release or run workflow_dispatch with dry_run=false"
