"""Standardized test page creation for Jupyter notebooks with FastHTML"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/testing.ipynb.

# %% auto 0
__all__ = ['create_theme_persistence_script', 'create_theme_selector', 'create_test_app', 'create_test_page', 'start_test_server']

# %% ../../nbs/core/testing.ipynb 3
from fasthtml.common import *
from fasthtml.jupyter import JupyUvi, HTMX
from typing import Optional, Union, List, Callable
from pathlib import Path

# Import our modules
from .resources import build_headers, get_daisyui_headers
from .themes import DaisyUITheme, get_theme_value

# %% ../../nbs/core/testing.ipynb 5
def create_theme_persistence_script() -> Script:
   """
   Create a JavaScript script that handles theme persistence using localStorage.
   This script:
   1. Loads saved theme on page load
   2. Listens for theme changes and saves them
   3. Syncs radio button state with saved theme
   """
   return Script("""
   (function() {
       const THEME_STORAGE_KEY = 'daisyui-theme';

       // Function to apply theme to HTML element
       function applyTheme(theme) {
           if (theme) {
               document.documentElement.setAttribute('data-theme', theme);
           }
       }

       // Function to sync radio buttons with current theme
       function syncRadioButtons(theme) {
           if (!theme) return;

           // Find all theme radio buttons
           const radios = document.querySelectorAll('input[type="radio"][name="theme-dropdown"]');
           radios.forEach(radio => {
               if (radio.value === theme) {
                   radio.checked = true;
               }
           });
       }

       // Load and apply saved theme immediately (before DOMContentLoaded)
       const savedTheme = localStorage.getItem(THEME_STORAGE_KEY);
       if (savedTheme) {
           applyTheme(savedTheme);
       }

       // Set up listeners and sync state after DOM is ready
       document.addEventListener('DOMContentLoaded', function() {
           // Sync radio buttons with saved theme
           if (savedTheme) {
               syncRadioButtons(savedTheme);
           }

           // Listen for theme changes from radio buttons
           const radios = document.querySelectorAll('input[type="radio"][name="theme-dropdown"]');
           radios.forEach(radio => {
               radio.addEventListener('change', function() {
                   if (this.checked) {
                       const newTheme = this.value;
                       // Save to localStorage
                       localStorage.setItem(THEME_STORAGE_KEY, newTheme);
                       // Apply theme (theme-controller class already does this, but we ensure it)
                       applyTheme(newTheme);
                   }
               });
           });

           // Also listen for programmatic theme changes
           const observer = new MutationObserver(function(mutations) {
               mutations.forEach(function(mutation) {
                   if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
                       const currentTheme = document.documentElement.getAttribute('data-theme');
                       if (currentTheme) {
                           localStorage.setItem(THEME_STORAGE_KEY, currentTheme);
                           syncRadioButtons(currentTheme);
                       }
                   }
               });
           });

           // Observe changes to data-theme attribute
           observer.observe(document.documentElement, {
               attributes: true,
               attributeFilter: ['data-theme']
           });
       });
   })();
   """)

# %% ../../nbs/core/testing.ipynb 7
def create_theme_selector(
    custom_themes: Optional[List[str]] = None  # Optional list of custom theme names to include
) -> Div:  # Div containing theme selector dropdown
    "Create a daisyUI theme selector dropdown component."
    from fasthtml.common import Input, Label, Div, Ul, Li
    from fasthtml.svg import Svg, Path, Circle, G
    from cjm_fasthtml_tailwind.utilities.sizing import h, w, max_h
    from cjm_fasthtml_tailwind.utilities.svg import fill, stroke, stroke_width
    from cjm_fasthtml_tailwind.utilities.layout import z, display_tw, overflow
    from cjm_fasthtml_tailwind.utilities.sizing import h
    from cjm_fasthtml_tailwind.utilities.spacing import m, p
    from cjm_fasthtml_tailwind.utilities.effects import shadow, opacity
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import justify
    from cjm_fasthtml_tailwind.utilities.borders import border_color
    from cjm_fasthtml_tailwind.utilities.backgrounds import bg
    from cjm_fasthtml_tailwind.utilities.interactivity import cursor
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap
    from cjm_fasthtml_tailwind.utilities.borders import divide
    from cjm_fasthtml_tailwind.core.base import combine_classes
    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui
    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius
    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_styles
    from cjm_fasthtml_daisyui.components.actions.dropdown import dropdown, dropdown_content, dropdown_modifiers, dropdown_placement 
    from cjm_fasthtml_daisyui.components.actions.theme_controller import theme_controller
    from cjm_fasthtml_daisyui.components.layout.divider import divider

    
    
    # Build theme options
    theme_options = []

    if custom_themes:
        for theme_name in custom_themes:
            theme_options.append(
                Li(
                    Input(
                        type="radio",
                        name="theme-dropdown",
                        cls=combine_classes(
                            theme_controller,
                            w.full,
                            btn,
                            btn_sizes.sm,
                            btn_modifiers.block,
                            btn_styles.ghost,
                            justify.start
                        ),
                        aria_label=theme_name.title(),
                        value=theme_name
                    )
                )
            )

        # Add a divider between custom and built-in themes
        theme_options.append(Li(Div(cls=combine_classes(divider, m.y(0)))))
        

    # Add built-in themes
    for theme in DaisyUITheme:
        theme_options.append(
            Li(
                Input(
                    type="radio",
                    name="theme-dropdown",
                    cls=combine_classes(
                        theme_controller,
                        w.full,
                        btn,
                        btn_sizes.sm,
                        btn_modifiers.block,
                        btn_styles.ghost,
                        justify.start
                    ),
                    aria_label=theme.value.title(),
                    value=theme.value
                )
            )
        )
    

    # Theme controller dropdown
    dropdown_icon = Svg(
        Path(d="M1799 349l242 241-1017 1017L7 590l242-241 775 775 775-775z"),
        width="12px",
        height="12px",
        cls=combine_classes(display_tw.inline_block, h._2, w._2, fill.current, opacity._60),
        xmlns="http://www.w3.org/2000/svg",
        viewBox="0 0 2048 2048"
    )
    
    theme_dropdown = Div(
        Div(
            "Theme",
            dropdown_icon,
            tabindex="0",
            role="button",
            cls=combine_classes(btn, m._1)
        ),
        Ul(*theme_options,
            tabindex="0",
            cls=combine_classes(
                dropdown_content,
                bg_dui.base_300,
                border_radius.box,
                z._1,
                w._52,
                p._2,
                shadow._2xl,
                max_h("calc(100dvh-56px)"), 
                overflow.x.auto
            )
        ),
        cls=combine_classes(dropdown, dropdown_placement.end)
    )

    return theme_dropdown

# %% ../../nbs/core/testing.ipynb 9
def create_test_app(
   theme: Union[DaisyUITheme, str] = DaisyUITheme.LIGHT,  # Default theme
   custom_css: Optional[List[Union[str, Link]]] = None,  # Additional CSS
   custom_js: Optional[List[Union[str, Script]]] = None,  # Additional JS
   custom_theme_css: Optional[str] = None,  # Custom theme CSS as string
   custom_theme_paths: Optional[List[Union[str, Path]]] = None,  # List of paths to custom theme CSS files
   custom_theme_names: Optional[List[str]] = None,  # Names of custom themes to include in selector
   enable_theme_persistence: bool = True,  # Enable localStorage theme persistence
   debug: bool = True,  # Enable debug mode
   **kwargs
) -> tuple: # Tuple containing (app, rt) - FastHTML app instance and route decorator
   """
   Create a standardized test app for Jupyter notebooks with daisyUI and Tailwind.
   """
   # Get theme value - allow custom themes when custom CSS, paths or names are provided
   theme_value = get_theme_value(theme, allow_custom=bool(custom_theme_paths or custom_theme_css or custom_theme_names))

   # Initialize custom_js list if not provided
   if custom_js is None:
       custom_js = []
   else:
       # Make a copy to avoid modifying the original list
       custom_js = list(custom_js)

   # Add theme persistence script if enabled
   if enable_theme_persistence:
       custom_js.insert(0, create_theme_persistence_script())

   # Build headers
   headers = build_headers(
       include_themes=True,
       custom_css=custom_css,
       custom_js=custom_js,
       custom_theme_css=custom_theme_css,
       custom_theme_paths=custom_theme_paths
   )

   # Create app with daisyUI configuration
   app, rt = fast_app(
       pico=False,  # Disable pico since we're using daisyUI
       hdrs=headers,
       htmlkw={'data-theme': theme_value},
       debug=debug,
       **kwargs
   )

   return app, rt

# %% ../../nbs/core/testing.ipynb 11
def create_test_page(
    title: str,  # Page title
    *content,  # Page content elements
    include_theme_selector: bool = True,  # Include theme selector
    use_container: bool = True,  # Wrap in container
    custom_theme_names: Optional[List[str]] = None  # Custom themes for selector
) -> Div:  # Div containing complete page layout with navbar and content
    """
    Create a standardized test page layout with optional theme selector.
    """

    from cjm_fasthtml_tailwind.core.base import combine_classes
    from cjm_fasthtml_tailwind.utilities.backgrounds import bg_linear
    from cjm_fasthtml_tailwind.utilities.layout import display_tw
    from cjm_fasthtml_tailwind.utilities.effects import shadow
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex, justify, items, flex_wrap, flex_display
    from cjm_fasthtml_tailwind.utilities.sizing import container
    from cjm_fasthtml_tailwind.utilities.spacing import m, p
    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color
    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui
    from cjm_fasthtml_daisyui.utilities.semantic_gradients import from_dui, to_dui
    from cjm_fasthtml_daisyui.components.navigation.navbar import navbar as navbar_factory
    
    # Build navbar with proper structure using TailwindBuilder
    navbar = Div(
        # Include hidden element to enable Tailwind JIT compilation of semantic color gradients.
        Div(cls=combine_classes(display_tw.hidden, "from-[--p]", "to-[--s]")),
        # Container for navbar content with flex layout
        Div(
            # Left section (empty for now)
            Div(cls=combine_classes(flex_display, flex(1))),
            
            # Center section with title
            Div(
                H1(title, cls=combine_classes(font_size._2xl, font_weight.bold, flex_display, flex_wrap)),
                # cls=str(flex.none)
            ),
            
            # Right section with theme selector
            Div(
                create_theme_selector(custom_themes=custom_theme_names) if include_theme_selector else "",
                cls=combine_classes(flex_display, justify.end, flex(1))
            ),
            cls=combine_classes(container, m.x.auto, flex_display, items.center)
        ),
        cls=combine_classes(navbar_factory, bg_dui.base_100, shadow.lg)
    )
    
    main_classes = combine_classes(container, m.x.auto) if use_container else None
    main_classes = combine_classes(main_classes, p.x(4), p.y(8))
    
    return Div(
        navbar,
        Main(
            *content,
            cls=main_classes
        )
    )

# %% ../../nbs/core/testing.ipynb 13
def start_test_server(
    app: FastHTML,    # FastHTML app instance created by create_test_app or fast_app
    port: int = 8000,  # Port
) -> JupyUvi:  # JupyUvi server instance for Jupyter notebook testing
    """
    Start a test server and return the JupyUvi instance.
    
    Usage:
        server = start_test_server(app)
        HTMX()  # Display the app
        
        # Later, in another cell:
        server.stop()
    """
    return JupyUvi(app, port=port)
