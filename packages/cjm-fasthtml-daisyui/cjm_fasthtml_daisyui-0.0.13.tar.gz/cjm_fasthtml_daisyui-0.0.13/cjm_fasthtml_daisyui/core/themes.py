"""Theme management for daisyUI"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/themes.ipynb.

# %% auto 0
__all__ = ['DaisyUITheme', 'get_theme_value', 'ThemeColors', 'ThemeConfig', 'create_theme_css', 'save_theme_css',
           'save_theme_json', 'load_theme_json', 'load_style_css']

# %% ../../nbs/core/themes.ipynb 3
from typing import Literal, Dict, Optional, TypedDict, Union
from enum import Enum
from pathlib import Path
import json
from fasthtml.core import Style

# %% ../../nbs/core/themes.ipynb 5
class DaisyUITheme(str, Enum):
    """All built-in daisyUI themes."""
    LIGHT = "light"
    DARK = "dark"
    CUPCAKE = "cupcake"
    BUMBLEBEE = "bumblebee"
    EMERALD = "emerald"
    CORPORATE = "corporate"
    SYNTHWAVE = "synthwave"
    RETRO = "retro"
    CYBERPUNK = "cyberpunk"
    VALENTINE = "valentine"
    HALLOWEEN = "halloween"
    GARDEN = "garden"
    FOREST = "forest"
    AQUA = "aqua"
    LOFI = "lofi"
    PASTEL = "pastel"
    FANTASY = "fantasy"
    WIREFRAME = "wireframe"
    BLACK = "black"
    LUXURY = "luxury"
    DRACULA = "dracula"
    CMYK = "cmyk"
    AUTUMN = "autumn"
    BUSINESS = "business"
    ACID = "acid"
    LEMONADE = "lemonade"
    NIGHT = "night"
    COFFEE = "coffee"
    WINTER = "winter"
    DIM = "dim"
    NORD = "nord"
    SUNSET = "sunset"
    CARAMELLATTE = "caramellatte"
    ABYSS = "abyss"
    SILK = "silk"

# %% ../../nbs/core/themes.ipynb 9
def get_theme_value(
    theme: Union[DaisyUITheme, str],  # The theme to validate (DaisyUITheme enum or string)
    allow_custom: bool = False  # If True, allows any string value for custom themes
) -> str:  # The validated theme name as a string
    "Get the string value of a theme, supporting both enum and string inputs. This allows flexibility in how themes are specified while maintaining type safety."
    if isinstance(theme, DaisyUITheme):
        return theme.value
    elif isinstance(theme, str):
        # If custom themes are allowed, return any string
        if allow_custom:
            return theme
            
        # Otherwise validate against built-in themes
        valid_themes = {t.value for t in DaisyUITheme}
        if theme not in valid_themes:
            raise ValueError(f"'{theme}' is not a valid daisyUI theme. Valid themes are: {', '.join(sorted(valid_themes))}")
        return theme
    else:
        raise TypeError(f"Theme must be a DaisyUITheme enum or string, got {type(theme)}")

# %% ../../nbs/core/themes.ipynb 13
class ThemeColors(TypedDict, total=False):
    """Color definitions for a daisyUI theme using OKLCH color space."""
    # Base colors
    base_100: str  # Base color of page
    base_200: str  # Base color for secondary elements
    base_300: str  # Base color for tertiary elements
    base_content: str  # Text color on base colors
    
    # Primary colors
    primary: str  # Primary color
    primary_content: str  # Text color on primary
    
    # Secondary colors
    secondary: str  # Secondary color
    secondary_content: str  # Text color on secondary
    
    # Accent colors
    accent: str  # Accent color
    accent_content: str  # Text color on accent
    
    # Neutral colors
    neutral: str  # Neutral color
    neutral_content: str  # Text color on neutral
    
    # Semantic colors
    info: str  # Info color
    info_content: str  # Text color on info
    
    success: str  # Success color
    success_content: str  # Text color on success
    
    warning: str  # Warning color
    warning_content: str  # Text color on warning
    
    error: str  # Error color
    error_content: str  # Text color on error

# %% ../../nbs/core/themes.ipynb 14
class ThemeConfig(TypedDict, total=False):
    """Complete configuration for a custom daisyUI theme."""
    name: str  # Theme name
    default: bool  # Set as default theme
    prefersdark: bool  # Set as default dark mode theme
    color_scheme: Literal["light", "dark"]  # Browser UI color scheme
    
    colors: ThemeColors  # Color definitions
    
    # Border radius
    radius_selector: str  # Radius for selectors
    radius_field: str  # Radius for input fields
    radius_box: str  # Radius for boxes
    
    # Base sizes
    size_selector: str  # Size for selectors
    size_field: str  # Size for fields
    
    # Border
    border: str  # Border width
    
    # Effects
    depth: float  # Depth effect (0-1)
    noise: float  # Noise effect (0-1)

# %% ../../nbs/core/themes.ipynb 15
def create_theme_css(
    theme: ThemeConfig  # Theme configuration with colors, sizes, and effects
) -> str:  # CSS string with theme variables
    """
    Generate CSS for a custom daisyUI theme.
    
    This creates the CSS variables needed for a custom theme when using the CDN approach.
    """
    theme_name = theme["name"]
    css_lines = [f':root:has(input.theme-controller[value={theme_name}]:checked),[data-theme="{theme_name}"] {{']
    
    # Add color scheme
    if "color_scheme" in theme:
        css_lines.append(f'  color-scheme: {theme["color_scheme"]};')
    
    # Add colors
    if "colors" in theme:
        for color_key, color_value in theme["colors"].items():
            css_var = f"--color-{color_key.replace('_', '-')}"
            css_lines.append(f'  {css_var}: {color_value};')
    
    # Add border radius
    if "radius_selector" in theme:
        css_lines.append(f'  --radius-selector: {theme["radius_selector"]};')
    if "radius_field" in theme:
        css_lines.append(f'  --radius-field: {theme["radius_field"]};')
    if "radius_box" in theme:
        css_lines.append(f'  --radius-box: {theme["radius_box"]};')
    
    # Add sizes
    if "size_selector" in theme:
        css_lines.append(f'  --size-selector: {theme["size_selector"]};')
    if "size_field" in theme:
        css_lines.append(f'  --size-field: {theme["size_field"]};')
    
    # Add border
    if "border" in theme:
        css_lines.append(f'  --border: {theme["border"]};')
    
    # Add effects
    if "depth" in theme:
        css_lines.append(f'  --depth: {theme["depth"]};')
    if "noise" in theme:
        css_lines.append(f'  --noise: {theme["noise"]};')
    
    css_lines.append('}')
    
    return '\n'.join(css_lines)

# %% ../../nbs/core/themes.ipynb 19
def save_theme_css(
    theme: ThemeConfig,  # Theme configuration to convert to CSS
    path: Union[str, Path]  # File path where CSS will be saved
) -> None:  # None
    """Save a theme configuration as a CSS file."""
    css = create_theme_css(theme)
    Path(path).write_text(css, encoding='utf-8')

# %% ../../nbs/core/themes.ipynb 20
def save_theme_json(
    theme: ThemeConfig,  # Theme configuration to save
    path: Union[str, Path]  # File path where JSON will be saved
) -> None:  # None
    """Save a theme configuration as a JSON file for reuse."""
    Path(path).write_text(json.dumps(theme, indent=2), encoding='utf-8')

# %% ../../nbs/core/themes.ipynb 21
def load_theme_json(
    path: Union[str, Path]  # Path to JSON file containing theme configuration
) -> ThemeConfig:  # Theme configuration dictionary
    """Load a theme configuration from a JSON file."""
    return json.loads(Path(path).read_text(encoding='utf-8'))

# %% ../../nbs/core/themes.ipynb 22
def load_style_css(
    path: Union[str, Path]  # Path to CSS file containing theme configuration
) -> Style:  # FasthHTML Style element
    """Load a theme configuration from a CSS file to a FasthHTML Style element."""
    with open(path, 'r') as f:
        return Style(f.read())
