# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ClusterReplicaArgs', 'ClusterReplica']

@pulumi.input_type
class ClusterReplicaArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[_builtins.str],
                 size: pulumi.Input[_builtins.str],
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 disk: Optional[pulumi.Input[_builtins.bool]] = None,
                 introspection_debugging: Optional[pulumi.Input[_builtins.bool]] = None,
                 introspection_interval: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ClusterReplica resource.
        :param pulumi.Input[_builtins.str] cluster_name: The cluster whose resources you want to create an additional computation of.
        :param pulumi.Input[_builtins.str] size: The size of the replica.
        :param pulumi.Input[_builtins.str] availability_zone: The specific availability zone of the replica.
        :param pulumi.Input[_builtins.str] comment: Comment on an object in the database.
        :param pulumi.Input[_builtins.bool] disk: **Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.
        :param pulumi.Input[_builtins.bool] introspection_debugging: Whether to introspect the gathering of the introspection data.
        :param pulumi.Input[_builtins.str] introspection_interval: The interval at which to collect introspection data.
        :param pulumi.Input[_builtins.str] name: The identifier for the replica.
        :param pulumi.Input[_builtins.str] region: The region to use for the resource connection. If not set, the default region is used.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "size", size)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disk is not None:
            warnings.warn("""Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters""", DeprecationWarning)
            pulumi.log.warn("""disk is deprecated: Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters""")
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if introspection_debugging is not None:
            pulumi.set(__self__, "introspection_debugging", introspection_debugging)
        if introspection_interval is not None:
            pulumi.set(__self__, "introspection_interval", introspection_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[_builtins.str]:
        """
        The cluster whose resources you want to create an additional computation of.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.str]:
        """
        The size of the replica.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The specific availability zone of the replica.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Comment on an object in the database.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comment", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters""")
    def disk(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        **Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.
        """
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disk", value)

    @_builtins.property
    @pulumi.getter(name="introspectionDebugging")
    def introspection_debugging(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to introspect the gathering of the introspection data.
        """
        return pulumi.get(self, "introspection_debugging")

    @introspection_debugging.setter
    def introspection_debugging(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "introspection_debugging", value)

    @_builtins.property
    @pulumi.getter(name="introspectionInterval")
    def introspection_interval(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The interval at which to collect introspection data.
        """
        return pulumi.get(self, "introspection_interval")

    @introspection_interval.setter
    def introspection_interval(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "introspection_interval", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier for the replica.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region to use for the resource connection. If not set, the default region is used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ClusterReplicaState:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 disk: Optional[pulumi.Input[_builtins.bool]] = None,
                 introspection_debugging: Optional[pulumi.Input[_builtins.bool]] = None,
                 introspection_interval: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ClusterReplica resources.
        :param pulumi.Input[_builtins.str] availability_zone: The specific availability zone of the replica.
        :param pulumi.Input[_builtins.str] cluster_name: The cluster whose resources you want to create an additional computation of.
        :param pulumi.Input[_builtins.str] comment: Comment on an object in the database.
        :param pulumi.Input[_builtins.bool] disk: **Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.
        :param pulumi.Input[_builtins.bool] introspection_debugging: Whether to introspect the gathering of the introspection data.
        :param pulumi.Input[_builtins.str] introspection_interval: The interval at which to collect introspection data.
        :param pulumi.Input[_builtins.str] name: The identifier for the replica.
        :param pulumi.Input[_builtins.str] region: The region to use for the resource connection. If not set, the default region is used.
        :param pulumi.Input[_builtins.str] size: The size of the replica.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disk is not None:
            warnings.warn("""Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters""", DeprecationWarning)
            pulumi.log.warn("""disk is deprecated: Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters""")
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if introspection_debugging is not None:
            pulumi.set(__self__, "introspection_debugging", introspection_debugging)
        if introspection_interval is not None:
            pulumi.set(__self__, "introspection_interval", introspection_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The specific availability zone of the replica.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster whose resources you want to create an additional computation of.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Comment on an object in the database.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comment", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters""")
    def disk(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        **Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.
        """
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disk", value)

    @_builtins.property
    @pulumi.getter(name="introspectionDebugging")
    def introspection_debugging(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to introspect the gathering of the introspection data.
        """
        return pulumi.get(self, "introspection_debugging")

    @introspection_debugging.setter
    def introspection_debugging(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "introspection_debugging", value)

    @_builtins.property
    @pulumi.getter(name="introspectionInterval")
    def introspection_interval(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The interval at which to collect introspection data.
        """
        return pulumi.get(self, "introspection_interval")

    @introspection_interval.setter
    def introspection_interval(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "introspection_interval", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier for the replica.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region to use for the resource connection. If not set, the default region is used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The size of the replica.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "size", value)


@pulumi.type_token("materialize:index/clusterReplica:ClusterReplica")
class ClusterReplica(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 disk: Optional[pulumi.Input[_builtins.bool]] = None,
                 introspection_debugging: Optional[pulumi.Input[_builtins.bool]] = None,
                 introspection_interval: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Cluster replicas allocate physical compute resources for a cluster.

        *Note*: Cluster replicas are deprecated. We recommend migrating to a managed cluster using the `Cluster` resource and selecting `size`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_materialize as materialize

        example_cluster_replica = materialize.ClusterReplica("exampleClusterReplica",
            cluster_name="cluster",
            size="2xsmall")
        ```

        ## Import

        Cluster replicas can be imported using the cluster replica id:

        ```sh
        $ pulumi import materialize:index/clusterReplica:ClusterReplica example_1_cluster_replica <region>:<cluster_replica_id>
        ```

        Cluster replica id and information be found in the `mz_catalog.mz_cluster_replicas` table

        The region is the region where the database is located (e.g. aws/us-east-1)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] availability_zone: The specific availability zone of the replica.
        :param pulumi.Input[_builtins.str] cluster_name: The cluster whose resources you want to create an additional computation of.
        :param pulumi.Input[_builtins.str] comment: Comment on an object in the database.
        :param pulumi.Input[_builtins.bool] disk: **Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.
        :param pulumi.Input[_builtins.bool] introspection_debugging: Whether to introspect the gathering of the introspection data.
        :param pulumi.Input[_builtins.str] introspection_interval: The interval at which to collect introspection data.
        :param pulumi.Input[_builtins.str] name: The identifier for the replica.
        :param pulumi.Input[_builtins.str] region: The region to use for the resource connection. If not set, the default region is used.
        :param pulumi.Input[_builtins.str] size: The size of the replica.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterReplicaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Cluster replicas allocate physical compute resources for a cluster.

        *Note*: Cluster replicas are deprecated. We recommend migrating to a managed cluster using the `Cluster` resource and selecting `size`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_materialize as materialize

        example_cluster_replica = materialize.ClusterReplica("exampleClusterReplica",
            cluster_name="cluster",
            size="2xsmall")
        ```

        ## Import

        Cluster replicas can be imported using the cluster replica id:

        ```sh
        $ pulumi import materialize:index/clusterReplica:ClusterReplica example_1_cluster_replica <region>:<cluster_replica_id>
        ```

        Cluster replica id and information be found in the `mz_catalog.mz_cluster_replicas` table

        The region is the region where the database is located (e.g. aws/us-east-1)

        :param str resource_name: The name of the resource.
        :param ClusterReplicaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterReplicaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 disk: Optional[pulumi.Input[_builtins.bool]] = None,
                 introspection_debugging: Optional[pulumi.Input[_builtins.bool]] = None,
                 introspection_interval: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterReplicaArgs.__new__(ClusterReplicaArgs)

            __props__.__dict__["availability_zone"] = availability_zone
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disk"] = disk
            __props__.__dict__["introspection_debugging"] = introspection_debugging
            __props__.__dict__["introspection_interval"] = introspection_interval
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if size is None and not opts.urn:
                raise TypeError("Missing required property 'size'")
            __props__.__dict__["size"] = size
        super(ClusterReplica, __self__).__init__(
            'materialize:index/clusterReplica:ClusterReplica',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            comment: Optional[pulumi.Input[_builtins.str]] = None,
            disk: Optional[pulumi.Input[_builtins.bool]] = None,
            introspection_debugging: Optional[pulumi.Input[_builtins.bool]] = None,
            introspection_interval: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.str]] = None) -> 'ClusterReplica':
        """
        Get an existing ClusterReplica resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] availability_zone: The specific availability zone of the replica.
        :param pulumi.Input[_builtins.str] cluster_name: The cluster whose resources you want to create an additional computation of.
        :param pulumi.Input[_builtins.str] comment: Comment on an object in the database.
        :param pulumi.Input[_builtins.bool] disk: **Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.
        :param pulumi.Input[_builtins.bool] introspection_debugging: Whether to introspect the gathering of the introspection data.
        :param pulumi.Input[_builtins.str] introspection_interval: The interval at which to collect introspection data.
        :param pulumi.Input[_builtins.str] name: The identifier for the replica.
        :param pulumi.Input[_builtins.str] region: The region to use for the resource connection. If not set, the default region is used.
        :param pulumi.Input[_builtins.str] size: The size of the replica.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterReplicaState.__new__(_ClusterReplicaState)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["comment"] = comment
        __props__.__dict__["disk"] = disk
        __props__.__dict__["introspection_debugging"] = introspection_debugging
        __props__.__dict__["introspection_interval"] = introspection_interval
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["size"] = size
        return ClusterReplica(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[_builtins.str]:
        """
        The specific availability zone of the replica.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster whose resources you want to create an additional computation of.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Comment on an object in the database.
        """
        return pulumi.get(self, "comment")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Disk replicas are deprecated and will be removed in a future release. The `disk` attribute will be enabled by default for 'cc' clusters""")
    def disk(self) -> pulumi.Output[_builtins.bool]:
        """
        **Deprecated**. This attribute is maintained for backward compatibility with existing configurations. New users should use 'cc' sizes for disk access.
        """
        return pulumi.get(self, "disk")

    @_builtins.property
    @pulumi.getter(name="introspectionDebugging")
    def introspection_debugging(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether to introspect the gathering of the introspection data.
        """
        return pulumi.get(self, "introspection_debugging")

    @_builtins.property
    @pulumi.getter(name="introspectionInterval")
    def introspection_interval(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The interval at which to collect introspection data.
        """
        return pulumi.get(self, "introspection_interval")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier for the replica.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region to use for the resource connection. If not set, the default region is used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.str]:
        """
        The size of the replica.
        """
        return pulumi.get(self, "size")

