#
# pyproject.toml
#

[project]
name = "provide-testkit"
description = "Testing utilities and fixtures for the provide ecosystem."
dynamic = ["version"]
requires-python = ">=3.11"
readme = "README.md"
license = { text = "Apache-2.0" }
authors = [
    { name = "Tim Perkins", email = "code@tim.life" },
]
maintainers = [
    { name = "provide.io", email = "code@provide.io" },
]
keywords = ["testing", "fixtures", "mocking", "pytest", "provide"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: Mocking",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "provide-foundation",
    "click>=8.1.7", # For CLI testing utilities
    # Core testing - use highest versions across ecosystem
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.3.0",
    "pytest-mock>=3.15.0",
    "pytest-xdist>=3.8.0",
    "mkdocs-material>=9.6.20",
]

[project.urls]
Homepage = "https://github.com/provide-io/provide-testkit"
Repository = "https://github.com/provide-io/provide-testkit"
Issues = "https://github.com/provide-io/provide-testkit/issues"

[dependency-groups]
dev = [
    "provide-testkit[quality,advanced-testing]",
]

[project.scripts]
provide-testkit = "provide.testkit.main:main"

[project.entry-points.pytest11]
provide_testkit = "provide.testkit.pytest_plugin"

[project.optional-dependencies]

# Comprehensive code quality tools
quality = [
    "ruff>=0.11.8",
    "mypy>=1.17.1",
    "bandit>=1.8.3",
    "coverage[toml]>=7.0.0",
    "radon>=6.0.0",
    "interrogate>=1.5.0",
    "mutmut>=3.3.1",
]

# Advanced type checking
typecheck = [
    "mypy>=1.17.1",
    "pyright>=1.1.401",
    "pyre-check>=0.9.23",
    "pyre-extensions>=0.0.32",
    "pyrefly>=0.18.1",
    "ty>=0.0.1a6",
    "types-cryptography>=3.3.23.2",
    "types-grpcio>=1.0.0.20250603",
    "types-toml>=0.10.8.20240310",
    "types-protobuf>=6.30.2.20250516",
    "types-click>=7.1.8",
    "types-pyyaml>=6.0.12.20250915",
    "types-psutil>=7.0.0.20250822",
]

# Property-based and advanced testing
advanced-testing = [
    "hypothesis>=6.131.28",
    "freezegun>=1.5.1",
    "behave>=1.2.6",
    "pytest-benchmark>=5.1.0",
    "pytest-testmon>=2.1.3",
]

# Performance profiling
profiling = [
    "memray>=1.17.2",
    "viztracer>=1.0.2",
]

# Network and HTTP testing
transport = [
    "httpx>=0.27.0",
    "pytest-httpx>=0.35.0",
    "h2>=4.3.0",
]

# Cryptography
crypto = [
    "cryptography>=45.0.7",
    "types-cryptography>=3.3.23.2",
]

# System monitoring
process = [
    "psutil>=7.0.0",
]

# gRPC/Protobuf development
grpc = [
    "grpc-stubs>=1.53.0.6",
    "grpcio>=1.73.0",
    "grpcio-tools>=1.73.0",
    "grpcio-health-checking>=1.73.0",
]

# Build and release tools
build = [
    "hatch>=1.14.1",
    "twine>=6.1.0",
    "uv>=0.6.5",
    "pre-commit>=3.5.0",
]

# Documentation tools - comprehensive set for entire ecosystem
docs = [
    # Core MkDocs
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.6.0",
    "mkdocstrings[python]>=0.26.0",
    "mkdocs-autorefs>=1.4.0",
    "mike>=2.1.0",

    # Organization and navigation
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",

    # Content enhancement
    "markdown-callouts>=0.4",
    "markdown-exec>=1.8",
    "markdown-include>=0.8.0",
    "pymdown-extensions>=10.16.0",

    # Advanced plugins
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
    "mkdocs-macros-plugin>=1.0.0",
    "mkdocs-include-markdown-plugin>=7.0.0",
    "mkdocs-coverage>=1.0",
    "mkdocs-llmstxt>=0.2",
    "mkdocs-minify-plugin>=0.8",
    "mkdocs-redirects>=1.2",

    # Code quality
    "linkchecker",

    # Additional dependencies
    "pygments>=2.19.0",
    "griffe>=1.14.0",
    "watchdog>=3.0.0",
    "pyyaml>=6.0.0",
]

# Misc utilities
utils = [
    "pyyaml>=6.0.2",
    "reuse>=1.1.0",
    "tabulate>=0.9.0",
    "pynguin>=0.40.0",
    "sapp>=0.4",
]

# Convenience groups
standard = [
    "provide-testkit[quality,transport,crypto,process]",
]

grpc-dev = [
    "provide-testkit[standard,grpc,typecheck]",
]

pyvider-dev = [
    "provide-testkit[standard,advanced-testing,typecheck,grpc,build,profiling]",
]

all = [
    "provide-testkit[quality,typecheck,advanced-testing,profiling,transport,crypto,process,grpc,build,docs,utils]",
]

dev = [
    "provide-testkit[quality,advanced-testing]",
]

# Self-referential docs for testkit itself
docs-standalone = [
    "provide-testkit[docs]",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {file = "VERSION"}

[tool.ruff]
target-version = "py311"
line-length = 111
indent-width = 4

[tool.ruff.lint]
select = ["E", "F", "W", "I", "UP", "ANN", "B", "C90", "SIM", "PTH", "RUF"]
ignore = ["ANN401", "B008", "E501"]

[tool.ruff.lint.isort]
known-first-party = ["provide", "tests"]
force-sort-within-sections = true
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -s --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
