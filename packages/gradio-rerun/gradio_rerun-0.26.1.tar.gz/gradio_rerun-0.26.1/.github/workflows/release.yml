name: Release

on:
    workflow_dispatch:
        inputs:
            release-type:
                description: "What kind of release is this?"
                type: choice
                options:
                    - alpha
                    - rc
                    - final
                required: true

concurrency:
    group: ${{ github.ref_name }}
    cancel-in-progress: true

defaults:
    run:
        shell: bash --noprofile --norc -euo pipefail {0}

# wants to push commits and create a PR
permissions: write-all

jobs:
    version:
        name: Versioning
        runs-on: ubuntu-latest
        outputs:
            previous: ${{ steps.versioning.outputs.previous }}
            current: ${{ steps.versioning.outputs.current }}
            pep440_version: ${{ steps.versioning.outputs.pep440_version }}
            final: ${{ steps.versioning.outputs.final }}
            py_wheel_version: ${{ steps.versioning.outputs.py_wheel_version }}
            version_bump_commit_sha: ${{ steps.commit.outputs.version_bump_commit_sha }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Python & uv
              uses: ./.github/actions/setup-python-uv

            - name: Setup Node.js & pnpm
              uses: ./.github/actions/setup-nodejs-pnpm

            - name: Get and validate version
              id: versioning
              run: |
                  # Extract the target final version from branch name (e.g., prepare-release-0.1.0-alpha.1 -> 0.1.0)
                  release_version_output=$(uv run python scripts/ci/version.py get-version --from git --finalize)
                  echo "$release_version_output"
                  release_version=$(echo "$release_version_output" | grep "Release version:" | cut -d' ' -f3)
                  echo "Target release version from branch: $release_version"

                  # Get current version from file (finalized)
                  current_finalized_output=$(uv run python scripts/ci/version.py get-version --from file --finalize)
                  current_finalized=$(echo "$current_finalized_output" | grep "Release version:" | cut -d' ' -f3)
                  echo "Current finalized version from file: $current_finalized"

                  # If current finalized version doesn't match target, update to target
                  if [ "$current_finalized" != "$release_version" ]; then
                      echo "Updating version to $release_version"
                      uv run python scripts/ci/version.py version --exact $release_version
                  fi

                  # Handle release type specific versioning
                  if [ "${{ inputs.release-type }}" = "alpha" ]; then
                      echo "Bumping alpha version"
                      uv run python scripts/ci/version.py version --bump prerelease --pre-id=alpha
                  elif [ "${{ inputs.release-type }}" = "rc" ]; then
                      echo "Bumping RC version"
                      uv run python scripts/ci/version.py version --bump prerelease --pre-id=rc
                  elif [ "${{ inputs.release-type }}" = "final" ]; then
                      echo "Setting final version"
                      uv run python scripts/ci/version.py version --exact $release_version
                  fi

                  # Get the final version after all updates
                  final_output=$(uv run python scripts/ci/version.py get-version --from file)
                  echo "$final_output"
                  version=$(echo "$final_output" | grep "Release version:" | cut -d' ' -f3)
                  pep440_version=$(echo "$final_output" | grep "PEP 440 version:" | cut -d' ' -f4)

                  # Store previous version for re-entrancy check
                  echo "previous=$current_finalized" >> $GITHUB_OUTPUT
                  echo "current=$version" >> $GITHUB_OUTPUT
                  echo "pep440_version=$pep440_version" >> $GITHUB_OUTPUT
                  echo "final=$release_version" >> $GITHUB_OUTPUT

                  # For wheel versioning
                  py_wheel_version=$(echo "$pep440_version" | tr -d '-')
                  echo "py_wheel_version=$py_wheel_version" >> $GITHUB_OUTPUT

            - name: Update Rerun versions
              run: |
                  echo "Updating Rerun SDK and Web Viewer to version ${{ steps.versioning.outputs.current }}"

                  pushd frontend
                  uv run pnpm install @rerun-io/web-viewer@==${{ steps.versioning.outputs.current }}
                  popd

                  uv add rerun-sdk==${{ steps.versioning.outputs.pep440_version }} --upgrade

                  echo "Rerun versions updated!"

            - name: Update package versions
              run: |
                  uv run python scripts/ci/version.py set-version ${{ steps.versioning.outputs.current }}

            - name: Commit version changes
              id: commit
              run: |
                  git config user.name "rerun-bot"
                  git config user.email "bot@rerun.io"

                  # Check if there are any changes to commit
                  git add -A
                  if git diff --cached --quiet; then
                      echo "No version changes to commit"
                      echo "version_bump_commit_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
                  else
                      echo "Committing version changes"
                      git commit -m "Bump versions to ${{ steps.versioning.outputs.current }}"
                      git push
                      echo "version_bump_commit_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
                  fi

    py-lints:
        name: Python Lints (ruff, mypy, …)
        needs: version
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Python & uv
              uses: ./.github/actions/setup-python-uv

            - name: Lint Python
              run: uv run ruff check

            - name: Typecheck Python
              run: uv run mypy backend demo --exclude-gitignore

            - name: Format Python
              run: uv run ruff format --check

    frontend-lints:
        name: Frontend Lints (eslint, prettier, …)
        needs: version
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js & pnpm
              uses: ./.github/actions/setup-nodejs-pnpm

            - name: Lint frontend
              working-directory: "./frontend"
              run: pnpm lint

            - name: Format frontend
              working-directory: "./frontend"
              run: pnpm format-check

    build-publish:
        name: Build & Publish
        needs:
            - version
            - py-lints
            - frontend-lints
        uses: ./.github/workflows/reusable_build_publish.yml
        with:
            VERSION_BUMP_COMMIT_SHA: ${{ needs.version.outputs.version_bump_commit_sha }}
            VERSION: ${{ needs.version.outputs.current }}
            PEP440_VERSION: ${{ needs.version.outputs.pep440_version }}

        secrets: inherit

    github-release:
        name: Create GitHub Release
        needs:
            - version
            - build-publish
        runs-on: ubuntu-latest
        # Only create GitHub releases for RC and final releases, not alpha
        if: inputs.release-type == 'rc' || inputs.release-type == 'final'
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.version.outputs.version_bump_commit_sha }}

            - name: Create GitHub Release
              env:
                  GH_TOKEN: ${{ github.token }}
              run: |
                  version="${{ needs.version.outputs.current }}"
                  final_version="${{ needs.version.outputs.final }}"
                  release_type="${{ inputs.release-type }}"

                  # Determine release parameters
                  if [ "$release_type" = "rc" ]; then
                      # RC releases are marked as prerelease
                      prerelease_flag="--prerelease"
                      title="Release Candidate $version"
                      tag="$version"
                  else
                      # Final releases are not marked as prerelease
                      prerelease_flag=""
                      title="Release $final_version"
                      tag="$final_version"
                  fi

                  # Create draft release
                  gh release create "$tag" \
                      --title "$title" \
                      --draft \
                      $prerelease_flag \
                      --target ${{ needs.version.outputs.version_bump_commit_sha }} \
                      --notes "Release $version"

                  echo "Created draft release for $tag"
