[project]
name = "gradio_rerun"
version = "0.26.1"
description = "Rerun viewer with Gradio"
readme = "README.md"
license = { text = "MIT OR Apache-2.0" }
requires-python = ">=3.10"
authors = [
  { name = "RadamÃ©s Ajna", email = "radamajna@gmail.com" },
  { name = "rerun.io", email = "opensource@rerun.io" },
]
keywords = [
  "gradio-custom-component",
  "multimodal data",
  "visualization",
  "machine learning",
  "robotics",
  "Rerun",
  "rerun-viewer",
]
classifiers = [
  'Development Status :: 3 - Alpha',
  'Operating System :: OS Independent',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Topic :: Scientific/Engineering',
  'Topic :: Scientific/Engineering :: Artificial Intelligence',
  'Topic :: Scientific/Engineering :: Visualization',
]

dependencies = [
  "gradio>=5.49.1",
  "rerun-sdk==0.26.1",
  "opencv-python",
  "twine>=6.1.0",
]

[project.optional-dependencies]
dev = ["build", "twine", "opencv-python>=4.10.0"]

# The repository and space URLs are optional, but recommended.
# Adding a repository URL will create a badge in the auto-generated README that links to the repository.
# Adding a space URL will create a badge in the auto-generated README that links to the space.
# This will make it easy for people to find your deployed demo or source code when they
# encounter your project in the wild.

[project.urls]
repository = "https://github.com/rerun-io/gradio-rerun-viewer"
space = "https://huggingface.co/spaces/rerun/gradio-rerun-viewer"

[build-system]
requires = [
  "hatchling",
  "hatch-requirements-txt",
  "hatch-fancy-pypi-readme>=24.1.0",
]
build-backend = "hatchling.build"

[tool.hatch.build]
artifacts = [
  "/backend/gradio_rerun/templates",
  "*.pyi",
  "/backend/gradio_rerun/py.typed",
  "/.venv/lib/python3.11/site-packages/gradio_rerun/templates",
]

[tool.hatch.build.targets.wheel]
packages = ["/backend/gradio_rerun"]


[tool.ruff]
# https://beta.ruff.rs/docs/configuration/

# target-version = "py38"  # inferred from requires-python, see https://beta.ruff.rs/docs/settings/#target-version

# Enable unsafe fixes to allow ruff to apply fixes that may change the behavior of the code.
# This is needed because otherwise ruff will not be able to trim whitespaces in (codegened) docstrings.
unsafe-fixes = true

# Allow preview lints to be enabled (like `PLW1514` to force `encoding` on open).
preview = true
# But we only want to opt-in to certain preview rules!
lint.explicit-preview-rules = true

lint.ignore = [
  # Conflicts with the formatter, as per ruff itself
  "COM812",
  "D102",
  "D103",
  "D104",
  "D203",
  "D212",
]
lint.select = [
  "A",   # Avoid shadowing built-ins
  "B",   # flake8-bugbear lints
  "COM", # Trailing-comma-related rules
  "C4",  # Comprehension-related rules
  "D",   # pydocstyle codes https://www.pydocstyle.org/en/latest/error_codes.html
  "E",   # pycodestyle error codes: https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes
  # "ERA",   # eradicate dead code (WONT DO: we have lots of dead-looking code in comments)
  "F",       # Flake8 error codes https://flake8.pycqa.org/en/latest/user/error-codes.html
  "FA",      # Force from __future__ import annotations
  "I",       # Isort
  "ISC",     # Ensure implicit string concat syntax
  "TID",     # flake8-tidy-imports
  "W",       # pycodestyle warning codes: https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes
  "UP",      # pyupgrade (ensures idomatic code for supported python version)
  "PIE",     # flake8-pic: various idomatic python lints
  "PLW1514", # Force setting `encoding` for open calls. This is in order to prevent issues when opening utf8 files on windows where the default encoding may depend on the active locale. https://docs.astral.sh/ruff/rules/unspecified-encoding/
  "YTT",     # Various checks on the use of `sys.version_info` and related.
]

extend-exclude = [
  ".venv",
  # generated by Gradio
  "demo/space.py",
]
line-length = 120

[tool.ruff.lint.isort]
combine-as-imports = true


[tool.mypy]
# This file is generated by Gradio, and does not need to be checked.
exclude = ['demo/space.py']
warn_return_any = true
warn_unused_configs = true


[[tool.mypy.overrides]]
# Gradio generates a lot of attributes on the Rerun component dynamically,
# so we need to ignore attribute-defined errors here.
module = "demo.app"
disable_error_code = "attr-defined"


[dependency-groups]
dev = [
  "build>=1.2.2.post1",
  "gitpython>=3.1.45",
  "mypy>=1.18.2",
  "opencv-python>=4.10.0.84",
  "twine>=6.1.0",
]
