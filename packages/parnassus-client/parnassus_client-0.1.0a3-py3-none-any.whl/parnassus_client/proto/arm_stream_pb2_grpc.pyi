"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import parnassus_client.proto.arm_stream_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ArmEnvStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    StreamEnv: grpc.StreamStreamMultiCallable[
        parnassus_client.proto.arm_stream_pb2.EnvRequest,
        parnassus_client.proto.arm_stream_pb2.EnvReply,
    ]
    """单一的双向流，客户端发命令，服务端回结果。"""

class ArmEnvAsyncStub:
    StreamEnv: grpc.aio.StreamStreamMultiCallable[
        parnassus_client.proto.arm_stream_pb2.EnvRequest,
        parnassus_client.proto.arm_stream_pb2.EnvReply,
    ]
    """单一的双向流，客户端发命令，服务端回结果。"""

class ArmEnvServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def StreamEnv(
        self,
        request_iterator: _MaybeAsyncIterator[parnassus_client.proto.arm_stream_pb2.EnvRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[parnassus_client.proto.arm_stream_pb2.EnvReply], collections.abc.AsyncIterator[parnassus_client.proto.arm_stream_pb2.EnvReply]]:
        """单一的双向流，客户端发命令，服务端回结果。"""

def add_ArmEnvServicer_to_server(servicer: ArmEnvServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
