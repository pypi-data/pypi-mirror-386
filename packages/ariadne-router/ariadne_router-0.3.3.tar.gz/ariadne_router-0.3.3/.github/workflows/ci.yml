name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: write
  security-events: write

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Lint and Format Check
        run: |
          ruff check src/ tests/
          # Temporarily disable format check until test files are properly formatted
          # ruff format --check src/ tests/
      - name: Type check with mypy
        run: mypy src/ariadne/
      - name: Security scan with bandit
        continue-on-error: true
        run: bandit -r src/ariadne/ -f json -o bandit-report.json
      - name: Dependency security scan with safety
        continue-on-error: true
        run: safety check --json --output safety-report.json
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      env:
        PLATFORM: ${{ runner.os }}
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if ($env:PLATFORM -eq "windows") {
            pip install -e ".[dev,viz]"
          } else {
            pip install -e ".[dev,viz]"
          }
          # Windows CUDA check
          if ($env:PLATFORM -eq "windows" -and (Test-Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA")) {
            pip install -e ".[cuda]"
          }
      - name: Install Apple Silicon dependencies
        if: runner.os == 'macOS'
        run: |
          pip install -e ".[apple]"
          # Verify Metal
          python -c "import jax; print(jax.devices())"
      - name: Run tests
        shell: pwsh
        run: |
          if ($env:PLATFORM -eq "windows") {
            # Fix path separators
            $env:PYTHONPATH = ($env:PYTHONPATH -replace '\\', '/')
            pytest tests/ -v --tb=short -n auto --cov=src/ariadne --cov-report=xml --cov-fail-under=60
          } else {
            pytest tests/ -v --tb=short -n auto --cov=src/ariadne --cov-report=xml --cov-fail-under=60
          }
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ runner.os }}-${{ matrix.python-version }}
          name: codecov-${{ runner.os }}-${{ matrix.python-version }}
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ runner.os }}-${{ matrix.python-version }}
          path: |
            .coverage
            tests/results/
            pytest.xml
      - name: Cross-Platform Perf Check
        run: |
          python benchmarks/quick_check.py --platform ${{ runner.os }}
        if: matrix.python-version == '3.11' && runner.os == 'ubuntu-latest'
      - name: Run pre-commit hooks
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: pre-commit run --all-files

  test-notebooks:
    name: Validate Examples & Notebooks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -e ".[dev,viz]"
          pip install nbconvert ipykernel jupyter pytest
      - name: Validate Python Examples
        run: |
          set -e
          for script in examples/*.py; do
            echo "Running $script"
            timeout 60 python "$script" || { echo "Failed: $script"; exit 1; }
          done
      - name: Execute Notebooks
        run: |
          set -e
          for notebook in examples/*.ipynb; do
            echo "Executing $notebook"
            jupyter nbconvert --to notebook --execute "$notebook" --ExecutePreprocessor.timeout=300 --allow-errors=false
          done
      - name: Upload Example Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: example-outputs
          path: |
            examples/*.ipynb  # Executed versions
            examples/*.png    # Generated plots

  windows-cuda:
    name: Windows CUDA Tests
    runs-on: windows-latest
    if: contains(runner.labels, 'gpu')  # Use GPU runner if available
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install CUDA deps
        run: |
          choco install cuda  # Chocolatey for CUDA
          pip install -e ".[cuda,dev]"
      - name: Run CUDA tests
        run: pytest tests/test_cuda_backend.py -v

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,viz]"
      - name: Run performance benchmarks
        run: |
          python benchmarks/run_all_benchmarks.py --quick || true
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: benchmarks/results/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: python -m build
      - name: Check package
        run: twine check dist/*
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # Temporarily disabled until GitHub Pages is configured
  # deploy-docs:
  #   name: Deploy Documentation
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: github.ref == 'refs/heads/main'
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -e ".[docs,dev]"
  #     - name: Generate API documentation stubs
  #       run: sphinx-apidoc -o docs/source src/ariadne
  #     - name: Build documentation
  #       run: |
  #         cd docs/source
  #         sphinx-build -b html --keep-going . ../build/html
  #     - name: Setup Pages
  #       uses: actions/configure-pages@v4
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: docs/build/html
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
