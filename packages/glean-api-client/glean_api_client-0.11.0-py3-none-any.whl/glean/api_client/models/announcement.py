"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .document import Document, DocumentTypedDict
from .facetfilter import FacetFilter, FacetFilterTypedDict
from .objectpermissions import ObjectPermissions, ObjectPermissionsTypedDict
from .person import Person, PersonTypedDict
from .structuredtext import StructuredText, StructuredTextTypedDict
from .thumbnail import Thumbnail, ThumbnailTypedDict
from datetime import datetime
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AnnouncementChannel(str, Enum):
    r"""This determines whether this is a Social Feed post or a regular announcement."""

    MAIN = "MAIN"
    SOCIAL_FEED = "SOCIAL_FEED"


class AnnouncementPostType(str, Enum):
    r"""This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site."""

    TEXT = "TEXT"
    LINK = "LINK"


class AnnouncementViewerInfoTypedDict(TypedDict):
    is_dismissed: NotRequired[bool]
    r"""Whether the viewer has dismissed the announcement."""
    is_read: NotRequired[bool]
    r"""Whether the viewer has read the announcement."""


class AnnouncementViewerInfo(BaseModel):
    is_dismissed: Annotated[Optional[bool], pydantic.Field(alias="isDismissed")] = None
    r"""Whether the viewer has dismissed the announcement."""

    is_read: Annotated[Optional[bool], pydantic.Field(alias="isRead")] = None
    r"""Whether the viewer has read the announcement."""


class AnnouncementTypedDict(TypedDict):
    start_time: NotRequired[datetime]
    r"""The date and time at which the announcement becomes active."""
    end_time: NotRequired[datetime]
    r"""The date and time at which the announcement expires."""
    title: NotRequired[str]
    r"""The headline of the announcement."""
    body: NotRequired[StructuredTextTypedDict]
    emoji: NotRequired[str]
    r"""An emoji used to indicate the nature of the announcement."""
    thumbnail: NotRequired[ThumbnailTypedDict]
    banner: NotRequired[ThumbnailTypedDict]
    audience_filters: NotRequired[List[FacetFilterTypedDict]]
    r"""Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search."""
    source_document_id: NotRequired[str]
    r"""The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread)."""
    hide_attribution: NotRequired[bool]
    r"""Whether or not to hide an author attribution."""
    channel: NotRequired[AnnouncementChannel]
    r"""This determines whether this is a Social Feed post or a regular announcement."""
    post_type: NotRequired[AnnouncementPostType]
    r"""This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site."""
    is_prioritized: NotRequired[bool]
    r"""Used by the Social Feed to pin posts to the front of the feed."""
    view_url: NotRequired[str]
    r"""URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel=\"SOCIAL_FEED\"."""
    draft_id: NotRequired[int]
    r"""The opaque id of the associated draft."""
    permissions: NotRequired[ObjectPermissionsTypedDict]
    id: NotRequired[int]
    r"""The opaque id of the announcement."""
    author: NotRequired[PersonTypedDict]
    create_timestamp: NotRequired[int]
    r"""Server Unix timestamp of the creation time (in seconds since epoch UTC)."""
    last_update_timestamp: NotRequired[int]
    r"""Server Unix timestamp of the last update time (in seconds since epoch UTC)."""
    updated_by: NotRequired[PersonTypedDict]
    viewer_info: NotRequired[AnnouncementViewerInfoTypedDict]
    source_document: NotRequired[DocumentTypedDict]
    is_published: NotRequired[bool]
    r"""Whether or not the announcement is published."""


class Announcement(BaseModel):
    start_time: Annotated[Optional[datetime], pydantic.Field(alias="startTime")] = None
    r"""The date and time at which the announcement becomes active."""

    end_time: Annotated[Optional[datetime], pydantic.Field(alias="endTime")] = None
    r"""The date and time at which the announcement expires."""

    title: Optional[str] = None
    r"""The headline of the announcement."""

    body: Optional[StructuredText] = None

    emoji: Optional[str] = None
    r"""An emoji used to indicate the nature of the announcement."""

    thumbnail: Optional[Thumbnail] = None

    banner: Optional[Thumbnail] = None

    audience_filters: Annotated[
        Optional[List[FacetFilter]], pydantic.Field(alias="audienceFilters")
    ] = None
    r"""Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search."""

    source_document_id: Annotated[
        Optional[str], pydantic.Field(alias="sourceDocumentId")
    ] = None
    r"""The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread)."""

    hide_attribution: Annotated[
        Optional[bool], pydantic.Field(alias="hideAttribution")
    ] = None
    r"""Whether or not to hide an author attribution."""

    channel: Optional[AnnouncementChannel] = None
    r"""This determines whether this is a Social Feed post or a regular announcement."""

    post_type: Annotated[
        Optional[AnnouncementPostType], pydantic.Field(alias="postType")
    ] = None
    r"""This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site."""

    is_prioritized: Annotated[Optional[bool], pydantic.Field(alias="isPrioritized")] = (
        None
    )
    r"""Used by the Social Feed to pin posts to the front of the feed."""

    view_url: Annotated[Optional[str], pydantic.Field(alias="viewUrl")] = None
    r"""URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel=\"SOCIAL_FEED\"."""

    draft_id: Annotated[Optional[int], pydantic.Field(alias="draftId")] = None
    r"""The opaque id of the associated draft."""

    permissions: Optional[ObjectPermissions] = None

    id: Optional[int] = None
    r"""The opaque id of the announcement."""

    author: Optional[Person] = None

    create_timestamp: Annotated[
        Optional[int], pydantic.Field(alias="createTimestamp")
    ] = None
    r"""Server Unix timestamp of the creation time (in seconds since epoch UTC)."""

    last_update_timestamp: Annotated[
        Optional[int], pydantic.Field(alias="lastUpdateTimestamp")
    ] = None
    r"""Server Unix timestamp of the last update time (in seconds since epoch UTC)."""

    updated_by: Annotated[Optional[Person], pydantic.Field(alias="updatedBy")] = None

    viewer_info: Annotated[
        Optional[AnnouncementViewerInfo], pydantic.Field(alias="viewerInfo")
    ] = None

    source_document: Annotated[
        Optional[Document], pydantic.Field(alias="sourceDocument")
    ] = None

    is_published: Annotated[Optional[bool], pydantic.Field(alias="isPublished")] = None
    r"""Whether or not the announcement is published."""
