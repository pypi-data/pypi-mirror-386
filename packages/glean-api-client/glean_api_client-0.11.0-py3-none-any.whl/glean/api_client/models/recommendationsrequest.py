"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .document import Document, DocumentTypedDict
from .documentspec_union import DocumentSpecUnion, DocumentSpecUnionTypedDict
from .recommendationsrequestoptions import (
    RecommendationsRequestOptions,
    RecommendationsRequestOptionsTypedDict,
)
from .sessioninfo import SessionInfo, SessionInfoTypedDict
from datetime import datetime
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RecommendationsRequestTypedDict(TypedDict):
    timestamp: NotRequired[datetime]
    r"""The ISO 8601 timestamp associated with the client request."""
    tracking_token: NotRequired[str]
    r"""A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs."""
    session_info: NotRequired[SessionInfoTypedDict]
    source_document: NotRequired[DocumentTypedDict]
    page_size: NotRequired[int]
    r"""Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize."""
    max_snippet_size: NotRequired[int]
    r"""Hint to the server about how many characters long a snippet may be. Server may return less or more."""
    recommendation_document_spec: NotRequired[DocumentSpecUnionTypedDict]
    request_options: NotRequired[RecommendationsRequestOptionsTypedDict]


class RecommendationsRequest(BaseModel):
    timestamp: Optional[datetime] = None
    r"""The ISO 8601 timestamp associated with the client request."""

    tracking_token: Annotated[Optional[str], pydantic.Field(alias="trackingToken")] = (
        None
    )
    r"""A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs."""

    session_info: Annotated[
        Optional[SessionInfo], pydantic.Field(alias="sessionInfo")
    ] = None

    source_document: Annotated[
        Optional[Document], pydantic.Field(alias="sourceDocument")
    ] = None

    page_size: Annotated[Optional[int], pydantic.Field(alias="pageSize")] = None
    r"""Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize."""

    max_snippet_size: Annotated[
        Optional[int], pydantic.Field(alias="maxSnippetSize")
    ] = None
    r"""Hint to the server about how many characters long a snippet may be. Server may return less or more."""

    recommendation_document_spec: Annotated[
        Optional[DocumentSpecUnion], pydantic.Field(alias="recommendationDocumentSpec")
    ] = None

    request_options: Annotated[
        Optional[RecommendationsRequestOptions], pydantic.Field(alias="requestOptions")
    ] = None
