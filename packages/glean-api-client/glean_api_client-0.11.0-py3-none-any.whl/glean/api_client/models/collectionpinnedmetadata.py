"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .collectionpinmetadata import CollectionPinMetadata, CollectionPinMetadataTypedDict
from .collectionpintarget import CollectionPinTarget, CollectionPinTargetTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CollectionPinnedMetadataTypedDict(TypedDict):
    existing_pins: NotRequired[List[CollectionPinTargetTypedDict]]
    r"""List of targets this Collection is pinned to."""
    eligible_pins: NotRequired[List[CollectionPinMetadataTypedDict]]
    r"""List of targets this Collection can be pinned to, excluding the targets this Collection is already pinned to. We also include Collection ID already is pinned to each eligible target, which will be 0 if the target has no pinned Collection."""


class CollectionPinnedMetadata(BaseModel):
    existing_pins: Annotated[
        Optional[List[CollectionPinTarget]], pydantic.Field(alias="existingPins")
    ] = None
    r"""List of targets this Collection is pinned to."""

    eligible_pins: Annotated[
        Optional[List[CollectionPinMetadata]], pydantic.Field(alias="eligiblePins")
    ] = None
    r"""List of targets this Collection can be pinned to, excluding the targets this Collection is already pinned to. We also include Collection ID already is pinned to each eligible target, which will be 0 if the target has no pinned Collection."""
