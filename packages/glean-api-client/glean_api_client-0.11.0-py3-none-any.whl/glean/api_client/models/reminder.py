"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional, TYPE_CHECKING
from typing_extensions import Annotated, NotRequired, TypedDict

if TYPE_CHECKING:
    from .person import Person, PersonTypedDict


class ReminderTypedDict(TypedDict):
    assignee: "PersonTypedDict"
    remind_at: int
    r"""Unix timestamp for when the reminder should trigger (in seconds since epoch UTC)."""
    requestor: NotRequired["PersonTypedDict"]
    created_at: NotRequired[int]
    r"""Unix timestamp for when the reminder was first created (in seconds since epoch UTC)."""
    reason: NotRequired[str]
    r"""An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, \"Duplicate\", \"Incomplete\", \"Incorrect\")."""


class Reminder(BaseModel):
    assignee: "Person"

    remind_at: Annotated[int, pydantic.Field(alias="remindAt")]
    r"""Unix timestamp for when the reminder should trigger (in seconds since epoch UTC)."""

    requestor: Optional["Person"] = None

    created_at: Annotated[Optional[int], pydantic.Field(alias="createdAt")] = None
    r"""Unix timestamp for when the reminder was first created (in seconds since epoch UTC)."""

    reason: Optional[str] = None
    r"""An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, \"Duplicate\", \"Incomplete\", \"Incorrect\")."""
