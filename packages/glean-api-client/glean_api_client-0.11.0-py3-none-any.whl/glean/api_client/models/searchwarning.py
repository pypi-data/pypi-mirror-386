"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WarningType(str, Enum):
    r"""The type of the warning."""

    LONG_QUERY = "LONG_QUERY"
    QUOTED_PUNCTUATION = "QUOTED_PUNCTUATION"
    PUNCTUATION_ONLY = "PUNCTUATION_ONLY"
    COPYPASTED_QUOTES = "COPYPASTED_QUOTES"
    INVALID_OPERATOR = "INVALID_OPERATOR"
    MAYBE_INVALID_FACET_QUERY = "MAYBE_INVALID_FACET_QUERY"
    TOO_MANY_DATASOURCE_GROUPS = "TOO_MANY_DATASOURCE_GROUPS"


class SearchWarningTypedDict(TypedDict):
    warning_type: WarningType
    r"""The type of the warning."""
    last_used_term: NotRequired[str]
    r"""The last term we considered in the user's long query."""
    quotes_ignored_query: NotRequired[str]
    r"""The query after ignoring/removing quotes."""
    ignored_terms: NotRequired[List[str]]
    r"""A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as \"updated:invalid_date\" will be ignored."""


class SearchWarning(BaseModel):
    warning_type: Annotated[WarningType, pydantic.Field(alias="warningType")]
    r"""The type of the warning."""

    last_used_term: Annotated[Optional[str], pydantic.Field(alias="lastUsedTerm")] = (
        None
    )
    r"""The last term we considered in the user's long query."""

    quotes_ignored_query: Annotated[
        Optional[str], pydantic.Field(alias="quotesIgnoredQuery")
    ] = None
    r"""The query after ignoring/removing quotes."""

    ignored_terms: Annotated[
        Optional[List[str]], pydantic.Field(alias="ignoredTerms")
    ] = None
    r"""A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as \"updated:invalid_date\" will be ignored."""
