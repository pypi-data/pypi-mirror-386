"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PeopleRequestIncludeField(str, Enum):
    BADGES = "BADGES"
    BUSY_EVENTS = "BUSY_EVENTS"
    DOCUMENT_ACTIVITY = "DOCUMENT_ACTIVITY"
    INVITE_INFO = "INVITE_INFO"
    PEOPLE_DISTANCE = "PEOPLE_DISTANCE"
    PERMISSIONS = "PERMISSIONS"
    PEOPLE_DETAILS = "PEOPLE_DETAILS"
    MANAGEMENT_DETAILS = "MANAGEMENT_DETAILS"
    PEOPLE_PROFILE_SETTINGS = "PEOPLE_PROFILE_SETTINGS"
    PEOPLE_WITHOUT_MANAGER = "PEOPLE_WITHOUT_MANAGER"


class IncludeType(str, Enum):
    PEOPLE_WITHOUT_MANAGER = "PEOPLE_WITHOUT_MANAGER"
    INVALID_ENTITIES = "INVALID_ENTITIES"


class PeopleRequestTypedDict(TypedDict):
    timezone_offset: NotRequired[int]
    r"""The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."""
    obfuscated_ids: NotRequired[List[str]]
    r"""The Person IDs to retrieve. If no IDs are requested, the current user's details are returned."""
    email_ids: NotRequired[List[str]]
    r"""The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds."""
    include_fields: NotRequired[List[PeopleRequestIncludeField]]
    r"""List of PersonMetadata fields to return (that aren't returned by default)"""
    include_types: NotRequired[List[IncludeType]]
    r"""The types of people entities to include in the response in addition to those returned by default."""
    source: NotRequired[str]
    r"""A string denoting the search surface from which the endpoint is called."""


class PeopleRequest(BaseModel):
    timezone_offset: Annotated[
        Optional[int], pydantic.Field(alias="timezoneOffset")
    ] = None
    r"""The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."""

    obfuscated_ids: Annotated[
        Optional[List[str]], pydantic.Field(alias="obfuscatedIds")
    ] = None
    r"""The Person IDs to retrieve. If no IDs are requested, the current user's details are returned."""

    email_ids: Annotated[Optional[List[str]], pydantic.Field(alias="emailIds")] = None
    r"""The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds."""

    include_fields: Annotated[
        Optional[List[PeopleRequestIncludeField]], pydantic.Field(alias="includeFields")
    ] = None
    r"""List of PersonMetadata fields to return (that aren't returned by default)"""

    include_types: Annotated[
        Optional[List[IncludeType]], pydantic.Field(alias="includeTypes")
    ] = None
    r"""The types of people entities to include in the response in addition to those returned by default."""

    source: Optional[str] = None
    r"""A string denoting the search surface from which the endpoint is called."""
