"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .grouptype import GroupType
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GroupTypedDict(TypedDict):
    type: GroupType
    r"""The type of user group"""
    id: str
    r"""A unique identifier for the group. May be the same as name."""
    name: NotRequired[str]
    r"""Name of the group."""
    datasource_instance: NotRequired[str]
    r"""Datasource instance if the group belongs to one e.g. external groups."""
    provisioning_id: NotRequired[str]
    r"""identifier for greenlist provisioning, aka sciokey"""


class Group(BaseModel):
    type: GroupType
    r"""The type of user group"""

    id: str
    r"""A unique identifier for the group. May be the same as name."""

    name: Optional[str] = None
    r"""Name of the group."""

    datasource_instance: Annotated[
        Optional[str], pydantic.Field(alias="datasourceInstance")
    ] = None
    r"""Datasource instance if the group belongs to one e.g. external groups."""

    provisioning_id: Annotated[
        Optional[str], pydantic.Field(alias="provisioningId")
    ] = None
    r"""identifier for greenlist provisioning, aka sciokey"""
