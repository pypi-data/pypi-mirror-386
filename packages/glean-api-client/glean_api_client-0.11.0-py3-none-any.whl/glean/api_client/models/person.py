"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional, TYPE_CHECKING
from typing_extensions import Annotated, NotRequired, TypedDict

if TYPE_CHECKING:
    from .personmetadata import PersonMetadata, PersonMetadataTypedDict
    from .relateddocuments import RelatedDocuments, RelatedDocumentsTypedDict


class PersonTypedDict(TypedDict):
    name: str
    r"""The display name."""
    obfuscated_id: str
    r"""An opaque identifier that can be used to request metadata for a Person."""
    related_documents: NotRequired[List["RelatedDocumentsTypedDict"]]
    r"""A list of documents related to this person."""
    metadata: NotRequired["PersonMetadataTypedDict"]


class Person(BaseModel):
    name: str
    r"""The display name."""

    obfuscated_id: Annotated[str, pydantic.Field(alias="obfuscatedId")]
    r"""An opaque identifier that can be used to request metadata for a Person."""

    related_documents: Annotated[
        Optional[List["RelatedDocuments"]], pydantic.Field(alias="relatedDocuments")
    ] = None
    r"""A list of documents related to this person."""

    metadata: Optional["PersonMetadata"] = None
