"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .aiappactioncounts import AiAppActionCounts, AiAppActionCountsTypedDict
from .useractivityinsight import UserActivityInsight, UserActivityInsightTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AiAppsInsightsResponseTypedDict(TypedDict):
    last_log_timestamp: NotRequired[int]
    r"""Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."""
    ai_app_insights: NotRequired[List[UserActivityInsightTypedDict]]
    total_active_users: NotRequired[int]
    r"""Total number of active users on the Ai App in the requested period."""
    action_counts: NotRequired[AiAppActionCountsTypedDict]
    r"""Map from action to frequency."""
    departments: NotRequired[List[str]]
    r"""list of departments applicable for users tab."""


class AiAppsInsightsResponse(BaseModel):
    last_log_timestamp: Annotated[
        Optional[int], pydantic.Field(alias="lastLogTimestamp")
    ] = None
    r"""Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."""

    ai_app_insights: Annotated[
        Optional[List[UserActivityInsight]], pydantic.Field(alias="aiAppInsights")
    ] = None

    total_active_users: Annotated[
        Optional[int], pydantic.Field(alias="totalActiveUsers")
    ] = None
    r"""Total number of active users on the Ai App in the requested period."""

    action_counts: Annotated[
        Optional[AiAppActionCounts], pydantic.Field(alias="actionCounts")
    ] = None
    r"""Map from action to frequency."""

    departments: Optional[List[str]] = None
    r"""list of departments applicable for users tab."""
