"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict, deprecated


@deprecated(
    "warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
)
class ExternalSharingOptionsTypedDict(TypedDict):
    r"""Controls how \"shared\" a document must be to get picked for scans."""

    enabled: NotRequired[bool]
    threshold: NotRequired[int]
    r"""The minimum number of users the document is shared with."""
    threshold_enabled: NotRequired[bool]
    r"""Documents will be filtered based on how many people have access to it."""
    anyone_with_link_enabled: NotRequired[bool]
    anyone_internal_enabled: NotRequired[bool]
    r"""Only users within the organization can access the document."""
    anonymous_access_enabled: NotRequired[bool]
    r"""Anyone on the internet can access the document."""
    user_access_enabled: NotRequired[bool]
    r"""Enable user access check"""
    user_ids: NotRequired[List[str]]
    r"""Any one of the specified users can access the document."""
    domain_access_enabled: NotRequired[bool]


@deprecated(
    "warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
)
class ExternalSharingOptions(BaseModel):
    r"""Controls how \"shared\" a document must be to get picked for scans."""

    enabled: Annotated[
        Optional[bool],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None

    threshold: Optional[int] = None
    r"""The minimum number of users the document is shared with."""

    threshold_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="thresholdEnabled")
    ] = None
    r"""Documents will be filtered based on how many people have access to it."""

    anyone_with_link_enabled: Annotated[
        Optional[bool],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="anyoneWithLinkEnabled",
        ),
    ] = None

    anyone_internal_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="anyoneInternalEnabled")
    ] = None
    r"""Only users within the organization can access the document."""

    anonymous_access_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="anonymousAccessEnabled")
    ] = None
    r"""Anyone on the internet can access the document."""

    user_access_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="userAccessEnabled")
    ] = None
    r"""Enable user access check"""

    user_ids: Annotated[Optional[List[str]], pydantic.Field(alias="userIds")] = None
    r"""Any one of the specified users can access the document."""

    domain_access_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="domainAccessEnabled")
    ] = None
