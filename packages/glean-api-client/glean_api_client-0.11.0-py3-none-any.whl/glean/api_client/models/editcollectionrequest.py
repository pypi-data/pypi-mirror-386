"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .facetfilter import FacetFilter, FacetFilterTypedDict
from .thumbnail import Thumbnail, ThumbnailTypedDict
from .userrolespecification import UserRoleSpecification, UserRoleSpecificationTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EditCollectionRequestTypedDict(TypedDict):
    name: str
    r"""The unique name of the Collection."""
    id: int
    r"""The ID of the Collection to modify."""
    description: NotRequired[str]
    r"""A brief summary of the Collection's contents."""
    added_roles: NotRequired[List[UserRoleSpecificationTypedDict]]
    r"""A list of added user roles for the Collection."""
    removed_roles: NotRequired[List[UserRoleSpecificationTypedDict]]
    r"""A list of removed user roles for the Collection."""
    audience_filters: NotRequired[List[FacetFilterTypedDict]]
    r"""Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search."""
    icon: NotRequired[str]
    r"""The emoji icon of this Collection."""
    admin_locked: NotRequired[bool]
    r"""Indicates whether edits are allowed for everyone or only admins."""
    parent_id: NotRequired[int]
    r"""The parent of this Collection, or 0 if it's a top-level Collection."""
    thumbnail: NotRequired[ThumbnailTypedDict]
    allowed_datasource: NotRequired[str]
    r"""The datasource type this Collection can hold."""


class EditCollectionRequest(BaseModel):
    name: str
    r"""The unique name of the Collection."""

    id: int
    r"""The ID of the Collection to modify."""

    description: Optional[str] = None
    r"""A brief summary of the Collection's contents."""

    added_roles: Annotated[
        Optional[List[UserRoleSpecification]], pydantic.Field(alias="addedRoles")
    ] = None
    r"""A list of added user roles for the Collection."""

    removed_roles: Annotated[
        Optional[List[UserRoleSpecification]], pydantic.Field(alias="removedRoles")
    ] = None
    r"""A list of removed user roles for the Collection."""

    audience_filters: Annotated[
        Optional[List[FacetFilter]], pydantic.Field(alias="audienceFilters")
    ] = None
    r"""Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search."""

    icon: Optional[str] = None
    r"""The emoji icon of this Collection."""

    admin_locked: Annotated[Optional[bool], pydantic.Field(alias="adminLocked")] = None
    r"""Indicates whether edits are allowed for everyone or only admins."""

    parent_id: Annotated[Optional[int], pydantic.Field(alias="parentId")] = None
    r"""The parent of this Collection, or 0 if it's a top-level Collection."""

    thumbnail: Optional[Thumbnail] = None

    allowed_datasource: Annotated[
        Optional[str], pydantic.Field(alias="allowedDatasource")
    ] = None
    r"""The datasource type this Collection can hold."""
