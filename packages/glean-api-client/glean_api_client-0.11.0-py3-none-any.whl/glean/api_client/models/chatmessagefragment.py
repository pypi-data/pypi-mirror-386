"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chatfile import ChatFile, ChatFileTypedDict
from .chatmessagecitation import ChatMessageCitation, ChatMessageCitationTypedDict
from .querysuggestion import QuerySuggestion, QuerySuggestionTypedDict
from .structuredresult import StructuredResult, StructuredResultTypedDict
from .toolinfo import ToolInfo, ToolInfoTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ChatMessageFragmentTypedDict(TypedDict):
    r"""Represents a part of a ChatMessage that originates from a single action/tool. It is designed to support rich data formats beyond simple text, allowing for a more dynamic and interactive chat experience. Each fragment can include various types of content, such as text, search queries, action information, and more. Also, each ChatMessageFragment should only have one of structuredResults, querySuggestion, writeAction, followupAction, agentRecommendation or file."""

    structured_results: NotRequired[List[StructuredResultTypedDict]]
    r"""An array of entities in the work graph retrieved via a data request."""
    tracking_token: NotRequired[str]
    r"""An opaque token that represents this particular result in this particular query. To be used for /feedback reporting."""
    text: NotRequired[str]
    query_suggestion: NotRequired[QuerySuggestionTypedDict]
    file: NotRequired[ChatFileTypedDict]
    r"""Structure for file uploaded by a user for Chat."""
    action: NotRequired[ToolInfoTypedDict]
    citation: NotRequired[ChatMessageCitationTypedDict]
    r"""Information about the source for a ChatMessage."""


class ChatMessageFragment(BaseModel):
    r"""Represents a part of a ChatMessage that originates from a single action/tool. It is designed to support rich data formats beyond simple text, allowing for a more dynamic and interactive chat experience. Each fragment can include various types of content, such as text, search queries, action information, and more. Also, each ChatMessageFragment should only have one of structuredResults, querySuggestion, writeAction, followupAction, agentRecommendation or file."""

    structured_results: Annotated[
        Optional[List[StructuredResult]], pydantic.Field(alias="structuredResults")
    ] = None
    r"""An array of entities in the work graph retrieved via a data request."""

    tracking_token: Annotated[Optional[str], pydantic.Field(alias="trackingToken")] = (
        None
    )
    r"""An opaque token that represents this particular result in this particular query. To be used for /feedback reporting."""

    text: Optional[str] = None

    query_suggestion: Annotated[
        Optional[QuerySuggestion], pydantic.Field(alias="querySuggestion")
    ] = None

    file: Optional[ChatFile] = None
    r"""Structure for file uploaded by a user for Chat."""

    action: Optional[ToolInfo] = None

    citation: Optional[ChatMessageCitation] = None
    r"""Information about the source for a ChatMessage."""
