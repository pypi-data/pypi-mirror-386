"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .document import Document, DocumentTypedDict
from .operatormetadata import OperatorMetadata, OperatorMetadataTypedDict
from .quicklink import Quicklink, QuicklinkTypedDict
from .structuredresult import StructuredResult, StructuredResultTypedDict
from .textrange import TextRange, TextRangeTypedDict
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AutocompleteResultResultType(str, Enum):
    ADDITIONAL_DOCUMENT = "ADDITIONAL_DOCUMENT"
    APP = "APP"
    BROWSER_HISTORY = "BROWSER_HISTORY"
    DATASOURCE = "DATASOURCE"
    DOCUMENT = "DOCUMENT"
    ENTITY = "ENTITY"
    GOLINK = "GOLINK"
    HISTORY = "HISTORY"
    NEW_CHAT = "NEW_CHAT"
    OPERATOR = "OPERATOR"
    OPERATOR_VALUE = "OPERATOR_VALUE"
    QUICKLINK = "QUICKLINK"
    SUGGESTION = "SUGGESTION"


class AutocompleteResultTypedDict(TypedDict):
    result: str
    keywords: NotRequired[List[str]]
    r"""A list of all possible keywords for given result."""
    result_type: NotRequired[AutocompleteResultResultType]
    score: NotRequired[float]
    r"""Higher indicates a more confident match."""
    operator_metadata: NotRequired[OperatorMetadataTypedDict]
    quicklink: NotRequired[QuicklinkTypedDict]
    r"""An action for a specific datasource that will show up in autocomplete and app card, e.g. \"Create new issue\" for jira."""
    document: NotRequired[DocumentTypedDict]
    url: NotRequired[str]
    structured_result: NotRequired[StructuredResultTypedDict]
    r"""A single object that can support any object in the work graph. Only a single object will be populated."""
    tracking_token: NotRequired[str]
    r"""A token to be passed in /feedback events associated with this autocomplete result."""
    ranges: NotRequired[List[TextRangeTypedDict]]
    r"""Subsections of the result string to which some special formatting should be applied (eg. bold)"""


class AutocompleteResult(BaseModel):
    result: str

    keywords: Optional[List[str]] = None
    r"""A list of all possible keywords for given result."""

    result_type: Annotated[
        Optional[AutocompleteResultResultType], pydantic.Field(alias="resultType")
    ] = None

    score: Optional[float] = None
    r"""Higher indicates a more confident match."""

    operator_metadata: Annotated[
        Optional[OperatorMetadata], pydantic.Field(alias="operatorMetadata")
    ] = None

    quicklink: Optional[Quicklink] = None
    r"""An action for a specific datasource that will show up in autocomplete and app card, e.g. \"Create new issue\" for jira."""

    document: Optional[Document] = None

    url: Optional[str] = None

    structured_result: Annotated[
        Optional[StructuredResult], pydantic.Field(alias="structuredResult")
    ] = None
    r"""A single object that can support any object in the work graph. Only a single object will be populated."""

    tracking_token: Annotated[Optional[str], pydantic.Field(alias="trackingToken")] = (
        None
    )
    r"""A token to be passed in /feedback events associated with this autocomplete result."""

    ranges: Optional[List[TextRange]] = None
    r"""Subsections of the result string to which some special formatting should be applied (eg. bold)"""
