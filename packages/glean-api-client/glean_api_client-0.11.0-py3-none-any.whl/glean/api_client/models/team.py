"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .datasourceprofile import DatasourceProfile, DatasourceProfileTypedDict
from .objectpermissions import ObjectPermissions, ObjectPermissionsTypedDict
from .relatedobjectedge import RelatedObjectEdge, RelatedObjectEdgeTypedDict
from .teamemail import TeamEmail, TeamEmailTypedDict
from datetime import datetime
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import Dict, List, Optional, TYPE_CHECKING
from typing_extensions import Annotated, NotRequired, TypedDict

if TYPE_CHECKING:
    from .customfielddata import CustomFieldData, CustomFieldDataTypedDict
    from .persontoteamrelationship import (
        PersonToTeamRelationship,
        PersonToTeamRelationshipTypedDict,
    )


class TeamStatus(str, Enum):
    r"""whether this team is fully processed or there are still unprocessed operations that'll affect it"""

    PROCESSED = "PROCESSED"
    QUEUED_FOR_CREATION = "QUEUED_FOR_CREATION"
    QUEUED_FOR_DELETION = "QUEUED_FOR_DELETION"


class TeamTypedDict(TypedDict):
    id: str
    r"""Unique identifier"""
    name: str
    r"""Team name"""
    related_objects: NotRequired[Dict[str, RelatedObjectEdgeTypedDict]]
    r"""A list of objects related to a source object."""
    permissions: NotRequired[ObjectPermissionsTypedDict]
    description: NotRequired[str]
    r"""A description of the team"""
    business_unit: NotRequired[str]
    r"""Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."""
    department: NotRequired[str]
    r"""An organizational unit where everyone has a similar task, e.g. `Engineering`."""
    photo_url: NotRequired[str]
    r"""A link to the team's photo."""
    banner_url: NotRequired[str]
    r"""A link to the team's banner photo."""
    external_link: NotRequired[str]
    r"""Link to a team page on the internet or your company's intranet"""
    members: NotRequired[List["PersonToTeamRelationshipTypedDict"]]
    r"""The members on this team"""
    member_count: NotRequired[int]
    r"""Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)"""
    emails: NotRequired[List[TeamEmailTypedDict]]
    r"""The emails for this team"""
    custom_fields: NotRequired[List["CustomFieldDataTypedDict"]]
    r"""Customizable fields for additional team information."""
    datasource_profiles: NotRequired[List[DatasourceProfileTypedDict]]
    r"""The datasource profiles of the team"""
    datasource: NotRequired[str]
    r"""the data source of the team, e.g. GDRIVE"""
    created_from: NotRequired[str]
    r"""For teams created from docs, the doc title. Otherwise empty."""
    last_updated_at: NotRequired[datetime]
    r"""when this team was last updated."""
    status: NotRequired[TeamStatus]
    r"""whether this team is fully processed or there are still unprocessed operations that'll affect it"""
    can_be_deleted: NotRequired[bool]
    r"""can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot"""
    logging_id: NotRequired[str]
    r"""The logging id of the team used in scrubbed logs, client analytics, and metrics."""


class Team(BaseModel):
    id: str
    r"""Unique identifier"""

    name: str
    r"""Team name"""

    related_objects: Annotated[
        Optional[Dict[str, RelatedObjectEdge]], pydantic.Field(alias="relatedObjects")
    ] = None
    r"""A list of objects related to a source object."""

    permissions: Optional[ObjectPermissions] = None

    description: Optional[str] = None
    r"""A description of the team"""

    business_unit: Annotated[Optional[str], pydantic.Field(alias="businessUnit")] = None
    r"""Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."""

    department: Optional[str] = None
    r"""An organizational unit where everyone has a similar task, e.g. `Engineering`."""

    photo_url: Annotated[Optional[str], pydantic.Field(alias="photoUrl")] = None
    r"""A link to the team's photo."""

    banner_url: Annotated[Optional[str], pydantic.Field(alias="bannerUrl")] = None
    r"""A link to the team's banner photo."""

    external_link: Annotated[Optional[str], pydantic.Field(alias="externalLink")] = None
    r"""Link to a team page on the internet or your company's intranet"""

    members: Optional[List["PersonToTeamRelationship"]] = None
    r"""The members on this team"""

    member_count: Annotated[Optional[int], pydantic.Field(alias="memberCount")] = None
    r"""Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)"""

    emails: Optional[List[TeamEmail]] = None
    r"""The emails for this team"""

    custom_fields: Annotated[
        Optional[List["CustomFieldData"]], pydantic.Field(alias="customFields")
    ] = None
    r"""Customizable fields for additional team information."""

    datasource_profiles: Annotated[
        Optional[List[DatasourceProfile]], pydantic.Field(alias="datasourceProfiles")
    ] = None
    r"""The datasource profiles of the team"""

    datasource: Optional[str] = None
    r"""the data source of the team, e.g. GDRIVE"""

    created_from: Annotated[Optional[str], pydantic.Field(alias="createdFrom")] = None
    r"""For teams created from docs, the doc title. Otherwise empty."""

    last_updated_at: Annotated[
        Optional[datetime], pydantic.Field(alias="lastUpdatedAt")
    ] = None
    r"""when this team was last updated."""

    status: Optional[TeamStatus] = TeamStatus.PROCESSED
    r"""whether this team is fully processed or there are still unprocessed operations that'll affect it"""

    can_be_deleted: Annotated[Optional[bool], pydantic.Field(alias="canBeDeleted")] = (
        True
    )
    r"""can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot"""

    logging_id: Annotated[Optional[str], pydantic.Field(alias="loggingId")] = None
    r"""The logging id of the team used in scrubbed logs, client analytics, and metrics."""
