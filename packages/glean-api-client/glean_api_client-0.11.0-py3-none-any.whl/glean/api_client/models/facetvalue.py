"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .iconconfig import IconConfig, IconConfigTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class FacetValueTypedDict(TypedDict):
    string_value: NotRequired[str]
    r"""The value that should be set in the FacetFilter when applying this filter to a search request."""
    integer_value: NotRequired[int]
    display_label: NotRequired[str]
    r"""An optional user-friendly label to display in place of the facet value."""
    icon_config: NotRequired[IconConfigTypedDict]
    r"""Defines how to render an icon"""


class FacetValue(BaseModel):
    string_value: Annotated[Optional[str], pydantic.Field(alias="stringValue")] = None
    r"""The value that should be set in the FacetFilter when applying this filter to a search request."""

    integer_value: Annotated[Optional[int], pydantic.Field(alias="integerValue")] = None

    display_label: Annotated[Optional[str], pydantic.Field(alias="displayLabel")] = None
    r"""An optional user-friendly label to display in place of the facet value."""

    icon_config: Annotated[Optional[IconConfig], pydantic.Field(alias="iconConfig")] = (
        None
    )
    r"""Defines how to render an icon"""
