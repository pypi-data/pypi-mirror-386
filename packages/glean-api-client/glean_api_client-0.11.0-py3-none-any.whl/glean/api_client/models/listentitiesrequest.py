"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .facetfilter import FacetFilter, FacetFilterTypedDict
from .sortoptions import SortOptions, SortOptionsTypedDict
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListEntitiesRequestEntityType(str, Enum):
    PEOPLE = "PEOPLE"
    TEAMS = "TEAMS"
    CUSTOM_ENTITIES = "CUSTOM_ENTITIES"


class ListEntitiesRequestIncludeField(str, Enum):
    PEOPLE = "PEOPLE"
    TEAMS = "TEAMS"
    PEOPLE_DISTANCE = "PEOPLE_DISTANCE"
    PERMISSIONS = "PERMISSIONS"
    FACETS = "FACETS"
    INVITE_INFO = "INVITE_INFO"
    LAST_EXTENSION_USE = "LAST_EXTENSION_USE"
    MANAGEMENT_DETAILS = "MANAGEMENT_DETAILS"
    UNPROCESSED_TEAMS = "UNPROCESSED_TEAMS"


class RequestType(str, Enum):
    r"""The type of request being made."""

    STANDARD = "STANDARD"
    FULL_DIRECTORY = "FULL_DIRECTORY"


class ListEntitiesRequestTypedDict(TypedDict):
    filter_: NotRequired[List[FacetFilterTypedDict]]
    sort: NotRequired[List[SortOptionsTypedDict]]
    r"""Use EntitiesSortOrder enum for SortOptions.sortBy"""
    entity_type: NotRequired[ListEntitiesRequestEntityType]
    datasource: NotRequired[str]
    r"""The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES"""
    query: NotRequired[str]
    r"""A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities."""
    include_fields: NotRequired[List[ListEntitiesRequestIncludeField]]
    r"""List of entity fields to return (that aren't returned by default)"""
    page_size: NotRequired[int]
    r"""Hint to the server about how many results to send back. Server may return less."""
    cursor: NotRequired[str]
    r"""Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."""
    source: NotRequired[str]
    r"""A string denoting the search surface from which the endpoint is called."""
    request_type: NotRequired[RequestType]
    r"""The type of request being made."""


class ListEntitiesRequest(BaseModel):
    filter_: Annotated[Optional[List[FacetFilter]], pydantic.Field(alias="filter")] = (
        None
    )

    sort: Optional[List[SortOptions]] = None
    r"""Use EntitiesSortOrder enum for SortOptions.sortBy"""

    entity_type: Annotated[
        Optional[ListEntitiesRequestEntityType], pydantic.Field(alias="entityType")
    ] = ListEntitiesRequestEntityType.PEOPLE

    datasource: Optional[str] = None
    r"""The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES"""

    query: Optional[str] = None
    r"""A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities."""

    include_fields: Annotated[
        Optional[List[ListEntitiesRequestIncludeField]],
        pydantic.Field(alias="includeFields"),
    ] = None
    r"""List of entity fields to return (that aren't returned by default)"""

    page_size: Annotated[Optional[int], pydantic.Field(alias="pageSize")] = None
    r"""Hint to the server about how many results to send back. Server may return less."""

    cursor: Optional[str] = None
    r"""Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."""

    source: Optional[str] = None
    r"""A string denoting the search surface from which the endpoint is called."""

    request_type: Annotated[
        Optional[RequestType], pydantic.Field(alias="requestType")
    ] = RequestType.STANDARD
    r"""The type of request being made."""
