"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chatfile import ChatFile, ChatFileTypedDict
from .document import Document, DocumentTypedDict
from .person import Person, PersonTypedDict
from .referencerange import ReferenceRange, ReferenceRangeTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ChatMessageCitationTypedDict(TypedDict):
    r"""Information about the source for a ChatMessage."""

    tracking_token: NotRequired[str]
    r"""An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting."""
    source_document: NotRequired[DocumentTypedDict]
    source_file: NotRequired[ChatFileTypedDict]
    r"""Structure for file uploaded by a user for Chat."""
    source_person: NotRequired[PersonTypedDict]
    reference_ranges: NotRequired[List[ReferenceRangeTypedDict]]
    r"""Each reference range and its corresponding snippets"""


class ChatMessageCitation(BaseModel):
    r"""Information about the source for a ChatMessage."""

    tracking_token: Annotated[Optional[str], pydantic.Field(alias="trackingToken")] = (
        None
    )
    r"""An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting."""

    source_document: Annotated[
        Optional[Document], pydantic.Field(alias="sourceDocument")
    ] = None

    source_file: Annotated[Optional[ChatFile], pydantic.Field(alias="sourceFile")] = (
        None
    )
    r"""Structure for file uploaded by a user for Chat."""

    source_person: Annotated[Optional[Person], pydantic.Field(alias="sourcePerson")] = (
        None
    )

    reference_ranges: Annotated[
        Optional[List[ReferenceRange]], pydantic.Field(alias="referenceRanges")
    ] = None
    r"""Each reference range and its corresponding snippets"""
