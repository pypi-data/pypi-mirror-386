"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from glean.api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AgentMetadataTypedDict(TypedDict):
    r"""The agent metadata. Currently not implemented."""


class AgentMetadata(BaseModel):
    r"""The agent metadata. Currently not implemented."""


class AgentCapabilitiesTypedDict(TypedDict):
    r"""Describes features that the agent supports. example: {
    \"ap.io.messages\": true,
    \"ap.io.streaming\": true
    }
    """

    ap_io_messages: NotRequired[bool]
    r"""Whether the agent supports messages as an input. If true, you'll pass `messages` as an input when running the agent."""
    ap_io_streaming: NotRequired[bool]
    r"""Whether the agent supports streaming output. If true, you you can stream agent ouput. All agents currently support streaming."""


class AgentCapabilities(BaseModel):
    r"""Describes features that the agent supports. example: {
    \"ap.io.messages\": true,
    \"ap.io.streaming\": true
    }
    """

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    ap_io_messages: Annotated[
        Optional[bool], pydantic.Field(alias="ap.io.messages")
    ] = None
    r"""Whether the agent supports messages as an input. If true, you'll pass `messages` as an input when running the agent."""

    ap_io_streaming: Annotated[
        Optional[bool], pydantic.Field(alias="ap.io.streaming")
    ] = None
    r"""Whether the agent supports streaming output. If true, you you can stream agent ouput. All agents currently support streaming."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]


class AgentTypedDict(TypedDict):
    agent_id: str
    r"""The ID of the agent."""
    name: str
    r"""The name of the agent"""
    capabilities: AgentCapabilitiesTypedDict
    r"""Describes features that the agent supports. example: {
    \"ap.io.messages\": true,
    \"ap.io.streaming\": true
    }
    """
    description: NotRequired[str]
    r"""The description of the agent."""
    metadata: NotRequired[AgentMetadataTypedDict]
    r"""The agent metadata. Currently not implemented."""


class Agent(BaseModel):
    agent_id: str
    r"""The ID of the agent."""

    name: str
    r"""The name of the agent"""

    capabilities: AgentCapabilities
    r"""Describes features that the agent supports. example: {
    \"ap.io.messages\": true,
    \"ap.io.streaming\": true
    }
    """

    description: Optional[str] = None
    r"""The description of the agent."""

    metadata: Optional[AgentMetadata] = None
    r"""The agent metadata. Currently not implemented."""
