"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chatzerostatesuggestionoptions import (
    ChatZeroStateSuggestionOptions,
    ChatZeroStateSuggestionOptionsTypedDict,
)
from glean.api_client.types import BaseModel
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CategoryToResultSizeTypedDict(TypedDict):
    result_size: NotRequired[int]


class CategoryToResultSize(BaseModel):
    result_size: Annotated[Optional[int], pydantic.Field(alias="resultSize")] = None


class FeedRequestOptionsTypedDict(TypedDict):
    result_size: int
    r"""Number of results asked in response. If a result is a collection, counts as one."""
    timezone_offset: NotRequired[int]
    r"""The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."""
    category_to_result_size: NotRequired[Dict[str, CategoryToResultSizeTypedDict]]
    r"""Mapping from category to number of results asked for the category."""
    datasource_filter: NotRequired[List[str]]
    r"""Datasources for which content should be included. Empty is for all."""
    chat_zero_state_suggestion_options: NotRequired[
        ChatZeroStateSuggestionOptionsTypedDict
    ]


class FeedRequestOptions(BaseModel):
    result_size: Annotated[int, pydantic.Field(alias="resultSize")]
    r"""Number of results asked in response. If a result is a collection, counts as one."""

    timezone_offset: Annotated[
        Optional[int], pydantic.Field(alias="timezoneOffset")
    ] = None
    r"""The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."""

    category_to_result_size: Annotated[
        Optional[Dict[str, CategoryToResultSize]],
        pydantic.Field(alias="categoryToResultSize"),
    ] = None
    r"""Mapping from category to number of results asked for the category."""

    datasource_filter: Annotated[
        Optional[List[str]], pydantic.Field(alias="datasourceFilter")
    ] = None
    r"""Datasources for which content should be included. Empty is for all."""

    chat_zero_state_suggestion_options: Annotated[
        Optional[ChatZeroStateSuggestionOptions],
        pydantic.Field(alias="chatZeroStateSuggestionOptions"),
    ] = None
