"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CompanyTypedDict(TypedDict):
    name: str
    r"""User-friendly display name."""
    profile_url: NotRequired[str]
    r"""Link to internal company company profile."""
    website_urls: NotRequired[List[str]]
    r"""Link to company's associated websites."""
    logo_url: NotRequired[str]
    r"""The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."""
    location: NotRequired[str]
    r"""User facing string representing the company's location."""
    phone: NotRequired[str]
    r"""Phone number as a number string."""
    fax: NotRequired[str]
    r"""Fax number as a number string."""
    industry: NotRequired[str]
    r"""User facing string representing the company's industry."""
    annual_revenue: NotRequired[float]
    r"""Average company's annual revenue for reference."""
    number_of_employees: NotRequired[int]
    r"""Average company's number of employees for reference."""
    stock_symbol: NotRequired[str]
    r"""Company's stock symbol if company is public."""
    founded_date: NotRequired[date]
    r"""The date when the company was founded."""
    about: NotRequired[str]
    r"""User facing description of company."""


class Company(BaseModel):
    name: str
    r"""User-friendly display name."""

    profile_url: Annotated[Optional[str], pydantic.Field(alias="profileUrl")] = None
    r"""Link to internal company company profile."""

    website_urls: Annotated[
        Optional[List[str]], pydantic.Field(alias="websiteUrls")
    ] = None
    r"""Link to company's associated websites."""

    logo_url: Annotated[Optional[str], pydantic.Field(alias="logoUrl")] = None
    r"""The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."""

    location: Optional[str] = None
    r"""User facing string representing the company's location."""

    phone: Optional[str] = None
    r"""Phone number as a number string."""

    fax: Optional[str] = None
    r"""Fax number as a number string."""

    industry: Optional[str] = None
    r"""User facing string representing the company's industry."""

    annual_revenue: Annotated[
        Optional[float], pydantic.Field(alias="annualRevenue")
    ] = None
    r"""Average company's annual revenue for reference."""

    number_of_employees: Annotated[
        Optional[int], pydantic.Field(alias="numberOfEmployees")
    ] = None
    r"""Average company's number of employees for reference."""

    stock_symbol: Annotated[Optional[str], pydantic.Field(alias="stockSymbol")] = None
    r"""Company's stock symbol if company is public."""

    founded_date: Annotated[Optional[date], pydantic.Field(alias="foundedDate")] = None
    r"""The date when the company was founded."""

    about: Optional[str] = None
    r"""User facing description of company."""
