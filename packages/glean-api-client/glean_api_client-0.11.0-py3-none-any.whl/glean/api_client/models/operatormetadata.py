"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .operatorscope import OperatorScope, OperatorScopeTypedDict
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OperatorType(str, Enum):
    TEXT = "TEXT"
    DOUBLE = "DOUBLE"
    DATE = "DATE"
    USER = "USER"


class OperatorMetadataTypedDict(TypedDict):
    name: str
    is_custom: NotRequired[bool]
    r"""Whether this operator is supported by default or something that was created within a workplace app (e.g. custom jira field)."""
    operator_type: NotRequired[OperatorType]
    help_text: NotRequired[str]
    scopes: NotRequired[List[OperatorScopeTypedDict]]
    value: NotRequired[str]
    r"""Raw/canonical value of the operator. Only applies when result is an operator value."""
    display_value: NotRequired[str]
    r"""Human readable value of the operator that can be shown to the user. Only applies when result is an operator value."""


class OperatorMetadata(BaseModel):
    name: str

    is_custom: Annotated[Optional[bool], pydantic.Field(alias="isCustom")] = None
    r"""Whether this operator is supported by default or something that was created within a workplace app (e.g. custom jira field)."""

    operator_type: Annotated[
        Optional[OperatorType], pydantic.Field(alias="operatorType")
    ] = None

    help_text: Annotated[Optional[str], pydantic.Field(alias="helpText")] = None

    scopes: Optional[List[OperatorScope]] = None

    value: Optional[str] = None
    r"""Raw/canonical value of the operator. Only applies when result is an operator value."""

    display_value: Annotated[Optional[str], pydantic.Field(alias="displayValue")] = None
    r"""Human readable value of the operator that can be shown to the user. Only applies when result is an operator value."""
