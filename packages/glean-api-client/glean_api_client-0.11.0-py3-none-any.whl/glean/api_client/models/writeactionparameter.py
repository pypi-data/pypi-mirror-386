"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .possiblevalue import PossibleValue, PossibleValueTypedDict
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WriteActionParameterType(str, Enum):
    r"""The type of the value (e.g., integer, string, boolean, etc.)"""

    UNKNOWN = "UNKNOWN"
    INTEGER = "INTEGER"
    STRING = "STRING"
    BOOLEAN = "BOOLEAN"


class WriteActionParameterTypedDict(TypedDict):
    type: NotRequired[WriteActionParameterType]
    r"""The type of the value (e.g., integer, string, boolean, etc.)"""
    display_name: NotRequired[str]
    r"""Human readable display name for the key."""
    value: NotRequired[str]
    r"""The value of the field."""
    is_required: NotRequired[bool]
    r"""Is the parameter a required field."""
    description: NotRequired[str]
    r"""Description of the parameter."""
    possible_values: NotRequired[List[PossibleValueTypedDict]]
    r"""Possible values that the parameter can take."""


class WriteActionParameter(BaseModel):
    type: Optional[WriteActionParameterType] = None
    r"""The type of the value (e.g., integer, string, boolean, etc.)"""

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""Human readable display name for the key."""

    value: Optional[str] = None
    r"""The value of the field."""

    is_required: Annotated[Optional[bool], pydantic.Field(alias="isRequired")] = None
    r"""Is the parameter a required field."""

    description: Optional[str] = None
    r"""Description of the parameter."""

    possible_values: Annotated[
        Optional[List[PossibleValue]], pydantic.Field(alias="possibleValues")
    ] = None
    r"""Possible values that the parameter can take."""
