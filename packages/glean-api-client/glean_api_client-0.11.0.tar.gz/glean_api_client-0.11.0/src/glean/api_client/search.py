"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from glean.api_client import errors, models, utils
from glean.api_client._hooks import HookContext
from glean.api_client.types import OptionalNullable, UNSET
from glean.api_client.utils import get_security_from_env
from glean.api_client.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, List, Mapping, Optional, Union


class Search(BaseSDK):
    def query_as_admin(
        self,
        *,
        query: str,
        timestamp: Optional[datetime] = None,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        source_document: Optional[
            Union[models.Document, models.DocumentTypedDict]
        ] = None,
        page_size: Optional[int] = None,
        max_snippet_size: Optional[int] = None,
        cursor: Optional[str] = None,
        result_tab_ids: Optional[List[str]] = None,
        input_details: Optional[
            Union[
                models.SearchRequestInputDetails,
                models.SearchRequestInputDetailsTypedDict,
            ]
        ] = None,
        request_options: Optional[
            Union[models.SearchRequestOptions, models.SearchRequestOptionsTypedDict]
        ] = None,
        timeout_millis: Optional[int] = None,
        disable_spellcheck: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchResponse:
        r"""Search the index (admin)

        Retrieves results for search query without respect for permissions. This is available only to privileged users.

        :param query: The search terms.
        :param timestamp: The ISO 8601 timestamp associated with the client request.
        :param tracking_token: A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
        :param session_info:
        :param source_document:
        :param page_size: Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
        :param max_snippet_size: Hint to the server about how many characters long a snippet may be. Server may return less or more.
        :param cursor: Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
        :param result_tab_ids: The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
        :param input_details:
        :param request_options:
        :param timeout_millis: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
        :param disable_spellcheck: Whether or not to disable spellcheck.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchRequest(
            timestamp=timestamp,
            tracking_token=tracking_token,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
            source_document=utils.get_pydantic_model(
                source_document, Optional[models.Document]
            ),
            page_size=page_size,
            max_snippet_size=max_snippet_size,
            query=query,
            cursor=cursor,
            result_tab_ids=result_tab_ids,
            input_details=utils.get_pydantic_model(
                input_details, Optional[models.SearchRequestInputDetails]
            ),
            request_options=utils.get_pydantic_model(
                request_options, Optional[models.SearchRequestOptions]
            ),
            timeout_millis=timeout_millis,
            disable_spellcheck=disable_spellcheck,
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/adminsearch",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.SearchRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="adminsearch",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.SearchResponse, http_res)
        if utils.match_response(http_res, ["403", "422"], "application/json"):
            response_data = unmarshal_json_response(errors.GleanDataErrorData, http_res)
            raise errors.GleanDataError(response_data, http_res)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    async def query_as_admin_async(
        self,
        *,
        query: str,
        timestamp: Optional[datetime] = None,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        source_document: Optional[
            Union[models.Document, models.DocumentTypedDict]
        ] = None,
        page_size: Optional[int] = None,
        max_snippet_size: Optional[int] = None,
        cursor: Optional[str] = None,
        result_tab_ids: Optional[List[str]] = None,
        input_details: Optional[
            Union[
                models.SearchRequestInputDetails,
                models.SearchRequestInputDetailsTypedDict,
            ]
        ] = None,
        request_options: Optional[
            Union[models.SearchRequestOptions, models.SearchRequestOptionsTypedDict]
        ] = None,
        timeout_millis: Optional[int] = None,
        disable_spellcheck: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchResponse:
        r"""Search the index (admin)

        Retrieves results for search query without respect for permissions. This is available only to privileged users.

        :param query: The search terms.
        :param timestamp: The ISO 8601 timestamp associated with the client request.
        :param tracking_token: A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
        :param session_info:
        :param source_document:
        :param page_size: Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
        :param max_snippet_size: Hint to the server about how many characters long a snippet may be. Server may return less or more.
        :param cursor: Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
        :param result_tab_ids: The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
        :param input_details:
        :param request_options:
        :param timeout_millis: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
        :param disable_spellcheck: Whether or not to disable spellcheck.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchRequest(
            timestamp=timestamp,
            tracking_token=tracking_token,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
            source_document=utils.get_pydantic_model(
                source_document, Optional[models.Document]
            ),
            page_size=page_size,
            max_snippet_size=max_snippet_size,
            query=query,
            cursor=cursor,
            result_tab_ids=result_tab_ids,
            input_details=utils.get_pydantic_model(
                input_details, Optional[models.SearchRequestInputDetails]
            ),
            request_options=utils.get_pydantic_model(
                request_options, Optional[models.SearchRequestOptions]
            ),
            timeout_millis=timeout_millis,
            disable_spellcheck=disable_spellcheck,
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/adminsearch",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.SearchRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="adminsearch",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "422", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.SearchResponse, http_res)
        if utils.match_response(http_res, ["403", "422"], "application/json"):
            response_data = unmarshal_json_response(errors.GleanDataErrorData, http_res)
            raise errors.GleanDataError(response_data, http_res)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    def autocomplete(
        self,
        *,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        query: Optional[str] = None,
        datasources_filter: Optional[List[str]] = None,
        datasource: Optional[str] = None,
        result_types: Optional[List[models.AutocompleteRequestResultType]] = None,
        result_size: Optional[int] = None,
        auth_tokens: Optional[
            Union[List[models.AuthToken], List[models.AuthTokenTypedDict]]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AutocompleteResponse:
        r"""Autocomplete

        Retrieve query suggestions, operators and documents for the given partially typed query.

        :param tracking_token:
        :param session_info:
        :param query: Partially typed query.
        :param datasources_filter: Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing.
        :param datasource: Filter to only return results relevant to the given datasource.
        :param result_types: Filter to only return results of the given type(s). All types may be returned if omitted.
        :param result_size: Maximum number of results to be returned. If no value is provided, the backend will cap at 200.
        :param auth_tokens: Auth tokens which may be used for federated results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AutocompleteRequest(
            tracking_token=tracking_token,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
            query=query,
            datasources_filter=datasources_filter,
            datasource=datasource,
            result_types=result_types,
            result_size=result_size,
            auth_tokens=utils.get_pydantic_model(
                auth_tokens, Optional[List[models.AuthToken]]
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/autocomplete",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.AutocompleteRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="autocomplete",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AutocompleteResponse, http_res)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    async def autocomplete_async(
        self,
        *,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        query: Optional[str] = None,
        datasources_filter: Optional[List[str]] = None,
        datasource: Optional[str] = None,
        result_types: Optional[List[models.AutocompleteRequestResultType]] = None,
        result_size: Optional[int] = None,
        auth_tokens: Optional[
            Union[List[models.AuthToken], List[models.AuthTokenTypedDict]]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AutocompleteResponse:
        r"""Autocomplete

        Retrieve query suggestions, operators and documents for the given partially typed query.

        :param tracking_token:
        :param session_info:
        :param query: Partially typed query.
        :param datasources_filter: Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing.
        :param datasource: Filter to only return results relevant to the given datasource.
        :param result_types: Filter to only return results of the given type(s). All types may be returned if omitted.
        :param result_size: Maximum number of results to be returned. If no value is provided, the backend will cap at 200.
        :param auth_tokens: Auth tokens which may be used for federated results.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AutocompleteRequest(
            tracking_token=tracking_token,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
            query=query,
            datasources_filter=datasources_filter,
            datasource=datasource,
            result_types=result_types,
            result_size=result_size,
            auth_tokens=utils.get_pydantic_model(
                auth_tokens, Optional[List[models.AuthToken]]
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/autocomplete",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.AutocompleteRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="autocomplete",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AutocompleteResponse, http_res)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    def retrieve_feed(
        self,
        *,
        categories: Optional[List[models.FeedRequestCategory]] = None,
        request_options: Optional[
            Union[models.FeedRequestOptions, models.FeedRequestOptionsTypedDict]
        ] = None,
        timeout_millis: Optional[int] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.FeedResponse:
        r"""Feed of documents and events

        The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.

        :param categories: Categories of content requested. An allowlist gives flexibility to request content separately or together.
        :param request_options:
        :param timeout_millis: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
        :param session_info:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.FeedRequest(
            categories=categories,
            request_options=utils.get_pydantic_model(
                request_options, Optional[models.FeedRequestOptions]
            ),
            timeout_millis=timeout_millis,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/feed",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.FeedRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="feed",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "408", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.FeedResponse, http_res)
        if utils.match_response(http_res, ["400", "401", "408", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    async def retrieve_feed_async(
        self,
        *,
        categories: Optional[List[models.FeedRequestCategory]] = None,
        request_options: Optional[
            Union[models.FeedRequestOptions, models.FeedRequestOptionsTypedDict]
        ] = None,
        timeout_millis: Optional[int] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.FeedResponse:
        r"""Feed of documents and events

        The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.

        :param categories: Categories of content requested. An allowlist gives flexibility to request content separately or together.
        :param request_options:
        :param timeout_millis: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
        :param session_info:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.FeedRequest(
            categories=categories,
            request_options=utils.get_pydantic_model(
                request_options, Optional[models.FeedRequestOptions]
            ),
            timeout_millis=timeout_millis,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/feed",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.FeedRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="feed",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "408", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.FeedResponse, http_res)
        if utils.match_response(http_res, ["400", "401", "408", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    def recommendations(
        self,
        *,
        timestamp: Optional[datetime] = None,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        source_document: Optional[
            Union[models.Document, models.DocumentTypedDict]
        ] = None,
        page_size: Optional[int] = None,
        max_snippet_size: Optional[int] = None,
        recommendation_document_spec: Optional[
            Union[models.DocumentSpecUnion, models.DocumentSpecUnionTypedDict]
        ] = None,
        request_options: Optional[
            Union[
                models.RecommendationsRequestOptions,
                models.RecommendationsRequestOptionsTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ResultsResponse]:
        r"""Recommend documents

        Retrieve recommended documents for the given URL or Glean Document ID.

        :param timestamp: The ISO 8601 timestamp associated with the client request.
        :param tracking_token: A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
        :param session_info:
        :param source_document:
        :param page_size: Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
        :param max_snippet_size: Hint to the server about how many characters long a snippet may be. Server may return less or more.
        :param recommendation_document_spec:
        :param request_options:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RecommendationsRequest(
            timestamp=timestamp,
            tracking_token=tracking_token,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
            source_document=utils.get_pydantic_model(
                source_document, Optional[models.Document]
            ),
            page_size=page_size,
            max_snippet_size=max_snippet_size,
            recommendation_document_spec=utils.get_pydantic_model(
                recommendation_document_spec, Optional[models.DocumentSpecUnion]
            ),
            request_options=utils.get_pydantic_model(
                request_options, Optional[models.RecommendationsRequestOptions]
            ),
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/recommendations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.RecommendationsRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="recommendations",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ResultsResponse, http_res)
        if utils.match_response(http_res, ["202", "204"], "*"):
            return None
        if utils.match_response(http_res, ["400", "401", "403", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    async def recommendations_async(
        self,
        *,
        timestamp: Optional[datetime] = None,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        source_document: Optional[
            Union[models.Document, models.DocumentTypedDict]
        ] = None,
        page_size: Optional[int] = None,
        max_snippet_size: Optional[int] = None,
        recommendation_document_spec: Optional[
            Union[models.DocumentSpecUnion, models.DocumentSpecUnionTypedDict]
        ] = None,
        request_options: Optional[
            Union[
                models.RecommendationsRequestOptions,
                models.RecommendationsRequestOptionsTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.ResultsResponse]:
        r"""Recommend documents

        Retrieve recommended documents for the given URL or Glean Document ID.

        :param timestamp: The ISO 8601 timestamp associated with the client request.
        :param tracking_token: A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
        :param session_info:
        :param source_document:
        :param page_size: Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
        :param max_snippet_size: Hint to the server about how many characters long a snippet may be. Server may return less or more.
        :param recommendation_document_spec:
        :param request_options:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.RecommendationsRequest(
            timestamp=timestamp,
            tracking_token=tracking_token,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
            source_document=utils.get_pydantic_model(
                source_document, Optional[models.Document]
            ),
            page_size=page_size,
            max_snippet_size=max_snippet_size,
            recommendation_document_spec=utils.get_pydantic_model(
                recommendation_document_spec, Optional[models.DocumentSpecUnion]
            ),
            request_options=utils.get_pydantic_model(
                request_options, Optional[models.RecommendationsRequestOptions]
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/recommendations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.RecommendationsRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="recommendations",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ResultsResponse, http_res)
        if utils.match_response(http_res, ["202", "204"], "*"):
            return None
        if utils.match_response(http_res, ["400", "401", "403", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    def query(
        self,
        *,
        query: str,
        timestamp: Optional[datetime] = None,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        source_document: Optional[
            Union[models.Document, models.DocumentTypedDict]
        ] = None,
        page_size: Optional[int] = None,
        max_snippet_size: Optional[int] = None,
        cursor: Optional[str] = None,
        result_tab_ids: Optional[List[str]] = None,
        input_details: Optional[
            Union[
                models.SearchRequestInputDetails,
                models.SearchRequestInputDetailsTypedDict,
            ]
        ] = None,
        request_options: Optional[
            Union[models.SearchRequestOptions, models.SearchRequestOptionsTypedDict]
        ] = None,
        timeout_millis: Optional[int] = None,
        disable_spellcheck: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchResponse:
        r"""Search

        Retrieve results from the index for the given query and filters.

        :param query: The search terms.
        :param timestamp: The ISO 8601 timestamp associated with the client request.
        :param tracking_token: A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
        :param session_info:
        :param source_document:
        :param page_size: Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
        :param max_snippet_size: Hint to the server about how many characters long a snippet may be. Server may return less or more.
        :param cursor: Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
        :param result_tab_ids: The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
        :param input_details:
        :param request_options:
        :param timeout_millis: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
        :param disable_spellcheck: Whether or not to disable spellcheck.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchRequest(
            timestamp=timestamp,
            tracking_token=tracking_token,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
            source_document=utils.get_pydantic_model(
                source_document, Optional[models.Document]
            ),
            page_size=page_size,
            max_snippet_size=max_snippet_size,
            query=query,
            cursor=cursor,
            result_tab_ids=result_tab_ids,
            input_details=utils.get_pydantic_model(
                input_details, Optional[models.SearchRequestInputDetails]
            ),
            request_options=utils.get_pydantic_model(
                request_options, Optional[models.SearchRequestOptions]
            ),
            timeout_millis=timeout_millis,
            disable_spellcheck=disable_spellcheck,
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/search",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.SearchRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="search",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "408", "422", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.SearchResponse, http_res)
        if utils.match_response(http_res, ["403", "422"], "application/json"):
            response_data = unmarshal_json_response(errors.GleanDataErrorData, http_res)
            raise errors.GleanDataError(response_data, http_res)
        if utils.match_response(http_res, ["400", "401", "408", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    async def query_async(
        self,
        *,
        query: str,
        timestamp: Optional[datetime] = None,
        tracking_token: Optional[str] = None,
        session_info: Optional[
            Union[models.SessionInfo, models.SessionInfoTypedDict]
        ] = None,
        source_document: Optional[
            Union[models.Document, models.DocumentTypedDict]
        ] = None,
        page_size: Optional[int] = None,
        max_snippet_size: Optional[int] = None,
        cursor: Optional[str] = None,
        result_tab_ids: Optional[List[str]] = None,
        input_details: Optional[
            Union[
                models.SearchRequestInputDetails,
                models.SearchRequestInputDetailsTypedDict,
            ]
        ] = None,
        request_options: Optional[
            Union[models.SearchRequestOptions, models.SearchRequestOptionsTypedDict]
        ] = None,
        timeout_millis: Optional[int] = None,
        disable_spellcheck: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchResponse:
        r"""Search

        Retrieve results from the index for the given query and filters.

        :param query: The search terms.
        :param timestamp: The ISO 8601 timestamp associated with the client request.
        :param tracking_token: A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
        :param session_info:
        :param source_document:
        :param page_size: Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
        :param max_snippet_size: Hint to the server about how many characters long a snippet may be. Server may return less or more.
        :param cursor: Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
        :param result_tab_ids: The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
        :param input_details:
        :param request_options:
        :param timeout_millis: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
        :param disable_spellcheck: Whether or not to disable spellcheck.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchRequest(
            timestamp=timestamp,
            tracking_token=tracking_token,
            session_info=utils.get_pydantic_model(
                session_info, Optional[models.SessionInfo]
            ),
            source_document=utils.get_pydantic_model(
                source_document, Optional[models.Document]
            ),
            page_size=page_size,
            max_snippet_size=max_snippet_size,
            query=query,
            cursor=cursor,
            result_tab_ids=result_tab_ids,
            input_details=utils.get_pydantic_model(
                input_details, Optional[models.SearchRequestInputDetails]
            ),
            request_options=utils.get_pydantic_model(
                request_options, Optional[models.SearchRequestOptions]
            ),
            timeout_millis=timeout_millis,
            disable_spellcheck=disable_spellcheck,
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/search",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.SearchRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="search",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "408", "422", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.SearchResponse, http_res)
        if utils.match_response(http_res, ["403", "422"], "application/json"):
            response_data = unmarshal_json_response(errors.GleanDataErrorData, http_res)
            raise errors.GleanDataError(response_data, http_res)
        if utils.match_response(http_res, ["400", "401", "408", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)
