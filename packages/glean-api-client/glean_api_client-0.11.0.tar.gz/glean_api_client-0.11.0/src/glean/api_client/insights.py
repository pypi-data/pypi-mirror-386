"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from glean.api_client import errors, models, utils
from glean.api_client._hooks import HookContext
from glean.api_client.types import OptionalNullable, UNSET
from glean.api_client.utils import get_security_from_env
from glean.api_client.utils.unmarshal_json_response import unmarshal_json_response
from typing import List, Mapping, Optional, Union


class Insights(BaseSDK):
    def retrieve(
        self,
        *,
        overview_request: Optional[
            Union[
                models.InsightsOverviewRequest, models.InsightsOverviewRequestTypedDict
            ]
        ] = None,
        assistant_request: Optional[
            Union[
                models.InsightsAssistantRequest,
                models.InsightsAssistantRequestTypedDict,
            ]
        ] = None,
        agents_request: Optional[
            Union[
                models.AgentsInsightsV2Request, models.AgentsInsightsV2RequestTypedDict
            ]
        ] = None,
        disable_per_user_insights: Optional[bool] = None,
        categories: Optional[List[models.InsightsRequestCategory]] = None,
        departments: Optional[List[str]] = None,
        day_range: Optional[Union[models.Period, models.PeriodTypedDict]] = None,
        ai_app_request_options: Optional[
            Union[
                models.InsightsAiAppRequestOptions,
                models.InsightsAiAppRequestOptionsTypedDict,
            ]
        ] = None,
        agents_request_options: Optional[
            Union[
                models.InsightsAgentsRequestOptions,
                models.InsightsAgentsRequestOptionsTypedDict,
            ]
        ] = None,
        assistant_activity_types: Optional[List[models.AssistantActivityType]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.InsightsResponse:
        r"""Get insights

        Gets the aggregate usage insights data displayed in the Insights Dashboards.

        :param overview_request:
        :param assistant_request:
        :param agents_request:
        :param disable_per_user_insights: If true, suppresses the generation of per-user Insights in the response. Default is false.
        :param categories: Categories of data requested. Request can include single or multiple types.
        :param departments: Departments that the data is requested for. If this is empty, corresponds to whole company.
        :param day_range:
        :param ai_app_request_options:
        :param agents_request_options:
        :param assistant_activity_types: Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.InsightsRequest(
            overview_request=utils.get_pydantic_model(
                overview_request, Optional[models.InsightsOverviewRequest]
            ),
            assistant_request=utils.get_pydantic_model(
                assistant_request, Optional[models.InsightsAssistantRequest]
            ),
            agents_request=utils.get_pydantic_model(
                agents_request, Optional[models.AgentsInsightsV2Request]
            ),
            disable_per_user_insights=disable_per_user_insights,
            categories=categories,
            departments=departments,
            day_range=utils.get_pydantic_model(day_range, Optional[models.Period]),
            ai_app_request_options=utils.get_pydantic_model(
                ai_app_request_options, Optional[models.InsightsAiAppRequestOptions]
            ),
            agents_request_options=utils.get_pydantic_model(
                agents_request_options, Optional[models.InsightsAgentsRequestOptions]
            ),
            assistant_activity_types=assistant_activity_types,
        )

        req = self._build_request(
            method="POST",
            path="/rest/api/v1/insights",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.InsightsRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="insights",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.InsightsResponse, http_res)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)

    async def retrieve_async(
        self,
        *,
        overview_request: Optional[
            Union[
                models.InsightsOverviewRequest, models.InsightsOverviewRequestTypedDict
            ]
        ] = None,
        assistant_request: Optional[
            Union[
                models.InsightsAssistantRequest,
                models.InsightsAssistantRequestTypedDict,
            ]
        ] = None,
        agents_request: Optional[
            Union[
                models.AgentsInsightsV2Request, models.AgentsInsightsV2RequestTypedDict
            ]
        ] = None,
        disable_per_user_insights: Optional[bool] = None,
        categories: Optional[List[models.InsightsRequestCategory]] = None,
        departments: Optional[List[str]] = None,
        day_range: Optional[Union[models.Period, models.PeriodTypedDict]] = None,
        ai_app_request_options: Optional[
            Union[
                models.InsightsAiAppRequestOptions,
                models.InsightsAiAppRequestOptionsTypedDict,
            ]
        ] = None,
        agents_request_options: Optional[
            Union[
                models.InsightsAgentsRequestOptions,
                models.InsightsAgentsRequestOptionsTypedDict,
            ]
        ] = None,
        assistant_activity_types: Optional[List[models.AssistantActivityType]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.InsightsResponse:
        r"""Get insights

        Gets the aggregate usage insights data displayed in the Insights Dashboards.

        :param overview_request:
        :param assistant_request:
        :param agents_request:
        :param disable_per_user_insights: If true, suppresses the generation of per-user Insights in the response. Default is false.
        :param categories: Categories of data requested. Request can include single or multiple types.
        :param departments: Departments that the data is requested for. If this is empty, corresponds to whole company.
        :param day_range:
        :param ai_app_request_options:
        :param agents_request_options:
        :param assistant_activity_types: Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.InsightsRequest(
            overview_request=utils.get_pydantic_model(
                overview_request, Optional[models.InsightsOverviewRequest]
            ),
            assistant_request=utils.get_pydantic_model(
                assistant_request, Optional[models.InsightsAssistantRequest]
            ),
            agents_request=utils.get_pydantic_model(
                agents_request, Optional[models.AgentsInsightsV2Request]
            ),
            disable_per_user_insights=disable_per_user_insights,
            categories=categories,
            departments=departments,
            day_range=utils.get_pydantic_model(day_range, Optional[models.Period]),
            ai_app_request_options=utils.get_pydantic_model(
                ai_app_request_options, Optional[models.InsightsAiAppRequestOptions]
            ),
            agents_request_options=utils.get_pydantic_model(
                agents_request_options, Optional[models.InsightsAgentsRequestOptions]
            ),
            assistant_activity_types=assistant_activity_types,
        )

        req = self._build_request_async(
            method="POST",
            path="/rest/api/v1/insights",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.InsightsRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="insights",
                oauth2_scopes=None,
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "429", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.InsightsResponse, http_res)
        if utils.match_response(http_res, ["400", "401", "429", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GleanError("API error occurred", http_res, http_res_text)

        raise errors.GleanError("Unexpected response received", http_res)
