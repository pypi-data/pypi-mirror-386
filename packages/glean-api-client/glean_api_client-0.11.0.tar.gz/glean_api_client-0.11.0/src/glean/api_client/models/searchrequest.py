"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .document import Document, DocumentTypedDict
from .searchrequestinputdetails import (
    SearchRequestInputDetails,
    SearchRequestInputDetailsTypedDict,
)
from .searchrequestoptions import SearchRequestOptions, SearchRequestOptionsTypedDict
from .sessioninfo import SessionInfo, SessionInfoTypedDict
from datetime import datetime
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SearchRequestTypedDict(TypedDict):
    query: str
    r"""The search terms."""
    timestamp: NotRequired[datetime]
    r"""The ISO 8601 timestamp associated with the client request."""
    tracking_token: NotRequired[str]
    r"""A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs."""
    session_info: NotRequired[SessionInfoTypedDict]
    source_document: NotRequired[DocumentTypedDict]
    page_size: NotRequired[int]
    r"""Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize."""
    max_snippet_size: NotRequired[int]
    r"""Hint to the server about how many characters long a snippet may be. Server may return less or more."""
    cursor: NotRequired[str]
    r"""Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."""
    result_tab_ids: NotRequired[List[str]]
    r"""The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict."""
    input_details: NotRequired[SearchRequestInputDetailsTypedDict]
    request_options: NotRequired[SearchRequestOptionsTypedDict]
    timeout_millis: NotRequired[int]
    r"""Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer."""
    disable_spellcheck: NotRequired[bool]
    r"""Whether or not to disable spellcheck."""


class SearchRequest(BaseModel):
    query: str
    r"""The search terms."""

    timestamp: Optional[datetime] = None
    r"""The ISO 8601 timestamp associated with the client request."""

    tracking_token: Annotated[Optional[str], pydantic.Field(alias="trackingToken")] = (
        None
    )
    r"""A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs."""

    session_info: Annotated[
        Optional[SessionInfo], pydantic.Field(alias="sessionInfo")
    ] = None

    source_document: Annotated[
        Optional[Document], pydantic.Field(alias="sourceDocument")
    ] = None

    page_size: Annotated[Optional[int], pydantic.Field(alias="pageSize")] = None
    r"""Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize."""

    max_snippet_size: Annotated[
        Optional[int], pydantic.Field(alias="maxSnippetSize")
    ] = None
    r"""Hint to the server about how many characters long a snippet may be. Server may return less or more."""

    cursor: Optional[str] = None
    r"""Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."""

    result_tab_ids: Annotated[
        Optional[List[str]], pydantic.Field(alias="resultTabIds")
    ] = None
    r"""The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict."""

    input_details: Annotated[
        Optional[SearchRequestInputDetails], pydantic.Field(alias="inputDetails")
    ] = None

    request_options: Annotated[
        Optional[SearchRequestOptions], pydantic.Field(alias="requestOptions")
    ] = None

    timeout_millis: Annotated[Optional[int], pydantic.Field(alias="timeoutMillis")] = (
        None
    )
    r"""Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer."""

    disable_spellcheck: Annotated[
        Optional[bool], pydantic.Field(alias="disableSpellcheck")
    ] = None
    r"""Whether or not to disable spellcheck."""
