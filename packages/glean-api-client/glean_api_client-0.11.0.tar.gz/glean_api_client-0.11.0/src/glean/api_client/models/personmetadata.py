"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .anonymousevent import AnonymousEvent, AnonymousEventTypedDict
from .badge import Badge, BadgeTypedDict
from .datasourceprofile import DatasourceProfile, DatasourceProfileTypedDict
from .permissions import Permissions, PermissionsTypedDict
from .persondistance import PersonDistance, PersonDistanceTypedDict
from .personteam import PersonTeam, PersonTeamTypedDict
from .socialnetwork import SocialNetwork, SocialNetworkTypedDict
from .structuredlocation import StructuredLocation, StructuredLocationTypedDict
from datetime import date, datetime
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import Dict, List, Optional, TYPE_CHECKING
from typing_extensions import Annotated, NotRequired, TypedDict

if TYPE_CHECKING:
    from .customfielddata import CustomFieldData, CustomFieldDataTypedDict
    from .inviteinfo import InviteInfo, InviteInfoTypedDict
    from .person import Person, PersonTypedDict
    from .querysuggestionlist import QuerySuggestionList, QuerySuggestionListTypedDict


class PersonMetadataType(str, Enum):
    FULL_TIME = "FULL_TIME"
    CONTRACTOR = "CONTRACTOR"
    NON_EMPLOYEE = "NON_EMPLOYEE"
    FORMER_EMPLOYEE = "FORMER_EMPLOYEE"


class PersonMetadataTypedDict(TypedDict):
    type: NotRequired[PersonMetadataType]
    first_name: NotRequired[str]
    r"""The first name of the person"""
    last_name: NotRequired[str]
    r"""The last name of the person"""
    title: NotRequired[str]
    r"""Job title."""
    business_unit: NotRequired[str]
    r"""Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."""
    department: NotRequired[str]
    r"""An organizational unit where everyone has a similar task, e.g. `Engineering`."""
    teams: NotRequired[List[PersonTeamTypedDict]]
    r"""Info about the employee's team(s)."""
    department_count: NotRequired[int]
    r"""The number of people in this person's department."""
    email: NotRequired[str]
    r"""The user's primary email address"""
    alias_emails: NotRequired[List[str]]
    r"""Additional email addresses of this user beyond the primary, if any."""
    location: NotRequired[str]
    r"""User facing string representing the person's location."""
    structured_location: NotRequired[StructuredLocationTypedDict]
    r"""Detailed location with information about country, state, city etc."""
    external_profile_link: NotRequired[str]
    r"""Link to a customer's internal profile page. This is set to '#' when no link is desired."""
    manager: NotRequired["PersonTypedDict"]
    management_chain: NotRequired[List["PersonTypedDict"]]
    r"""The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager."""
    phone: NotRequired[str]
    r"""Phone number as a number string."""
    timezone: NotRequired[str]
    r"""The timezone of the person. E.g. \"Pacific Daylight Time\"."""
    timezone_offset: NotRequired[int]
    r"""The offset of the person's timezone in seconds from UTC."""
    photo_url: NotRequired[str]
    r"""The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."""
    unedited_photo_url: NotRequired[str]
    r"""The original photo URL of the person's avatar before any edits they made are applied"""
    banner_url: NotRequired[str]
    r"""The URL of the person's banner photo."""
    reports: NotRequired[List["PersonTypedDict"]]
    start_date: NotRequired[date]
    r"""The date when the employee started."""
    end_date: NotRequired[date]
    r"""If a former employee, the last date of employment."""
    bio: NotRequired[str]
    r"""Short biography or mission statement of the employee."""
    pronoun: NotRequired[str]
    r"""She/her, He/his or other pronoun."""
    org_size_count: NotRequired[int]
    r"""The total recursive size of the people reporting to this person, or 1"""
    direct_reports_count: NotRequired[int]
    r"""The total number of people who directly report to this person, or 0"""
    preferred_name: NotRequired[str]
    r"""The preferred name of the person, or a nickname."""
    social_network: NotRequired[List[SocialNetworkTypedDict]]
    r"""List of social network profiles."""
    datasource_profile: NotRequired[List[DatasourceProfileTypedDict]]
    r"""List of profiles this user has in different datasources / tools that they use."""
    query_suggestions: NotRequired["QuerySuggestionListTypedDict"]
    people_distance: NotRequired[List[PersonDistanceTypedDict]]
    r"""List of people and distances to those people from this person. Optionally with metadata."""
    invite_info: NotRequired["InviteInfoTypedDict"]
    r"""Information regarding the invite status of a person."""
    is_signed_up: NotRequired[bool]
    r"""Whether the user has signed into Glean at least once."""
    last_extension_use: NotRequired[datetime]
    r"""The last time the user has used the Glean extension in ISO 8601 format."""
    permissions: NotRequired[PermissionsTypedDict]
    r"""Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
    When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
    """
    custom_fields: NotRequired[List["CustomFieldDataTypedDict"]]
    r"""User customizable fields for additional people information."""
    logging_id: NotRequired[str]
    r"""The logging id of the person used in scrubbed logs, tracking GA metrics."""
    start_date_percentile: NotRequired[float]
    r"""Percentage of the company that started strictly after this person. Between [0,100)."""
    busy_events: NotRequired[List[AnonymousEventTypedDict]]
    r"""Intervals of busy time for this person, along with the type of event they're busy with."""
    profile_bool_settings: NotRequired[Dict[str, bool]]
    r"""flag settings to indicate user profile settings for certain items"""
    badges: NotRequired[List[BadgeTypedDict]]
    r"""The badges that a user has earned over their lifetime."""
    is_org_root: NotRequired[bool]
    r"""Whether this person is a \"root\" node in their organization's hierarchy."""


class PersonMetadata(BaseModel):
    type: Optional[PersonMetadataType] = None

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None
    r"""The first name of the person"""

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None
    r"""The last name of the person"""

    title: Optional[str] = None
    r"""Job title."""

    business_unit: Annotated[Optional[str], pydantic.Field(alias="businessUnit")] = None
    r"""Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."""

    department: Optional[str] = None
    r"""An organizational unit where everyone has a similar task, e.g. `Engineering`."""

    teams: Optional[List[PersonTeam]] = None
    r"""Info about the employee's team(s)."""

    department_count: Annotated[
        Optional[int], pydantic.Field(alias="departmentCount")
    ] = None
    r"""The number of people in this person's department."""

    email: Optional[str] = None
    r"""The user's primary email address"""

    alias_emails: Annotated[
        Optional[List[str]], pydantic.Field(alias="aliasEmails")
    ] = None
    r"""Additional email addresses of this user beyond the primary, if any."""

    location: Optional[str] = None
    r"""User facing string representing the person's location."""

    structured_location: Annotated[
        Optional[StructuredLocation], pydantic.Field(alias="structuredLocation")
    ] = None
    r"""Detailed location with information about country, state, city etc."""

    external_profile_link: Annotated[
        Optional[str], pydantic.Field(alias="externalProfileLink")
    ] = None
    r"""Link to a customer's internal profile page. This is set to '#' when no link is desired."""

    manager: Optional["Person"] = None

    management_chain: Annotated[
        Optional[List["Person"]], pydantic.Field(alias="managementChain")
    ] = None
    r"""The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager."""

    phone: Optional[str] = None
    r"""Phone number as a number string."""

    timezone: Optional[str] = None
    r"""The timezone of the person. E.g. \"Pacific Daylight Time\"."""

    timezone_offset: Annotated[
        Optional[int], pydantic.Field(alias="timezoneOffset")
    ] = None
    r"""The offset of the person's timezone in seconds from UTC."""

    photo_url: Annotated[Optional[str], pydantic.Field(alias="photoUrl")] = None
    r"""The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."""

    unedited_photo_url: Annotated[
        Optional[str], pydantic.Field(alias="uneditedPhotoUrl")
    ] = None
    r"""The original photo URL of the person's avatar before any edits they made are applied"""

    banner_url: Annotated[Optional[str], pydantic.Field(alias="bannerUrl")] = None
    r"""The URL of the person's banner photo."""

    reports: Optional[List["Person"]] = None

    start_date: Annotated[Optional[date], pydantic.Field(alias="startDate")] = None
    r"""The date when the employee started."""

    end_date: Annotated[Optional[date], pydantic.Field(alias="endDate")] = None
    r"""If a former employee, the last date of employment."""

    bio: Optional[str] = None
    r"""Short biography or mission statement of the employee."""

    pronoun: Optional[str] = None
    r"""She/her, He/his or other pronoun."""

    org_size_count: Annotated[Optional[int], pydantic.Field(alias="orgSizeCount")] = (
        None
    )
    r"""The total recursive size of the people reporting to this person, or 1"""

    direct_reports_count: Annotated[
        Optional[int], pydantic.Field(alias="directReportsCount")
    ] = None
    r"""The total number of people who directly report to this person, or 0"""

    preferred_name: Annotated[Optional[str], pydantic.Field(alias="preferredName")] = (
        None
    )
    r"""The preferred name of the person, or a nickname."""

    social_network: Annotated[
        Optional[List[SocialNetwork]], pydantic.Field(alias="socialNetwork")
    ] = None
    r"""List of social network profiles."""

    datasource_profile: Annotated[
        Optional[List[DatasourceProfile]], pydantic.Field(alias="datasourceProfile")
    ] = None
    r"""List of profiles this user has in different datasources / tools that they use."""

    query_suggestions: Annotated[
        Optional["QuerySuggestionList"], pydantic.Field(alias="querySuggestions")
    ] = None

    people_distance: Annotated[
        Optional[List[PersonDistance]], pydantic.Field(alias="peopleDistance")
    ] = None
    r"""List of people and distances to those people from this person. Optionally with metadata."""

    invite_info: Annotated[
        Optional["InviteInfo"], pydantic.Field(alias="inviteInfo")
    ] = None
    r"""Information regarding the invite status of a person."""

    is_signed_up: Annotated[Optional[bool], pydantic.Field(alias="isSignedUp")] = None
    r"""Whether the user has signed into Glean at least once."""

    last_extension_use: Annotated[
        Optional[datetime], pydantic.Field(alias="lastExtensionUse")
    ] = None
    r"""The last time the user has used the Glean extension in ISO 8601 format."""

    permissions: Optional[Permissions] = None
    r"""Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
    When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
    """

    custom_fields: Annotated[
        Optional[List["CustomFieldData"]], pydantic.Field(alias="customFields")
    ] = None
    r"""User customizable fields for additional people information."""

    logging_id: Annotated[Optional[str], pydantic.Field(alias="loggingId")] = None
    r"""The logging id of the person used in scrubbed logs, tracking GA metrics."""

    start_date_percentile: Annotated[
        Optional[float], pydantic.Field(alias="startDatePercentile")
    ] = None
    r"""Percentage of the company that started strictly after this person. Between [0,100)."""

    busy_events: Annotated[
        Optional[List[AnonymousEvent]], pydantic.Field(alias="busyEvents")
    ] = None
    r"""Intervals of busy time for this person, along with the type of event they're busy with."""

    profile_bool_settings: Annotated[
        Optional[Dict[str, bool]], pydantic.Field(alias="profileBoolSettings")
    ] = None
    r"""flag settings to indicate user profile settings for certain items"""

    badges: Optional[List[Badge]] = None
    r"""The badges that a user has earned over their lifetime."""

    is_org_root: Annotated[Optional[bool], pydantic.Field(alias="isOrgRoot")] = None
    r"""Whether this person is a \"root\" node in their organization's hierarchy."""
