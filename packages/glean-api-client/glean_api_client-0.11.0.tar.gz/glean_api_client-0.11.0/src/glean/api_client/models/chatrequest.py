"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .agentconfig import AgentConfig, AgentConfigTypedDict
from .chatmessage import ChatMessage, ChatMessageTypedDict
from .chatrestrictionfilters import (
    ChatRestrictionFilters,
    ChatRestrictionFiltersTypedDict,
)
from .sessioninfo import SessionInfo, SessionInfoTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ChatRequestTypedDict(TypedDict):
    r"""The minimal set of fields that form a chat request."""

    messages: List[ChatMessageTypedDict]
    r"""A list of chat messages, from most recent to least recent. At least one message must specify a USER author."""
    session_info: NotRequired[SessionInfoTypedDict]
    save_chat: NotRequired[bool]
    r"""Save the current interaction as a Chat for the user to access and potentially continue later."""
    chat_id: NotRequired[str]
    r"""The id of the Chat that context should be retrieved from and messages added to. An empty id starts a new Chat, and the Chat is saved if saveChat is true."""
    agent_config: NotRequired[AgentConfigTypedDict]
    r"""Describes the agent that executes the request."""
    inclusions: NotRequired[ChatRestrictionFiltersTypedDict]
    exclusions: NotRequired[ChatRestrictionFiltersTypedDict]
    timeout_millis: NotRequired[int]
    r"""Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer."""
    application_id: NotRequired[str]
    r"""The ID of the application this request originates from, used to determine the configuration of underlying chat processes. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used."""
    agent_id: NotRequired[str]
    r"""The ID of the Agent that should process this chat request. Only Agents with trigger set to 'User chat message' are invokable through this API. If not specified, the default chat experience will be used."""
    stream: NotRequired[bool]
    r"""If set, response lines will be streamed one-by-one as they become available. Each will be a ChatResponse, formatted as JSON, and separated by a new line. If false, the entire response will be returned at once. Note that if this is set and the model being used does not support streaming, the model's response will not be streamed, but other messages from the endpoint still will be."""


class ChatRequest(BaseModel):
    r"""The minimal set of fields that form a chat request."""

    messages: List[ChatMessage]
    r"""A list of chat messages, from most recent to least recent. At least one message must specify a USER author."""

    session_info: Annotated[
        Optional[SessionInfo], pydantic.Field(alias="sessionInfo")
    ] = None

    save_chat: Annotated[Optional[bool], pydantic.Field(alias="saveChat")] = None
    r"""Save the current interaction as a Chat for the user to access and potentially continue later."""

    chat_id: Annotated[Optional[str], pydantic.Field(alias="chatId")] = None
    r"""The id of the Chat that context should be retrieved from and messages added to. An empty id starts a new Chat, and the Chat is saved if saveChat is true."""

    agent_config: Annotated[
        Optional[AgentConfig], pydantic.Field(alias="agentConfig")
    ] = None
    r"""Describes the agent that executes the request."""

    inclusions: Optional[ChatRestrictionFilters] = None

    exclusions: Optional[ChatRestrictionFilters] = None

    timeout_millis: Annotated[Optional[int], pydantic.Field(alias="timeoutMillis")] = (
        None
    )
    r"""Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer."""

    application_id: Annotated[Optional[str], pydantic.Field(alias="applicationId")] = (
        None
    )
    r"""The ID of the application this request originates from, used to determine the configuration of underlying chat processes. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used."""

    agent_id: Annotated[Optional[str], pydantic.Field(alias="agentId")] = None
    r"""The ID of the Agent that should process this chat request. Only Agents with trigger set to 'User chat message' are invokable through this API. If not specified, the default chat experience will be used."""

    stream: Optional[bool] = None
    r"""If set, response lines will be streamed one-by-one as they become available. Each will be a ChatResponse, formatted as JSON, and separated by a new line. If false, the entire response will be returned at once. Note that if this is set and the model being used does not support streaming, the model's response will not be streamed, but other messages from the endpoint still will be."""
