"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .facetfiltervalue import FacetFilterValue, FacetFilterValueTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class FacetFilterTypedDict(TypedDict):
    field_name: NotRequired[str]
    values: NotRequired[List[FacetFilterValueTypedDict]]
    r"""Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet."""
    group_name: NotRequired[str]
    r"""Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet."""


class FacetFilter(BaseModel):
    field_name: Annotated[Optional[str], pydantic.Field(alias="fieldName")] = None

    values: Optional[List[FacetFilterValue]] = None
    r"""Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet."""

    group_name: Annotated[Optional[str], pydantic.Field(alias="groupName")] = None
    r"""Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet."""
