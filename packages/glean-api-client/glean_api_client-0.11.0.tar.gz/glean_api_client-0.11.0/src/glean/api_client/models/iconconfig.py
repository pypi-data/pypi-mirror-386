"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class IconType(str, Enum):
    COLLECTION = "COLLECTION"
    CUSTOM = "CUSTOM"
    DATASOURCE = "DATASOURCE"
    DATASOURCE_INSTANCE = "DATASOURCE_INSTANCE"
    FAVICON = "FAVICON"
    FILE_TYPE = "FILE_TYPE"
    GENERATED_BACKGROUND = "GENERATED_BACKGROUND"
    GLYPH = "GLYPH"
    MIME_TYPE = "MIME_TYPE"
    NO_ICON = "NO_ICON"
    PERSON = "PERSON"
    REACTIONS = "REACTIONS"
    URL = "URL"


class IconConfigTypedDict(TypedDict):
    r"""Defines how to render an icon"""

    generated_background_color_key: NotRequired[str]
    background_color: NotRequired[str]
    color: NotRequired[str]
    key: NotRequired[str]
    icon_type: NotRequired[IconType]
    masked: NotRequired[bool]
    r"""Whether the icon should be masked based on current theme."""
    name: NotRequired[str]
    r"""The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons."""
    url: NotRequired[str]
    r"""The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons."""


class IconConfig(BaseModel):
    r"""Defines how to render an icon"""

    generated_background_color_key: Annotated[
        Optional[str], pydantic.Field(alias="generatedBackgroundColorKey")
    ] = None

    background_color: Annotated[
        Optional[str], pydantic.Field(alias="backgroundColor")
    ] = None

    color: Optional[str] = None

    key: Optional[str] = None

    icon_type: Annotated[Optional[IconType], pydantic.Field(alias="iconType")] = None

    masked: Optional[bool] = None
    r"""Whether the icon should be masked based on current theme."""

    name: Optional[str] = None
    r"""The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons."""

    url: Optional[str] = None
    r"""The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons."""
