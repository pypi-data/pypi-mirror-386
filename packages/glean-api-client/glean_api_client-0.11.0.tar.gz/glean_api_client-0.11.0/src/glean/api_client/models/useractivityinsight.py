"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countinfo import CountInfo, CountInfoTypedDict
from .person import Person, PersonTypedDict
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ActivityEnum(str, Enum):
    r"""Activity e.g. search, home page visit or all."""

    ALL = "ALL"
    SEARCH = "SEARCH"


class UserActivityInsightTypedDict(TypedDict):
    user: PersonTypedDict
    activity: ActivityEnum
    r"""Activity e.g. search, home page visit or all."""
    last_activity_timestamp: NotRequired[int]
    r"""Unix timestamp of the last activity (in seconds since epoch UTC)."""
    activity_count: NotRequired[CountInfoTypedDict]
    active_day_count: NotRequired[CountInfoTypedDict]


class UserActivityInsight(BaseModel):
    user: Person

    activity: ActivityEnum
    r"""Activity e.g. search, home page visit or all."""

    last_activity_timestamp: Annotated[
        Optional[int], pydantic.Field(alias="lastActivityTimestamp")
    ] = None
    r"""Unix timestamp of the last activity (in seconds since epoch UTC)."""

    activity_count: Annotated[
        Optional[CountInfo], pydantic.Field(alias="activityCount")
    ] = None

    active_day_count: Annotated[
        Optional[CountInfo], pydantic.Field(alias="activeDayCount")
    ] = None
