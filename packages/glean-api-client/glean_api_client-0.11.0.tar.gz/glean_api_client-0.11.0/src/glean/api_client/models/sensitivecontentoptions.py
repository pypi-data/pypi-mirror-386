"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .sensitiveexpression import SensitiveExpression, SensitiveExpressionTypedDict
from .sensitiveinfotype import SensitiveInfoType, SensitiveInfoTypeTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SensitiveContentOptionsTypedDict(TypedDict):
    r"""Options for defining sensitive content within scanned documents."""

    sensitive_info_types: NotRequired[List[SensitiveInfoTypeTypedDict]]
    r"""Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types."""
    sensitive_terms: NotRequired[List[SensitiveExpressionTypedDict]]
    r"""list of words and phrases to consider as sensitive content"""
    sensitive_regexes: NotRequired[List[SensitiveExpressionTypedDict]]
    r"""list of regular expressions to consider as sensitive content"""


class SensitiveContentOptions(BaseModel):
    r"""Options for defining sensitive content within scanned documents."""

    sensitive_info_types: Annotated[
        Optional[List[SensitiveInfoType]], pydantic.Field(alias="sensitiveInfoTypes")
    ] = None
    r"""Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types."""

    sensitive_terms: Annotated[
        Optional[List[SensitiveExpression]], pydantic.Field(alias="sensitiveTerms")
    ] = None
    r"""list of words and phrases to consider as sensitive content"""

    sensitive_regexes: Annotated[
        Optional[List[SensitiveExpression]], pydantic.Field(alias="sensitiveRegexes")
    ] = None
    r"""list of regular expressions to consider as sensitive content"""
