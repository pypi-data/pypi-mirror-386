"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CollectionItemDescriptorItemType(str, Enum):
    DOCUMENT = "DOCUMENT"
    TEXT = "TEXT"
    URL = "URL"


class CollectionItemDescriptorTypedDict(TypedDict):
    name: NotRequired[str]
    r"""The optional name of the Collection item."""
    description: NotRequired[str]
    r"""A helpful description of why this CollectionItem is in the Collection that it's in."""
    icon: NotRequired[str]
    r"""The emoji icon for this CollectionItem. Only used for Text type items."""
    url: NotRequired[str]
    r"""The URL of the item being added."""
    document_id: NotRequired[str]
    r"""The Glean Document ID of the item being added if it's an indexed document."""
    new_next_item_id: NotRequired[str]
    r"""The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection"""
    item_type: NotRequired[CollectionItemDescriptorItemType]


class CollectionItemDescriptor(BaseModel):
    name: Optional[str] = None
    r"""The optional name of the Collection item."""

    description: Optional[str] = None
    r"""A helpful description of why this CollectionItem is in the Collection that it's in."""

    icon: Optional[str] = None
    r"""The emoji icon for this CollectionItem. Only used for Text type items."""

    url: Optional[str] = None
    r"""The URL of the item being added."""

    document_id: Annotated[Optional[str], pydantic.Field(alias="documentId")] = None
    r"""The Glean Document ID of the item being added if it's an indexed document."""

    new_next_item_id: Annotated[
        Optional[str], pydantic.Field(alias="newNextItemId")
    ] = None
    r"""The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection"""

    item_type: Annotated[
        Optional[CollectionItemDescriptorItemType], pydantic.Field(alias="itemType")
    ] = None
