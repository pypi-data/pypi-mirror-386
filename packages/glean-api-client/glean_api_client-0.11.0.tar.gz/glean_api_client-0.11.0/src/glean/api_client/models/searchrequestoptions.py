"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .authtoken import AuthToken, AuthTokenTypedDict
from .facetbucketfilter import FacetBucketFilter, FacetBucketFilterTypedDict
from .facetfilter import FacetFilter, FacetFilterTypedDict
from .facetfilterset import FacetFilterSet, FacetFilterSetTypedDict
from .restrictionfilters import RestrictionFilters, RestrictionFiltersTypedDict
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ResponseHint(str, Enum):
    r"""Hints for the response content."""

    ALL_RESULT_COUNTS = "ALL_RESULT_COUNTS"
    FACET_RESULTS = "FACET_RESULTS"
    QUERY_METADATA = "QUERY_METADATA"
    RESULTS = "RESULTS"
    SPELLCHECK_METADATA = "SPELLCHECK_METADATA"


class SearchRequestOptionsTypedDict(TypedDict):
    facet_bucket_size: int
    r"""The maximum number of FacetBuckets to return in each FacetResult."""
    datasource_filter: NotRequired[str]
    r"""Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing."""
    datasources_filter: NotRequired[List[str]]
    r"""Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing."""
    query_overrides_facet_filters: NotRequired[bool]
    r"""If true, the operators in the query are taken to override any operators in facetFilters in the case of conflict. This is used to correctly set rewrittenFacetFilters and rewrittenQuery."""
    facet_filters: NotRequired[List[FacetFilterTypedDict]]
    r"""A list of filters for the query. An AND is assumed between different facetFilters. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets."""
    facet_filter_sets: NotRequired[List[FacetFilterSetTypedDict]]
    r"""A list of facet filter sets that will be OR'ed together. SearchRequestOptions where both facetFilterSets and facetFilters set are considered as bad request. Callers should set only one of these fields."""
    facet_bucket_filter: NotRequired[FacetBucketFilterTypedDict]
    default_facets: NotRequired[List[str]]
    r"""Facets for which FacetResults should be fetched and that don't apply to a particular datasource. If specified, these values will replace the standard default facets (last_updated_at, from, etc.). The requested facets will be returned alongside datasource-specific facets if searching a single datasource."""
    auth_tokens: NotRequired[List[AuthTokenTypedDict]]
    r"""Auth tokens which may be used for non-indexed, federated results (e.g. Gmail)."""
    fetch_all_datasource_counts: NotRequired[bool]
    r"""Hints that the QE should return result counts (via the datasource facet result) for all supported datasources, rather than just those specified in the datasource[s]Filter"""
    response_hints: NotRequired[List[ResponseHint]]
    r"""Array of hints containing which fields should be populated in the response."""
    timezone_offset: NotRequired[int]
    r"""The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."""
    disable_spellcheck: NotRequired[bool]
    r"""Whether or not to disable spellcheck."""
    disable_query_autocorrect: NotRequired[bool]
    r"""Disables automatic adjustment of the input query for spelling corrections or other reasons."""
    return_llm_content_over_snippets: NotRequired[bool]
    r"""Enables expanded content to be returned for LLM usage. The size of content per result returned should be modified using maxSnippetSize. Server may return less or more than what is specified in maxSnippetSize. For more details, see https://developers.glean.com/guides/search/llm-content."""
    inclusions: NotRequired[RestrictionFiltersTypedDict]
    exclusions: NotRequired[RestrictionFiltersTypedDict]


class SearchRequestOptions(BaseModel):
    facet_bucket_size: Annotated[int, pydantic.Field(alias="facetBucketSize")]
    r"""The maximum number of FacetBuckets to return in each FacetResult."""

    datasource_filter: Annotated[
        Optional[str], pydantic.Field(alias="datasourceFilter")
    ] = None
    r"""Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing."""

    datasources_filter: Annotated[
        Optional[List[str]], pydantic.Field(alias="datasourcesFilter")
    ] = None
    r"""Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing."""

    query_overrides_facet_filters: Annotated[
        Optional[bool], pydantic.Field(alias="queryOverridesFacetFilters")
    ] = None
    r"""If true, the operators in the query are taken to override any operators in facetFilters in the case of conflict. This is used to correctly set rewrittenFacetFilters and rewrittenQuery."""

    facet_filters: Annotated[
        Optional[List[FacetFilter]], pydantic.Field(alias="facetFilters")
    ] = None
    r"""A list of filters for the query. An AND is assumed between different facetFilters. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets."""

    facet_filter_sets: Annotated[
        Optional[List[FacetFilterSet]], pydantic.Field(alias="facetFilterSets")
    ] = None
    r"""A list of facet filter sets that will be OR'ed together. SearchRequestOptions where both facetFilterSets and facetFilters set are considered as bad request. Callers should set only one of these fields."""

    facet_bucket_filter: Annotated[
        Optional[FacetBucketFilter], pydantic.Field(alias="facetBucketFilter")
    ] = None

    default_facets: Annotated[
        Optional[List[str]], pydantic.Field(alias="defaultFacets")
    ] = None
    r"""Facets for which FacetResults should be fetched and that don't apply to a particular datasource. If specified, these values will replace the standard default facets (last_updated_at, from, etc.). The requested facets will be returned alongside datasource-specific facets if searching a single datasource."""

    auth_tokens: Annotated[
        Optional[List[AuthToken]], pydantic.Field(alias="authTokens")
    ] = None
    r"""Auth tokens which may be used for non-indexed, federated results (e.g. Gmail)."""

    fetch_all_datasource_counts: Annotated[
        Optional[bool], pydantic.Field(alias="fetchAllDatasourceCounts")
    ] = None
    r"""Hints that the QE should return result counts (via the datasource facet result) for all supported datasources, rather than just those specified in the datasource[s]Filter"""

    response_hints: Annotated[
        Optional[List[ResponseHint]], pydantic.Field(alias="responseHints")
    ] = None
    r"""Array of hints containing which fields should be populated in the response."""

    timezone_offset: Annotated[
        Optional[int], pydantic.Field(alias="timezoneOffset")
    ] = None
    r"""The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."""

    disable_spellcheck: Annotated[
        Optional[bool], pydantic.Field(alias="disableSpellcheck")
    ] = None
    r"""Whether or not to disable spellcheck."""

    disable_query_autocorrect: Annotated[
        Optional[bool], pydantic.Field(alias="disableQueryAutocorrect")
    ] = None
    r"""Disables automatic adjustment of the input query for spelling corrections or other reasons."""

    return_llm_content_over_snippets: Annotated[
        Optional[bool], pydantic.Field(alias="returnLlmContentOverSnippets")
    ] = None
    r"""Enables expanded content to be returned for LLM usage. The size of content per result returned should be modified using maxSnippetSize. Server may return less or more than what is specified in maxSnippetSize. For more details, see https://developers.glean.com/guides/search/llm-content."""

    inclusions: Optional[RestrictionFilters] = None

    exclusions: Optional[RestrictionFilters] = None
