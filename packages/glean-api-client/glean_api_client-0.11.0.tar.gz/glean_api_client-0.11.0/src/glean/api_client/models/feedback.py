"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .manualfeedbackinfo import ManualFeedbackInfo, ManualFeedbackInfoTypedDict
from .manualfeedbacksidebysideinfo import (
    ManualFeedbackSideBySideInfo,
    ManualFeedbackSideBySideInfoTypedDict,
)
from .seenfeedbackinfo import SeenFeedbackInfo, SeenFeedbackInfoTypedDict
from .sessioninfo import SessionInfo, SessionInfoTypedDict
from .user import User, UserTypedDict
from .userviewinfo import UserViewInfo, UserViewInfoTypedDict
from .workflowfeedbackinfo import WorkflowFeedbackInfo, WorkflowFeedbackInfoTypedDict
from datetime import datetime
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class FeedbackCategory(str, Enum):
    r"""The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas."""

    ANNOUNCEMENT = "ANNOUNCEMENT"
    AUTOCOMPLETE = "AUTOCOMPLETE"
    COLLECTIONS = "COLLECTIONS"
    FEED = "FEED"
    SEARCH = "SEARCH"
    CHAT = "CHAT"
    NTP = "NTP"
    WORKFLOWS = "WORKFLOWS"
    SUMMARY = "SUMMARY"
    GENERAL = "GENERAL"
    PROMPTS = "PROMPTS"


class Event(str, Enum):
    r"""The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`."""

    CLICK = "CLICK"
    CONTAINER_CLICK = "CONTAINER_CLICK"
    COPY_LINK = "COPY_LINK"
    CREATE = "CREATE"
    DISMISS = "DISMISS"
    DOWNVOTE = "DOWNVOTE"
    EMAIL = "EMAIL"
    EXECUTE = "EXECUTE"
    FILTER = "FILTER"
    FIRST_TOKEN = "FIRST_TOKEN"
    FOCUS_IN = "FOCUS_IN"
    LAST_TOKEN = "LAST_TOKEN"
    MANUAL_FEEDBACK = "MANUAL_FEEDBACK"
    MANUAL_FEEDBACK_SIDE_BY_SIDE = "MANUAL_FEEDBACK_SIDE_BY_SIDE"
    MARK_AS_READ = "MARK_AS_READ"
    MESSAGE = "MESSAGE"
    MIDDLE_CLICK = "MIDDLE_CLICK"
    PAGE_BLUR = "PAGE_BLUR"
    PAGE_FOCUS = "PAGE_FOCUS"
    PAGE_LEAVE = "PAGE_LEAVE"
    PREVIEW = "PREVIEW"
    RELATED_CLICK = "RELATED_CLICK"
    RIGHT_CLICK = "RIGHT_CLICK"
    SECTION_CLICK = "SECTION_CLICK"
    SEEN = "SEEN"
    SHARE = "SHARE"
    SHOW_MORE = "SHOW_MORE"
    UPVOTE = "UPVOTE"
    VIEW = "VIEW"
    VISIBLE = "VISIBLE"


class FeedbackChannel(str, Enum):
    COMPANY = "COMPANY"
    GLEAN = "GLEAN"


class FeedbackTypedDict(TypedDict):
    tracking_tokens: List[str]
    r"""A list of server-generated trackingTokens to which this event applies."""
    event: Event
    r"""The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`."""
    id: NotRequired[str]
    r"""Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored."""
    category: NotRequired[FeedbackCategory]
    r"""The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas."""
    position: NotRequired[int]
    r"""Position of the element in the case that the client controls order (such as feed and autocomplete)."""
    payload: NotRequired[str]
    r"""For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content."""
    session_info: NotRequired[SessionInfoTypedDict]
    timestamp: NotRequired[datetime]
    r"""The ISO 8601 timestamp when the event occured."""
    user: NotRequired[UserTypedDict]
    pathname: NotRequired[str]
    r"""The path the client was at when the feedback event triggered."""
    channels: NotRequired[List[FeedbackChannel]]
    r"""Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean."""
    url: NotRequired[str]
    r"""The URL the client was at when the feedback event triggered."""
    ui_tree: NotRequired[List[str]]
    r"""The UI element tree associated with the event, if any."""
    ui_element: NotRequired[str]
    r"""The UI element associated with the event, if any."""
    manual_feedback_info: NotRequired[ManualFeedbackInfoTypedDict]
    manual_feedback_side_by_side_info: NotRequired[
        ManualFeedbackSideBySideInfoTypedDict
    ]
    seen_feedback_info: NotRequired[SeenFeedbackInfoTypedDict]
    user_view_info: NotRequired[UserViewInfoTypedDict]
    workflow_feedback_info: NotRequired[WorkflowFeedbackInfoTypedDict]
    application_id: NotRequired[str]
    r"""The application ID of the client that sent the feedback event."""
    agent_id: NotRequired[str]
    r"""The agent ID of the client that sent the feedback event."""


class Feedback(BaseModel):
    tracking_tokens: Annotated[List[str], pydantic.Field(alias="trackingTokens")]
    r"""A list of server-generated trackingTokens to which this event applies."""

    event: Event
    r"""The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`."""

    id: Optional[str] = None
    r"""Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored."""

    category: Optional[FeedbackCategory] = None
    r"""The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas."""

    position: Optional[int] = None
    r"""Position of the element in the case that the client controls order (such as feed and autocomplete)."""

    payload: Optional[str] = None
    r"""For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content."""

    session_info: Annotated[
        Optional[SessionInfo], pydantic.Field(alias="sessionInfo")
    ] = None

    timestamp: Optional[datetime] = None
    r"""The ISO 8601 timestamp when the event occured."""

    user: Optional[User] = None

    pathname: Optional[str] = None
    r"""The path the client was at when the feedback event triggered."""

    channels: Optional[List[FeedbackChannel]] = None
    r"""Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean."""

    url: Optional[str] = None
    r"""The URL the client was at when the feedback event triggered."""

    ui_tree: Annotated[Optional[List[str]], pydantic.Field(alias="uiTree")] = None
    r"""The UI element tree associated with the event, if any."""

    ui_element: Annotated[Optional[str], pydantic.Field(alias="uiElement")] = None
    r"""The UI element associated with the event, if any."""

    manual_feedback_info: Annotated[
        Optional[ManualFeedbackInfo], pydantic.Field(alias="manualFeedbackInfo")
    ] = None

    manual_feedback_side_by_side_info: Annotated[
        Optional[ManualFeedbackSideBySideInfo],
        pydantic.Field(alias="manualFeedbackSideBySideInfo"),
    ] = None

    seen_feedback_info: Annotated[
        Optional[SeenFeedbackInfo], pydantic.Field(alias="seenFeedbackInfo")
    ] = None

    user_view_info: Annotated[
        Optional[UserViewInfo], pydantic.Field(alias="userViewInfo")
    ] = None

    workflow_feedback_info: Annotated[
        Optional[WorkflowFeedbackInfo], pydantic.Field(alias="workflowFeedbackInfo")
    ] = None

    application_id: Annotated[Optional[str], pydantic.Field(alias="applicationId")] = (
        None
    )
    r"""The application ID of the client that sent the feedback event."""

    agent_id: Annotated[Optional[str], pydantic.Field(alias="agentId")] = None
    r"""The agent ID of the client that sent the feedback event."""
