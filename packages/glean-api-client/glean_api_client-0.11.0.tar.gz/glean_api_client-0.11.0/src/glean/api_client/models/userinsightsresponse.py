"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .useractivityinsight import UserActivityInsight, UserActivityInsightTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UserInsightsResponseTypedDict(TypedDict):
    last_log_timestamp: NotRequired[int]
    r"""Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."""
    activity_insights: NotRequired[List[UserActivityInsightTypedDict]]
    r"""Insights for all active users with respect to set of actions."""
    inactive_insights: NotRequired[List[UserActivityInsightTypedDict]]
    r"""Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0."""
    total_teammates: NotRequired[int]
    r"""Total number of teammates that have logged in to the product, that are still valid teammates."""
    total_active_users: NotRequired[int]
    r"""Total number of active users in the requested period."""
    departments: NotRequired[List[str]]
    r"""list of departments applicable for users tab."""


class UserInsightsResponse(BaseModel):
    last_log_timestamp: Annotated[
        Optional[int], pydantic.Field(alias="lastLogTimestamp")
    ] = None
    r"""Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."""

    activity_insights: Annotated[
        Optional[List[UserActivityInsight]], pydantic.Field(alias="activityInsights")
    ] = None
    r"""Insights for all active users with respect to set of actions."""

    inactive_insights: Annotated[
        Optional[List[UserActivityInsight]], pydantic.Field(alias="inactiveInsights")
    ] = None
    r"""Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0."""

    total_teammates: Annotated[
        Optional[int], pydantic.Field(alias="totalTeammates")
    ] = None
    r"""Total number of teammates that have logged in to the product, that are still valid teammates."""

    total_active_users: Annotated[
        Optional[int], pydantic.Field(alias="totalActiveUsers")
    ] = None
    r"""Total number of active users in the requested period."""

    departments: Optional[List[str]] = None
    r"""list of departments applicable for users tab."""
