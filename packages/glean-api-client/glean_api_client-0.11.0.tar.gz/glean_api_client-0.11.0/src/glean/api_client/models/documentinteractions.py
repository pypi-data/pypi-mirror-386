"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countinfo import CountInfo, CountInfoTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional, TYPE_CHECKING
from typing_extensions import Annotated, NotRequired, TypedDict

if TYPE_CHECKING:
    from .reaction import Reaction, ReactionTypedDict
    from .share import Share, ShareTypedDict


class DocumentInteractionsTypedDict(TypedDict):
    num_comments: NotRequired[int]
    r"""The count of comments (thread replies in the case of slack)."""
    num_reactions: NotRequired[int]
    r"""The count of reactions on the document."""
    reactions: NotRequired[List[str]]
    r"""To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document."""
    reacts: NotRequired[List["ReactionTypedDict"]]
    shares: NotRequired[List["ShareTypedDict"]]
    r"""Describes instances of someone posting a link to this document in one of our indexed datasources."""
    visitor_count: NotRequired[CountInfoTypedDict]


class DocumentInteractions(BaseModel):
    num_comments: Annotated[Optional[int], pydantic.Field(alias="numComments")] = None
    r"""The count of comments (thread replies in the case of slack)."""

    num_reactions: Annotated[Optional[int], pydantic.Field(alias="numReactions")] = None
    r"""The count of reactions on the document."""

    reactions: Annotated[
        Optional[List[str]],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document."""

    reacts: Optional[List["Reaction"]] = None

    shares: Optional[List["Share"]] = None
    r"""Describes instances of someone posting a link to this document in one of our indexed datasources."""

    visitor_count: Annotated[
        Optional[CountInfo], pydantic.Field(alias="visitorCount")
    ] = None
