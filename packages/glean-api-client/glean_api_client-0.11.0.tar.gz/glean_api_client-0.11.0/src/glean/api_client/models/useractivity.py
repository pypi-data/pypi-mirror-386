"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countinfo import CountInfo, CountInfoTypedDict
from .person import Person, PersonTypedDict
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UserActivityAction(str, Enum):
    r"""The action for the activity"""

    ADD = "ADD"
    ADD_REMINDER = "ADD_REMINDER"
    CLICK = "CLICK"
    COMMENT = "COMMENT"
    DELETE = "DELETE"
    DISMISS = "DISMISS"
    EDIT = "EDIT"
    MENTION = "MENTION"
    MOVE = "MOVE"
    OTHER = "OTHER"
    RESTORE = "RESTORE"
    UNKNOWN = "UNKNOWN"
    VERIFY = "VERIFY"
    VIEW = "VIEW"


class UserActivityTypedDict(TypedDict):
    actor: NotRequired[PersonTypedDict]
    timestamp: NotRequired[int]
    r"""Unix timestamp of the activity (in seconds since epoch UTC)."""
    action: NotRequired[UserActivityAction]
    r"""The action for the activity"""
    aggregate_visit_count: NotRequired[CountInfoTypedDict]


class UserActivity(BaseModel):
    actor: Optional[Person] = None

    timestamp: Optional[int] = None
    r"""Unix timestamp of the activity (in seconds since epoch UTC)."""

    action: Optional[UserActivityAction] = None
    r"""The action for the activity"""

    aggregate_visit_count: Annotated[
        Optional[CountInfo], pydantic.Field(alias="aggregateVisitCount")
    ] = None
