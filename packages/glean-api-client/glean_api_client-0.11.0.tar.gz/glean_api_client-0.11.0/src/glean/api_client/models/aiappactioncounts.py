"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from glean.api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AiAppActionCountsTypedDict(TypedDict):
    r"""Map from action to frequency."""

    total_slackbot_responses: NotRequired[int]
    r"""Total number of Slackbot responses, both proactive and reactive."""
    total_slackbot_responses_shared: NotRequired[int]
    r"""Total number of Slackbot responses shared publicly (upvoted)."""
    total_slackbot_responses_not_helpful: NotRequired[int]
    r"""Total number of Slackbot responses rejected as not helpful (downvoted)."""
    total_chat_messages: NotRequired[int]
    r"""Total number of Chat messages sent in requested period."""
    total_upvotes: NotRequired[int]
    r"""Total number of Chat messages which received upvotes by the user."""
    total_downvotes: NotRequired[int]
    r"""Total number of Chat messages which received downvotes by the user."""


class AiAppActionCounts(BaseModel):
    r"""Map from action to frequency."""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, int] = pydantic.Field(init=False)

    total_slackbot_responses: Annotated[
        Optional[int], pydantic.Field(alias="totalSlackbotResponses")
    ] = None
    r"""Total number of Slackbot responses, both proactive and reactive."""

    total_slackbot_responses_shared: Annotated[
        Optional[int], pydantic.Field(alias="totalSlackbotResponsesShared")
    ] = None
    r"""Total number of Slackbot responses shared publicly (upvoted)."""

    total_slackbot_responses_not_helpful: Annotated[
        Optional[int], pydantic.Field(alias="totalSlackbotResponsesNotHelpful")
    ] = None
    r"""Total number of Slackbot responses rejected as not helpful (downvoted)."""

    total_chat_messages: Annotated[
        Optional[int], pydantic.Field(alias="totalChatMessages")
    ] = None
    r"""Total number of Chat messages sent in requested period."""

    total_upvotes: Annotated[Optional[int], pydantic.Field(alias="totalUpvotes")] = None
    r"""Total number of Chat messages which received upvotes by the user."""

    total_downvotes: Annotated[
        Optional[int], pydantic.Field(alias="totalDownvotes")
    ] = None
    r"""Total number of Chat messages which received downvotes by the user."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
