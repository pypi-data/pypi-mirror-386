"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .queryinsight import QueryInsight, QueryInsightTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class QueryInsightsResponseTypedDict(TypedDict):
    last_log_timestamp: NotRequired[int]
    r"""Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."""
    query_insights: NotRequired[List[QueryInsightTypedDict]]
    r"""Insights for queries."""
    low_performing_query_insights: NotRequired[List[QueryInsightTypedDict]]
    r"""Insights for low performing queries without good results."""
    departments: NotRequired[List[str]]
    r"""list of departments applicable for queries tab."""
    min_visitor_threshold: NotRequired[int]
    r"""Min threshold in number of visitors while populating results, otherwise 0."""


class QueryInsightsResponse(BaseModel):
    last_log_timestamp: Annotated[
        Optional[int], pydantic.Field(alias="lastLogTimestamp")
    ] = None
    r"""Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."""

    query_insights: Annotated[
        Optional[List[QueryInsight]], pydantic.Field(alias="queryInsights")
    ] = None
    r"""Insights for queries."""

    low_performing_query_insights: Annotated[
        Optional[List[QueryInsight]], pydantic.Field(alias="lowPerformingQueryInsights")
    ] = None
    r"""Insights for low performing queries without good results."""

    departments: Optional[List[str]] = None
    r"""list of departments applicable for queries tab."""

    min_visitor_threshold: Annotated[
        Optional[int], pydantic.Field(alias="minVisitorThreshold")
    ] = None
    r"""Min threshold in number of visitors while populating results, otherwise 0."""
