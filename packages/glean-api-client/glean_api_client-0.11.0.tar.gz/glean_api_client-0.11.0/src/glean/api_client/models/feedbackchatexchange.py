"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ResultDocumentTypedDict(TypedDict):
    title: NotRequired[str]
    url: NotRequired[str]


class ResultDocument(BaseModel):
    title: Optional[str] = None

    url: Optional[str] = None


class FeedbackChatExchangeTypedDict(TypedDict):
    timestamp: NotRequired[int]
    r"""Unix timestamp in millis for the chat request."""
    agent: NotRequired[str]
    r"""Either DEFAULT (company knowledge) or GPT (world knowledge)."""
    user_query: NotRequired[str]
    r"""Initial query entered by the user."""
    search_query: NotRequired[str]
    r"""Search query performed by the agent."""
    result_documents: NotRequired[List[ResultDocumentTypedDict]]
    r"""List of documents read by the agent."""
    response: NotRequired[str]


class FeedbackChatExchange(BaseModel):
    timestamp: Optional[int] = None
    r"""Unix timestamp in millis for the chat request."""

    agent: Optional[str] = None
    r"""Either DEFAULT (company knowledge) or GPT (world knowledge)."""

    user_query: Annotated[Optional[str], pydantic.Field(alias="userQuery")] = None
    r"""Initial query entered by the user."""

    search_query: Annotated[Optional[str], pydantic.Field(alias="searchQuery")] = None
    r"""Search query performed by the agent."""

    result_documents: Annotated[
        Optional[List[ResultDocument]], pydantic.Field(alias="resultDocuments")
    ] = None
    r"""List of documents read by the agent."""

    response: Optional[str] = None
