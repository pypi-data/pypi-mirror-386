"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .additionalfielddefinition import (
    AdditionalFieldDefinition,
    AdditionalFieldDefinitionTypedDict,
)
from .datasourceprofile import DatasourceProfile, DatasourceProfileTypedDict
from .employeeteaminfo import EmployeeTeamInfo, EmployeeTeamInfoTypedDict
from .entityrelationship import EntityRelationship, EntityRelationshipTypedDict
from .socialnetworkdefinition import (
    SocialNetworkDefinition,
    SocialNetworkDefinitionTypedDict,
)
from .structuredlocation import StructuredLocation, StructuredLocationTypedDict
from datetime import date
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EmployeeInfoDefinitionTypedDict(TypedDict):
    r"""Describes employee info"""

    email: str
    r"""The employee's email"""
    department: str
    r"""An organizational unit where everyone has a similar task, e.g. `Engineering`."""
    first_name: NotRequired[str]
    r"""The first name of the employee. **Note**: The value cannot be empty

    """
    last_name: NotRequired[str]
    r"""The last name of the employee. **Note**: The value cannot be empty

    """
    preferred_name: NotRequired[str]
    r"""The preferred name or nickname of the employee"""
    id: NotRequired[str]
    r"""**[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.

    """
    phone_number: NotRequired[str]
    r"""The employee's phone number."""
    location: NotRequired[str]
    r"""The employee's location (city/office name etc)."""
    structured_location: NotRequired[StructuredLocationTypedDict]
    r"""Detailed location with information about country, state, city etc."""
    title: NotRequired[str]
    r"""The employee's role title."""
    photo_url: NotRequired[str]
    r"""The employee's profile pic"""
    business_unit: NotRequired[str]
    r"""Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."""
    datasource_profiles: NotRequired[List[DatasourceProfileTypedDict]]
    r"""The datasource profiles of the employee, e.g. `Slack`,`Github`."""
    teams: NotRequired[List[EmployeeTeamInfoTypedDict]]
    r"""Info about the employee's team(s)"""
    start_date: NotRequired[date]
    r"""The date when the employee started"""
    end_date: NotRequired[date]
    r"""If a former employee, the last date of employment."""
    bio: NotRequired[str]
    r"""Short biography or mission statement of the employee."""
    pronoun: NotRequired[str]
    r"""She/her, He/his or other pronoun."""
    also_known_as: NotRequired[List[str]]
    r"""Other names associated with the employee."""
    profile_url: NotRequired[str]
    r"""Link to internal company person profile."""
    social_networks: NotRequired[List[SocialNetworkDefinitionTypedDict]]
    r"""List of social network profiles."""
    manager_email: NotRequired[str]
    r"""The email of the employee's manager"""
    manager_id: NotRequired[str]
    r"""**[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.

    """
    type: NotRequired[str]
    r"""The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`"""
    relationships: NotRequired[List[EntityRelationshipTypedDict]]
    r"""List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile."""
    status: NotRequired[str]
    r"""The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`"""
    additional_fields: NotRequired[List[AdditionalFieldDefinitionTypedDict]]
    r"""List of additional fields with more information about the employee."""


class EmployeeInfoDefinition(BaseModel):
    r"""Describes employee info"""

    email: str
    r"""The employee's email"""

    department: str
    r"""An organizational unit where everyone has a similar task, e.g. `Engineering`."""

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None
    r"""The first name of the employee. **Note**: The value cannot be empty

    """

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None
    r"""The last name of the employee. **Note**: The value cannot be empty

    """

    preferred_name: Annotated[Optional[str], pydantic.Field(alias="preferredName")] = (
        None
    )
    r"""The preferred name or nickname of the employee"""

    id: Optional[str] = None
    r"""**[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.

    """

    phone_number: Annotated[Optional[str], pydantic.Field(alias="phoneNumber")] = None
    r"""The employee's phone number."""

    location: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""The employee's location (city/office name etc)."""

    structured_location: Annotated[
        Optional[StructuredLocation], pydantic.Field(alias="structuredLocation")
    ] = None
    r"""Detailed location with information about country, state, city etc."""

    title: Optional[str] = None
    r"""The employee's role title."""

    photo_url: Annotated[Optional[str], pydantic.Field(alias="photoUrl")] = None
    r"""The employee's profile pic"""

    business_unit: Annotated[Optional[str], pydantic.Field(alias="businessUnit")] = None
    r"""Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."""

    datasource_profiles: Annotated[
        Optional[List[DatasourceProfile]], pydantic.Field(alias="datasourceProfiles")
    ] = None
    r"""The datasource profiles of the employee, e.g. `Slack`,`Github`."""

    teams: Optional[List[EmployeeTeamInfo]] = None
    r"""Info about the employee's team(s)"""

    start_date: Annotated[Optional[date], pydantic.Field(alias="startDate")] = None
    r"""The date when the employee started"""

    end_date: Annotated[Optional[date], pydantic.Field(alias="endDate")] = None
    r"""If a former employee, the last date of employment."""

    bio: Optional[str] = None
    r"""Short biography or mission statement of the employee."""

    pronoun: Optional[str] = None
    r"""She/her, He/his or other pronoun."""

    also_known_as: Annotated[
        Optional[List[str]], pydantic.Field(alias="alsoKnownAs")
    ] = None
    r"""Other names associated with the employee."""

    profile_url: Annotated[Optional[str], pydantic.Field(alias="profileUrl")] = None
    r"""Link to internal company person profile."""

    social_networks: Annotated[
        Optional[List[SocialNetworkDefinition]], pydantic.Field(alias="socialNetworks")
    ] = None
    r"""List of social network profiles."""

    manager_email: Annotated[Optional[str], pydantic.Field(alias="managerEmail")] = None
    r"""The email of the employee's manager"""

    manager_id: Annotated[Optional[str], pydantic.Field(alias="managerId")] = None
    r"""**[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.

    """

    type: Optional[str] = "FULL_TIME"
    r"""The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`"""

    relationships: Optional[List[EntityRelationship]] = None
    r"""List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile."""

    status: Optional[str] = "CURRENT"
    r"""The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`"""

    additional_fields: Annotated[
        Optional[List[AdditionalFieldDefinition]],
        pydantic.Field(alias="additionalFields"),
    ] = None
    r"""List of additional fields with more information about the employee."""
