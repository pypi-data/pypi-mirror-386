"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .querysuggestion import QuerySuggestion, QuerySuggestionTypedDict
from .querysuggestionlist import QuerySuggestionList, QuerySuggestionListTypedDict
from .searchwarning import SearchWarning, SearchWarningTypedDict
from .textrange import TextRange, TextRangeTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SearchResponseMetadataTypedDict(TypedDict):
    rewritten_query: NotRequired[str]
    r"""A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators."""
    searched_query: NotRequired[str]
    r"""The actual query used to perform search and return results."""
    searched_query_without_negation: NotRequired[str]
    r"""The query used to perform search and return results, with negated terms and facets removed."""
    searched_query_ranges: NotRequired[List[TextRangeTypedDict]]
    r"""The bolded ranges within the searched query."""
    original_query: NotRequired[str]
    r"""The query text sent by the client in the request."""
    query_suggestion: NotRequired[QuerySuggestionTypedDict]
    additional_query_suggestions: NotRequired[QuerySuggestionListTypedDict]
    negated_terms: NotRequired[List[str]]
    r"""A list of terms that were negated when processing the query."""
    modified_query_was_used: NotRequired[bool]
    r"""A different query was performed than the one requested."""
    original_query_had_no_results: NotRequired[bool]
    r"""No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based."""
    search_warning: NotRequired[SearchWarningTypedDict]
    triggered_expert_detection: NotRequired[bool]
    r"""Whether the query triggered expert detection results in the People tab."""
    is_no_quotes_suggestion: NotRequired[bool]
    r"""Whether the query was modified to remove quotes"""


class SearchResponseMetadata(BaseModel):
    rewritten_query: Annotated[
        Optional[str], pydantic.Field(alias="rewrittenQuery")
    ] = None
    r"""A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators."""

    searched_query: Annotated[Optional[str], pydantic.Field(alias="searchedQuery")] = (
        None
    )
    r"""The actual query used to perform search and return results."""

    searched_query_without_negation: Annotated[
        Optional[str], pydantic.Field(alias="searchedQueryWithoutNegation")
    ] = None
    r"""The query used to perform search and return results, with negated terms and facets removed."""

    searched_query_ranges: Annotated[
        Optional[List[TextRange]], pydantic.Field(alias="searchedQueryRanges")
    ] = None
    r"""The bolded ranges within the searched query."""

    original_query: Annotated[Optional[str], pydantic.Field(alias="originalQuery")] = (
        None
    )
    r"""The query text sent by the client in the request."""

    query_suggestion: Annotated[
        Optional[QuerySuggestion], pydantic.Field(alias="querySuggestion")
    ] = None

    additional_query_suggestions: Annotated[
        Optional[QuerySuggestionList],
        pydantic.Field(alias="additionalQuerySuggestions"),
    ] = None

    negated_terms: Annotated[
        Optional[List[str]], pydantic.Field(alias="negatedTerms")
    ] = None
    r"""A list of terms that were negated when processing the query."""

    modified_query_was_used: Annotated[
        Optional[bool], pydantic.Field(alias="modifiedQueryWasUsed")
    ] = None
    r"""A different query was performed than the one requested."""

    original_query_had_no_results: Annotated[
        Optional[bool], pydantic.Field(alias="originalQueryHadNoResults")
    ] = None
    r"""No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based."""

    search_warning: Annotated[
        Optional[SearchWarning], pydantic.Field(alias="searchWarning")
    ] = None

    triggered_expert_detection: Annotated[
        Optional[bool], pydantic.Field(alias="triggeredExpertDetection")
    ] = None
    r"""Whether the query triggered expert detection results in the People tab."""

    is_no_quotes_suggestion: Annotated[
        Optional[bool], pydantic.Field(alias="isNoQuotesSuggestion")
    ] = None
    r"""Whether the query was modified to remove quotes"""
