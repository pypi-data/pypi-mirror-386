"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .currentactiveusers import CurrentActiveUsers, CurrentActiveUsersTypedDict
from .insightschatsummary import InsightsChatSummary, InsightsChatSummaryTypedDict
from .insightssearchsummary import InsightsSearchSummary, InsightsSearchSummaryTypedDict
from .labeledcountinfo import LabeledCountInfo, LabeledCountInfoTypedDict
from .peruserinsight import PerUserInsight, PerUserInsightTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EngagementBreakdownTypedDict(TypedDict):
    non_users: NotRequired[int]
    r"""Number of non-user employees in the specified departments."""
    dormant_users: NotRequired[int]
    r"""Number of currently dormant users in the specified departments."""
    regular_users: NotRequired[int]
    r"""Number of currently regular users in the specified departments."""
    power_users: NotRequired[int]
    r"""Number of currently power users in the specified departments."""


class EngagementBreakdown(BaseModel):
    non_users: Annotated[Optional[int], pydantic.Field(alias="nonUsers")] = None
    r"""Number of non-user employees in the specified departments."""

    dormant_users: Annotated[Optional[int], pydantic.Field(alias="dormantUsers")] = None
    r"""Number of currently dormant users in the specified departments."""

    regular_users: Annotated[Optional[int], pydantic.Field(alias="regularUsers")] = None
    r"""Number of currently regular users in the specified departments."""

    power_users: Annotated[Optional[int], pydantic.Field(alias="powerUsers")] = None
    r"""Number of currently power users in the specified departments."""


class InsightsOverviewResponseTypedDict(TypedDict):
    monthly_active_users: NotRequired[int]
    r"""Number of current Monthly Active Users, in the specified departments."""
    weekly_active_users: NotRequired[int]
    r"""Number of current Weekly Active Users, in the specified departments."""
    departments: NotRequired[List[str]]
    r"""Department name(s)."""
    employee_count: NotRequired[int]
    r"""Number of current employees in the specified departments, according to the Org Chart."""
    total_signups: NotRequired[int]
    r"""Number of current signed up employees in the specified departments, according to the Org Chart."""
    search_summary: NotRequired[InsightsSearchSummaryTypedDict]
    chat_summary: NotRequired[InsightsChatSummaryTypedDict]
    extension_summary: NotRequired[CurrentActiveUsersTypedDict]
    ugc_summary: NotRequired[CurrentActiveUsersTypedDict]
    last_updated_ts: NotRequired[int]
    r"""Unix timestamp of the last update for the insights data in the response."""
    search_session_satisfaction: NotRequired[float]
    r"""Search session satisfaction rate, over the specified time period in the specified departments."""
    monthly_active_user_timeseries: NotRequired[LabeledCountInfoTypedDict]
    weekly_active_user_timeseries: NotRequired[LabeledCountInfoTypedDict]
    daily_active_user_timeseries: NotRequired[LabeledCountInfoTypedDict]
    search_datasource_counts: NotRequired[Dict[str, int]]
    r"""Counts of search result clicks, by datasource, over the specified time period in the specified departments."""
    chat_datasource_counts: NotRequired[Dict[str, int]]
    r"""Counts of cited documents in chat, by datasource, over the specified time period in the specified departments."""
    per_user_insights: NotRequired[List[PerUserInsightTypedDict]]
    r"""Top power users, over the specified time period in the specified departments."""
    engagement_breakdown: NotRequired[EngagementBreakdownTypedDict]


class InsightsOverviewResponse(BaseModel):
    monthly_active_users: Annotated[
        Optional[int], pydantic.Field(alias="monthlyActiveUsers")
    ] = None
    r"""Number of current Monthly Active Users, in the specified departments."""

    weekly_active_users: Annotated[
        Optional[int], pydantic.Field(alias="weeklyActiveUsers")
    ] = None
    r"""Number of current Weekly Active Users, in the specified departments."""

    departments: Optional[List[str]] = None
    r"""Department name(s)."""

    employee_count: Annotated[Optional[int], pydantic.Field(alias="employeeCount")] = (
        None
    )
    r"""Number of current employees in the specified departments, according to the Org Chart."""

    total_signups: Annotated[Optional[int], pydantic.Field(alias="totalSignups")] = None
    r"""Number of current signed up employees in the specified departments, according to the Org Chart."""

    search_summary: Annotated[
        Optional[InsightsSearchSummary], pydantic.Field(alias="searchSummary")
    ] = None

    chat_summary: Annotated[
        Optional[InsightsChatSummary], pydantic.Field(alias="chatSummary")
    ] = None

    extension_summary: Annotated[
        Optional[CurrentActiveUsers], pydantic.Field(alias="extensionSummary")
    ] = None

    ugc_summary: Annotated[
        Optional[CurrentActiveUsers], pydantic.Field(alias="ugcSummary")
    ] = None

    last_updated_ts: Annotated[Optional[int], pydantic.Field(alias="lastUpdatedTs")] = (
        None
    )
    r"""Unix timestamp of the last update for the insights data in the response."""

    search_session_satisfaction: Annotated[
        Optional[float], pydantic.Field(alias="searchSessionSatisfaction")
    ] = None
    r"""Search session satisfaction rate, over the specified time period in the specified departments."""

    monthly_active_user_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="monthlyActiveUserTimeseries")
    ] = None

    weekly_active_user_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="weeklyActiveUserTimeseries")
    ] = None

    daily_active_user_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="dailyActiveUserTimeseries")
    ] = None

    search_datasource_counts: Annotated[
        Optional[Dict[str, int]], pydantic.Field(alias="searchDatasourceCounts")
    ] = None
    r"""Counts of search result clicks, by datasource, over the specified time period in the specified departments."""

    chat_datasource_counts: Annotated[
        Optional[Dict[str, int]], pydantic.Field(alias="chatDatasourceCounts")
    ] = None
    r"""Counts of cited documents in chat, by datasource, over the specified time period in the specified departments."""

    per_user_insights: Annotated[
        Optional[List[PerUserInsight]], pydantic.Field(alias="perUserInsights")
    ] = None
    r"""Top power users, over the specified time period in the specified departments."""

    engagement_breakdown: Annotated[
        Optional[EngagementBreakdown], pydantic.Field(alias="engagementBreakdown")
    ] = None
