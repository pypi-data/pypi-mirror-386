"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AuthConfigType(str, Enum):
    r"""The type of authentication being used.
    Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
    'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
    'OAUTH_USER' uses individual user tokens for external API calls.
    'DWD' refers to domain wide delegation.

    """

    NONE = "NONE"
    OAUTH_USER = "OAUTH_USER"
    OAUTH_ADMIN = "OAUTH_ADMIN"
    API_KEY = "API_KEY"
    BASIC_AUTH = "BASIC_AUTH"
    DWD = "DWD"


class GrantType(str, Enum):
    r"""The type of grant type being used."""

    AUTH_CODE = "AUTH_CODE"
    CLIENT_CREDENTIALS = "CLIENT_CREDENTIALS"


class AuthConfigStatus(str, Enum):
    r"""Auth status of the tool."""

    AWAITING_AUTH = "AWAITING_AUTH"
    AUTHORIZED = "AUTHORIZED"
    AUTH_DISABLED = "AUTH_DISABLED"


class AuthConfigTypedDict(TypedDict):
    r"""Config for tool's authentication method."""

    is_on_prem: NotRequired[bool]
    r"""Whether or not this tool is hosted on-premise."""
    uses_central_auth: NotRequired[bool]
    r"""Whether or not this uses central auth."""
    type: NotRequired[AuthConfigType]
    r"""The type of authentication being used.
    Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
    'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
    'OAUTH_USER' uses individual user tokens for external API calls.
    'DWD' refers to domain wide delegation.

    """
    grant_type: NotRequired[GrantType]
    r"""The type of grant type being used."""
    status: NotRequired[AuthConfigStatus]
    r"""Auth status of the tool."""
    client_url: NotRequired[str]
    r"""The URL where users will be directed to start the OAuth flow."""
    scopes: NotRequired[List[str]]
    r"""A list of strings denoting the different scopes or access levels required by the tool."""
    audiences: NotRequired[List[str]]
    r"""A list of strings denoting the different audience which can access the tool."""
    authorization_url: NotRequired[str]
    r"""The OAuth provider's endpoint, where access tokens are requested."""
    last_authorized_at: NotRequired[datetime]
    r"""The time the tool was last authorized in ISO format (ISO 8601)."""


class AuthConfig(BaseModel):
    r"""Config for tool's authentication method."""

    is_on_prem: Annotated[Optional[bool], pydantic.Field(alias="isOnPrem")] = None
    r"""Whether or not this tool is hosted on-premise."""

    uses_central_auth: Annotated[
        Optional[bool], pydantic.Field(alias="usesCentralAuth")
    ] = None
    r"""Whether or not this uses central auth."""

    type: Optional[AuthConfigType] = None
    r"""The type of authentication being used.
    Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
    'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
    'OAUTH_USER' uses individual user tokens for external API calls.
    'DWD' refers to domain wide delegation.

    """

    grant_type: Annotated[Optional[GrantType], pydantic.Field(alias="grantType")] = None
    r"""The type of grant type being used."""

    status: Optional[AuthConfigStatus] = None
    r"""Auth status of the tool."""

    client_url: Optional[str] = None
    r"""The URL where users will be directed to start the OAuth flow."""

    scopes: Optional[List[str]] = None
    r"""A list of strings denoting the different scopes or access levels required by the tool."""

    audiences: Optional[List[str]] = None
    r"""A list of strings denoting the different audience which can access the tool."""

    authorization_url: Optional[str] = None
    r"""The OAuth provider's endpoint, where access tokens are requested."""

    last_authorized_at: Annotated[
        Optional[datetime], pydantic.Field(alias="lastAuthorizedAt")
    ] = None
    r"""The time the tool was last authorized in ISO format (ISO 8601)."""
