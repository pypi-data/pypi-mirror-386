"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .facetfilterset import FacetFilterSet, FacetFilterSetTypedDict
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetDocumentsByFacetsRequestTypedDict(TypedDict):
    filter_sets: List[FacetFilterSetTypedDict]
    r"""A list of facet filter sets that will be OR'ed together. An AND is assumed between different filters in each set."""
    datasources_filter: NotRequired[List[str]]
    r"""Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing."""
    cursor: NotRequired[str]
    r"""Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."""


class GetDocumentsByFacetsRequest(BaseModel):
    filter_sets: Annotated[List[FacetFilterSet], pydantic.Field(alias="filterSets")]
    r"""A list of facet filter sets that will be OR'ed together. An AND is assumed between different filters in each set."""

    datasources_filter: Annotated[
        Optional[List[str]], pydantic.Field(alias="datasourcesFilter")
    ] = None
    r"""Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing."""

    cursor: Optional[str] = None
    r"""Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."""
