"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional, TYPE_CHECKING
from typing_extensions import Annotated, NotRequired, TypedDict

if TYPE_CHECKING:
    from .document import Document, DocumentTypedDict
    from .querysuggestion import QuerySuggestion, QuerySuggestionTypedDict
    from .searchresult import SearchResult, SearchResultTypedDict


class Relation(str, Enum):
    r"""How this document relates to the including entity."""

    ATTACHMENT = "ATTACHMENT"
    CANONICAL = "CANONICAL"
    CASE = "CASE"
    CONTACT_LOWER = "contact"
    CONTACT_UPPER = "CONTACT"
    CONVERSATION_MESSAGES = "CONVERSATION_MESSAGES"
    EXPERT = "EXPERT"
    FROM = "FROM"
    HIGHLIGHT = "HIGHLIGHT"
    OPPORTUNITY_LOWER = "opportunity"
    OPPORTUNITY_UPPER = "OPPORTUNITY"
    RECENT = "RECENT"
    SOURCE = "SOURCE"
    TICKET = "TICKET"
    TRANSCRIPT = "TRANSCRIPT"
    WITH = "WITH"


class RelatedDocumentsTypedDict(TypedDict):
    relation: NotRequired[Relation]
    r"""How this document relates to the including entity."""
    associated_entity_id: NotRequired[str]
    r"""Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)"""
    query_suggestion: NotRequired["QuerySuggestionTypedDict"]
    documents: NotRequired[List["DocumentTypedDict"]]
    r"""A truncated list of documents with this relation. TO BE DEPRECATED."""
    results: NotRequired[List["SearchResultTypedDict"]]
    r"""A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken."""


class RelatedDocuments(BaseModel):
    relation: Optional[Relation] = None
    r"""How this document relates to the including entity."""

    associated_entity_id: Annotated[
        Optional[str], pydantic.Field(alias="associatedEntityId")
    ] = None
    r"""Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)"""

    query_suggestion: Annotated[
        Optional["QuerySuggestion"], pydantic.Field(alias="querySuggestion")
    ] = None

    documents: Annotated[
        Optional[List["Document"]],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""A truncated list of documents with this relation. TO BE DEPRECATED."""

    results: Optional[List["SearchResult"]] = None
    r"""A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken."""
