"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .feedrequestoptions import FeedRequestOptions, FeedRequestOptionsTypedDict
from .sessioninfo import SessionInfo, SessionInfoTypedDict
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class FeedRequestCategory(str, Enum):
    DOCUMENT_SUGGESTION = "DOCUMENT_SUGGESTION"
    DOCUMENT_SUGGESTION_SCENARIO = "DOCUMENT_SUGGESTION_SCENARIO"
    TRENDING_DOCUMENT = "TRENDING_DOCUMENT"
    VERIFICATION_REMINDER = "VERIFICATION_REMINDER"
    EVENT = "EVENT"
    ANNOUNCEMENT = "ANNOUNCEMENT"
    MENTION = "MENTION"
    DATASOURCE_AFFINITY = "DATASOURCE_AFFINITY"
    RECENT = "RECENT"
    COMPANY_RESOURCE = "COMPANY_RESOURCE"
    EXPERIMENTAL = "EXPERIMENTAL"
    PEOPLE_CELEBRATIONS = "PEOPLE_CELEBRATIONS"
    DISPLAYABLE_LIST = "DISPLAYABLE_LIST"
    SOCIAL_LINK = "SOCIAL_LINK"
    EXTERNAL_TASKS = "EXTERNAL_TASKS"
    WORKFLOW_COLLECTIONS = "WORKFLOW_COLLECTIONS"
    ZERO_STATE_CHAT_SUGGESTION = "ZERO_STATE_CHAT_SUGGESTION"
    ZERO_STATE_CHAT_TOOL_SUGGESTION = "ZERO_STATE_CHAT_TOOL_SUGGESTION"
    ZERO_STATE_WORKFLOW_CREATED_BY_ME = "ZERO_STATE_WORKFLOW_CREATED_BY_ME"
    ZERO_STATE_WORKFLOW_FAVORITES = "ZERO_STATE_WORKFLOW_FAVORITES"
    ZERO_STATE_WORKFLOW_POPULAR = "ZERO_STATE_WORKFLOW_POPULAR"
    ZERO_STATE_WORKFLOW_RECENT = "ZERO_STATE_WORKFLOW_RECENT"
    ZERO_STATE_WORKFLOW_SUGGESTION = "ZERO_STATE_WORKFLOW_SUGGESTION"
    PERSONALIZED_CHAT_SUGGESTION = "PERSONALIZED_CHAT_SUGGESTION"
    DAILY_DIGEST = "DAILY_DIGEST"


class FeedRequestTypedDict(TypedDict):
    categories: NotRequired[List[FeedRequestCategory]]
    r"""Categories of content requested. An allowlist gives flexibility to request content separately or together."""
    request_options: NotRequired[FeedRequestOptionsTypedDict]
    timeout_millis: NotRequired[int]
    r"""Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer."""
    session_info: NotRequired[SessionInfoTypedDict]


class FeedRequest(BaseModel):
    categories: Optional[List[FeedRequestCategory]] = None
    r"""Categories of content requested. An allowlist gives flexibility to request content separately or together."""

    request_options: Annotated[
        Optional[FeedRequestOptions], pydantic.Field(alias="requestOptions")
    ] = None

    timeout_millis: Annotated[Optional[int], pydantic.Field(alias="timeoutMillis")] = (
        None
    )
    r"""Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer."""

    session_info: Annotated[
        Optional[SessionInfo], pydantic.Field(alias="sessionInfo")
    ] = None
