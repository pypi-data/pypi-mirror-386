"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .authconfig import AuthConfig, AuthConfigTypedDict
from .objectpermissions import ObjectPermissions, ObjectPermissionsTypedDict
from .personobject import PersonObject, PersonObjectTypedDict
from datetime import datetime
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ToolMetadataType(str, Enum):
    r"""The type of tool."""

    RETRIEVAL = "RETRIEVAL"
    ACTION = "ACTION"


class KnowledgeType(str, Enum):
    r"""Indicates the kind of knowledge a tool would access or modify."""

    NEUTRAL_KNOWLEDGE = "NEUTRAL_KNOWLEDGE"
    COMPANY_KNOWLEDGE = "COMPANY_KNOWLEDGE"
    WORLD_KNOWLEDGE = "WORLD_KNOWLEDGE"


class WriteActionType(str, Enum):
    r"""Valid only for write actions. Represents the type of write action. REDIRECT - The client renders the URL which contains information for carrying out the action. EXECUTION - Send a request to an external server and execute the action."""

    REDIRECT = "REDIRECT"
    EXECUTION = "EXECUTION"


class AuthType(str, Enum):
    r"""The type of authentication being used.
    Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
    'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
    'OAUTH_USER' uses individual user tokens for external API calls.
    'DWD' refers to domain wide delegation.

    """

    NONE = "NONE"
    OAUTH_USER = "OAUTH_USER"
    OAUTH_ADMIN = "OAUTH_ADMIN"
    API_KEY = "API_KEY"
    BASIC_AUTH = "BASIC_AUTH"
    DWD = "DWD"


class ToolMetadataTypedDict(TypedDict):
    r"""The manifest for a tool that can be used to augment Glean Assistant."""

    type: ToolMetadataType
    r"""The type of tool."""
    name: str
    r"""Unique identifier for the tool. Name should be understandable by the LLM, and will be used to invoke a tool."""
    display_name: str
    r"""Human understandable name of the tool. Max 50 characters."""
    display_description: str
    r"""Description of the tool meant for a human."""
    tool_id: NotRequired[str]
    r"""An opaque id which is unique identifier for the tool."""
    logo_url: NotRequired[str]
    r"""URL used to fetch the logo."""
    object_name: NotRequired[str]
    r"""Name of the generated object. This will be used to indicate to the end user what the generated object contains."""
    knowledge_type: NotRequired[KnowledgeType]
    r"""Indicates the kind of knowledge a tool would access or modify."""
    created_by: NotRequired[PersonObjectTypedDict]
    last_updated_by: NotRequired[PersonObjectTypedDict]
    created_at: NotRequired[datetime]
    r"""The time the tool was created in ISO format (ISO 8601)"""
    last_updated_at: NotRequired[datetime]
    r"""The time the tool was last updated in ISO format (ISO 8601)"""
    write_action_type: NotRequired[WriteActionType]
    r"""Valid only for write actions. Represents the type of write action. REDIRECT - The client renders the URL which contains information for carrying out the action. EXECUTION - Send a request to an external server and execute the action."""
    auth_type: NotRequired[AuthType]
    r"""The type of authentication being used.
    Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
    'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
    'OAUTH_USER' uses individual user tokens for external API calls.
    'DWD' refers to domain wide delegation.

    """
    auth: NotRequired[AuthConfigTypedDict]
    r"""Config for tool's authentication method."""
    permissions: NotRequired[ObjectPermissionsTypedDict]
    usage_instructions: NotRequired[str]
    r"""Usage instructions for the LLM to use this action."""
    is_setup_finished: NotRequired[bool]
    r"""Whether this action has been fully configured and validated."""


class ToolMetadata(BaseModel):
    r"""The manifest for a tool that can be used to augment Glean Assistant."""

    type: ToolMetadataType
    r"""The type of tool."""

    name: str
    r"""Unique identifier for the tool. Name should be understandable by the LLM, and will be used to invoke a tool."""

    display_name: Annotated[str, pydantic.Field(alias="displayName")]
    r"""Human understandable name of the tool. Max 50 characters."""

    display_description: Annotated[str, pydantic.Field(alias="displayDescription")]
    r"""Description of the tool meant for a human."""

    tool_id: Annotated[Optional[str], pydantic.Field(alias="toolId")] = None
    r"""An opaque id which is unique identifier for the tool."""

    logo_url: Annotated[Optional[str], pydantic.Field(alias="logoUrl")] = None
    r"""URL used to fetch the logo."""

    object_name: Annotated[Optional[str], pydantic.Field(alias="objectName")] = None
    r"""Name of the generated object. This will be used to indicate to the end user what the generated object contains."""

    knowledge_type: Annotated[
        Optional[KnowledgeType], pydantic.Field(alias="knowledgeType")
    ] = None
    r"""Indicates the kind of knowledge a tool would access or modify."""

    created_by: Annotated[Optional[PersonObject], pydantic.Field(alias="createdBy")] = (
        None
    )

    last_updated_by: Annotated[
        Optional[PersonObject], pydantic.Field(alias="lastUpdatedBy")
    ] = None

    created_at: Annotated[Optional[datetime], pydantic.Field(alias="createdAt")] = None
    r"""The time the tool was created in ISO format (ISO 8601)"""

    last_updated_at: Annotated[
        Optional[datetime], pydantic.Field(alias="lastUpdatedAt")
    ] = None
    r"""The time the tool was last updated in ISO format (ISO 8601)"""

    write_action_type: Annotated[
        Optional[WriteActionType], pydantic.Field(alias="writeActionType")
    ] = None
    r"""Valid only for write actions. Represents the type of write action. REDIRECT - The client renders the URL which contains information for carrying out the action. EXECUTION - Send a request to an external server and execute the action."""

    auth_type: Annotated[Optional[AuthType], pydantic.Field(alias="authType")] = None
    r"""The type of authentication being used.
    Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
    'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
    'OAUTH_USER' uses individual user tokens for external API calls.
    'DWD' refers to domain wide delegation.

    """

    auth: Optional[AuthConfig] = None
    r"""Config for tool's authentication method."""

    permissions: Optional[ObjectPermissions] = None

    usage_instructions: Annotated[
        Optional[str], pydantic.Field(alias="usageInstructions")
    ] = None
    r"""Usage instructions for the LLM to use this action."""

    is_setup_finished: Annotated[
        Optional[bool], pydantic.Field(alias="isSetupFinished")
    ] = None
    r"""Whether this action has been fully configured and validated."""
