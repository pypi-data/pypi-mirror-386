"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .labeledcountinfo import LabeledCountInfo, LabeledCountInfoTypedDict
from .peruserassistantinsight import (
    PerUserAssistantInsight,
    PerUserAssistantInsightTypedDict,
)
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AssistantInsightsResponseTypedDict(TypedDict):
    monthly_active_users: NotRequired[int]
    r"""Number of current Monthly Active Users, in the specified departments."""
    weekly_active_users: NotRequired[int]
    r"""Number of current Weekly Active Users, in the specified departments."""
    last_updated_ts: NotRequired[int]
    r"""Unix timestamp of the last update for the insights data in the response."""
    monthly_active_user_timeseries: NotRequired[LabeledCountInfoTypedDict]
    weekly_active_user_timeseries: NotRequired[LabeledCountInfoTypedDict]
    daily_active_user_timeseries: NotRequired[LabeledCountInfoTypedDict]
    total_signups: NotRequired[int]
    r"""Number of current signed up employees in the specified departments, according to the Org Chart."""
    chat_messages_timeseries: NotRequired[LabeledCountInfoTypedDict]
    summarizations_timeseries: NotRequired[LabeledCountInfoTypedDict]
    ai_answers_timeseries: NotRequired[LabeledCountInfoTypedDict]
    gleanbot_interactions_timeseries: NotRequired[LabeledCountInfoTypedDict]
    per_user_insights: NotRequired[List[PerUserAssistantInsightTypedDict]]
    upvotes_timeseries: NotRequired[LabeledCountInfoTypedDict]
    downvotes_timeseries: NotRequired[LabeledCountInfoTypedDict]


class AssistantInsightsResponse(BaseModel):
    monthly_active_users: Annotated[
        Optional[int], pydantic.Field(alias="monthlyActiveUsers")
    ] = None
    r"""Number of current Monthly Active Users, in the specified departments."""

    weekly_active_users: Annotated[
        Optional[int], pydantic.Field(alias="weeklyActiveUsers")
    ] = None
    r"""Number of current Weekly Active Users, in the specified departments."""

    last_updated_ts: Annotated[Optional[int], pydantic.Field(alias="lastUpdatedTs")] = (
        None
    )
    r"""Unix timestamp of the last update for the insights data in the response."""

    monthly_active_user_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="monthlyActiveUserTimeseries")
    ] = None

    weekly_active_user_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="weeklyActiveUserTimeseries")
    ] = None

    daily_active_user_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="dailyActiveUserTimeseries")
    ] = None

    total_signups: Annotated[Optional[int], pydantic.Field(alias="totalSignups")] = None
    r"""Number of current signed up employees in the specified departments, according to the Org Chart."""

    chat_messages_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="chatMessagesTimeseries")
    ] = None

    summarizations_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="summarizationsTimeseries")
    ] = None

    ai_answers_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="aiAnswersTimeseries")
    ] = None

    gleanbot_interactions_timeseries: Annotated[
        Optional[LabeledCountInfo],
        pydantic.Field(alias="gleanbotInteractionsTimeseries"),
    ] = None

    per_user_insights: Annotated[
        Optional[List[PerUserAssistantInsight]], pydantic.Field(alias="perUserInsights")
    ] = None

    upvotes_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="upvotesTimeseries")
    ] = None

    downvotes_timeseries: Annotated[
        Optional[LabeledCountInfo], pydantic.Field(alias="downvotesTimeseries")
    ] = None
