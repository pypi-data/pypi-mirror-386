"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .collection import Collection, CollectionTypedDict
from .collectionerror import CollectionError, CollectionErrorTypedDict
from .collectionitem import CollectionItem, CollectionItemTypedDict
from .collectionpinnedmetadata import (
    CollectionPinnedMetadata,
    CollectionPinnedMetadataTypedDict,
)
from .facetfilter import FacetFilter, FacetFilterTypedDict
from .objectpermissions import ObjectPermissions, ObjectPermissionsTypedDict
from .person import Person, PersonTypedDict
from .thumbnail import Thumbnail, ThumbnailTypedDict
from .userrolespecification import UserRoleSpecification, UserRoleSpecificationTypedDict
from datetime import datetime
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EditCollectionResponseErrorCode(str, Enum):
    NAME_EXISTS = "NAME_EXISTS"
    NOT_FOUND = "NOT_FOUND"
    COLLECTION_PINNED = "COLLECTION_PINNED"
    CONCURRENT_HIERARCHY_EDIT = "CONCURRENT_HIERARCHY_EDIT"
    HEIGHT_VIOLATION = "HEIGHT_VIOLATION"
    WIDTH_VIOLATION = "WIDTH_VIOLATION"
    NO_PERMISSIONS = "NO_PERMISSIONS"


class EditCollectionResponseTypedDict(TypedDict):
    name: str
    r"""The unique name of the Collection."""
    description: str
    r"""A brief summary of the Collection's contents."""
    id: int
    r"""The unique ID of the Collection."""
    error_code: EditCollectionResponseErrorCode
    added_roles: NotRequired[List[UserRoleSpecificationTypedDict]]
    r"""A list of added user roles for the Collection."""
    removed_roles: NotRequired[List[UserRoleSpecificationTypedDict]]
    r"""A list of removed user roles for the Collection."""
    audience_filters: NotRequired[List[FacetFilterTypedDict]]
    r"""Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search."""
    icon: NotRequired[str]
    r"""The emoji icon of this Collection."""
    admin_locked: NotRequired[bool]
    r"""Indicates whether edits are allowed for everyone or only admins."""
    parent_id: NotRequired[int]
    r"""The parent of this Collection, or 0 if it's a top-level Collection."""
    thumbnail: NotRequired[ThumbnailTypedDict]
    allowed_datasource: NotRequired[str]
    r"""The datasource type this Collection can hold."""
    permissions: NotRequired[ObjectPermissionsTypedDict]
    create_time: NotRequired[datetime]
    update_time: NotRequired[datetime]
    creator: NotRequired[PersonTypedDict]
    updated_by: NotRequired[PersonTypedDict]
    item_count: NotRequired[int]
    r"""The number of items currently in the Collection. Separated from the actual items so we can grab the count without items."""
    child_count: NotRequired[int]
    r"""The number of children Collections. Separated from the actual children so we can grab the count without children."""
    items: NotRequired[List[CollectionItemTypedDict]]
    r"""The items in this Collection."""
    pin_metadata: NotRequired[CollectionPinnedMetadataTypedDict]
    shortcuts: NotRequired[List[str]]
    r"""The names of the shortcuts (Go Links) that point to this Collection."""
    children: NotRequired[List[CollectionTypedDict]]
    r"""The children Collections of this Collection."""
    roles: NotRequired[List[UserRoleSpecificationTypedDict]]
    r"""A list of user roles for the Collection."""
    collection: NotRequired[CollectionTypedDict]
    error: NotRequired[CollectionErrorTypedDict]


class EditCollectionResponse(BaseModel):
    name: str
    r"""The unique name of the Collection."""

    description: str
    r"""A brief summary of the Collection's contents."""

    id: int
    r"""The unique ID of the Collection."""

    error_code: Annotated[
        EditCollectionResponseErrorCode, pydantic.Field(alias="errorCode")
    ]

    added_roles: Annotated[
        Optional[List[UserRoleSpecification]], pydantic.Field(alias="addedRoles")
    ] = None
    r"""A list of added user roles for the Collection."""

    removed_roles: Annotated[
        Optional[List[UserRoleSpecification]], pydantic.Field(alias="removedRoles")
    ] = None
    r"""A list of removed user roles for the Collection."""

    audience_filters: Annotated[
        Optional[List[FacetFilter]], pydantic.Field(alias="audienceFilters")
    ] = None
    r"""Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search."""

    icon: Optional[str] = None
    r"""The emoji icon of this Collection."""

    admin_locked: Annotated[Optional[bool], pydantic.Field(alias="adminLocked")] = None
    r"""Indicates whether edits are allowed for everyone or only admins."""

    parent_id: Annotated[Optional[int], pydantic.Field(alias="parentId")] = None
    r"""The parent of this Collection, or 0 if it's a top-level Collection."""

    thumbnail: Optional[Thumbnail] = None

    allowed_datasource: Annotated[
        Optional[str], pydantic.Field(alias="allowedDatasource")
    ] = None
    r"""The datasource type this Collection can hold."""

    permissions: Optional[ObjectPermissions] = None

    create_time: Annotated[Optional[datetime], pydantic.Field(alias="createTime")] = (
        None
    )

    update_time: Annotated[Optional[datetime], pydantic.Field(alias="updateTime")] = (
        None
    )

    creator: Optional[Person] = None

    updated_by: Annotated[Optional[Person], pydantic.Field(alias="updatedBy")] = None

    item_count: Annotated[Optional[int], pydantic.Field(alias="itemCount")] = None
    r"""The number of items currently in the Collection. Separated from the actual items so we can grab the count without items."""

    child_count: Annotated[Optional[int], pydantic.Field(alias="childCount")] = None
    r"""The number of children Collections. Separated from the actual children so we can grab the count without children."""

    items: Optional[List[CollectionItem]] = None
    r"""The items in this Collection."""

    pin_metadata: Annotated[
        Optional[CollectionPinnedMetadata], pydantic.Field(alias="pinMetadata")
    ] = None

    shortcuts: Optional[List[str]] = None
    r"""The names of the shortcuts (Go Links) that point to this Collection."""

    children: Optional[List[Collection]] = None
    r"""The children Collections of this Collection."""

    roles: Optional[List[UserRoleSpecification]] = None
    r"""A list of user roles for the Collection."""

    collection: Optional[Collection] = None

    error: Optional[CollectionError] = None
