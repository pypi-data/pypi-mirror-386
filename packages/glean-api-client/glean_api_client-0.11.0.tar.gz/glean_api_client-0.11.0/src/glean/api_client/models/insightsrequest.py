"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .agentsinsightsv2request import (
    AgentsInsightsV2Request,
    AgentsInsightsV2RequestTypedDict,
)
from .insightsagentsrequestoptions import (
    InsightsAgentsRequestOptions,
    InsightsAgentsRequestOptionsTypedDict,
)
from .insightsaiapprequestoptions import (
    InsightsAiAppRequestOptions,
    InsightsAiAppRequestOptionsTypedDict,
)
from .insightsassistantrequest import (
    InsightsAssistantRequest,
    InsightsAssistantRequestTypedDict,
)
from .insightsoverviewrequest import (
    InsightsOverviewRequest,
    InsightsOverviewRequestTypedDict,
)
from .period import Period, PeriodTypedDict
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class InsightsRequestCategory(str, Enum):
    AGENTS = "AGENTS"
    AGENT_USERS = "AGENT_USERS"
    TOP_AGENTS = "TOP_AGENTS"
    AGENTS_USAGE_BY_DEPARTMENT = "AGENTS_USAGE_BY_DEPARTMENT"
    AI = "AI"
    AI_APPS = "AI_APPS"
    ANNOUNCEMENTS = "ANNOUNCEMENTS"
    ANSWERS = "ANSWERS"
    COLLECTIONS = "COLLECTIONS"
    CONTENT = "CONTENT"
    GLEAN_ASSIST = "GLEAN_ASSIST"
    QUERIES = "QUERIES"
    SHORTCUTS = "SHORTCUTS"
    USERS = "USERS"


class AssistantActivityType(str, Enum):
    GLEAN_CHAT = "GLEAN_CHAT"
    AI_SUMMARY = "AI_SUMMARY"
    AI_ANSWER = "AI_ANSWER"
    GLEANBOT_RESPONSE = "GLEANBOT_RESPONSE"


class InsightsRequestTypedDict(TypedDict):
    overview_request: NotRequired[InsightsOverviewRequestTypedDict]
    assistant_request: NotRequired[InsightsAssistantRequestTypedDict]
    agents_request: NotRequired[AgentsInsightsV2RequestTypedDict]
    disable_per_user_insights: NotRequired[bool]
    r"""If true, suppresses the generation of per-user Insights in the response. Default is false."""
    categories: NotRequired[List[InsightsRequestCategory]]
    r"""Categories of data requested. Request can include single or multiple types."""
    departments: NotRequired[List[str]]
    r"""Departments that the data is requested for. If this is empty, corresponds to whole company."""
    day_range: NotRequired[PeriodTypedDict]
    ai_app_request_options: NotRequired[InsightsAiAppRequestOptionsTypedDict]
    agents_request_options: NotRequired[InsightsAgentsRequestOptionsTypedDict]
    assistant_activity_types: NotRequired[List[AssistantActivityType]]
    r"""Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category."""


class InsightsRequest(BaseModel):
    overview_request: Annotated[
        Optional[InsightsOverviewRequest], pydantic.Field(alias="overviewRequest")
    ] = None

    assistant_request: Annotated[
        Optional[InsightsAssistantRequest], pydantic.Field(alias="assistantRequest")
    ] = None

    agents_request: Annotated[
        Optional[AgentsInsightsV2Request], pydantic.Field(alias="agentsRequest")
    ] = None

    disable_per_user_insights: Annotated[
        Optional[bool], pydantic.Field(alias="disablePerUserInsights")
    ] = None
    r"""If true, suppresses the generation of per-user Insights in the response. Default is false."""

    categories: Annotated[
        Optional[List[InsightsRequestCategory]],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""Categories of data requested. Request can include single or multiple types."""

    departments: Annotated[
        Optional[List[str]],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""Departments that the data is requested for. If this is empty, corresponds to whole company."""

    day_range: Annotated[Optional[Period], pydantic.Field(alias="dayRange")] = None

    ai_app_request_options: Annotated[
        Optional[InsightsAiAppRequestOptions],
        pydantic.Field(alias="aiAppRequestOptions"),
    ] = None

    agents_request_options: Annotated[
        Optional[InsightsAgentsRequestOptions],
        pydantic.Field(alias="agentsRequestOptions"),
    ] = None

    assistant_activity_types: Annotated[
        Optional[List[AssistantActivityType]],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="assistantActivityTypes",
        ),
    ] = None
    r"""Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category."""
