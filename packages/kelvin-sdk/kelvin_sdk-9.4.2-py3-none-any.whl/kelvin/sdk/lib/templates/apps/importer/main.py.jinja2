import asyncio

from kelvin.application import KelvinApp, ResourceDatastream
from kelvin.logs import logger
from kelvin.message import AssetDataMessage


class {{ app_type.capitalize() }}Application:
    def __init__(self, app: KelvinApp = KelvinApp()) -> None:
        self.app = app
        self.app.on_connect = self.on_connect
        self.app.on_disconnect = self.on_disconnect
        self.app.on_app_configuration = self.on_app_configuration
        self.app.on_control_change = self.on_control_change
        self.io = []

    async def on_connect(self) -> None:
        logger.debug("App connected.")

    async def on_disconnect(self) -> None:
        logger.debug("App disconnected.")

    async def on_app_configuration(self, conf: dict) -> None:
        logger.debug("App configuration change: ", config=conf)

    async def on_control_change(self, cc_msg: AssetDataMessage) -> None:
        logger.debug("Received Control Change Message: ", control_change=cc_msg)

    async def main(self) -> None:
        await self.app.connect()

        # Setup IO Mapping List
        self.io: list[ResourceDatastream] = [ds for a in self.app.assets.values() for ds in a.datastreams.values()]

        logger.debug("App Configuration: ", config=self.app.app_configuration)
        logger.debug("App IO Mapping: ", config=self.io)


if __name__ == "__main__":
    app = {{ app_type.capitalize() }}Application()
    asyncio.run(app.main())
