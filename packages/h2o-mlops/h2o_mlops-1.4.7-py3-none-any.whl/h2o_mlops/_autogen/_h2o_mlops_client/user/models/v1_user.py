# coding: utf-8

"""
    ai/h2o/user/v1/group.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.user.configuration import Configuration


class V1User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'active': 'bool',
        'emails': 'list[V1Email]',
        'login_principal': 'str'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'active': 'active',
        'emails': 'emails',
        'login_principal': 'loginPrincipal'
    }

    def __init__(self, name=None, display_name=None, active=None, emails=None, login_principal=None, local_vars_configuration=None):  # noqa: E501
        """V1User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._active = None
        self._emails = None
        self._login_principal = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if active is not None:
            self.active = active
        if emails is not None:
            self.emails = emails
        if login_principal is not None:
            self.login_principal = login_principal

    @property
    def name(self):
        """Gets the name of this V1User.  # noqa: E501

        Name of the User resource.  For example: \"users/<UUID>\". Don't confused with SCIM 2.0 'name' attribute that is not included in this minimal representation and should be mapped to human_readable_name field when included.  # noqa: E501

        :return: The name of this V1User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1User.

        Name of the User resource.  For example: \"users/<UUID>\". Don't confused with SCIM 2.0 'name' attribute that is not included in this minimal representation and should be mapped to human_readable_name field when included.  # noqa: E501

        :param name: The name of this V1User.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this V1User.  # noqa: E501

        Name of the User that is displayed on the front-end.  # noqa: E501

        :return: The display_name of this V1User.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1User.

        Name of the User that is displayed on the front-end.  # noqa: E501

        :param display_name: The display_name of this V1User.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def active(self):
        """Gets the active of this V1User.  # noqa: E501

        Flag marking whether the User is active (true) or not (false). This typically means whether User should by default appear in the query result or whether it can authenticate.  # noqa: E501

        :return: The active of this V1User.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this V1User.

        Flag marking whether the User is active (true) or not (false). This typically means whether User should by default appear in the query result or whether it can authenticate.  # noqa: E501

        :param active: The active of this V1User.  # noqa: E501
        :type active: bool
        """

        self._active = active

    @property
    def emails(self):
        """Gets the emails of this V1User.  # noqa: E501

        List of User's email addresses.  # noqa: E501

        :return: The emails of this V1User.  # noqa: E501
        :rtype: list[V1Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this V1User.

        List of User's email addresses.  # noqa: E501

        :param emails: The emails of this V1User.  # noqa: E501
        :type emails: list[V1Email]
        """

        self._emails = emails

    @property
    def login_principal(self):
        """Gets the login_principal of this V1User.  # noqa: E501

        Unique user-friendly identifier of the User typically used for the authentication.  # noqa: E501

        :return: The login_principal of this V1User.  # noqa: E501
        :rtype: str
        """
        return self._login_principal

    @login_principal.setter
    def login_principal(self, login_principal):
        """Sets the login_principal of this V1User.

        Unique user-friendly identifier of the User typically used for the authentication.  # noqa: E501

        :param login_principal: The login_principal of this V1User.  # noqa: E501
        :type login_principal: str
        """

        self._login_principal = login_principal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1User):
            return True

        return self.to_dict() != other.to_dict()
