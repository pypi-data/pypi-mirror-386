# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageExperiment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'display_name': 'str',
        'owner_id': 'str',
        'created_time': 'datetime',
        'last_modified_time': 'datetime',
        'metadata': 'StorageMetadata',
        'parameters': 'StorageExperimentParameters',
        'status': 'ExperimentExperimentStatus',
        'statistics': 'StorageExperimentStatistics',
        'tag': 'list[StorageTag]',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'displayName',
        'owner_id': 'ownerId',
        'created_time': 'createdTime',
        'last_modified_time': 'lastModifiedTime',
        'metadata': 'metadata',
        'parameters': 'parameters',
        'status': 'status',
        'statistics': 'statistics',
        'tag': 'tag',
        'description': 'description'
    }

    def __init__(self, id=None, display_name=None, owner_id=None, created_time=None, last_modified_time=None, metadata=None, parameters=None, status=None, statistics=None, tag=None, description=None, local_vars_configuration=None):  # noqa: E501
        """StorageExperiment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._display_name = None
        self._owner_id = None
        self._created_time = None
        self._last_modified_time = None
        self._metadata = None
        self._parameters = None
        self._status = None
        self._statistics = None
        self._tag = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if owner_id is not None:
            self.owner_id = owner_id
        if created_time is not None:
            self.created_time = created_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if metadata is not None:
            self.metadata = metadata
        if parameters is not None:
            self.parameters = parameters
        if status is not None:
            self.status = status
        if statistics is not None:
            self.statistics = statistics
        if tag is not None:
            self.tag = tag
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this StorageExperiment.  # noqa: E501

        An ID of the entity, unique across all entity types.  # noqa: E501

        :return: The id of this StorageExperiment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageExperiment.

        An ID of the entity, unique across all entity types.  # noqa: E501

        :param id: The id of this StorageExperiment.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this StorageExperiment.  # noqa: E501

        User readable name of the entity to be displayed in the UIs.  # noqa: E501

        :return: The display_name of this StorageExperiment.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this StorageExperiment.

        User readable name of the entity to be displayed in the UIs.  # noqa: E501

        :param display_name: The display_name of this StorageExperiment.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def owner_id(self):
        """Gets the owner_id of this StorageExperiment.  # noqa: E501

        ID of the user owning this entity.  # noqa: E501

        :return: The owner_id of this StorageExperiment.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this StorageExperiment.

        ID of the user owning this entity.  # noqa: E501

        :param owner_id: The owner_id of this StorageExperiment.  # noqa: E501
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def created_time(self):
        """Gets the created_time of this StorageExperiment.  # noqa: E501

        Creation timestamp.  # noqa: E501

        :return: The created_time of this StorageExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this StorageExperiment.

        Creation timestamp.  # noqa: E501

        :param created_time: The created_time of this StorageExperiment.  # noqa: E501
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this StorageExperiment.  # noqa: E501

        Timestamp of last modification.  # noqa: E501

        :return: The last_modified_time of this StorageExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this StorageExperiment.

        Timestamp of last modification.  # noqa: E501

        :param last_modified_time: The last_modified_time of this StorageExperiment.  # noqa: E501
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def metadata(self):
        """Gets the metadata of this StorageExperiment.  # noqa: E501


        :return: The metadata of this StorageExperiment.  # noqa: E501
        :rtype: StorageMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this StorageExperiment.


        :param metadata: The metadata of this StorageExperiment.  # noqa: E501
        :type metadata: StorageMetadata
        """

        self._metadata = metadata

    @property
    def parameters(self):
        """Gets the parameters of this StorageExperiment.  # noqa: E501


        :return: The parameters of this StorageExperiment.  # noqa: E501
        :rtype: StorageExperimentParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this StorageExperiment.


        :param parameters: The parameters of this StorageExperiment.  # noqa: E501
        :type parameters: StorageExperimentParameters
        """

        self._parameters = parameters

    @property
    def status(self):
        """Gets the status of this StorageExperiment.  # noqa: E501


        :return: The status of this StorageExperiment.  # noqa: E501
        :rtype: ExperimentExperimentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StorageExperiment.


        :param status: The status of this StorageExperiment.  # noqa: E501
        :type status: ExperimentExperimentStatus
        """

        self._status = status

    @property
    def statistics(self):
        """Gets the statistics of this StorageExperiment.  # noqa: E501


        :return: The statistics of this StorageExperiment.  # noqa: E501
        :rtype: StorageExperimentStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this StorageExperiment.


        :param statistics: The statistics of this StorageExperiment.  # noqa: E501
        :type statistics: StorageExperimentStatistics
        """

        self._statistics = statistics

    @property
    def tag(self):
        """Gets the tag of this StorageExperiment.  # noqa: E501

        Tags this experiment is annotated with.  # noqa: E501

        :return: The tag of this StorageExperiment.  # noqa: E501
        :rtype: list[StorageTag]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this StorageExperiment.

        Tags this experiment is annotated with.  # noqa: E501

        :param tag: The tag of this StorageExperiment.  # noqa: E501
        :type tag: list[StorageTag]
        """

        self._tag = tag

    @property
    def description(self):
        """Gets the description of this StorageExperiment.  # noqa: E501

        Description of the experiment.  # noqa: E501

        :return: The description of this StorageExperiment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StorageExperiment.

        Description of the experiment.  # noqa: E501

        :param description: The description of this StorageExperiment.  # noqa: E501
        :type description: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageExperiment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageExperiment):
            return True

        return self.to_dict() != other.to_dict()
