# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'double_value': 'float',
        'string_value': 'str',
        'int64_value': 'str',
        'bool_value': 'bool',
        'json_value': 'str',
        'timestamp_value': 'datetime',
        'duration_value': 'str',
        'proto_value': 'ProtobufAny',
        'id_value': 'str'
    }

    attribute_map = {
        'double_value': 'doubleValue',
        'string_value': 'stringValue',
        'int64_value': 'int64Value',
        'bool_value': 'boolValue',
        'json_value': 'jsonValue',
        'timestamp_value': 'timestampValue',
        'duration_value': 'durationValue',
        'proto_value': 'protoValue',
        'id_value': 'idValue'
    }

    def __init__(self, double_value=None, string_value=None, int64_value=None, bool_value=None, json_value=None, timestamp_value=None, duration_value=None, proto_value=None, id_value=None, local_vars_configuration=None):  # noqa: E501
        """StorageValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._double_value = None
        self._string_value = None
        self._int64_value = None
        self._bool_value = None
        self._json_value = None
        self._timestamp_value = None
        self._duration_value = None
        self._proto_value = None
        self._id_value = None
        self.discriminator = None

        if double_value is not None:
            self.double_value = double_value
        if string_value is not None:
            self.string_value = string_value
        if int64_value is not None:
            self.int64_value = int64_value
        if bool_value is not None:
            self.bool_value = bool_value
        if json_value is not None:
            self.json_value = json_value
        if timestamp_value is not None:
            self.timestamp_value = timestamp_value
        if duration_value is not None:
            self.duration_value = duration_value
        if proto_value is not None:
            self.proto_value = proto_value
        if id_value is not None:
            self.id_value = id_value

    @property
    def double_value(self):
        """Gets the double_value of this StorageValue.  # noqa: E501


        :return: The double_value of this StorageValue.  # noqa: E501
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this StorageValue.


        :param double_value: The double_value of this StorageValue.  # noqa: E501
        :type double_value: float
        """

        self._double_value = double_value

    @property
    def string_value(self):
        """Gets the string_value of this StorageValue.  # noqa: E501


        :return: The string_value of this StorageValue.  # noqa: E501
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this StorageValue.


        :param string_value: The string_value of this StorageValue.  # noqa: E501
        :type string_value: str
        """

        self._string_value = string_value

    @property
    def int64_value(self):
        """Gets the int64_value of this StorageValue.  # noqa: E501


        :return: The int64_value of this StorageValue.  # noqa: E501
        :rtype: str
        """
        return self._int64_value

    @int64_value.setter
    def int64_value(self, int64_value):
        """Sets the int64_value of this StorageValue.


        :param int64_value: The int64_value of this StorageValue.  # noqa: E501
        :type int64_value: str
        """

        self._int64_value = int64_value

    @property
    def bool_value(self):
        """Gets the bool_value of this StorageValue.  # noqa: E501


        :return: The bool_value of this StorageValue.  # noqa: E501
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this StorageValue.


        :param bool_value: The bool_value of this StorageValue.  # noqa: E501
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def json_value(self):
        """Gets the json_value of this StorageValue.  # noqa: E501


        :return: The json_value of this StorageValue.  # noqa: E501
        :rtype: str
        """
        return self._json_value

    @json_value.setter
    def json_value(self, json_value):
        """Sets the json_value of this StorageValue.


        :param json_value: The json_value of this StorageValue.  # noqa: E501
        :type json_value: str
        """

        self._json_value = json_value

    @property
    def timestamp_value(self):
        """Gets the timestamp_value of this StorageValue.  # noqa: E501


        :return: The timestamp_value of this StorageValue.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp_value

    @timestamp_value.setter
    def timestamp_value(self, timestamp_value):
        """Sets the timestamp_value of this StorageValue.


        :param timestamp_value: The timestamp_value of this StorageValue.  # noqa: E501
        :type timestamp_value: datetime
        """

        self._timestamp_value = timestamp_value

    @property
    def duration_value(self):
        """Gets the duration_value of this StorageValue.  # noqa: E501


        :return: The duration_value of this StorageValue.  # noqa: E501
        :rtype: str
        """
        return self._duration_value

    @duration_value.setter
    def duration_value(self, duration_value):
        """Sets the duration_value of this StorageValue.


        :param duration_value: The duration_value of this StorageValue.  # noqa: E501
        :type duration_value: str
        """

        self._duration_value = duration_value

    @property
    def proto_value(self):
        """Gets the proto_value of this StorageValue.  # noqa: E501


        :return: The proto_value of this StorageValue.  # noqa: E501
        :rtype: ProtobufAny
        """
        return self._proto_value

    @proto_value.setter
    def proto_value(self, proto_value):
        """Sets the proto_value of this StorageValue.


        :param proto_value: The proto_value of this StorageValue.  # noqa: E501
        :type proto_value: ProtobufAny
        """

        self._proto_value = proto_value

    @property
    def id_value(self):
        """Gets the id_value of this StorageValue.  # noqa: E501


        :return: The id_value of this StorageValue.  # noqa: E501
        :rtype: str
        """
        return self._id_value

    @id_value.setter
    def id_value(self, id_value):
        """Sets the id_value of this StorageValue.


        :param id_value: The id_value of this StorageValue.  # noqa: E501
        :type id_value: str
        """

        self._id_value = id_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageValue):
            return True

        return self.to_dict() != other.to_dict()
