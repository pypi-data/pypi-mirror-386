# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageListProjectEventsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event': 'list[StorageAuditEvent]',
        'paging': 'StoragePagingResponse',
        'event_count': 'str'
    }

    attribute_map = {
        'event': 'event',
        'paging': 'paging',
        'event_count': 'eventCount'
    }

    def __init__(self, event=None, paging=None, event_count=None, local_vars_configuration=None):  # noqa: E501
        """StorageListProjectEventsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._event = None
        self._paging = None
        self._event_count = None
        self.discriminator = None

        if event is not None:
            self.event = event
        if paging is not None:
            self.paging = paging
        if event_count is not None:
            self.event_count = event_count

    @property
    def event(self):
        """Gets the event of this StorageListProjectEventsResponse.  # noqa: E501


        :return: The event of this StorageListProjectEventsResponse.  # noqa: E501
        :rtype: list[StorageAuditEvent]
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this StorageListProjectEventsResponse.


        :param event: The event of this StorageListProjectEventsResponse.  # noqa: E501
        :type event: list[StorageAuditEvent]
        """

        self._event = event

    @property
    def paging(self):
        """Gets the paging of this StorageListProjectEventsResponse.  # noqa: E501


        :return: The paging of this StorageListProjectEventsResponse.  # noqa: E501
        :rtype: StoragePagingResponse
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this StorageListProjectEventsResponse.


        :param paging: The paging of this StorageListProjectEventsResponse.  # noqa: E501
        :type paging: StoragePagingResponse
        """

        self._paging = paging

    @property
    def event_count(self):
        """Gets the event_count of this StorageListProjectEventsResponse.  # noqa: E501


        :return: The event_count of this StorageListProjectEventsResponse.  # noqa: E501
        :rtype: str
        """
        return self._event_count

    @event_count.setter
    def event_count(self, event_count):
        """Sets the event_count of this StorageListProjectEventsResponse.


        :param event_count: The event_count of this StorageListProjectEventsResponse.  # noqa: E501
        :type event_count: str
        """

        self._event_count = event_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageListProjectEventsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageListProjectEventsResponse):
            return True

        return self.to_dict() != other.to_dict()
