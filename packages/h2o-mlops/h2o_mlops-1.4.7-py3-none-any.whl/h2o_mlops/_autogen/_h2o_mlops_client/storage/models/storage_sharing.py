# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageSharing(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'entity_id': 'str',
        'root_sharing_id': 'str',
        'user_id': 'str',
        'restriction_role_id': 'str',
        'type': 'StorageSharingType',
        'created_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'entity_id': 'entityId',
        'root_sharing_id': 'rootSharingId',
        'user_id': 'userId',
        'restriction_role_id': 'restrictionRoleId',
        'type': 'type',
        'created_time': 'createdTime'
    }

    def __init__(self, id=None, entity_id=None, root_sharing_id=None, user_id=None, restriction_role_id=None, type=None, created_time=None, local_vars_configuration=None):  # noqa: E501
        """StorageSharing - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._entity_id = None
        self._root_sharing_id = None
        self._user_id = None
        self._restriction_role_id = None
        self._type = None
        self._created_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if entity_id is not None:
            self.entity_id = entity_id
        if root_sharing_id is not None:
            self.root_sharing_id = root_sharing_id
        if user_id is not None:
            self.user_id = user_id
        if restriction_role_id is not None:
            self.restriction_role_id = restriction_role_id
        if type is not None:
            self.type = type
        if created_time is not None:
            self.created_time = created_time

    @property
    def id(self):
        """Gets the id of this StorageSharing.  # noqa: E501

        Unique ID of the sharing record.  # noqa: E501

        :return: The id of this StorageSharing.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageSharing.

        Unique ID of the sharing record.  # noqa: E501

        :param id: The id of this StorageSharing.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def entity_id(self):
        """Gets the entity_id of this StorageSharing.  # noqa: E501

        ID of an entity that is being shared.  # noqa: E501

        :return: The entity_id of this StorageSharing.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this StorageSharing.

        ID of an entity that is being shared.  # noqa: E501

        :param entity_id: The entity_id of this StorageSharing.  # noqa: E501
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def root_sharing_id(self):
        """Gets the root_sharing_id of this StorageSharing.  # noqa: E501

        For project entities, this field is always empty. For other entities, this field contains the ID of the project sharing record, where the sharing of the entity originates.  # noqa: E501

        :return: The root_sharing_id of this StorageSharing.  # noqa: E501
        :rtype: str
        """
        return self._root_sharing_id

    @root_sharing_id.setter
    def root_sharing_id(self, root_sharing_id):
        """Sets the root_sharing_id of this StorageSharing.

        For project entities, this field is always empty. For other entities, this field contains the ID of the project sharing record, where the sharing of the entity originates.  # noqa: E501

        :param root_sharing_id: The root_sharing_id of this StorageSharing.  # noqa: E501
        :type root_sharing_id: str
        """

        self._root_sharing_id = root_sharing_id

    @property
    def user_id(self):
        """Gets the user_id of this StorageSharing.  # noqa: E501

        If non-empty, an ID of a user to which the access is granted. Cannot be set at the same time as group.  # noqa: E501

        :return: The user_id of this StorageSharing.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this StorageSharing.

        If non-empty, an ID of a user to which the access is granted. Cannot be set at the same time as group.  # noqa: E501

        :param user_id: The user_id of this StorageSharing.  # noqa: E501
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def restriction_role_id(self):
        """Gets the restriction_role_id of this StorageSharing.  # noqa: E501

        If non-empty, restricts the allowed actions resulting from this sharing record to at most actions allowed by the specified role.  # noqa: E501

        :return: The restriction_role_id of this StorageSharing.  # noqa: E501
        :rtype: str
        """
        return self._restriction_role_id

    @restriction_role_id.setter
    def restriction_role_id(self, restriction_role_id):
        """Sets the restriction_role_id of this StorageSharing.

        If non-empty, restricts the allowed actions resulting from this sharing record to at most actions allowed by the specified role.  # noqa: E501

        :param restriction_role_id: The restriction_role_id of this StorageSharing.  # noqa: E501
        :type restriction_role_id: str
        """

        self._restriction_role_id = restriction_role_id

    @property
    def type(self):
        """Gets the type of this StorageSharing.  # noqa: E501


        :return: The type of this StorageSharing.  # noqa: E501
        :rtype: StorageSharingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageSharing.


        :param type: The type of this StorageSharing.  # noqa: E501
        :type type: StorageSharingType
        """

        self._type = type

    @property
    def created_time(self):
        """Gets the created_time of this StorageSharing.  # noqa: E501

        Creation timestamp.  # noqa: E501

        :return: The created_time of this StorageSharing.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this StorageSharing.

        Creation timestamp.  # noqa: E501

        :param created_time: The created_time of this StorageSharing.  # noqa: E501
        :type created_time: datetime
        """

        self._created_time = created_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageSharing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageSharing):
            return True

        return self.to_dict() != other.to_dict()
