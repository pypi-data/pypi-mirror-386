# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageDataValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bool_value': 'bool',
        'int32_value': 'int',
        'int64_value': 'str',
        'float32_value': 'float',
        'float64_value': 'float',
        'datetime64_value': 'str',
        'str_value': 'str'
    }

    attribute_map = {
        'bool_value': 'boolValue',
        'int32_value': 'int32Value',
        'int64_value': 'int64Value',
        'float32_value': 'float32Value',
        'float64_value': 'float64Value',
        'datetime64_value': 'datetime64Value',
        'str_value': 'strValue'
    }

    def __init__(self, bool_value=None, int32_value=None, int64_value=None, float32_value=None, float64_value=None, datetime64_value=None, str_value=None, local_vars_configuration=None):  # noqa: E501
        """StorageDataValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bool_value = None
        self._int32_value = None
        self._int64_value = None
        self._float32_value = None
        self._float64_value = None
        self._datetime64_value = None
        self._str_value = None
        self.discriminator = None

        if bool_value is not None:
            self.bool_value = bool_value
        if int32_value is not None:
            self.int32_value = int32_value
        if int64_value is not None:
            self.int64_value = int64_value
        if float32_value is not None:
            self.float32_value = float32_value
        if float64_value is not None:
            self.float64_value = float64_value
        if datetime64_value is not None:
            self.datetime64_value = datetime64_value
        if str_value is not None:
            self.str_value = str_value

    @property
    def bool_value(self):
        """Gets the bool_value of this StorageDataValue.  # noqa: E501


        :return: The bool_value of this StorageDataValue.  # noqa: E501
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this StorageDataValue.


        :param bool_value: The bool_value of this StorageDataValue.  # noqa: E501
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def int32_value(self):
        """Gets the int32_value of this StorageDataValue.  # noqa: E501


        :return: The int32_value of this StorageDataValue.  # noqa: E501
        :rtype: int
        """
        return self._int32_value

    @int32_value.setter
    def int32_value(self, int32_value):
        """Sets the int32_value of this StorageDataValue.


        :param int32_value: The int32_value of this StorageDataValue.  # noqa: E501
        :type int32_value: int
        """

        self._int32_value = int32_value

    @property
    def int64_value(self):
        """Gets the int64_value of this StorageDataValue.  # noqa: E501


        :return: The int64_value of this StorageDataValue.  # noqa: E501
        :rtype: str
        """
        return self._int64_value

    @int64_value.setter
    def int64_value(self, int64_value):
        """Sets the int64_value of this StorageDataValue.


        :param int64_value: The int64_value of this StorageDataValue.  # noqa: E501
        :type int64_value: str
        """

        self._int64_value = int64_value

    @property
    def float32_value(self):
        """Gets the float32_value of this StorageDataValue.  # noqa: E501


        :return: The float32_value of this StorageDataValue.  # noqa: E501
        :rtype: float
        """
        return self._float32_value

    @float32_value.setter
    def float32_value(self, float32_value):
        """Sets the float32_value of this StorageDataValue.


        :param float32_value: The float32_value of this StorageDataValue.  # noqa: E501
        :type float32_value: float
        """

        self._float32_value = float32_value

    @property
    def float64_value(self):
        """Gets the float64_value of this StorageDataValue.  # noqa: E501


        :return: The float64_value of this StorageDataValue.  # noqa: E501
        :rtype: float
        """
        return self._float64_value

    @float64_value.setter
    def float64_value(self, float64_value):
        """Sets the float64_value of this StorageDataValue.


        :param float64_value: The float64_value of this StorageDataValue.  # noqa: E501
        :type float64_value: float
        """

        self._float64_value = float64_value

    @property
    def datetime64_value(self):
        """Gets the datetime64_value of this StorageDataValue.  # noqa: E501

        Time value as unix timestamp in millis.  # noqa: E501

        :return: The datetime64_value of this StorageDataValue.  # noqa: E501
        :rtype: str
        """
        return self._datetime64_value

    @datetime64_value.setter
    def datetime64_value(self, datetime64_value):
        """Sets the datetime64_value of this StorageDataValue.

        Time value as unix timestamp in millis.  # noqa: E501

        :param datetime64_value: The datetime64_value of this StorageDataValue.  # noqa: E501
        :type datetime64_value: str
        """

        self._datetime64_value = datetime64_value

    @property
    def str_value(self):
        """Gets the str_value of this StorageDataValue.  # noqa: E501


        :return: The str_value of this StorageDataValue.  # noqa: E501
        :rtype: str
        """
        return self._str_value

    @str_value.setter
    def str_value(self, str_value):
        """Sets the str_value of this StorageDataValue.


        :param str_value: The str_value of this StorageDataValue.  # noqa: E501
        :type str_value: str
        """

        self._str_value = str_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageDataValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageDataValue):
            return True

        return self.to_dict() != other.to_dict()
