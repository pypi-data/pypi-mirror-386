# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageColumnStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count': 'str',
        'unique': 'str',
        'freq': 'str',
        'num_classes': 'str',
        'histogram': 'list[StorageHistogramEntry]',
        'numeric': 'StorageNumericColumnStats',
        'non_numeric': 'StorageNonNumericColumnStats',
        'time': 'StorageTimeColumnStats'
    }

    attribute_map = {
        'count': 'count',
        'unique': 'unique',
        'freq': 'freq',
        'num_classes': 'numClasses',
        'histogram': 'histogram',
        'numeric': 'numeric',
        'non_numeric': 'nonNumeric',
        'time': 'time'
    }

    def __init__(self, count=None, unique=None, freq=None, num_classes=None, histogram=None, numeric=None, non_numeric=None, time=None, local_vars_configuration=None):  # noqa: E501
        """StorageColumnStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._count = None
        self._unique = None
        self._freq = None
        self._num_classes = None
        self._histogram = None
        self._numeric = None
        self._non_numeric = None
        self._time = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if unique is not None:
            self.unique = unique
        if freq is not None:
            self.freq = freq
        if num_classes is not None:
            self.num_classes = num_classes
        if histogram is not None:
            self.histogram = histogram
        if numeric is not None:
            self.numeric = numeric
        if non_numeric is not None:
            self.non_numeric = non_numeric
        if time is not None:
            self.time = time

    @property
    def count(self):
        """Gets the count of this StorageColumnStats.  # noqa: E501


        :return: The count of this StorageColumnStats.  # noqa: E501
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this StorageColumnStats.


        :param count: The count of this StorageColumnStats.  # noqa: E501
        :type count: str
        """

        self._count = count

    @property
    def unique(self):
        """Gets the unique of this StorageColumnStats.  # noqa: E501


        :return: The unique of this StorageColumnStats.  # noqa: E501
        :rtype: str
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this StorageColumnStats.


        :param unique: The unique of this StorageColumnStats.  # noqa: E501
        :type unique: str
        """

        self._unique = unique

    @property
    def freq(self):
        """Gets the freq of this StorageColumnStats.  # noqa: E501


        :return: The freq of this StorageColumnStats.  # noqa: E501
        :rtype: str
        """
        return self._freq

    @freq.setter
    def freq(self, freq):
        """Sets the freq of this StorageColumnStats.


        :param freq: The freq of this StorageColumnStats.  # noqa: E501
        :type freq: str
        """

        self._freq = freq

    @property
    def num_classes(self):
        """Gets the num_classes of this StorageColumnStats.  # noqa: E501


        :return: The num_classes of this StorageColumnStats.  # noqa: E501
        :rtype: str
        """
        return self._num_classes

    @num_classes.setter
    def num_classes(self, num_classes):
        """Sets the num_classes of this StorageColumnStats.


        :param num_classes: The num_classes of this StorageColumnStats.  # noqa: E501
        :type num_classes: str
        """

        self._num_classes = num_classes

    @property
    def histogram(self):
        """Gets the histogram of this StorageColumnStats.  # noqa: E501


        :return: The histogram of this StorageColumnStats.  # noqa: E501
        :rtype: list[StorageHistogramEntry]
        """
        return self._histogram

    @histogram.setter
    def histogram(self, histogram):
        """Sets the histogram of this StorageColumnStats.


        :param histogram: The histogram of this StorageColumnStats.  # noqa: E501
        :type histogram: list[StorageHistogramEntry]
        """

        self._histogram = histogram

    @property
    def numeric(self):
        """Gets the numeric of this StorageColumnStats.  # noqa: E501


        :return: The numeric of this StorageColumnStats.  # noqa: E501
        :rtype: StorageNumericColumnStats
        """
        return self._numeric

    @numeric.setter
    def numeric(self, numeric):
        """Sets the numeric of this StorageColumnStats.


        :param numeric: The numeric of this StorageColumnStats.  # noqa: E501
        :type numeric: StorageNumericColumnStats
        """

        self._numeric = numeric

    @property
    def non_numeric(self):
        """Gets the non_numeric of this StorageColumnStats.  # noqa: E501


        :return: The non_numeric of this StorageColumnStats.  # noqa: E501
        :rtype: StorageNonNumericColumnStats
        """
        return self._non_numeric

    @non_numeric.setter
    def non_numeric(self, non_numeric):
        """Sets the non_numeric of this StorageColumnStats.


        :param non_numeric: The non_numeric of this StorageColumnStats.  # noqa: E501
        :type non_numeric: StorageNonNumericColumnStats
        """

        self._non_numeric = non_numeric

    @property
    def time(self):
        """Gets the time of this StorageColumnStats.  # noqa: E501


        :return: The time of this StorageColumnStats.  # noqa: E501
        :rtype: StorageTimeColumnStats
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this StorageColumnStats.


        :param time: The time of this StorageColumnStats.  # noqa: E501
        :type time: StorageTimeColumnStats
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageColumnStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageColumnStats):
            return True

        return self.to_dict() != other.to_dict()
