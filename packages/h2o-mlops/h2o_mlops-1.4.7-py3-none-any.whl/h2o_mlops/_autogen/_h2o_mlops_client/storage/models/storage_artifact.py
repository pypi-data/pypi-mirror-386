# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageArtifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'entity_id': 'str',
        'type': 'str',
        'state': 'ArtifactArtifactState',
        'size': 'str',
        'md5_digest': 'str',
        'created_time': 'datetime',
        'uploaded_time': 'datetime',
        'mime_type': 'str',
        'last_modified_time': 'datetime',
        'entity_type': 'StorageEntityType'
    }

    attribute_map = {
        'id': 'id',
        'entity_id': 'entityId',
        'type': 'type',
        'state': 'state',
        'size': 'size',
        'md5_digest': 'md5Digest',
        'created_time': 'createdTime',
        'uploaded_time': 'uploadedTime',
        'mime_type': 'mimeType',
        'last_modified_time': 'lastModifiedTime',
        'entity_type': 'entityType'
    }

    def __init__(self, id=None, entity_id=None, type=None, state=None, size=None, md5_digest=None, created_time=None, uploaded_time=None, mime_type=None, last_modified_time=None, entity_type=None, local_vars_configuration=None):  # noqa: E501
        """StorageArtifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._entity_id = None
        self._type = None
        self._state = None
        self._size = None
        self._md5_digest = None
        self._created_time = None
        self._uploaded_time = None
        self._mime_type = None
        self._last_modified_time = None
        self._entity_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if entity_id is not None:
            self.entity_id = entity_id
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if size is not None:
            self.size = size
        if md5_digest is not None:
            self.md5_digest = md5_digest
        if created_time is not None:
            self.created_time = created_time
        if uploaded_time is not None:
            self.uploaded_time = uploaded_time
        if mime_type is not None:
            self.mime_type = mime_type
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if entity_type is not None:
            self.entity_type = entity_type

    @property
    def id(self):
        """Gets the id of this StorageArtifact.  # noqa: E501

        Unique ID of the artifact.  # noqa: E501

        :return: The id of this StorageArtifact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageArtifact.

        Unique ID of the artifact.  # noqa: E501

        :param id: The id of this StorageArtifact.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def entity_id(self):
        """Gets the entity_id of this StorageArtifact.  # noqa: E501

        ID of the parent entity, e.g., an Experiment. Permissions of the parent entity are used to authorize users accessing the artifact.  # noqa: E501

        :return: The entity_id of this StorageArtifact.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this StorageArtifact.

        ID of the parent entity, e.g., an Experiment. Permissions of the parent entity are used to authorize users accessing the artifact.  # noqa: E501

        :param entity_id: The entity_id of this StorageArtifact.  # noqa: E501
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def type(self):
        """Gets the type of this StorageArtifact.  # noqa: E501

        Defines type of the artifact in relation to the parent entity. Each entity type defines certain well-known types with universal meaning, e.g., \"dataset\" for the Dataset entity containing the actual tabular data. In addition, ML backends can define and store additional artifacts for each entity.  # noqa: E501

        :return: The type of this StorageArtifact.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageArtifact.

        Defines type of the artifact in relation to the parent entity. Each entity type defines certain well-known types with universal meaning, e.g., \"dataset\" for the Dataset entity containing the actual tabular data. In addition, ML backends can define and store additional artifacts for each entity.  # noqa: E501

        :param type: The type of this StorageArtifact.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def state(self):
        """Gets the state of this StorageArtifact.  # noqa: E501


        :return: The state of this StorageArtifact.  # noqa: E501
        :rtype: ArtifactArtifactState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StorageArtifact.


        :param state: The state of this StorageArtifact.  # noqa: E501
        :type state: ArtifactArtifactState
        """

        self._state = state

    @property
    def size(self):
        """Gets the size of this StorageArtifact.  # noqa: E501

        Size of the artifact data at rest in bytes. I.e., if the data is compressed, the size represents the size after compression.  # noqa: E501

        :return: The size of this StorageArtifact.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StorageArtifact.

        Size of the artifact data at rest in bytes. I.e., if the data is compressed, the size represents the size after compression.  # noqa: E501

        :param size: The size of this StorageArtifact.  # noqa: E501
        :type size: str
        """

        self._size = size

    @property
    def md5_digest(self):
        """Gets the md5_digest of this StorageArtifact.  # noqa: E501

        Fingerprint of the artifact data. This can be used, e.g., to see if an artifact needs re-uploading (as a new artifact due to immutability).  TODO(osery): Consider other options here. We don't need to be too flexible, but shouldn't be something too slow.  # noqa: E501

        :return: The md5_digest of this StorageArtifact.  # noqa: E501
        :rtype: str
        """
        return self._md5_digest

    @md5_digest.setter
    def md5_digest(self, md5_digest):
        """Sets the md5_digest of this StorageArtifact.

        Fingerprint of the artifact data. This can be used, e.g., to see if an artifact needs re-uploading (as a new artifact due to immutability).  TODO(osery): Consider other options here. We don't need to be too flexible, but shouldn't be something too slow.  # noqa: E501

        :param md5_digest: The md5_digest of this StorageArtifact.  # noqa: E501
        :type md5_digest: str
        """
        if (self.local_vars_configuration.client_side_validation and
                md5_digest is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', md5_digest)):  # noqa: E501
            raise ValueError(r"Invalid value for `md5_digest`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._md5_digest = md5_digest

    @property
    def created_time(self):
        """Gets the created_time of this StorageArtifact.  # noqa: E501

        Creation timestamp.  # noqa: E501

        :return: The created_time of this StorageArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this StorageArtifact.

        Creation timestamp.  # noqa: E501

        :param created_time: The created_time of this StorageArtifact.  # noqa: E501
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def uploaded_time(self):
        """Gets the uploaded_time of this StorageArtifact.  # noqa: E501

        End of upload timestamp.  # noqa: E501

        :return: The uploaded_time of this StorageArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded_time

    @uploaded_time.setter
    def uploaded_time(self, uploaded_time):
        """Sets the uploaded_time of this StorageArtifact.

        End of upload timestamp.  # noqa: E501

        :param uploaded_time: The uploaded_time of this StorageArtifact.  # noqa: E501
        :type uploaded_time: datetime
        """

        self._uploaded_time = uploaded_time

    @property
    def mime_type(self):
        """Gets the mime_type of this StorageArtifact.  # noqa: E501

        MIME type of the artifact data.  # noqa: E501

        :return: The mime_type of this StorageArtifact.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this StorageArtifact.

        MIME type of the artifact data.  # noqa: E501

        :param mime_type: The mime_type of this StorageArtifact.  # noqa: E501
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this StorageArtifact.  # noqa: E501

        Timestamp of last modification.  # noqa: E501

        :return: The last_modified_time of this StorageArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this StorageArtifact.

        Timestamp of last modification.  # noqa: E501

        :param last_modified_time: The last_modified_time of this StorageArtifact.  # noqa: E501
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def entity_type(self):
        """Gets the entity_type of this StorageArtifact.  # noqa: E501


        :return: The entity_type of this StorageArtifact.  # noqa: E501
        :rtype: StorageEntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this StorageArtifact.


        :param entity_type: The entity_type of this StorageArtifact.  # noqa: E501
        :type entity_type: StorageEntityType
        """

        self._entity_type = entity_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageArtifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageArtifact):
            return True

        return self.to_dict() != other.to_dict()
