# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageCreateExperimentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'experiment': 'StorageExperiment',
        'project_id': 'str',
        'response_metadata': 'StorageKeySelection',
        'disable_model_registration': 'bool'
    }

    attribute_map = {
        'experiment': 'experiment',
        'project_id': 'projectId',
        'response_metadata': 'responseMetadata',
        'disable_model_registration': 'disableModelRegistration'
    }

    def __init__(self, experiment=None, project_id=None, response_metadata=None, disable_model_registration=None, local_vars_configuration=None):  # noqa: E501
        """StorageCreateExperimentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._experiment = None
        self._project_id = None
        self._response_metadata = None
        self._disable_model_registration = None
        self.discriminator = None

        if experiment is not None:
            self.experiment = experiment
        if project_id is not None:
            self.project_id = project_id
        if response_metadata is not None:
            self.response_metadata = response_metadata
        if disable_model_registration is not None:
            self.disable_model_registration = disable_model_registration

    @property
    def experiment(self):
        """Gets the experiment of this StorageCreateExperimentRequest.  # noqa: E501


        :return: The experiment of this StorageCreateExperimentRequest.  # noqa: E501
        :rtype: StorageExperiment
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this StorageCreateExperimentRequest.


        :param experiment: The experiment of this StorageCreateExperimentRequest.  # noqa: E501
        :type experiment: StorageExperiment
        """

        self._experiment = experiment

    @property
    def project_id(self):
        """Gets the project_id of this StorageCreateExperimentRequest.  # noqa: E501


        :return: The project_id of this StorageCreateExperimentRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this StorageCreateExperimentRequest.


        :param project_id: The project_id of this StorageCreateExperimentRequest.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def response_metadata(self):
        """Gets the response_metadata of this StorageCreateExperimentRequest.  # noqa: E501


        :return: The response_metadata of this StorageCreateExperimentRequest.  # noqa: E501
        :rtype: StorageKeySelection
        """
        return self._response_metadata

    @response_metadata.setter
    def response_metadata(self, response_metadata):
        """Sets the response_metadata of this StorageCreateExperimentRequest.


        :param response_metadata: The response_metadata of this StorageCreateExperimentRequest.  # noqa: E501
        :type response_metadata: StorageKeySelection
        """

        self._response_metadata = response_metadata

    @property
    def disable_model_registration(self):
        """Gets the disable_model_registration of this StorageCreateExperimentRequest.  # noqa: E501

        By default, this will be `false`, and creating an experiment will also trigger model registration. If a client wants to disable model registration, this flag must be set to `true`.  # noqa: E501

        :return: The disable_model_registration of this StorageCreateExperimentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._disable_model_registration

    @disable_model_registration.setter
    def disable_model_registration(self, disable_model_registration):
        """Sets the disable_model_registration of this StorageCreateExperimentRequest.

        By default, this will be `false`, and creating an experiment will also trigger model registration. If a client wants to disable model registration, this flag must be set to `true`.  # noqa: E501

        :param disable_model_registration: The disable_model_registration of this StorageCreateExperimentRequest.  # noqa: E501
        :type disable_model_registration: bool
        """

        self._disable_model_registration = disable_model_registration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageCreateExperimentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageCreateExperimentRequest):
            return True

        return self.to_dict() != other.to_dict()
