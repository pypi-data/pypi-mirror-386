# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageComment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'author_id': 'str',
        'project_id': 'str',
        'experiment_id': 'str',
        'dataset_id': 'str',
        'message': 'str',
        'created_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'author_id': 'authorId',
        'project_id': 'projectId',
        'experiment_id': 'experimentId',
        'dataset_id': 'datasetId',
        'message': 'message',
        'created_time': 'createdTime'
    }

    def __init__(self, id=None, author_id=None, project_id=None, experiment_id=None, dataset_id=None, message=None, created_time=None, local_vars_configuration=None):  # noqa: E501
        """StorageComment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._author_id = None
        self._project_id = None
        self._experiment_id = None
        self._dataset_id = None
        self._message = None
        self._created_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if author_id is not None:
            self.author_id = author_id
        if project_id is not None:
            self.project_id = project_id
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if message is not None:
            self.message = message
        if created_time is not None:
            self.created_time = created_time

    @property
    def id(self):
        """Gets the id of this StorageComment.  # noqa: E501

        Unique ID of this comment.  # noqa: E501

        :return: The id of this StorageComment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageComment.

        Unique ID of this comment.  # noqa: E501

        :param id: The id of this StorageComment.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def author_id(self):
        """Gets the author_id of this StorageComment.  # noqa: E501

        ID of the user that has created the comment.  # noqa: E501

        :return: The author_id of this StorageComment.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this StorageComment.

        ID of the user that has created the comment.  # noqa: E501

        :param author_id: The author_id of this StorageComment.  # noqa: E501
        :type author_id: str
        """

        self._author_id = author_id

    @property
    def project_id(self):
        """Gets the project_id of this StorageComment.  # noqa: E501

        ID of the project this comment is attached to, if any.  # noqa: E501

        :return: The project_id of this StorageComment.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this StorageComment.

        ID of the project this comment is attached to, if any.  # noqa: E501

        :param project_id: The project_id of this StorageComment.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def experiment_id(self):
        """Gets the experiment_id of this StorageComment.  # noqa: E501

        ID of the experiment this comment is attached to, if any.  # noqa: E501

        :return: The experiment_id of this StorageComment.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this StorageComment.

        ID of the experiment this comment is attached to, if any.  # noqa: E501

        :param experiment_id: The experiment_id of this StorageComment.  # noqa: E501
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this StorageComment.  # noqa: E501

        ID of the dataset this comment is attached to, if any.  # noqa: E501

        :return: The dataset_id of this StorageComment.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this StorageComment.

        ID of the dataset this comment is attached to, if any.  # noqa: E501

        :param dataset_id: The dataset_id of this StorageComment.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def message(self):
        """Gets the message of this StorageComment.  # noqa: E501

        Textual payload of the comment.  # noqa: E501

        :return: The message of this StorageComment.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StorageComment.

        Textual payload of the comment.  # noqa: E501

        :param message: The message of this StorageComment.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def created_time(self):
        """Gets the created_time of this StorageComment.  # noqa: E501

        Creation timestamp.  # noqa: E501

        :return: The created_time of this StorageComment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this StorageComment.

        Creation timestamp.  # noqa: E501

        :param created_time: The created_time of this StorageComment.  # noqa: E501
        :type created_time: datetime
        """

        self._created_time = created_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageComment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageComment):
            return True

        return self.to_dict() != other.to_dict()
