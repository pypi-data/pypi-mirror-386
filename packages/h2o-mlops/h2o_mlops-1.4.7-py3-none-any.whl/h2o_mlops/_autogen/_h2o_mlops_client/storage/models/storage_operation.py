# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageOperation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    OPERATION_UNSPECIFIED = "OPERATION_UNSPECIFIED"
    DOWNLOAD_ARTIFACT = "DOWNLOAD_ARTIFACT"
    UPLOAD_ARTIFACT = "UPLOAD_ARTIFACT"
    GET_PROJECT = "GET_PROJECT"
    LIST_PROJECTS = "LIST_PROJECTS"
    CREATE_PROJECT = "CREATE_PROJECT"
    UPDATE_PROJECT = "UPDATE_PROJECT"
    DELETE_PROJECT = "DELETE_PROJECT"
    LIST_PROJECT_EVENTS = "LIST_PROJECT_EVENTS"
    LIST_PROJECT_SHARINGS = "LIST_PROJECT_SHARINGS"
    GET_ARTIFACT = "GET_ARTIFACT"
    CREATE_ARTIFACT = "CREATE_ARTIFACT"
    LIST_ENTITY_ARTIFACT = "LIST_ENTITY_ARTIFACT"
    UPDATE_ARTIFACT = "UPDATE_ARTIFACT"
    DELETE_ARTIFACT = "DELETE_ARTIFACT"
    GET_COMMENT = "GET_COMMENT"
    GET_DATASET = "GET_DATASET"
    CREATE_DATASET = "CREATE_DATASET"
    UPDATE_DATASET = "UPDATE_DATASET"
    DELETE_DATASET = "DELETE_DATASET"
    LIST_DATASETS = "LIST_DATASETS"
    LINK_DATASET_INTO_PROJECT = "LINK_DATASET_INTO_PROJECT"
    UNLINK_DATASET_FROM_PROJECT = "UNLINK_DATASET_FROM_PROJECT"
    TAG_DATASET = "TAG_DATASET"
    UNTAG_DATASET = "UNTAG_DATASET"
    GET_DEPLOYMENT_ENVIRONMENT = "GET_DEPLOYMENT_ENVIRONMENT"
    CREATE_DEPLOYMENT_ENVIRONMENT = "CREATE_DEPLOYMENT_ENVIRONMENT"
    UPDATE_DEPLOYMENT_ENVIRONMENT = "UPDATE_DEPLOYMENT_ENVIRONMENT"
    DELETE_DEPLOYMENT_ENVIRONMENT = "DELETE_DEPLOYMENT_ENVIRONMENT"
    LIST_DEPLOYMENT_ENVIRONMENTS = "LIST_DEPLOYMENT_ENVIRONMENTS"
    DEPLOY = "DEPLOY"
    GET_DEPLOYMENT = "GET_DEPLOYMENT"
    LIST_DEPLOYMENTS = "LIST_DEPLOYMENTS"
    UPDATE_DEPLOYMENT = "UPDATE_DEPLOYMENT"
    UNDEPLOY = "UNDEPLOY"
    LIST_ALL_DEPLOYMENTS = "LIST_ALL_DEPLOYMENTS"
    RETRY_DEPLOYMENT = "RETRY_DEPLOYMENT"
    GET_EXPERIMENT = "GET_EXPERIMENT"
    CREATE_EXPERIMENT = "CREATE_EXPERIMENT"
    UPDATE_EXPERIMENT = "UPDATE_EXPERIMENT"
    DELETE_EXPERIMENT = "DELETE_EXPERIMENT"
    LIST_EXPERIMENTS = "LIST_EXPERIMENTS"
    COUNT_EXPERIMENTS = "COUNT_EXPERIMENTS"
    LINK_EXPERIMENT_INTO_PROJECT = "LINK_EXPERIMENT_INTO_PROJECT"
    UNLINK_EXPERIMENT_FROM_PROJECT = "UNLINK_EXPERIMENT_FROM_PROJECT"
    TAG_EXPERIMENT = "TAG_EXPERIMENT"
    UNTAG_EXPERIMENT = "UNTAG_EXPERIMENT"
    CREATE_EXPERIMENT_COMMENT = "CREATE_EXPERIMENT_COMMENT"
    LIST_EXPERIMENT_COMMENTS = "LIST_EXPERIMENT_COMMENTS"
    CREATE_EXPERIMENT_METRIC = "CREATE_EXPERIMENT_METRIC"
    LIST_EXPERIMENT_METRICS = "LIST_EXPERIMENT_METRICS"
    RECOVER_DELETED_EXPERIMENT = "RECOVER_DELETED_EXPERIMENT"
    CREATE_TAG = "CREATE_TAG"
    UPDATE_TAG = "UPDATE_TAG"
    DELETE_TAG = "DELETE_TAG"
    LIST_TAGS = "LIST_TAGS"
    GET_TAG = "GET_TAG"
    CREATE_REGISTERED_MODEL = "CREATE_REGISTERED_MODEL"
    GET_REGISTERED_MODEL = "GET_REGISTERED_MODEL"
    LIST_REGISTERED_MODELS = "LIST_REGISTERED_MODELS"
    UPDATE_REGISTERED_MODEL = "UPDATE_REGISTERED_MODEL"
    DELETE_REGISTERED_MODEL = "DELETE_REGISTERED_MODEL"
    COUNT_REGISTERED_MODELS = "COUNT_REGISTERED_MODELS"
    LIST_ALL_REGISTERED_MODELS = "LIST_ALL_REGISTERED_MODELS"
    GET_REGISTERED_MODEL_VERSION = "GET_REGISTERED_MODEL_VERSION"
    CREATE_REGISTERED_MODEL_VERSION = "CREATE_REGISTERED_MODEL_VERSION"
    INACTIVATE_REGISTERED_MODEL_VERSION = "INACTIVATE_REGISTERED_MODEL_VERSION"
    LIST_REGISTERED_MODEL_VERSION = "LIST_REGISTERED_MODEL_VERSION"
    COUNT_REGISTERED_MODEL_VERSION = "COUNT_REGISTERED_MODEL_VERSION"
    DELETE_REGISTERED_MODEL_VERSION = "DELETE_REGISTERED_MODEL_VERSION"
    GET_ENDPOINT = "GET_ENDPOINT"
    LIST_ENDPOINTS = "LIST_ENDPOINTS"
    CREATE_ENDPOINT = "CREATE_ENDPOINT"
    UPDATE_ENDPOINT = "UPDATE_ENDPOINT"
    DELETE_ENDPOINT = "DELETE_ENDPOINT"
    GET_BATCH_SCORING_JOB = "GET_BATCH_SCORING_JOB"
    LIST_BATCH_SCORING_JOBS = "LIST_BATCH_SCORING_JOBS"
    CREATE_BATCH_SCORING_JOB = "CREATE_BATCH_SCORING_JOB"
    DELETE_BATCH_SCORING_JOB = "DELETE_BATCH_SCORING_JOB"
    CANCEL_BATCH_SCORING_JOB = "CANCEL_BATCH_SCORING_JOB"

    allowable_values = [OPERATION_UNSPECIFIED, DOWNLOAD_ARTIFACT, UPLOAD_ARTIFACT, GET_PROJECT, LIST_PROJECTS, CREATE_PROJECT, UPDATE_PROJECT, DELETE_PROJECT, LIST_PROJECT_EVENTS, LIST_PROJECT_SHARINGS, GET_ARTIFACT, CREATE_ARTIFACT, LIST_ENTITY_ARTIFACT, UPDATE_ARTIFACT, DELETE_ARTIFACT, GET_COMMENT, GET_DATASET, CREATE_DATASET, UPDATE_DATASET, DELETE_DATASET, LIST_DATASETS, LINK_DATASET_INTO_PROJECT, UNLINK_DATASET_FROM_PROJECT, TAG_DATASET, UNTAG_DATASET, GET_DEPLOYMENT_ENVIRONMENT, CREATE_DEPLOYMENT_ENVIRONMENT, UPDATE_DEPLOYMENT_ENVIRONMENT, DELETE_DEPLOYMENT_ENVIRONMENT, LIST_DEPLOYMENT_ENVIRONMENTS, DEPLOY, GET_DEPLOYMENT, LIST_DEPLOYMENTS, UPDATE_DEPLOYMENT, UNDEPLOY, LIST_ALL_DEPLOYMENTS, RETRY_DEPLOYMENT, GET_EXPERIMENT, CREATE_EXPERIMENT, UPDATE_EXPERIMENT, DELETE_EXPERIMENT, LIST_EXPERIMENTS, COUNT_EXPERIMENTS, LINK_EXPERIMENT_INTO_PROJECT, UNLINK_EXPERIMENT_FROM_PROJECT, TAG_EXPERIMENT, UNTAG_EXPERIMENT, CREATE_EXPERIMENT_COMMENT, LIST_EXPERIMENT_COMMENTS, CREATE_EXPERIMENT_METRIC, LIST_EXPERIMENT_METRICS, RECOVER_DELETED_EXPERIMENT, CREATE_TAG, UPDATE_TAG, DELETE_TAG, LIST_TAGS, GET_TAG, CREATE_REGISTERED_MODEL, GET_REGISTERED_MODEL, LIST_REGISTERED_MODELS, UPDATE_REGISTERED_MODEL, DELETE_REGISTERED_MODEL, COUNT_REGISTERED_MODELS, LIST_ALL_REGISTERED_MODELS, GET_REGISTERED_MODEL_VERSION, CREATE_REGISTERED_MODEL_VERSION, INACTIVATE_REGISTERED_MODEL_VERSION, LIST_REGISTERED_MODEL_VERSION, COUNT_REGISTERED_MODEL_VERSION, DELETE_REGISTERED_MODEL_VERSION, GET_ENDPOINT, LIST_ENDPOINTS, CREATE_ENDPOINT, UPDATE_ENDPOINT, DELETE_ENDPOINT, GET_BATCH_SCORING_JOB, LIST_BATCH_SCORING_JOBS, CREATE_BATCH_SCORING_JOB, DELETE_BATCH_SCORING_JOB, CANCEL_BATCH_SCORING_JOB]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """StorageOperation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageOperation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageOperation):
            return True

        return self.to_dict() != other.to_dict()
