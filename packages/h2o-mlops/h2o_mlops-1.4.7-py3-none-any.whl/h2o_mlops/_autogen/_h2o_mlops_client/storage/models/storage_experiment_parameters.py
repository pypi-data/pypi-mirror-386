# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageExperimentParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'training_dataset_id': 'str',
        'validation_dataset_id': 'str',
        'test_dataset_id': 'str',
        'target_column': 'str',
        'weight_column': 'str',
        'fold_column': 'str'
    }

    attribute_map = {
        'training_dataset_id': 'trainingDatasetId',
        'validation_dataset_id': 'validationDatasetId',
        'test_dataset_id': 'testDatasetId',
        'target_column': 'targetColumn',
        'weight_column': 'weightColumn',
        'fold_column': 'foldColumn'
    }

    def __init__(self, training_dataset_id=None, validation_dataset_id=None, test_dataset_id=None, target_column=None, weight_column=None, fold_column=None, local_vars_configuration=None):  # noqa: E501
        """StorageExperimentParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._training_dataset_id = None
        self._validation_dataset_id = None
        self._test_dataset_id = None
        self._target_column = None
        self._weight_column = None
        self._fold_column = None
        self.discriminator = None

        if training_dataset_id is not None:
            self.training_dataset_id = training_dataset_id
        if validation_dataset_id is not None:
            self.validation_dataset_id = validation_dataset_id
        if test_dataset_id is not None:
            self.test_dataset_id = test_dataset_id
        if target_column is not None:
            self.target_column = target_column
        if weight_column is not None:
            self.weight_column = weight_column
        if fold_column is not None:
            self.fold_column = fold_column

    @property
    def training_dataset_id(self):
        """Gets the training_dataset_id of this StorageExperimentParameters.  # noqa: E501

        If set, contains ID of the dataset used for training.  # noqa: E501

        :return: The training_dataset_id of this StorageExperimentParameters.  # noqa: E501
        :rtype: str
        """
        return self._training_dataset_id

    @training_dataset_id.setter
    def training_dataset_id(self, training_dataset_id):
        """Sets the training_dataset_id of this StorageExperimentParameters.

        If set, contains ID of the dataset used for training.  # noqa: E501

        :param training_dataset_id: The training_dataset_id of this StorageExperimentParameters.  # noqa: E501
        :type training_dataset_id: str
        """

        self._training_dataset_id = training_dataset_id

    @property
    def validation_dataset_id(self):
        """Gets the validation_dataset_id of this StorageExperimentParameters.  # noqa: E501

        If set, contains ID of the dataset used for validation.  # noqa: E501

        :return: The validation_dataset_id of this StorageExperimentParameters.  # noqa: E501
        :rtype: str
        """
        return self._validation_dataset_id

    @validation_dataset_id.setter
    def validation_dataset_id(self, validation_dataset_id):
        """Sets the validation_dataset_id of this StorageExperimentParameters.

        If set, contains ID of the dataset used for validation.  # noqa: E501

        :param validation_dataset_id: The validation_dataset_id of this StorageExperimentParameters.  # noqa: E501
        :type validation_dataset_id: str
        """

        self._validation_dataset_id = validation_dataset_id

    @property
    def test_dataset_id(self):
        """Gets the test_dataset_id of this StorageExperimentParameters.  # noqa: E501

        If set, contains ID of the dataset used for testing.  # noqa: E501

        :return: The test_dataset_id of this StorageExperimentParameters.  # noqa: E501
        :rtype: str
        """
        return self._test_dataset_id

    @test_dataset_id.setter
    def test_dataset_id(self, test_dataset_id):
        """Sets the test_dataset_id of this StorageExperimentParameters.

        If set, contains ID of the dataset used for testing.  # noqa: E501

        :param test_dataset_id: The test_dataset_id of this StorageExperimentParameters.  # noqa: E501
        :type test_dataset_id: str
        """

        self._test_dataset_id = test_dataset_id

    @property
    def target_column(self):
        """Gets the target_column of this StorageExperimentParameters.  # noqa: E501

        The column to predict.  # noqa: E501

        :return: The target_column of this StorageExperimentParameters.  # noqa: E501
        :rtype: str
        """
        return self._target_column

    @target_column.setter
    def target_column(self, target_column):
        """Sets the target_column of this StorageExperimentParameters.

        The column to predict.  # noqa: E501

        :param target_column: The target_column of this StorageExperimentParameters.  # noqa: E501
        :type target_column: str
        """

        self._target_column = target_column

    @property
    def weight_column(self):
        """Gets the weight_column of this StorageExperimentParameters.  # noqa: E501

        Column that indicates the observation weight (a.k.a. sample or row weight), if applicable.  # noqa: E501

        :return: The weight_column of this StorageExperimentParameters.  # noqa: E501
        :rtype: str
        """
        return self._weight_column

    @weight_column.setter
    def weight_column(self, weight_column):
        """Sets the weight_column of this StorageExperimentParameters.

        Column that indicates the observation weight (a.k.a. sample or row weight), if applicable.  # noqa: E501

        :param weight_column: The weight_column of this StorageExperimentParameters.  # noqa: E501
        :type weight_column: str
        """

        self._weight_column = weight_column

    @property
    def fold_column(self):
        """Gets the fold_column of this StorageExperimentParameters.  # noqa: E501

        Column to use to create stratification folds during (cross-)validation, if applicable.  # noqa: E501

        :return: The fold_column of this StorageExperimentParameters.  # noqa: E501
        :rtype: str
        """
        return self._fold_column

    @fold_column.setter
    def fold_column(self, fold_column):
        """Sets the fold_column of this StorageExperimentParameters.

        Column to use to create stratification folds during (cross-)validation, if applicable.  # noqa: E501

        :param fold_column: The fold_column of this StorageExperimentParameters.  # noqa: E501
        :type fold_column: str
        """

        self._fold_column = fold_column

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageExperimentParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageExperimentParameters):
            return True

        return self.to_dict() != other.to_dict()
