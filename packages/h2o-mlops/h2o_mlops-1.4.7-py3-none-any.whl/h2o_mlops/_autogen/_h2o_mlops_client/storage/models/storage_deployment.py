# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageDeployment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_time': 'datetime',
        'last_modified_time': 'datetime',
        'project_id': 'str',
        'deployment_environment_id': 'str',
        'experiment_id': 'str',
        'type': 'StorageDeploymentType',
        'secondary_scorer': 'list[StorageSecondaryScorer]',
        'metadata': 'StorageMetadata',
        'deployer_data_version': 'str',
        'deployer_data': 'str',
        'owner_id': 'str',
        'display_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_time': 'createdTime',
        'last_modified_time': 'lastModifiedTime',
        'project_id': 'projectId',
        'deployment_environment_id': 'deploymentEnvironmentId',
        'experiment_id': 'experimentId',
        'type': 'type',
        'secondary_scorer': 'secondaryScorer',
        'metadata': 'metadata',
        'deployer_data_version': 'deployerDataVersion',
        'deployer_data': 'deployerData',
        'owner_id': 'ownerId',
        'display_name': 'displayName'
    }

    def __init__(self, id=None, created_time=None, last_modified_time=None, project_id=None, deployment_environment_id=None, experiment_id=None, type=None, secondary_scorer=None, metadata=None, deployer_data_version=None, deployer_data=None, owner_id=None, display_name=None, local_vars_configuration=None):  # noqa: E501
        """StorageDeployment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_time = None
        self._last_modified_time = None
        self._project_id = None
        self._deployment_environment_id = None
        self._experiment_id = None
        self._type = None
        self._secondary_scorer = None
        self._metadata = None
        self._deployer_data_version = None
        self._deployer_data = None
        self._owner_id = None
        self._display_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_time is not None:
            self.created_time = created_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if project_id is not None:
            self.project_id = project_id
        if deployment_environment_id is not None:
            self.deployment_environment_id = deployment_environment_id
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if type is not None:
            self.type = type
        if secondary_scorer is not None:
            self.secondary_scorer = secondary_scorer
        if metadata is not None:
            self.metadata = metadata
        if deployer_data_version is not None:
            self.deployer_data_version = deployer_data_version
        if deployer_data is not None:
            self.deployer_data = deployer_data
        if owner_id is not None:
            self.owner_id = owner_id
        if display_name is not None:
            self.display_name = display_name

    @property
    def id(self):
        """Gets the id of this StorageDeployment.  # noqa: E501

        An ID of the entity, unique across all entity types.  # noqa: E501

        :return: The id of this StorageDeployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageDeployment.

        An ID of the entity, unique across all entity types.  # noqa: E501

        :param id: The id of this StorageDeployment.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def created_time(self):
        """Gets the created_time of this StorageDeployment.  # noqa: E501

        Creation timestamp.  # noqa: E501

        :return: The created_time of this StorageDeployment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this StorageDeployment.

        Creation timestamp.  # noqa: E501

        :param created_time: The created_time of this StorageDeployment.  # noqa: E501
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this StorageDeployment.  # noqa: E501

        Last modification timestamp.  # noqa: E501

        :return: The last_modified_time of this StorageDeployment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this StorageDeployment.

        Last modification timestamp.  # noqa: E501

        :param last_modified_time: The last_modified_time of this StorageDeployment.  # noqa: E501
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def project_id(self):
        """Gets the project_id of this StorageDeployment.  # noqa: E501

        ID of the project the deployment is part of.  # noqa: E501

        :return: The project_id of this StorageDeployment.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this StorageDeployment.

        ID of the project the deployment is part of.  # noqa: E501

        :param project_id: The project_id of this StorageDeployment.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def deployment_environment_id(self):
        """Gets the deployment_environment_id of this StorageDeployment.  # noqa: E501

        ID of the deployment environment, i.e., a template for the actual deployment.  # noqa: E501

        :return: The deployment_environment_id of this StorageDeployment.  # noqa: E501
        :rtype: str
        """
        return self._deployment_environment_id

    @deployment_environment_id.setter
    def deployment_environment_id(self, deployment_environment_id):
        """Sets the deployment_environment_id of this StorageDeployment.

        ID of the deployment environment, i.e., a template for the actual deployment.  # noqa: E501

        :param deployment_environment_id: The deployment_environment_id of this StorageDeployment.  # noqa: E501
        :type deployment_environment_id: str
        """

        self._deployment_environment_id = deployment_environment_id

    @property
    def experiment_id(self):
        """Gets the experiment_id of this StorageDeployment.  # noqa: E501

        ID of the experiment whose model is the primary model of this deployment. There can be additional models handling a fraction or a copy of the traffic, e.g., as a part of A/B testing or Champion/Challenger scenario. See field `secondary_scorer` for these.  # noqa: E501

        :return: The experiment_id of this StorageDeployment.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this StorageDeployment.

        ID of the experiment whose model is the primary model of this deployment. There can be additional models handling a fraction or a copy of the traffic, e.g., as a part of A/B testing or Champion/Challenger scenario. See field `secondary_scorer` for these.  # noqa: E501

        :param experiment_id: The experiment_id of this StorageDeployment.  # noqa: E501
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def type(self):
        """Gets the type of this StorageDeployment.  # noqa: E501


        :return: The type of this StorageDeployment.  # noqa: E501
        :rtype: StorageDeploymentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageDeployment.


        :param type: The type of this StorageDeployment.  # noqa: E501
        :type type: StorageDeploymentType
        """

        self._type = type

    @property
    def secondary_scorer(self):
        """Gets the secondary_scorer of this StorageDeployment.  # noqa: E501

        Additional scorers defined for the deployment. Lists experiment whose scorer should also receive and/or handle a fraction or copy of the traffic.  Note that all the experiments have to belong to the same project identified by `project_id`.  # noqa: E501

        :return: The secondary_scorer of this StorageDeployment.  # noqa: E501
        :rtype: list[StorageSecondaryScorer]
        """
        return self._secondary_scorer

    @secondary_scorer.setter
    def secondary_scorer(self, secondary_scorer):
        """Sets the secondary_scorer of this StorageDeployment.

        Additional scorers defined for the deployment. Lists experiment whose scorer should also receive and/or handle a fraction or copy of the traffic.  Note that all the experiments have to belong to the same project identified by `project_id`.  # noqa: E501

        :param secondary_scorer: The secondary_scorer of this StorageDeployment.  # noqa: E501
        :type secondary_scorer: list[StorageSecondaryScorer]
        """

        self._secondary_scorer = secondary_scorer

    @property
    def metadata(self):
        """Gets the metadata of this StorageDeployment.  # noqa: E501


        :return: The metadata of this StorageDeployment.  # noqa: E501
        :rtype: StorageMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this StorageDeployment.


        :param metadata: The metadata of this StorageDeployment.  # noqa: E501
        :type metadata: StorageMetadata
        """

        self._metadata = metadata

    @property
    def deployer_data_version(self):
        """Gets the deployer_data_version of this StorageDeployment.  # noqa: E501

        These fields are dedicated for the Deployer service to persist arbitrary data. Read and write of these fields is bound to extra permissions.  # noqa: E501

        :return: The deployer_data_version of this StorageDeployment.  # noqa: E501
        :rtype: str
        """
        return self._deployer_data_version

    @deployer_data_version.setter
    def deployer_data_version(self, deployer_data_version):
        """Sets the deployer_data_version of this StorageDeployment.

        These fields are dedicated for the Deployer service to persist arbitrary data. Read and write of these fields is bound to extra permissions.  # noqa: E501

        :param deployer_data_version: The deployer_data_version of this StorageDeployment.  # noqa: E501
        :type deployer_data_version: str
        """

        self._deployer_data_version = deployer_data_version

    @property
    def deployer_data(self):
        """Gets the deployer_data of this StorageDeployment.  # noqa: E501


        :return: The deployer_data of this StorageDeployment.  # noqa: E501
        :rtype: str
        """
        return self._deployer_data

    @deployer_data.setter
    def deployer_data(self, deployer_data):
        """Sets the deployer_data of this StorageDeployment.


        :param deployer_data: The deployer_data of this StorageDeployment.  # noqa: E501
        :type deployer_data: str
        """
        if (self.local_vars_configuration.client_side_validation and
                deployer_data is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', deployer_data)):  # noqa: E501
            raise ValueError(r"Invalid value for `deployer_data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._deployer_data = deployer_data

    @property
    def owner_id(self):
        """Gets the owner_id of this StorageDeployment.  # noqa: E501

        Owner of the deployment.  # noqa: E501

        :return: The owner_id of this StorageDeployment.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this StorageDeployment.

        Owner of the deployment.  # noqa: E501

        :param owner_id: The owner_id of this StorageDeployment.  # noqa: E501
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def display_name(self):
        """Gets the display_name of this StorageDeployment.  # noqa: E501


        :return: The display_name of this StorageDeployment.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this StorageDeployment.


        :param display_name: The display_name of this StorageDeployment.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageDeployment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageDeployment):
            return True

        return self.to_dict() != other.to_dict()
