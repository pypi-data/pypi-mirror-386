# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StoragePagingResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'next_page_token': 'str'
    }

    attribute_map = {
        'next_page_token': 'nextPageToken'
    }

    def __init__(self, next_page_token=None, local_vars_configuration=None):  # noqa: E501
        """StoragePagingResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._next_page_token = None
        self.discriminator = None

        if next_page_token is not None:
            self.next_page_token = next_page_token

    @property
    def next_page_token(self):
        """Gets the next_page_token of this StoragePagingResponse.  # noqa: E501

        An opaque token to be sent together with the next listing request to continue with the next record under any given filter and sorting. This token should not be interpreted by the client and its structure may change without any prior notice.  # noqa: E501

        :return: The next_page_token of this StoragePagingResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this StoragePagingResponse.

        An opaque token to be sent together with the next listing request to continue with the next record under any given filter and sorting. This token should not be interpreted by the client and its structure may change without any prior notice.  # noqa: E501

        :param next_page_token: The next_page_token of this StoragePagingResponse.  # noqa: E501
        :type next_page_token: str
        """
        if (self.local_vars_configuration.client_side_validation and
                next_page_token is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', next_page_token)):  # noqa: E501
            raise ValueError(r"Invalid value for `next_page_token`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._next_page_token = next_page_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePagingResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoragePagingResponse):
            return True

        return self.to_dict() != other.to_dict()
