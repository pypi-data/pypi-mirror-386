# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageAuditEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'actor_id': 'str',
        'user_id': 'str',
        'group_id': 'str',
        'project_id': 'str',
        'experiment_id': 'str',
        'dataset_id': 'str',
        'tag_id': 'str',
        'comment_id': 'str',
        'deployment_id': 'str',
        'deployment_environment_id': 'str',
        'restriction_role_id': 'str',
        'message': 'str',
        'timestamp': 'datetime',
        'operation': 'StorageOperation',
        'registered_model_id': 'str',
        'registered_model_version_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'actor_id': 'actorId',
        'user_id': 'userId',
        'group_id': 'groupId',
        'project_id': 'projectId',
        'experiment_id': 'experimentId',
        'dataset_id': 'datasetId',
        'tag_id': 'tagId',
        'comment_id': 'commentId',
        'deployment_id': 'deploymentId',
        'deployment_environment_id': 'deploymentEnvironmentId',
        'restriction_role_id': 'restrictionRoleId',
        'message': 'message',
        'timestamp': 'timestamp',
        'operation': 'operation',
        'registered_model_id': 'registeredModelId',
        'registered_model_version_id': 'registeredModelVersionId'
    }

    def __init__(self, id=None, actor_id=None, user_id=None, group_id=None, project_id=None, experiment_id=None, dataset_id=None, tag_id=None, comment_id=None, deployment_id=None, deployment_environment_id=None, restriction_role_id=None, message=None, timestamp=None, operation=None, registered_model_id=None, registered_model_version_id=None, local_vars_configuration=None):  # noqa: E501
        """StorageAuditEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._actor_id = None
        self._user_id = None
        self._group_id = None
        self._project_id = None
        self._experiment_id = None
        self._dataset_id = None
        self._tag_id = None
        self._comment_id = None
        self._deployment_id = None
        self._deployment_environment_id = None
        self._restriction_role_id = None
        self._message = None
        self._timestamp = None
        self._operation = None
        self._registered_model_id = None
        self._registered_model_version_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if actor_id is not None:
            self.actor_id = actor_id
        if user_id is not None:
            self.user_id = user_id
        if group_id is not None:
            self.group_id = group_id
        if project_id is not None:
            self.project_id = project_id
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if tag_id is not None:
            self.tag_id = tag_id
        if comment_id is not None:
            self.comment_id = comment_id
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if deployment_environment_id is not None:
            self.deployment_environment_id = deployment_environment_id
        if restriction_role_id is not None:
            self.restriction_role_id = restriction_role_id
        if message is not None:
            self.message = message
        if timestamp is not None:
            self.timestamp = timestamp
        if operation is not None:
            self.operation = operation
        if registered_model_id is not None:
            self.registered_model_id = registered_model_id
        if registered_model_version_id is not None:
            self.registered_model_version_id = registered_model_version_id

    @property
    def id(self):
        """Gets the id of this StorageAuditEvent.  # noqa: E501

        Unique ID of this event.  # noqa: E501

        :return: The id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageAuditEvent.

        Unique ID of this event.  # noqa: E501

        :param id: The id of this StorageAuditEvent.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def actor_id(self):
        """Gets the actor_id of this StorageAuditEvent.  # noqa: E501

        ID of the user that has caused the event (e.g., by performing an operation or an action).  # noqa: E501

        :return: The actor_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._actor_id

    @actor_id.setter
    def actor_id(self, actor_id):
        """Sets the actor_id of this StorageAuditEvent.

        ID of the user that has caused the event (e.g., by performing an operation or an action).  # noqa: E501

        :param actor_id: The actor_id of this StorageAuditEvent.  # noqa: E501
        :type actor_id: str
        """

        self._actor_id = actor_id

    @property
    def user_id(self):
        """Gets the user_id of this StorageAuditEvent.  # noqa: E501

        ID of the user this event affects (see the `actor` field for the user whose action has caused the event).  # noqa: E501

        :return: The user_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this StorageAuditEvent.

        ID of the user this event affects (see the `actor` field for the user whose action has caused the event).  # noqa: E501

        :param user_id: The user_id of this StorageAuditEvent.  # noqa: E501
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def group_id(self):
        """Gets the group_id of this StorageAuditEvent.  # noqa: E501

        ID of the user group this event is related to, if any.  # noqa: E501

        :return: The group_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this StorageAuditEvent.

        ID of the user group this event is related to, if any.  # noqa: E501

        :param group_id: The group_id of this StorageAuditEvent.  # noqa: E501
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def project_id(self):
        """Gets the project_id of this StorageAuditEvent.  # noqa: E501

        ID of the project this event is related to, if any.  # noqa: E501

        :return: The project_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this StorageAuditEvent.

        ID of the project this event is related to, if any.  # noqa: E501

        :param project_id: The project_id of this StorageAuditEvent.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def experiment_id(self):
        """Gets the experiment_id of this StorageAuditEvent.  # noqa: E501

        ID of the experiment this event is related to, if any.  # noqa: E501

        :return: The experiment_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this StorageAuditEvent.

        ID of the experiment this event is related to, if any.  # noqa: E501

        :param experiment_id: The experiment_id of this StorageAuditEvent.  # noqa: E501
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this StorageAuditEvent.  # noqa: E501

        ID of the dataset this event is related to, if any.  # noqa: E501

        :return: The dataset_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this StorageAuditEvent.

        ID of the dataset this event is related to, if any.  # noqa: E501

        :param dataset_id: The dataset_id of this StorageAuditEvent.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def tag_id(self):
        """Gets the tag_id of this StorageAuditEvent.  # noqa: E501

        ID of the tag this event is related to, if any.  # noqa: E501

        :return: The tag_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this StorageAuditEvent.

        ID of the tag this event is related to, if any.  # noqa: E501

        :param tag_id: The tag_id of this StorageAuditEvent.  # noqa: E501
        :type tag_id: str
        """

        self._tag_id = tag_id

    @property
    def comment_id(self):
        """Gets the comment_id of this StorageAuditEvent.  # noqa: E501

        ID of the comment this event is related to, if any.  # noqa: E501

        :return: The comment_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this StorageAuditEvent.

        ID of the comment this event is related to, if any.  # noqa: E501

        :param comment_id: The comment_id of this StorageAuditEvent.  # noqa: E501
        :type comment_id: str
        """

        self._comment_id = comment_id

    @property
    def deployment_id(self):
        """Gets the deployment_id of this StorageAuditEvent.  # noqa: E501

        ID of the deployment this event is related to, if any.  # noqa: E501

        :return: The deployment_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this StorageAuditEvent.

        ID of the deployment this event is related to, if any.  # noqa: E501

        :param deployment_id: The deployment_id of this StorageAuditEvent.  # noqa: E501
        :type deployment_id: str
        """

        self._deployment_id = deployment_id

    @property
    def deployment_environment_id(self):
        """Gets the deployment_environment_id of this StorageAuditEvent.  # noqa: E501

        ID of the deployment environment this event is related to, if any.  # noqa: E501

        :return: The deployment_environment_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._deployment_environment_id

    @deployment_environment_id.setter
    def deployment_environment_id(self, deployment_environment_id):
        """Sets the deployment_environment_id of this StorageAuditEvent.

        ID of the deployment environment this event is related to, if any.  # noqa: E501

        :param deployment_environment_id: The deployment_environment_id of this StorageAuditEvent.  # noqa: E501
        :type deployment_environment_id: str
        """

        self._deployment_environment_id = deployment_environment_id

    @property
    def restriction_role_id(self):
        """Gets the restriction_role_id of this StorageAuditEvent.  # noqa: E501

        For some SHARING events, this field captures the role restriction, if set.  # noqa: E501

        :return: The restriction_role_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._restriction_role_id

    @restriction_role_id.setter
    def restriction_role_id(self, restriction_role_id):
        """Sets the restriction_role_id of this StorageAuditEvent.

        For some SHARING events, this field captures the role restriction, if set.  # noqa: E501

        :param restriction_role_id: The restriction_role_id of this StorageAuditEvent.  # noqa: E501
        :type restriction_role_id: str
        """

        self._restriction_role_id = restriction_role_id

    @property
    def message(self):
        """Gets the message of this StorageAuditEvent.  # noqa: E501

        Textual message describing the event in a human readable form.  # noqa: E501

        :return: The message of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StorageAuditEvent.

        Textual message describing the event in a human readable form.  # noqa: E501

        :param message: The message of this StorageAuditEvent.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def timestamp(self):
        """Gets the timestamp of this StorageAuditEvent.  # noqa: E501

        Event timestamp.  # noqa: E501

        :return: The timestamp of this StorageAuditEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StorageAuditEvent.

        Event timestamp.  # noqa: E501

        :param timestamp: The timestamp of this StorageAuditEvent.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def operation(self):
        """Gets the operation of this StorageAuditEvent.  # noqa: E501


        :return: The operation of this StorageAuditEvent.  # noqa: E501
        :rtype: StorageOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this StorageAuditEvent.


        :param operation: The operation of this StorageAuditEvent.  # noqa: E501
        :type operation: StorageOperation
        """

        self._operation = operation

    @property
    def registered_model_id(self):
        """Gets the registered_model_id of this StorageAuditEvent.  # noqa: E501

        ID of the registered model, if any.  # noqa: E501

        :return: The registered_model_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._registered_model_id

    @registered_model_id.setter
    def registered_model_id(self, registered_model_id):
        """Sets the registered_model_id of this StorageAuditEvent.

        ID of the registered model, if any.  # noqa: E501

        :param registered_model_id: The registered_model_id of this StorageAuditEvent.  # noqa: E501
        :type registered_model_id: str
        """

        self._registered_model_id = registered_model_id

    @property
    def registered_model_version_id(self):
        """Gets the registered_model_version_id of this StorageAuditEvent.  # noqa: E501


        :return: The registered_model_version_id of this StorageAuditEvent.  # noqa: E501
        :rtype: str
        """
        return self._registered_model_version_id

    @registered_model_version_id.setter
    def registered_model_version_id(self, registered_model_version_id):
        """Sets the registered_model_version_id of this StorageAuditEvent.


        :param registered_model_version_id: The registered_model_version_id of this StorageAuditEvent.  # noqa: E501
        :type registered_model_version_id: str
        """

        self._registered_model_version_id = registered_model_version_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageAuditEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageAuditEvent):
            return True

        return self.to_dict() != other.to_dict()
