# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageDeploymentEnvironment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'display_name': 'str',
        'created_time': 'datetime',
        'last_modified_time': 'datetime',
        'project_id': 'str',
        'deployment_target_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'displayName',
        'created_time': 'createdTime',
        'last_modified_time': 'lastModifiedTime',
        'project_id': 'projectId',
        'deployment_target_name': 'deploymentTargetName'
    }

    def __init__(self, id=None, display_name=None, created_time=None, last_modified_time=None, project_id=None, deployment_target_name=None, local_vars_configuration=None):  # noqa: E501
        """StorageDeploymentEnvironment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._display_name = None
        self._created_time = None
        self._last_modified_time = None
        self._project_id = None
        self._deployment_target_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if created_time is not None:
            self.created_time = created_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if project_id is not None:
            self.project_id = project_id
        if deployment_target_name is not None:
            self.deployment_target_name = deployment_target_name

    @property
    def id(self):
        """Gets the id of this StorageDeploymentEnvironment.  # noqa: E501

        An ID of the entity, unique across all entity types.  # noqa: E501

        :return: The id of this StorageDeploymentEnvironment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageDeploymentEnvironment.

        An ID of the entity, unique across all entity types.  # noqa: E501

        :param id: The id of this StorageDeploymentEnvironment.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this StorageDeploymentEnvironment.  # noqa: E501

        User readable name of the entity to be displayed in the UIs.  # noqa: E501

        :return: The display_name of this StorageDeploymentEnvironment.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this StorageDeploymentEnvironment.

        User readable name of the entity to be displayed in the UIs.  # noqa: E501

        :param display_name: The display_name of this StorageDeploymentEnvironment.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def created_time(self):
        """Gets the created_time of this StorageDeploymentEnvironment.  # noqa: E501

        Creation timestamp.  # noqa: E501

        :return: The created_time of this StorageDeploymentEnvironment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this StorageDeploymentEnvironment.

        Creation timestamp.  # noqa: E501

        :param created_time: The created_time of this StorageDeploymentEnvironment.  # noqa: E501
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this StorageDeploymentEnvironment.  # noqa: E501

        Last modification timestamp.  # noqa: E501

        :return: The last_modified_time of this StorageDeploymentEnvironment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this StorageDeploymentEnvironment.

        Last modification timestamp.  # noqa: E501

        :param last_modified_time: The last_modified_time of this StorageDeploymentEnvironment.  # noqa: E501
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def project_id(self):
        """Gets the project_id of this StorageDeploymentEnvironment.  # noqa: E501

        ID of the project the deployment environment is part of.  # noqa: E501

        :return: The project_id of this StorageDeploymentEnvironment.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this StorageDeploymentEnvironment.

        ID of the project the deployment environment is part of.  # noqa: E501

        :param project_id: The project_id of this StorageDeploymentEnvironment.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def deployment_target_name(self):
        """Gets the deployment_target_name of this StorageDeploymentEnvironment.  # noqa: E501

        Unique name of the target environment as defined in Deployer's configuration file.  In the simple cases, it is likely that the Deployer would only have a single K8s environment configured and this would always specify that particular K8s environment. In general, however, we want to support multiple target environments, e.g., to support running development scorers in AWS and production scorer's in on-premise K8s.  # noqa: E501

        :return: The deployment_target_name of this StorageDeploymentEnvironment.  # noqa: E501
        :rtype: str
        """
        return self._deployment_target_name

    @deployment_target_name.setter
    def deployment_target_name(self, deployment_target_name):
        """Sets the deployment_target_name of this StorageDeploymentEnvironment.

        Unique name of the target environment as defined in Deployer's configuration file.  In the simple cases, it is likely that the Deployer would only have a single K8s environment configured and this would always specify that particular K8s environment. In general, however, we want to support multiple target environments, e.g., to support running development scorers in AWS and production scorer's in on-premise K8s.  # noqa: E501

        :param deployment_target_name: The deployment_target_name of this StorageDeploymentEnvironment.  # noqa: E501
        :type deployment_target_name: str
        """

        self._deployment_target_name = deployment_target_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageDeploymentEnvironment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageDeploymentEnvironment):
            return True

        return self.to_dict() != other.to_dict()
