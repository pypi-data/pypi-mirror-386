# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageProjectInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project': 'StorageProject',
        'registered_model_count': 'int',
        'share_count': 'int',
        'experiment_count': 'str',
        'shared_user': 'list[StorageUser]',
        'registered_model_version_count': 'int'
    }

    attribute_map = {
        'project': 'project',
        'registered_model_count': 'registeredModelCount',
        'share_count': 'shareCount',
        'experiment_count': 'experimentCount',
        'shared_user': 'sharedUser',
        'registered_model_version_count': 'registeredModelVersionCount'
    }

    def __init__(self, project=None, registered_model_count=None, share_count=None, experiment_count=None, shared_user=None, registered_model_version_count=None, local_vars_configuration=None):  # noqa: E501
        """StorageProjectInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project = None
        self._registered_model_count = None
        self._share_count = None
        self._experiment_count = None
        self._shared_user = None
        self._registered_model_version_count = None
        self.discriminator = None

        if project is not None:
            self.project = project
        if registered_model_count is not None:
            self.registered_model_count = registered_model_count
        if share_count is not None:
            self.share_count = share_count
        if experiment_count is not None:
            self.experiment_count = experiment_count
        if shared_user is not None:
            self.shared_user = shared_user
        if registered_model_version_count is not None:
            self.registered_model_version_count = registered_model_version_count

    @property
    def project(self):
        """Gets the project of this StorageProjectInfo.  # noqa: E501


        :return: The project of this StorageProjectInfo.  # noqa: E501
        :rtype: StorageProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this StorageProjectInfo.


        :param project: The project of this StorageProjectInfo.  # noqa: E501
        :type project: StorageProject
        """

        self._project = project

    @property
    def registered_model_count(self):
        """Gets the registered_model_count of this StorageProjectInfo.  # noqa: E501


        :return: The registered_model_count of this StorageProjectInfo.  # noqa: E501
        :rtype: int
        """
        return self._registered_model_count

    @registered_model_count.setter
    def registered_model_count(self, registered_model_count):
        """Sets the registered_model_count of this StorageProjectInfo.


        :param registered_model_count: The registered_model_count of this StorageProjectInfo.  # noqa: E501
        :type registered_model_count: int
        """

        self._registered_model_count = registered_model_count

    @property
    def share_count(self):
        """Gets the share_count of this StorageProjectInfo.  # noqa: E501

        Count of the number of users the project is shared with as provided by the SharingService.  # noqa: E501

        :return: The share_count of this StorageProjectInfo.  # noqa: E501
        :rtype: int
        """
        return self._share_count

    @share_count.setter
    def share_count(self, share_count):
        """Sets the share_count of this StorageProjectInfo.

        Count of the number of users the project is shared with as provided by the SharingService.  # noqa: E501

        :param share_count: The share_count of this StorageProjectInfo.  # noqa: E501
        :type share_count: int
        """

        self._share_count = share_count

    @property
    def experiment_count(self):
        """Gets the experiment_count of this StorageProjectInfo.  # noqa: E501

        Count of the number of experiments within the project as provided by the ExperimentService.  # noqa: E501

        :return: The experiment_count of this StorageProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._experiment_count

    @experiment_count.setter
    def experiment_count(self, experiment_count):
        """Sets the experiment_count of this StorageProjectInfo.

        Count of the number of experiments within the project as provided by the ExperimentService.  # noqa: E501

        :param experiment_count: The experiment_count of this StorageProjectInfo.  # noqa: E501
        :type experiment_count: str
        """

        self._experiment_count = experiment_count

    @property
    def shared_user(self):
        """Gets the shared_user of this StorageProjectInfo.  # noqa: E501

        The information with regards to the users with whom the project has been shared with, A maximum of 10 user details are provided as part of the response.  # noqa: E501

        :return: The shared_user of this StorageProjectInfo.  # noqa: E501
        :rtype: list[StorageUser]
        """
        return self._shared_user

    @shared_user.setter
    def shared_user(self, shared_user):
        """Sets the shared_user of this StorageProjectInfo.

        The information with regards to the users with whom the project has been shared with, A maximum of 10 user details are provided as part of the response.  # noqa: E501

        :param shared_user: The shared_user of this StorageProjectInfo.  # noqa: E501
        :type shared_user: list[StorageUser]
        """

        self._shared_user = shared_user

    @property
    def registered_model_version_count(self):
        """Gets the registered_model_version_count of this StorageProjectInfo.  # noqa: E501

        Count of the number of model versions across all registered models in the project.  # noqa: E501

        :return: The registered_model_version_count of this StorageProjectInfo.  # noqa: E501
        :rtype: int
        """
        return self._registered_model_version_count

    @registered_model_version_count.setter
    def registered_model_version_count(self, registered_model_version_count):
        """Sets the registered_model_version_count of this StorageProjectInfo.

        Count of the number of model versions across all registered models in the project.  # noqa: E501

        :param registered_model_version_count: The registered_model_version_count of this StorageProjectInfo.  # noqa: E501
        :type registered_model_version_count: int
        """

        self._registered_model_version_count = registered_model_version_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageProjectInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageProjectInfo):
            return True

        return self.to_dict() != other.to_dict()
