# coding: utf-8

"""
    ai/h2o/mlops/storage/v1/artifact.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.storage.configuration import Configuration


class StorageListExperimentsWithModelInfoRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_id': 'str',
        'paging': 'StoragePagingRequest',
        'filter': 'StorageFilterRequest',
        'sorting': 'StorageSortingRequest',
        'response_metadata': 'StorageKeySelection'
    }

    attribute_map = {
        'project_id': 'projectId',
        'paging': 'paging',
        'filter': 'filter',
        'sorting': 'sorting',
        'response_metadata': 'responseMetadata'
    }

    def __init__(self, project_id=None, paging=None, filter=None, sorting=None, response_metadata=None, local_vars_configuration=None):  # noqa: E501
        """StorageListExperimentsWithModelInfoRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_id = None
        self._paging = None
        self._filter = None
        self._sorting = None
        self._response_metadata = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if paging is not None:
            self.paging = paging
        if filter is not None:
            self.filter = filter
        if sorting is not None:
            self.sorting = sorting
        if response_metadata is not None:
            self.response_metadata = response_metadata

    @property
    def project_id(self):
        """Gets the project_id of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501


        :return: The project_id of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this StorageListExperimentsWithModelInfoRequest.


        :param project_id: The project_id of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def paging(self):
        """Gets the paging of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501


        :return: The paging of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :rtype: StoragePagingRequest
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this StorageListExperimentsWithModelInfoRequest.


        :param paging: The paging of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :type paging: StoragePagingRequest
        """

        self._paging = paging

    @property
    def filter(self):
        """Gets the filter of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501


        :return: The filter of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :rtype: StorageFilterRequest
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this StorageListExperimentsWithModelInfoRequest.


        :param filter: The filter of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :type filter: StorageFilterRequest
        """

        self._filter = filter

    @property
    def sorting(self):
        """Gets the sorting of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501


        :return: The sorting of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :rtype: StorageSortingRequest
        """
        return self._sorting

    @sorting.setter
    def sorting(self, sorting):
        """Sets the sorting of this StorageListExperimentsWithModelInfoRequest.


        :param sorting: The sorting of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :type sorting: StorageSortingRequest
        """

        self._sorting = sorting

    @property
    def response_metadata(self):
        """Gets the response_metadata of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501


        :return: The response_metadata of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :rtype: StorageKeySelection
        """
        return self._response_metadata

    @response_metadata.setter
    def response_metadata(self, response_metadata):
        """Sets the response_metadata of this StorageListExperimentsWithModelInfoRequest.


        :param response_metadata: The response_metadata of this StorageListExperimentsWithModelInfoRequest.  # noqa: E501
        :type response_metadata: StorageKeySelection
        """

        self._response_metadata = response_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageListExperimentsWithModelInfoRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageListExperimentsWithModelInfoRequest):
            return True

        return self.to_dict() != other.to_dict()
