# coding: utf-8

"""
    ai/h2o/workspace/v1/event.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.workspace.configuration import Configuration


class InlineObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'description': 'str',
        'annotations': 'dict(str, str)',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'creator': 'str',
        'updater': 'str',
        'delete_time': 'datetime',
        'deleter': 'str',
        'personal_workspace_subject': 'str',
        'purge_time': 'datetime',
        'archive_time': 'datetime',
        'archiver': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'description': 'description',
        'annotations': 'annotations',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'creator': 'creator',
        'updater': 'updater',
        'delete_time': 'deleteTime',
        'deleter': 'deleter',
        'personal_workspace_subject': 'personalWorkspaceSubject',
        'purge_time': 'purgeTime',
        'archive_time': 'archiveTime',
        'archiver': 'archiver'
    }

    def __init__(self, display_name=None, description=None, annotations=None, create_time=None, update_time=None, creator=None, updater=None, delete_time=None, deleter=None, personal_workspace_subject=None, purge_time=None, archive_time=None, archiver=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._display_name = None
        self._description = None
        self._annotations = None
        self._create_time = None
        self._update_time = None
        self._creator = None
        self._updater = None
        self._delete_time = None
        self._deleter = None
        self._personal_workspace_subject = None
        self._purge_time = None
        self._archive_time = None
        self._archiver = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if annotations is not None:
            self.annotations = annotations
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if creator is not None:
            self.creator = creator
        if updater is not None:
            self.updater = updater
        if delete_time is not None:
            self.delete_time = delete_time
        if deleter is not None:
            self.deleter = deleter
        if personal_workspace_subject is not None:
            self.personal_workspace_subject = personal_workspace_subject
        if purge_time is not None:
            self.purge_time = purge_time
        if archive_time is not None:
            self.archive_time = archive_time
        if archiver is not None:
            self.archiver = archiver

    @property
    def display_name(self):
        """Gets the display_name of this InlineObject.  # noqa: E501

        Name of the Workspace that is displayed on the front-end.  # noqa: E501

        :return: The display_name of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineObject.

        Name of the Workspace that is displayed on the front-end.  # noqa: E501

        :param display_name: The display_name of this InlineObject.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this InlineObject.  # noqa: E501

        Arbitrary description of the workspace.  # noqa: E501

        :return: The description of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineObject.

        Arbitrary description of the workspace.  # noqa: E501

        :param description: The description of this InlineObject.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def annotations(self):
        """Gets the annotations of this InlineObject.  # noqa: E501

        Arbitrary data associated with the Workspace. Can be provided by the User on the creation or by the client/services themselves to persist helper metadata. This should not contain any significant business logic data, just the data for the categorization and identification. Clients/Services can choose to prefixing the keys.  Keys should follow https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set  1st party services should use <service name>.h2o.ai/ prefix. workspace.h2o.ai/ prefix is reserved for internal purposes and annotations with this prefix can be ignored or modified without warning.  Defined reserved annotations:  'workspace.h2o.ai/resource-namespace' is used to set the name of the Kubernetes namespace where the workspace resources are created. Setting or modifying this annotation will is controlled by the actions/workspaceserver/workspaces/MODIFY_RESOURCE_NAMESPACE_ANNOTATION action. Functionality utilizes this enables needs to be enabled globally for the environment.  # noqa: E501

        :return: The annotations of this InlineObject.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this InlineObject.

        Arbitrary data associated with the Workspace. Can be provided by the User on the creation or by the client/services themselves to persist helper metadata. This should not contain any significant business logic data, just the data for the categorization and identification. Clients/Services can choose to prefixing the keys.  Keys should follow https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set  1st party services should use <service name>.h2o.ai/ prefix. workspace.h2o.ai/ prefix is reserved for internal purposes and annotations with this prefix can be ignored or modified without warning.  Defined reserved annotations:  'workspace.h2o.ai/resource-namespace' is used to set the name of the Kubernetes namespace where the workspace resources are created. Setting or modifying this annotation will is controlled by the actions/workspaceserver/workspaces/MODIFY_RESOURCE_NAMESPACE_ANNOTATION action. Functionality utilizes this enables needs to be enabled globally for the environment.  # noqa: E501

        :param annotations: The annotations of this InlineObject.  # noqa: E501
        :type annotations: dict(str, str)
        """

        self._annotations = annotations

    @property
    def create_time(self):
        """Gets the create_time of this InlineObject.  # noqa: E501

        Output only.  # noqa: E501

        :return: The create_time of this InlineObject.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineObject.

        Output only.  # noqa: E501

        :param create_time: The create_time of this InlineObject.  # noqa: E501
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this InlineObject.  # noqa: E501

        Output only.  # noqa: E501

        :return: The update_time of this InlineObject.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InlineObject.

        Output only.  # noqa: E501

        :param update_time: The update_time of this InlineObject.  # noqa: E501
        :type update_time: datetime
        """

        self._update_time = update_time

    @property
    def creator(self):
        """Gets the creator of this InlineObject.  # noqa: E501

        Output only. Name of the user or service that requested creation of the Workspace.  # noqa: E501

        :return: The creator of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this InlineObject.

        Output only. Name of the user or service that requested creation of the Workspace.  # noqa: E501

        :param creator: The creator of this InlineObject.  # noqa: E501
        :type creator: str
        """

        self._creator = creator

    @property
    def updater(self):
        """Gets the updater of this InlineObject.  # noqa: E501

        Output only. Name of the user or service that requested update of the Workspace.  # noqa: E501

        :return: The updater of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._updater

    @updater.setter
    def updater(self, updater):
        """Sets the updater of this InlineObject.

        Output only. Name of the user or service that requested update of the Workspace.  # noqa: E501

        :param updater: The updater of this InlineObject.  # noqa: E501
        :type updater: str
        """

        self._updater = updater

    @property
    def delete_time(self):
        """Gets the delete_time of this InlineObject.  # noqa: E501

        Output only. Set when the Workspace is deleted. When set workspace should be considered as deleted.  # noqa: E501

        :return: The delete_time of this InlineObject.  # noqa: E501
        :rtype: datetime
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this InlineObject.

        Output only. Set when the Workspace is deleted. When set workspace should be considered as deleted.  # noqa: E501

        :param delete_time: The delete_time of this InlineObject.  # noqa: E501
        :type delete_time: datetime
        """

        self._delete_time = delete_time

    @property
    def deleter(self):
        """Gets the deleter of this InlineObject.  # noqa: E501

        Output only. Name of the user or service that requested deletion of the Workspace.  # noqa: E501

        :return: The deleter of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._deleter

    @deleter.setter
    def deleter(self, deleter):
        """Sets the deleter of this InlineObject.

        Output only. Name of the user or service that requested deletion of the Workspace.  # noqa: E501

        :param deleter: The deleter of this InlineObject.  # noqa: E501
        :type deleter: str
        """

        self._deleter = deleter

    @property
    def personal_workspace_subject(self):
        """Gets the personal_workspace_subject of this InlineObject.  # noqa: E501

        Name of the user (users/<UUID>) or service that has this workspace associated with them as a personal workspace. When used during creation, and the subject already has a personal workspace, call will fail.  Caller requires actions/workspaceserver/workspaces/CREATE_PERSONAL on //workspaceserver when set during the creation.  # noqa: E501

        :return: The personal_workspace_subject of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._personal_workspace_subject

    @personal_workspace_subject.setter
    def personal_workspace_subject(self, personal_workspace_subject):
        """Sets the personal_workspace_subject of this InlineObject.

        Name of the user (users/<UUID>) or service that has this workspace associated with them as a personal workspace. When used during creation, and the subject already has a personal workspace, call will fail.  Caller requires actions/workspaceserver/workspaces/CREATE_PERSONAL on //workspaceserver when set during the creation.  # noqa: E501

        :param personal_workspace_subject: The personal_workspace_subject of this InlineObject.  # noqa: E501
        :type personal_workspace_subject: str
        """

        self._personal_workspace_subject = personal_workspace_subject

    @property
    def purge_time(self):
        """Gets the purge_time of this InlineObject.  # noqa: E501

        Output only. Set when the Workspace is deleted. Workspace will be purged from the system after this time and cannot be undeleted after this time.  # noqa: E501

        :return: The purge_time of this InlineObject.  # noqa: E501
        :rtype: datetime
        """
        return self._purge_time

    @purge_time.setter
    def purge_time(self, purge_time):
        """Sets the purge_time of this InlineObject.

        Output only. Set when the Workspace is deleted. Workspace will be purged from the system after this time and cannot be undeleted after this time.  # noqa: E501

        :param purge_time: The purge_time of this InlineObject.  # noqa: E501
        :type purge_time: datetime
        """

        self._purge_time = purge_time

    @property
    def archive_time(self):
        """Gets the archive_time of this InlineObject.  # noqa: E501

        Output only. Set when the Workspace is archived. When set workspace should be considered as archived.  # noqa: E501

        :return: The archive_time of this InlineObject.  # noqa: E501
        :rtype: datetime
        """
        return self._archive_time

    @archive_time.setter
    def archive_time(self, archive_time):
        """Sets the archive_time of this InlineObject.

        Output only. Set when the Workspace is archived. When set workspace should be considered as archived.  # noqa: E501

        :param archive_time: The archive_time of this InlineObject.  # noqa: E501
        :type archive_time: datetime
        """

        self._archive_time = archive_time

    @property
    def archiver(self):
        """Gets the archiver of this InlineObject.  # noqa: E501

        Output only. Name of the user or service that requested archiving of the Workspace.  # noqa: E501

        :return: The archiver of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._archiver

    @archiver.setter
    def archiver(self, archiver):
        """Sets the archiver of this InlineObject.

        Output only. Name of the user or service that requested archiving of the Workspace.  # noqa: E501

        :param archiver: The archiver of this InlineObject.  # noqa: E501
        :type archiver: str
        """

        self._archiver = archiver

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject):
            return True

        return self.to_dict() != other.to_dict()
