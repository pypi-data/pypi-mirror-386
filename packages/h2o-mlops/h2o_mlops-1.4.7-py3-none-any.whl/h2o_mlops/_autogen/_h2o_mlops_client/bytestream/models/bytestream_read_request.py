# coding: utf-8

"""
    google/bytestream/bytestream.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.bytestream.configuration import Configuration


class BytestreamReadRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_name': 'str',
        'read_offset': 'str',
        'read_limit': 'str'
    }

    attribute_map = {
        'resource_name': 'resourceName',
        'read_offset': 'readOffset',
        'read_limit': 'readLimit'
    }

    def __init__(self, resource_name=None, read_offset=None, read_limit=None, local_vars_configuration=None):  # noqa: E501
        """BytestreamReadRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_name = None
        self._read_offset = None
        self._read_limit = None
        self.discriminator = None

        if resource_name is not None:
            self.resource_name = resource_name
        if read_offset is not None:
            self.read_offset = read_offset
        if read_limit is not None:
            self.read_limit = read_limit

    @property
    def resource_name(self):
        """Gets the resource_name of this BytestreamReadRequest.  # noqa: E501

        The name of the resource to read.  # noqa: E501

        :return: The resource_name of this BytestreamReadRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this BytestreamReadRequest.

        The name of the resource to read.  # noqa: E501

        :param resource_name: The resource_name of this BytestreamReadRequest.  # noqa: E501
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def read_offset(self):
        """Gets the read_offset of this BytestreamReadRequest.  # noqa: E501

        The offset for the first byte to return in the read, relative to the start of the resource.  A `read_offset` that is negative or greater than the size of the resource will cause an `OUT_OF_RANGE` error.  # noqa: E501

        :return: The read_offset of this BytestreamReadRequest.  # noqa: E501
        :rtype: str
        """
        return self._read_offset

    @read_offset.setter
    def read_offset(self, read_offset):
        """Sets the read_offset of this BytestreamReadRequest.

        The offset for the first byte to return in the read, relative to the start of the resource.  A `read_offset` that is negative or greater than the size of the resource will cause an `OUT_OF_RANGE` error.  # noqa: E501

        :param read_offset: The read_offset of this BytestreamReadRequest.  # noqa: E501
        :type read_offset: str
        """

        self._read_offset = read_offset

    @property
    def read_limit(self):
        """Gets the read_limit of this BytestreamReadRequest.  # noqa: E501

        The maximum number of `data` bytes the server is allowed to return in the sum of all `ReadResponse` messages. A `read_limit` of zero indicates that there is no limit, and a negative `read_limit` will cause an error.  If the stream returns fewer bytes than allowed by the `read_limit` and no error occurred, the stream includes all data from the `read_offset` to the end of the resource.  # noqa: E501

        :return: The read_limit of this BytestreamReadRequest.  # noqa: E501
        :rtype: str
        """
        return self._read_limit

    @read_limit.setter
    def read_limit(self, read_limit):
        """Sets the read_limit of this BytestreamReadRequest.

        The maximum number of `data` bytes the server is allowed to return in the sum of all `ReadResponse` messages. A `read_limit` of zero indicates that there is no limit, and a negative `read_limit` will cause an error.  If the stream returns fewer bytes than allowed by the `read_limit` and no error occurred, the stream includes all data from the `read_offset` to the end of the resource.  # noqa: E501

        :param read_limit: The read_limit of this BytestreamReadRequest.  # noqa: E501
        :type read_limit: str
        """

        self._read_limit = read_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BytestreamReadRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BytestreamReadRequest):
            return True

        return self.to_dict() != other.to_dict()
