# coding: utf-8

"""
    google/bytestream/bytestream.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.bytestream.configuration import Configuration


class BytestreamWriteRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_name': 'str',
        'write_offset': 'str',
        'finish_write': 'bool',
        'data': 'str'
    }

    attribute_map = {
        'resource_name': 'resourceName',
        'write_offset': 'writeOffset',
        'finish_write': 'finishWrite',
        'data': 'data'
    }

    def __init__(self, resource_name=None, write_offset=None, finish_write=None, data=None, local_vars_configuration=None):  # noqa: E501
        """BytestreamWriteRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_name = None
        self._write_offset = None
        self._finish_write = None
        self._data = None
        self.discriminator = None

        if resource_name is not None:
            self.resource_name = resource_name
        if write_offset is not None:
            self.write_offset = write_offset
        if finish_write is not None:
            self.finish_write = finish_write
        if data is not None:
            self.data = data

    @property
    def resource_name(self):
        """Gets the resource_name of this BytestreamWriteRequest.  # noqa: E501

        The name of the resource to write. This **must** be set on the first `WriteRequest` of each `Write()` action. If it is set on subsequent calls, it **must** match the value of the first request.  # noqa: E501

        :return: The resource_name of this BytestreamWriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this BytestreamWriteRequest.

        The name of the resource to write. This **must** be set on the first `WriteRequest` of each `Write()` action. If it is set on subsequent calls, it **must** match the value of the first request.  # noqa: E501

        :param resource_name: The resource_name of this BytestreamWriteRequest.  # noqa: E501
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def write_offset(self):
        """Gets the write_offset of this BytestreamWriteRequest.  # noqa: E501

        The offset from the beginning of the resource at which the data should be written. It is required on all `WriteRequest`s.  In the first `WriteRequest` of a `Write()` action, it indicates the initial offset for the `Write()` call. The value **must** be equal to the `committed_size` that a call to `QueryWriteStatus()` would return.  On subsequent calls, this value **must** be set and **must** be equal to the sum of the first `write_offset` and the sizes of all `data` bundles sent previously on this stream.  An incorrect value will cause an error.  # noqa: E501

        :return: The write_offset of this BytestreamWriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._write_offset

    @write_offset.setter
    def write_offset(self, write_offset):
        """Sets the write_offset of this BytestreamWriteRequest.

        The offset from the beginning of the resource at which the data should be written. It is required on all `WriteRequest`s.  In the first `WriteRequest` of a `Write()` action, it indicates the initial offset for the `Write()` call. The value **must** be equal to the `committed_size` that a call to `QueryWriteStatus()` would return.  On subsequent calls, this value **must** be set and **must** be equal to the sum of the first `write_offset` and the sizes of all `data` bundles sent previously on this stream.  An incorrect value will cause an error.  # noqa: E501

        :param write_offset: The write_offset of this BytestreamWriteRequest.  # noqa: E501
        :type write_offset: str
        """

        self._write_offset = write_offset

    @property
    def finish_write(self):
        """Gets the finish_write of this BytestreamWriteRequest.  # noqa: E501

        If `true`, this indicates that the write is complete. Sending any `WriteRequest`s subsequent to one in which `finish_write` is `true` will cause an error.  # noqa: E501

        :return: The finish_write of this BytestreamWriteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._finish_write

    @finish_write.setter
    def finish_write(self, finish_write):
        """Sets the finish_write of this BytestreamWriteRequest.

        If `true`, this indicates that the write is complete. Sending any `WriteRequest`s subsequent to one in which `finish_write` is `true` will cause an error.  # noqa: E501

        :param finish_write: The finish_write of this BytestreamWriteRequest.  # noqa: E501
        :type finish_write: bool
        """

        self._finish_write = finish_write

    @property
    def data(self):
        """Gets the data of this BytestreamWriteRequest.  # noqa: E501

        A portion of the data for the resource. The client **may** leave `data` empty for any given `WriteRequest`. This enables the client to inform the service that the request is still live while it is running an operation to generate more data.  # noqa: E501

        :return: The data of this BytestreamWriteRequest.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BytestreamWriteRequest.

        A portion of the data for the resource. The client **may** leave `data` empty for any given `WriteRequest`. This enables the client to inform the service that the request is still live while it is running an operation to generate more data.  # noqa: E501

        :param data: The data of this BytestreamWriteRequest.  # noqa: E501
        :type data: str
        """
        if (self.local_vars_configuration.client_side_validation and
                data is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', data)):  # noqa: E501
            raise ValueError(r"Invalid value for `data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BytestreamWriteRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BytestreamWriteRequest):
            return True

        return self.to_dict() != other.to_dict()
