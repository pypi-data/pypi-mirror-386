# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2ListArtifactCompositionsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_compositions': 'list[V2ArtifactComposition]'
    }

    attribute_map = {
        'artifact_compositions': 'artifactCompositions'
    }

    def __init__(self, artifact_compositions=None, local_vars_configuration=None):  # noqa: E501
        """V2ListArtifactCompositionsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_compositions = None
        self.discriminator = None

        if artifact_compositions is not None:
            self.artifact_compositions = artifact_compositions

    @property
    def artifact_compositions(self):
        """Gets the artifact_compositions of this V2ListArtifactCompositionsResponse.  # noqa: E501

        List of artifact composition entities.  # noqa: E501

        :return: The artifact_compositions of this V2ListArtifactCompositionsResponse.  # noqa: E501
        :rtype: list[V2ArtifactComposition]
        """
        return self._artifact_compositions

    @artifact_compositions.setter
    def artifact_compositions(self, artifact_compositions):
        """Sets the artifact_compositions of this V2ListArtifactCompositionsResponse.

        List of artifact composition entities.  # noqa: E501

        :param artifact_compositions: The artifact_compositions of this V2ListArtifactCompositionsResponse.  # noqa: E501
        :type artifact_compositions: list[V2ArtifactComposition]
        """

        self._artifact_compositions = artifact_compositions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2ListArtifactCompositionsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2ListArtifactCompositionsResponse):
            return True

        return self.to_dict() != other.to_dict()
