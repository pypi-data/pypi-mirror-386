# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2Column(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'column': 'str',
        'logical_type': 'V2LogicalType',
        'is_model_output': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'column': 'column',
        'logical_type': 'logicalType',
        'is_model_output': 'isModelOutput'
    }

    def __init__(self, id=None, column=None, logical_type=None, is_model_output=None, local_vars_configuration=None):  # noqa: E501
        """V2Column - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._column = None
        self._logical_type = None
        self._is_model_output = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.column = column
        self.logical_type = logical_type
        if is_model_output is not None:
            self.is_model_output = is_model_output

    @property
    def id(self):
        """Gets the id of this V2Column.  # noqa: E501

        ID of the column. Autogenerated by database.  # noqa: E501

        :return: The id of this V2Column.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2Column.

        ID of the column. Autogenerated by database.  # noqa: E501

        :param id: The id of this V2Column.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def column(self):
        """Gets the column of this V2Column.  # noqa: E501


        :return: The column of this V2Column.  # noqa: E501
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this V2Column.


        :param column: The column of this V2Column.  # noqa: E501
        :type column: str
        """
        if self.local_vars_configuration.client_side_validation and column is None:  # noqa: E501
            raise ValueError("Invalid value for `column`, must not be `None`")  # noqa: E501

        self._column = column

    @property
    def logical_type(self):
        """Gets the logical_type of this V2Column.  # noqa: E501


        :return: The logical_type of this V2Column.  # noqa: E501
        :rtype: V2LogicalType
        """
        return self._logical_type

    @logical_type.setter
    def logical_type(self, logical_type):
        """Sets the logical_type of this V2Column.


        :param logical_type: The logical_type of this V2Column.  # noqa: E501
        :type logical_type: V2LogicalType
        """
        if self.local_vars_configuration.client_side_validation and logical_type is None:  # noqa: E501
            raise ValueError("Invalid value for `logical_type`, must not be `None`")  # noqa: E501

        self._logical_type = logical_type

    @property
    def is_model_output(self):
        """Gets the is_model_output of this V2Column.  # noqa: E501


        :return: The is_model_output of this V2Column.  # noqa: E501
        :rtype: bool
        """
        return self._is_model_output

    @is_model_output.setter
    def is_model_output(self, is_model_output):
        """Sets the is_model_output of this V2Column.


        :param is_model_output: The is_model_output of this V2Column.  # noqa: E501
        :type is_model_output: bool
        """

        self._is_model_output = is_model_output

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2Column):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2Column):
            return True

        return self.to_dict() != other.to_dict()
