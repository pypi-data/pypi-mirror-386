# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2Deployment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'description': 'str',
        'etag': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'creator': 'str',
        'single': 'V2SingleDeployment',
        'shadow': 'V2ShadowDeployment',
        'split': 'V2SplitDeployment',
        'security': 'V2Security',
        'cors': 'V2Cors',
        'monitoring_options': 'V2MonitoringOptions'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'description': 'description',
        'etag': 'etag',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'creator': 'creator',
        'single': 'single',
        'shadow': 'shadow',
        'split': 'split',
        'security': 'security',
        'cors': 'cors',
        'monitoring_options': 'monitoringOptions'
    }

    def __init__(self, name=None, display_name=None, description=None, etag=None, create_time=None, update_time=None, creator=None, single=None, shadow=None, split=None, security=None, cors=None, monitoring_options=None, local_vars_configuration=None):  # noqa: E501
        """V2Deployment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._description = None
        self._etag = None
        self._create_time = None
        self._update_time = None
        self._creator = None
        self._single = None
        self._shadow = None
        self._split = None
        self._security = None
        self._cors = None
        self._monitoring_options = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if etag is not None:
            self.etag = etag
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if creator is not None:
            self.creator = creator
        if single is not None:
            self.single = single
        if shadow is not None:
            self.shadow = shadow
        if split is not None:
            self.split = split
        if security is not None:
            self.security = security
        if cors is not None:
            self.cors = cors
        if monitoring_options is not None:
            self.monitoring_options = monitoring_options

    @property
    def name(self):
        """Gets the name of this V2Deployment.  # noqa: E501

        Resource name.  # noqa: E501

        :return: The name of this V2Deployment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2Deployment.

        Resource name.  # noqa: E501

        :param name: The name of this V2Deployment.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this V2Deployment.  # noqa: E501

        Optional. Human-readable name.  # noqa: E501

        :return: The display_name of this V2Deployment.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V2Deployment.

        Optional. Human-readable name.  # noqa: E501

        :param display_name: The display_name of this V2Deployment.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this V2Deployment.  # noqa: E501

        Optional. Description of the deployment.  # noqa: E501

        :return: The description of this V2Deployment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V2Deployment.

        Optional. Description of the deployment.  # noqa: E501

        :param description: The description of this V2Deployment.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this V2Deployment.  # noqa: E501

        The etag of the deployment.  # noqa: E501

        :return: The etag of this V2Deployment.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this V2Deployment.

        The etag of the deployment.  # noqa: E501

        :param etag: The etag of this V2Deployment.  # noqa: E501
        :type etag: str
        """

        self._etag = etag

    @property
    def create_time(self):
        """Gets the create_time of this V2Deployment.  # noqa: E501

        Creation timestamp.  # noqa: E501

        :return: The create_time of this V2Deployment.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V2Deployment.

        Creation timestamp.  # noqa: E501

        :param create_time: The create_time of this V2Deployment.  # noqa: E501
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this V2Deployment.  # noqa: E501

        Update timestamp.  # noqa: E501

        :return: The update_time of this V2Deployment.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V2Deployment.

        Update timestamp.  # noqa: E501

        :param update_time: The update_time of this V2Deployment.  # noqa: E501
        :type update_time: datetime
        """

        self._update_time = update_time

    @property
    def creator(self):
        """Gets the creator of this V2Deployment.  # noqa: E501

        Output only. Name of an entity that created the Deployment.  # noqa: E501

        :return: The creator of this V2Deployment.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this V2Deployment.

        Output only. Name of an entity that created the Deployment.  # noqa: E501

        :param creator: The creator of this V2Deployment.  # noqa: E501
        :type creator: str
        """

        self._creator = creator

    @property
    def single(self):
        """Gets the single of this V2Deployment.  # noqa: E501


        :return: The single of this V2Deployment.  # noqa: E501
        :rtype: V2SingleDeployment
        """
        return self._single

    @single.setter
    def single(self, single):
        """Sets the single of this V2Deployment.


        :param single: The single of this V2Deployment.  # noqa: E501
        :type single: V2SingleDeployment
        """

        self._single = single

    @property
    def shadow(self):
        """Gets the shadow of this V2Deployment.  # noqa: E501


        :return: The shadow of this V2Deployment.  # noqa: E501
        :rtype: V2ShadowDeployment
        """
        return self._shadow

    @shadow.setter
    def shadow(self, shadow):
        """Sets the shadow of this V2Deployment.


        :param shadow: The shadow of this V2Deployment.  # noqa: E501
        :type shadow: V2ShadowDeployment
        """

        self._shadow = shadow

    @property
    def split(self):
        """Gets the split of this V2Deployment.  # noqa: E501


        :return: The split of this V2Deployment.  # noqa: E501
        :rtype: V2SplitDeployment
        """
        return self._split

    @split.setter
    def split(self, split):
        """Sets the split of this V2Deployment.


        :param split: The split of this V2Deployment.  # noqa: E501
        :type split: V2SplitDeployment
        """

        self._split = split

    @property
    def security(self):
        """Gets the security of this V2Deployment.  # noqa: E501


        :return: The security of this V2Deployment.  # noqa: E501
        :rtype: V2Security
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this V2Deployment.


        :param security: The security of this V2Deployment.  # noqa: E501
        :type security: V2Security
        """

        self._security = security

    @property
    def cors(self):
        """Gets the cors of this V2Deployment.  # noqa: E501


        :return: The cors of this V2Deployment.  # noqa: E501
        :rtype: V2Cors
        """
        return self._cors

    @cors.setter
    def cors(self, cors):
        """Sets the cors of this V2Deployment.


        :param cors: The cors of this V2Deployment.  # noqa: E501
        :type cors: V2Cors
        """

        self._cors = cors

    @property
    def monitoring_options(self):
        """Gets the monitoring_options of this V2Deployment.  # noqa: E501


        :return: The monitoring_options of this V2Deployment.  # noqa: E501
        :rtype: V2MonitoringOptions
        """
        return self._monitoring_options

    @monitoring_options.setter
    def monitoring_options(self, monitoring_options):
        """Sets the monitoring_options of this V2Deployment.


        :param monitoring_options: The monitoring_options of this V2Deployment.  # noqa: E501
        :type monitoring_options: V2MonitoringOptions
        """

        self._monitoring_options = monitoring_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2Deployment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2Deployment):
            return True

        return self.to_dict() != other.to_dict()
