# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class CredentialsAzureCredentials(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account': 'str',
        'account_key': 'str',
        'sas_token': 'str',
        'sas_container': 'str',
        'storage_connection_string': 'str'
    }

    attribute_map = {
        'account': 'account',
        'account_key': 'accountKey',
        'sas_token': 'sasToken',
        'sas_container': 'sasContainer',
        'storage_connection_string': 'storageConnectionString'
    }

    def __init__(self, account=None, account_key=None, sas_token=None, sas_container=None, storage_connection_string=None, local_vars_configuration=None):  # noqa: E501
        """CredentialsAzureCredentials - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account = None
        self._account_key = None
        self._sas_token = None
        self._sas_container = None
        self._storage_connection_string = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if account_key is not None:
            self.account_key = account_key
        if sas_token is not None:
            self.sas_token = sas_token
        if sas_container is not None:
            self.sas_container = sas_container
        if storage_connection_string is not None:
            self.storage_connection_string = storage_connection_string

    @property
    def account(self):
        """Gets the account of this CredentialsAzureCredentials.  # noqa: E501

        The storage account to access. This field is ignored if storage_connection_string is set.  # noqa: E501

        :return: The account of this CredentialsAzureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CredentialsAzureCredentials.

        The storage account to access. This field is ignored if storage_connection_string is set.  # noqa: E501

        :param account: The account of this CredentialsAzureCredentials.  # noqa: E501
        :type account: str
        """

        self._account = account

    @property
    def account_key(self):
        """Gets the account_key of this CredentialsAzureCredentials.  # noqa: E501

        The storage account access key. This field is ignored if storage_connection_string is set.  # noqa: E501

        :return: The account_key of this CredentialsAzureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this CredentialsAzureCredentials.

        The storage account access key. This field is ignored if storage_connection_string is set.  # noqa: E501

        :param account_key: The account_key of this CredentialsAzureCredentials.  # noqa: E501
        :type account_key: str
        """

        self._account_key = account_key

    @property
    def sas_token(self):
        """Gets the sas_token of this CredentialsAzureCredentials.  # noqa: E501


        :return: The sas_token of this CredentialsAzureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._sas_token

    @sas_token.setter
    def sas_token(self, sas_token):
        """Sets the sas_token of this CredentialsAzureCredentials.


        :param sas_token: The sas_token of this CredentialsAzureCredentials.  # noqa: E501
        :type sas_token: str
        """

        self._sas_token = sas_token

    @property
    def sas_container(self):
        """Gets the sas_container of this CredentialsAzureCredentials.  # noqa: E501

        The name of the container from which to download blobs.  # noqa: E501

        :return: The sas_container of this CredentialsAzureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._sas_container

    @sas_container.setter
    def sas_container(self, sas_container):
        """Sets the sas_container of this CredentialsAzureCredentials.

        The name of the container from which to download blobs.  # noqa: E501

        :param sas_container: The sas_container of this CredentialsAzureCredentials.  # noqa: E501
        :type sas_container: str
        """

        self._sas_container = sas_container

    @property
    def storage_connection_string(self):
        """Gets the storage_connection_string of this CredentialsAzureCredentials.  # noqa: E501

        A storage account connection string.  # noqa: E501

        :return: The storage_connection_string of this CredentialsAzureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._storage_connection_string

    @storage_connection_string.setter
    def storage_connection_string(self, storage_connection_string):
        """Sets the storage_connection_string of this CredentialsAzureCredentials.

        A storage account connection string.  # noqa: E501

        :param storage_connection_string: The storage_connection_string of this CredentialsAzureCredentials.  # noqa: E501
        :type storage_connection_string: str
        """

        self._storage_connection_string = storage_connection_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialsAzureCredentials):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CredentialsAzureCredentials):
            return True

        return self.to_dict() != other.to_dict()
