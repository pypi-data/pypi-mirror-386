# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2NumericalAggregate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bin_edges': 'list[float]',
        'bin_count': 'list[int]',
        'mean': 'float',
        'standard_deviation': 'float',
        'min': 'float',
        'max': 'float',
        'sum': 'float'
    }

    attribute_map = {
        'bin_edges': 'binEdges',
        'bin_count': 'binCount',
        'mean': 'mean',
        'standard_deviation': 'standardDeviation',
        'min': 'min',
        'max': 'max',
        'sum': 'sum'
    }

    def __init__(self, bin_edges=None, bin_count=None, mean=None, standard_deviation=None, min=None, max=None, sum=None, local_vars_configuration=None):  # noqa: E501
        """V2NumericalAggregate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bin_edges = None
        self._bin_count = None
        self._mean = None
        self._standard_deviation = None
        self._min = None
        self._max = None
        self._sum = None
        self.discriminator = None

        if bin_edges is not None:
            self.bin_edges = bin_edges
        if bin_count is not None:
            self.bin_count = bin_count
        if mean is not None:
            self.mean = mean
        if standard_deviation is not None:
            self.standard_deviation = standard_deviation
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if sum is not None:
            self.sum = sum

    @property
    def bin_edges(self):
        """Gets the bin_edges of this V2NumericalAggregate.  # noqa: E501

        Data points for the window are binned before calculating some metrics. bin_edges will hold the edges of all the bins excluding -inf and +inf. 2 more bins will be formed from the -inf to 1st bin_edge and from the last bin_edge to +inf.  Example: bin_edges - [-3, 0, 3] bins will be - [-inf, -3], [-3, 0], [0, 3], [3, +inf] So always the bin count == len(bin_edges) + 1  # noqa: E501

        :return: The bin_edges of this V2NumericalAggregate.  # noqa: E501
        :rtype: list[float]
        """
        return self._bin_edges

    @bin_edges.setter
    def bin_edges(self, bin_edges):
        """Sets the bin_edges of this V2NumericalAggregate.

        Data points for the window are binned before calculating some metrics. bin_edges will hold the edges of all the bins excluding -inf and +inf. 2 more bins will be formed from the -inf to 1st bin_edge and from the last bin_edge to +inf.  Example: bin_edges - [-3, 0, 3] bins will be - [-inf, -3], [-3, 0], [0, 3], [3, +inf] So always the bin count == len(bin_edges) + 1  # noqa: E501

        :param bin_edges: The bin_edges of this V2NumericalAggregate.  # noqa: E501
        :type bin_edges: list[float]
        """

        self._bin_edges = bin_edges

    @property
    def bin_count(self):
        """Gets the bin_count of this V2NumericalAggregate.  # noqa: E501

        Count of data points fall in to each bin in the order of the bins.  Let's assume bin_edges are [p,q,...,r,s] The 1st count will represent the count of the [-inf, p] bin The last bin will represent the count of the [s, +inf] bin  # noqa: E501

        :return: The bin_count of this V2NumericalAggregate.  # noqa: E501
        :rtype: list[int]
        """
        return self._bin_count

    @bin_count.setter
    def bin_count(self, bin_count):
        """Sets the bin_count of this V2NumericalAggregate.

        Count of data points fall in to each bin in the order of the bins.  Let's assume bin_edges are [p,q,...,r,s] The 1st count will represent the count of the [-inf, p] bin The last bin will represent the count of the [s, +inf] bin  # noqa: E501

        :param bin_count: The bin_count of this V2NumericalAggregate.  # noqa: E501
        :type bin_count: list[int]
        """

        self._bin_count = bin_count

    @property
    def mean(self):
        """Gets the mean of this V2NumericalAggregate.  # noqa: E501

        Mean of the data for the aggregated window.  # noqa: E501

        :return: The mean of this V2NumericalAggregate.  # noqa: E501
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this V2NumericalAggregate.

        Mean of the data for the aggregated window.  # noqa: E501

        :param mean: The mean of this V2NumericalAggregate.  # noqa: E501
        :type mean: float
        """

        self._mean = mean

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this V2NumericalAggregate.  # noqa: E501

        Standard deviation of the data for the aggregated window.  # noqa: E501

        :return: The standard_deviation of this V2NumericalAggregate.  # noqa: E501
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this V2NumericalAggregate.

        Standard deviation of the data for the aggregated window.  # noqa: E501

        :param standard_deviation: The standard_deviation of this V2NumericalAggregate.  # noqa: E501
        :type standard_deviation: float
        """

        self._standard_deviation = standard_deviation

    @property
    def min(self):
        """Gets the min of this V2NumericalAggregate.  # noqa: E501

        Minimum data point of the aggregated window.  # noqa: E501

        :return: The min of this V2NumericalAggregate.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this V2NumericalAggregate.

        Minimum data point of the aggregated window.  # noqa: E501

        :param min: The min of this V2NumericalAggregate.  # noqa: E501
        :type min: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this V2NumericalAggregate.  # noqa: E501

        Maximum data point of the aggregated window.  # noqa: E501

        :return: The max of this V2NumericalAggregate.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this V2NumericalAggregate.

        Maximum data point of the aggregated window.  # noqa: E501

        :param max: The max of this V2NumericalAggregate.  # noqa: E501
        :type max: float
        """

        self._max = max

    @property
    def sum(self):
        """Gets the sum of this V2NumericalAggregate.  # noqa: E501

        Sum of all values in column.  # noqa: E501

        :return: The sum of this V2NumericalAggregate.  # noqa: E501
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this V2NumericalAggregate.

        Sum of all values in column.  # noqa: E501

        :param sum: The sum of this V2NumericalAggregate.  # noqa: E501
        :type sum: float
        """

        self._sum = sum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2NumericalAggregate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2NumericalAggregate):
            return True

        return self.to_dict() != other.to_dict()
