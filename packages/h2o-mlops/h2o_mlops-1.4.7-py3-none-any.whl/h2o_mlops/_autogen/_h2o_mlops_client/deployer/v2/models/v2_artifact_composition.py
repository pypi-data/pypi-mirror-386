# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2ArtifactComposition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deployable_artifact_type': 'V2DeployableArtifactType',
        'artifact_processor': 'V2ArtifactProcessor',
        'model_type': 'V2ModelType',
        'runtime': 'V2Runtime'
    }

    attribute_map = {
        'deployable_artifact_type': 'deployableArtifactType',
        'artifact_processor': 'artifactProcessor',
        'model_type': 'modelType',
        'runtime': 'runtime'
    }

    def __init__(self, deployable_artifact_type=None, artifact_processor=None, model_type=None, runtime=None, local_vars_configuration=None):  # noqa: E501
        """V2ArtifactComposition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deployable_artifact_type = None
        self._artifact_processor = None
        self._model_type = None
        self._runtime = None
        self.discriminator = None

        if deployable_artifact_type is not None:
            self.deployable_artifact_type = deployable_artifact_type
        if artifact_processor is not None:
            self.artifact_processor = artifact_processor
        if model_type is not None:
            self.model_type = model_type
        if runtime is not None:
            self.runtime = runtime

    @property
    def deployable_artifact_type(self):
        """Gets the deployable_artifact_type of this V2ArtifactComposition.  # noqa: E501


        :return: The deployable_artifact_type of this V2ArtifactComposition.  # noqa: E501
        :rtype: V2DeployableArtifactType
        """
        return self._deployable_artifact_type

    @deployable_artifact_type.setter
    def deployable_artifact_type(self, deployable_artifact_type):
        """Sets the deployable_artifact_type of this V2ArtifactComposition.


        :param deployable_artifact_type: The deployable_artifact_type of this V2ArtifactComposition.  # noqa: E501
        :type deployable_artifact_type: V2DeployableArtifactType
        """

        self._deployable_artifact_type = deployable_artifact_type

    @property
    def artifact_processor(self):
        """Gets the artifact_processor of this V2ArtifactComposition.  # noqa: E501


        :return: The artifact_processor of this V2ArtifactComposition.  # noqa: E501
        :rtype: V2ArtifactProcessor
        """
        return self._artifact_processor

    @artifact_processor.setter
    def artifact_processor(self, artifact_processor):
        """Sets the artifact_processor of this V2ArtifactComposition.


        :param artifact_processor: The artifact_processor of this V2ArtifactComposition.  # noqa: E501
        :type artifact_processor: V2ArtifactProcessor
        """

        self._artifact_processor = artifact_processor

    @property
    def model_type(self):
        """Gets the model_type of this V2ArtifactComposition.  # noqa: E501


        :return: The model_type of this V2ArtifactComposition.  # noqa: E501
        :rtype: V2ModelType
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this V2ArtifactComposition.


        :param model_type: The model_type of this V2ArtifactComposition.  # noqa: E501
        :type model_type: V2ModelType
        """

        self._model_type = model_type

    @property
    def runtime(self):
        """Gets the runtime of this V2ArtifactComposition.  # noqa: E501


        :return: The runtime of this V2ArtifactComposition.  # noqa: E501
        :rtype: V2Runtime
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this V2ArtifactComposition.


        :param runtime: The runtime of this V2ArtifactComposition.  # noqa: E501
        :type runtime: V2Runtime
        """

        self._runtime = runtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2ArtifactComposition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2ArtifactComposition):
            return True

        return self.to_dict() != other.to_dict()
