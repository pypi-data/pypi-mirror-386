# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2MonitoringOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'columns': 'list[V2Column]',
        'baseline_aggregations': 'list[V2BaselineAggregation]',
        'baseline_source': 'V2BaselineSource',
        'timestamp_column': 'str',
        'kafka_topic': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'columns': 'columns',
        'baseline_aggregations': 'baselineAggregations',
        'baseline_source': 'baselineSource',
        'timestamp_column': 'timestampColumn',
        'kafka_topic': 'kafkaTopic'
    }

    def __init__(self, enabled=None, columns=None, baseline_aggregations=None, baseline_source=None, timestamp_column=None, kafka_topic=None, local_vars_configuration=None):  # noqa: E501
        """V2MonitoringOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._columns = None
        self._baseline_aggregations = None
        self._baseline_source = None
        self._timestamp_column = None
        self._kafka_topic = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if columns is not None:
            self.columns = columns
        if baseline_aggregations is not None:
            self.baseline_aggregations = baseline_aggregations
        if baseline_source is not None:
            self.baseline_source = baseline_source
        if timestamp_column is not None:
            self.timestamp_column = timestamp_column
        if kafka_topic is not None:
            self.kafka_topic = kafka_topic

    @property
    def enabled(self):
        """Gets the enabled of this V2MonitoringOptions.  # noqa: E501


        :return: The enabled of this V2MonitoringOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this V2MonitoringOptions.


        :param enabled: The enabled of this V2MonitoringOptions.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def columns(self):
        """Gets the columns of this V2MonitoringOptions.  # noqa: E501

        List of Columns on which aggregations will be performed.  # noqa: E501

        :return: The columns of this V2MonitoringOptions.  # noqa: E501
        :rtype: list[V2Column]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this V2MonitoringOptions.

        List of Columns on which aggregations will be performed.  # noqa: E501

        :param columns: The columns of this V2MonitoringOptions.  # noqa: E501
        :type columns: list[V2Column]
        """

        self._columns = columns

    @property
    def baseline_aggregations(self):
        """Gets the baseline_aggregations of this V2MonitoringOptions.  # noqa: E501

        Baseline aggregation data.  # noqa: E501

        :return: The baseline_aggregations of this V2MonitoringOptions.  # noqa: E501
        :rtype: list[V2BaselineAggregation]
        """
        return self._baseline_aggregations

    @baseline_aggregations.setter
    def baseline_aggregations(self, baseline_aggregations):
        """Sets the baseline_aggregations of this V2MonitoringOptions.

        Baseline aggregation data.  # noqa: E501

        :param baseline_aggregations: The baseline_aggregations of this V2MonitoringOptions.  # noqa: E501
        :type baseline_aggregations: list[V2BaselineAggregation]
        """

        self._baseline_aggregations = baseline_aggregations

    @property
    def baseline_source(self):
        """Gets the baseline_source of this V2MonitoringOptions.  # noqa: E501


        :return: The baseline_source of this V2MonitoringOptions.  # noqa: E501
        :rtype: V2BaselineSource
        """
        return self._baseline_source

    @baseline_source.setter
    def baseline_source(self, baseline_source):
        """Sets the baseline_source of this V2MonitoringOptions.


        :param baseline_source: The baseline_source of this V2MonitoringOptions.  # noqa: E501
        :type baseline_source: V2BaselineSource
        """

        self._baseline_source = baseline_source

    @property
    def timestamp_column(self):
        """Gets the timestamp_column of this V2MonitoringOptions.  # noqa: E501


        :return: The timestamp_column of this V2MonitoringOptions.  # noqa: E501
        :rtype: str
        """
        return self._timestamp_column

    @timestamp_column.setter
    def timestamp_column(self, timestamp_column):
        """Sets the timestamp_column of this V2MonitoringOptions.


        :param timestamp_column: The timestamp_column of this V2MonitoringOptions.  # noqa: E501
        :type timestamp_column: str
        """

        self._timestamp_column = timestamp_column

    @property
    def kafka_topic(self):
        """Gets the kafka_topic of this V2MonitoringOptions.  # noqa: E501

        Kafka topic where raw data will be send. If not present global value will be used.  # noqa: E501

        :return: The kafka_topic of this V2MonitoringOptions.  # noqa: E501
        :rtype: str
        """
        return self._kafka_topic

    @kafka_topic.setter
    def kafka_topic(self, kafka_topic):
        """Sets the kafka_topic of this V2MonitoringOptions.

        Kafka topic where raw data will be send. If not present global value will be used.  # noqa: E501

        :param kafka_topic: The kafka_topic of this V2MonitoringOptions.  # noqa: E501
        :type kafka_topic: str
        """

        self._kafka_topic = kafka_topic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2MonitoringOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2MonitoringOptions):
            return True

        return self.to_dict() != other.to_dict()
