# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from _h2o_mlops_client.deployer.v2.api_client import ApiClient
from _h2o_mlops_client.deployer.v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DeploymentServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_deployment(self, parent, deployment, **kwargs):  # noqa: E501
        """Creates a deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_deployment(parent, deployment, async_req=True)
        >>> result = thread.get()

        :param parent: Required. The resource name of the workspace to create deployment in. Format: `workspaces/{workspace}` (required)
        :type parent: str
        :param deployment: Required. The Deployment resource to create. (required)
        :type deployment: V2Deployment
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2CreateDeploymentResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_deployment_with_http_info(parent, deployment, **kwargs)  # noqa: E501

    def create_deployment_with_http_info(self, parent, deployment, **kwargs):  # noqa: E501
        """Creates a deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_deployment_with_http_info(parent, deployment, async_req=True)
        >>> result = thread.get()

        :param parent: Required. The resource name of the workspace to create deployment in. Format: `workspaces/{workspace}` (required)
        :type parent: str
        :param deployment: Required. The Deployment resource to create. (required)
        :type deployment: V2Deployment
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2CreateDeploymentResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'parent',
            'deployment'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_deployment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent' is set
        if self.api_client.client_side_validation and ('parent' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent` when calling `create_deployment`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if self.api_client.client_side_validation and ('deployment' not in local_var_params or  # noqa: E501
                                                        local_var_params['deployment'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deployment` when calling `create_deployment`")  # noqa: E501

        if self.api_client.client_side_validation and 'parent' in local_var_params and not re.search(r'workspaces\/[^\/]+', local_var_params['parent']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `parent` when calling `create_deployment`, must conform to the pattern `/workspaces\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'parent' in local_var_params:
            path_params['parent'] = local_var_params['parent']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'deployment' in local_var_params:
            body_params = local_var_params['deployment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{parent}/deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2CreateDeploymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_deployment(self, name, **kwargs):  # noqa: E501
        """Deletes a deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_deployment(name, async_req=True)
        >>> result = thread.get()

        :param name: Required. Deployment resource name. Format: workspaces/{workspace}/deployments/{deployment} (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_deployment_with_http_info(name, **kwargs)  # noqa: E501

    def delete_deployment_with_http_info(self, name, **kwargs):  # noqa: E501
        """Deletes a deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_deployment_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param name: Required. Deployment resource name. Format: workspaces/{workspace}/deployments/{deployment} (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_deployment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `delete_deployment`")  # noqa: E501

        if self.api_client.client_side_validation and 'name' in local_var_params and not re.search(r'workspaces\/[^\/]+\/deployments\/[^\/]+', local_var_params['name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `name` when calling `delete_deployment`, must conform to the pattern `/workspaces\/[^\/]+\/deployments\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_deployment(self, name_1, **kwargs):  # noqa: E501
        """Retrieves a single deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment(name_1, async_req=True)
        >>> result = thread.get()

        :param name_1: The name of the deployment to get, in the form: \"workspaces/{workspace}/deployment/{deployment}\" (required)
        :type name_1: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2GetDeploymentResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_deployment_with_http_info(name_1, **kwargs)  # noqa: E501

    def get_deployment_with_http_info(self, name_1, **kwargs):  # noqa: E501
        """Retrieves a single deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_with_http_info(name_1, async_req=True)
        >>> result = thread.get()

        :param name_1: The name of the deployment to get, in the form: \"workspaces/{workspace}/deployment/{deployment}\" (required)
        :type name_1: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2GetDeploymentResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'name_1'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name_1' is set
        if self.api_client.client_side_validation and ('name_1' not in local_var_params or  # noqa: E501
                                                        local_var_params['name_1'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name_1` when calling `get_deployment`")  # noqa: E501

        if self.api_client.client_side_validation and 'name_1' in local_var_params and not re.search(r'workspaces\/[^\/]+\/deployments\/[^\/]+', local_var_params['name_1']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `name_1` when calling `get_deployment`, must conform to the pattern `/workspaces\/[^\/]+\/deployments\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'name_1' in local_var_params:
            path_params['name_1'] = local_var_params['name_1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{name_1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2GetDeploymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_deployments(self, parent, **kwargs):  # noqa: E501
        """Returns a collection of Deployments within a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments(parent, async_req=True)
        >>> result = thread.get()

        :param parent: Required. The resource name of the workspace to list Deployments from. Format: `workspaces/{workspace}` Passing dash `-` as a workspace will list deployments across all workspaces that the user has access to. (required)
        :type parent: str
        :param page_size: Maximum number of items server should return in the response. When set to 0 server will decide how many items to return. Server can decide to return less items then specified.
        :type page_size: int
        :param page_token: Use value returned in next_page_token to retrieve next page of results.
        :type page_token: str
        :param filter: When used, server will only return deployment that match the filter. Attempts to generally implement AIP-160 (https://aip.dev/160) specification.  Supported fields:   * display_name   * description   * create_time   * update_time   * creator  Examples: display_name = 'Some display' OR create_time <= 2023-12-30T23:59:43Z create_time >= timestamp('2023-12-30T23:59:43Z') AND create_time <= timestamp('2024-03-20T08:00:00Z') NOT(display_name = 'Some display name' OR create_time <= timestamp('2023-12-30T23:59:43Z'))
        :type filter: str
        :param order_by: When used, server will return deployments ordered by the specified fields. Attempts to implement AIP-132 (https://aip.dev/132#ordering). Supported fields are the ones supported by filter.
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2ListDeploymentsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.list_deployments_with_http_info(parent, **kwargs)  # noqa: E501

    def list_deployments_with_http_info(self, parent, **kwargs):  # noqa: E501
        """Returns a collection of Deployments within a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_with_http_info(parent, async_req=True)
        >>> result = thread.get()

        :param parent: Required. The resource name of the workspace to list Deployments from. Format: `workspaces/{workspace}` Passing dash `-` as a workspace will list deployments across all workspaces that the user has access to. (required)
        :type parent: str
        :param page_size: Maximum number of items server should return in the response. When set to 0 server will decide how many items to return. Server can decide to return less items then specified.
        :type page_size: int
        :param page_token: Use value returned in next_page_token to retrieve next page of results.
        :type page_token: str
        :param filter: When used, server will only return deployment that match the filter. Attempts to generally implement AIP-160 (https://aip.dev/160) specification.  Supported fields:   * display_name   * description   * create_time   * update_time   * creator  Examples: display_name = 'Some display' OR create_time <= 2023-12-30T23:59:43Z create_time >= timestamp('2023-12-30T23:59:43Z') AND create_time <= timestamp('2024-03-20T08:00:00Z') NOT(display_name = 'Some display name' OR create_time <= timestamp('2023-12-30T23:59:43Z'))
        :type filter: str
        :param order_by: When used, server will return deployments ordered by the specified fields. Attempts to implement AIP-132 (https://aip.dev/132#ordering). Supported fields are the ones supported by filter.
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2ListDeploymentsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'parent',
            'page_size',
            'page_token',
            'filter',
            'order_by'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent' is set
        if self.api_client.client_side_validation and ('parent' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent` when calling `list_deployments`")  # noqa: E501

        if self.api_client.client_side_validation and 'parent' in local_var_params and not re.search(r'workspaces\/[^\/]+', local_var_params['parent']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `parent` when calling `list_deployments`, must conform to the pattern `/workspaces\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'parent' in local_var_params:
            path_params['parent'] = local_var_params['parent']  # noqa: E501

        query_params = []
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('pageToken', local_var_params['page_token']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('orderBy', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{parent}/deployments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2ListDeploymentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def retry_deployment(self, name, body, **kwargs):  # noqa: E501
        """Retry failed deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retry_deployment(name, body, async_req=True)
        >>> result = thread.get()

        :param name: Required. Deployment resource name. Format: workspaces/{workspace}/deployments/{deployment} (required)
        :type name: str
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.retry_deployment_with_http_info(name, body, **kwargs)  # noqa: E501

    def retry_deployment_with_http_info(self, name, body, **kwargs):  # noqa: E501
        """Retry failed deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retry_deployment_with_http_info(name, body, async_req=True)
        >>> result = thread.get()

        :param name: Required. Deployment resource name. Format: workspaces/{workspace}/deployments/{deployment} (required)
        :type name: str
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'name',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_deployment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `retry_deployment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `retry_deployment`")  # noqa: E501

        if self.api_client.client_side_validation and 'name' in local_var_params and not re.search(r'workspaces\/[^\/]+\/deployments\/[^\/]+', local_var_params['name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `name` when calling `retry_deployment`, must conform to the pattern `/workspaces\/[^\/]+\/deployments\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{name}:retry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_deployment(self, deployment_name, deployment, **kwargs):  # noqa: E501
        """Updates a deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_deployment(deployment_name, deployment, async_req=True)
        >>> result = thread.get()

        :param deployment_name: Resource name. (required)
        :type deployment_name: str
        :param deployment: (required)
        :type deployment: TheDeploymentToUpdate
        :param update_mask: The fields to update.  An empty value, or value of `*`, implies all updatable fields should apply.  The following fields are supported: `deployment.kubernetes_resource_spec` `deployment.kubernetes_config_shortcut` `deployment.security` `deployment.monitoring` `deployment.cors` `deployment.single_deployment.deployment_environment_variables` `deployment.shadow_deployment.primary_element.deployment_environment_variables` `deployment.shadow_deployment.secondary_element.deployment_environment_variables` `deployment.split_deployment.split_elements.deployment_environment_variables` `deployment.single_deployment.vpa_spec.cpu` `deployment.single_deployment.vpa_spec.memory` `deployment.shadow_deployment.primary_element.vpa_spec.cpu` `deployment.shadow_deployment.primary_element.vpa_spec.memory` `deployment.shadow_deployment.secondary_element.vpa_spec.cpu` `deployment.shadow_deployment.secondary_element.vpa_spec.memory` `deployment.split_deployment.split_elements.vpa_spec.cpu` `deployment.split_deployment.split_elements.vpa_spec.memory` Allowed security updates are: - no security -> plain_text/hash/token_auth - plain_text -> hash - hash -> plain_text - old plain_text -> new plain_text - old hash -> new hash - plain_text -> token_auth - hash -> token_auth - token_auth -> plain_text - token_auth -> hash All other cases would be ignored and updated passphrase hash must not be blank.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2UpdateDeploymentResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.update_deployment_with_http_info(deployment_name, deployment, **kwargs)  # noqa: E501

    def update_deployment_with_http_info(self, deployment_name, deployment, **kwargs):  # noqa: E501
        """Updates a deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_deployment_with_http_info(deployment_name, deployment, async_req=True)
        >>> result = thread.get()

        :param deployment_name: Resource name. (required)
        :type deployment_name: str
        :param deployment: (required)
        :type deployment: TheDeploymentToUpdate
        :param update_mask: The fields to update.  An empty value, or value of `*`, implies all updatable fields should apply.  The following fields are supported: `deployment.kubernetes_resource_spec` `deployment.kubernetes_config_shortcut` `deployment.security` `deployment.monitoring` `deployment.cors` `deployment.single_deployment.deployment_environment_variables` `deployment.shadow_deployment.primary_element.deployment_environment_variables` `deployment.shadow_deployment.secondary_element.deployment_environment_variables` `deployment.split_deployment.split_elements.deployment_environment_variables` `deployment.single_deployment.vpa_spec.cpu` `deployment.single_deployment.vpa_spec.memory` `deployment.shadow_deployment.primary_element.vpa_spec.cpu` `deployment.shadow_deployment.primary_element.vpa_spec.memory` `deployment.shadow_deployment.secondary_element.vpa_spec.cpu` `deployment.shadow_deployment.secondary_element.vpa_spec.memory` `deployment.split_deployment.split_elements.vpa_spec.cpu` `deployment.split_deployment.split_elements.vpa_spec.memory` Allowed security updates are: - no security -> plain_text/hash/token_auth - plain_text -> hash - hash -> plain_text - old plain_text -> new plain_text - old hash -> new hash - plain_text -> token_auth - hash -> token_auth - token_auth -> plain_text - token_auth -> hash All other cases would be ignored and updated passphrase hash must not be blank.
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2UpdateDeploymentResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'deployment_name',
            'deployment',
            'update_mask'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_deployment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if self.api_client.client_side_validation and ('deployment_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['deployment_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deployment_name` when calling `update_deployment`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if self.api_client.client_side_validation and ('deployment' not in local_var_params or  # noqa: E501
                                                        local_var_params['deployment'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deployment` when calling `update_deployment`")  # noqa: E501

        if self.api_client.client_side_validation and 'deployment_name' in local_var_params and not re.search(r'workspaces\/[^\/]+\/deployments\/[^\/]+', local_var_params['deployment_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `deployment_name` when calling `update_deployment`, must conform to the pattern `/workspaces\/[^\/]+\/deployments\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'deployment_name' in local_var_params:
            path_params['deployment.name'] = local_var_params['deployment_name']  # noqa: E501

        query_params = []
        if 'update_mask' in local_var_params and local_var_params['update_mask'] is not None:  # noqa: E501
            query_params.append(('updateMask', local_var_params['update_mask']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'deployment' in local_var_params:
            body_params = local_var_params['deployment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{deployment.name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2UpdateDeploymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
