# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2ShadowElement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deployment_composition': 'V2DeploymentComposition',
        'kubernetes_resource_spec': 'V2KubernetesResourceSpec',
        'kubernetes_config_shortcut': 'V2KubernetesConfigShortcut',
        'runtime_environment_variables': 'dict(str, str)',
        'vpa_spec': 'V2VpaResourceSpec',
        'pod_disruption_budget': 'V2PodDisruptionBudgetSpec'
    }

    attribute_map = {
        'deployment_composition': 'deploymentComposition',
        'kubernetes_resource_spec': 'kubernetesResourceSpec',
        'kubernetes_config_shortcut': 'kubernetesConfigShortcut',
        'runtime_environment_variables': 'runtimeEnvironmentVariables',
        'vpa_spec': 'vpaSpec',
        'pod_disruption_budget': 'podDisruptionBudget'
    }

    def __init__(self, deployment_composition=None, kubernetes_resource_spec=None, kubernetes_config_shortcut=None, runtime_environment_variables=None, vpa_spec=None, pod_disruption_budget=None, local_vars_configuration=None):  # noqa: E501
        """V2ShadowElement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deployment_composition = None
        self._kubernetes_resource_spec = None
        self._kubernetes_config_shortcut = None
        self._runtime_environment_variables = None
        self._vpa_spec = None
        self._pod_disruption_budget = None
        self.discriminator = None

        self.deployment_composition = deployment_composition
        if kubernetes_resource_spec is not None:
            self.kubernetes_resource_spec = kubernetes_resource_spec
        if kubernetes_config_shortcut is not None:
            self.kubernetes_config_shortcut = kubernetes_config_shortcut
        if runtime_environment_variables is not None:
            self.runtime_environment_variables = runtime_environment_variables
        if vpa_spec is not None:
            self.vpa_spec = vpa_spec
        if pod_disruption_budget is not None:
            self.pod_disruption_budget = pod_disruption_budget

    @property
    def deployment_composition(self):
        """Gets the deployment_composition of this V2ShadowElement.  # noqa: E501


        :return: The deployment_composition of this V2ShadowElement.  # noqa: E501
        :rtype: V2DeploymentComposition
        """
        return self._deployment_composition

    @deployment_composition.setter
    def deployment_composition(self, deployment_composition):
        """Sets the deployment_composition of this V2ShadowElement.


        :param deployment_composition: The deployment_composition of this V2ShadowElement.  # noqa: E501
        :type deployment_composition: V2DeploymentComposition
        """
        if self.local_vars_configuration.client_side_validation and deployment_composition is None:  # noqa: E501
            raise ValueError("Invalid value for `deployment_composition`, must not be `None`")  # noqa: E501

        self._deployment_composition = deployment_composition

    @property
    def kubernetes_resource_spec(self):
        """Gets the kubernetes_resource_spec of this V2ShadowElement.  # noqa: E501


        :return: The kubernetes_resource_spec of this V2ShadowElement.  # noqa: E501
        :rtype: V2KubernetesResourceSpec
        """
        return self._kubernetes_resource_spec

    @kubernetes_resource_spec.setter
    def kubernetes_resource_spec(self, kubernetes_resource_spec):
        """Sets the kubernetes_resource_spec of this V2ShadowElement.


        :param kubernetes_resource_spec: The kubernetes_resource_spec of this V2ShadowElement.  # noqa: E501
        :type kubernetes_resource_spec: V2KubernetesResourceSpec
        """

        self._kubernetes_resource_spec = kubernetes_resource_spec

    @property
    def kubernetes_config_shortcut(self):
        """Gets the kubernetes_config_shortcut of this V2ShadowElement.  # noqa: E501


        :return: The kubernetes_config_shortcut of this V2ShadowElement.  # noqa: E501
        :rtype: V2KubernetesConfigShortcut
        """
        return self._kubernetes_config_shortcut

    @kubernetes_config_shortcut.setter
    def kubernetes_config_shortcut(self, kubernetes_config_shortcut):
        """Sets the kubernetes_config_shortcut of this V2ShadowElement.


        :param kubernetes_config_shortcut: The kubernetes_config_shortcut of this V2ShadowElement.  # noqa: E501
        :type kubernetes_config_shortcut: V2KubernetesConfigShortcut
        """

        self._kubernetes_config_shortcut = kubernetes_config_shortcut

    @property
    def runtime_environment_variables(self):
        """Gets the runtime_environment_variables of this V2ShadowElement.  # noqa: E501

        Optional. Runtime environment variables to pass to the deployment. If predefined environment variables are used, they will not be overwritten.  # noqa: E501

        :return: The runtime_environment_variables of this V2ShadowElement.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._runtime_environment_variables

    @runtime_environment_variables.setter
    def runtime_environment_variables(self, runtime_environment_variables):
        """Sets the runtime_environment_variables of this V2ShadowElement.

        Optional. Runtime environment variables to pass to the deployment. If predefined environment variables are used, they will not be overwritten.  # noqa: E501

        :param runtime_environment_variables: The runtime_environment_variables of this V2ShadowElement.  # noqa: E501
        :type runtime_environment_variables: dict(str, str)
        """

        self._runtime_environment_variables = runtime_environment_variables

    @property
    def vpa_spec(self):
        """Gets the vpa_spec of this V2ShadowElement.  # noqa: E501


        :return: The vpa_spec of this V2ShadowElement.  # noqa: E501
        :rtype: V2VpaResourceSpec
        """
        return self._vpa_spec

    @vpa_spec.setter
    def vpa_spec(self, vpa_spec):
        """Sets the vpa_spec of this V2ShadowElement.


        :param vpa_spec: The vpa_spec of this V2ShadowElement.  # noqa: E501
        :type vpa_spec: V2VpaResourceSpec
        """

        self._vpa_spec = vpa_spec

    @property
    def pod_disruption_budget(self):
        """Gets the pod_disruption_budget of this V2ShadowElement.  # noqa: E501


        :return: The pod_disruption_budget of this V2ShadowElement.  # noqa: E501
        :rtype: V2PodDisruptionBudgetSpec
        """
        return self._pod_disruption_budget

    @pod_disruption_budget.setter
    def pod_disruption_budget(self, pod_disruption_budget):
        """Sets the pod_disruption_budget of this V2ShadowElement.


        :param pod_disruption_budget: The pod_disruption_budget of this V2ShadowElement.  # noqa: E501
        :type pod_disruption_budget: V2PodDisruptionBudgetSpec
        """

        self._pod_disruption_budget = pod_disruption_budget

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2ShadowElement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2ShadowElement):
            return True

        return self.to_dict() != other.to_dict()
