# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2SecurityOptionType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'disable_security_type': 'object',
        'hash_algorithm': 'AuthenticationPassphraseHashAlgorithm',
        'authorization_protocol': 'AuthorizationAccessTokenAuthorizationProtocolSecurityType',
        'display_name': 'str'
    }

    attribute_map = {
        'disable_security_type': 'disableSecurityType',
        'hash_algorithm': 'hashAlgorithm',
        'authorization_protocol': 'authorizationProtocol',
        'display_name': 'displayName'
    }

    def __init__(self, disable_security_type=None, hash_algorithm=None, authorization_protocol=None, display_name=None, local_vars_configuration=None):  # noqa: E501
        """V2SecurityOptionType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._disable_security_type = None
        self._hash_algorithm = None
        self._authorization_protocol = None
        self._display_name = None
        self.discriminator = None

        if disable_security_type is not None:
            self.disable_security_type = disable_security_type
        if hash_algorithm is not None:
            self.hash_algorithm = hash_algorithm
        if authorization_protocol is not None:
            self.authorization_protocol = authorization_protocol
        if display_name is not None:
            self.display_name = display_name

    @property
    def disable_security_type(self):
        """Gets the disable_security_type of this V2SecurityOptionType.  # noqa: E501

        Disables security.  # noqa: E501

        :return: The disable_security_type of this V2SecurityOptionType.  # noqa: E501
        :rtype: object
        """
        return self._disable_security_type

    @disable_security_type.setter
    def disable_security_type(self, disable_security_type):
        """Sets the disable_security_type of this V2SecurityOptionType.

        Disables security.  # noqa: E501

        :param disable_security_type: The disable_security_type of this V2SecurityOptionType.  # noqa: E501
        :type disable_security_type: object
        """

        self._disable_security_type = disable_security_type

    @property
    def hash_algorithm(self):
        """Gets the hash_algorithm of this V2SecurityOptionType.  # noqa: E501


        :return: The hash_algorithm of this V2SecurityOptionType.  # noqa: E501
        :rtype: AuthenticationPassphraseHashAlgorithm
        """
        return self._hash_algorithm

    @hash_algorithm.setter
    def hash_algorithm(self, hash_algorithm):
        """Sets the hash_algorithm of this V2SecurityOptionType.


        :param hash_algorithm: The hash_algorithm of this V2SecurityOptionType.  # noqa: E501
        :type hash_algorithm: AuthenticationPassphraseHashAlgorithm
        """

        self._hash_algorithm = hash_algorithm

    @property
    def authorization_protocol(self):
        """Gets the authorization_protocol of this V2SecurityOptionType.  # noqa: E501


        :return: The authorization_protocol of this V2SecurityOptionType.  # noqa: E501
        :rtype: AuthorizationAccessTokenAuthorizationProtocolSecurityType
        """
        return self._authorization_protocol

    @authorization_protocol.setter
    def authorization_protocol(self, authorization_protocol):
        """Sets the authorization_protocol of this V2SecurityOptionType.


        :param authorization_protocol: The authorization_protocol of this V2SecurityOptionType.  # noqa: E501
        :type authorization_protocol: AuthorizationAccessTokenAuthorizationProtocolSecurityType
        """

        self._authorization_protocol = authorization_protocol

    @property
    def display_name(self):
        """Gets the display_name of this V2SecurityOptionType.  # noqa: E501


        :return: The display_name of this V2SecurityOptionType.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V2SecurityOptionType.


        :param display_name: The display_name of this V2SecurityOptionType.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2SecurityOptionType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2SecurityOptionType):
            return True

        return self.to_dict() != other.to_dict()
