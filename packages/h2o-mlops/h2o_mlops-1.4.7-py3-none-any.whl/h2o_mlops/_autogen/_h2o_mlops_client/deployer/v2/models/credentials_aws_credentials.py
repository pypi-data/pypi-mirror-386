# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class CredentialsAWSCredentials(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token': 'str',
        'secret_token': 'str',
        'region': 'str',
        'endpoint': 'str',
        'role_arn': 'str',
        'role_external_id': 'str',
        'session_token': 'str'
    }

    attribute_map = {
        'access_token': 'accessToken',
        'secret_token': 'secretToken',
        'region': 'region',
        'endpoint': 'endpoint',
        'role_arn': 'roleArn',
        'role_external_id': 'roleExternalId',
        'session_token': 'sessionToken'
    }

    def __init__(self, access_token=None, secret_token=None, region=None, endpoint=None, role_arn=None, role_external_id=None, session_token=None, local_vars_configuration=None):  # noqa: E501
        """CredentialsAWSCredentials - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_token = None
        self._secret_token = None
        self._region = None
        self._endpoint = None
        self._role_arn = None
        self._role_external_id = None
        self._session_token = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if secret_token is not None:
            self.secret_token = secret_token
        if region is not None:
            self.region = region
        if endpoint is not None:
            self.endpoint = endpoint
        if role_arn is not None:
            self.role_arn = role_arn
        if role_external_id is not None:
            self.role_external_id = role_external_id
        if session_token is not None:
            self.session_token = session_token

    @property
    def access_token(self):
        """Gets the access_token of this CredentialsAWSCredentials.  # noqa: E501

        The access token of credentials to use.  # noqa: E501

        :return: The access_token of this CredentialsAWSCredentials.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this CredentialsAWSCredentials.

        The access token of credentials to use.  # noqa: E501

        :param access_token: The access_token of this CredentialsAWSCredentials.  # noqa: E501
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def secret_token(self):
        """Gets the secret_token of this CredentialsAWSCredentials.  # noqa: E501

        The secret for the credentials being used.  # noqa: E501

        :return: The secret_token of this CredentialsAWSCredentials.  # noqa: E501
        :rtype: str
        """
        return self._secret_token

    @secret_token.setter
    def secret_token(self, secret_token):
        """Sets the secret_token of this CredentialsAWSCredentials.

        The secret for the credentials being used.  # noqa: E501

        :param secret_token: The secret_token of this CredentialsAWSCredentials.  # noqa: E501
        :type secret_token: str
        """

        self._secret_token = secret_token

    @property
    def region(self):
        """Gets the region of this CredentialsAWSCredentials.  # noqa: E501

        The AWS region to target.  # noqa: E501

        :return: The region of this CredentialsAWSCredentials.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CredentialsAWSCredentials.

        The AWS region to target.  # noqa: E501

        :param region: The region of this CredentialsAWSCredentials.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def endpoint(self):
        """Gets the endpoint of this CredentialsAWSCredentials.  # noqa: E501

        Allows you to specify a custom endpoint for the AWS API.  # noqa: E501

        :return: The endpoint of this CredentialsAWSCredentials.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this CredentialsAWSCredentials.

        Allows you to specify a custom endpoint for the AWS API.  # noqa: E501

        :param endpoint: The endpoint of this CredentialsAWSCredentials.  # noqa: E501
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def role_arn(self):
        """Gets the role_arn of this CredentialsAWSCredentials.  # noqa: E501

        A role ARN to assume.  # noqa: E501

        :return: The role_arn of this CredentialsAWSCredentials.  # noqa: E501
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CredentialsAWSCredentials.

        A role ARN to assume.  # noqa: E501

        :param role_arn: The role_arn of this CredentialsAWSCredentials.  # noqa: E501
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def role_external_id(self):
        """Gets the role_external_id of this CredentialsAWSCredentials.  # noqa: E501

        An external ID to provide when assuming a role.  # noqa: E501

        :return: The role_external_id of this CredentialsAWSCredentials.  # noqa: E501
        :rtype: str
        """
        return self._role_external_id

    @role_external_id.setter
    def role_external_id(self, role_external_id):
        """Sets the role_external_id of this CredentialsAWSCredentials.

        An external ID to provide when assuming a role.  # noqa: E501

        :param role_external_id: The role_external_id of this CredentialsAWSCredentials.  # noqa: E501
        :type role_external_id: str
        """

        self._role_external_id = role_external_id

    @property
    def session_token(self):
        """Gets the session_token of this CredentialsAWSCredentials.  # noqa: E501

        The token for the credentials being used, required when using short term credentials.  # noqa: E501

        :return: The session_token of this CredentialsAWSCredentials.  # noqa: E501
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this CredentialsAWSCredentials.

        The token for the credentials being used, required when using short term credentials.  # noqa: E501

        :param session_token: The session_token of this CredentialsAWSCredentials.  # noqa: E501
        :type session_token: str
        """

        self._session_token = session_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialsAWSCredentials):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CredentialsAWSCredentials):
            return True

        return self.to_dict() != other.to_dict()
