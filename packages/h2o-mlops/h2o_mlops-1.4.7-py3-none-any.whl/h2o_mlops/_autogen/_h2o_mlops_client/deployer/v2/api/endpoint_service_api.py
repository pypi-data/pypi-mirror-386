# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from _h2o_mlops_client.deployer.v2.api_client import ApiClient
from _h2o_mlops_client.deployer.v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EndpointServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_endpoint(self, parent, endpoint, **kwargs):  # noqa: E501
        """Creates an endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_endpoint(parent, endpoint, async_req=True)
        >>> result = thread.get()

        :param parent: The parent name where the endpoint is to be created, in the form: \"workspaces/{workspace}\" (required)
        :type parent: str
        :param endpoint: The endpoint to create. (required)
        :type endpoint: V2Endpoint
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2CreateEndpointResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_endpoint_with_http_info(parent, endpoint, **kwargs)  # noqa: E501

    def create_endpoint_with_http_info(self, parent, endpoint, **kwargs):  # noqa: E501
        """Creates an endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_endpoint_with_http_info(parent, endpoint, async_req=True)
        >>> result = thread.get()

        :param parent: The parent name where the endpoint is to be created, in the form: \"workspaces/{workspace}\" (required)
        :type parent: str
        :param endpoint: The endpoint to create. (required)
        :type endpoint: V2Endpoint
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2CreateEndpointResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'parent',
            'endpoint'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_endpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent' is set
        if self.api_client.client_side_validation and ('parent' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent` when calling `create_endpoint`")  # noqa: E501
        # verify the required parameter 'endpoint' is set
        if self.api_client.client_side_validation and ('endpoint' not in local_var_params or  # noqa: E501
                                                        local_var_params['endpoint'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endpoint` when calling `create_endpoint`")  # noqa: E501

        if self.api_client.client_side_validation and 'parent' in local_var_params and not re.search(r'workspaces\/[^\/]+', local_var_params['parent']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `parent` when calling `create_endpoint`, must conform to the pattern `/workspaces\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'parent' in local_var_params:
            path_params['parent'] = local_var_params['parent']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'endpoint' in local_var_params:
            body_params = local_var_params['endpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{parent}/endpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2CreateEndpointResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_endpoint(self, name_1, **kwargs):  # noqa: E501
        """Deletes an endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_endpoint(name_1, async_req=True)
        >>> result = thread.get()

        :param name_1: The name of the endpoint to delete, in the form: \"workspaces/{workspace}/endpoints/{endpoint}\" (required)
        :type name_1: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_endpoint_with_http_info(name_1, **kwargs)  # noqa: E501

    def delete_endpoint_with_http_info(self, name_1, **kwargs):  # noqa: E501
        """Deletes an endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_endpoint_with_http_info(name_1, async_req=True)
        >>> result = thread.get()

        :param name_1: The name of the endpoint to delete, in the form: \"workspaces/{workspace}/endpoints/{endpoint}\" (required)
        :type name_1: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'name_1'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_endpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name_1' is set
        if self.api_client.client_side_validation and ('name_1' not in local_var_params or  # noqa: E501
                                                        local_var_params['name_1'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name_1` when calling `delete_endpoint`")  # noqa: E501

        if self.api_client.client_side_validation and 'name_1' in local_var_params and not re.search(r'workspaces\/[^\/]+\/endpoints\/[^\/]+', local_var_params['name_1']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `name_1` when calling `delete_endpoint`, must conform to the pattern `/workspaces\/[^\/]+\/endpoints\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'name_1' in local_var_params:
            path_params['name_1'] = local_var_params['name_1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{name_1}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_endpoint(self, name_3, **kwargs):  # noqa: E501
        """Retrieves a single endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_endpoint(name_3, async_req=True)
        >>> result = thread.get()

        :param name_3: The name of the endpoint to get, in the form: \"workspaces/{workspace}/endpoints/{endpointId}\" (required)
        :type name_3: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2GetEndpointResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_endpoint_with_http_info(name_3, **kwargs)  # noqa: E501

    def get_endpoint_with_http_info(self, name_3, **kwargs):  # noqa: E501
        """Retrieves a single endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_endpoint_with_http_info(name_3, async_req=True)
        >>> result = thread.get()

        :param name_3: The name of the endpoint to get, in the form: \"workspaces/{workspace}/endpoints/{endpointId}\" (required)
        :type name_3: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2GetEndpointResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'name_3'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_endpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name_3' is set
        if self.api_client.client_side_validation and ('name_3' not in local_var_params or  # noqa: E501
                                                        local_var_params['name_3'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name_3` when calling `get_endpoint`")  # noqa: E501

        if self.api_client.client_side_validation and 'name_3' in local_var_params and not re.search(r'workspaces\/[^\/]+\/endpoints\/[^\/]+', local_var_params['name_3']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `name_3` when calling `get_endpoint`, must conform to the pattern `/workspaces\/[^\/]+\/endpoints\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'name_3' in local_var_params:
            path_params['name_3'] = local_var_params['name_3']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{name_3}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2GetEndpointResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_endpoints(self, parent, **kwargs):  # noqa: E501
        """Lists endpoints.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_endpoints(parent, async_req=True)
        >>> result = thread.get()

        :param parent: The endpoint's parent name, in the form: \"workspace/{workspace}\" (required)
        :type parent: str
        :param page_size: Optional. The maximum number of results to return. A response's page size may differ at the discretion of the server, especially for the purpose of capping response size.
        :type page_size: int
        :param page_token: Optional. The `next_page_token` value returned from a previous call, used to get the next set of results.
        :type page_token: str
        :param filter: When used, server will only return endpoints that match the filter. Attempts to generally implement AIP-160 (https://aip.dev/160) specification.  Supported fields:   * display_name   * description   * path   * target   * create_time   * update_time  Examples: display_name = 'Some display' OR create_time <= 2023-12-30T23:59:43Z create_time >= timestamp('2023-12-30T23:59:43Z') AND create_time <= timestamp('2024-03-20T08:00:00Z') NOT(display_name = 'Some display name' OR create_time <= timestamp('2023-12-30T23:59:43Z'))
        :type filter: str
        :param order_by: When used, server will return endpoints ordered by the specified fields. Attempts to implement AIP-132 (https://aip.dev/132#ordering). Supported fields are the ones supported by filter.
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2ListEndpointsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.list_endpoints_with_http_info(parent, **kwargs)  # noqa: E501

    def list_endpoints_with_http_info(self, parent, **kwargs):  # noqa: E501
        """Lists endpoints.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_endpoints_with_http_info(parent, async_req=True)
        >>> result = thread.get()

        :param parent: The endpoint's parent name, in the form: \"workspace/{workspace}\" (required)
        :type parent: str
        :param page_size: Optional. The maximum number of results to return. A response's page size may differ at the discretion of the server, especially for the purpose of capping response size.
        :type page_size: int
        :param page_token: Optional. The `next_page_token` value returned from a previous call, used to get the next set of results.
        :type page_token: str
        :param filter: When used, server will only return endpoints that match the filter. Attempts to generally implement AIP-160 (https://aip.dev/160) specification.  Supported fields:   * display_name   * description   * path   * target   * create_time   * update_time  Examples: display_name = 'Some display' OR create_time <= 2023-12-30T23:59:43Z create_time >= timestamp('2023-12-30T23:59:43Z') AND create_time <= timestamp('2024-03-20T08:00:00Z') NOT(display_name = 'Some display name' OR create_time <= timestamp('2023-12-30T23:59:43Z'))
        :type filter: str
        :param order_by: When used, server will return endpoints ordered by the specified fields. Attempts to implement AIP-132 (https://aip.dev/132#ordering). Supported fields are the ones supported by filter.
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2ListEndpointsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'parent',
            'page_size',
            'page_token',
            'filter',
            'order_by'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_endpoints" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent' is set
        if self.api_client.client_side_validation and ('parent' not in local_var_params or  # noqa: E501
                                                        local_var_params['parent'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `parent` when calling `list_endpoints`")  # noqa: E501

        if self.api_client.client_side_validation and 'parent' in local_var_params and not re.search(r'workspaces\/[^\/]+', local_var_params['parent']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `parent` when calling `list_endpoints`, must conform to the pattern `/workspaces\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'parent' in local_var_params:
            path_params['parent'] = local_var_params['parent']  # noqa: E501

        query_params = []
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('pageToken', local_var_params['page_token']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('orderBy', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{parent}/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2ListEndpointsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_endpoint(self, endpoint_name, endpoint, **kwargs):  # noqa: E501
        """Updates an endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_endpoint(endpoint_name, endpoint, async_req=True)
        >>> result = thread.get()

        :param endpoint_name: The resource name of the endpoint, in the form: \"workspaces/{workspace}/endpoints/{endpoint}\" (required)
        :type endpoint_name: str
        :param endpoint: (required)
        :type endpoint: TheEndpointToUpdateWhereTheEndpointSNameFieldIsUsedToIdentifyTheOneToUpdate
        :param update_mask: The fields to update. Allowed field paths are: { \"display_name\", \"description\", \"target\" }
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V2UpdateEndpointResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.update_endpoint_with_http_info(endpoint_name, endpoint, **kwargs)  # noqa: E501

    def update_endpoint_with_http_info(self, endpoint_name, endpoint, **kwargs):  # noqa: E501
        """Updates an endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_endpoint_with_http_info(endpoint_name, endpoint, async_req=True)
        >>> result = thread.get()

        :param endpoint_name: The resource name of the endpoint, in the form: \"workspaces/{workspace}/endpoints/{endpoint}\" (required)
        :type endpoint_name: str
        :param endpoint: (required)
        :type endpoint: TheEndpointToUpdateWhereTheEndpointSNameFieldIsUsedToIdentifyTheOneToUpdate
        :param update_mask: The fields to update. Allowed field paths are: { \"display_name\", \"description\", \"target\" }
        :type update_mask: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V2UpdateEndpointResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'endpoint_name',
            'endpoint',
            'update_mask'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_endpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'endpoint_name' is set
        if self.api_client.client_side_validation and ('endpoint_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['endpoint_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endpoint_name` when calling `update_endpoint`")  # noqa: E501
        # verify the required parameter 'endpoint' is set
        if self.api_client.client_side_validation and ('endpoint' not in local_var_params or  # noqa: E501
                                                        local_var_params['endpoint'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endpoint` when calling `update_endpoint`")  # noqa: E501

        if self.api_client.client_side_validation and 'endpoint_name' in local_var_params and not re.search(r'workspaces\/[^\/]+\/endpoints\/[^\/]+', local_var_params['endpoint_name']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `endpoint_name` when calling `update_endpoint`, must conform to the pattern `/workspaces\/[^\/]+\/endpoints\/[^\/]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'endpoint_name' in local_var_params:
            path_params['endpoint.name'] = local_var_params['endpoint_name']  # noqa: E501

        query_params = []
        if 'update_mask' in local_var_params and local_var_params['update_mask'] is not None:  # noqa: E501
            query_params.append(('updateMask', local_var_params['update_mask']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'endpoint' in local_var_params:
            body_params = local_var_params['endpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/{endpoint.name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2UpdateEndpointResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
