# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2Security(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'passphrase': 'V2AuthenticationPassphrase',
        'token_auth': 'V2AuthorizationAccessToken',
        'disabled_security': 'object',
        'update_time': 'datetime'
    }

    attribute_map = {
        'passphrase': 'passphrase',
        'token_auth': 'tokenAuth',
        'disabled_security': 'disabledSecurity',
        'update_time': 'updateTime'
    }

    def __init__(self, passphrase=None, token_auth=None, disabled_security=None, update_time=None, local_vars_configuration=None):  # noqa: E501
        """V2Security - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._passphrase = None
        self._token_auth = None
        self._disabled_security = None
        self._update_time = None
        self.discriminator = None

        if passphrase is not None:
            self.passphrase = passphrase
        if token_auth is not None:
            self.token_auth = token_auth
        if disabled_security is not None:
            self.disabled_security = disabled_security
        if update_time is not None:
            self.update_time = update_time

    @property
    def passphrase(self):
        """Gets the passphrase of this V2Security.  # noqa: E501


        :return: The passphrase of this V2Security.  # noqa: E501
        :rtype: V2AuthenticationPassphrase
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this V2Security.


        :param passphrase: The passphrase of this V2Security.  # noqa: E501
        :type passphrase: V2AuthenticationPassphrase
        """

        self._passphrase = passphrase

    @property
    def token_auth(self):
        """Gets the token_auth of this V2Security.  # noqa: E501


        :return: The token_auth of this V2Security.  # noqa: E501
        :rtype: V2AuthorizationAccessToken
        """
        return self._token_auth

    @token_auth.setter
    def token_auth(self, token_auth):
        """Sets the token_auth of this V2Security.


        :param token_auth: The token_auth of this V2Security.  # noqa: E501
        :type token_auth: V2AuthorizationAccessToken
        """

        self._token_auth = token_auth

    @property
    def disabled_security(self):
        """Gets the disabled_security of this V2Security.  # noqa: E501

        Disables security. This option should be used with caution as it allows unauthenticated access.  # noqa: E501

        :return: The disabled_security of this V2Security.  # noqa: E501
        :rtype: object
        """
        return self._disabled_security

    @disabled_security.setter
    def disabled_security(self, disabled_security):
        """Sets the disabled_security of this V2Security.

        Disables security. This option should be used with caution as it allows unauthenticated access.  # noqa: E501

        :param disabled_security: The disabled_security of this V2Security.  # noqa: E501
        :type disabled_security: object
        """

        self._disabled_security = disabled_security

    @property
    def update_time(self):
        """Gets the update_time of this V2Security.  # noqa: E501


        :return: The update_time of this V2Security.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V2Security.


        :param update_time: The update_time of this V2Security.  # noqa: E501
        :type update_time: datetime
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2Security):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2Security):
            return True

        return self.to_dict() != other.to_dict()
