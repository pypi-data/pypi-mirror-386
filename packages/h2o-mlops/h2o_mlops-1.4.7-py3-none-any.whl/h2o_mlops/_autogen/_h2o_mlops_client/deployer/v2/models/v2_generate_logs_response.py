# coding: utf-8

"""
    ai/h2o/mlops/deployer/v2/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.v2.configuration import Configuration


class V2GenerateLogsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_id': 'str',
        'cached_until_time': 'datetime',
        'valid_until_time': 'datetime'
    }

    attribute_map = {
        'artifact_id': 'artifactId',
        'cached_until_time': 'cachedUntilTime',
        'valid_until_time': 'validUntilTime'
    }

    def __init__(self, artifact_id=None, cached_until_time=None, valid_until_time=None, local_vars_configuration=None):  # noqa: E501
        """V2GenerateLogsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_id = None
        self._cached_until_time = None
        self._valid_until_time = None
        self.discriminator = None

        if artifact_id is not None:
            self.artifact_id = artifact_id
        if cached_until_time is not None:
            self.cached_until_time = cached_until_time
        if valid_until_time is not None:
            self.valid_until_time = valid_until_time

    @property
    def artifact_id(self):
        """Gets the artifact_id of this V2GenerateLogsResponse.  # noqa: E501

        The artifact id to the generated zip file containing logs.  # noqa: E501

        :return: The artifact_id of this V2GenerateLogsResponse.  # noqa: E501
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this V2GenerateLogsResponse.

        The artifact id to the generated zip file containing logs.  # noqa: E501

        :param artifact_id: The artifact_id of this V2GenerateLogsResponse.  # noqa: E501
        :type artifact_id: str
        """

        self._artifact_id = artifact_id

    @property
    def cached_until_time(self):
        """Gets the cached_until_time of this V2GenerateLogsResponse.  # noqa: E501

        Timestamp until which identical requests will return this same file. Repeated requests before this time will not trigger new log generation.  # noqa: E501

        :return: The cached_until_time of this V2GenerateLogsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._cached_until_time

    @cached_until_time.setter
    def cached_until_time(self, cached_until_time):
        """Sets the cached_until_time of this V2GenerateLogsResponse.

        Timestamp until which identical requests will return this same file. Repeated requests before this time will not trigger new log generation.  # noqa: E501

        :param cached_until_time: The cached_until_time of this V2GenerateLogsResponse.  # noqa: E501
        :type cached_until_time: datetime
        """

        self._cached_until_time = cached_until_time

    @property
    def valid_until_time(self):
        """Gets the valid_until_time of this V2GenerateLogsResponse.  # noqa: E501

        Timestamp indicating when the log archive will expire. The zip file will be automatically deleted after this time.  # noqa: E501

        :return: The valid_until_time of this V2GenerateLogsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until_time

    @valid_until_time.setter
    def valid_until_time(self, valid_until_time):
        """Sets the valid_until_time of this V2GenerateLogsResponse.

        Timestamp indicating when the log archive will expire. The zip file will be automatically deleted after this time.  # noqa: E501

        :param valid_until_time: The valid_until_time of this V2GenerateLogsResponse.  # noqa: E501
        :type valid_until_time: datetime
        """

        self._valid_until_time = valid_until_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2GenerateLogsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2GenerateLogsResponse):
            return True

        return self.to_dict() != other.to_dict()
