# coding: utf-8

"""
    ai/h2o/mlops/batch/v1/job.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch.configuration import Configuration


class V1Source(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'spec': 'str',
        'config': 'str',
        'location': 'str',
        'mime_type': 'str'
    }

    attribute_map = {
        'spec': 'spec',
        'config': 'config',
        'location': 'location',
        'mime_type': 'mimeType'
    }

    def __init__(self, spec=None, config=None, location=None, mime_type=None, local_vars_configuration=None):  # noqa: E501
        """V1Source - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._spec = None
        self._config = None
        self._location = None
        self._mime_type = None
        self.discriminator = None

        self.spec = spec
        self.config = config
        self.location = location
        if mime_type is not None:
            self.mime_type = mime_type

    @property
    def spec(self):
        """Gets the spec of this V1Source.  # noqa: E501

        Required. Reference to the SourceSpec resource that defines the source type and capabilities (e.g., file system, database, cloud storage). Cannot be changed after the sink is created.  # noqa: E501

        :return: The spec of this V1Source.  # noqa: E501
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this V1Source.

        Required. Reference to the SourceSpec resource that defines the source type and capabilities (e.g., file system, database, cloud storage). Cannot be changed after the sink is created.  # noqa: E501

        :param spec: The spec of this V1Source.  # noqa: E501
        :type spec: str
        """
        if self.local_vars_configuration.client_side_validation and spec is None:  # noqa: E501
            raise ValueError("Invalid value for `spec`, must not be `None`")  # noqa: E501

        self._spec = spec

    @property
    def config(self):
        """Gets the config of this V1Source.  # noqa: E501

        Required. Configuration parameters specific to the source type, such as connection strings, authentication details, or format specifications. Cannot be modified after the source is created.  # noqa: E501

        :return: The config of this V1Source.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this V1Source.

        Required. Configuration parameters specific to the source type, such as connection strings, authentication details, or format specifications. Cannot be modified after the source is created.  # noqa: E501

        :param config: The config of this V1Source.  # noqa: E501
        :type config: str
        """
        if self.local_vars_configuration.client_side_validation and config is None:  # noqa: E501
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def location(self):
        """Gets the location of this V1Source.  # noqa: E501

        Required. The location or path from which data will be read, such as a file path, database table name, or cloud storage URI. Cannot be changed after the source is created.  # noqa: E501

        :return: The location of this V1Source.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this V1Source.

        Required. The location or path from which data will be read, such as a file path, database table name, or cloud storage URI. Cannot be changed after the source is created.  # noqa: E501

        :param location: The location of this V1Source.  # noqa: E501
        :type location: str
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def mime_type(self):
        """Gets the mime_type of this V1Source.  # noqa: E501

        Specifies the mime type for file-based sources. This value is used to determine how the file data should be interpreted and processed. Common mime types include: - text/csv: For CSV (Comma-Separated Values) files. - application/jsonl: For JSON Lines (newline-delimited JSON) format, typically used for structured data with one JSON object per line. - application/json: For regular JSON files containing structured data. - image/*: For image files of any format (e.g., image/png, image/jpeg).  Providing an appropriate mime type is crucial for the correct handling of file data. If not specified, default behavior may apply.  # noqa: E501

        :return: The mime_type of this V1Source.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this V1Source.

        Specifies the mime type for file-based sources. This value is used to determine how the file data should be interpreted and processed. Common mime types include: - text/csv: For CSV (Comma-Separated Values) files. - application/jsonl: For JSON Lines (newline-delimited JSON) format, typically used for structured data with one JSON object per line. - application/json: For regular JSON files containing structured data. - image/*: For image files of any format (e.g., image/png, image/jpeg).  Providing an appropriate mime type is crucial for the correct handling of file data. If not specified, default behavior may apply.  # noqa: E501

        :param mime_type: The mime_type of this V1Source.  # noqa: E501
        :type mime_type: str
        """

        self._mime_type = mime_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Source):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1Source):
            return True

        return self.to_dict() != other.to_dict()
