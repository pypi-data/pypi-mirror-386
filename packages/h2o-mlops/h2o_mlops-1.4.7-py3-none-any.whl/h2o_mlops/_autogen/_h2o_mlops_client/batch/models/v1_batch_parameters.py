# coding: utf-8

"""
    ai/h2o/mlops/batch/v1/job.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch.configuration import Configuration


class V1BatchParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mini_batch_size': 'int'
    }

    attribute_map = {
        'mini_batch_size': 'miniBatchSize'
    }

    def __init__(self, mini_batch_size=None, local_vars_configuration=None):  # noqa: E501
        """V1BatchParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._mini_batch_size = None
        self.discriminator = None

        if mini_batch_size is not None:
            self.mini_batch_size = mini_batch_size

    @property
    def mini_batch_size(self):
        """Gets the mini_batch_size of this V1BatchParameters.  # noqa: E501

        Optional. The number of records to send in one request to the scorer. If not provided, 64 will be used as default. This value cannot be modified after job creation due to the IMMUTABLE constraint. Larger batch sizes can improve throughput but may increase memory usage.  # noqa: E501

        :return: The mini_batch_size of this V1BatchParameters.  # noqa: E501
        :rtype: int
        """
        return self._mini_batch_size

    @mini_batch_size.setter
    def mini_batch_size(self, mini_batch_size):
        """Sets the mini_batch_size of this V1BatchParameters.

        Optional. The number of records to send in one request to the scorer. If not provided, 64 will be used as default. This value cannot be modified after job creation due to the IMMUTABLE constraint. Larger batch sizes can improve throughput but may increase memory usage.  # noqa: E501

        :param mini_batch_size: The mini_batch_size of this V1BatchParameters.  # noqa: E501
        :type mini_batch_size: int
        """

        self._mini_batch_size = mini_batch_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1BatchParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1BatchParameters):
            return True

        return self.to_dict() != other.to_dict()
