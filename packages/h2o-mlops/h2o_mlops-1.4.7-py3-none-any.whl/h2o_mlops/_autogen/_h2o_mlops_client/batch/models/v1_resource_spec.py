# coding: utf-8

"""
    ai/h2o/mlops/batch/v1/job.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch.configuration import Configuration


class V1ResourceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_requirement': 'V1ResourceRequirement',
        'replicas': 'int',
        'minimal_available_replicas': 'int'
    }

    attribute_map = {
        'resource_requirement': 'resourceRequirement',
        'replicas': 'replicas',
        'minimal_available_replicas': 'minimalAvailableReplicas'
    }

    def __init__(self, resource_requirement=None, replicas=None, minimal_available_replicas=None, local_vars_configuration=None):  # noqa: E501
        """V1ResourceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_requirement = None
        self._replicas = None
        self._minimal_available_replicas = None
        self.discriminator = None

        if resource_requirement is not None:
            self.resource_requirement = resource_requirement
        if replicas is not None:
            self.replicas = replicas
        if minimal_available_replicas is not None:
            self.minimal_available_replicas = minimal_available_replicas

    @property
    def resource_requirement(self):
        """Gets the resource_requirement of this V1ResourceSpec.  # noqa: E501


        :return: The resource_requirement of this V1ResourceSpec.  # noqa: E501
        :rtype: V1ResourceRequirement
        """
        return self._resource_requirement

    @resource_requirement.setter
    def resource_requirement(self, resource_requirement):
        """Sets the resource_requirement of this V1ResourceSpec.


        :param resource_requirement: The resource_requirement of this V1ResourceSpec.  # noqa: E501
        :type resource_requirement: V1ResourceRequirement
        """

        self._resource_requirement = resource_requirement

    @property
    def replicas(self):
        """Gets the replicas of this V1ResourceSpec.  # noqa: E501

        Optional. Number of replicas for the scorer container. Defaults to 1.  # noqa: E501

        :return: The replicas of this V1ResourceSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this V1ResourceSpec.

        Optional. Number of replicas for the scorer container. Defaults to 1.  # noqa: E501

        :param replicas: The replicas of this V1ResourceSpec.  # noqa: E501
        :type replicas: int
        """

        self._replicas = replicas

    @property
    def minimal_available_replicas(self):
        """Gets the minimal_available_replicas of this V1ResourceSpec.  # noqa: E501


        :return: The minimal_available_replicas of this V1ResourceSpec.  # noqa: E501
        :rtype: int
        """
        return self._minimal_available_replicas

    @minimal_available_replicas.setter
    def minimal_available_replicas(self, minimal_available_replicas):
        """Sets the minimal_available_replicas of this V1ResourceSpec.


        :param minimal_available_replicas: The minimal_available_replicas of this V1ResourceSpec.  # noqa: E501
        :type minimal_available_replicas: int
        """

        self._minimal_available_replicas = minimal_available_replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ResourceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ResourceSpec):
            return True

        return self.to_dict() != other.to_dict()
