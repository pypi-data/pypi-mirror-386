# coding: utf-8

"""
    ai/h2o/mlops/batch/v1/job.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch.configuration import Configuration


class V1ModelRequestParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id_field': 'str',
        'request_contributions': 'ModelRequestParametersShapleyType',
        'request_prediction_intervals': 'bool'
    }

    attribute_map = {
        'id_field': 'idField',
        'request_contributions': 'requestContributions',
        'request_prediction_intervals': 'requestPredictionIntervals'
    }

    def __init__(self, id_field=None, request_contributions=None, request_prediction_intervals=None, local_vars_configuration=None):  # noqa: E501
        """V1ModelRequestParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id_field = None
        self._request_contributions = None
        self._request_prediction_intervals = None
        self.discriminator = None

        if id_field is not None:
            self.id_field = id_field
        if request_contributions is not None:
            self.request_contributions = request_contributions
        if request_prediction_intervals is not None:
            self.request_prediction_intervals = request_prediction_intervals

    @property
    def id_field(self):
        """Gets the id_field of this V1ModelRequestParameters.  # noqa: E501

        Optional. Field name to use as a unique identifier for each prediction record. When specified, this field's value will be included in the response to help correlate predictions with input data.  # noqa: E501

        :return: The id_field of this V1ModelRequestParameters.  # noqa: E501
        :rtype: str
        """
        return self._id_field

    @id_field.setter
    def id_field(self, id_field):
        """Sets the id_field of this V1ModelRequestParameters.

        Optional. Field name to use as a unique identifier for each prediction record. When specified, this field's value will be included in the response to help correlate predictions with input data.  # noqa: E501

        :param id_field: The id_field of this V1ModelRequestParameters.  # noqa: E501
        :type id_field: str
        """

        self._id_field = id_field

    @property
    def request_contributions(self):
        """Gets the request_contributions of this V1ModelRequestParameters.  # noqa: E501


        :return: The request_contributions of this V1ModelRequestParameters.  # noqa: E501
        :rtype: ModelRequestParametersShapleyType
        """
        return self._request_contributions

    @request_contributions.setter
    def request_contributions(self, request_contributions):
        """Sets the request_contributions of this V1ModelRequestParameters.


        :param request_contributions: The request_contributions of this V1ModelRequestParameters.  # noqa: E501
        :type request_contributions: ModelRequestParametersShapleyType
        """

        self._request_contributions = request_contributions

    @property
    def request_prediction_intervals(self):
        """Gets the request_prediction_intervals of this V1ModelRequestParameters.  # noqa: E501

        Optional. Whether to include prediction intervals in the model response. When true, the response will contain confidence intervals or uncertainty estimates for the predictions in addition to point predictions.  # noqa: E501

        :return: The request_prediction_intervals of this V1ModelRequestParameters.  # noqa: E501
        :rtype: bool
        """
        return self._request_prediction_intervals

    @request_prediction_intervals.setter
    def request_prediction_intervals(self, request_prediction_intervals):
        """Sets the request_prediction_intervals of this V1ModelRequestParameters.

        Optional. Whether to include prediction intervals in the model response. When true, the response will contain confidence intervals or uncertainty estimates for the predictions in addition to point predictions.  # noqa: E501

        :param request_prediction_intervals: The request_prediction_intervals of this V1ModelRequestParameters.  # noqa: E501
        :type request_prediction_intervals: bool
        """

        self._request_prediction_intervals = request_prediction_intervals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ModelRequestParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ModelRequestParameters):
            return True

        return self.to_dict() != other.to_dict()
