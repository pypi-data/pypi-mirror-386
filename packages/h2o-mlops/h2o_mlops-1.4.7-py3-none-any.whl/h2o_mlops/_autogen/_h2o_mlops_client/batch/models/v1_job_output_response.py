# coding: utf-8

"""
    ai/h2o/mlops/batch/v1/job.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch.configuration import Configuration


class V1JobOutputResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_type': 'str',
        'pod': 'str',
        'container': 'str',
        'log_time': 'datetime',
        'line': 'str',
        'error': 'str'
    }

    attribute_map = {
        'app_type': 'appType',
        'pod': 'pod',
        'container': 'container',
        'log_time': 'logTime',
        'line': 'line',
        'error': 'error'
    }

    def __init__(self, app_type=None, pod=None, container=None, log_time=None, line=None, error=None, local_vars_configuration=None):  # noqa: E501
        """V1JobOutputResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_type = None
        self._pod = None
        self._container = None
        self._log_time = None
        self._line = None
        self._error = None
        self.discriminator = None

        if app_type is not None:
            self.app_type = app_type
        if pod is not None:
            self.pod = pod
        if container is not None:
            self.container = container
        if log_time is not None:
            self.log_time = log_time
        if line is not None:
            self.line = line
        if error is not None:
            self.error = error

    @property
    def app_type(self):
        """Gets the app_type of this V1JobOutputResponse.  # noqa: E501


        :return: The app_type of this V1JobOutputResponse.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this V1JobOutputResponse.


        :param app_type: The app_type of this V1JobOutputResponse.  # noqa: E501
        :type app_type: str
        """

        self._app_type = app_type

    @property
    def pod(self):
        """Gets the pod of this V1JobOutputResponse.  # noqa: E501

        The name of the Kubernetes pod that produced this log entry.  # noqa: E501

        :return: The pod of this V1JobOutputResponse.  # noqa: E501
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this V1JobOutputResponse.

        The name of the Kubernetes pod that produced this log entry.  # noqa: E501

        :param pod: The pod of this V1JobOutputResponse.  # noqa: E501
        :type pod: str
        """

        self._pod = pod

    @property
    def container(self):
        """Gets the container of this V1JobOutputResponse.  # noqa: E501

        The name of the container within the pod that generated this output.  # noqa: E501

        :return: The container of this V1JobOutputResponse.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this V1JobOutputResponse.

        The name of the container within the pod that generated this output.  # noqa: E501

        :param container: The container of this V1JobOutputResponse.  # noqa: E501
        :type container: str
        """

        self._container = container

    @property
    def log_time(self):
        """Gets the log_time of this V1JobOutputResponse.  # noqa: E501

        The timestamp when this log entry was generated.  # noqa: E501

        :return: The log_time of this V1JobOutputResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._log_time

    @log_time.setter
    def log_time(self, log_time):
        """Sets the log_time of this V1JobOutputResponse.

        The timestamp when this log entry was generated.  # noqa: E501

        :param log_time: The log_time of this V1JobOutputResponse.  # noqa: E501
        :type log_time: datetime
        """

        self._log_time = log_time

    @property
    def line(self):
        """Gets the line of this V1JobOutputResponse.  # noqa: E501

        The actual log line or output content from the application.  # noqa: E501

        :return: The line of this V1JobOutputResponse.  # noqa: E501
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this V1JobOutputResponse.

        The actual log line or output content from the application.  # noqa: E501

        :param line: The line of this V1JobOutputResponse.  # noqa: E501
        :type line: str
        """

        self._line = line

    @property
    def error(self):
        """Gets the error of this V1JobOutputResponse.  # noqa: E501

        Error message if there was an issue retrieving or processing the log output. Empty if no error occurred.  # noqa: E501

        :return: The error of this V1JobOutputResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this V1JobOutputResponse.

        Error message if there was an issue retrieving or processing the log output. Empty if no error occurred.  # noqa: E501

        :param error: The error of this V1JobOutputResponse.  # noqa: E501
        :type error: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1JobOutputResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1JobOutputResponse):
            return True

        return self.to_dict() != other.to_dict()
