# coding: utf-8

"""
    ai/h2o/mlops/batch/v1/job.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch.configuration import Configuration


class V1CompletionStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'processed_rows': 'str',
        'finished_pipeline_count': 'int',
        'failed_pipelines': 'list[str]',
        'error_rows_count': 'str'
    }

    attribute_map = {
        'processed_rows': 'processedRows',
        'finished_pipeline_count': 'finishedPipelineCount',
        'failed_pipelines': 'failedPipelines',
        'error_rows_count': 'errorRowsCount'
    }

    def __init__(self, processed_rows=None, finished_pipeline_count=None, failed_pipelines=None, error_rows_count=None, local_vars_configuration=None):  # noqa: E501
        """V1CompletionStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._processed_rows = None
        self._finished_pipeline_count = None
        self._failed_pipelines = None
        self._error_rows_count = None
        self.discriminator = None

        if processed_rows is not None:
            self.processed_rows = processed_rows
        if finished_pipeline_count is not None:
            self.finished_pipeline_count = finished_pipeline_count
        if failed_pipelines is not None:
            self.failed_pipelines = failed_pipelines
        if error_rows_count is not None:
            self.error_rows_count = error_rows_count

    @property
    def processed_rows(self):
        """Gets the processed_rows of this V1CompletionStats.  # noqa: E501

        Required. Number of processed input input when batch soring job is completed.  # noqa: E501

        :return: The processed_rows of this V1CompletionStats.  # noqa: E501
        :rtype: str
        """
        return self._processed_rows

    @processed_rows.setter
    def processed_rows(self, processed_rows):
        """Sets the processed_rows of this V1CompletionStats.

        Required. Number of processed input input when batch soring job is completed.  # noqa: E501

        :param processed_rows: The processed_rows of this V1CompletionStats.  # noqa: E501
        :type processed_rows: str
        """

        self._processed_rows = processed_rows

    @property
    def finished_pipeline_count(self):
        """Gets the finished_pipeline_count of this V1CompletionStats.  # noqa: E501

        Required. Number of finished pipeline count.  # noqa: E501

        :return: The finished_pipeline_count of this V1CompletionStats.  # noqa: E501
        :rtype: int
        """
        return self._finished_pipeline_count

    @finished_pipeline_count.setter
    def finished_pipeline_count(self, finished_pipeline_count):
        """Sets the finished_pipeline_count of this V1CompletionStats.

        Required. Number of finished pipeline count.  # noqa: E501

        :param finished_pipeline_count: The finished_pipeline_count of this V1CompletionStats.  # noqa: E501
        :type finished_pipeline_count: int
        """

        self._finished_pipeline_count = finished_pipeline_count

    @property
    def failed_pipelines(self):
        """Gets the failed_pipelines of this V1CompletionStats.  # noqa: E501


        :return: The failed_pipelines of this V1CompletionStats.  # noqa: E501
        :rtype: list[str]
        """
        return self._failed_pipelines

    @failed_pipelines.setter
    def failed_pipelines(self, failed_pipelines):
        """Sets the failed_pipelines of this V1CompletionStats.


        :param failed_pipelines: The failed_pipelines of this V1CompletionStats.  # noqa: E501
        :type failed_pipelines: list[str]
        """

        self._failed_pipelines = failed_pipelines

    @property
    def error_rows_count(self):
        """Gets the error_rows_count of this V1CompletionStats.  # noqa: E501

        Required. Number of rows that failed scoring.  # noqa: E501

        :return: The error_rows_count of this V1CompletionStats.  # noqa: E501
        :rtype: str
        """
        return self._error_rows_count

    @error_rows_count.setter
    def error_rows_count(self, error_rows_count):
        """Sets the error_rows_count of this V1CompletionStats.

        Required. Number of rows that failed scoring.  # noqa: E501

        :param error_rows_count: The error_rows_count of this V1CompletionStats.  # noqa: E501
        :type error_rows_count: str
        """

        self._error_rows_count = error_rows_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CompletionStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1CompletionStats):
            return True

        return self.to_dict() != other.to_dict()
