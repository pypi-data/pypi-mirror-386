# coding: utf-8

"""
    ai/h2o/mlops/batch/v1/job.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.batch.configuration import Configuration


class V1Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'source': 'V1Source',
        'sink': 'V1Sink',
        'instance_spec': 'V1InstanceSpec',
        'batch_parameters': 'V1BatchParameters',
        'model_request_parameters': 'V1ModelRequestParameters',
        'state': 'JobState',
        'creator': 'str',
        'create_time': 'datetime',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'completion_stats': 'V1CompletionStats',
        'job_timeout': 'str'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'source': 'source',
        'sink': 'sink',
        'instance_spec': 'instanceSpec',
        'batch_parameters': 'batchParameters',
        'model_request_parameters': 'modelRequestParameters',
        'state': 'state',
        'creator': 'creator',
        'create_time': 'createTime',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'completion_stats': 'completionStats',
        'job_timeout': 'jobTimeout'
    }

    def __init__(self, name=None, display_name=None, source=None, sink=None, instance_spec=None, batch_parameters=None, model_request_parameters=None, state=None, creator=None, create_time=None, start_time=None, end_time=None, completion_stats=None, job_timeout=None, local_vars_configuration=None):  # noqa: E501
        """V1Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._source = None
        self._sink = None
        self._instance_spec = None
        self._batch_parameters = None
        self._model_request_parameters = None
        self._state = None
        self._creator = None
        self._create_time = None
        self._start_time = None
        self._end_time = None
        self._completion_stats = None
        self._job_timeout = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        self.source = source
        self.sink = sink
        self.instance_spec = instance_spec
        if batch_parameters is not None:
            self.batch_parameters = batch_parameters
        if model_request_parameters is not None:
            self.model_request_parameters = model_request_parameters
        if state is not None:
            self.state = state
        if creator is not None:
            self.creator = creator
        if create_time is not None:
            self.create_time = create_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if completion_stats is not None:
            self.completion_stats = completion_stats
        if job_timeout is not None:
            self.job_timeout = job_timeout

    @property
    def name(self):
        """Gets the name of this V1Job.  # noqa: E501

        Resource name.  # noqa: E501

        :return: The name of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1Job.

        Resource name.  # noqa: E501

        :param name: The name of this V1Job.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this V1Job.  # noqa: E501

        Optional. Human-readable name.  # noqa: E501

        :return: The display_name of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1Job.

        Optional. Human-readable name.  # noqa: E501

        :param display_name: The display_name of this V1Job.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def source(self):
        """Gets the source of this V1Job.  # noqa: E501


        :return: The source of this V1Job.  # noqa: E501
        :rtype: V1Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this V1Job.


        :param source: The source of this V1Job.  # noqa: E501
        :type source: V1Source
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def sink(self):
        """Gets the sink of this V1Job.  # noqa: E501


        :return: The sink of this V1Job.  # noqa: E501
        :rtype: V1Sink
        """
        return self._sink

    @sink.setter
    def sink(self, sink):
        """Sets the sink of this V1Job.


        :param sink: The sink of this V1Job.  # noqa: E501
        :type sink: V1Sink
        """
        if self.local_vars_configuration.client_side_validation and sink is None:  # noqa: E501
            raise ValueError("Invalid value for `sink`, must not be `None`")  # noqa: E501

        self._sink = sink

    @property
    def instance_spec(self):
        """Gets the instance_spec of this V1Job.  # noqa: E501


        :return: The instance_spec of this V1Job.  # noqa: E501
        :rtype: V1InstanceSpec
        """
        return self._instance_spec

    @instance_spec.setter
    def instance_spec(self, instance_spec):
        """Sets the instance_spec of this V1Job.


        :param instance_spec: The instance_spec of this V1Job.  # noqa: E501
        :type instance_spec: V1InstanceSpec
        """
        if self.local_vars_configuration.client_side_validation and instance_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_spec`, must not be `None`")  # noqa: E501

        self._instance_spec = instance_spec

    @property
    def batch_parameters(self):
        """Gets the batch_parameters of this V1Job.  # noqa: E501


        :return: The batch_parameters of this V1Job.  # noqa: E501
        :rtype: V1BatchParameters
        """
        return self._batch_parameters

    @batch_parameters.setter
    def batch_parameters(self, batch_parameters):
        """Sets the batch_parameters of this V1Job.


        :param batch_parameters: The batch_parameters of this V1Job.  # noqa: E501
        :type batch_parameters: V1BatchParameters
        """

        self._batch_parameters = batch_parameters

    @property
    def model_request_parameters(self):
        """Gets the model_request_parameters of this V1Job.  # noqa: E501


        :return: The model_request_parameters of this V1Job.  # noqa: E501
        :rtype: V1ModelRequestParameters
        """
        return self._model_request_parameters

    @model_request_parameters.setter
    def model_request_parameters(self, model_request_parameters):
        """Sets the model_request_parameters of this V1Job.


        :param model_request_parameters: The model_request_parameters of this V1Job.  # noqa: E501
        :type model_request_parameters: V1ModelRequestParameters
        """

        self._model_request_parameters = model_request_parameters

    @property
    def state(self):
        """Gets the state of this V1Job.  # noqa: E501


        :return: The state of this V1Job.  # noqa: E501
        :rtype: JobState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1Job.


        :param state: The state of this V1Job.  # noqa: E501
        :type state: JobState
        """

        self._state = state

    @property
    def creator(self):
        """Gets the creator of this V1Job.  # noqa: E501

        Output only. Name of an entity that created the Job.  # noqa: E501

        :return: The creator of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this V1Job.

        Output only. Name of an entity that created the Job.  # noqa: E501

        :param creator: The creator of this V1Job.  # noqa: E501
        :type creator: str
        """

        self._creator = creator

    @property
    def create_time(self):
        """Gets the create_time of this V1Job.  # noqa: E501

        Output only. Time when the job was created.  # noqa: E501

        :return: The create_time of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V1Job.

        Output only. Time when the job was created.  # noqa: E501

        :param create_time: The create_time of this V1Job.  # noqa: E501
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def start_time(self):
        """Gets the start_time of this V1Job.  # noqa: E501

        Time when the Job started executing.  # noqa: E501

        :return: The start_time of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1Job.

        Time when the Job started executing.  # noqa: E501

        :param start_time: The start_time of this V1Job.  # noqa: E501
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this V1Job.  # noqa: E501

        Time when the Job completed.  # noqa: E501

        :return: The end_time of this V1Job.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V1Job.

        Time when the Job completed.  # noqa: E501

        :param end_time: The end_time of this V1Job.  # noqa: E501
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def completion_stats(self):
        """Gets the completion_stats of this V1Job.  # noqa: E501


        :return: The completion_stats of this V1Job.  # noqa: E501
        :rtype: V1CompletionStats
        """
        return self._completion_stats

    @completion_stats.setter
    def completion_stats(self, completion_stats):
        """Sets the completion_stats of this V1Job.


        :param completion_stats: The completion_stats of this V1Job.  # noqa: E501
        :type completion_stats: V1CompletionStats
        """

        self._completion_stats = completion_stats

    @property
    def job_timeout(self):
        """Gets the job_timeout of this V1Job.  # noqa: E501

        Optional. Maximum allowed time for the job to run before being automatically timed out. Example values in JSON: \"15s\", \"10m\", \"1h\".  # noqa: E501

        :return: The job_timeout of this V1Job.  # noqa: E501
        :rtype: str
        """
        return self._job_timeout

    @job_timeout.setter
    def job_timeout(self, job_timeout):
        """Sets the job_timeout of this V1Job.

        Optional. Maximum allowed time for the job to run before being automatically timed out. Example values in JSON: \"15s\", \"10m\", \"1h\".  # noqa: E501

        :param job_timeout: The job_timeout of this V1Job.  # noqa: E501
        :type job_timeout: str
        """

        self._job_timeout = job_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1Job):
            return True

        return self.to_dict() != other.to_dict()
