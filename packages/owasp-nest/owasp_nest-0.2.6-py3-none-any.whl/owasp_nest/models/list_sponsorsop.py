"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .membertype import MemberType
from enum import Enum
from owasp_nest.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from owasp_nest.utils import FieldMetadata, QueryParamMetadata
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListSponsorsOrdering(str, Enum):
    r"""Ordering field"""

    NAME = "name"
    MINUS_NAME = "-name"


class ListSponsorsRequestTypedDict(TypedDict):
    is_member: NotRequired[Nullable[bool]]
    r"""Member status of the sponsor"""
    member_type: NotRequired[Nullable[MemberType]]
    r"""Member type of the sponsor"""
    sponsor_type: NotRequired[Nullable[str]]
    r"""Filter by the type of sponsorship (e.g., Gold, Silver, Platinum)."""
    ordering: NotRequired[Nullable[ListSponsorsOrdering]]
    r"""Ordering field"""
    page: NotRequired[int]
    r"""Page number"""
    page_size: NotRequired[int]
    r"""Number of items per page"""


class ListSponsorsRequest(BaseModel):
    is_member: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Member status of the sponsor"""

    member_type: Annotated[
        OptionalNullable[MemberType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Member type of the sponsor"""

    sponsor_type: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Filter by the type of sponsorship (e.g., Gold, Silver, Platinum)."""

    ordering: Annotated[
        OptionalNullable[ListSponsorsOrdering],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Ordering field"""

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Page number"""

    page_size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 100
    r"""Number of items per page"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "is_member",
            "member_type",
            "sponsor_type",
            "ordering",
            "page",
            "page_size",
        ]
        nullable_fields = ["is_member", "member_type", "sponsor_type", "ordering"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
