"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from owasp_nest import models, utils
from owasp_nest._hooks import HookContext
from owasp_nest.types import OptionalNullable, UNSET
from owasp_nest.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional


class Issues(BaseSDK):
    def list_issues(
        self,
        *,
        organization: OptionalNullable[str] = UNSET,
        repository: OptionalNullable[str] = UNSET,
        state: OptionalNullable[models.State] = UNSET,
        ordering: OptionalNullable[models.ListIssuesOrdering] = UNSET,
        page: Optional[int] = 1,
        page_size: Optional[int] = 100,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PagedIssue:
        r"""List issues

        Retrieve a paginated list of GitHub issues.

        :param organization: Organization that issues belong to (filtered by repository owner)
        :param repository: Repository that issues belong to
        :param state: Issue state
        :param ordering: Ordering field
        :param page: Page number
        :param page_size: Number of items per page
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListIssuesRequest(
            organization=organization,
            repository=repository,
            state=state,
            ordering=ordering,
            page=page,
            page_size=page_size,
        )

        req = self._build_request(
            method="GET",
            path="/api/v0/issues/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="list_issues",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PagedIssue, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.NestAPIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.NestAPIError("API error occurred", http_res, http_res_text)

        raise models.NestAPIError("Unexpected response received", http_res)

    async def list_issues_async(
        self,
        *,
        organization: OptionalNullable[str] = UNSET,
        repository: OptionalNullable[str] = UNSET,
        state: OptionalNullable[models.State] = UNSET,
        ordering: OptionalNullable[models.ListIssuesOrdering] = UNSET,
        page: Optional[int] = 1,
        page_size: Optional[int] = 100,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PagedIssue:
        r"""List issues

        Retrieve a paginated list of GitHub issues.

        :param organization: Organization that issues belong to (filtered by repository owner)
        :param repository: Repository that issues belong to
        :param state: Issue state
        :param ordering: Ordering field
        :param page: Page number
        :param page_size: Number of items per page
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListIssuesRequest(
            organization=organization,
            repository=repository,
            state=state,
            ordering=ordering,
            page=page,
            page_size=page_size,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/v0/issues/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="list_issues",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PagedIssue, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.NestAPIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.NestAPIError("API error occurred", http_res, http_res_text)

        raise models.NestAPIError("Unexpected response received", http_res)

    def get_issue(
        self,
        *,
        organization_id: str,
        repository_id: str,
        issue_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.IssueDetail:
        r"""Get issue

        Retrieve a specific GitHub issue by organization, repository, and issue number.

        :param organization_id:
        :param repository_id:
        :param issue_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetIssueRequest(
            organization_id=organization_id,
            repository_id=repository_id,
            issue_id=issue_id,
        )

        req = self._build_request(
            method="GET",
            path="/api/v0/issues/{organization_id}/{repository_id}/{issue_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_issue",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.IssueDetail, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(models.IssueErrorData, http_res)
            raise models.IssueError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.NestAPIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.NestAPIError("API error occurred", http_res, http_res_text)

        raise models.NestAPIError("Unexpected response received", http_res)

    async def get_issue_async(
        self,
        *,
        organization_id: str,
        repository_id: str,
        issue_id: int,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.IssueDetail:
        r"""Get issue

        Retrieve a specific GitHub issue by organization, repository, and issue number.

        :param organization_id:
        :param repository_id:
        :param issue_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetIssueRequest(
            organization_id=organization_id,
            repository_id=repository_id,
            issue_id=issue_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/v0/issues/{organization_id}/{repository_id}/{issue_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_issue",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.IssueDetail, http_res)
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(models.IssueErrorData, http_res)
            raise models.IssueError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.NestAPIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.NestAPIError("API error occurred", http_res, http_res_text)

        raise models.NestAPIError("Unexpected response received", http_res)
