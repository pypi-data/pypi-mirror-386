"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .nesterror import NestError
from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .chapter import Chapter, ChapterTypedDict
    from .chapterdetail import ChapterDetail, ChapterDetailTypedDict
    from .chaptererror import ChapterError, ChapterErrorData
    from .committee import Committee, CommitteeTypedDict
    from .committeedetail import CommitteeDetail, CommitteeDetailTypedDict
    from .committeeerror import CommitteeError, CommitteeErrorData
    from .event import Event, EventTypedDict
    from .eventdetail import EventDetail, EventDetailTypedDict
    from .eventerror import EventError, EventErrorData
    from .get_chapterop import GetChapterRequest, GetChapterRequestTypedDict
    from .get_committeeop import GetCommitteeRequest, GetCommitteeRequestTypedDict
    from .get_eventop import GetEventRequest, GetEventRequestTypedDict
    from .get_issueop import GetIssueRequest, GetIssueRequestTypedDict
    from .get_memberop import GetMemberRequest, GetMemberRequestTypedDict
    from .get_milestoneop import GetMilestoneRequest, GetMilestoneRequestTypedDict
    from .get_organizationop import (
        GetOrganizationRequest,
        GetOrganizationRequestTypedDict,
    )
    from .get_projectop import GetProjectRequest, GetProjectRequestTypedDict
    from .get_releaseop import GetReleaseRequest, GetReleaseRequestTypedDict
    from .get_repositoryop import GetRepositoryRequest, GetRepositoryRequestTypedDict
    from .get_sponsorop import GetSponsorRequest, GetSponsorRequestTypedDict
    from .issue import Issue, IssueTypedDict
    from .issuedetail import IssueDetail, IssueDetailTypedDict
    from .issueerror import IssueError, IssueErrorData
    from .list_chaptersop import (
        ListChaptersOrdering,
        ListChaptersRequest,
        ListChaptersRequestTypedDict,
    )
    from .list_committeesop import (
        ListCommitteesOrdering,
        ListCommitteesRequest,
        ListCommitteesRequestTypedDict,
    )
    from .list_eventsop import (
        ListEventsOrdering,
        ListEventsRequest,
        ListEventsRequestTypedDict,
    )
    from .list_issuesop import (
        ListIssuesOrdering,
        ListIssuesRequest,
        ListIssuesRequestTypedDict,
    )
    from .list_membersop import (
        ListMembersOrdering,
        ListMembersRequest,
        ListMembersRequestTypedDict,
    )
    from .list_milestonesop import (
        ListMilestonesOrdering,
        ListMilestonesRequest,
        ListMilestonesRequestTypedDict,
    )
    from .list_organizationsop import (
        ListOrganizationsOrdering,
        ListOrganizationsRequest,
        ListOrganizationsRequestTypedDict,
    )
    from .list_projectsop import (
        ListProjectsOrdering,
        ListProjectsRequest,
        ListProjectsRequestTypedDict,
    )
    from .list_releasesop import (
        ListReleasesOrdering,
        ListReleasesRequest,
        ListReleasesRequestTypedDict,
    )
    from .list_repositoriesop import (
        ListRepositoriesOrdering,
        ListRepositoriesRequest,
        ListRepositoriesRequestTypedDict,
    )
    from .list_sponsorsop import (
        ListSponsorsOrdering,
        ListSponsorsRequest,
        ListSponsorsRequestTypedDict,
    )
    from .member import Member, MemberTypedDict
    from .memberdetail import MemberDetail, MemberDetailTypedDict
    from .membererror import MemberError, MemberErrorData
    from .membertype import MemberType
    from .milestone import Milestone, MilestoneTypedDict
    from .milestonedetail import MilestoneDetail, MilestoneDetailTypedDict
    from .milestoneerror import MilestoneError, MilestoneErrorData
    from .nestapierror import NestAPIError
    from .no_response_error import NoResponseError
    from .organization import Organization, OrganizationTypedDict
    from .organizationdetail import OrganizationDetail, OrganizationDetailTypedDict
    from .organizationerror import OrganizationError, OrganizationErrorData
    from .pagedchapter import PagedChapter, PagedChapterTypedDict
    from .pagedcommittee import PagedCommittee, PagedCommitteeTypedDict
    from .pagedevent import PagedEvent, PagedEventTypedDict
    from .pagedissue import PagedIssue, PagedIssueTypedDict
    from .pagedmember import PagedMember, PagedMemberTypedDict
    from .pagedmilestone import PagedMilestone, PagedMilestoneTypedDict
    from .pagedorganization import PagedOrganization, PagedOrganizationTypedDict
    from .pagedproject import PagedProject, PagedProjectTypedDict
    from .pagedrelease import PagedRelease, PagedReleaseTypedDict
    from .pagedrepository import PagedRepository, PagedRepositoryTypedDict
    from .pagedsponsor import PagedSponsor, PagedSponsorTypedDict
    from .project import Project, ProjectTypedDict
    from .projectdetail import ProjectDetail, ProjectDetailTypedDict
    from .projecterror import ProjectError, ProjectErrorData
    from .projectlevel import ProjectLevel
    from .release import Release, ReleaseTypedDict
    from .releasedetail import ReleaseDetail, ReleaseDetailTypedDict
    from .releaseerror import ReleaseError, ReleaseErrorData
    from .repository import Repository, RepositoryTypedDict
    from .repositorydetail import RepositoryDetail, RepositoryDetailTypedDict
    from .repositoryerror import RepositoryError, RepositoryErrorData
    from .responsevalidationerror import ResponseValidationError
    from .security import Security, SecurityTypedDict
    from .sponsor import Sponsor, SponsorTypedDict
    from .sponsordetail import SponsorDetail, SponsorDetailTypedDict
    from .sponsorerror import SponsorError, SponsorErrorData
    from .state import State

__all__ = [
    "Chapter",
    "ChapterDetail",
    "ChapterDetailTypedDict",
    "ChapterError",
    "ChapterErrorData",
    "ChapterTypedDict",
    "Committee",
    "CommitteeDetail",
    "CommitteeDetailTypedDict",
    "CommitteeError",
    "CommitteeErrorData",
    "CommitteeTypedDict",
    "Event",
    "EventDetail",
    "EventDetailTypedDict",
    "EventError",
    "EventErrorData",
    "EventTypedDict",
    "GetChapterRequest",
    "GetChapterRequestTypedDict",
    "GetCommitteeRequest",
    "GetCommitteeRequestTypedDict",
    "GetEventRequest",
    "GetEventRequestTypedDict",
    "GetIssueRequest",
    "GetIssueRequestTypedDict",
    "GetMemberRequest",
    "GetMemberRequestTypedDict",
    "GetMilestoneRequest",
    "GetMilestoneRequestTypedDict",
    "GetOrganizationRequest",
    "GetOrganizationRequestTypedDict",
    "GetProjectRequest",
    "GetProjectRequestTypedDict",
    "GetReleaseRequest",
    "GetReleaseRequestTypedDict",
    "GetRepositoryRequest",
    "GetRepositoryRequestTypedDict",
    "GetSponsorRequest",
    "GetSponsorRequestTypedDict",
    "Issue",
    "IssueDetail",
    "IssueDetailTypedDict",
    "IssueError",
    "IssueErrorData",
    "IssueTypedDict",
    "ListChaptersOrdering",
    "ListChaptersRequest",
    "ListChaptersRequestTypedDict",
    "ListCommitteesOrdering",
    "ListCommitteesRequest",
    "ListCommitteesRequestTypedDict",
    "ListEventsOrdering",
    "ListEventsRequest",
    "ListEventsRequestTypedDict",
    "ListIssuesOrdering",
    "ListIssuesRequest",
    "ListIssuesRequestTypedDict",
    "ListMembersOrdering",
    "ListMembersRequest",
    "ListMembersRequestTypedDict",
    "ListMilestonesOrdering",
    "ListMilestonesRequest",
    "ListMilestonesRequestTypedDict",
    "ListOrganizationsOrdering",
    "ListOrganizationsRequest",
    "ListOrganizationsRequestTypedDict",
    "ListProjectsOrdering",
    "ListProjectsRequest",
    "ListProjectsRequestTypedDict",
    "ListReleasesOrdering",
    "ListReleasesRequest",
    "ListReleasesRequestTypedDict",
    "ListRepositoriesOrdering",
    "ListRepositoriesRequest",
    "ListRepositoriesRequestTypedDict",
    "ListSponsorsOrdering",
    "ListSponsorsRequest",
    "ListSponsorsRequestTypedDict",
    "Member",
    "MemberDetail",
    "MemberDetailTypedDict",
    "MemberError",
    "MemberErrorData",
    "MemberType",
    "MemberTypedDict",
    "Milestone",
    "MilestoneDetail",
    "MilestoneDetailTypedDict",
    "MilestoneError",
    "MilestoneErrorData",
    "MilestoneTypedDict",
    "NestAPIError",
    "NestError",
    "NoResponseError",
    "Organization",
    "OrganizationDetail",
    "OrganizationDetailTypedDict",
    "OrganizationError",
    "OrganizationErrorData",
    "OrganizationTypedDict",
    "PagedChapter",
    "PagedChapterTypedDict",
    "PagedCommittee",
    "PagedCommitteeTypedDict",
    "PagedEvent",
    "PagedEventTypedDict",
    "PagedIssue",
    "PagedIssueTypedDict",
    "PagedMember",
    "PagedMemberTypedDict",
    "PagedMilestone",
    "PagedMilestoneTypedDict",
    "PagedOrganization",
    "PagedOrganizationTypedDict",
    "PagedProject",
    "PagedProjectTypedDict",
    "PagedRelease",
    "PagedReleaseTypedDict",
    "PagedRepository",
    "PagedRepositoryTypedDict",
    "PagedSponsor",
    "PagedSponsorTypedDict",
    "Project",
    "ProjectDetail",
    "ProjectDetailTypedDict",
    "ProjectError",
    "ProjectErrorData",
    "ProjectLevel",
    "ProjectTypedDict",
    "Release",
    "ReleaseDetail",
    "ReleaseDetailTypedDict",
    "ReleaseError",
    "ReleaseErrorData",
    "ReleaseTypedDict",
    "Repository",
    "RepositoryDetail",
    "RepositoryDetailTypedDict",
    "RepositoryError",
    "RepositoryErrorData",
    "RepositoryTypedDict",
    "ResponseValidationError",
    "Security",
    "SecurityTypedDict",
    "Sponsor",
    "SponsorDetail",
    "SponsorDetailTypedDict",
    "SponsorError",
    "SponsorErrorData",
    "SponsorTypedDict",
    "State",
]

_dynamic_imports: dict[str, str] = {
    "Chapter": ".chapter",
    "ChapterTypedDict": ".chapter",
    "ChapterDetail": ".chapterdetail",
    "ChapterDetailTypedDict": ".chapterdetail",
    "ChapterError": ".chaptererror",
    "ChapterErrorData": ".chaptererror",
    "Committee": ".committee",
    "CommitteeTypedDict": ".committee",
    "CommitteeDetail": ".committeedetail",
    "CommitteeDetailTypedDict": ".committeedetail",
    "CommitteeError": ".committeeerror",
    "CommitteeErrorData": ".committeeerror",
    "Event": ".event",
    "EventTypedDict": ".event",
    "EventDetail": ".eventdetail",
    "EventDetailTypedDict": ".eventdetail",
    "EventError": ".eventerror",
    "EventErrorData": ".eventerror",
    "GetChapterRequest": ".get_chapterop",
    "GetChapterRequestTypedDict": ".get_chapterop",
    "GetCommitteeRequest": ".get_committeeop",
    "GetCommitteeRequestTypedDict": ".get_committeeop",
    "GetEventRequest": ".get_eventop",
    "GetEventRequestTypedDict": ".get_eventop",
    "GetIssueRequest": ".get_issueop",
    "GetIssueRequestTypedDict": ".get_issueop",
    "GetMemberRequest": ".get_memberop",
    "GetMemberRequestTypedDict": ".get_memberop",
    "GetMilestoneRequest": ".get_milestoneop",
    "GetMilestoneRequestTypedDict": ".get_milestoneop",
    "GetOrganizationRequest": ".get_organizationop",
    "GetOrganizationRequestTypedDict": ".get_organizationop",
    "GetProjectRequest": ".get_projectop",
    "GetProjectRequestTypedDict": ".get_projectop",
    "GetReleaseRequest": ".get_releaseop",
    "GetReleaseRequestTypedDict": ".get_releaseop",
    "GetRepositoryRequest": ".get_repositoryop",
    "GetRepositoryRequestTypedDict": ".get_repositoryop",
    "GetSponsorRequest": ".get_sponsorop",
    "GetSponsorRequestTypedDict": ".get_sponsorop",
    "Issue": ".issue",
    "IssueTypedDict": ".issue",
    "IssueDetail": ".issuedetail",
    "IssueDetailTypedDict": ".issuedetail",
    "IssueError": ".issueerror",
    "IssueErrorData": ".issueerror",
    "ListChaptersOrdering": ".list_chaptersop",
    "ListChaptersRequest": ".list_chaptersop",
    "ListChaptersRequestTypedDict": ".list_chaptersop",
    "ListCommitteesOrdering": ".list_committeesop",
    "ListCommitteesRequest": ".list_committeesop",
    "ListCommitteesRequestTypedDict": ".list_committeesop",
    "ListEventsOrdering": ".list_eventsop",
    "ListEventsRequest": ".list_eventsop",
    "ListEventsRequestTypedDict": ".list_eventsop",
    "ListIssuesOrdering": ".list_issuesop",
    "ListIssuesRequest": ".list_issuesop",
    "ListIssuesRequestTypedDict": ".list_issuesop",
    "ListMembersOrdering": ".list_membersop",
    "ListMembersRequest": ".list_membersop",
    "ListMembersRequestTypedDict": ".list_membersop",
    "ListMilestonesOrdering": ".list_milestonesop",
    "ListMilestonesRequest": ".list_milestonesop",
    "ListMilestonesRequestTypedDict": ".list_milestonesop",
    "ListOrganizationsOrdering": ".list_organizationsop",
    "ListOrganizationsRequest": ".list_organizationsop",
    "ListOrganizationsRequestTypedDict": ".list_organizationsop",
    "ListProjectsOrdering": ".list_projectsop",
    "ListProjectsRequest": ".list_projectsop",
    "ListProjectsRequestTypedDict": ".list_projectsop",
    "ListReleasesOrdering": ".list_releasesop",
    "ListReleasesRequest": ".list_releasesop",
    "ListReleasesRequestTypedDict": ".list_releasesop",
    "ListRepositoriesOrdering": ".list_repositoriesop",
    "ListRepositoriesRequest": ".list_repositoriesop",
    "ListRepositoriesRequestTypedDict": ".list_repositoriesop",
    "ListSponsorsOrdering": ".list_sponsorsop",
    "ListSponsorsRequest": ".list_sponsorsop",
    "ListSponsorsRequestTypedDict": ".list_sponsorsop",
    "Member": ".member",
    "MemberTypedDict": ".member",
    "MemberDetail": ".memberdetail",
    "MemberDetailTypedDict": ".memberdetail",
    "MemberError": ".membererror",
    "MemberErrorData": ".membererror",
    "MemberType": ".membertype",
    "Milestone": ".milestone",
    "MilestoneTypedDict": ".milestone",
    "MilestoneDetail": ".milestonedetail",
    "MilestoneDetailTypedDict": ".milestonedetail",
    "MilestoneError": ".milestoneerror",
    "MilestoneErrorData": ".milestoneerror",
    "NestAPIError": ".nestapierror",
    "NoResponseError": ".no_response_error",
    "Organization": ".organization",
    "OrganizationTypedDict": ".organization",
    "OrganizationDetail": ".organizationdetail",
    "OrganizationDetailTypedDict": ".organizationdetail",
    "OrganizationError": ".organizationerror",
    "OrganizationErrorData": ".organizationerror",
    "PagedChapter": ".pagedchapter",
    "PagedChapterTypedDict": ".pagedchapter",
    "PagedCommittee": ".pagedcommittee",
    "PagedCommitteeTypedDict": ".pagedcommittee",
    "PagedEvent": ".pagedevent",
    "PagedEventTypedDict": ".pagedevent",
    "PagedIssue": ".pagedissue",
    "PagedIssueTypedDict": ".pagedissue",
    "PagedMember": ".pagedmember",
    "PagedMemberTypedDict": ".pagedmember",
    "PagedMilestone": ".pagedmilestone",
    "PagedMilestoneTypedDict": ".pagedmilestone",
    "PagedOrganization": ".pagedorganization",
    "PagedOrganizationTypedDict": ".pagedorganization",
    "PagedProject": ".pagedproject",
    "PagedProjectTypedDict": ".pagedproject",
    "PagedRelease": ".pagedrelease",
    "PagedReleaseTypedDict": ".pagedrelease",
    "PagedRepository": ".pagedrepository",
    "PagedRepositoryTypedDict": ".pagedrepository",
    "PagedSponsor": ".pagedsponsor",
    "PagedSponsorTypedDict": ".pagedsponsor",
    "Project": ".project",
    "ProjectTypedDict": ".project",
    "ProjectDetail": ".projectdetail",
    "ProjectDetailTypedDict": ".projectdetail",
    "ProjectError": ".projecterror",
    "ProjectErrorData": ".projecterror",
    "ProjectLevel": ".projectlevel",
    "Release": ".release",
    "ReleaseTypedDict": ".release",
    "ReleaseDetail": ".releasedetail",
    "ReleaseDetailTypedDict": ".releasedetail",
    "ReleaseError": ".releaseerror",
    "ReleaseErrorData": ".releaseerror",
    "Repository": ".repository",
    "RepositoryTypedDict": ".repository",
    "RepositoryDetail": ".repositorydetail",
    "RepositoryDetailTypedDict": ".repositorydetail",
    "RepositoryError": ".repositoryerror",
    "RepositoryErrorData": ".repositoryerror",
    "ResponseValidationError": ".responsevalidationerror",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "Sponsor": ".sponsor",
    "SponsorTypedDict": ".sponsor",
    "SponsorDetail": ".sponsordetail",
    "SponsorDetailTypedDict": ".sponsordetail",
    "SponsorError": ".sponsorerror",
    "SponsorErrorData": ".sponsorerror",
    "State": ".state",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
