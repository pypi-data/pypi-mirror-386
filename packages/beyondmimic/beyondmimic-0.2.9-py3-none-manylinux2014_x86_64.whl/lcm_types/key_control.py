"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class key_control(object):

    __slots__ = ["key", "value"]

    __typenames__ = ["string", "float"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.key = ""
        """ LCM Type: string """
        self.value = 0.0
        """ LCM Type: float """

    def encode(self):
        buf = BytesIO()
        buf.write(key_control._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __key_encoded = self.key.encode('utf-8')
        buf.write(struct.pack('>I', len(__key_encoded)+1))
        buf.write(__key_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">f", self.value))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != key_control._get_packed_fingerprint():
            raise ValueError("Decode error")
        return key_control._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = key_control()
        __key_len = struct.unpack('>I', buf.read(4))[0]
        self.key = buf.read(__key_len)[:-1].decode('utf-8', 'replace')
        self.value = struct.unpack(">f", buf.read(4))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if key_control in parents: return 0
        tmphash = (0xef67b5b7ed22d6ab) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if key_control._packed_fingerprint is None:
            key_control._packed_fingerprint = struct.pack(">Q", key_control._get_hash_recursive([]))
        return key_control._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", key_control._get_packed_fingerprint())[0]

