"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class arm_action_q_t(object):

    __slots__ = ["act", "tau"]

    __typenames__ = ["double", "double"]

    __dimensions__ = [[14], [14]]

    def __init__(self):
        self.act = [ 0.0 for dim0 in range(14) ]
        """ LCM Type: double[14] """
        self.tau = [ 0.0 for dim0 in range(14) ]
        """ LCM Type: double[14] """

    def encode(self):
        buf = BytesIO()
        buf.write(arm_action_q_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>14d', *self.act[:14]))
        buf.write(struct.pack('>14d', *self.tau[:14]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arm_action_q_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arm_action_q_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = arm_action_q_t()
        self.act = struct.unpack('>14d', buf.read(112))
        self.tau = struct.unpack('>14d', buf.read(112))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if arm_action_q_t in parents: return 0
        tmphash = (0xb6c6f590b8a87123) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if arm_action_q_t._packed_fingerprint is None:
            arm_action_q_t._packed_fingerprint = struct.pack(">Q", arm_action_q_t._get_hash_recursive([]))
        return arm_action_q_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", arm_action_q_t._get_packed_fingerprint())[0]

