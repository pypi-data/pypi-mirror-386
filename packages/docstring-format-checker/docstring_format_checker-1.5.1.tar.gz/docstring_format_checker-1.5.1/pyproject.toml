[project]
name = "docstring-format-checker"
version = "1.5.1"
description = "A CLI tool to check and validate Python docstring formatting and completeness"
readme = "README.md"
license = "MIT"
authors = [
    { name="Chris Mahoney", email="docstring-format-checker@data-science-extensions.com" },
]
maintainers = [
    { name="Chris Mahoney", email="docstring-format-checker@data-science-extensions.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing :: Unit",
    "Topic :: Utilities",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Intended Audience :: Developers",
    "Environment :: Console",
]
requires-python = ">=3.9"
dependencies = [
    "typer>=0.9.0",
    "tomli>=2.0.0;python_version<'3.11'",
    "rich>=13.0.0",
    "toolbox-python==1.*",
    "pyfiglet==1.*",
]

[project.urls]
Homepage = "https://github.com/data-science-extensions/docstring-format-checker"
Documentation = "https://data-science-extensions.com/toolboxes/docstring-format-checker/latest/code/"
Repository = "https://github.com/data-science-extensions/docstring-format-checker"
Changelog = "https://github.com/data-science-extensions/docstring-format-checker/releases"
Issues = "https://github.com/data-science-extensions/docstring-format-checker/issues"

[project.scripts]
docstring-format-checker = "docstring_format_checker.cli:entry_point"
dfc = "docstring_format_checker.cli:entry_point"

[dependency-groups]
dev = [
    "black==25.*",
    "blacken-docs==1.*",
    "codespell==2.*",
    "ipykernel==6.*",
    "isort==6.*",
    "pre-commit==4.*",
    "pycln==2.*",
    "pylint==3.*",
    "pyupgrade==3.*",
    "uv==0.*",
    "pip==25.*",
]
docs = [
    "black==25.*",
    "docstring-inheritance==2.*",
    "livereload==2.*",
    "mike==2.*",
    "mkdocs==1.*",
    "mkdocs-autorefs==1.*",
    "mkdocs-coverage==2.*",
    "mkdocs-material==9.*",
    "mkdocstrings==0.*",
    "mkdocstrings-python==1.*",
    "pygithub==2.*",
]
test = [
    "mypy==1.*,!=1.17.*",
    "parameterized==0.*",
    "pytest==8.*",
    "pytest-clarity==1.*",
    "pytest-cov==7.*",
    "pytest-icdiff==0.*",
    "pytest-sugar==1.*",
    "pytest-xdist==3.*",
    "requests==2.*",
    "complexipy==4.*",
]

[tool.black]
line-length = 120
color = true
exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.pytest.ini_options]
filterwarnings = [
    # "ignore::typeguard.InstrumentationWarning",
    "ignore::DeprecationWarning",
]
addopts = [
    "--verbose",
    "--verbose",
    "--cov=src/docstring_format_checker",
    "--cov-report=term",
    "--cov-report=html:cov-report/html",
    "--cov-report=xml:cov-report/xml/cov-report.xml",
]
testpaths = [
    "src/tests",
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
ignore_missing_imports = true
pretty = true
disable_error_code = [
    "valid-type",
    "attr-defined",
    "no-redef",
]

[tool.isort]
import_heading_future = "## Future Python Library Imports ----"
import_heading_stdlib = "## Python StdLib Imports ----"
import_heading_thirdparty = "## Python Third Party Imports ----"
import_heading_firstparty = "## Local First Party Imports ----"
import_heading_localfolder = "## Local Module Imports ----"
profile = "black"
split_on_trailing_comma = true
combine_as_imports = true
lines_after_imports = 2

[tool.codespell]
ignore-words-list = "demog"

[tool.pylint.main]
disable = [
    "C0103",  # invalid-name
    "C0301",  # line-too-long
    "C0302",  # too-many-lines
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "R0917",  # too-many-positional-arguments
    "R1705",  # no-else-return
    "R1724",  # no-else-continue
    "W0107",  # unnecessary-pass
    "W0212",  # protected-access
    "W0612",  # unused-variable
    "W0613",  # unused-argument
    "W0622",  # redefined-builtin
    "W0718",  # broad-exception-caught
]

[tool.complexipy]
paths = "src/docstring_format_checker"
max-complexity-allowed = 13
quiet = false
ignore-complexity = false
details = "low"
sort = "asc"

[tool.bump_version.replacements]
files = [
    { file = "src/docstring_format_checker/__init__.py", pattern = "__version__ = \"{VERSION}\"" },
    { file = "src/tests/test_version.py", pattern = "__version__ = \"{VERSION}\"" },
    { file = "pyproject.toml", pattern = "version = \"{VERSION}\"" },
]

[tool.dfc]
allow_undefined_sections = false
require_docstrings = true
check_private = true
sections = [
    { order=1, name="summary",  type="free_text",          required=true,  admonition="note",     prefix="!!!" },
    { order=2, name="details",  type="free_text",          required=false, admonition="abstract", prefix="???+" },
    { order=3, name="params",   type="list_name_and_type", required=false, admonition=false },
    { order=4, name="raises",   type="list_type",          required=false, admonition=false },
    { order=5, name="returns",  type="list_name_and_type", required=false, admonition=false },
    { order=6, name="yields",   type="list_type",          required=false, admonition=false },
    { order=7, name="examples", type="free_text",          required=false, admonition="example",  prefix="???+" },
    { order=8, name="notes",    type="free_text",          required=false, admonition="note",     prefix="???" },
]

[build-system]
requires = ["uv_build>=0.8.17,<0.9.0"]
build-backend = "uv_build"
