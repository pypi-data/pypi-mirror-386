[project]
name = "arbor-ai"
version = "0.2.13"
description = "A framework for optimizing DSPy programs"
authors = [
    {name = "Noah Ziems", email = "nziems2@nd.edu"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "torch>=2.7.0",
    "fastapi",
    "uvicorn",
    "click",
    "python-multipart",
    "pydantic-settings",
    "dspy",
    "vllm>=0.9.1",
    "transformers",
    "trl==0.23.1",
    "peft",
    "ray>=2.9",
    "setuptools (>=76.0.0,<79.0.1)",
    "pyzmq>=26.4.0",
    "pyyaml>=6.0.2",
    "wandb",
    "httpx",
    "coolname",
    "jq>=1.8.0",
    "textual",
    "verifiers",
    "deepspeed>=0.17.6",
]

[project.scripts]
arbor = "arbor.cli:cli"

[dependency-groups]
dev = [
    # Core server dependencies without heavy ML libs (used for development on Mac)
    "fastapi",
    "uvicorn",
    "click",
    "python-multipart",
    "pydantic-settings",
    "pyzmq>=26.4.0",
    "pyyaml>=6.0.2",
    "httpx",
    "coolname",
    "psutil",
    "requests",
    "openai",  # Lightweight OpenAI client for tests
    # Dev tools
    "pytest",
    "pytest-timeout",
    "pytest-cov",
    "pre-commit",
    "ruff==0.14.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["arbor", "arbor.*"]
exclude = ["tests", "tests.*"]

[tool.coverage.run]
source = ["arbor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "examples/*",
    "arbor/server/services/scripts/*",
    "arbor/server/services/inference/vllm_serve.py",
    "arbor/server/services/inference/vllm_client.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.uv]
package = true

[project.urls]
Homepage = "https://github.com/Ziems/arbor"
Issues = "https://github.com/Ziems/arbor/issues"

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py311"
extend-exclude = ["examples"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "RUF", # ruff-specific rules
    "Q",   # flake8-quotes
]
ignore = [
    "B008",  # Allow FastAPI dependency declarations
    "B027",  # Allow non-abstract empty methods in abstract base classes
    "B006",  # Allow mutable defaults in existing constructors
    "B905",  # Allow zip without strict flag in legacy loops
    "B904",  # Allow raise custom exceptions in except blocks
    "B007",  # Allow unused loop variables for tuple unpacking
    "B020",  # Allow loop variables shadowing iterables when intentional
    "C414",  # Allow redundant list() usage inside sorted for clarity
    "C901",  # Ignore complexity checking for now
    "E501",  # Ignore line length errors (handled by formatter)
    "E721",  # Allow using == to compare with type
    "F403",  # Allow wildcard imports
    "FBT003", # Allow boolean positional values in function calls
    "I001",  # Allow existing import ordering until cleaned up
    "N806",  # Allow uppercase local variables for clarity
    "N818",  # Allow non-Error exception suffix for compatibility
    "Q000",  # Allow existing quote style in a few places
    "RUF005", # Allow using + operator to concatenate collections
    "RUF001", # Allow non-ASCII characters in strings when meaningful
    "RUF003", # Allow typographic punctuation in comments
    "RUF013", # Allow implicit Optional[...] annotations
    "RUF010", # Allow implicit str conversion when logging exceptions
    "RUF012", # Allow mutable class attributes without ClassVar for now
    "RUF019", # Allow key checks before dict access in legacy code
    "RUF022", # Allow unsorted __all__ value
    "UP006",  # Allow typing.List style annotations
    "UP007",  # Allow Optional[T] syntax
    "UP015",  # Allow explicit read mode
    "UP024",  # Allow socket.error alias
    "UP031",  # Allow percent format
    "UP035",  # Allow python typing modules
    "UP037",  # Allow quoted annotations until upgrade
    "UP039",  # Allow explicit base class parentheses
    "UP045",  # Allow non-runtime Union type expressions
    "W291",  # Allow trailing whitespace in generated blocks
    "W292",  # Allow missing newline at EOF in legacy files
    "W293",  # Allow whitespace on blank lines
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false
docstring-code-format = false

[tool.ruff.lint.isort]
known-first-party = ["arbor"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true
