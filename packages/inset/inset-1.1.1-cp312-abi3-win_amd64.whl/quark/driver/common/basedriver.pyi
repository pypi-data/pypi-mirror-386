import abc
import numpy as np
import types
from .quantity import Quantity as Quantity, newcfg as newcfg
from abc import ABC, abstractmethod
from typing import Any

PATTERN: str

def compress(value: np.ndarray): ...
def decompress(data: np.ndarray, indices: np.ndarray, shape: tuple): ...

class BaseDriver(ABC, metaclass=abc.ABCMeta):
    segment: tuple
    CHs: list[int | str]
    quants: list[Quantity]
    addr: str
    host: str
    port: int
    timeout: float
    model: str
    srate: float
    config: dict
    quantities: dict[str, Quantity]
    def __init__(self, addr: str = '192.168.1.42', **kw) -> None: ...
    def __del__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exception_type: type[BaseException] | None, exception_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def info(self): ...
    def dict_from_quantity(self): ...
    @abstractmethod
    def open(self, **kw): ...
    @abstractmethod
    def close(self, **kw): ...
    @abstractmethod
    def write(self, name: str, value: Any, **kw): ...
    @abstractmethod
    def read(self, name: str, **kw): ...
    def cancel(self) -> None: ...
    def check(self, name: str, channel: int | str): ...
    def update(self, name: str, value: Any, channel: int | str = 1): ...
    def setValue(self, name: str, value: Any, **kw): ...
    def getValue(self, name: str, **kw): ...
