# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .multipart_part import MultipartPart


class Body_Json(UniversalBaseModel):
    kind: typing.Literal["json"] = "json"
    data: str
    mime_type: typing.Optional[str] = pydantic.Field(alias="mimeType", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Body_Form(UniversalBaseModel):
    kind: typing.Literal["form"] = "form"
    fields: typing.Dict[str, str]
    mime_type: typing.Optional[str] = pydantic.Field(alias="mimeType", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Body_Multipart(UniversalBaseModel):
    kind: typing.Literal["multipart"] = "multipart"
    parts: typing.List[MultipartPart]
    mime_type: typing.Optional[str] = pydantic.Field(alias="mimeType", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Body_Text(UniversalBaseModel):
    kind: typing.Literal["text"] = "text"
    value: str
    mime_type: typing.Optional[str] = pydantic.Field(alias="mimeType", default=None)
    encoding: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Body_Binary(UniversalBaseModel):
    kind: typing.Literal["binary"] = "binary"
    base_64: str = pydantic.Field(alias="base64")
    mime_type: typing.Optional[str] = pydantic.Field(alias="mimeType", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


Body = typing.Union[Body_Json, Body_Form, Body_Multipart, Body_Text, Body_Binary]
