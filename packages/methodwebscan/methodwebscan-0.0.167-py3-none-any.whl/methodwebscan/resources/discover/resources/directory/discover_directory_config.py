# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....common.resources.http.http_method import HttpMethod
from .wordlist_size import WordlistSize
from .wordlist_type import WordlistType


class DiscoverDirectoryConfig(UniversalBaseModel):
    targets: typing.List[str]
    paths: typing.Optional[typing.List[str]] = None
    wordlist_type: typing.Optional[WordlistType] = pydantic.Field(alias="wordlistType", default=None)
    wordlist_size: typing.Optional[WordlistSize] = pydantic.Field(alias="wordlistSize", default=None)
    http_methods: typing.List[HttpMethod] = pydantic.Field(alias="httpMethods")
    response_codes: str = pydantic.Field(alias="responseCodes")
    ignore_base_content_match: bool = pydantic.Field(alias="ignoreBaseContentMatch")
    verify_tls: bool = pydantic.Field(alias="verifyTls")
    threshold: float
    timeout: int
    max_redirects_baseline_request: int = pydantic.Field(alias="maxRedirectsBaselineRequest")
    max_runtime: int = pydantic.Field(alias="maxRuntime")
    retries: int
    sleep: int
    threads: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
