# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs


class RequestSchema(UniversalBaseModel):
    type: typing.List[str]
    properties: typing.Optional[typing.List["SchemaProperty"]] = None
    required: typing.Optional[typing.List[str]] = None
    items: typing.Optional["RequestSchema"] = None
    additional_properties: typing.Optional["RequestSchema"] = pydantic.Field(alias="additionalProperties", default=None)
    all_of: typing.Optional[typing.List["RequestSchema"]] = pydantic.Field(alias="allOf", default=None)
    one_of: typing.Optional[typing.List["RequestSchema"]] = pydantic.Field(alias="oneOf", default=None)
    any_of: typing.Optional[typing.List["RequestSchema"]] = pydantic.Field(alias="anyOf", default=None)
    not_: typing.Optional["RequestSchema"] = pydantic.Field(alias="not", default=None)
    description: typing.Optional[str] = None
    format: typing.Optional[str] = None
    default: typing.Optional[str] = None
    example: typing.Optional[typing.Optional[typing.Any]] = None
    enum: typing.Optional[typing.List[typing.Optional[typing.Any]]] = None
    multiple_of: typing.Optional[float] = pydantic.Field(alias="multipleOf", default=None)
    maximum: typing.Optional[float] = None
    exclusive_maximum: typing.Optional[bool] = pydantic.Field(alias="exclusiveMaximum", default=None)
    minimum: typing.Optional[float] = None
    exclusive_minimum: typing.Optional[bool] = pydantic.Field(alias="exclusiveMinimum", default=None)
    max_length: typing.Optional[int] = pydantic.Field(alias="maxLength", default=None)
    min_length: typing.Optional[int] = pydantic.Field(alias="minLength", default=None)
    pattern: typing.Optional[str] = None
    max_items: typing.Optional[int] = pydantic.Field(alias="maxItems", default=None)
    min_items: typing.Optional[int] = pydantic.Field(alias="minItems", default=None)
    unique_items: typing.Optional[bool] = pydantic.Field(alias="uniqueItems", default=None)
    max_properties: typing.Optional[int] = pydantic.Field(alias="maxProperties", default=None)
    min_properties: typing.Optional[int] = pydantic.Field(alias="minProperties", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


from .schema_property import SchemaProperty  # noqa: E402, F401, I001

update_forward_refs(RequestSchema)
