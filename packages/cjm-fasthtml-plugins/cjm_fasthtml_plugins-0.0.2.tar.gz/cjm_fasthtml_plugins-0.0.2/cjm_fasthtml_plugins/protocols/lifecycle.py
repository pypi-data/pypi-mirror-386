"""Protocol for plugins that manage child processes, containers, or other external resources"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/protocols/lifecycle.ipynb.

# %% auto 0
__all__ = ['LifecycleAwarePlugin', 'is_lifecycle_aware', 'get_all_managed_pids']

# %% ../../nbs/protocols/lifecycle.ipynb 3
from typing import Protocol, runtime_checkable, List, Dict, Any

from ..core.execution_mode import PluginExecutionMode

# %% ../../nbs/protocols/lifecycle.ipynb 5
@runtime_checkable
class LifecycleAwarePlugin(Protocol):
    """Protocol for plugins that manage external resources like child processes, containers, or cloud resources."""
    
    def get_execution_mode(self) -> PluginExecutionMode:  # PluginExecutionMode indicating how this plugin executes
        """Get the execution mode of this plugin."""
        ...
    
    def get_child_pids(self) -> List[int]:  # List of process IDs (empty list if no child processes)
        """Get PIDs of any child processes managed by this plugin."""
        ...
    
    def get_managed_resources(self) -> Dict[str, Any]:  # Dictionary with resource information
        """Get information about managed resources (server URLs, container IDs, conda envs, etc.)."""
        ...
    
    def force_cleanup(self) -> None:
        """Force cleanup of all managed resources (kill processes, stop containers, etc.)."""
        ...

# %% ../../nbs/protocols/lifecycle.ipynb 10
def is_lifecycle_aware(plugin: Any  # Plugin instance to check
                      ) -> bool:  # True if plugin implements the protocol
    """Check if a plugin implements the LifecycleAwarePlugin protocol."""
    return isinstance(plugin, LifecycleAwarePlugin)

def get_all_managed_pids(plugin: Any  # Plugin instance
                        ) -> List[int]:  # List of all PIDs (empty if plugin not lifecycle-aware)
    """Get all PIDs managed by a plugin (including children)."""
    if not is_lifecycle_aware(plugin):
        return []
    
    pids = plugin.get_child_pids()
    
    # Could be extended to recursively get children of children
    # using psutil if needed
    
    return pids
