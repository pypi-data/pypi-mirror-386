"""Utility functions for plugin registry operations"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/helpers.ipynb.

# %% auto 0
__all__ = ['filter_plugins_by_execution_mode', 'get_cloud_plugins', 'get_local_plugins', 'get_configured_plugins',
           'get_unconfigured_plugins', 'get_plugin_stats']

# %% ../../nbs/utils/helpers.ipynb 3
from typing import Any, Dict, List
from ..core.metadata import PluginMetadata
from ..core.execution_mode import PluginExecutionMode

# %% ../../nbs/utils/helpers.ipynb 5
def filter_plugins_by_execution_mode(
    plugins: List[PluginMetadata],  # List of plugin metadata
    mode: PluginExecutionMode  # Execution mode to filter by
) -> List[PluginMetadata]:  # Filtered list
    """Filter plugins by execution mode."""
    return [p for p in plugins if p.execution_mode == mode]

def get_cloud_plugins(plugins: List[PluginMetadata]  # List of plugin metadata
                     ) -> List[PluginMetadata]:  # List of cloud/remote plugins
    """Get all cloud/remote execution plugins."""
    return [p for p in plugins if p.is_cloud_execution()]

def get_local_plugins(plugins: List[PluginMetadata]  # List of plugin metadata
                     ) -> List[PluginMetadata]:  # List of local plugins
    """Get all local execution plugins."""
    return [p for p in plugins if p.is_local_execution()]

def get_configured_plugins(plugins: List[PluginMetadata]  # List of plugin metadata
                          ) -> List[PluginMetadata]:  # List of configured plugins
    """Get plugins that have saved configuration."""
    return [p for p in plugins if p.is_configured]

def get_unconfigured_plugins(plugins: List[PluginMetadata]  # List of plugin metadata
                            ) -> List[PluginMetadata]:  # List of unconfigured plugins
    """Get plugins that need configuration."""
    return [p for p in plugins if not p.is_configured]

# %% ../../nbs/utils/helpers.ipynb 8
def get_plugin_stats(plugins: List[PluginMetadata]  # List of plugin metadata
                    ) -> Dict[str, Any]:  # Dictionary with plugin statistics
    """Get statistics about a list of plugins."""
    return {
        "total": len(plugins),
        "configured": len([p for p in plugins if p.is_configured]),
        "unconfigured": len([p for p in plugins if not p.is_configured]),
        "local": len([p for p in plugins if p.is_local_execution()]),
        "cloud": len([p for p in plugins if p.is_cloud_execution()]),
        "with_active_resources": len([p for p in plugins if p.has_active_resources()]),
        "by_category": {}
    }
