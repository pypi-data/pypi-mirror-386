"""Protocol for plugins that use cloud or remote computing resources"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/protocols/cloud_aware.ipynb.

# %% auto 0
__all__ = ['CloudAwarePlugin', 'is_cloud_aware', 'has_active_cloud_resources', 'get_total_estimated_cost']

# %% ../../nbs/protocols/cloud_aware.ipynb 3
from typing import Protocol, runtime_checkable, Optional

from ..core.metadata import RemoteResourceInfo

# %% ../../nbs/protocols/cloud_aware.ipynb 5
@runtime_checkable
class CloudAwarePlugin(Protocol):
    """Protocol for plugins that use cloud/remote resources."""
    
    def get_remote_resource_info(self) -> Optional[RemoteResourceInfo]:  # RemoteResourceInfo if resources are provisioned, None otherwise
        """Get information about remote/cloud resources."""
        ...
    
    def provision_remote_resource(self, **config) -> RemoteResourceInfo:  # RemoteResourceInfo with details about provisioned resource
        """Provision cloud resources (VM, container, etc.)."""
        ...
    
    def check_remote_resource_status(self) -> str:  # Status string (e.g., 'running', 'stopped', 'provisioning')
        """Check status of remote resource."""
        ...
    
    def terminate_remote_resource(self) -> bool:  # True if termination succeeded
        """Terminate/stop cloud resources to avoid costs."""
        ...
    
    def estimate_cost(self, 
                     duration_hours: float  # Estimated runtime in hours
                    ) -> float:  # Estimated cost in USD
        """Estimate cost for running this duration."""
        ...

# %% ../../nbs/protocols/cloud_aware.ipynb 10
from typing import Any, List

def is_cloud_aware(plugin: Any  # Plugin instance to check
                  ) -> bool:  # True if plugin implements the protocol
    """Check if a plugin implements the CloudAwarePlugin protocol."""
    return isinstance(plugin, CloudAwarePlugin)

def has_active_cloud_resources(plugin: Any  # Plugin instance
                               ) -> bool:  # True if plugin has running cloud resources
    """Check if plugin has active cloud resources."""
    if not is_cloud_aware(plugin):
        return False
    
    resource_info = plugin.get_remote_resource_info()
    if not resource_info:
        return False
    
    return resource_info.status == "running"

def get_total_estimated_cost(plugins: List[Any],  # List of plugin instances
                            duration_hours: float = 1.0  # Duration to estimate for
                           ) -> float:  # Total estimated cost in USD
    """Get total estimated cost for multiple plugins."""
    total = 0.0
    for plugin in plugins:
        if is_cloud_aware(plugin) and has_active_cloud_resources(plugin):
            total += plugin.estimate_cost(duration_hours)
    return total
