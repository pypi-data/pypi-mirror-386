"""Plugin metadata structures for tracking plugin information and resources"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/metadata.ipynb.

# %% auto 0
__all__ = ['RemoteResourceInfo', 'PluginMetadata']

# %% ../../nbs/core/metadata.ipynb 3
from dataclasses import dataclass, field
from typing import Dict, Any, Optional, List

from .execution_mode import PluginExecutionMode, CloudProviderType

# %% ../../nbs/core/metadata.ipynb 5
@dataclass
class RemoteResourceInfo:
    """Information about a remote/cloud resource used by a plugin."""
    provider: CloudProviderType  # Cloud provider or service
    region: Optional[str] = None  # Cloud region/zone
    instance_id: Optional[str] = None  # VM/instance identifier
    job_id: Optional[str] = None  # Job/task identifier on remote system
    endpoint_url: Optional[str] = None  # HTTP endpoint for API access
    ssh_host: Optional[str] = None  # SSH host for remote access
    ssh_port: int = 22  # SSH port number
    status: str = "unknown"  # Current status (provisioning, running, stopping, stopped)
    resource_type: Optional[str] = None  # Instance type (e.g., 'p3.2xlarge', 'n1-standard-8')
    gpu_count: int = 0  # Number of GPUs
    gpu_type: Optional[str] = None  # GPU model (e.g., 'V100', 'A100', 'H100')
    estimated_cost_per_hour: Optional[float] = None  # Estimated hourly cost in USD
    metadata: Dict[str, Any] = field(default_factory=dict)  # Additional provider-specific metadata

# %% ../../nbs/core/metadata.ipynb 9
@dataclass
class PluginMetadata:
    """Metadata describing a plugin for display and resource management without loading the plugin instance."""
    name: str  # Internal plugin identifier
    category: str  # Plugin category string (application-defined)
    title: str  # Display title for the plugin
    config_schema: Dict[str, Any]  # JSON Schema for plugin configuration
    description: Optional[str] = None  # Plugin description
    version: Optional[str] = None  # Plugin version
    is_configured: bool = False  # Whether the plugin has saved configuration
    
    # Lifecycle metadata
    execution_mode: PluginExecutionMode = PluginExecutionMode.IN_PROCESS  # How the plugin executes
    manages_child_processes: bool = False  # Whether plugin spawns child processes
    manages_external_resources: bool = False  # Whether plugin manages Docker/servers/etc.
    
    # Local resource tracking
    spawned_pids: List[int] = field(default_factory=list)  # List of child process PIDs
    container_id: Optional[str] = None  # Docker container ID if applicable
    conda_env_name: Optional[str] = None  # Conda environment name if applicable
    
    # Cloud/Remote resource tracking
    remote_resource: Optional[RemoteResourceInfo] = None  # Remote resource information if applicable
    
    def get_unique_id(self) -> str:  # String in format 'category_name'
        """Generate unique ID for this plugin."""
        return f"{self.category}_{self.name}"
    
    def is_local_execution(self) -> bool:  # True if execution is local
        """Check if plugin executes locally (not cloud/remote)."""
        local_modes = {
            PluginExecutionMode.IN_PROCESS,
            PluginExecutionMode.SUBPROCESS,
            PluginExecutionMode.DOCKER,
            PluginExecutionMode.CONDA_ENV,
            PluginExecutionMode.EXTERNAL_SERVICE
        }
        return self.execution_mode in local_modes
    
    def is_cloud_execution(self) -> bool:  # True if execution is cloud/remote
        """Check if plugin executes on cloud/remote resources."""
        return not self.is_local_execution()
    
    def has_active_resources(self) -> bool:  # True if plugin has child processes, containers, or cloud resources
        """Check if plugin has active managed resources."""
        return bool(
            self.spawned_pids or
            self.container_id or
            (self.remote_resource and self.remote_resource.status == "running")
        )
