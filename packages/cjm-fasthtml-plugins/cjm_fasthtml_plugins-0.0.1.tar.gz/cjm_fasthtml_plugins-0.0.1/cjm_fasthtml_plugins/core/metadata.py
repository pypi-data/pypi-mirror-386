"""Plugin metadata structures for tracking plugin information and resources"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/metadata.ipynb.

# %% auto 0
__all__ = ['RemoteResourceInfo', 'PluginMetadata']

# %% ../../nbs/core/metadata.ipynb 3
from dataclasses import dataclass, field
from typing import Dict, Any, Optional, List

from .execution_mode import PluginExecutionMode, CloudProviderType

# %% ../../nbs/core/metadata.ipynb 5
@dataclass
class RemoteResourceInfo:
    """Information about a remote/cloud resource.
    
    Tracks details about cloud VMs, containers, or other remote resources
    that a plugin is using for execution.
    
    Attributes:
        provider: Cloud provider or service
        region: Cloud region/zone
        instance_id: VM/instance identifier
        job_id: Job/task identifier on remote system
        endpoint_url: HTTP endpoint for API access
        ssh_host: SSH host for remote access
        ssh_port: SSH port number
        status: Current status (provisioning, running, stopping, stopped)
        resource_type: Instance type (e.g., 'p3.2xlarge', 'n1-standard-8')
        gpu_count: Number of GPUs
        gpu_type: GPU model (e.g., 'V100', 'A100', 'H100')
        estimated_cost_per_hour: Estimated hourly cost in USD
        metadata: Additional provider-specific metadata
    """
    provider: CloudProviderType
    region: Optional[str] = None
    instance_id: Optional[str] = None
    job_id: Optional[str] = None
    endpoint_url: Optional[str] = None
    ssh_host: Optional[str] = None
    ssh_port: int = 22
    status: str = "unknown"  # provisioning, running, stopping, stopped
    resource_type: Optional[str] = None
    gpu_count: int = 0
    gpu_type: Optional[str] = None
    estimated_cost_per_hour: Optional[float] = None
    metadata: Dict[str, Any] = field(default_factory=dict)

# %% ../../nbs/core/metadata.ipynb 9
@dataclass
class PluginMetadata:
    """Metadata describing a plugin.
    
    This dataclass holds information about a plugin that can be displayed
    in settings UI and used for resource management without loading the
    actual plugin instance.
    
    Categories are simple strings - applications choose their own category names
    based on their needs (e.g., 'transcription', 'llm', 'image_generation', etc.).
    
    Attributes:
        name: Internal plugin identifier
        category: Plugin category string (application-defined)
        title: Display title for the plugin
        config_schema: JSON Schema for plugin configuration
        description: Optional plugin description
        version: Optional plugin version
        is_configured: Whether the plugin has saved configuration
        
        # Lifecycle metadata
        execution_mode: How the plugin executes (in-process, subprocess, cloud, etc.)
        manages_child_processes: Whether plugin spawns child processes
        manages_external_resources: Whether plugin manages Docker/servers/etc.
        
        # Local resource tracking
        spawned_pids: List of child process PIDs
        container_id: Docker container ID if applicable
        conda_env_name: Conda environment name if applicable
        
        # Cloud/Remote resource tracking
        remote_resource: Remote resource information if applicable
    
    Example:
        ```python
        # Simple in-process plugin
        metadata = PluginMetadata(
            name="whisper_base",
            category="transcription",
            title="Whisper Base Model",
            config_schema={...},
            execution_mode=PluginExecutionMode.IN_PROCESS
        )
        
        # Plugin with vLLM server (subprocess)
        metadata = PluginMetadata(
            name="voxtral_vllm",
            category="transcription",
            title="Voxtral via vLLM",
            config_schema={...},
            execution_mode=PluginExecutionMode.SUBPROCESS,
            manages_child_processes=True,
            spawned_pids=[12345, 12346, 12347]
        )
        
        # Cloud-based plugin
        metadata = PluginMetadata(
            name="llm_finetune_cloud",
            category="finetuning",
            title="Cloud LLM Finetuning",
            config_schema={...},
            execution_mode=PluginExecutionMode.CLOUD_GPU,
            manages_external_resources=True,
            remote_resource=RemoteResourceInfo(...)
        )
        ```
    """
    name: str
    category: str
    title: str
    config_schema: Dict[str, Any]
    description: Optional[str] = None
    version: Optional[str] = None
    is_configured: bool = False
    
    # Lifecycle metadata
    execution_mode: PluginExecutionMode = PluginExecutionMode.IN_PROCESS
    manages_child_processes: bool = False
    manages_external_resources: bool = False
    
    # Local resource tracking
    spawned_pids: List[int] = field(default_factory=list)
    container_id: Optional[str] = None
    conda_env_name: Optional[str] = None
    
    # Cloud/Remote resource tracking
    remote_resource: Optional[RemoteResourceInfo] = None
    
    def get_unique_id(self) -> str:
        """Generate unique ID for this plugin.
        
        Returns:
            String in format 'category_name'
        """
        return f"{self.category}_{self.name}"
    
    def is_local_execution(self) -> bool:
        """Check if plugin executes locally (not cloud/remote).
        
        Returns:
            True if execution is local
        """
        local_modes = {
            PluginExecutionMode.IN_PROCESS,
            PluginExecutionMode.SUBPROCESS,
            PluginExecutionMode.DOCKER,
            PluginExecutionMode.CONDA_ENV,
            PluginExecutionMode.EXTERNAL_SERVICE
        }
        return self.execution_mode in local_modes
    
    def is_cloud_execution(self) -> bool:
        """Check if plugin executes on cloud/remote resources.
        
        Returns:
            True if execution is cloud/remote
        """
        return not self.is_local_execution()
    
    def has_active_resources(self) -> bool:
        """Check if plugin has active managed resources.
        
        Returns:
            True if plugin has child processes, containers, or cloud resources
        """
        return bool(
            self.spawned_pids or
            self.container_id or
            (self.remote_resource and self.remote_resource.status == "running")
        )
