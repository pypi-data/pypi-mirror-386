"""Protocol for plugins that use cloud or remote computing resources"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/protocols/cloud_aware.ipynb.

# %% auto 0
__all__ = ['CloudAwarePlugin', 'is_cloud_aware', 'has_active_cloud_resources', 'get_total_estimated_cost']

# %% ../../nbs/protocols/cloud_aware.ipynb 3
from typing import Protocol, runtime_checkable, Optional

from ..core.metadata import RemoteResourceInfo

# %% ../../nbs/protocols/cloud_aware.ipynb 5
@runtime_checkable
class CloudAwarePlugin(Protocol):
    """Protocol for plugins that use cloud/remote resources.
    
    Plugins implementing this protocol provide information about
    cloud resources they use, enabling cost tracking, resource
    management, and emergency shutdown.
    
    Example:
        ```python
        class CloudFinetunePlugin(FinetuningPlugin, CloudAwarePlugin):
            def get_remote_resource_info(self) -> Optional[RemoteResourceInfo]:
                if not self.remote_instance:
                    return None
                return RemoteResourceInfo(
                    provider=CloudProviderType.AWS,
                    instance_id=self.instance_id,
                    status="running",
                    gpu_count=8,
                    estimated_cost_per_hour=24.50
                )
            
            def provision_remote_resource(self, **config) -> RemoteResourceInfo:
                # Launch EC2 instance
                return self.remote_resource_info
            
            def terminate_remote_resource(self) -> bool:
                # Terminate EC2 instance
                return True
            
            def estimate_cost(self, duration_hours: float) -> float:
                return duration_hours * 24.50
        ```
    """
    
    def get_remote_resource_info(self) -> Optional[RemoteResourceInfo]:
        """Get information about remote/cloud resources.
        
        Returns:
            RemoteResourceInfo if resources are provisioned, None otherwise
        """
        ...
    
    def provision_remote_resource(self, **config) -> RemoteResourceInfo:
        """Provision cloud resources (VM, container, etc.).
        
        Args:
            **config: Provider-specific configuration
        
        Returns:
            RemoteResourceInfo with details about provisioned resource
        """
        ...
    
    def check_remote_resource_status(self) -> str:
        """Check status of remote resource.
        
        Returns:
            Status string (e.g., 'running', 'stopped', 'provisioning')
        """
        ...
    
    def terminate_remote_resource(self) -> bool:
        """Terminate/stop cloud resources to avoid costs.
        
        Returns:
            True if termination succeeded
        """
        ...
    
    def estimate_cost(self, duration_hours: float) -> float:
        """Estimate cost for running this duration.
        
        Args:
            duration_hours: Estimated runtime in hours
        
        Returns:
            Estimated cost in USD
        """
        ...

# %% ../../nbs/protocols/cloud_aware.ipynb 10
from typing import Any, List

def is_cloud_aware(plugin: Any) -> bool:
    """Check if a plugin implements the CloudAwarePlugin protocol.
    
    Args:
        plugin: Plugin instance to check
    
    Returns:
        True if plugin implements the protocol
    """
    return isinstance(plugin, CloudAwarePlugin)

def has_active_cloud_resources(plugin: Any) -> bool:
    """Check if plugin has active cloud resources.
    
    Args:
        plugin: Plugin instance
    
    Returns:
        True if plugin has running cloud resources
    """
    if not is_cloud_aware(plugin):
        return False
    
    resource_info = plugin.get_remote_resource_info()
    if not resource_info:
        return False
    
    return resource_info.status == "running"

def get_total_estimated_cost(plugins: List[Any], duration_hours: float = 1.0) -> float:
    """Get total estimated cost for multiple plugins.
    
    Args:
        plugins: List of plugin instances
        duration_hours: Duration to estimate for
    
    Returns:
        Total estimated cost in USD
    """
    total = 0.0
    for plugin in plugins:
        if is_cloud_aware(plugin) and has_active_cloud_resources(plugin):
            total += plugin.estimate_cost(duration_hours)
    return total
