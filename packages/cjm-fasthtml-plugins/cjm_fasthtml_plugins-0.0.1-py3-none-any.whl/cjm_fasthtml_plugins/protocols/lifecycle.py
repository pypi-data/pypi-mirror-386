"""Protocol for plugins that manage child processes, containers, or other external resources"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/protocols/lifecycle.ipynb.

# %% auto 0
__all__ = ['LifecycleAwarePlugin', 'is_lifecycle_aware', 'get_all_managed_pids']

# %% ../../nbs/protocols/lifecycle.ipynb 3
from typing import Protocol, runtime_checkable, List, Dict, Any

from ..core.execution_mode import PluginExecutionMode

# %% ../../nbs/protocols/lifecycle.ipynb 5
@runtime_checkable
class LifecycleAwarePlugin(Protocol):
    """Protocol for plugins that manage external resources.
    
    Plugins implementing this protocol provide information about
    child processes, containers, or other resources they manage.
    
    This enables:
    - Resource tracking across the application
    - Proper cleanup when stopping plugins
    - Conflict detection for GPU/memory usage
    - Cost tracking for cloud resources
    
    Example:
        ```python
        class VoxtralVLLMPlugin(TranscriptionPlugin, LifecycleAwarePlugin):
            def get_execution_mode(self) -> PluginExecutionMode:
                return PluginExecutionMode.SUBPROCESS
            
            def get_child_pids(self) -> List[int]:
                if not self.server or not self.server.process:
                    return []
                return [self.server.process.pid]
            
            def get_managed_resources(self) -> Dict[str, Any]:
                return {
                    'server_url': self.server.base_url,
                    'is_running': self.server.is_running()
                }
            
            def force_cleanup(self) -> None:
                if self.server:
                    self.server.stop()
        ```
    """
    
    def get_execution_mode(self) -> PluginExecutionMode:
        """Get the execution mode of this plugin.
        
        Returns:
            PluginExecutionMode indicating how this plugin executes
        """
        ...
    
    def get_child_pids(self) -> List[int]:
        """Get PIDs of any child processes managed by this plugin.
        
        For plugins that spawn subprocesses (e.g., vLLM servers), this
        should return all child process PIDs for resource tracking.
        
        Returns:
            List of process IDs (empty list if no child processes)
        """
        ...
    
    def get_managed_resources(self) -> Dict[str, Any]:
        """Get information about managed resources.
        
        This can include:
        - Server URLs and ports
        - Container IDs
        - Conda environment names
        - Status information
        - Any other plugin-specific resource info
        
        Returns:
            Dictionary with resource information
        """
        ...
    
    def force_cleanup(self) -> None:
        """Force cleanup of all managed resources.
        
        This should be more aggressive than regular cleanup(),
        killing processes, stopping containers, etc. Used for
        emergency shutdown scenarios.
        """
        ...

# %% ../../nbs/protocols/lifecycle.ipynb 10
def is_lifecycle_aware(plugin: Any) -> bool:
    """Check if a plugin implements the LifecycleAwarePlugin protocol.
    
    Args:
        plugin: Plugin instance to check
    
    Returns:
        True if plugin implements the protocol
    """
    return isinstance(plugin, LifecycleAwarePlugin)

def get_all_managed_pids(plugin: Any) -> List[int]:
    """Get all PIDs managed by a plugin (including children).
    
    Args:
        plugin: Plugin instance
    
    Returns:
        List of all PIDs (empty if plugin not lifecycle-aware)
    """
    if not is_lifecycle_aware(plugin):
        return []
    
    pids = plugin.get_child_pids()
    
    # Could be extended to recursively get children of children
    # using psutil if needed
    
    return pids
