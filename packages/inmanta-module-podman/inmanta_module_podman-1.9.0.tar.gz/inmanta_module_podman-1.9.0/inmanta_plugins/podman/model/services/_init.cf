"""
    Copyright 2025 Guillaume Everarts de Velp

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: edvgui@gmail.com
"""
import podman
import podman::services::systemd_auto_update
import podman::services::systemd_container
import podman::services::systemd_pod
import podman::services::systemd_service
import files


typedef service_state_t as string matching self in ["configured", "stopped", "restart", "running", "removed"]


entity QuadletUnitFile extends files::SystemdUnitFile:
    """
    Extension to the systemd unit file that adds the container section
    used by quadlet.
    """
end
QuadletUnitFile.container [0:1] -- Container


entity SystemdService:
    """
    A systemd service is an entity that will be refined into a systemd config file.
    Each container or pod that is part of the service will also have its own systemd
    config file.

    This entity offers some kind of lifecycle which has following states:
        - configured: All configuration files should be present, and we don't
            manage whether the service should be running or not.
        - stopped: That means that all configuration files should be present on
            the host, but the service should not be running.
        - running: Same as stopped, except that the service should be running.
        - restart: Meaning that the service should be restarted, regardless of whether
            it was running or not before.
        - removed: All configuration files should be removed.

    :attr name: The name of the server, the unit file created will be named accordingly, so
        the name should end with the .service suffix.
    :attr description: A description for the unit.
    :attr on_calendar: When specified, also configure a timer unit, that will trigger the
        service unit for matching calendar times.  The expression in this field should be
        a valid according to the systemd.timer (5) specifications.
    :attr on_failure: one or more units that are activated when this unit enters the "failed" state.
    :attr listen_stream: When specified, also configure a socket unit that listens on the
        provided streams, and starts the service when receiving incoming traffic.
        The streams defined will be automatically available to the container running in
        the service.
    :attr systemd_unit_dir: The directory in which the unit should be created.
    :attr systemd_container_dir: The directory in which the quadlet file should be created.
    :attr systemctl_command: The systemctl command to run for this service, defaults to
        ["systemctl"] but can be set to ["systemctl", "--user"] for unprivileged units.
    :attr state: The desired execution state for this service.
    :attr enabled: Whether the systemd service should be enabled.
    :attr quadlet: Whether to generate a quadlet file instead of a systemd unit

    :attr service_name: Attribute used internally to save the name of the top-level
        service to manage.
    :attr timer_name: Attribute used internally to save the name of the top-level
        timer to manage.  It is derived from the service_name attribute, swaping its
        .service suffix for a .timer suffix.
    :attr socket_name: Attribute used internally to save the name of the top-level
        socket to manage.  It is derived from the service_name attribute, swaping its
        .service suffix for a .socket suffix.
    :attr unit_name: The name of the main unit that should be enabled/disabled and
        started/stopped.  When a timer is configured it will be the timer, when a socket
        is configured, it will be the socket.  Otherwise it will be the service.
    """
    string? name = null
    string? description = null
    string? on_calendar = null
    string[]? on_failure = null
    string[]? listen_stream = null
    string systemd_unit_dir = "/etc/systemd/system"
    string? systemd_container_dir = null
    string[] systemctl_command = ["systemctl"]
    service_state_t state
    bool enabled = true
    bool quadlet = false

    string service_name
    string timer_name
    string socket_name
    string unit_name
end
SystemdService._resource [1] -- podman::ResourceABC._systemd_service [0:1]
SystemdService.resources [0:] -- std::Resource
SystemdService.unit [1] -- files::SystemdUnitFile
SystemdService.timer [0:1] -- files::SystemdUnitFile
SystemdService.socket [0:1] -- files::SystemdUnitFile


entity SystemdPod extends SystemdService:
    """
    Systemd service that is composed of a pod, possiblty with multiple containers
    attached to it.
    """
end
SystemdPod.pod [1] -- podman::Pod


entity SystemdContainer extends SystemdService:
    """
    Systemd service that is composed of a single container.
    """
end
SystemdContainer.container [1] -- podman::Container


entity SystemdAutoUpdate extends SystemdService:
    """
    Systemd service that manage the auto-update functionality of podman.
    """
    string? on_calendar = "daily"
    string[]? on_failure = null
end
SystemdAutoUpdate.auto_update [1] -- podman::AutoUpdate


implementation container_file_content for QuadletUnitFile:
    """
    Resolve the content of the unit file, generate it from a jinja template.
    """
    unit_file = self
    container = self.container

    # Load the content based on the template
    self.content = (
        std::template("files/systemd_unit.j2")
        + std::template("podman/service.container.j2")
    )
end

implement QuadletUnitFile using container_file_content when self.container is defined
