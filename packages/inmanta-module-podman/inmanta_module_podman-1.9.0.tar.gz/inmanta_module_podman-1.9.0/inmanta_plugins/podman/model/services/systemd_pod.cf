"""
    Copyright 2025 Guillaume Everarts de Velp

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: edvgui@gmail.com
"""
import std
import exec
import podman
import files
import files::systemd_unit


implementation resource for SystemdPod:
    """
    Setup the container like relation as the pod attached to this service.
    """
    self._resource = self.pod
end


implementation service_name for SystemdPod:
    """
    Setup the service name for the pod, using the pod name.
    """
    self.service_name = self.name is defined ? self.name : f"pod-{self.pod.name}.service"
end


implementation unit_file for SystemdPod:
    """
    Deploy and cleanup all the configuration files required by our service.
    """
    user = self.pod.owner
    host = self.pod.host

    container_services = [
        container._systemd_service
        for container in self.pod.containers
        if container._systemd_service is defined
    ]

    pid_file = "%t/pod-{{ self.pod.name }}.pid"
    pod_id_file = "%t/pod-{{ self.pod.name }}.pod-id"

    # Create the service unit for the pod
    self.unit = files::SystemdUnitFile(
        path=files::path_join(self._systemd_config_dir.path, self.service_name),
        permissions=644,
        owner=user,
        group=user,
        host=host,
        via=self.pod.via is defined ? self.pod.via : null,
        unit=Unit(
            description=self.description is defined ? self.description : f"Podman {self.service_name}",
            documentation=["https://github.com/edvgui/inmanta-module-podman"],
            after=["network-online.target"],
            requires_mounts_for=["%t/containers"],
            before=[service.service_name for service in container_services],
            wants=[
                [service.service_name for service in container_services],
                "network-online.target",
                self.on_calendar is defined ? [self.timer_name] : [],
                self.listen_stream is defined ? [self.socket_name] : [],
            ],
            part_of=[
                self.on_calendar is defined ? [self.timer_name] : [],
                self.listen_stream is defined ? [self.socket_name] : [],
            ],
            on_failure=self.on_failure,
        ),
        service=Service(
            environment={"PODMAN_SYSTEMD_UNIT": "%n"},
            restart="on-failure",
            timeout_stop_sec=70,
            exec_start_pre=[
                podman::pod_create(
                    self.pod,
                    infra_conmon_pidfile=pid_file,
                    pod_id_file=pod_id_file,
                    exit_policy="stop",
                    replace=true,
                ),
            ],
            exec_start=podman::pod_start(
                self.pod,
                pod_id_file=pod_id_file,
            ),
            exec_stop=podman::pod_stop(
                self.pod,
                ignore=true,
                pod_id_file=pod_id_file,
                time=10,
            ),
            exec_stop_post=[
                podman::pod_rm(
                    self.pod,
                    force=true,
                    ignore=true,
                    pod_id_file=pod_id_file,
                ),
            ],
            pid_file=pid_file,
            type=self.on_calendar is defined ? "exec" : "forking",
        ),
        install=Install(
            wanted_by=["default.target"],
        ),
        send_event=true,
        purged=self.state == "removed",
        requires=self.requires,
        provides=self.provides,
    )
    self.unit.requires += self._systemd_config_dir
    self.file_resources += self.unit
end


implement SystemdPod using resource, service_name, unit_file, parents
