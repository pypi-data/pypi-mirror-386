[build-system]
requires = ["setuptools>=80", "wheel", "numpy>=2.0"]
build-backend = "setuptools.build_meta"

[project]
name = "sund"
version = "2.0.3"
description = "A simulation toolbox for ODE and DAE systems, with focus on systems biology applications."
authors = [
    {name = "ISB group @ Linköping University"},
]
maintainers = [
    { name = "William Lövfors", email = "william.lovfors@liu.se" },
    { name = "Henrik Podéus", email = "henrik.podeus.derelov@liu.se"},
]
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
license-files = ["LICENSE.md"]
dependencies = [
    "numpy>=2.0",
    "setuptools>=80.0",
]
keywords = ["sund", "simulation", "ODE", "DAE", "modeling", "toolbox", "systems biology"]
urls = { Homepage = "https://isbgroup.eu/sund-toolbox", Repository = "https://gitlab.liu.se/ISBgroup/projects/sund"}
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
]

[tool.setuptools]
packages = ["sund", "sund._model_deps", "sund._model_deps._include", "sund._model_deps._src"] # Setuptools note: For Python, any directory (with suitable naming) can be imported, even if it does not contain any `.py` files. On the other hand, currently there is no concept of package data directory, all directories are treated like packages.
package-dir = { "" = "src" }
include-package-data = true

[tool.setuptools.package-data]
"sund" = ["_model_deps/**/*"]

[project.scripts]
sund-cleanup = "sund.uninstall_helper:cleanup_package_generated_files"

[dependency-groups]
dev = [
    "matplotlib>=3.9.4",
    "mike>=2.1.3",
    "mkdocs>=1.5.3",
    "mkdocs-include-markdown-plugin>=4.0.4",
    "mkdocs-jupyter>=0.25.1",
    "mkdocs-material>=9.2.7",
    "mkdocstrings[python]>=0.29.1",
    "mkdocstrings-python>=1.1.2",
    "pytest>=8.3.5",
    "scipy>=1.13.1",
    "tox-uv>=1.25.0",
    "ruff>=0.11.11",
    "mkdocs-glightbox>=0.5.1",
    "twine>=6.2.0",
    "pre-commit>=4.3.0",
]

[tool.ruff]
lint.select = ["ALL"]
lint.ignore = [
    "D",       # pydocstyle – don't require docstrings yet
    "ANN",     # type annotations – skip for now
    "PLR2004", # magic values in conditionals – too noisy
    # "T201"     # allow `print()` – useful for quick scripts
]

# Optional but recommended rule groups
lint.extend-select = [
  "I",     # isort – organizes imports
  "F",     # pyflakes – general error checking
  "E",     # pycodestyle – PEP8 enforcement
  "B",     # flake8-bugbear – common bug risks
  "C4",    # flake8-comprehensions – simplify comprehensions
  "SIM",   # flake8-simplify – cleaner Python
  "PERF",  # perflint – performance suggestions
]
exclude = [
    "src/third_party",  # Exclude third-party code
    "tests/test_remove_comments.py"
]

# Ruff configuration
line-length = 100
target-version = "py314"

# Per-file ignore for test code
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",    # pydocstyle – don't require docstrings in tests
    "S101", # Allow `assert` in tests
    "E501",  # Disable line-length enforcement (we'll control this via formatter)
    "T201", # Allow `print()` in tests
    "PLR0913", # Allow many arguments in test functions
    "C416", # Allow comprehensive list testing
    "S301", # Allow pickling in tests
]
"docs/examples/*" = [
    "T201", # Allow `print()` in examples
    "ERA001", # Allow having comments in to explain the code (allows all commented lines)
    "SIM108", # Allow block if-cases in examples
]
"src/sund" = [
    "ERA001", # Allow having comments in the main code (allows all commented lines)
]
ignore = ["COM812"] # trailing comma formatting can conflict with Ruff's own formatter

# Ruff formatter (replaces Black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.tox]
requires = ["tox>=4.19", "tox-uv>=1.25.0"] # load tox-uv in tox's own env
env_list = ["py310", "py311", "py312", "py313", "py314"]
isolated_build = true
skip_missing_interpreters = true

[tool.tox.env_run_base]
description = "Run test with pytest under {base_python}"
deps = ["pytest>=8.3.5"]
commands = [
    ["pytest", "-m", "uninstall"], 
    ["pytest", "-m", "not performance and not uninstall"],
]

[tool.tox.env.py310]
base_python = ["python3.10"]

[tool.tox.env.py311]
base_python = ["python3.11"]

[tool.tox.env.py312]
base_python = ["python3.12"]

[tool.tox.env.py313]
base_python = ["python3.13"]

[tool.tox.env.py314]
base_python = ["python3.14"]

[tool.uv.sources]
sund = { workspace = true }


