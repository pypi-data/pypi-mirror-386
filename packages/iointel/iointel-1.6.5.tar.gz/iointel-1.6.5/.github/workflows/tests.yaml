name: Run tests

env:
  # enable colored output
  # https://github.com/pytest-dev/pytest/issues/7443
  PY_COLORS: 1

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    # use `bash` as shell, as in default mode GH Actions don't use -o pipefail leading to missing errors
    shell: bash

jobs:
  run_tests:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        # python-version: ['3.9', '3.10', '3.11', '3.12']
        python-version: ["3.10", "3.12"]

    runs-on: ${{ matrix.os }}
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || github.base_ref == 'main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || github.base_ref == 'staging' && 'staging' || github.ref == 'refs/heads/dev' && 'dev' || github.base_ref == 'dev' && 'dev' }}

    env:
      IO_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      IO_API_BASE_URL: ${{ secrets.OPENAI_API_BASE_URL }}
      IO_API_MODEL: openai/gpt-oss-120b
      WOLFRAM_API_KEY: ${{ secrets.WOLFRAM_API_KEY }}
      SOLSCAN_API_KEY: ${{ secrets.SOLSCAN_API_KEY }}
      COINMARKETCAP_API_KEY: ${{ secrets.COINMARKETCAP_API_KEY }}
      FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
      SLOW_MODE_SLEEP: 10
      LOGFIRE_IGNORE_NO_CONFIG: 1

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
 
      - name: download uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
 
      - name: Install dependencies
        run: uv pip install --system -e ".[dev]"
 
      - name: Check readme anchors
        run: |
          pip install pipx
          pipx run hatch-fancy-pypi-readme | grep -vq 'MISSING ANCHOR'
 
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          docker compose up -d
          # Wait for searxng to be healthy by checking the health endpoint directly
          timeout 60s bash -c 'until curl -s -f http://localhost:8080/healthz > /dev/null; do sleep 2; done'

      - name: Run tests
        run: pytest -vv tests/ --retries 4 --retry-delay 5 --durations=-1 --durations-min=0.5
        if: ${{ !(github.event.pull_request.head.repo.fork) }}

      - name: Remove containers
        if: always()  # This ensures cleanup happens even if tests fail
        run: docker compose down -v
