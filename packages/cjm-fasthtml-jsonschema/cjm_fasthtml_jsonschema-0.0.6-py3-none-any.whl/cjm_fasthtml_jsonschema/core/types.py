"""Type definitions for JSON Schema elements."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/types.ipynb.

# %% auto 0
__all__ = ['SchemaProperty']

# %% ../../nbs/core/types.ipynb 3
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass

# %% ../../nbs/core/types.ipynb 4
@dataclass
class SchemaProperty:
    """Represents a single property in a JSON Schema."""
    name: str
    schema: Dict[str, Any]
    required: bool = False
    value: Any = None

    @property
    def type(
        self
    ) -> str:  # The property's type (e.g., 'string', 'number', 'boolean')
        """Get the property type."""
        prop_type = self.schema.get('type', 'string')
        if isinstance(prop_type, list):
            # Handle nullable types like ["string", "null"]
            non_null_types = [t for t in prop_type if t != 'null']
            return non_null_types[0] if non_null_types else 'string'
        return prop_type

    @property
    def is_nullable(
        self
    ) -> bool:  # True if the property allows null values
        """Check if property allows null values."""
        prop_type = self.schema.get('type')
        if isinstance(prop_type, list):
            return 'null' in prop_type
        return False

    @property
    def default(
        self
    ) -> Any:  # The default value for this property, or None if not specified
        """Get default value if specified."""
        return self.schema.get('default')

    @property
    def description(
        self
    ) -> Optional[str]:  # The property's description text, or None if not provided
        """Get property description."""
        return self.schema.get('description')

    @property
    def enum_values(
        self
    ) -> Optional[List[Any]]:  # List of allowed enum values, or None if not an enum
        """Get enum values if property is an enum."""
        return self.schema.get('enum')

    @property
    def examples(
        self
    ) -> Optional[List[Any]]:  # List of example values, or None if not provided
        """Get example values if provided."""
        return self.schema.get('examples')

    @property
    def minimum(
        self
    ) -> Optional[Union[int, float]]:  # Minimum allowed value for numeric types, or None if not specified
        """Get minimum value for numeric types."""
        return self.schema.get('minimum')

    @property
    def maximum(
        self
    ) -> Optional[Union[int, float]]:  # Maximum allowed value for numeric types, or None if not specified
        """Get maximum value for numeric types."""
        return self.schema.get('maximum')

    @property
    def min_length(
        self
    ) -> Optional[int]:  # Minimum length for string types, or None if not specified
        """Get minimum length for string types."""
        return self.schema.get('minLength')

    @property
    def max_length(
        self
    ) -> Optional[int]:  # Maximum length for string types, or None if not specified
        """Get maximum length for string types."""
        return self.schema.get('maxLength')

    @property
    def pattern(
        self
    ) -> Optional[str]:  # Regex pattern for string validation, or None if not specified
        """Get regex pattern for string validation."""
        return self.schema.get('pattern')

    @property
    def format(
        self
    ) -> Optional[str]:  # Format hint (e.g., 'email', 'uri', 'date'), or None if not specified
        """Get format hint (e.g., 'email', 'uri', 'date')."""
        return self.schema.get('format')
