"""JSON Schema parsing utilities."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/parser.ipynb.

# %% auto 0
__all__ = ['SchemaParser']

# %% ../../nbs/core/parser.ipynb 3
from typing import Dict, Any, List, Optional
from .types import SchemaProperty

# %% ../../nbs/core/parser.ipynb 4
class SchemaParser:
    """Parse JSON Schema and extract property information."""

    def __init__(
        self,
        schema: Dict[str, Any]  # JSON Schema dictionary
    ):
        """Initialize parser with a JSON Schema."""
        self.schema = schema
        self.title = schema.get('title', 'Configuration')
        self.description = schema.get('description')
        self.required_fields = set(schema.get('required', []))
        self.properties = self._parse_properties()

    def _parse_properties(
        self
    ) -> List[SchemaProperty]:  # List of SchemaProperty objects
        """Parse schema properties into SchemaProperty objects."""
        properties = []
        schema_props = self.schema.get('properties', {})

        for name, prop_schema in schema_props.items():
            prop = SchemaProperty(
                name=name,
                schema=prop_schema,
                required=name in self.required_fields
            )
            properties.append(prop)

        # Sort properties: required first, then alphabetically
        properties.sort(key=lambda p: (not p.required, p.name))

        return properties

    def get_property(
        self,
        name: str  # Property name
    ) -> Optional[SchemaProperty]:  # SchemaProperty object or None if not found
        """Get a specific property by name."""
        for prop in self.properties:
            if prop.name == name:
                return prop
        return None

    def get_required_properties(
        self
    ) -> List[SchemaProperty]:  # List of all required SchemaProperty objects
        """Get all required properties."""
        return [p for p in self.properties if p.required]

    def get_optional_properties(
        self
    ) -> List[SchemaProperty]:  # List of all optional SchemaProperty objects
        """Get all optional properties."""
        return [p for p in self.properties if not p.required]
