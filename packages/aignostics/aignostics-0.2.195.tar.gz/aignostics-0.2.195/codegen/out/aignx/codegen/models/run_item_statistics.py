# coding: utf-8

"""
    Aignostics Platform API

     The Aignostics Platform is a cloud-based service that enables organizations to access advanced computational pathology applications through a secure API.  The platform provides standardized access to Aignostics' portfolio of computational pathology solutions, with Atlas H&E-TME serving as an example of the available API endpoints.   To begin using the platform, your organization must first be registered by our business support team. If you don't have an account yet, please contact your account manager or email support@aignostics.com to get started.   More information about our applications can be found on [https://platform.aignostics.com](https://platform.aignostics.com).  **How to authorize and test API endpoints:**  1. Click the \"Authorize\" button in the right corner below 3. Click \"Authorize\" button in the dialog to log in with your Aignostics Platform credentials 4. After successful login, you'll be redirected back and can use \"Try it out\" on any endpoint  **Note**: You only need to authorize once per session. The lock icons next to endpoints will show green when authorized.  

    The version of the OpenAPI document: 1.0.0.beta7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class RunItemStatistics(BaseModel):
    """
    RunItemStatistics
    """ # noqa: E501
    item_count: StrictInt = Field(description="Total number of the items in the run")
    item_pending_count: StrictInt = Field(description="The number of items in `PENDING` state")
    item_processing_count: StrictInt = Field(description="The number of items in `PROCESSING` state")
    item_user_error_count: StrictInt = Field(description="The number of items in `TERMINATED` state, and the item termination reason is `USER_ERROR`")
    item_system_error_count: StrictInt = Field(description="The number of items in `TERMINATED` state, and the item termination reason is `SYSTEM_ERROR`")
    item_skipped_count: StrictInt = Field(description="The number of items in `TERMINATED` state, and the item termination reason is `SKIPPED`")
    item_succeeded_count: StrictInt = Field(description="The number of items in `TERMINATED` state, and the item termination reason is `SUCCEEDED`")
    __properties: ClassVar[List[str]] = ["item_count", "item_pending_count", "item_processing_count", "item_user_error_count", "item_system_error_count", "item_skipped_count", "item_succeeded_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunItemStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunItemStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "item_count": obj.get("item_count"),
            "item_pending_count": obj.get("item_pending_count"),
            "item_processing_count": obj.get("item_processing_count"),
            "item_user_error_count": obj.get("item_user_error_count"),
            "item_system_error_count": obj.get("item_system_error_count"),
            "item_skipped_count": obj.get("item_skipped_count"),
            "item_succeeded_count": obj.get("item_succeeded_count")
        })
        return _obj


