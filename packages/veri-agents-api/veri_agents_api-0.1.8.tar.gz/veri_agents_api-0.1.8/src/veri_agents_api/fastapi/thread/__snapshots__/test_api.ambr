# serializer version: 1
# name: test_openapi_snapshot
  '''
  {
    "openapi": "3.1.0",
    "info": {
      "title": "FastAPI",
      "version": "0.1.0"
    },
    "paths": {
      "/chat/{thread_id}/invoke": {
        "post": {
          "summary": "Invoke",
          "description": "Invoke the agent with user input to retrieve a final response.\n\nUse thread_id to persist and continue a multi-turn conversation. run_id kwarg\nis also attached to messages for recording feedback.",
          "operationId": "invoke_chat__thread_id__invoke_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvokeInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/HumanMessage"
                      },
                      {
                        "$ref": "#/components/schemas/AIMessage"
                      },
                      {
                        "$ref": "#/components/schemas/ToolMessage"
                      }
                    ],
                    "title": "Response Invoke Chat  Thread Id  Invoke Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/chat/{thread_id}/stream": {
        "post": {
          "summary": "Stream",
          "description": "Stream the agent's response to a user input, including intermediate messages and tokens.\n\nUse thread_id to persist and continue a multi-turn conversation. run_id kwarg\nis also attached to all messages for recording feedback.",
          "operationId": "stream_chat__thread_id__stream_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamInput"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Server-Sent Events stream",
              "content": {
                "application/json": {
                  "schema": {}
                },
                "text/event-stream": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/StreamWarning"
                      },
                      {
                        "$ref": "#/components/schemas/StreamError"
                      },
                      {
                        "$ref": "#/components/schemas/StreamMessage"
                      },
                      {
                        "$ref": "#/components/schemas/StreamMessageChunk"
                      },
                      {
                        "$ref": "#/components/schemas/StreamToolOutput"
                      },
                      {
                        "$ref": "#/components/schemas/StreamDone"
                      }
                    ],
                    "type": "object",
                    "description": "SSE Event Stream - sends multiple events"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/chat/{thread_id}/internal/_schema/stream": {
        "get": {
          "summary": " Stream Openapi Schema",
          "operationId": "_stream_openapi_schema_chat__thread_id__internal__schema_stream_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/StreamWarning"
                      },
                      {
                        "$ref": "#/components/schemas/StreamError"
                      },
                      {
                        "$ref": "#/components/schemas/StreamMessage"
                      },
                      {
                        "$ref": "#/components/schemas/StreamMessageChunk"
                      },
                      {
                        "$ref": "#/components/schemas/StreamToolOutput"
                      },
                      {
                        "$ref": "#/components/schemas/StreamDone"
                      }
                    ],
                    "title": "Response  Stream Openapi Schema Chat  Thread Id  Internal  Schema Stream Get"
                  }
                }
              }
            }
          }
        }
      },
      "/chat/{thread_id}/history": {
        "get": {
          "summary": "History",
          "description": "Get the history of a thread.",
          "operationId": "history_chat__thread_id__history_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/HumanMessage"
                        },
                        {
                          "$ref": "#/components/schemas/AIMessage"
                        },
                        {
                          "$ref": "#/components/schemas/ToolMessage"
                        }
                      ]
                    },
                    "type": "array",
                    "title": "Response History Chat  Thread Id  History Get"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "AIMessage": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "additionalProperties": true,
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "type": {
              "$ref": "#/components/schemas/MessageTypeAI",
              "default": "ai"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "tool_calls": {
              "items": {
                "$ref": "#/components/schemas/ToolCall"
              },
              "type": "array",
              "title": "Tool Calls"
            },
            "invalid_tool_calls": {
              "items": {
                "$ref": "#/components/schemas/InvalidToolCall"
              },
              "type": "array",
              "title": "Invalid Tool Calls"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "AIMessage",
          "description": "Message from an AI.\n\nAIMessage is returned from a chat model as a response to a prompt.\n\nThis message represents the output of the model and consists of both\nthe raw output as returned by the model together standardized fields\n(e.g., tool calls, usage metadata) added by the LangChain framework."
        },
        "AIMessageChunk": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "additionalProperties": true,
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "type": {
              "$ref": "#/components/schemas/MessageChunkTypeAI",
              "default": "ai_chunk"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "tool_calls": {
              "items": {
                "$ref": "#/components/schemas/ToolCall"
              },
              "type": "array",
              "title": "Tool Calls"
            },
            "invalid_tool_calls": {
              "items": {
                "$ref": "#/components/schemas/InvalidToolCall"
              },
              "type": "array",
              "title": "Invalid Tool Calls"
            },
            "tool_call_chunks": {
              "items": {
                "$ref": "#/components/schemas/ToolCallChunk"
              },
              "type": "array",
              "title": "Tool Call Chunks"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "AIMessageChunk",
          "description": "Message chunk from an AI."
        },
        "HTTPValidationError": {
          "properties": {
            "detail": {
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              },
              "type": "array",
              "title": "Detail"
            }
          },
          "type": "object",
          "title": "HTTPValidationError"
        },
        "HumanMessage": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "additionalProperties": true,
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "type": {
              "$ref": "#/components/schemas/MessageTypeHuman",
              "default": "human"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "HumanMessage",
          "description": "Message from a human.\n\nHumanMessages are messages that are passed in from a human to the model."
        },
        "InvalidToolCall": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "args": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Args"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "error": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            },
            "type": {
              "type": "string",
              "const": "invalid_tool_call",
              "title": "Type",
              "default": "invalid_tool_call"
            }
          },
          "type": "object",
          "required": [
            "name",
            "args",
            "id",
            "error"
          ],
          "title": "InvalidToolCall",
          "description": "Allowance for errors made by LLM.\n\nHere we add an `error` key to surface errors made during generation\n(e.g., invalid JSON arguments.)"
        },
        "InvokeInput": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message",
              "description": "User input to the agent.",
              "examples": [
                "What is the weather in Tokyo?"
              ]
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "InvokeInput",
          "description": "Basic user input for the agent."
        },
        "MessageChunkTypeAI": {
          "type": "string",
          "const": "ai_chunk"
        },
        "MessageChunkTypeTool": {
          "type": "string",
          "const": "tool_chunk"
        },
        "MessageTypeAI": {
          "type": "string",
          "const": "ai"
        },
        "MessageTypeHuman": {
          "type": "string",
          "const": "human"
        },
        "MessageTypeTool": {
          "type": "string",
          "const": "tool"
        },
        "StreamDone": {
          "properties": {},
          "type": "object",
          "title": "StreamDone"
        },
        "StreamError": {
          "properties": {
            "type": {
              "type": "string",
              "title": "Type",
              "default": "error"
            },
            "content": {
              "type": "string",
              "title": "Content"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "StreamError"
        },
        "StreamInput": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message",
              "description": "User input to the agent.",
              "examples": [
                "What is the weather in Tokyo?"
              ]
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "StreamInput",
          "description": "User input for streaming the agent's response."
        },
        "StreamMessage": {
          "properties": {
            "type": {
              "type": "string",
              "title": "Type",
              "default": "message"
            },
            "content": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/HumanMessage"
                },
                {
                  "$ref": "#/components/schemas/AIMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolMessage"
                }
              ],
              "title": "Content"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "StreamMessage"
        },
        "StreamMessageChunk": {
          "properties": {
            "type": {
              "type": "string",
              "title": "Type",
              "default": "message_chunk"
            },
            "content": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AIMessageChunk"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageChunk"
                }
              ],
              "title": "Content"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "StreamMessageChunk"
        },
        "StreamToolOutput": {
          "properties": {
            "type": {
              "type": "string",
              "title": "Type",
              "default": "tool_output"
            },
            "content": {
              "$ref": "#/components/schemas/ToolCallOutput"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "StreamToolOutput"
        },
        "StreamWarning": {
          "properties": {
            "type": {
              "type": "string",
              "title": "Type",
              "default": "warn"
            },
            "content": {
              "type": "string",
              "title": "Content"
            }
          },
          "type": "object",
          "required": [
            "content"
          ],
          "title": "StreamWarning"
        },
        "ToolCall": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "args": {
              "additionalProperties": true,
              "type": "object",
              "title": "Args"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "type": {
              "type": "string",
              "const": "tool_call",
              "title": "Type",
              "default": "tool_call"
            }
          },
          "type": "object",
          "required": [
            "name",
            "args",
            "id"
          ],
          "title": "ToolCall",
          "description": "Represents a request to call a tool."
        },
        "ToolCallChunk": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "args": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Args"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "index": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Index"
            },
            "type": {
              "type": "string",
              "const": "tool_call_chunk",
              "title": "Type",
              "default": "tool_call_chunk"
            }
          },
          "type": "object",
          "required": [
            "name",
            "args",
            "id",
            "index"
          ],
          "title": "ToolCallChunk",
          "description": "A chunk of a tool call (e.g., as part of a stream)."
        },
        "ToolCallOutput": {
          "properties": {
            "type": {
              "type": "string",
              "title": "Type"
            }
          },
          "type": "object",
          "required": [
            "type"
          ],
          "title": "ToolCallOutput"
        },
        "ToolMessage": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "additionalProperties": true,
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "type": {
              "$ref": "#/components/schemas/MessageTypeTool",
              "default": "tool"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "tool_call_id": {
              "type": "string",
              "title": "Tool Call Id"
            },
            "artifact": {
              "title": "Artifact"
            },
            "status": {
              "type": "string",
              "enum": [
                "success",
                "error"
              ],
              "title": "Status",
              "default": "success"
            }
          },
          "type": "object",
          "required": [
            "content",
            "tool_call_id"
          ],
          "title": "ToolMessage",
          "description": "Message for passing the result of executing a tool back to a model.\n\nToolMessages contain the result of a tool invocation. Typically, the result\nis encoded inside the `content` field.\n\nThe tool_call_id field is used to associate the tool call request with the\ntool call response. This is useful in situations where a chat model is able\nto request multiple tool calls in parallel."
        },
        "ToolMessageChunk": {
          "properties": {
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "additionalProperties": true,
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              ],
              "title": "Content"
            },
            "type": {
              "$ref": "#/components/schemas/MessageChunkTypeTool",
              "default": "tool_chunk"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "tool_call_id": {
              "type": "string",
              "title": "Tool Call Id"
            },
            "artifact": {
              "title": "Artifact"
            },
            "status": {
              "type": "string",
              "enum": [
                "success",
                "error"
              ],
              "title": "Status",
              "default": "success"
            }
          },
          "type": "object",
          "required": [
            "content",
            "tool_call_id"
          ],
          "title": "ToolMessageChunk",
          "description": "Tool Message chunk."
        },
        "ValidationError": {
          "properties": {
            "loc": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "type": "array",
              "title": "Location"
            },
            "msg": {
              "type": "string",
              "title": "Message"
            },
            "type": {
              "type": "string",
              "title": "Error Type"
            }
          },
          "type": "object",
          "required": [
            "loc",
            "msg",
            "type"
          ],
          "title": "ValidationError"
        }
      }
    }
  }
  '''
# ---
