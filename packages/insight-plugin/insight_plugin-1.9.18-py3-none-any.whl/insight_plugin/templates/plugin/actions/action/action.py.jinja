import {{ base_module }}

from {{ base_module }}.telemetry import auto_instrument

from .schema import {{ upper_camel_case(action) }}Input, {{ upper_camel_case(action) }}Output, Input, Output, Component
# Custom imports below


class {{ upper_camel_case(action) }}({{ base_module }}.Action):

    def __init__(self):
        super(self.__class__, self).__init__(
                name="{{ action }}",
                description=Component.DESCRIPTION,
                input={{ upper_camel_case(action) }}Input(),
                output={{ upper_camel_case(action) }}Output())

    @auto_instrument
    def run(self, params={}):
        # START INPUT BINDING - DO NOT REMOVE - ANY INPUTS BELOW WILL UPDATE WITH YOUR PLUGIN SPEC AFTER REGENERATION
        {% for parameter in inputs.keys()|sort -%}
        {{ parameter.lower().replace("-", "_") }} = params.get(Input.{{ parameter.upper().replace("-", "") }})
        {% endfor -%}
        # END INPUT BINDING - DO NOT REMOVE

        return {
        {%- for parameter in outputs.keys()|sort %}
            Output.{{ parameter.upper().replace("-", "") }}: None,
        {%- endfor %}
        }
