name: Build
on:
  - push
  - pull_request

jobs:

  wheels:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            architecture: x86_64
          # really long (2 hours), see job wheel-ubuntu-aarch64
          # - os: ubuntu
          #   architecture: aarch64
          - os: macos
            architecture: x86_64
          - os: macos
            architecture: arm64
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_SKIP: pp* cp38-* cp39-* cp310-* *-musllinux*
          CIBW_ARCHS: ${{ matrix.architecture }}
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.architecture }}
          path: wheelhouse/*.whl

  wheels-windows:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows
            architecture: AMD64
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_SKIP: pp* cp38-* cp39-* cp310-* *-musllinux*
          CIBW_ARCHS: ${{ matrix.architecture }}
          # increase pip debugging output
          # CIBW_BUILD_VERBOSITY: 2
          # define CC, CXX so meson will use clang-cl instead of MSVC
          CC: clang-cl
          CXX: clang-cl
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.architecture }}
          path: wheelhouse/*.whl

  wheel-ubuntu-aarch64:
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_SKIP: pp* cp38-* cp39-* cp310-* *-musllinux*
          CIBW_ARCHS: aarch64
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-ubuntu-aarch64
          path: wheelhouse/*.whl

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: echo ${{ github.ref }}
      - run: python -m pip install build twine packaging -U
      - run: python -m build --sdist
      - run: twine check --strict dist/*
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  check-sdist:
    runs-on: ubuntu-latest
    needs:
      - sdist
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: sdist
    - uses: actions/setup-python@v5
      with:
        python-version: 3.13
    - run: |
        pip install pip -U
        ls
        pip install fluidsim-*.tar.gz -v --no-deps -C setup-args=-Dtransonic-backend=python

  pypi-publish:
    name: Upload release to PyPI
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/')
    needs:
      - wheels
      - wheels-windows
      - wheel-ubuntu-aarch64
      - sdist
      - check-sdist
    runs-on: ubuntu-latest
    environment:
      name: publish
      url: https://pypi.org/p/fluidsim
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
    - run: ls dist
    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
