{
  "name": "GetFixedAssetsList",
  "fully_qualified_name": "ZohoBooksApi.GetFixedAssetsList@0.1.0",
  "description": "Retrieve a list of fixed assets from Zoho Books.\n\nUse this tool to obtain a detailed list of fixed assets stored in Zoho Books. Ideal for managing and reviewing asset inventories.",
  "toolkit": {
    "name": "ArcadeZohoBooksApi",
    "description": null,
    "version": "0.1.0"
  },
  "input": {
    "parameters": [
      {
        "name": "organization_id",
        "required": true,
        "description": "The unique ID of the organization for which to list fixed assets.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "ID of the organization"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "organization_id"
      },
      {
        "name": "filter_fixed_asset_status",
        "required": false,
        "description": "Filter the fixed asset list by status. Valid inputs: Status.All, Status.Active, Status.Cancel, Status.FullyDepreciated, Status.WriteOff, Status.Sold, Status.Draft.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Filter fixed asset by fixed asset status. Allowed Values: <code>Status.All</code>, <code>Status.Active</code>, <code>Status.Cancel</code>, <code>Status.FullyDepreciated</code>, <code>Status.WriteOff</code>, <code>Status.Sold</code> and <code>Status.Draft</code>"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "filter_by"
      },
      {
        "name": "sort_by_column",
        "required": false,
        "description": "Specify the column to sort the fixed asset list. Choose from: asset_name, asset_number, asset_cost, created_time, current_asset_value.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Sort fixed asset list. Allowed Values: <code>asset_name</code>, <code>asset_number</code>, <code>asset_cost</code>, <code>created_time</code> and <code>current_asset_value</code>"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "sort_column"
      },
      {
        "name": "sort_order",
        "required": false,
        "description": "Sort the fixed asset list in ascending or descending order. Use 'A' for ascending and 'D' for descending.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Sort fixed asset list in ascendeing or descending order. Allowed Values: <code>A</code> and <code>D</code>"
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "sort_order"
      },
      {
        "name": "page_number",
        "required": false,
        "description": "The page number to fetch from the fixed asset list. Defaults to 1 if not specified.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Page number to be fetched. Default value is 1."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "page"
      },
      {
        "name": "records_per_page",
        "required": false,
        "description": "Number of fixed asset records to fetch per page. Default is 200.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Number of records to be fetched per page. Default value is 200."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "per_page"
      }
    ]
  },
  "output": {
    "description": "Response from the API endpoint 'list_fixed_assets'.",
    "available_modes": [
      "value",
      "error",
      "null"
    ],
    "value_schema": {
      "val_type": "json",
      "inner_val_type": null,
      "enum": null,
      "properties": null,
      "inner_properties": null,
      "description": null
    }
  },
  "requirements": {
    "authorization": {
      "provider_id": "arcade-zoho",
      "provider_type": "oauth2",
      "id": null,
      "oauth2": {
        "scopes": [
          "ZohoBooks.fixedasset.READ"
        ]
      }
    },
    "secrets": [
      {
        "key": "ZOHO_SERVER_URL"
      }
    ],
    "metadata": null
  },
  "deprecation_message": null,
  "metadata": {
    "object_type": "api_wrapper_tool",
    "version": "1.0.0",
    "description": "Tools that enable LLMs to interact directly with the zoho-books API."
  },
  "http_endpoint": {
    "metadata": {
      "object_type": "http_endpoint",
      "version": "1.1.0",
      "description": ""
    },
    "url": "{zoho_server_url}/books/v3/fixedassets",
    "http_method": "GET",
    "headers": {},
    "parameters": [
      {
        "name": "organization_id",
        "tool_parameter_name": "organization_id",
        "description": "ID of the organization",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "ID of the organization"
        },
        "accepted_as": "query",
        "required": true,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "filter_by",
        "tool_parameter_name": "filter_fixed_asset_status",
        "description": "Filter fixed asset by fixed asset status. Allowed Values: <code>Status.All</code>, <code>Status.Active</code>, <code>Status.Cancel</code>, <code>Status.FullyDepreciated</code>, <code>Status.WriteOff</code>, <code>Status.Sold</code> and <code>Status.Draft</code>",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Filter fixed asset by fixed asset status. Allowed Values: <code>Status.All</code>, <code>Status.Active</code>, <code>Status.Cancel</code>, <code>Status.FullyDepreciated</code>, <code>Status.WriteOff</code>, <code>Status.Sold</code> and <code>Status.Draft</code>"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "sort_column",
        "tool_parameter_name": "sort_by_column",
        "description": "Sort fixed asset list. Allowed Values: <code>asset_name</code>, <code>asset_number</code>, <code>asset_cost</code>, <code>created_time</code> and <code>current_asset_value</code>",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Sort fixed asset list. Allowed Values: <code>asset_name</code>, <code>asset_number</code>, <code>asset_cost</code>, <code>created_time</code> and <code>current_asset_value</code>"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "sort_order",
        "tool_parameter_name": "sort_order",
        "description": "Sort fixed asset list in ascendeing or descending order. Allowed Values: <code>A</code> and <code>D</code>",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Sort fixed asset list in ascendeing or descending order. Allowed Values: <code>A</code> and <code>D</code>"
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "page",
        "tool_parameter_name": "page_number",
        "description": "Page number to be fetched. Default value is 1.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Page number to be fetched. Default value is 1."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": 1,
        "documentation_urls": []
      },
      {
        "name": "per_page",
        "tool_parameter_name": "records_per_page",
        "description": "Number of records to be fetched per page. Default value is 200.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Number of records to be fetched per page. Default value is 200."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": 200,
        "documentation_urls": []
      }
    ],
    "documentation_urls": [],
    "secrets": [
      {
        "arcade_key": "ZOHO_SERVER_URL",
        "parameter_name": "zoho_server_url",
        "accepted_as": "path",
        "formatted_value": null,
        "description": "",
        "is_auth_token": false
      },
      {
        "arcade_key": "auth_token",
        "parameter_name": "Authorization",
        "accepted_as": "header",
        "formatted_value": "Bearer {authorization}",
        "description": "The OAuth token to use for authentication.",
        "is_auth_token": true
      }
    ],
    "request_body_spec": null,
    "use_request_body_schema_mode": false,
    "validate_request_body_schema": false
  }
}
