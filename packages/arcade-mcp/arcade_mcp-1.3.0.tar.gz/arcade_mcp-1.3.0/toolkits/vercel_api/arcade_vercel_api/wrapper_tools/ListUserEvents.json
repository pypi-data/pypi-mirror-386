{
  "name": "ListUserEvents",
  "fully_qualified_name": "VercelApi.ListUserEvents@0.1.0",
  "description": "Fetches a list of user-generated events on Vercel.\n\nThis tool retrieves events generated by user actions on Vercel, such as logging in, creating deployments, or joining teams. If a `teamId` is provided, events related to that specific team are returned.",
  "toolkit": {
    "name": "ArcadeVercelApi",
    "description": null,
    "version": "0.1.0"
  },
  "input": {
    "parameters": [
      {
        "name": "maximum_items_to_return",
        "required": false,
        "description": "Maximum number of items that can be returned from the request.",
        "value_schema": {
          "val_type": "number",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Maximum number of items which may be returned."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "limit"
      },
      {
        "name": "include_items_since_timestamp",
        "required": false,
        "description": "Timestamp to only include items created since then. Use ISO 8601 format.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Timestamp to only include items created since then."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "since"
      },
      {
        "name": "end_time_filter",
        "required": false,
        "description": "Timestamp to filter events created until this time.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Timestamp to only include items created until then."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "until"
      },
      {
        "name": "event_types_filter",
        "required": false,
        "description": "Comma-delimited list of event types to filter the results by.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Comma-delimited list of event \\\"types\\\" to filter the results by."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "types"
      },
      {
        "name": "deprecated_user_id",
        "required": false,
        "description": "Deprecated. Use 'principal_id' instead. If both 'principal_id' and 'deprecated_user_id' exist, 'principal_id' will be used.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Deprecated. Use `principalId` instead. If `principalId` and `userId` both exist, `principalId` will be used."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "userId"
      },
      {
        "name": "filter_by_principal_id",
        "required": false,
        "description": "Filter events generated by a specific principal when retrieving events for a Team.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "When retrieving events for a Team, the `principalId` parameter may be specified to filter events generated by a specific principal."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "principalId"
      },
      {
        "name": "project_ids_filter",
        "required": false,
        "description": "Comma-separated list of project IDs to filter the events by.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Comma-delimited list of project IDs to filter the results by."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "projectIds"
      },
      {
        "name": "include_event_payload",
        "required": false,
        "description": "Set to 'true' to include the 'payload' field in each event response.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "When set to `true`, the response will include the `payload` field for each event."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "withPayload"
      },
      {
        "name": "team_identifier",
        "required": false,
        "description": "Specify the Team ID to retrieve events related to that team.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The Team identifier to perform the request on behalf of."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "teamId"
      },
      {
        "name": "team_slug",
        "required": false,
        "description": "The Team slug to perform the request on behalf of. Use this to specify which team's events to retrieve.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The Team slug to perform the request on behalf of."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "slug"
      }
    ]
  },
  "output": {
    "description": "Response from the API endpoint 'listUserEvents'.",
    "available_modes": [
      "value",
      "error",
      "null"
    ],
    "value_schema": {
      "val_type": "json",
      "inner_val_type": null,
      "enum": null,
      "properties": null,
      "inner_properties": null,
      "description": null
    }
  },
  "requirements": {
    "authorization": null,
    "secrets": [
      {
        "key": "VERCEL_ACCESS_TOKEN"
      }
    ],
    "metadata": null
  },
  "deprecation_message": null,
  "metadata": {
    "object_type": "api_wrapper_tool",
    "version": "1.1.0",
    "description": "Tools that enable LLMs to interact directly with the vercel API."
  },
  "http_endpoint": {
    "metadata": {
      "object_type": "http_endpoint",
      "version": "1.2.0",
      "description": ""
    },
    "url": "https://api.vercel.com/v3/events",
    "http_method": "GET",
    "headers": {
      "Content-Type": "application/json"
    },
    "parameters": [
      {
        "name": "limit",
        "tool_parameter_name": "maximum_items_to_return",
        "description": "Maximum number of items which may be returned.",
        "value_schema": {
          "val_type": "number",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Maximum number of items which may be returned."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "since",
        "tool_parameter_name": "include_items_since_timestamp",
        "description": "Timestamp to only include items created since then.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Timestamp to only include items created since then."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "until",
        "tool_parameter_name": "end_time_filter",
        "description": "Timestamp to only include items created until then.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Timestamp to only include items created until then."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "types",
        "tool_parameter_name": "event_types_filter",
        "description": "Comma-delimited list of event \\\"types\\\" to filter the results by.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Comma-delimited list of event \\\"types\\\" to filter the results by."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "userId",
        "tool_parameter_name": "deprecated_user_id",
        "description": "Deprecated. Use `principalId` instead. If `principalId` and `userId` both exist, `principalId` will be used.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Deprecated. Use `principalId` instead. If `principalId` and `userId` both exist, `principalId` will be used."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "principalId",
        "tool_parameter_name": "filter_by_principal_id",
        "description": "When retrieving events for a Team, the `principalId` parameter may be specified to filter events generated by a specific principal.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "When retrieving events for a Team, the `principalId` parameter may be specified to filter events generated by a specific principal."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "projectIds",
        "tool_parameter_name": "project_ids_filter",
        "description": "Comma-delimited list of project IDs to filter the results by.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "Comma-delimited list of project IDs to filter the results by."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "withPayload",
        "tool_parameter_name": "include_event_payload",
        "description": "When set to `true`, the response will include the `payload` field for each event.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "When set to `true`, the response will include the `payload` field for each event."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "teamId",
        "tool_parameter_name": "team_identifier",
        "description": "The Team identifier to perform the request on behalf of.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The Team identifier to perform the request on behalf of."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      },
      {
        "name": "slug",
        "tool_parameter_name": "team_slug",
        "description": "The Team slug to perform the request on behalf of.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The Team slug to perform the request on behalf of."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      }
    ],
    "documentation_urls": [],
    "secrets": [
      {
        "arcade_key": "VERCEL_ACCESS_TOKEN",
        "parameter_name": "Authorization",
        "accepted_as": "header",
        "formatted_value": "Bearer {authorization}",
        "description": "",
        "is_auth_token": false
      }
    ],
    "request_body_spec": null,
    "use_request_body_schema_mode": false,
    "validate_request_body_schema": false
  }
}
