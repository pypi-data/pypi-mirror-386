# DEVELOPER GUIDE: dto

## Quick Summary
The `dto` directory contains Data Transfer Objects (DTOs) for API contract definition and validation in the HTTP SSE gateway. It's organized into two main subdirectories: `requests` for incoming API request validation using Pydantic models, and `responses` for structured API response formatting with automatic timestamp conversion. The DTOs primarily focus on session management operations and provide type-safe interfaces for API endpoints.

## Files and Subdirectories Overview
- **Direct files:** 
  - `__init__.py` - Main module exports for requests and responses submodules
- **Subdirectories:**
  - `requests/` - Request DTOs for API endpoint validation (session CRUD operations)
  - `responses/` - Response DTOs with automatic timestamp serialization and field aliasing

## Developer API Reference

### Direct Files

#### __init__.py
**Purpose:** Main entry point that exports the requests and responses submodules
**Import:** `from solace_agent_mesh.gateway.http_sse.routers.dto import requests, responses`

**Exports:**
- `requests` - Module containing all request DTOs
- `responses` - Module containing all response DTOs

### Subdirectory APIs

#### requests/
**Purpose:** Provides Pydantic models for validating incoming API requests, specifically for session management operations
**Key Exports:** GetSessionsRequest, GetSessionRequest, GetSessionHistoryRequest, UpdateSessionRequest, DeleteSessionRequest
**Import Examples:**
```python
from solace_agent_mesh.gateway.http_sse.routers.dto.requests import (
    GetSessionRequest,
    GetSessionHistoryRequest,
    UpdateSessionRequest
)
```

#### responses/
**Purpose:** Provides structured response DTOs with automatic timestamp conversion and field aliasing for API consistency
**Key Exports:** MessageResponse, SessionResponse, SessionListResponse, BaseTimestampResponse
**Import Examples:**
```python
from solace_agent_mesh.gateway.http_sse.routers.dto.responses import (
    MessageResponse,
    SessionResponse,
    SessionListResponse
)
```

## Complete Usage Guide

### 1. Basic Imports and Setup

```python
# Import the main dto modules
from solace_agent_mesh.gateway.http_sse.routers.dto import requests, responses

# Or import specific DTOs directly
from solace_agent_mesh.gateway.http_sse.routers.dto.requests import (
    GetSessionRequest,
    GetSessionHistoryRequest,
    UpdateSessionRequest
)
from solace_agent_mesh.gateway.http_sse.routers.dto.responses import (
    SessionResponse,
    MessageResponse,
    SessionListResponse
)
```

### 2. Working with Request DTOs

```python
from solace_agent_mesh.gateway.http_sse.routers.dto.requests import (
    GetSessionRequest,
    GetSessionHistoryRequest,
    UpdateSessionRequest
)
from pydantic import ValidationError

# Create a request to get a specific session
def get_session(session_id: str, user_id: str):
    try:
        request = GetSessionRequest(
            session_id=session_id,
            user_id=user_id
        )
        return request
    except ValidationError as e:
        print(f"Invalid request parameters: {e}")
        return None

# Create a request to get session history with pagination
def get_session_history(session_id: str, user_id: str, page: int = 1, size: int = 20):
    try:
        request = GetSessionHistoryRequest(
            session_id=session_id,
            user_id=user_id,
            pagination={"page": page, "size": size}
        )
        return request
    except ValidationError as e:
        print(f"Validation failed: {e}")
        return None

# Create a request to update session name
def update_session_name(session_id: str, user_id: str, new_name: str):
    try:
        request = UpdateSessionRequest(
            session_id=session_id,
            user_id=user_id,
            name=new_name  # Automatically validated (1-255 characters)
        )
        return request
    except ValidationError as e:
        print(f"Validation failed: {e}")
        return None
```

### 3. Working with Response DTOs

```python
from solace_agent_mesh.gateway.http_sse.routers.dto.responses import (
    SessionResponse,
    MessageResponse,
    SessionListResponse
)
from solace_agent_mesh.gateway.http_sse.shared.enums import MessageType, SenderType
import time

# Create session responses
def create_session_response(session_data: dict) -> SessionResponse:
    return SessionResponse(
        id=session_data["id"],
        user_id=session_data["user_id"],
        name=session_data.get("name"),
        agent_id=session_data.get("agent_id"),
        created_time=int(time.time() * 1000),  # Current time in epoch ms
        updated_time=session_data.get("updated_time")
    )

# Create message responses
def create_message_response(message_data: dict) -> MessageResponse:
    return MessageResponse(
        id=message_data["id"],
        session_id=message_data["session_id"],
        message=message_data["message"],
        sender_type=SenderType.USER,
        sender_name=message_data["sender_name"],
        message_type=MessageType.TEXT,
        created_time=int(time.time() * 1000)
    )

# Create paginated session list responses
def create_session_list_response(sessions: list, total: int) -> SessionListResponse:
    session_responses = [create_session_response(session) for session in sessions]
    return SessionListResponse(
        sessions=session_responses,
        pagination={"page": 1, "size": len(sessions), "total_pages": 1},
        total_count=total
    )
```

### 4. Complete API Endpoint Example

```python
from fastapi import APIRouter, HTTPException
from solace_agent_mesh.gateway.http_sse.routers.dto.requests import (
    GetSessionRequest,
    GetSessionHistoryRequest,
    UpdateSessionRequest
)
from solace_agent_mesh.gateway.http_sse.routers.dto.responses import (
    SessionResponse,
    MessageResponse,
    SessionListResponse
)

router = APIRouter()

@router.get("/sessions/{session_id}")
async def get_session(session_id: str, user_id: str) -> SessionResponse:
    """Get a specific session"""
    
    # Create and validate request DTO
    request = GetSessionRequest(
        session_id=session_id,
        user_id=user_id
    )
    
    # Fetch data (mock implementation)
    session_data = fetch_session(request)
    
    # Return structured response with automatic timestamp conversion
    return SessionResponse(
        id=session_data["id"],
        user_id=session_data["user_id"],
        name=session_data["name"],
        created_time=session_data["created_time"]
    )

@router.get("/sessions/{session_id}/history")
async def get_session_history(
    session_id: str,
    user_id: str,
    page: int = 1,
    size: int = 20
) -> list[MessageResponse]:
    """Get session message history"""
    
    # Validate request using DTO
    request = GetSessionHistoryRequest(
        session_id=session_id,
        user_id=user_id,
        pagination={"page": page, "size": size}
    )
    
    # Fetch messages (mock implementation)
    messages_data = fetch_session_messages(request)
    
    # Return response DTOs with automatic field aliasing
    return [
        MessageResponse(
            id=msg["id"],
            session_id=msg["session_id"],
            message=msg["message"],
            sender_type=msg["sender_type"],
            sender_name=msg["sender_name"],
            message_type=msg["message_type"],
            created_time=msg["created_time"]
        )
        for msg in messages_data
    ]

@router.put("/sessions/{session_id}")
async def update_session(
    session_id: str,
    user_id: str,
    name: str
) -> SessionResponse:
    """Update session name"""
    
    # Validate request using DTO
    try:
        request = UpdateSessionRequest(
            session_id=session_id,
            user_id=user_id,
            name=name
        )
    except ValidationError as e:
        raise HTTPException(status_code=400, detail=str(e))
    
    # Update session (mock implementation)
    updated_session = update_session_in_db(request)
    
    # Return response DTO with automatic field aliasing
    return SessionResponse(
        id=updated_session["id"],
        user_id=updated_session["user_id"],
        name=updated_session["name"],
        created_time=updated_session["created_time"],
        updated_time=updated_session["updated_time"]
    )
```

### 5. JSON Serialization with Automatic Timestamp Conversion

```python
from solace_agent_mesh.gateway.http_sse.routers.dto.responses import SessionResponse, MessageResponse
from solace_agent_mesh.gateway.http_sse.shared.enums import MessageType, SenderType
import json

# Create a session response
session = SessionResponse(
    id="sess_123",
    user_id="user_456",
    name="My Session",
    created_time=1640995200000,  # Epoch milliseconds
    updated_time=1640995260000
)

# Automatic conversion to ISO strings in JSON output
json_output = session.model_dump_json()
print(json_output)
# Output: {
#   "id": "sess_123",
#   "userId": "user_456",  # Note the camelCase aliasing
#   "name": "My Session",
#   "createdTime": "2022-01-01T00:00:00Z",  # Converted to ISO string
#   "updatedTime": "2022-01-01T00:01:00Z"
# }

# Create a message response with field aliasing
message = MessageResponse(
    id="msg_789",
    session_id="sess_123",
    message="Hello world",
    sender_type=SenderType.USER,
    sender_name="John Doe",
    message_type=MessageType.TEXT,
    created_time=1640995200000
)

# Get dict with converted timestamps and aliased fields
dict_output = message.model_dump()
print(dict_output["sessionId"])  # "sess_123" (camelCase alias)
print(dict_output["senderType"])  # SenderType.USER (camelCase alias)
print(dict_output["createdTime"])  # "2022-01-01T00:00:00Z" (converted timestamp)
```

### 6. Custom Response Classes Using Base

```python
from solace_agent_mesh.gateway.http_sse.routers.dto.responses.base_responses import BaseTimestampResponse

class CustomResponse(BaseTimestampResponse):
    """Custom response with automatic timestamp handling"""
    name: str
    status: str
    created_time: int
    last_accessed: int | None = None
    
    class Config:
        # Add field aliases if needed
        alias_generator = lambda field_name: ''.join(
            word.capitalize() if i > 0 else word 
            for i, word in enumerate(field_name.split('_'))
        )

# Usage
custom_response = CustomResponse(
    name="Test Item",
    status="active",
    created_time=1640995200000,
    last_accessed=1640995300000
)

# Automatic timestamp conversion in JSON
json_data = custom_response.model_dump_json()
# Fields like created_time become ISO strings automatically
```

This comprehensive guide shows how the `dto` directory provides a complete type-safe API contract system with automatic validation for requests and structured responses with timestamp conversion for the HTTP SSE gateway.

# content_hash: 3bb29d4c46b962221fc3034560b7e0da75b5a41f7f8f4d4f25aecf26e10f83f5
