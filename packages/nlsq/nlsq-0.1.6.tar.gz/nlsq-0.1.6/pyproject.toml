[build-system]
requires = ["setuptools>=80.0", "setuptools-scm>=9.0"]  # Tested on 80.9.0, 9.2.1
build-backend = "setuptools.build_meta"

[project]
name = "nlsq"
dynamic = ["version"]
description = "GPU/TPU accelerated nonlinear least-squares curve fitting using JAX"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
    {name = "Lucas Hofer (Original JAXFit)"},
    {name = "Milan Krstajić (Original JAXFit)"},
    {name = "Robert P. Smith (Original JAXFit)"},
]
maintainers = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
]
keywords = [
    "curve-fitting",
    "optimization",
    "least-squares",
    "jax",
    "gpu",
    "tpu",
    "scientific-computing",
    "machine-learning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed"
]
requires-python = ">=3.12"

# ============================================================================
# GPU ACCELERATION (150-270x speedup for large datasets)
# ============================================================================
# Default installation: CPU-only JAX (works on ALL platforms)
#   pip install nlsq
#
# For GPU acceleration (Linux + CUDA 12.1-12.9 ONLY):
#
#   Quick install (from repository):
#     git clone https://github.com/imewei/NLSQ.git
#     cd NLSQ
#     make install-jax-gpu
#
#   Manual install:
#     pip uninstall -y jax jaxlib
#     pip install 'jax[cuda12]>=0.6.0'  # Use cuda12-local for system CUDA
#
#   Verify GPU detection:
#     python -c "import jax; print(jax.devices())"
#     # Expected: [cuda(id=0)]
#
#   Platform support:
#     ✅ Linux + NVIDIA GPU + CUDA 12.1-12.9: Full GPU (150-270x speedup)
#     ❌ macOS: CPU-only (Apple Silicon/Intel, no NVIDIA support)
#     ❌ Windows: CPU-only (use WSL2 for GPU support)
#
#   Requirements (Linux GPU):
#     - System CUDA 12.1-12.9 pre-installed
#     - NVIDIA driver >= 525
#     - Compatible NVIDIA GPU
#
# Troubleshooting:
#   make env-info    # Check platform, CUDA, GPU hardware
#   make gpu-check   # Verify JAX GPU detection
#
# See README.md GPU Installation section for detailed guide
# ============================================================================

dependencies = [
    # Core scientific computing
    "numpy>=2.0.0",           # Requires NumPy 2.x (tested on 2.3.4)
    "scipy>=1.14.0",          # Tested on 1.16.2

    # JAX ecosystem (CPU-only by default - works on all platforms)
    # GPU users: see GPU ACCELERATION section above for installation
    "jax>=0.6.0",             # JAX 0.6.0+ CPU-only (tested on 0.8.0)
                               # Platform-specific extras installed separately:
                               #   Linux CPU:  pip install "jax[cpu]>=0.6.0"
                               #   Linux GPU:  make install-jax-gpu (recommended)
                               #   macOS:      pip install "jax[cpu]>=0.6.0" (CPU only)
                               #   Windows:    pip install "jax[cpu]>=0.6.0" (CPU only)

    # Visualization and monitoring
    "matplotlib>=3.9.0",      # Tested on 3.10.7
    "psutil>=6.0.0",          # For memory monitoring (tested on 7.1.0)
    "tqdm>=4.66.0",           # For progress bars (tested on 4.67.1)

    # Large dataset support
    "h5py>=3.10.0",           # Required for streaming large datasets (tested on 3.15.1)
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0",           # Tested on 8.4.2
    "pytest-cov>=4.1",       # Tested on 7.0.0
    "pytest-xdist>=3.5",     # Tested on 3.8.0
    "black>=24.0",           # Tested on 25.9.0 (CalVer)
    "ruff>=0.10.0",          # Tested on 0.14.1
    "mypy>=1.10",            # Tested on 1.18.2
    "pre-commit>=4.0",       # Tested on 4.3.0
    "ipython>=9.0",          # Tested on 9.6.0
    "bandit>=1.7.5",         # Tested on 1.8.6
    "pyupgrade>=3.15.0",     # Tested on 3.21.0
]
docs = [
    "sphinx>=8.0",                      # Tested on 8.2.3
    "sphinx-rtd-theme>=3.0",           # Tested on 3.0.2
    "sphinx-autodoc-typehints>=3.0",   # Tested on 3.5.2
    "ipython>=9.0",                    # Tested on 9.6.0
    "myst-parser>=4.0",                # Tested on 4.0.1
]
test = [
    "pytest>=8.0",           # Tested on 8.4.2
    "pytest-cov>=4.1",       # Tested on 7.0.0
    "pytest-xdist>=3.5",     # Tested on 3.8.0
    "pytest-timeout>=2.1",   # Tested on 2.4.0
    "hypothesis>=6.140",     # Tested on 6.142.1
]
benchmark = [
    "pytest-benchmark>=5.0",   # Tested on 5.1.0
    "asv>=0.6",                # Tested on 0.6.5
    "memory-profiler>=0.61",   # Tested on 0.61.0
    "psutil>=6.0",             # Tested on 7.1.0
]
jupyter = [
    "jupyterlab>=4.0",         # Tested on 4.4.9
    "ipykernel>=6.20",         # Tested on 7.0.1
    "notebook>=7.0",           # Tested on 7.4.7
]
build = [
    "build>=1.3",              # Build frontend (tested on 1.3.0)
    "twine>=6.0",              # PyPI upload tool (tested on 6.2.0)
    "setuptools>=80.0",        # Build backend (tested on 80.9.0)
    "setuptools-scm>=9.0",     # Version management (tested on 9.2.1)
    "wheel>=0.45",             # Wheel builder (tested on 0.45.1)
]
all = [
    # Development dependencies
    "pytest>=8.0",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.5",
    "black>=24.0",
    "ruff>=0.10.0",
    "mypy>=1.10",
    "pre-commit>=4.0",
    "ipython>=9.0",
    "bandit>=1.7.5",
    "pyupgrade>=3.15.0",
    # Documentation dependencies
    "sphinx>=8.0",
    "sphinx-rtd-theme>=3.0",
    "sphinx-autodoc-typehints>=3.0",
    "myst-parser>=4.0",
    # Test dependencies
    "hypothesis>=6.140",
    "pytest-timeout>=2.1",
    # Benchmark dependencies
    "pytest-benchmark>=5.0",
    "asv>=0.6",
    "memory-profiler>=0.61",
    "psutil>=6.0",
    # Jupyter dependencies
    "jupyterlab>=4.0",
    "ipykernel>=6.20",
    "notebook>=7.0",
    # Build dependencies
    "build>=1.3",
    "twine>=6.0",
    "setuptools>=80.0",
    "setuptools-scm>=9.0",
    "wheel>=0.45",
]

[project.urls]
Homepage = "https://github.com/imewei/NLSQ"
Documentation = "https://nlsq.readthedocs.io"
Repository = "https://github.com/imewei/NLSQ.git"
Issues = "https://github.com/imewei/NLSQ/issues"
Changelog = "https://github.com/imewei/NLSQ/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["nlsq"]
include-package-data = true

[tool.setuptools.package-data]
nlsq = ["py.typed", "*.pyi"]

[tool.setuptools_scm]
write_to = "nlsq/_version.py"
version_scheme = "post-release"
local_scheme = "no-local-version"

[tool.black]
line-length = 88
target-version = ['py312']
preview = true

[tool.ruff]
line-length = 88
target-version = "py312"
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
    "PL",   # Pylint
    "NPY",  # NumPy specific rules
    "PERF", # Performance linting
    "FURB", # Refurb (modern Python patterns)
]
ignore = ["E501", "E402", "E722", "E741", "B007", "B019", "B028", "PLR2004", "PLC0415", "RUF001", "RUF002", "RUF013", "SIM102", "SIM108", "SIM113", "UP007", "UP028", "UP031", "F401", "F821", "F841", "NPY002", "PLR0911", "PLR0912", "PLR0913", "PLR0915"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402", "PLR0913", "PLR0912"]
"tests/*" = ["S101", "PLR2004", "NPY002", "B007", "E731", "PLR0913", "B028", "F401"]
"examples/*" = ["PLR0913", "NPY002", "B007", "F841", "RUF059"]
"docs/conf.py" = ["E402"]
"nlsq/__init__.py" = ["PLR0913", "PLR0912"]
"nlsq/_optimize.py" = ["B028", "PLR0912", "PLR0915"]
"nlsq/_version.py" = ["UP035"]  # Autogenerated file
"nlsq/common_scipy.py" = ["PLR0912", "PLR0913", "PLR0915"]
"nlsq/trf.py" = ["B007", "PLR0912", "PLR0913", "PLR0915", "PLR2004", "UP031"]
"nlsq/large_dataset.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/sparse_jacobian.py" = ["PLR0913", "PLR0912"]
"nlsq/streaming_optimizer.py" = ["PLR0913", "PLR0912"]
"nlsq/memory_manager.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/diagnostics.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/recovery.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/smart_cache.py" = ["PLR0913", "PLR0912", "PLR2004"]
"nlsq/stability.py" = ["PLR0913", "PLR0912", "PLR2004"]
"nlsq/algorithm_selector.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/validators.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/robust_decomposition.py" = ["PLR0913", "PLR0912", "PLR0915"]

[tool.ruff.lint.isort]
known-first-party = ["nlsq"]

[tool.mypy]
python_version = "3.12"
# Relax strictness for scientific computing library
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false  # Don't require type annotations for all functions
disallow_any_generics = false  # Allow generics without type parameters (common in NumPy/JAX)
no_implicit_optional = false  # Allow implicit Optional
warn_redundant_casts = true
warn_unused_ignores = false  # Don't warn about unused ignores
warn_no_return = true
check_untyped_defs = false  # Don't check untyped functions
strict_equality = false  # Relax equality checks for NumPy arrays
allow_untyped_calls = true  # Allow calls to untyped functions
allow_untyped_decorators = true  # Allow untyped decorators
ignore_errors = false
# Disable the most problematic error codes for scientific computing
disable_error_code = ["type-arg", "no-untyped-def", "no-any-return", "assignment"]

[[tool.mypy.overrides]]
module = "jax.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "numpy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "psutil"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "matplotlib.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "nlsq.sparse_jacobian"
ignore_errors = true  # Complex module with many type issues

[[tool.mypy.overrides]]
module = "nlsq.large_dataset"
ignore_errors = true  # Complex module with many type issues

[[tool.mypy.overrides]]
module = "nlsq._optimize"
ignore_errors = true  # Legacy module with complex typing

[[tool.mypy.overrides]]
module = "nlsq.streaming_optimizer"
ignore_errors = true  # Complex async/streaming code

[[tool.mypy.overrides]]
module = "nlsq.least_squares"
ignore_errors = true  # Core optimization with complex types

[[tool.mypy.overrides]]
module = "nlsq.minpack"
ignore_errors = true  # Legacy interface with complex types

[[tool.mypy.overrides]]
module = "nlsq.trf"
ignore_errors = true  # Complex optimization algorithm

[[tool.mypy.overrides]]
module = "nlsq.common_scipy"
ignore_errors = true  # SciPy compatibility layer

[[tool.mypy.overrides]]
module = "nlsq.logging"
ignore_errors = true  # Logging utilities

[[tool.mypy.overrides]]
module = "nlsq.robust_decomposition"
ignore_errors = true  # Matrix decomposition algorithms

[[tool.mypy.overrides]]
module = "nlsq.validators"
ignore_errors = true  # Complex validation logic

[[tool.mypy.overrides]]
module = "nlsq.stability"
ignore_errors = true  # Numerical stability checks

[[tool.mypy.overrides]]
module = "nlsq.diagnostics"
ignore_errors = true  # Diagnostics and monitoring

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true  # Don't enforce strict typing in tests

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false

[tool.pytest.ini_options]
minversion = "7.4"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "--verbose",
    "-ra",
    "--strict-markers",
    "--strict-config",
    # Coverage disabled for faster CI
    # Test suite: 743 tests (as of 2025-10-07)
    # Current coverage: 70% (target: 80%)
    # "--cov=nlsq",
    # "--cov-report=term-missing",
    # "--cov-report=html",
    # "--cov-report=xml",
    # "--cov-fail-under=74",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests requiring GPU",
    "tpu: marks tests requiring TPU",
    "integration: integration tests",
    "timeout: marks tests with custom timeout settings",
    "memory: marks tests related to memory management",
    "cache: marks tests related to caching functionality",
    "recovery: marks tests related to optimization recovery",
    "stability: marks tests related to numerical stability",
    "diagnostics: marks tests related to optimization diagnostics",
    "validation: marks tests related to input validation",
]

[tool.coverage.run]
source = ["nlsq"]
omit = ["*/tests/*", "*/_version.py"]

[tool.coverage.report]
# Test suite: 743 tests (as of 2025-10-07)
# Current coverage: 70% (target: 80%)
# Industry-standard for scientific computing libraries: 70-80%
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
