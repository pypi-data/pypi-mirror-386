# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: nebius/vpc/v1/pool.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from nebius.api.buf.validate import validate_pb2 as buf_dot_validate_dot_validate__pb2
from nebius.api.nebius.common.v1 import metadata_pb2 as nebius_dot_common_dot_v1_dot_metadata__pb2
from nebius.api.nebius import annotations_pb2 as nebius_dot_annotations__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x18nebius/vpc/v1/pool.proto\x12\rnebius.vpc.v1\x1a\x1b\x62uf/validate/validate.proto\x1a\x1fnebius/common/v1/metadata.proto\x1a\x18nebius/annotations.proto\"\xa6\x01\n\x04Pool\x12>\n\x08metadata\x18\x01 \x01(\x0b\x32\".nebius.common.v1.ResourceMetadataR\x08metadata\x12+\n\x04spec\x18\x02 \x01(\x0b\x32\x17.nebius.vpc.v1.PoolSpecR\x04spec\x12\x31\n\x06status\x18\x03 \x01(\x0b\x32\x19.nebius.vpc.v1.PoolStatusR\x06status\"\xee\x01\n\x08PoolSpec\x12*\n\x0esource_pool_id\x18\x01 \x01(\tB\x04\xbaJ\x01\x02R\x0csourcePoolId\x12>\n\x07version\x18\x03 \x01(\x0e\x32\x18.nebius.vpc.v1.IpVersionB\n\xbaH\x03\xc8\x01\x01\xbaJ\x01\x02R\x07version\x12G\n\nvisibility\x18\x05 \x01(\x0e\x32\x1b.nebius.vpc.v1.IpVisibilityB\n\xbaH\x03\xc8\x01\x01\xbaJ\x01\x02R\nvisibility\x12-\n\x05\x63idrs\x18\x04 \x03(\x0b\x32\x17.nebius.vpc.v1.PoolCidrR\x05\x63idrs\"\x91\x03\n\x08PoolCidr\x12\x8e\x02\n\x04\x63idr\x18\x01 \x01(\tB\xf9\x01\xbaH\xf5\x01\xba\x01\x9d\x01\n\x11string.valid_cidr\x12.value must be a valid IP address, CIDR or mask\x1aXthis == \'\' || this.matches(\'^/([0-9]|[1-9][0-9]|1[0-2][0-8])$\') || this.isIpPrefix(true)\xba\x01N\n\x0fstring.ip_empty\x12/value is empty, which is not a valid IP address\x1a\nthis != \'\'\xc8\x01\x01R\x04\x63idr\x12<\n\x05state\x18\x02 \x01(\x0e\x32 .nebius.vpc.v1.AddressBlockStateB\x04\xbaJ\x01\x07R\x05state\x12\x36\n\x0fmax_mask_length\x18\x03 \x01(\x03\x42\x0e\xbaH\x07\"\x05\x18\x80\x01(\x00\xbaJ\x01\x07R\rmaxMaskLength\"\xfa\x01\n\nPoolStatus\x12\x35\n\x05state\x18\x01 \x01(\x0e\x32\x1f.nebius.vpc.v1.PoolStatus.StateR\x05state\x12\x14\n\x05\x63idrs\x18\x02 \x03(\tR\x05\x63idrs\x12\x19\n\x08scope_id\x18\x03 \x01(\tR\x07scopeId\x12=\n\nassignment\x18\x04 \x01(\x0b\x32\x1d.nebius.vpc.v1.PoolAssignmentR\nassignment\"E\n\x05State\x12\x15\n\x11STATE_UNSPECIFIED\x10\x00\x12\x0c\n\x08\x43REATING\x10\x01\x12\t\n\x05READY\x10\x02\x12\x0c\n\x08\x44\x45LETING\x10\x03\"F\n\x0ePoolAssignment\x12\x1a\n\x08networks\x18\x01 \x03(\tR\x08networks\x12\x18\n\x07subnets\x18\x02 \x03(\tR\x07subnets*G\n\x11\x41\x64\x64ressBlockState\x12\x15\n\x11STATE_UNSPECIFIED\x10\x00\x12\r\n\tAVAILABLE\x10\x01\x12\x0c\n\x08\x44ISABLED\x10\x02*;\n\tIpVersion\x12\x1a\n\x16IP_VERSION_UNSPECIFIED\x10\x00\x12\x08\n\x04IPV4\x10\x01\x12\x08\n\x04IPV6\x10\x02*F\n\x0cIpVisibility\x12\x1d\n\x19IP_VISIBILITY_UNSPECIFIED\x10\x00\x12\x0b\n\x07PRIVATE\x10\x01\x12\n\n\x06PUBLIC\x10\x02\x42P\n\x14\x61i.nebius.pub.vpc.v1B\tPoolProtoP\x01Z+github.com/nebius/gosdk/proto/nebius/vpc/v1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'nebius.vpc.v1.pool_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\024ai.nebius.pub.vpc.v1B\tPoolProtoP\001Z+github.com/nebius/gosdk/proto/nebius/vpc/v1'
  _POOLSPEC.fields_by_name['source_pool_id']._options = None
  _POOLSPEC.fields_by_name['source_pool_id']._serialized_options = b'\272J\001\002'
  _POOLSPEC.fields_by_name['version']._options = None
  _POOLSPEC.fields_by_name['version']._serialized_options = b'\272H\003\310\001\001\272J\001\002'
  _POOLSPEC.fields_by_name['visibility']._options = None
  _POOLSPEC.fields_by_name['visibility']._serialized_options = b'\272H\003\310\001\001\272J\001\002'
  _POOLCIDR.fields_by_name['cidr']._options = None
  _POOLCIDR.fields_by_name['cidr']._serialized_options = b'\272H\365\001\272\001\235\001\n\021string.valid_cidr\022.value must be a valid IP address, CIDR or mask\032Xthis == \'\' || this.matches(\'^/([0-9]|[1-9][0-9]|1[0-2][0-8])$\') || this.isIpPrefix(true)\272\001N\n\017string.ip_empty\022/value is empty, which is not a valid IP address\032\nthis != \'\'\310\001\001'
  _POOLCIDR.fields_by_name['state']._options = None
  _POOLCIDR.fields_by_name['state']._serialized_options = b'\272J\001\007'
  _POOLCIDR.fields_by_name['max_mask_length']._options = None
  _POOLCIDR.fields_by_name['max_mask_length']._serialized_options = b'\272H\007\"\005\030\200\001(\000\272J\001\007'
  _globals['_ADDRESSBLOCKSTATE']._serialized_start=1270
  _globals['_ADDRESSBLOCKSTATE']._serialized_end=1341
  _globals['_IPVERSION']._serialized_start=1343
  _globals['_IPVERSION']._serialized_end=1402
  _globals['_IPVISIBILITY']._serialized_start=1404
  _globals['_IPVISIBILITY']._serialized_end=1474
  _globals['_POOL']._serialized_start=132
  _globals['_POOL']._serialized_end=298
  _globals['_POOLSPEC']._serialized_start=301
  _globals['_POOLSPEC']._serialized_end=539
  _globals['_POOLCIDR']._serialized_start=542
  _globals['_POOLCIDR']._serialized_end=943
  _globals['_POOLSTATUS']._serialized_start=946
  _globals['_POOLSTATUS']._serialized_end=1196
  _globals['_POOLSTATUS_STATE']._serialized_start=1127
  _globals['_POOLSTATUS_STATE']._serialized_end=1196
  _globals['_POOLASSIGNMENT']._serialized_start=1198
  _globals['_POOLASSIGNMENT']._serialized_end=1268
# @@protoc_insertion_point(module_scope)
