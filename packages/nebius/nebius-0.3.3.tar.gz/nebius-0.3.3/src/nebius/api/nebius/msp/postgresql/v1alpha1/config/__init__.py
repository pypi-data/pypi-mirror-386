# 
# Generated by the nebius.base.protos.compiler.  DO NOT EDIT!
# 

"""Auto-generated Nebius SDK package for ``nebius.msp.postgresql.v1alpha1.config``"""

import builtins as builtins
import collections.abc as abc
import google.protobuf.descriptor as descriptor_1
import google.protobuf.message as message_1
import nebius.api.nebius.msp.postgresql.v1alpha1.config.postgresql_pb2 as postgresql_pb2
import nebius.base.protos.descriptor as descriptor
import nebius.base.protos.pb_classes as pb_classes
import nebius.base.protos.unset as unset
import typing as typing
#@ local imports here @#

# file: nebius/msp/postgresql/v1alpha1/config/postgresql.proto
class PostgresqlConfig16(pb_classes.Message):
    __PB2_CLASS__ = postgresql_pb2.PostgresqlConfig16
    __PB2_DESCRIPTOR__ = descriptor.DescriptorWrap[descriptor_1.Descriptor](".nebius.msp.postgresql.v1alpha1.config.PostgresqlConfig16",postgresql_pb2.DESCRIPTOR,descriptor_1.Descriptor)
    __mask_functions__ = {
    }
    
    class __OneOfClass__autovacuum_work_mem__(pb_classes.OneOf):
        name: builtins.str= "_autovacuum_work_mem"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__autovacuum_work_mem_autovacuum_work_mem__(__OneOfClass__autovacuum_work_mem__):
        field: typing.Literal["autovacuum_work_mem"] = "autovacuum_work_mem"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.int":
            return self._message.autovacuum_work_mem
    
    @builtins.property
    def _autovacuum_work_mem(self) -> __OneOfClass__autovacuum_work_mem_autovacuum_work_mem__|None:
        field_name_1: str|None = super().which_field_in_oneof("_autovacuum_work_mem")
        match field_name_1:
            case "autovacuum_work_mem":
                return self.__OneOfClass__autovacuum_work_mem_autovacuum_work_mem__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__statement_timeout__(pb_classes.OneOf):
        name: builtins.str= "_statement_timeout"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__statement_timeout_statement_timeout__(__OneOfClass__statement_timeout__):
        field: typing.Literal["statement_timeout"] = "statement_timeout"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.int":
            return self._message.statement_timeout
    
    @builtins.property
    def _statement_timeout(self) -> __OneOfClass__statement_timeout_statement_timeout__|None:
        field_name_1: str|None = super().which_field_in_oneof("_statement_timeout")
        match field_name_1:
            case "statement_timeout":
                return self.__OneOfClass__statement_timeout_statement_timeout__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__idle_in_transaction_session_timeout__(pb_classes.OneOf):
        name: builtins.str= "_idle_in_transaction_session_timeout"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__idle_in_transaction_session_timeout_idle_in_transaction_session_timeout__(__OneOfClass__idle_in_transaction_session_timeout__):
        field: typing.Literal["idle_in_transaction_session_timeout"] = "idle_in_transaction_session_timeout"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.int":
            return self._message.idle_in_transaction_session_timeout
    
    @builtins.property
    def _idle_in_transaction_session_timeout(self) -> __OneOfClass__idle_in_transaction_session_timeout_idle_in_transaction_session_timeout__|None:
        field_name_1: str|None = super().which_field_in_oneof("_idle_in_transaction_session_timeout")
        match field_name_1:
            case "idle_in_transaction_session_timeout":
                return self.__OneOfClass__idle_in_transaction_session_timeout_idle_in_transaction_session_timeout__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__autovacuum_vacuum_cost_delay__(pb_classes.OneOf):
        name: builtins.str= "_autovacuum_vacuum_cost_delay"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__autovacuum_vacuum_cost_delay_autovacuum_vacuum_cost_delay__(__OneOfClass__autovacuum_vacuum_cost_delay__):
        field: typing.Literal["autovacuum_vacuum_cost_delay"] = "autovacuum_vacuum_cost_delay"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.int":
            return self._message.autovacuum_vacuum_cost_delay
    
    @builtins.property
    def _autovacuum_vacuum_cost_delay(self) -> __OneOfClass__autovacuum_vacuum_cost_delay_autovacuum_vacuum_cost_delay__|None:
        field_name_1: str|None = super().which_field_in_oneof("_autovacuum_vacuum_cost_delay")
        match field_name_1:
            case "autovacuum_vacuum_cost_delay":
                return self.__OneOfClass__autovacuum_vacuum_cost_delay_autovacuum_vacuum_cost_delay__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__autovacuum_vacuum_cost_limit__(pb_classes.OneOf):
        name: builtins.str= "_autovacuum_vacuum_cost_limit"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__autovacuum_vacuum_cost_limit_autovacuum_vacuum_cost_limit__(__OneOfClass__autovacuum_vacuum_cost_limit__):
        field: typing.Literal["autovacuum_vacuum_cost_limit"] = "autovacuum_vacuum_cost_limit"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.int":
            return self._message.autovacuum_vacuum_cost_limit
    
    @builtins.property
    def _autovacuum_vacuum_cost_limit(self) -> __OneOfClass__autovacuum_vacuum_cost_limit_autovacuum_vacuum_cost_limit__|None:
        field_name_1: str|None = super().which_field_in_oneof("_autovacuum_vacuum_cost_limit")
        match field_name_1:
            case "autovacuum_vacuum_cost_limit":
                return self.__OneOfClass__autovacuum_vacuum_cost_limit_autovacuum_vacuum_cost_limit__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__autovacuum_naptime__(pb_classes.OneOf):
        name: builtins.str= "_autovacuum_naptime"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__autovacuum_naptime_autovacuum_naptime__(__OneOfClass__autovacuum_naptime__):
        field: typing.Literal["autovacuum_naptime"] = "autovacuum_naptime"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.int":
            return self._message.autovacuum_naptime
    
    @builtins.property
    def _autovacuum_naptime(self) -> __OneOfClass__autovacuum_naptime_autovacuum_naptime__|None:
        field_name_1: str|None = super().which_field_in_oneof("_autovacuum_naptime")
        match field_name_1:
            case "autovacuum_naptime":
                return self.__OneOfClass__autovacuum_naptime_autovacuum_naptime__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__autovacuum_vacuum_scale_factor__(pb_classes.OneOf):
        name: builtins.str= "_autovacuum_vacuum_scale_factor"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__autovacuum_vacuum_scale_factor_autovacuum_vacuum_scale_factor__(__OneOfClass__autovacuum_vacuum_scale_factor__):
        field: typing.Literal["autovacuum_vacuum_scale_factor"] = "autovacuum_vacuum_scale_factor"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.float":
            return self._message.autovacuum_vacuum_scale_factor
    
    @builtins.property
    def _autovacuum_vacuum_scale_factor(self) -> __OneOfClass__autovacuum_vacuum_scale_factor_autovacuum_vacuum_scale_factor__|None:
        field_name_1: str|None = super().which_field_in_oneof("_autovacuum_vacuum_scale_factor")
        match field_name_1:
            case "autovacuum_vacuum_scale_factor":
                return self.__OneOfClass__autovacuum_vacuum_scale_factor_autovacuum_vacuum_scale_factor__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__autovacuum_analyze_scale_factor__(pb_classes.OneOf):
        name: builtins.str= "_autovacuum_analyze_scale_factor"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__autovacuum_analyze_scale_factor_autovacuum_analyze_scale_factor__(__OneOfClass__autovacuum_analyze_scale_factor__):
        field: typing.Literal["autovacuum_analyze_scale_factor"] = "autovacuum_analyze_scale_factor"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.float":
            return self._message.autovacuum_analyze_scale_factor
    
    @builtins.property
    def _autovacuum_analyze_scale_factor(self) -> __OneOfClass__autovacuum_analyze_scale_factor_autovacuum_analyze_scale_factor__|None:
        field_name_1: str|None = super().which_field_in_oneof("_autovacuum_analyze_scale_factor")
        match field_name_1:
            case "autovacuum_analyze_scale_factor":
                return self.__OneOfClass__autovacuum_analyze_scale_factor_autovacuum_analyze_scale_factor__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__default_transaction_read_only__(pb_classes.OneOf):
        name: builtins.str= "_default_transaction_read_only"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__default_transaction_read_only_default_transaction_read_only__(__OneOfClass__default_transaction_read_only__):
        field: typing.Literal["default_transaction_read_only"] = "default_transaction_read_only"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.bool":
            return self._message.default_transaction_read_only
    
    @builtins.property
    def _default_transaction_read_only(self) -> __OneOfClass__default_transaction_read_only_default_transaction_read_only__|None:
        field_name_1: str|None = super().which_field_in_oneof("_default_transaction_read_only")
        match field_name_1:
            case "default_transaction_read_only":
                return self.__OneOfClass__default_transaction_read_only_default_transaction_read_only__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__search_path__(pb_classes.OneOf):
        name: builtins.str= "_search_path"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__search_path_search_path__(__OneOfClass__search_path__):
        field: typing.Literal["search_path"] = "search_path"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.str":
            return self._message.search_path
    
    @builtins.property
    def _search_path(self) -> __OneOfClass__search_path_search_path__|None:
        field_name_1: str|None = super().which_field_in_oneof("_search_path")
        match field_name_1:
            case "search_path":
                return self.__OneOfClass__search_path_search_path__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__max_connections__(pb_classes.OneOf):
        name: builtins.str= "_max_connections"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__max_connections_max_connections__(__OneOfClass__max_connections__):
        field: typing.Literal["max_connections"] = "max_connections"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.int":
            return self._message.max_connections
    
    @builtins.property
    def _max_connections(self) -> __OneOfClass__max_connections_max_connections__|None:
        field_name_1: str|None = super().which_field_in_oneof("_max_connections")
        match field_name_1:
            case "max_connections":
                return self.__OneOfClass__max_connections_max_connections__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    class __OneOfClass__shared_buffers__(pb_classes.OneOf):
        name: builtins.str= "_shared_buffers"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__()
            self._message: "PostgresqlConfig16" = msg
    
    class __OneOfClass__shared_buffers_shared_buffers__(__OneOfClass__shared_buffers__):
        field: typing.Literal["shared_buffers"] = "shared_buffers"
        
        def __init__(self, msg: "PostgresqlConfig16") -> None:
            super().__init__(msg)
        @builtins.property
        def value(self) -> "builtins.int":
            return self._message.shared_buffers
    
    @builtins.property
    def _shared_buffers(self) -> __OneOfClass__shared_buffers_shared_buffers__|None:
        field_name_1: str|None = super().which_field_in_oneof("_shared_buffers")
        match field_name_1:
            case "shared_buffers":
                return self.__OneOfClass__shared_buffers_shared_buffers__(self)
            case None:
                return None
            case _:
                raise pb_classes.OneOfMatchError(field_name_1)
    
    def __init__(
        self,
        initial_message: message_1.Message|None = None,
        *,
        autovacuum_work_mem: "builtins.int|None|unset.UnsetType" = unset.Unset,
        statement_timeout: "builtins.int|None|unset.UnsetType" = unset.Unset,
        idle_in_transaction_session_timeout: "builtins.int|None|unset.UnsetType" = unset.Unset,
        autovacuum_vacuum_cost_delay: "builtins.int|None|unset.UnsetType" = unset.Unset,
        autovacuum_vacuum_cost_limit: "builtins.int|None|unset.UnsetType" = unset.Unset,
        autovacuum_naptime: "builtins.int|None|unset.UnsetType" = unset.Unset,
        autovacuum_vacuum_scale_factor: "builtins.float|None|unset.UnsetType" = unset.Unset,
        autovacuum_analyze_scale_factor: "builtins.float|None|unset.UnsetType" = unset.Unset,
        default_transaction_read_only: "builtins.bool|None|unset.UnsetType" = unset.Unset,
        search_path: "builtins.str|None|unset.UnsetType" = unset.Unset,
        max_connections: "builtins.int|None|unset.UnsetType" = unset.Unset,
        shared_buffers: "builtins.int|None|unset.UnsetType" = unset.Unset,
    ) -> None:
        super().__init__(initial_message)
        if not isinstance(autovacuum_work_mem, unset.UnsetType):
            self.autovacuum_work_mem = autovacuum_work_mem
        if not isinstance(statement_timeout, unset.UnsetType):
            self.statement_timeout = statement_timeout
        if not isinstance(idle_in_transaction_session_timeout, unset.UnsetType):
            self.idle_in_transaction_session_timeout = idle_in_transaction_session_timeout
        if not isinstance(autovacuum_vacuum_cost_delay, unset.UnsetType):
            self.autovacuum_vacuum_cost_delay = autovacuum_vacuum_cost_delay
        if not isinstance(autovacuum_vacuum_cost_limit, unset.UnsetType):
            self.autovacuum_vacuum_cost_limit = autovacuum_vacuum_cost_limit
        if not isinstance(autovacuum_naptime, unset.UnsetType):
            self.autovacuum_naptime = autovacuum_naptime
        if not isinstance(autovacuum_vacuum_scale_factor, unset.UnsetType):
            self.autovacuum_vacuum_scale_factor = autovacuum_vacuum_scale_factor
        if not isinstance(autovacuum_analyze_scale_factor, unset.UnsetType):
            self.autovacuum_analyze_scale_factor = autovacuum_analyze_scale_factor
        if not isinstance(default_transaction_read_only, unset.UnsetType):
            self.default_transaction_read_only = default_transaction_read_only
        if not isinstance(search_path, unset.UnsetType):
            self.search_path = search_path
        if not isinstance(max_connections, unset.UnsetType):
            self.max_connections = max_connections
        if not isinstance(shared_buffers, unset.UnsetType):
            self.shared_buffers = shared_buffers
    
    def __dir__(self) ->abc.Iterable[builtins.str]:
        return [
            "autovacuum_work_mem",
            "statement_timeout",
            "idle_in_transaction_session_timeout",
            "autovacuum_vacuum_cost_delay",
            "autovacuum_vacuum_cost_limit",
            "autovacuum_naptime",
            "autovacuum_vacuum_scale_factor",
            "autovacuum_analyze_scale_factor",
            "default_transaction_read_only",
            "search_path",
            "max_connections",
            "shared_buffers",
            "_autovacuum_work_mem",
            "_statement_timeout",
            "_idle_in_transaction_session_timeout",
            "_autovacuum_vacuum_cost_delay",
            "_autovacuum_vacuum_cost_limit",
            "_autovacuum_naptime",
            "_autovacuum_vacuum_scale_factor",
            "_autovacuum_analyze_scale_factor",
            "_default_transaction_read_only",
            "_search_path",
            "_max_connections",
            "_shared_buffers",
        ]
    
    @builtins.property
    def autovacuum_work_mem(self) -> "builtins.int|None":
        """
        in kilobytes.
        """
        
        return super()._get_field("autovacuum_work_mem", explicit_presence=True,
        )
    @autovacuum_work_mem.setter
    def autovacuum_work_mem(self, value: "builtins.int|None") -> None:
        return super()._set_field("autovacuum_work_mem",value,explicit_presence=True,
        )
    
    @builtins.property
    def statement_timeout(self) -> "builtins.int|None":
        """
        in milliseconds.
        """
        
        return super()._get_field("statement_timeout", explicit_presence=True,
        )
    @statement_timeout.setter
    def statement_timeout(self, value: "builtins.int|None") -> None:
        return super()._set_field("statement_timeout",value,explicit_presence=True,
        )
    
    @builtins.property
    def idle_in_transaction_session_timeout(self) -> "builtins.int|None":
        """
        in milliseconds.
        """
        
        return super()._get_field("idle_in_transaction_session_timeout", explicit_presence=True,
        )
    @idle_in_transaction_session_timeout.setter
    def idle_in_transaction_session_timeout(self, value: "builtins.int|None") -> None:
        return super()._set_field("idle_in_transaction_session_timeout",value,explicit_presence=True,
        )
    
    @builtins.property
    def autovacuum_vacuum_cost_delay(self) -> "builtins.int|None":
        """
        in milliseconds.
        """
        
        return super()._get_field("autovacuum_vacuum_cost_delay", explicit_presence=True,
        )
    @autovacuum_vacuum_cost_delay.setter
    def autovacuum_vacuum_cost_delay(self, value: "builtins.int|None") -> None:
        return super()._set_field("autovacuum_vacuum_cost_delay",value,explicit_presence=True,
        )
    
    @builtins.property
    def autovacuum_vacuum_cost_limit(self) -> "builtins.int|None":
        return super()._get_field("autovacuum_vacuum_cost_limit", explicit_presence=True,
        )
    @autovacuum_vacuum_cost_limit.setter
    def autovacuum_vacuum_cost_limit(self, value: "builtins.int|None") -> None:
        return super()._set_field("autovacuum_vacuum_cost_limit",value,explicit_presence=True,
        )
    
    @builtins.property
    def autovacuum_naptime(self) -> "builtins.int|None":
        """
        in seconds.
        """
        
        return super()._get_field("autovacuum_naptime", explicit_presence=True,
        )
    @autovacuum_naptime.setter
    def autovacuum_naptime(self, value: "builtins.int|None") -> None:
        return super()._set_field("autovacuum_naptime",value,explicit_presence=True,
        )
    
    @builtins.property
    def autovacuum_vacuum_scale_factor(self) -> "builtins.float|None":
        return super()._get_field("autovacuum_vacuum_scale_factor", explicit_presence=True,
        )
    @autovacuum_vacuum_scale_factor.setter
    def autovacuum_vacuum_scale_factor(self, value: "builtins.float|None") -> None:
        return super()._set_field("autovacuum_vacuum_scale_factor",value,explicit_presence=True,
        )
    
    @builtins.property
    def autovacuum_analyze_scale_factor(self) -> "builtins.float|None":
        return super()._get_field("autovacuum_analyze_scale_factor", explicit_presence=True,
        )
    @autovacuum_analyze_scale_factor.setter
    def autovacuum_analyze_scale_factor(self, value: "builtins.float|None") -> None:
        return super()._set_field("autovacuum_analyze_scale_factor",value,explicit_presence=True,
        )
    
    @builtins.property
    def default_transaction_read_only(self) -> "builtins.bool|None":
        return super()._get_field("default_transaction_read_only", explicit_presence=True,
        )
    @default_transaction_read_only.setter
    def default_transaction_read_only(self, value: "builtins.bool|None") -> None:
        return super()._set_field("default_transaction_read_only",value,explicit_presence=True,
        )
    
    @builtins.property
    def search_path(self) -> "builtins.str|None":
        return super()._get_field("search_path", explicit_presence=True,
        )
    @search_path.setter
    def search_path(self, value: "builtins.str|None") -> None:
        return super()._set_field("search_path",value,explicit_presence=True,
        )
    
    @builtins.property
    def max_connections(self) -> "builtins.int|None":
        return super()._get_field("max_connections", explicit_presence=True,
        )
    @max_connections.setter
    def max_connections(self, value: "builtins.int|None") -> None:
        return super()._set_field("max_connections",value,explicit_presence=True,
        )
    
    @builtins.property
    def shared_buffers(self) -> "builtins.int|None":
        """
        in kilobytes.
        """
        
        return super()._get_field("shared_buffers", explicit_presence=True,
        )
    @shared_buffers.setter
    def shared_buffers(self, value: "builtins.int|None") -> None:
        return super()._set_field("shared_buffers",value,explicit_presence=True,
        )
    
    __PY_TO_PB2__: builtins.dict[builtins.str,builtins.str] = {
        "autovacuum_work_mem":"autovacuum_work_mem",
        "statement_timeout":"statement_timeout",
        "idle_in_transaction_session_timeout":"idle_in_transaction_session_timeout",
        "autovacuum_vacuum_cost_delay":"autovacuum_vacuum_cost_delay",
        "autovacuum_vacuum_cost_limit":"autovacuum_vacuum_cost_limit",
        "autovacuum_naptime":"autovacuum_naptime",
        "autovacuum_vacuum_scale_factor":"autovacuum_vacuum_scale_factor",
        "autovacuum_analyze_scale_factor":"autovacuum_analyze_scale_factor",
        "default_transaction_read_only":"default_transaction_read_only",
        "search_path":"search_path",
        "max_connections":"max_connections",
        "shared_buffers":"shared_buffers",
        "_autovacuum_work_mem":"_autovacuum_work_mem",
        "_statement_timeout":"_statement_timeout",
        "_idle_in_transaction_session_timeout":"_idle_in_transaction_session_timeout",
        "_autovacuum_vacuum_cost_delay":"_autovacuum_vacuum_cost_delay",
        "_autovacuum_vacuum_cost_limit":"_autovacuum_vacuum_cost_limit",
        "_autovacuum_naptime":"_autovacuum_naptime",
        "_autovacuum_vacuum_scale_factor":"_autovacuum_vacuum_scale_factor",
        "_autovacuum_analyze_scale_factor":"_autovacuum_analyze_scale_factor",
        "_default_transaction_read_only":"_default_transaction_read_only",
        "_search_path":"_search_path",
        "_max_connections":"_max_connections",
        "_shared_buffers":"_shared_buffers",
    }
    
__all__ = [
    #@ local import names here @#
    "PostgresqlConfig16",
]
