{
  "version": 3,
  "sources": ["../src/index.ts", "../src/ask-layout.ts", "../src/attribution.ts", "../src/audio-block.ts", "../src/image-block.ts", "../src/inline-format.ts", "../src/link-block.ts", "../src/media.ts", "../src/paywall-block.ts", "../src/poll-block.ts", "../src/rows-layout.ts", "../src/text-block.ts", "../src/video-block.ts", "../src/renderer.ts"],
  "sourcesContent": ["import {AskLayout} from './ask-layout';\nimport {AudioBlock} from './audio-block';\nimport {CondensedLayout} from './condensed-layout';\nimport {ImageBlock} from './image-block';\nimport {LinkBlock} from './link-block';\nimport {Options} from './options';\nimport {PaywallBlock} from './paywall-block';\nimport {PollBlock} from './poll-block';\nimport {Renderer} from './renderer';\nimport {RowsDisplay, RowsLayout} from './rows-layout';\nimport {TextBlock, TextBlockIndented} from './text-block';\nimport {VideoBlock} from './video-block';\n\nexport {AskLayout} from './ask-layout';\nexport {\n  Attribution,\n  PostAttribution,\n  Post,\n  LinkAttribution,\n  BlogAttribution,\n  AppAttribution,\n} from './attribution';\nexport {AudioBlock} from './audio-block';\nexport {BlogInfo} from './blog-info';\nexport {CondensedLayout} from './condensed-layout';\nexport {ImageBlock} from './image-block';\nexport {LinkBlock} from './link-block';\nexport {Media, VisualMedia} from './media';\nexport {Options} from './options';\nexport {PollAnswer, PollBlock, PollSettings} from './poll-block';\nexport {\n  PaywallBlock,\n  PaywallBlockCta,\n  PaywallBlockDivider,\n} from './paywall-block';\nexport {Renderer} from './renderer';\nexport {RowsDisplay, RowsLayout} from './rows-layout';\nexport {TextBlock, TextBlockNoIndent, TextBlockIndented} from './text-block';\nexport {\n  InlineFormat,\n  InlineFormatBasic,\n  InlineFormatLink,\n  InlineFormatMention,\n  InlineFormatColor,\n} from './inline-format';\nexport {VideoBlock, IFrame} from './video-block';\n\n/**\n * A single discrete unit of content.\n *\n * @see https://www.tumblr.com/docs/npf#content-blocks\n *\n * @category Content\n */\nexport type ContentBlock =\n  | AudioBlock\n  | ImageBlock\n  | LinkBlock\n  | PaywallBlock\n  | PollBlock\n  | TextBlock\n  | VideoBlock;\n\n/**\n * A block of unknown type, not documented as part of the Tumblr API.\n *\n * @category Content\n */\nexport interface UnknownBlock extends Record<string, unknown> {\n  /** The type of the block. */\n  type: string;\n}\n\n/**\n * A layout indicating how to lay out contents blocks.\n *\n * @see https://www.tumblr.com/docs/npf#layout-blocks\n *\n * @category Layout\n */\nexport type Layout = AskLayout | CondensedLayout | RowsLayout;\n\n/**\n * An interface for layouts that apply to specific adjacent groups of content\n * blocks that *aren't* just rendered as individual rows.\n */\ninterface LayoutGroup {\n  /** The layout describing how to render this group. */\n  layout: AskLayout | RowsDisplay;\n\n  /** The inclusive block index on which the group starts. */\n  start: number;\n\n  /** The exclusive block index before which the group ends. */\n  end: number;\n}\n\n/** Returns whether {@link block} is a {@link TextBlockIndented}. */\nfunction isTextBlockIndented(block: ContentBlock): block is TextBlockIndented {\n  return (\n    block.type === 'text' &&\n    (block.subtype === 'indented' ||\n      block.subtype === 'ordered-list-item' ||\n      block.subtype === 'unordered-list-item')\n  );\n}\n\n/**\n * If {@link options} includes layouts, this returns a list of {@link\n * LayoutGroup}s that indicate non-default layouts, ordered by start index.\n *\n * This assumes that all {@link LayoutGroup}s are contiguous and\n * non-overlapping.\n */\nfunction buildLayoutGroups(options?: Options): LayoutGroup[] {\n  const result: Array<AskLayout | RowsDisplay> = [];\n  for (const layout of options?.layout ?? []) {\n    if (layout.type === 'ask') {\n      result.push(layout);\n    } else if (layout.type === 'rows') {\n      for (const display of layout.display) {\n        if (display.blocks.length === 1) continue;\n        result.push(display);\n      }\n    }\n    // condensed layouts are handled via truncate_after, not as layout groups\n  }\n\n  return result\n    .map(layout => ({\n      layout,\n      start: Math.min(...layout.blocks),\n      end: Math.max(...layout.blocks) + 1,\n    }))\n    .sort((a, b) => a.start - b.start);\n}\n\n/**\n * Converts each NPF block in {@link blocks} to plain HTML and concatenates them\n * into a single string.\n *\n * @category Main\n */\nexport default function npf2html(\n  blocks: ContentBlock[],\n  options?: Options\n): string {\n  const renderer = options?.renderer ?? new Renderer(options);\n  let result = '';\n\n  // Handle truncate_after from both rows and condensed layouts\n  let truncateAfter: number | undefined;\n  for (const layout of options?.layout ?? []) {\n    if (layout.type === 'rows' && layout.truncate_after !== undefined) {\n      truncateAfter = layout.truncate_after;\n      break;\n    } else if (layout.type === 'condensed') {\n      // Validate that either blocks or truncate_after is present\n      if (layout.blocks === undefined && layout.truncate_after === undefined) {\n        throw new Error(\n          'Condensed layout requires either blocks or truncate_after to be present'\n        );\n      }\n\n      // Validate blocks if present (must be [0, 1, 2, ..., n-1])\n      if (layout.blocks !== undefined) {\n        if (layout.blocks.some((block, i) => block !== i)) {\n          throw new Error(\n            `Condensed layout has invalid blocks: [${layout.blocks}]`\n          );\n        }\n      }\n\n      // Use truncate_after if set, otherwise use the last block in blocks\n      // truncate_after=-1 or empty blocks means hide everything\n      if (layout.truncate_after !== undefined) {\n        truncateAfter = layout.truncate_after;\n      } else if (layout.blocks !== undefined) {\n        truncateAfter =\n          layout.blocks.length === 0\n            ? -1\n            : layout.blocks[layout.blocks.length - 1];\n      }\n      break;\n    }\n  }\n  let truncateIndex: number | undefined;\n\n  // If truncateAfter is -1, hide the entire post\n  if (truncateAfter === -1) {\n    truncateIndex = 0;\n  }\n\n  const layoutGroups = buildLayoutGroups(options);\n\n  // HTML contents of the current `layoutGroup`, if there is one.\n  let currentGroup = '';\n\n  for (let i = 0; i < blocks.length; i++) {\n    // Consumes all elements within a indented text block and renders them to a\n    // string.\n    const collectAndRenderIndented = (): string => {\n      const first = blocks[i] as TextBlockIndented;\n      const indentation = first.indent_level ?? 0;\n      const blocksAndNested: [\n        TextBlockIndented,\n        ...Array<TextBlockIndented | string>,\n      ] = [first];\n\n      while (i < blocks.length - 1) {\n        const sibling = blocks[i + 1];\n        if (!isTextBlockIndented(sibling)) break;\n        const siblingIndentation = sibling.indent_level ?? 0;\n        if (siblingIndentation < indentation) break;\n        if (siblingIndentation === indentation) {\n          if (sibling.subtype !== first.subtype) break;\n          i++;\n          blocksAndNested.push(sibling);\n        } else {\n          i++;\n          blocksAndNested.push(collectAndRenderIndented());\n        }\n      }\n\n      return renderer.renderTextIndented(blocksAndNested);\n    };\n\n    let blockResult: string;\n    const block = blocks[i];\n    switch (block.type) {\n      case 'audio':\n        blockResult = renderer.renderAudio(block);\n        break;\n\n      case 'image':\n        blockResult = renderer.renderImage(block);\n        break;\n\n      case 'link':\n        blockResult = renderer.renderLink(block);\n        break;\n\n      case 'paywall':\n        blockResult = renderer.renderPaywall(block);\n        break;\n\n      case 'poll':\n        blockResult = renderer.renderPoll(block);\n        break;\n\n      case 'video':\n        blockResult = renderer.renderVideo(block);\n        break;\n\n      case 'text':\n        if (isTextBlockIndented(block)) {\n          blockResult = collectAndRenderIndented();\n        } else {\n          blockResult = renderer.renderTextNoIndent(block);\n        }\n        break;\n\n      default:\n        blockResult = renderer.renderUnknown(block as UnknownBlock);\n        break;\n    }\n\n    const group = layoutGroups[0];\n    if (group && i >= group.start) {\n      currentGroup += blockResult;\n\n      if (i + 1 === group.end) {\n        layoutGroups.shift();\n        if ('type' in group.layout) {\n          result += renderer.renderAskLayout(group.layout, currentGroup);\n        } else {\n          result += renderer.renderRowLayout(group.layout, currentGroup);\n        }\n        currentGroup = '';\n      }\n    } else {\n      result += blockResult;\n    }\n\n    if (i === truncateAfter) {\n      truncateIndex = result.length;\n    }\n  }\n\n  if (truncateIndex !== undefined) {\n    result =\n      result.substring(0, truncateIndex) +\n      renderer.renderTruncateLayout(result.substring(truncateIndex));\n  }\n\n  return result;\n}\n", "import {BlogAttribution} from './attribution';\nimport {Renderer} from './renderer';\n\n/**\n * Content blocks that are part of an ask.\n *\n * @see https://www.tumblr.com/docs/npf#layout-block-type-ask\n *\n * @category Layout\n */\nexport interface AskLayout {\n  type: 'ask';\n\n  /** An array of block indices that are a part of the ask content of the Post. */\n  blocks: number[];\n\n  /**\n   * If the ask is not anonymous, this will include information about the blog\n   * that submitted the ask.\n   */\n  attribution?: BlogAttribution;\n}\n\n/**\n * Wraps {@link html} as an ask.\n *\n * @category Layout\n */\nexport function renderAskLayout(\n  renderer: Renderer,\n  layout: AskLayout,\n  html: string\n): string {\n  let result = `<div class=\"${renderer.prefix}-layout-ask\">`;\n\n  // cebtenzzre: omit huge avatar for consistency with legacy post HTML, until we come up with better styling\n  /* if (layout.attribution) {\n    result += `<a href=\"${renderer.escape(layout.attribution.blog.url)}\">`;\n  } else {\n    // Always wrap the avatar in an A tag even if there's nothing to link to to\n    // make it easier to style consistently.\n    result += '<a>';\n  }\n  result +=\n    renderer.renderImageMedia(renderer.askingAvatar) +\n    '</a><figure><figcaption>'; */\n  result += '<figure><figcaption>';\n\n  if (layout.attribution) {\n    result += `<a href=\"${renderer.escape(layout.attribution.blog.url)}\">`;\n  }\n  result +=\n    '<strong>' +\n    renderer.escape(layout.attribution?.blog?.name ?? 'Anonymous') +\n    '</strong> asked:';\n  if (layout.attribution) result += '</a>';\n  result += '</figcaption>' + html + '</figure></div>';\n  return result;\n}\n", "import {BlogInfo} from './blog-info';\nimport {VisualMedia} from './media';\nimport {Renderer} from './renderer';\n\n/** Attribution indicating where a content or layout block came from. */\nexport type Attribution =\n  | PostAttribution\n  | LinkAttribution\n  | BlogAttribution\n  | AppAttribution;\n\n// cebtenzzre: sometimes attribution is an empty array, I have seen this in the wild\nexport type MaybeAttribution = Attribution | [];\n\n/**\n * Type guard to check if {@link attr} is a valid Attribution object and not an\n * empty array.\n */\nexport function isAttribution(attr?: MaybeAttribution): attr is Attribution {\n  return !!attr && 'type' in attr;\n}\n\n/**\n * Attributes an image to a particular post.\n *\n * @see https://www.tumblr.com/docs/npf#attribution-type-post\n */\nexport interface PostAttribution {\n  type: 'post';\n\n  /** The URL of the post to be attributed. */\n  url: string;\n\n  /** The post to be attributed. */\n  post: Post;\n\n  /** The blog whose post is attributed. */\n  blog: BlogInfo;\n}\n\n/** A reference to a Tumblr post. */\nexport interface Post {\n  id: string;\n}\n\n/**\n * Attributes an image to an arbitrary link.\n *\n * @see https://www.tumblr.com/docs/npf#attribution-type-link\n */\nexport interface LinkAttribution {\n  type: 'link';\n\n  /** The URL to be attributed for the content. */\n  url: string;\n}\n\n/**\n * Attributes something to a specific Tumblr blog.\n *\n * @see https://www.tumblr.com/docs/npf#attribution-type-blog\n */\nexport interface BlogAttribution {\n  type: 'blog';\n\n  /** The blog to which this is attributed. */\n  blog: BlogInfo;\n}\n\n/**\n * Attributes something to a third-party app.\n *\n * @see https://www.tumblr.com/docs/npf#attribution-type-app\n */\nexport interface AppAttribution {\n  type: 'app';\n\n  /** The canonical URL to the source content in the third-party app. */\n  url: string;\n\n  /** The name of the application to be attributed. */\n  app_name?: string;\n\n  /** Any display text that the client should use with the attribution. */\n  display_text?: string;\n\n  /**\n   * A specific logo that the client should use with the third-party app\n   * attribution.\n   */\n  logo?: VisualMedia;\n}\n\n/** Converts {@link attribution} to HTML. */\nexport function renderAttribution(\n  renderer: Renderer,\n  attribution: Attribution\n): string {\n  const href =\n    attribution.type === 'blog' ? attribution.blog.url : attribution.url;\n  let result =\n    `<a class=\"${renderer.prefix}-attribution` +\n    ` ${renderer.prefix}-attribution-${attribution.type}\"` +\n    ` href=\"${renderer.escape(href)}\">`;\n\n  switch (attribution.type) {\n    case 'post':\n    case 'blog':\n      result += renderer.escape(attribution.blog.name);\n      break;\n\n    case 'link':\n      result += renderer.escape(attribution.url);\n      break;\n\n    case 'app': {\n      const display = attribution.display_text || attribution.app_name;\n      if (display) result += renderer.escape(display);\n      if (attribution.logo) {\n        result += renderer.renderImageMedia([attribution.logo]);\n      } else if (!display) {\n        result += renderer.escape(attribution.url);\n      }\n    }\n  }\n\n  return result + '</a>';\n}\n", "import {isAttribution, MaybeAttribution} from './attribution';\nimport {Media, VisualMedia} from './media';\nimport {Renderer} from './renderer';\n\n/**\n * An NPF audio type content block.\n *\n * @see https://www.tumblr.com/docs/npf#content-block-type-audio\n *\n * @category Content\n */\nexport interface AudioBlock {\n  type: 'audio';\n\n  /**\n   * The URL to use for the audio block. Either this, {@link media}, or both\n   * will always be set.\n   */\n  url?: string | null;\n\n  /**\n   * The {@link Media} to use for the audio block. Either this, {@link url}, or\n   * both will always be set.\n   */\n  media?: Media;\n\n  /**\n   * The provider of the audio source, whether it's `tumblr` for native audio or\n   * a trusted third party.\n   */\n  provider?: string;\n\n  /** The title of the audio asset. */\n  title?: string;\n\n  /** The artist of the audio asset. */\n  artist?: string;\n\n  /** The album from which the audio asset originated. */\n  album?: string;\n\n  /**\n   * An image media object to use as a \"poster\" for the audio track, usually\n   * album art.\n   */\n  poster?: VisualMedia[];\n\n  /** HTML code that could be used to embed this audio track into a webpage. */\n  embed_html?: string;\n\n  /** A URL to the embeddable content to use as an iframe. */\n  embed_url?: string;\n\n  /** Optional provider-specific metadata about the audio track. */\n  metadata?: Record<string, unknown>;\n\n  /** Optional attribution information about where the audio track came from. */\n  attribution?: MaybeAttribution;\n}\n\n/**\n * Converts {@link block} to HTML.\n *\n * @category Content\n */\nexport function renderAudio(renderer: Renderer, block: AudioBlock): string {\n  let result = `<figure class=\"${renderer.prefix}-block-audio\">`;\n  if (block.media || !(block.embed_html || block.embed_url)) {\n    const hasText = block.title || block.artist || block.album;\n    const hasCaption =\n      block.poster || isAttribution(block.attribution) || hasText;\n    if (block.media) {\n      result +=\n        `<audio controls src=\"${renderer.escape(block.media.url)}\">` +\n        '</audio>';\n      if (hasCaption) result += '<figcaption>';\n    } else {\n      result += `<a href=\"${renderer.escape(block.url!)}\">`;\n    }\n\n    if (block.poster) {\n      result += renderer.renderImageMedia(block.poster);\n    }\n    if (block.title) {\n      result +=\n        `<span class=\"${renderer.prefix}-block-audio-title\">` +\n        renderer.escape(block.title) +\n        '</span>';\n    }\n    if (block.artist) {\n      if (block.title) result += ' - ';\n      result +=\n        `<span class=\"${renderer.prefix}-block-audio-artist\">` +\n        renderer.escape(block.artist) +\n        '</span>';\n    }\n    if (block.album) {\n      if (block.title || block.artist) result += ' on ';\n      result +=\n        `<span class=\"${renderer.prefix}-block-audio-album\">` +\n        renderer.escape(block.album) +\n        '</span>';\n    }\n    if (!block.media) {\n      if (!hasText) result += renderer.escape(block.url!);\n      result += '</a>';\n    }\n\n    if (isAttribution(block.attribution)) {\n      if (!block.media) result += '<figcaption>';\n      result += renderer.renderAttribution(block.attribution);\n      if (!block.media) result += '</figcaption>';\n    }\n\n    if (block.media && hasCaption) result += '</figcaption>';\n  } else {\n    result += block.embed_html\n      ? block.embed_html\n      : `<iframe src=\"${renderer.escape(block.embed_url!)}\"></iframe>`;\n\n    if (isAttribution(block.attribution)) {\n      result +=\n        '<figcaption>' +\n        renderer.renderAttribution(block.attribution) +\n        '</figcaption>';\n    }\n  }\n  result += '</figure>';\n  return result;\n}\n", "import {isAttribution, MaybeAttribution} from './attribution';\nimport {VisualMedia} from './media';\nimport {Renderer} from './renderer';\n\n/**\n * An NPF image type content block.\n *\n * @see https://www.tumblr.com/docs/npf#content-block-type-image\n *\n * @category Content\n */\nexport interface ImageBlock {\n  type: 'image';\n\n  /**\n   * An array of {@link VisualMedia} objects which represent different available\n   * sizes of this image asset.\n   */\n  media: VisualMedia[];\n\n  /** Colors used in the image. */\n  colors?: Record<string, string>;\n\n  /** A feedback token to use when this image block is a GIF Search result. */\n  feedback_token?: string;\n\n  /**\n   * For GIFs, this is a single-frame \"poster\".\n   *\n   * @see https://www.tumblr.com/docs/npf#gif-posters\n   */\n  poster?: VisualMedia;\n\n  /** @see https://www.tumblr.com/docs/npf#attributions */\n  attribution?: MaybeAttribution;\n\n  /** Text used to describe the image, for screen readers. */\n  alt_text?: string;\n\n  /** A caption typically shown under the image. */\n  caption?: string;\n}\n\n/**\n * Converts {@link block} to HTML.\n *\n * @category Content\n */\nexport function renderImage(renderer: Renderer, block: ImageBlock): string {\n  const highestResImage = block.media.reduce((best, current) =>\n    best && (best.width ?? 0) > (current.width ?? 0) ? best : current\n  );\n  let result =\n    `<figure class=\"${renderer.prefix}-block-image\">` +\n    `<a href=\"${renderer.escape(highestResImage.url)}\">` +\n    renderer.renderImageMedia(block.media, {alt: block.alt_text}) +\n    '</a>';\n  if (block.caption || isAttribution(block.attribution)) {\n    result += '<figcaption>';\n    if (block.caption) {\n      result +=\n        `<span class=\"${renderer.prefix}-block-image-caption\">` +\n        renderer.escape(block.caption) +\n        '</span>';\n    }\n    if (isAttribution(block.attribution))\n      result += renderer.renderAttribution(block.attribution);\n    result += '</figcaption>';\n  }\n  result += '</figure>';\n  return result;\n}\n", "import {BlogInfo} from './blog-info';\nimport {Renderer} from './renderer';\n\n/**\n * A single piece of inline formatting for a {@link TextBlock}.\n *\n * @see https://www.tumblr.com/docs/npf#inline-formatting-within-a-text-block\n *\n * @category Inline\n */\nexport type InlineFormat =\n  | InlineFormatBasic\n  | InlineFormatLink\n  | InlineFormatMention\n  | InlineFormatColor;\n\n/** The base interface for all types of inline formatting. */\ninterface InlineFormatBase {\n  /** The starting index of the formatting range (inclusive). */\n  start: number;\n\n  /** The ending index of the formatting range (inclusive). */\n  end: number;\n}\n\n/**\n * Basic inline formatting types that require no additional information.\n *\n * @see https://www.tumblr.com/docs/npf#inline-format-types-bold-italic-strikethrough-small\n *\n * @category Inline\n */\nexport interface InlineFormatBasic extends InlineFormatBase {\n  type: 'bold' | 'italic' | 'strikethrough' | 'small';\n}\n\n/**\n * An inline link.\n *\n * @see https://www.tumblr.com/docs/npf#inline-format-type-link\n *\n * @category Inline\n */\nexport interface InlineFormatLink extends InlineFormatBase {\n  type: 'link';\n\n  /** The link's URL. */\n  url: string;\n}\n\n/**\n * A mention of another blog.\n *\n * @see https://www.tumblr.com/docs/npf#inline-format-type-mention\n *\n * @category Inline\n */\nexport interface InlineFormatMention extends InlineFormatBase {\n  type: 'mention';\n\n  /** The mentioned blog. */\n  blog: BlogInfo;\n}\n\n/**\n * Colored text.\n *\n * @see https://www.tumblr.com/docs/npf#inline-format-type-color\n *\n * @category Inline\n */\nexport interface InlineFormatColor extends InlineFormatBase {\n  type: 'color';\n\n  /** The color to use, in standard hex format, with leading #. */\n  hex: string;\n}\n\n/**\n * An intermediate interface used when processing inline formatting that\n * represents a specific kind of formatting, its range in terms of JS indices,\n * and the formatting nested within it.\n */\ninterface InlineFormatSpan {\n  /** The formatting to apply. */\n  format: InlineFormat;\n\n  /**\n   * Unique-ish identity for dedupe and diff.\n   */\n  key: string;\n\n  /**\n   * The inclusive code point index in the text at which this span starts.\n   */\n  start: number;\n\n  /**\n   * The exclusive code point index in the text at which this span ends (exclusive).\n   */\n  end: number;\n}\n\n/**\n * Pre-processes {@link formatting} to combine any adjacent identical formats.\n * Tumblr sometimes splits these up when other formatting is also present, so\n * this produces cleaner HTML.\n **/\nfunction mergeAdjacentFormats(formatting: InlineFormat[]): InlineFormat[] {\n  // A map from format types to the index in mergedFormats of the most recent\n  // occurance of those formats.\n  const lastFormatOfType: Partial<Record<InlineFormat['type'], number>> = {};\n  const mergedFormats: InlineFormat[] = [];\n\n  for (const format of formatting) {\n    // Never merge links or mentions.\n    if (format.type === 'link' || format.type === 'mention') {\n      mergedFormats.push(format);\n      continue;\n    }\n\n    const lastIndex = lastFormatOfType[format.type];\n    if (lastIndex !== undefined) {\n      const last = mergedFormats[lastIndex];\n      if (last && canMerge(last, format)) {\n        mergedFormats[lastIndex] = {...last, end: format.end};\n        continue;\n      }\n    }\n\n    lastFormatOfType[format.type] = mergedFormats.length;\n    mergedFormats.push(format);\n  }\n\n  return mergedFormats;\n}\n\n/** Returns whether two {@link InlineFormat}s can be safely merged. */\nfunction canMerge(format1: InlineFormat, format2: InlineFormat): boolean {\n  if (format1.end !== format2.start) return false;\n  if (format1.type !== format2.type) return false;\n  switch (format1.type) {\n    case 'bold':\n    case 'italic':\n    case 'strikethrough':\n    case 'small':\n      return true;\n    case 'link':\n    case 'mention':\n      return false;\n    case 'color':\n      return format1.hex === (format2 as InlineFormatColor).hex;\n  }\n}\n\nfunction makeKey(f: InlineFormat): string {\n  switch (f.type) {\n    case 'bold':\n    case 'italic':\n    case 'strikethrough':\n    case 'small':\n      return f.type;\n    case 'color':\n      return `color:${(f as InlineFormatColor).hex.toLowerCase()}`;\n    case 'link':\n      return `link:${(f as InlineFormatLink).url}`;\n    case 'mention':\n      // blog.url is a decent identity key for mentions in practice\n      return `mention:${(f as InlineFormatMention).blog.url}`;\n  }\n}\n\nfunction stableOrderRank(f: InlineFormatSpan): number {\n  // Outer \u2192 inner. Keep a deterministic order to minimize churn.\n  switch (f.format.type) {\n    case 'link':\n      return 0; // anchors outermost\n    case 'mention':\n      return 1;\n    case 'color':\n      return 2;\n    case 'bold':\n      return 3;\n    case 'italic':\n      return 4;\n    case 'strikethrough':\n      return 5;\n    case 'small':\n      return 6;\n  }\n}\n\nfunction isAnchor(f: InlineFormatSpan): boolean {\n  return f.format.type === 'link' || f.format.type === 'mention';\n}\n\n// Choose exactly one active anchor for a segment using\n// \"most-recently opened wins\": maximal start; tie \u2192 tighter range; tie \u2192 key.\nfunction pickWinningAnchor(\n  active: InlineFormatSpan[]\n): InlineFormatSpan | null {\n  const anchors = active.filter(isAnchor);\n  if (anchors.length === 0) return null;\n  anchors.sort((a, b) => {\n    if (a.start !== b.start) return b.start - a.start; // later start wins\n    const lenA = a.end - a.start;\n    const lenB = b.end - b.start;\n    if (lenA !== lenB) return lenA - lenB; // tighter wins\n    return a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\n  });\n  return anchors[0]!;\n}\n\nfunction openTag(renderer: Renderer, f: InlineFormatSpan): string {\n  switch (f.format.type) {\n    case 'bold':\n      return '<strong>';\n    case 'italic':\n      return '<em>';\n    case 'strikethrough':\n      return '<s>';\n    case 'small':\n      return '<small>';\n    case 'color':\n      return `<span style=\"color: ${renderer.escape(f.format.hex)}\">`;\n    case 'link':\n      return `<a href=\"${renderer.escape(f.format.url)}\">`;\n    case 'mention':\n      return `<a class=\"${renderer.prefix}-inline-mention\" href=\"${renderer.escape(f.format.blog.url)}\">`;\n  }\n}\n\nfunction closeTag(f: InlineFormatSpan): string {\n  switch (f.format.type) {\n    case 'bold':\n      return '</strong>';\n    case 'italic':\n      return '</em>';\n    case 'strikethrough':\n      return '</s>';\n    case 'small':\n      return '</small>';\n    case 'color':\n      return '</span>';\n    case 'link':\n    case 'mention':\n      return '</a>';\n  }\n}\n\n// --- helpers: codepoint <-> code unit mapping ---\nfunction buildCpToCuMap(s: string): number[] {\n  const map: number[] = [0]; // cp index -> cu offset\n  let cu = 0;\n  for (let i = 0; i < s.length; ) {\n    const code = s.charCodeAt(i);\n    const isHigh = (code & 0xfc00) === 0xd800;\n    const step = isHigh ? 2 : 1;\n    cu += step;\n    i += step;\n    map.push(cu);\n  }\n  return map; // length = cpLen + 1 (terminal offset at end)\n}\n\n/**\n * Applies the formatting specified by {@link format} to {@link html}, which may\n * already include nested formatting.\n *\n * @category Inline\n */\nexport function renderInlineFormat(\n  renderer: Renderer,\n  html: string,\n  format: InlineFormat\n): string {\n  switch (format.type) {\n    case 'bold':\n      return `<strong>${html}</strong>`;\n    case 'italic':\n      return `<em>${html}</em>`;\n    case 'strikethrough':\n      return `<s>${html}</s>`;\n    case 'small':\n      return `<small>${html}</small>`;\n    case 'link':\n      return `<a href=\"${renderer.escape(format.url)}\">${html}</a>`;\n    case 'mention':\n      return (\n        `<a class=\"${renderer.prefix}-inline-mention\"` +\n        ` href=\"${renderer.escape(format.blog.url)}\">${html}</a>`\n      );\n    case 'color':\n      return (\n        `<span style=\"color: ${renderer.escape(format.hex)}\">` +\n        html +\n        '</span>'\n      );\n  }\n}\n\n/** HTML-escapes {@link text} and formats it according to {@link formatting}. */\nexport function formatText(\n  renderer: Renderer,\n  text: string,\n  formatting: InlineFormat[] | undefined\n): string {\n  if (!formatting || formatting.length === 0) return renderer.escape(text);\n\n  // Optional prepass: merge adjacent identical formats\n  const fmts = mergeAdjacentFormats(formatting);\n\n  // Build code-point \u2192 code-unit map\n  const cpToCu = buildCpToCuMap(text);\n  const cpLen = cpToCu.length - 1;\n\n  // Normalize, clamp, make keys\n  type Range = {f: InlineFormatSpan};\n  const ranges: Range[] = [];\n  for (const raw of fmts) {\n    const startCp = Math.max(0, Math.min(cpLen, raw.start));\n    const endCpEx = Math.max(startCp, Math.min(cpLen, raw.end ?? raw.start));\n    if (startCp >= endCpEx) continue;\n    const keyed: InlineFormatSpan = {\n      format: raw,\n      key: makeKey(raw),\n      start: startCp,\n      end: endCpEx,\n    };\n    ranges.push({f: keyed});\n  }\n  if (ranges.length === 0) return renderer.escape(text);\n\n  // Deterministic sort (start, end, rank, key)\n  ranges.sort(\n    (A, B) =>\n      A.f.start - B.f.start ||\n      A.f.end - B.f.end ||\n      stableOrderRank(A.f) - stableOrderRank(B.f) ||\n      (A.f.key < B.f.key ? -1 : A.f.key > B.f.key ? 1 : 0)\n  );\n\n  // Collect breakpoints\n  const bpSet = new Set<number>();\n  for (const r of ranges) {\n    bpSet.add(r.f.start);\n    bpSet.add(r.f.end);\n  }\n  bpSet.add(0);\n  bpSet.add(cpLen);\n  const bps = Array.from(bpSet).sort((a, b) => a - b);\n\n  // Sweep state\n  let ri = 0; // lower bound of possibly-active ranges\n  const open: InlineFormatSpan[] = []; // open stack (outer \u2192 inner)\n  let out = '';\n\n  for (let i = 0; i < bps.length - 1; i++) {\n    const segStart = bps[i]!;\n    const segEnd = bps[i + 1]!;\n    if (segStart >= segEnd) continue;\n\n    // Compute active formats for this segment\n    while (ri < ranges.length && ranges[ri]!.f.end <= segStart) ri++;\n\n    const active: InlineFormatSpan[] = [];\n    for (let j = ri; j < ranges.length; j++) {\n      const r = ranges[j]!.f;\n      if (r.start > segStart) break;\n      if (r.end > segStart) active.push(r);\n    }\n\n    // Dedupe by key\n    const dedup: InlineFormatSpan[] = [];\n    {\n      const seen = new Set<string>();\n      for (const f of active) {\n        if (seen.has(f.key)) continue;\n        seen.add(f.key);\n        dedup.push(f);\n      }\n    }\n\n    // Select exactly one anchor per segment\n    const winner = pickWinningAnchor(dedup);\n\n    // Desired stack for this segment (filter to winner anchor + non-anchors)\n    const wanted: InlineFormatSpan[] = [];\n    for (const f of dedup) {\n      if (isAnchor(f)) {\n        if (winner && f.key === winner.key) wanted.push(f);\n      } else {\n        wanted.push(f);\n      }\n    }\n\n    // Smart ordering to minimize tag reopening:\n    // 1. Formats that started earlier should be outer (opened first)\n    // 2. When formats start at the same position, those ending later should be outer\n    wanted.sort((a, b) => {\n      // Anchors always go first (outermost)\n      const aIsAnchor = isAnchor(a);\n      const bIsAnchor = isAnchor(b);\n      if (aIsAnchor !== bIsAnchor) return aIsAnchor ? -1 : 1;\n\n      // Sort by start position (earlier start = outer = earlier in list)\n      if (a.start !== b.start) return a.start - b.start;\n\n      // If same start, sort by end position (later end = outer = earlier in list)\n      if (a.end !== b.end) return b.end - a.end;\n\n      // Tie: use stable rank\n      const ra = stableOrderRank(a);\n      const rb = stableOrderRank(b);\n      if (ra !== rb) return ra - rb;\n\n      // Final tie: use key\n      return a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\n    });\n\n    // Diff open vs wanted: close extras\n    let lcp = 0;\n    while (\n      lcp < open.length &&\n      lcp < wanted.length &&\n      open[lcp]!.key === wanted[lcp]!.key\n    ) {\n      lcp++;\n    }\n    for (let c = open.length - 1; c >= lcp; c--) out += closeTag(open[c]!);\n    open.length = lcp;\n\n    // Open new ones\n    for (let o = lcp; o < wanted.length; o++) {\n      const f = wanted[o]!;\n      out += openTag(renderer, f);\n      open.push(f);\n    }\n\n    // Emit text slice\n    const cuStart = cpToCu[segStart]!;\n    const cuEnd = cpToCu[segEnd]!;\n    out += renderer.escape(text.substring(cuStart, cuEnd));\n  }\n\n  // Close remaining\n  for (let c = open.length - 1; c >= 0; c--) out += closeTag(open[c]!);\n\n  return out;\n}\n", "import {VisualMedia} from './media';\nimport {Renderer} from './renderer';\n\n/**\n * An NPF link type content block.\n *\n * @see https://www.tumblr.com/docs/npf#content-block-type-link\n *\n * @category Content\n */\nexport interface LinkBlock {\n  type: 'link';\n\n  /** The URL to use for the link block. */\n  url: string;\n\n  /** The title of where the link goes. */\n  title?: string;\n\n  /** The description of where the link goes. */\n  description?: string;\n\n  /** The author of the link's content. */\n  author?: string;\n\n  /** The name of the site being linked to. */\n  site_name?: string;\n\n  display_url?: string;\n\n  /** An image media object to use as a \"poster\" for the link. */\n  poster?: VisualMedia[];\n}\n\n/**\n * Convets {@link block} to HTML.\n *\n * @category Content\n */\nexport function renderLink(renderer: Renderer, block: LinkBlock): string {\n  let result =\n    `<a class=\"${renderer.prefix}-block-link\"` +\n    ` href=\"${renderer.escape(block.url)}\">`;\n  if (block.poster) {\n    result += renderer.renderImageMedia(block.poster);\n  }\n  result +=\n    '<h2>' +\n    renderer.escape(block.title ?? block.display_url ?? block.url) +\n    '</h2>';\n  if (block.site_name) {\n    result +=\n      `<p class=\"${renderer.prefix}-block-link-site\">` +\n      `${renderer.escape(block.site_name)}</p>`;\n  }\n  if (block.author) {\n    result +=\n      `<p class=\"${renderer.prefix}-block-link-author\">` +\n      `${renderer.escape(block.author)}</p>`;\n  }\n  if (block.description) {\n    result +=\n      `<p class=\"${renderer.prefix}-block-link-description\">` +\n      `${renderer.escape(block.description)}</p>`;\n  }\n  result += '</a>';\n  return result;\n}\n", "import {Renderer} from './renderer';\n\n/**\n * An NPF media object.\n *\n * @see https://www.tumblr.com/docs/npf#media-objects\n */\nexport interface Media {\n  /** The canonical URL of the media asset. */\n  url: string;\n\n  /**\n   * The MIME type of the media asset, or a best approximation will be made\n   * based on the given URL.\n   */\n  type?: string;\n}\n\n/** An image or video media object. */\nexport interface VisualMedia extends Media {\n  /**\n   * The width of the media asset, if that makes sense (for images and videos,\n   * but not for audio).\n   */\n  width?: number;\n\n  /**\n   * The height of the media asset, if that makes sense (for images and videos,\n   * but not for audio).\n   */\n  height?: number;\n\n  /**\n   * For display purposes, this indicates whether the dimensions are defaults.\n   */\n  original_dimensions_missing?: boolean;\n\n  /**\n   * This indicates whether this media object is a cropped version of the\n   * original media.\n   */\n  cropped?: boolean;\n\n  /**\n   * This indicates whether this media object has the same dimensions as the\n   * original media\n   */\n  has_original_dimensions?: boolean;\n}\n\n/** Converts {@link media} to HTML. */\nexport function renderImageMedia(\n  renderer: Renderer,\n  media: VisualMedia[],\n  options?: {alt?: string}\n): string {\n  let result = '<img';\n\n  const primary = media.reduce((best, current) =>\n    best && (best.width ?? 0) > (current.width ?? 0) ? best : current\n  );\n  result += ` src=\"${renderer.escape(primary.url)}\"`;\n  if (options?.alt) result += ` alt=\"${renderer.escape(options.alt)}\"`;\n  result += '>';\n  return result;\n}\n", "import {Renderer} from './renderer';\n\n/**\n * An NPF paywall type content block.\n *\n * @see https://www.tumblr.com/docs/npf#content-block-type-paywall\n *\n * @category Content\n */\nexport type PaywallBlock = PaywallBlockCta | PaywallBlockDivider;\n\n/** The shared base class for {@link PaywallBlock} */\ninterface PaywallBlockBase {\n  type: 'paywall';\n\n  /** The paywall block design. */\n  subtype: 'cta' | 'divider' | 'disabled';\n\n  /** The creator profile url this paywall should link to. */\n  url: string;\n\n  /** Whether this paywall block is actually visible, default to true. */\n  is_visible?: boolean;\n}\n\n/**\n * A CTA (unpaid) or disabled paywall block.\n *\n * @category Content\n */\nexport interface PaywallBlockCta extends PaywallBlockBase {\n  subtype: 'cta' | 'disabled';\n\n  /** The CTA title that appears above the main text. */\n  title: string;\n\n  /** The main description text. */\n  text: string;\n}\n\n/**\n * A paywall block that appears as a divider.\n *\n * @category Content\n */\nexport interface PaywallBlockDivider extends PaywallBlockBase {\n  subtype: 'divider';\n\n  /** The label text. */\n  text: string;\n\n  /** The hex color for the label and divider, e.g. `#eeeeee`. */\n  color?: string;\n}\n\n/**\n * Converts {@link block} to HTML.\n *\n * @category Content\n */\nexport function renderPaywall(renderer: Renderer, block: PaywallBlock): string {\n  if (block.is_visible === false) return '';\n\n  let result =\n    `<a class=\"${renderer.prefix}-block-paywall ` +\n    `${renderer.prefix}-block-paywall-${block.subtype}\"` +\n    ` href=\"${renderer.escape(block.url)}\"`;\n  if (block.subtype === 'divider' && block.color) {\n    result += ` style=\"--${renderer.prefix}-paywall-color: ${block.color}\"`;\n  }\n  result += '>';\n  if (block.subtype !== 'divider' && block.title) {\n    result += `<h2>${renderer.escape(block.title)}</h2>`;\n  }\n  if (block.text) {\n    result += `<p>${renderer.escape(block.text)}</p>`;\n  }\n  result += '</a>';\n  return result;\n}\n", "import {Renderer} from './renderer';\n\n/**\n * An NPF poll type content block.\n *\n * This is not an officially-documented block type, so its documentation is\n * best-effort.\n *\n * @category Content\n */\nexport interface PollBlock {\n  type: 'poll';\n\n  /** The UUID for this poll. */\n  client_id: string;\n\n  /** The question this poll is answering. */\n  question: string;\n\n  /** The possible answers for the poll. */\n  answers: PollAnswer[];\n\n  /** The settings for creating this poll. */\n  settings: PollSettings;\n\n  /** A string representation of the moment this poll was created. */\n  created_at: string;\n\n  /**\n   * The number of *seconds* (not milliseconds) since the epoch at which this\n   * poll was created.\n   */\n  timestamp: number;\n}\n\n/**\n * One possible answer to a poll.\n *\n * @category Content\n */\nexport interface PollAnswer {\n  /** The UUID for this answer. */\n  client_id: string;\n\n  /** The text describing this answer. */\n  answer_text: string;\n}\n\n/**\n * The settings used to create this poll.\n *\n * @category Content\n */\nexport interface PollSettings {\n  /** Whether the poll allows multiple choices. */\n  multiple_choice: boolean;\n\n  /**\n   * Meaning unclear.\n   *\n   * This seems to be `\"closed-after\"` whether the poll is open or closed.\n   */\n  close_status: string;\n\n  /** The number of seconds after the poll's creation that it expires. */\n  expire_after: number;\n\n  /** The name of the app that created the poll. Usually \"tumblr\". */\n  source: string;\n}\n\n/**\n * Converts {@link block} to HTML.\n *\n * @category Content\n */\nexport function renderPoll(renderer: Renderer, block: PollBlock): string {\n  let result =\n    `<div class=\"${renderer.prefix}-block-poll\">` +\n    `<h2>${renderer.escape(block.question)}</h2><ul>`;\n  for (const answer of block.answers) {\n    result += `<li>${renderer.escape(answer.answer_text)}</li>`;\n  }\n  result += '</ul></div>';\n  return result;\n}\n", "import {Renderer} from './renderer';\n\n/**\n * Content blocks organized in rows, with variable elements per row.\n *\n * @see https://www.tumblr.com/docs/npf#layout-block-type-rows\n *\n * @category Layout\n */\nexport interface RowsLayout {\n  type: 'rows';\n\n  /** A list of ways to display sets of rows. */\n  display: RowsDisplay[];\n\n  /** How the content should be truncated. */\n  truncate_after?: number;\n}\n\n/**\n * An object describing how to display a single row.\n *\n * @category Layout\n */\nexport interface RowsDisplay {\n  /** An array of block indices to use in this row. */\n  blocks: number[];\n\n  /**\n   * The display mode for this row.\n   *\n   * @see https://www.tumblr.com/docs/npf#layout-block-display-mode-carousel\n   */\n  mode?: {type: 'carousel'};\n}\n\n/**\n * Wraps {@link html} as single row.\n *\n * @category Layout\n */\nexport function renderRowLayout(\n  renderer: Renderer,\n  display: RowsDisplay,\n  html: string\n): string {\n  const classes = [`${renderer.prefix}-layout-row`];\n  if (display?.mode?.type) {\n    classes.push(`${renderer.prefix}-layout-row-${display?.mode?.type}`);\n  }\n  return `<div class=\"${classes.join(' ')}\">${html}</div>`;\n}\n\n/** Renders {@link html} as a \"below the fold\" read more. */\nexport function renderTruncateLayout(renderer: Renderer, html: string): string {\n  return (\n    `<details class=\"${renderer.prefix}-layout-truncate\">` +\n    `<summary>Keep reading</summary>${html}</details>`\n  );\n}\n", "import {InlineFormat} from './inline-format';\nimport {Renderer} from './renderer';\n\n/**\n * An NPF text type content block.\n *\n * @see https://www.tumblr.com/docs/npf#content-block-type-text\n *\n * @category Content\n */\nexport type TextBlock = TextBlockNoIndent | TextBlockIndented;\n\n/**\n * The base interface for all types of text blocks.\n *\n * @category Content\n */\ninterface TextBlockBase {\n  type: 'text';\n\n  /** The text to use inside this block. */\n  text: string;\n\n  /**\n   * The subtype of text block.\n   *\n   * @see https://www.tumblr.com/docs/npf#text-block-subtypes\n   */\n  subtype?:\n    | 'heading1'\n    | 'heading2'\n    | 'quirky'\n    | 'quote'\n    | 'indented'\n    | 'chat'\n    | 'ordered-list-item'\n    | 'unordered-list-item';\n\n  /**\n   * Inline formatting for this text.\n   *\n   * @see https://www.tumblr.com/docs/npf#inline-formatting-within-a-text-block\n   */\n  formatting?: InlineFormat[];\n}\n\n/**\n * A text block of a type that doesn't allow indentation.\n *\n * @category Content\n */\nexport interface TextBlockNoIndent extends TextBlockBase {\n  subtype?: 'heading1' | 'heading2' | 'quirky' | 'quote' | 'chat';\n}\n\n/**\n * A text block of a type that allows indentation.\n *\n * @category Content\n */\nexport interface TextBlockIndented extends TextBlockBase {\n  /**\n   * The subtype of text block.\n   *\n   * @see https://www.tumblr.com/docs/npf#text-block-subtypes\n   */\n  subtype: 'indented' | 'ordered-list-item' | 'unordered-list-item';\n\n  /** @see https://www.tumblr.com/docs/npf#text-block-subtype-list-item */\n  indent_level?: number;\n}\n\n/**\n * Converts {@link block} to HTML.\n *\n * @category Content\n */\nexport function renderTextNoIndent(\n  renderer: Renderer,\n  block: TextBlockNoIndent\n): string {\n  const text = renderer.formatText(block.text, block.formatting);\n  switch (block.subtype) {\n    case 'heading1':\n      return `<h1>${text}</h1>`;\n    case 'heading2':\n      return `<h2>${text}</h2>`;\n    case 'quirky':\n      return `<p class=\"${renderer.prefix}-block-text-quirky\">${text}</p>`;\n    case 'quote':\n      // cebtenzzre: use blockquote for consistency with legacy post HTML, until we come up with better styling\n      return `<blockquote class=\"${renderer.prefix}-block-text-quote\"><p>${text}</p></blockquote>`;\n    case 'chat':\n      return `<p class=\"${renderer.prefix}-block-text-chat\">${text}</p>`;\n    default:\n      return `<p>${text}</p>`;\n  }\n}\n\n/**\n * Converts {@link blocksAndNested} to HTML.\n *\n * The first element of {@link blocksAndNested} determines the subtype of the\n * entire thing; any other blocks are guaranteed to have the same subtype. The\n * string elements of {@link blocksAndNested} ar {@link TextBlockIndented}\n * objects which are more deeply nested and have already been converted to HTML.\n *\n * @category Content\n */\nexport function renderTextIndented(\n  renderer: Renderer,\n  blocksAndNested: [TextBlockIndented, ...Array<TextBlockIndented | string>]\n): string {\n  const {subtype} = blocksAndNested[0];\n  let contents = {\n    indented: '<blockquote>',\n    'ordered-list-item': '<ol>',\n    'unordered-list-item': '<ul>',\n  }[subtype];\n\n  for (const element of blocksAndNested) {\n    const string = typeof element === 'string';\n    contents += subtype === 'indented' ? (string ? '' : '<p>') : '<li>';\n    contents += string\n      ? element\n      : renderer.formatText(element.text, element.formatting);\n    contents += subtype === 'indented' ? (string ? '' : '</p>') : '</li>';\n  }\n  contents += {\n    indented: '</blockquote>',\n    'ordered-list-item': '</ol>',\n    'unordered-list-item': '</ul>',\n  }[subtype];\n  return contents;\n}\n", "import {isAttribution, MaybeAttribution} from './attribution';\nimport {VisualMedia} from './media';\nimport {Renderer} from './renderer';\n\n/**\n * An NPF video type content block.\n *\n * @see https://www.tumblr.com/docs/npf#content-block-type-video\n *\n * @category Content\n */\nexport interface VideoBlock {\n  type: 'video';\n\n  /**\n   * The URL to use for the video block. Either this, {@link media}, or both\n   * will always be set.\n   */\n  url?: string;\n\n  /**\n   * The {@link Media} to use for the video block. Either this, {@link url}, or\n   * both will always be set.\n   */\n  media?: VisualMedia;\n\n  /**\n   * The provider of the audio source, whether it's `tumblr` for native audio or\n   * a trusted third party.\n   */\n  provider?: string;\n\n  /** HTML code that could be used to embed this video into a webpage. */\n  embed_html?: string;\n\n  /** An {@link IFrame} used for constructing video iframes. */\n  embed_iframe?: IFrame;\n\n  /** A URL to the embeddable content to use as an iframe. */\n  embed_url?: string;\n\n  /**\n   * An image media object to use as a \"poster\" for the video, usually a single\n   * frame.\n   */\n  poster?: VisualMedia[];\n\n  /** Optional provider-specific metadata about the video. */\n  metadata?: Record<string, unknown>;\n\n  /** Optional attribution information about where the video came from. */\n  attribution?: MaybeAttribution;\n\n  /** Whether this video can be played on a cellular connection. */\n  can_autoplay_on_cellular?: boolean;\n\n  /** The video duration in milliseconds. */\n  duration?: number;\n}\n\n/**\n * An NPF iframe object.\n *\n * @see https://www.tumblr.com/docs/npf#embed-iframe-objects\n */\nexport interface IFrame {\n  /** A URL used for constructing and embeddable video iframe. */\n  url: string;\n\n  /** The width of the video iframe */\n  width: number;\n\n  /** The height of the video iframe */\n  height: number;\n}\n\n/**\n * Converts {@link block} to HTML.\n *\n * @category Content\n */\nexport function renderVideo(renderer: Renderer, block: VideoBlock): string {\n  let result = `<figure class=\"${renderer.prefix}-block-video\">`;\n  if (block.media) {\n    // cebtenzzre: use controls for consistency with tumblr-utils rendering of legacy posts\n    result +=\n      '<video controls src=\"' +\n      renderer.escape(block.media?.url ?? block.url!) +\n      '\"';\n    if (block.poster) {\n      result +=\n        ' poster=\"' +\n        renderer.escape(\n          block.poster.reduce((biggest, current) =>\n            biggest && (biggest.width ?? 0) > (current.width ?? 0)\n              ? biggest\n              : current\n          ).url\n        ) +\n        '\"';\n    }\n    result += '></video>';\n  } else if (block.embed_html) {\n    result += block.embed_html;\n  } else if (block.embed_iframe) {\n    result +=\n      `<iframe src=\"${renderer.escape(block.embed_iframe.url)}\"` +\n      ` width=\"${block.embed_iframe.width}\"` +\n      ` height=\"${block.embed_iframe.height}\"></iframe>`;\n  } else if (block.embed_url) {\n    result += `<iframe src=\"${renderer.escape(block.embed_url)}\"></iframe>`;\n  } else {\n    result +=\n      `<a href=\"${renderer.escape(block.url!)}\">` +\n      renderer.escape(block.url!) +\n      '</a>';\n  }\n\n  if (isAttribution(block.attribution)) {\n    result +=\n      '<figcaption>' +\n      renderer.renderAttribution(block.attribution) +\n      '</figcaption>';\n  }\n  result += '</figure>';\n  return result;\n}\n", "import {Options} from './options';\nimport {AskLayout, renderAskLayout} from './ask-layout';\nimport {Attribution, renderAttribution} from './attribution';\nimport {AudioBlock, renderAudio} from './audio-block';\nimport {ImageBlock, renderImage} from './image-block';\nimport {UnknownBlock} from './index';\nimport {InlineFormat, formatText, renderInlineFormat} from './inline-format';\nimport {LinkBlock, renderLink} from './link-block';\nimport {VisualMedia, renderImageMedia} from './media';\nimport {PaywallBlock, renderPaywall} from './paywall-block';\nimport {PollBlock, renderPoll} from './poll-block';\nimport {\n  RowsDisplay,\n  renderRowLayout,\n  renderTruncateLayout,\n} from './rows-layout';\nimport {\n  TextBlockIndented,\n  TextBlockNoIndent,\n  renderTextNoIndent,\n  renderTextIndented,\n} from './text-block';\nimport {VideoBlock, renderVideo} from './video-block';\n\n/** The media for the default avatar to use for asks if none is provided. */\nconst anonymousAvatar: VisualMedia[] = [\n  {\n    width: 128,\n    height: 128,\n    url: 'https://assets.tumblr.com/images/anonymous_avatar_128.gif',\n  },\n  {\n    width: 96,\n    height: 96,\n    url: 'https://assets.tumblr.com/images/anonymous_avatar_96.gif',\n  },\n  {\n    width: 64,\n    height: 64,\n    url: 'https://assets.tumblr.com/images/anonymous_avatar_64.gif',\n  },\n  {\n    width: 48,\n    height: 48,\n    url: 'https://assets.tumblr.com/images/anonymous_avatar_48.gif',\n  },\n];\n\n/**\n * A class that stores materialized options for rendering NPF to HTML.\n *\n * Callers may extend this class and override any of its `render*()` methods to\n * change the way particular NPF components are rendered.\n *\n * @category Main\n */\nexport class Renderer {\n  /** @see Options.prefix */\n  readonly prefix: string;\n\n  /** @see Options.askingAvatar */\n  readonly askingAvatar: VisualMedia[];\n\n  constructor(options?: Options) {\n    this.prefix = options?.prefix ?? 'npf';\n    this.askingAvatar = options?.askingAvatar ?? anonymousAvatar;\n  }\n\n  /**\n   * Escapes all characters in {@link text} that aren't safe to use literally in\n   * HTML text or attributes.\n   */\n  escape(text: string): string {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#039;');\n  }\n\n  /** HTML-escapes {@link text} and formats it according to {@link formatting}. */\n  formatText(text: string, formatting: InlineFormat[] | undefined): string {\n    return formatText(this, text, formatting);\n  }\n\n  /** Wraps {@link html} as an ask. */\n  renderAskLayout(layout: AskLayout, html: string): string {\n    return renderAskLayout(this, layout, html);\n  }\n\n  /** Converts {@link attribution} to HTML. */\n  renderAttribution(attribution: Attribution): string {\n    return renderAttribution(this, attribution);\n  }\n\n  /** Converts {@link block} to HTML. */\n  renderAudio(block: AudioBlock): string {\n    return renderAudio(this, block);\n  }\n\n  /** Converts {@link block} to HTML. */\n  renderImage(block: ImageBlock): string {\n    return renderImage(this, block);\n  }\n\n  /**\n   * Applies the formatting specified by {@link format} to {@link html}, which may\n   * already include nested formatting.\n   *\n   * The {@link html} has already been trimmed to only the section to which\n   * {@link format} applies.\n   */\n  renderInlineFormat(html: string, format: InlineFormat): string {\n    return renderInlineFormat(this, html, format);\n  }\n\n  /**\n   * Converts {@link media} to HTML.\n   *\n   * @param options.alt - The alt text for the media.\n   */\n  renderImageMedia(media: VisualMedia[], options?: {alt?: string}): string {\n    return renderImageMedia(this, media, options);\n  }\n\n  /** Converts {@link block} to HTML. */\n  renderLink(block: LinkBlock): string {\n    return renderLink(this, block);\n  }\n\n  /** Converts {@link block} to HTML. */\n  renderPaywall(block: PaywallBlock): string {\n    return renderPaywall(this, block);\n  }\n\n  /** Converts {@link block} to HTML. */\n  renderPoll(block: PollBlock): string {\n    return renderPoll(this, block);\n  }\n\n  /** Wraps {@link html} as single row. */\n  renderRowLayout(display: RowsDisplay, html: string): string {\n    return renderRowLayout(this, display, html);\n  }\n\n  /** Converts {@link block} to HTML. */\n  renderTextNoIndent(block: TextBlockNoIndent): string {\n    return renderTextNoIndent(this, block);\n  }\n\n  /**\n   * Converts {@link blocksAndNested} to HTML.\n   *\n   * The first element of {@link blocksAndNested} determines the subtype of the\n   * entire thing; any other blocks are guaranteed to have the same subtype. The\n   * string elements of {@link blocksAndNested} ar {@link TextBlockIndented}\n   * objects which are more deeply nested and have already been converted to\n   * HTML.\n   */\n  renderTextIndented(\n    blocksAndNested: [TextBlockIndented, ...Array<TextBlockIndented | string>]\n  ): string {\n    return renderTextIndented(this, blocksAndNested);\n  }\n\n  /** Renders {@link html} as a \"below the fold\" read more. */\n  renderTruncateLayout(html: string): string {\n    return renderTruncateLayout(this, html);\n  }\n\n  /** Renders {@link block} as HTML. */\n  renderUnknown(block: UnknownBlock): string {\n    return (\n      '<p color=\"font-weight: bold; color: red\">Unknown block type ' +\n      `\"${this.escape((block as {type: string}).type)}\"!</p>`\n    );\n  }\n\n  /** Converts {@link block} to HTML. */\n  renderVideo(block: VideoBlock): string {\n    return renderVideo(this, block);\n  }\n}\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "Renderer", "npf2html", "renderAskLayout", "renderer", "layout", "html", "result", "isAttribution", "attr", "renderAttribution", "renderer", "attribution", "href", "result", "display", "renderAudio", "renderer", "block", "result", "hasText", "hasCaption", "isAttribution", "renderImage", "renderer", "block", "highestResImage", "best", "current", "result", "isAttribution", "mergeAdjacentFormats", "formatting", "lastFormatOfType", "mergedFormats", "format", "lastIndex", "last", "canMerge", "format1", "format2", "makeKey", "f", "stableOrderRank", "isAnchor", "pickWinningAnchor", "active", "anchors", "a", "b", "lenA", "lenB", "openTag", "renderer", "closeTag", "buildCpToCuMap", "s", "map", "cu", "i", "step", "renderInlineFormat", "html", "formatText", "text", "fmts", "cpToCu", "cpLen", "ranges", "raw", "startCp", "endCpEx", "keyed", "A", "B", "bpSet", "r", "bps", "ri", "open", "out", "segStart", "segEnd", "j", "dedup", "seen", "winner", "wanted", "aIsAnchor", "bIsAnchor", "ra", "rb", "lcp", "c", "o", "cuStart", "cuEnd", "renderLink", "renderer", "block", "result", "renderImageMedia", "renderer", "media", "options", "result", "primary", "best", "current", "renderPaywall", "renderer", "block", "result", "renderPoll", "renderer", "block", "result", "answer", "renderRowLayout", "renderer", "display", "html", "classes", "renderTruncateLayout", "renderTextNoIndent", "renderer", "block", "text", "renderTextIndented", "blocksAndNested", "subtype", "contents", "element", "string", "renderVideo", "renderer", "block", "result", "biggest", "current", "isAttribution", "anonymousAvatar", "Renderer", "options", "text", "formatting", "formatText", "layout", "html", "renderAskLayout", "attribution", "renderAttribution", "block", "renderAudio", "renderImage", "format", "renderInlineFormat", "media", "renderImageMedia", "renderLink", "renderPaywall", "renderPoll", "display", "renderRowLayout", "renderTextNoIndent", "blocksAndNested", "renderTextIndented", "renderTruncateLayout", "renderVideo", "isTextBlockIndented", "block", "buildLayoutGroups", "options", "result", "layout", "display", "a", "b", "npf2html", "blocks", "renderer", "Renderer", "truncateAfter", "i", "truncateIndex", "layoutGroups", "currentGroup", "collectAndRenderIndented", "first", "indentation", "blocksAndNested", "sibling", "siblingIndentation", "blockResult", "group"]
}
