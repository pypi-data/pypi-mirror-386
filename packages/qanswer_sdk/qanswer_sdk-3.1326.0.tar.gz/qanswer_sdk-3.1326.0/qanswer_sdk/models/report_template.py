# coding: utf-8

"""
    QAnswer: Api Documentation

    APIs provided by QAnswer

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from qanswer_sdk.models.slot import Slot
from qanswer_sdk.models.template_clip_structure_output import TemplateClipStructureOutput
from typing import Optional, Set
from typing_extensions import Self

class ReportTemplate(BaseModel):
    """
    ReportTemplate
    """ # noqa: E501
    id: StrictInt
    username: StrictStr
    author: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    template_name: StrictStr
    creation_date: StrictStr
    last_updated: StrictStr
    shared_to: Optional[StrictStr] = None
    conversation_id: Optional[StrictStr] = None
    is_duplicated: StrictBool
    template_with_slots: StrictStr
    slots: List[Slot]
    clip_structure: Optional[TemplateClipStructureOutput] = None
    is_generating: Optional[StrictBool] = None
    active_slot_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "username", "author", "email", "template_name", "creation_date", "last_updated", "shared_to", "conversation_id", "is_duplicated", "template_with_slots", "slots", "clip_structure", "is_generating", "active_slot_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in slots (list)
        _items = []
        if self.slots:
            for _item_slots in self.slots:
                if _item_slots:
                    _items.append(_item_slots.to_dict())
            _dict['slots'] = _items
        # override the default output from pydantic by calling `to_dict()` of clip_structure
        if self.clip_structure:
            _dict['clip_structure'] = self.clip_structure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "username": obj.get("username"),
            "author": obj.get("author"),
            "email": obj.get("email"),
            "template_name": obj.get("template_name"),
            "creation_date": obj.get("creation_date"),
            "last_updated": obj.get("last_updated"),
            "shared_to": obj.get("shared_to"),
            "conversation_id": obj.get("conversation_id"),
            "is_duplicated": obj.get("is_duplicated"),
            "template_with_slots": obj.get("template_with_slots"),
            "slots": [Slot.from_dict(_item) for _item in obj["slots"]] if obj.get("slots") is not None else None,
            "clip_structure": TemplateClipStructureOutput.from_dict(obj["clip_structure"]) if obj.get("clip_structure") is not None else None,
            "is_generating": obj.get("is_generating"),
            "active_slot_id": obj.get("active_slot_id")
        })
        return _obj


