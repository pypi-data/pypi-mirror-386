# coding: utf-8

"""
    QAnswer: Api Documentation

    APIs provided by QAnswer

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from qanswer_sdk.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class UserDatasetShared(BaseModel):
    """
    UserDatasetShared
    """ # noqa: E501
    id: Optional[StrictInt] = None
    ai_assistant: Optional[UserDataset] = Field(default=None, alias="aiAssistant")
    user: Optional[User] = None
    access_type: Optional[StrictStr] = Field(default=None, alias="accessType")
    __properties: ClassVar[List[str]] = ["id", "aiAssistant", "user", "accessType"]

    @field_validator('access_type')
    def access_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Owned', 'SharedWrite', 'SharedRead', 'UseOnly', 'LoggedIn', 'Open', 'None']):
            raise ValueError("must be one of enum values ('Owned', 'SharedWrite', 'SharedRead', 'UseOnly', 'LoggedIn', 'Open', 'None')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserDatasetShared from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ai_assistant
        if self.ai_assistant:
            _dict['aiAssistant'] = self.ai_assistant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserDatasetShared from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "aiAssistant": UserDataset.from_dict(obj["aiAssistant"]) if obj.get("aiAssistant") is not None else None,
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "accessType": obj.get("accessType")
        })
        return _obj

from qanswer_sdk.models.user_dataset import UserDataset
# TODO: Rewrite to not use raise_errors
UserDatasetShared.model_rebuild(raise_errors=False)

