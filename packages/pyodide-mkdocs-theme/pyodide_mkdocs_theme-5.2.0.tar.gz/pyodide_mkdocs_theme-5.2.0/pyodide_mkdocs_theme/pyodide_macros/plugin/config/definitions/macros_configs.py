"""
pyodide-mkdocs-theme
Copyleft GNU GPLv3 üÑØ 2024 Fr√©d√©ric Zinelli

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.
If not, see <https://www.gnu.org/licenses/>.
"""

import sys
from typing import Tuple, Union
from mkdocs.config import config_options as C

IS_PY_3_9 = (sys.version_info.major, sys.version_info.minor) == (3,9)


from ....parsing import items_comma_joiner
from ....tools_and_constants import (
    KEYWORDS_SEPARATOR,
    RUN_GROUP_SKIP,
    HtmlClass,
    IdeConstants,
    IdeMode,
    MacroShowConfig,
    RunnersShowConfig,
    P5BtnLocation,
    NamedTestCase,
)
from ...tools.test_cases import Case
from .._string_tools_and_constants import InclusionProfile
from ..config_option_src import ConfigOptionIdeLink, ConfigOptionSrc
from ..sub_config_src import SubConfigSrc
from ..macro_config_src import MacroConfigSrc, MultiQcmConfigSrc, SqlideConfigSrc

from .docs_dirs_config import (
    to_page,
    DOCS_CONFIG,
    DOCS_FIGURES,
    DOCS_IDE_DETAILS,
    DOCS_PY_BTNS,
    DOCS_RUN_MACRO,
    DOCS_QCMS,
    DOCS_RESUME,
    DOCS_SQLIDE,
    DOCS_TERMINALS,
)


OP,CLO = '{{', '}}'






PY_GLOBAL = SubConfigSrc.with_default_docs(
    to_page(DOCS_IDE_DETAILS) / '#IDE-{name}'
)(
    '', elements=(

    ConfigOptionIdeLink(
        'py_name', str, default="", index=0,
        inclusion_profile = InclusionProfile.all_but_yaml_stuff,
        yaml_desc = """
            Relative path (no extension) toward the `{exo}.py` file for an IDE, terminal, ...
        """,
        docs = """
            Chemin relatif (sans l'extension du fichier) vers le fichier `{exo}.py` et les
            √©ventuels autres fichiers annexes, sur lesquels baser l'IDE.
        """,
        extra_docs = """
            Chemin relatif au dossier contenant le ficher markdown {{ orange('source') }}
            permettant d'acc√©der au fichier python {{ annexe('principal') }} pour l'IDE.

            * Si l'argument n'est pas renseign√© ou est une cha√Æne vide, l'IDE sera cr√©√© vide
            (ex : [bac √† sable](--bac_a_sable/)).
            * Le chemin ne donne que le pr√©fixe commun des fichiers {{annexes()}} pour cet IDE,
            et il faut donc {{red("omettre l'extension")}} : si le fichier {{annexe("principal")}}
            est `.../exercice.py`, l'argument `py_name` doit √™tre  `".../exercice"`.
            * Une {{red('erreur')}} est lev√©e si un chemin est donn√© mais qu'aucun fichier python
            ne peut √™tre trouv√© pour les diff√©rentes [organisations de fichiers
            support√©es](--ide-files-organization).
        """,
    ),
    ConfigOptionIdeLink(
        'ID', int, is_optional=True,
        inclusion_profile=InclusionProfile.all_but_yaml_stuff,
        fake_type = "None|int",
        yaml_desc = "Disambiguate different macro calls using the same underlying files.",
        docs = """
            √Ä utiliser pour diff√©rencier deux IDEs utilisant les m√™mes fichiers
            [{{annexes()}}](--ide-files), afin de diff√©rencier leurs sauvegardes
            (nota: $ID \\ge 0$).
        """,
        extra_docs = """
            Pour pouvoir sauvegarder, t√©l√©charger et t√©l√©verser des codes dans ou depuis les IDEs,
            l'`id` html de chaque IDE doit √™tre unique. Or, ceux-ci sont construits √† partir de la
            localisation du fichier python principal sur le disque.

            Le th√®me v√©rifie notamment l'unicit√© des `id` g√©n√©r√©s pour l'int√©gralit√© du site et
            l√®ve une erreur si le m√™me fichier python (argument `py_name`) est utilis√© plusieurs
            fois dans diff√©rents IDEs.

            L'argument `ID` de la macro `IDE` permet donc de diff√©rencier deux IDEs utilisant le
            m√™me fichier python, afin de garantir l'unicit√© des ids html.

            Exemple :

            ```
            Fichier 1: docs/index.md
                {% raw %} {{ IDE('exemples/ex1', ID=1)}} {% endraw %}

            Fichier 2: docs/aide.md
                {% raw %} {{ IDE('exemples/ex1', ID=2)}} {% endraw %}
            ```

            !!! note "Argument `ID` pour les autres macros"

                Cet argument existe √©galement pour les autres macros impliquant des fichiers python
                et peut parfois √™tre n√©cessaire lorsqu'on utilise les macros `terminal`, `py_btn`, ...
        """,
    ),
    ConfigOptionIdeLink(
        'SANS', str, default="",
        yaml_desc="""
            Used to forbid the use of builtins, attribute accesses, packages or keywords in the
            python code (space or comma separated identifiers).
        """,
        docs=f"""
            Pour interdire des fonctions builtins, des modules, des acc√®s d'attributs ou
            de m√©thodes, ou des mots clefs : cha√Æne de noms s√©par√©s par des virgules, des
            points-virgules et/ou espaces.

            Les mots clefs sont √† renseigner en dernier, apr√®s le s√©parateur `{ KEYWORDS_SEPARATOR }`.
        """,
        extra_docs = """
            Voici le d√©tail des syntaxes et contraintes sur l'utilisation de l'argument `SANS` :

            * Les identifiants utilis√©s dans l'argument `SANS` peuvent √™tres s√©par√©s par des
            espaces, des virgules ou des points-virgules.
            * Les fonctions builtins et les modules sont simplement renseign√©s en donnant leur
            identifiant (pour les modules, renseigner le nom du "top niveau": `matplotlib`, et
            non `matplotlib.pyplot`).
            * Les restrictions d'acc√®s √† des attributs ou des m√©thodes sont l'identifiant de
            l'attribut ou la m√©thode, pr√©fix√© avec un point.
            * Les mots clefs et op√©rateurs doivent √™tre renseign√©s en dernier, apr√®s avoir ajout√©
            le s√©parateur `"{{AST()}}"` : `SANS="... AST: mot_clefs + ** // ..."`.

                | Syntaxe  {{width(10)}} | Ce qui est interdit |
                |-|-|
                | `identifiant` | [Interdit la fonction builtin](--restrictions-functions)
            correspondant, ou si aucune fonction n'est trouv√©e, [interdit le module/package](--restrictions-packages)
            correspondant.{{pmt_note("Les imports sont couverts quelle que soit la m√©thode utilis√©e :
            `import`{.pmt_note}, `from`{.pmt_note}, aliasing, ...")}} |
                | `.attribut`<br>`.method` | [Interdit les acc√®s d'attributs](--restrictions-methods)
            correspondant √† ce nom l√®ve une erreur s'ils sont trouv√©s dans le code. |
                | `keyword` ou `operator` | [Interdit des op√©rateurs et des mots clefs](--restrictions-keywords)
            ou assimil√©s.{{pmt_note("Ceux-ci sont diff√©renci√©s des identifiants de fonctions ou des
            modules en les renseignant apr√®s le s√©parateur `{{ AST() }}`{.pmt_note}.")}} |

            Exemple d'utilisation :

            ```
            {% raw %}{{ IDE('exo', SANS="sorted, max ; .find .index AST: for") }}{% endraw %}
            ```

            Cet appel de macro interdit :

            - Les fonctions `sorted` et `max`.
            - Les appels de m√©thodes `.find` et `.index`.
            - Tous types de boucles `for` (boucles normales et comprehensions).

            {{pmt_note("Des informations plus d√©taill√©es sur les interdictions et notamment sur les
            restrictions de mots-clefs et op√©rateurs sont disponibles dans la [page d√©taillant les
            ex√©cutions](--restrictions).")}}

            <br>

            ??? tip "Sections/code appliquant les diff√©rents types de restrictions"

                {{ md_include("docs_tools/inclusions/restrictions_where.md") }}

                Cela signifie que l'on ne peut normalement pas utiliser les √©l√©ments interdits dans
                les tests `secrets` pour v√©rifier les r√©ponses de l'utilisateur (il existe en fait
                un moyen... Voir la section des utilisations avanc√©es).

            {{ kws_exclusions() }}


            ??? warning "But recherch√© avec les restrictions"

                {{ md_include("docs_tools/inclusions/restrictions_goals.md") }}


            ??? warning "Efficacit√© des interdictions"

                {{ md_include("docs_tools/inclusions/restrictions_efficiency.md") }}
        """,
    ),
    ConfigOptionIdeLink(
        'WHITE', str, default="",
        yaml_desc="""
            Names of packages to import automatically in the global scope (to avoid troubles with
            forbidden modules).
        """,
        docs="""
            {{ orange('**_L\\'argument `WHITE`{.orange} est normalement obsol√®te_**') }}.

            (_\"White list\"_) Ensemble de noms de modules/packages √† pr√©-importer avant que les
            interdictions ne soient mises en place (voir argument `SANS`.

        """,
        extra_docs="""
            ??? help "_Cet argument est normalement {{ orange('**obsol√®te**') }}._"

                Permet de d√©clarer un ensemble de modules/packages √† pr√©importer avant que les
                restrictions d'imports ne soient mises en place.

                La syntaxe est la m√™me que celle de l'argument [`SANS`](--IDE-SANS): des identifiants
                s√©par√©s par des espaces, des virgules ou des points-virgules.

                Exemple: `{% raw %}{{ IDE(..., SANS="sys", WHITE="math") }}{% endraw %}`

                !!! tip "Le probl√®me que `WHITE` essaie de r√©soudre..."

                    Certains modules de "bas niveau" sont utilis√©s pour importer d'autres modules,
                    m√™me dans des cas inattendus (ex: `math` qui importe `sys`). Si le module sys
                    est interdit (_ce qui est une tr√®s mauvaise id√©e !_), il peut devenir
                    n√©cessaire de pr√©importer d'autres modules que l'utilisateur pourrait avoir
                    besoin d'utiliser dans son code.

                    Voir la page concernant les [restrictions](--restrictions) pour plus de d√©tails.

                !!! warning "`WHITE` n'a pas pour but de remplacer du code python !"

                    Cet argument est un ersatz d'une version ant√©rieure du th√®me.

                    Il a √©t√© conserv√© dans l'√©ventualit√© o√π un r√©dacteur se retrouverait tout de
                    m√™me confront√© √† un probl√®me d'import interdit pour de mauvaises raisons, mais
                    des changements intervenus plus tard dans le d√©veloppement ont normalement
                    rendu cet argument obsol√®te : r√©aliser les pr√©imports depuis la section `env`
                    devrait suffire √† √©viter ce type de probl√®mes.


                !!! warning "Efficacit√© des interdictions"

                    {{ md_include("docs_tools/inclusions/restrictions_efficiency.md") }}
    """,
    ),
    ConfigOptionIdeLink(
        'REC_LIMIT', int, default=-1,
        yaml_desc = f"""
            Limit the recursion depth (do not use values below { IdeConstants.min_recursion_limit }).
        """,
        docs = f"""
            Pour imposer une profondeur de r√©cursion maximale.

            Nota: ne jamais descendre en-dessous de { IdeConstants.min_recursion_limit }. La valeur
            par d√©faut, `#!py -1`, signifie que l'argument n'est pas utilis√©.
        """,
        extra_docs = f"""
            Si cet argument est utilis√© avec une valeur positive, la profondeur de r√©cursion sera
            limit√©e et une erreur sera lev√©e si elle est atteinte durant les ex√©cutions.

            ??? tip "Limitations, particularit√©s, conseils pour cet argument..."

                * Ne pas oublier que ce r√©glage affecte la stack, qui est globale. Ce qui veut
                dire que le premier appel de fonction de l'utilisateur n'est __pas__ √† une
                profondeur 0 ou 1.

                * Pour cette raison, une erreur est lev√©e par la macro si une valeur inf√©rieure
                √† { IdeConstants.min_recursion_limit } est utilis√©e pour `REC_LIMIT`, car
                l'environnement lui-m√™me ne pourrait pas faire tourner le code de l'utilisateur
                et les tests.

                * C√¥t√© utilisateur, la fonction `sys.setrecursionlimit` est d√©sactiv√©e lorsque
                cette fonctionnalit√© est utilis√©e.

                    - Le proc√©d√© utilis√© est le m√™me que pour les restrictions de code.
                    - Ce r√©glage affecte donc √©galement les diff√©rents types de tests et le
                      terminal de l'IDE.

                * Ne surtout pas activer cette fonctionnalit√© si vous utilisez des structures de
                  donn√©es r√©cursives, avec des implantations pour `__str__` ou `__repr__` :
                  l'utilisateur se retrouverait probablement avec un crash d√ª √† la restriction √†
                  des moments inopportuns :

                    - Sur un `print` (m√™me si la sortie standard n'est pas affich√©e !)
                    - Lors de la construction d'un message d'erreur affichant une structure de
                      donn√©es.
        """,
        # yaml_desc="Limite de la profondeur de r√©cursion (ne pas descendre en-dessous de "
        # +f"{ IdeConstants.min_recursion_limit }).",
    ),
    ConfigOptionIdeLink(
        'SHOW', str,
        conf_type = C.Choice(RunnersShowConfig.VALUES, default=RunnersShowConfig.none),
        line_feed_link = False,
        yaml_desc="Display macro related infos in the terminal.",
        docs=f"""
            Affiche des donn√©es sur l'appel de macro dans la console durant `mkdocs serve` :
            {'{{'} ul_li([
                "`#!py '{ RunnersShowConfig.none }'`: Ne fait rien (d√©faut).",
                "`#!py '{ RunnersShowConfig.args }'`: Affiche tous les arguments de l'appel de macro.",
                "`#!py '{ RunnersShowConfig.python }'`: Affiche les contenus des sections python, telles que vues par PMT.",
                "`#!py '{ RunnersShowConfig.contents }'`: Affiche les contenus des sections python et les REMs, telles que vues par PMT.",
                "`#!py '{ RunnersShowConfig.all }'`: Combine `#!py 'args'` et `#!py 'content'`.",
            ]) {'}}'}
        """,
        extra_docs="""
            Lorsque les codes pythons sont affich√©s (avec `#!pt "python"` ou `#!pt "all"`), les
            sections sont affich√©es en utilisant des s√©parateurs suppl√©mentaires, qui permettent
            de comprendre comment le th√®me a interpr√©t√© les diff√©rentes sections. Les sections
            sont alors affich√©es comme suit :

            ```python
            #############################
            # --- PMT:{section} --- #
            ...
            ```

            Cela peut permettre d'identifier des fautes de frappes dans le code qui font que l'on
            ne cerne pas forc√©ment au premier abord pourquoi le code de l'IDE ne se comporte pas
            du tout de mani√®re attendue.
        """
    ),
    ConfigOptionIdeLink(
        'RUN_GROUP', str, is_optional=True,
        line_feed_link = False,
        yaml_desc = """
            Allow to identify elements that are grouped together (for sequential executions),
            or that should be SKIPped.
        """,
        docs = f"""
            Permet d'indiquer les √©l√©ments faisant partie d'un m√™me groupe vis-√†-vis de la logique
            d'ex√©cution s√©quentielle, ou "[ex√©cutions li√©es](--redactors/sequential_runs/)"
            (typiquement, des contenus en "tabs": `=== "..."`).
            {'{{'}ul_li([
                "`#!py None` (d√©faut) : nouvel √©l√©ment individuel.",
                "`#!py '{ RUN_GROUP_SKIP }'` : cet √©l√©ment ne sera jamais ex√©cut√© automatiquement.",
                "`#!py str` : un identifiant sous forme de cha√Æne de caract√®re, permettant
                d'identifier des √©l√©ments group√©s dans la page en cours, dont un seul pourra
                √™tre ex√©cut√© automatiquement.",
            ], trailing_new_line=True){'}}'}
            Par d√©faut, lorsque des groupes sont utilis√©s, c'est le premier √©l√©ment
            qui est prioritaire. Il est possible de d√©finir un autre √©l√©ment comme prioritaire
            en ajoutant une √©toile au d√©but ou √† la fin de la cha√Æne : `#!py "group*"`.

            {'{{'}orange('_ATTENTION_'){'}}'} : les [ex√©cutions li√©es](--sequential-run-activate)
            doivent √™tre activ√©es pour que cet argument ait un effet visible.
            """,
    ),
    ConfigOptionIdeLink(
        'AUTO_RUN', bool, default=False,
        yaml_desc = "Run the python code on page load or not.",
        docs = "Lance automatiquement le code apr√®s avoir affich√© la page.",
    ),
    ConfigOptionIdeLink(
        'MERMAID', bool, default=False,
        yaml_desc="Mark a page as containing dynamic Mermaid graphs built during executions.",
        docs="""
            Signale qu'un rendu de graphe mermaid sera attendu √† un moment ou un autre des
            ex√©cutions.
            {{pmt_note("L'extension markdown `pymdownx.superfences`{.pmt_note} doit √™tre configur√©e
            pour accepter les blocs de code `mermaid`{.pmt_note}.<br>Voir la configuration par d√©faut du fichier
            `mkdocs.yml`{.pmt_note}, par exemple via les scripts du th√®me avec
            `python -m pyodide_mkdocs_theme --yml`{.pmt_note}.") }}
        """,
        extra_docs = """
            Le r√¥le de cet argument est un peu particulier : son but est de signaler au th√®me
            que cette page devra int√©grer la logistique javascript et pyodide pour construire
            dynamiquement des graphes `mermaid` dans la page.

            Ce "signalement" est en fait global √† la page enti√®re de la documentation, et il
            n'est donc pas n√©cessaire de l'utiliser pour chaque IDE d'une page : {{green("__une
            seule fois par page est suffisant__")}}.

            Voir la page d√©di√©e √† [l'utilisation dynamique de `mermaid`](--custom/mermaid/) dans
            pyodide pour plus d'informations.
        """,
    ),
))







MOST_LIKELY_USELESS_ID = {'docs': f"""
    √Ä utiliser pour diff√©rencier deux appels de macros diff√©rents, dans le cas o√π vous tomberiez
    sur une collision d'id.
"""}

MEANINGLESS_ARGS_FOR_PY_BTNS_USER_DOCS = ('SANS','WHITE','REC_LIMIT')


def _py_globals_copy_gen(skip_from_macros_docs=(), **replacements:ConfigOptionIdeLink):
    return (
        arg.copy_with(
            inclusion_profile = (
                InclusionProfile.config
                    if name in skip_from_macros_docs else
                arg.inclusion_profile
            ),
            **replacements.get(name, {})
        )
        for name,arg in PY_GLOBAL.subs_dct.items()
    )







#----------------------------------------------------------------------------------------





BS_MACRO = '" + back_slash() + "'
"""
Necessary to bypass jinja deprecation warning when using backslashes where it doesn't like it...
(...the pretty well named... XD )
"""



IDE = MacroConfigSrc(
    'IDE',
    force_kwargs_index = 1,
    docs = "Valeurs par d√©faut pour les arguments des macros `IDE` et `IDEv`.",
    yaml_desc = "Default values for arguments used in the `IDE` and `IDEv` macros.",
    docs_page_url = to_page(DOCS_IDE_DETAILS),
    elements = (

    *_py_globals_copy_gen(
        AUTO_RUN = {
            'docs': PY_GLOBAL.AUTO_RUN.docs.rstrip(' \n\t.')+" (lance uniquement les tests publics)."
        }
    ),
    ConfigOptionIdeLink(
        'MAX', int, default=5,
        extended_validation = lambda s: s=='+',
        fake_type = "int|'+'",
        yaml_desc = "Maximum number of attempts before revealing correction and remarks.",
        docs="""
            Nombre maximal d'essais de validation avant de rendre la correction et/ou les
            remarques disponibles.
        """,
        extra_docs="""
            * En l'absence de correction et de fichiers de remarques, le compteur d'essais
            sera automatiquement pass√© √† $\\infty/\\infty$.
            * Il est possible d'imposer un nombre d'essais infini en passant `#!py 1000` ou
            `#!py "+"` en argument.
            <br>Ceci impliquerait que la seule fa√ßon pour l'utilisateur de voir la solution
            et/ou les remarques serait de passer tous les tests avec succ√®s.


            ??? danger "Erreur lev√©e pour les contenus `corr/REM` avec des compteurs d'essais
            √† l'$\\infty$"

                Par d√©faut, le th√®me consid√®re que du contenu `corr` ou des remarques (visibles
                ou non) qui seraient "cach√©s" par un compteur d'essais r√©gl√© √† l'$\\infty$ est
                une situation non d√©sir√©e. Une erreur est donc lev√©e durant le build si la
                situation est rencontr√©e.

                Si c'est effectivement le but recherch√©, il faut alors modifier l'option {{
                config_link("ides.forbid_corr_and_REMs_with_infinite_attempts") }} du plugin,
                soit via le fichier `mkdocs.yml`,  soit via la configuration des m√©tadonn√©es
                ([fichiers `{{meta()}}` ou ent√™tes de pages](--custom/metadata/)) :

                ```yaml
                plugins:
                    pyodide_macros:
                        ides:
                            forbid_corr_and_REMs_with_infinite_attempts: false  # (d√©faut : true)
                ```
            """
    ),
    ConfigOptionIdeLink(
        'LOGS', bool, default=True,
        yaml_desc = """
            Build or not missing assertion messages for failed assertions in the secret tests
        """,
        docs="""
            {{ red('Durant des tests de validation') }}, si `LOGS` est `True`, le code complet
            d'une assertion est utilis√© comme message d'erreur, quand l'assertion a √©t√© √©crite
            sans message.
        """,
        extra_docs="""
            Lors d'une assertion √©chou√©e durant une validation, si le code de l'assertion n'a
            aucun message d'erreur, le th√®me peut en construire un automatiquement. Selon le
            type d'exercices que vous r√©digez, ou si l'exercice provient d'un ancien site
            utilisant [pyodide-mkdocs][pyodide-mkdocs]{: target=_blank } vous pourriez
            souhaiter que les messages d'erreur automatiques soient construits ou non,
            pour ces assertions sans messages.

            <br>

            !!! warning "Migration depuis `pyodide-mkdocs` : ___BREAKING CHANGE___"

                ---8<--- "docs_tools/inclusions/IDE_assertions_feedback.md"

                {{ orange("_Notez que ce changement de comportement par rapport √† `pyodide-mkdocs`{
                .orange } concerne aussi les tests publics._") }}
        """,
    ),
    ConfigOptionIdeLink(
        'MODE', str, is_optional=True,
        conf_type = C.Choice(IdeMode.VALUES),
        fake_type = 'None|str',
        line_feed_link = False,
        yaml_desc = f"""
            Change the execution  mode of an IDE (`{IdeMode.no_reveal!r}`, `{IdeMode.no_valid!r}`,
            by default: `null`).
        """,
        docs = f"""
            Change le mode d'ex√©cution des codes python. Les modes disponibles sont :
            { OP } ul_li([
                "`#!py None` : ex√©cutions normales.",
                "`#!py {IdeMode.delayed_reveal!r}` : pour des IDEs n'ayant pas de tests (pas de
                section `tests` ni `secrets`) mais dont on ne veut pas que la solution s'affiche
                d√®s la premi√®re ex√©cution (typiquement, des exercices turtle ou p5). Chaque
                validation fait d√©cro√Ætre le nombre d'essais et les solutions et remarques, si
                elles existent, sont r√©v√©l√©es une fois tous les essais consomm√©s (une erreur est
                lev√©e durant le build, si l'IDE  a des sections `tests` ou `secrets`, ou s'il a
                un nombre d'essais infini).",
                "`#!py {IdeMode.no_reveal!r}` : ex√©cutions normales, mais les solutions et
                remarques, si elles existent, ne sont jamais r√©v√©l√©es, m√™me en cas de succ√®s.
                Le compteur d'essais est ${ BS_MACRO }infty$.",
                "`#!py {IdeMode.no_valid!r}` : quels que soient les fichiers/sections
                disponibles, le bouton et les raccourcis de validations sont inactifs.
                Le compteur d'essais est absent.",
                "`#!py {IdeMode.revealed!r}` : les solutions et remarques, si elles existent,
                sont r√©v√©l√©es d√®s le chargement de la page.
                Le compteur d'essais est absent.",
            ]) { CLO }
        """,
        extra_docs="""
            Une erreur est lev√©e si une valeur est pass√©e en argument alors qu'elle ne correspond
            √† aucun `MODE` existant.

            !!! danger "L'utilisation de l'argument `MODE`supprime les routines de validation
            des donn√©es des IDEs"

                Si les profiles sont utilis√©s, toutes les v√©rifications faites habituellement par
                le th√®me lorsqu'il construit l'IDE sont supprim√©es.

                Ceci concerne notamment les v√©rifications li√©es aux options suivantes du plugin :

                * {{ config_link('ides.forbid_corr_and_REMs_with_infinite_attempts', 1) }}
                * {{ config_link('ides.forbid_hidden_corr_and_REMs_without_secrets', 1) }}
                * {{ config_link('ides.forbid_secrets_without_corr_or_REMs', 1) }}
        """
    ),
    ConfigOptionIdeLink(
        'MIN_SIZE', int, default=3,
        yaml_desc = "Minimum number of lines of an editor.",
        docs = "Nombre minimal de lignes visibles dans l'√©diteur.",
        extra_docs="""
            Les fen√™tres d'√©dition adaptent automatiquement leur hauteur dans la page, en fonction
            du nombre de lignes de code de l'utilisateur. Cette valeur impose la hauteur minimale
            de l'√©diteur.
        """,
    ),
    ConfigOptionIdeLink(
        'MAX_SIZE', int, default=30,
        yaml_desc = "Maximum number of lines of an editor.",
        docs = "Nombre maximal de lignes visibles dans l'√©diteur.",
        extra_docs = """
            Les fen√™tres d'√©dition adaptent automatiquement leur hauteur dans la page, en fonction
            du nombre de lignes de code de l'utilisateur. Cette valeur impose la hauteur maximale
            de l'√©diteur : si le code comporte plus de lignes, des glissi√®res appara√Ætront et
            la zone de l'√©diteur cessera de s'agrandir.
        """,
    ),
    ConfigOptionIdeLink(
        'TERM_H', int, default=10,
        yaml_desc="Initial number of lines of a terminal (approximative).",
        docs = "Nombre de lignes initiales utilis√©es pour la hauteur du terminal (_tr√®s_ approximatif).",
        extra_docs="""
            Remarques :

            * Le r√©glage n'est pas tr√®s pr√©cis et peut devenir erron√© selon les r√®gles CSS surcharg√©es
              par vos soins.
            * Cet argument est ignor√© pour les macros `IDEv`.
        """,
    ),
    ConfigOptionIdeLink(
        'TEST', str,
        conf_type = C.Choice(NamedTestCase.VALUES, default=NamedTestCase.none),
        extended_validation=lambda v: isinstance(v, Case),
        line_feed_link = False,
        yaml_desc = """
            Configuration to use when testing this IDE (more options through macro call arguments)
        """,
        docs = """
            D√©finit la fa√ßon dont l'IDE doit √™tre g√©r√© lors des tests dans [la page g√©n√©r√©e
            automatiquement pour tester tous les IDEs de la documentation](--redactors/IDE-tests-page/).
            {{ ul_li([
                "Par d√©faut (`#!py TEST=''`), deux tests sont effectu√©s :" + ul_li([
                    "la section `corr` doit passer une validation (`tests` & `secrets`).",
                    "la section `code` ne doit pas passer la validation.",
                ]),
                "Depuis un fichier de configuration, un fichier" + meta() + " ou l'ent√™te d'une page
                markdown, les valeurs utilisables sont : " + joined_enum_options(NamedTestCase()) + ".",
                "Depuis un appel de macro: les m√™mes cha√Ænes qu'au point pr√©c√©dent, ou bien utiliser
                un [objet `Case`](--test-IDEs-config-one-IDE) pour plus de possibilit√©s."
            ])}}
        """,
        extra_docs="""
            Voir la page d√©di√©e pour plus d'information sur les [tests automatiques des IDEs de la
            documentation](--redactors/IDE-tests-page/).
        """,
    ),
    ConfigOptionIdeLink(
        'TWO_COLS', bool, default=False,
        yaml_desc="Automatically goes in split screen mode if `true`.",
        docs = """
            Si `True`, cet IDE passe automatiquement en mode "deux colonnes" au chargement de la page.
        """,
        extra_docs="""
            Comme tous les autres arguments de macros, il peut √™tre d√©fini au niveau des `meta`
            (fichiers, ent√™tes, mkdocs.yml).
            <br>√Ä noter que si plusieurs IDEs ont ce r√©glage √† True dans la m√™me page, il n'y
            a aucune garantie sur celui qui sera effectivement en mode "deux colonnes" apr√®s
            chargement de la page.
        """
    ),
    ConfigOptionIdeLink(
        'STD_KEY', str, default="",
        yaml_desc="""
            Key to pass as first argument of the `terminal_message` python function (in pyodide),
            to allow to print messages directly in the terminal of an IDE, when the stdout is
            deactivated.
        """,
        docs = """
            Clef √† passer en argument de [`terminal_message`](--IDEs-terminal_message) pour
            autoriser son utilisation lorsque la sortie standard est d√©sactiv√©e pendant les
            tests.
        """,
        extra_docs='--8<-- "docs_tools/inclusions/IDE_STD_KEY_validation.md"',
    ),
    ConfigOptionIdeLink(
        'EXPORT', bool, default=False,
        yaml_desc="""
            Add the content of this editor to the zip archive, when extracting all the codes
            of the IDEs in the page.
        """,
        docs = """
            D√©fini si le contenu de l'√©diteur de cet IDE doit √™tre ajout√© √† l'archive zip
            r√©cup√©rant les codes de tous les IDEs de la page.
        """,
        extra_docs="""
            Les IDEs marqu√©s avec `#!py EXPORT=True` se voient ajout√© un bouton {{btn('zip',
            in_tag='span')}} permettant de t√©l√©charger une archive `.zip` avec les contenus
            de tous les √©diteurs marqu√©s dans la page en cours.

            Le but de cette fonctionnalit√© est multiple :

            * Permettre aux utilisateurs de t√©l√©charger en une fois tous les contenus des
            √©diteurs (marqu√©s) de la page, pour garder une trace de leurs codes.
            * G√©n√©rer en un clic une archive que l'enseignant peut ensuite r√©cup√©rer (voir
            plus bas pour ce qui concerne les noms de fichiers donn√©s aux archives)
            * Il est en fait possible de charger dans la page du site le contenu d'un fichier
            zip en faisant un gliss√©-d√©pos√© de l'archive sur le bouton de cr√©ation du fichier
            zip de l'un des IDEs marqu√©s de la page. Cela permet de tester rapidement les
            codes d'un √©l√®ve ou groupe d'√©l√®ves. Cette fonctionnalit√© n'est pas d√©crite dans
            la documentation des utilisateurs.

            ___Gestion des noms de fichiers des archives zip :___

            * Par d√©faut, le nom de l'archive zip est cr√©√© √† partir de l'adresse de la page sur
              le site construit (en excluant la racine du site).
            * Il est possible √† l'auteur d'ajouter un pr√©fixe de son choix aux noms des archives,
              en renseignant l'option {{config_link('ides.export_zip_prefix')}}, dans les m√©tadonn√©es
              de la page.
            * Si l'enseignant envisage de r√©cup√©rer les archives zip des √©l√®ves, il est √©galement
            possible de forcer les utilisateurs √† renseigner leur nom au moment de cr√©er l'archive
            zip (ou tout autre chose pouvant servir d'identifiant). Pour cela configurer dans les
            m√©tadonn√©es l'option {{config_link('ides.export_zip_with_names', val="true")}}.

            Le nom complet des archives est g√©n√©r√© selon le mod√®le suivant, selon les √©l√©ments
            activ√©s via les options de configuration : `PREFIX-NAMES-DEFAULT`.
        """,
    ),
))









TERMINAL = MacroConfigSrc.with_default_docs(
    to_page(DOCS_TERMINALS) / '#signature'
)(
    'terminal',
    force_kwargs_index = 1,
    docs = "Valeurs par d√©faut pour les arguments de la macro `terminal`.",
    yaml_desc = "Default values for arguments used in the `terminal` macro.",
    elements=(

    *_py_globals_copy_gen(
        ID = MOST_LIKELY_USELESS_ID,
        py_name = {'docs': """
            Cr√©e un terminal isol√© utilisant le fichier python correspondant (sections
            autoris√©es: `env`, `env_term`, `post_term`, `post` et `ignore`).
        """},
    ),
    ConfigOptionIdeLink(
        'TERM_H', int, default=10,
        docs = "Nombre de lignes initiales utilis√©es pour la hauteur du terminal (approximatif).",
        yaml_desc="Initial number of lines of a terminal (approximative).",
    ),
    ConfigOptionSrc(
        'FILL', str, default='',
        docs = """
            Commande √† afficher dans le terminal lors de sa cr√©ation.

            {{ red('Uniquement pour les terminaux isol√©s.') }}
        """,
        yaml_desc="Command used to prefill the terminal (isolated terminals only).",
        # yaml_desc="Commande pour pr√©remplir le terminal (terminaux isol√©s uniquement).",
    ),
))









PY_BTN = MacroConfigSrc.with_default_docs(
    to_page(DOCS_PY_BTNS) / '#signature'
)(
    'py_btn',
    force_kwargs_index = 1,
    docs = "Valeurs par d√©faut pour les arguments de la macro `py_btn`.",
    yaml_desc = "Default values for arguments used in the `py_btn` macro.",
    elements=(

    *_py_globals_copy_gen(
        skip_from_macros_docs = MEANINGLESS_ARGS_FOR_PY_BTNS_USER_DOCS,
        ID      = MOST_LIKELY_USELESS_ID,
        py_name = {'docs': """
            Cr√©e un bouton isol√© utilisant le fichier python correspondant
            (sections `env` et `ignore` uniquement).
        """}
    ),
    ConfigOptionSrc(
        'ICON', str, default="",
        docs = """
            Par d√©faut, le bouton \"play\" des tests publics des IDE est utilis√©.

            Peut √©galement √™tre une ic√¥ne `mkdocs-material`, une adresse vers une image (lien ou
            fichier), ou du code html.<br>
            Si un fichier est utilis√©, l'adresse doit √™tre relative au `docs_dir` du site construit.
        """,
        yaml_desc="Image of the button (by default: `play`  / file path / :icon-material: / url).",
        # yaml_desc="Image pour le bouton (`play` par d√©faut / fichier / :icon-material: / lien).",
    ),
    ConfigOptionSrc(
        'HEIGHT', int, is_optional=True, fake_type="None|int",
        docs = "Hauteur par d√©faut du bouton.",
        yaml_desc="Default height for the button",
    ),
    ConfigOptionSrc(
        'WIDTH', int, is_optional=True, fake_type="None|int",
        docs = "Largeur par d√©faut du bouton.",
        yaml_desc="Default width for the button",
    ),
    ConfigOptionSrc(
        'SIZE', int, is_optional=True, fake_type="None|int",
        docs = "Si d√©finie, utilis√©e pour la largeur __et__ la hauteur du bouton.",
        yaml_desc="If given, define the height and the width for the button",
    ),
    ConfigOptionSrc(
        'TIP', str, lang_default_access='py_btn.msg',
        docs = "Message √† utiliser pour l'info-bulle.",
        yaml_desc="Tooltip message",
    ),
    ConfigOptionSrc(
        'TIP_SHIFT', int, default=50,
        docs = """
            D√©calage horizontal de l'info-bulle par rapport au bouton, en `%` (c'est le
            d√©calage vers la gauche de l'info-bulle par rapport au point d'ancrage de
            la fl√®che au-dessus de celle-ci. `50%` correspond √† un centrage).
        """,
        yaml_desc="Horizontal leftward shifting of the tooltip (%)",
        # yaml_desc="D√©calage horizontal de l'info-bulle vers la gauche (%)",
    ),
    ConfigOptionSrc(
        'TIP_WIDTH', (float if IS_PY_3_9 else Union[float,int]), default=0.0,
        fake_type = "float|int",
        fake_code_type = Union[float, int],
        extended_validation = ((lambda v: isinstance(v, (int,float))) if IS_PY_3_9 else None),
        yaml_schema_dct={"type": 'number'},
        docs = """
            Largeur de l'info-bulle, en `em` (`#!py 0` correspond √† une largeur automatique).

            {{orange("ATTENTION :")}} Si vous utilisez Python 3.9, la valeur pour cette option
            depuis le fichier `mkdocs.yml` ne peut √™tre qu'un `#!py float`. Si elle est utilis√©e
            depuis d'autres endroits (argument de macro, fichiers {{ meta() }}, ent√™tes markdown),
            cela peut aussi √™tre un `#!py int`.
        """,
        yaml_desc="Tooltip width (in em units. Use `0` for automatic width)",
    ),
    ConfigOptionSrc(
        'WRAPPER', str, default='div',
        docs = "Type de balise dans laquelle mettre le bouton.",
        yaml_desc = "Tag type the button will be inserted into",
    ),
))









AUTO_RUN = MacroConfigSrc.with_default_docs(
    to_page(DOCS_RUN_MACRO) / '#signature'
)(
    'run',
    force_kwargs_index = 1,
    docs      = "Valeurs par d√©faut pour les arguments de la macro `run`.",
    yaml_desc = "Default values for arguments used in the `run` macro.",
    elements  = tuple(_py_globals_copy_gen(
        skip_from_macros_docs = MEANINGLESS_ARGS_FOR_PY_BTNS_USER_DOCS,
        ID       = MOST_LIKELY_USELESS_ID,
        AUTO_RUN = {'default': True},
        py_name  = {'docs': """
            Chemin relatif vers le fichier python (sans extension) √† ex√©cuter au chargement de
            la page (sections `env` et `ignore` uniquement).
        """},
    ),
))























SQLIDE = SqlideConfigSrc.with_default_docs(
    to_page(DOCS_SQLIDE) / '#signature'
)(
    'sqlide',
    inclusion_profile = InclusionProfile.config | InclusionProfile.yaml_schema | InclusionProfile.yaml_docs_tree,
    docs      = "Valeurs par d√©faut pour les arguments de la macro `run`.",
    yaml_desc = "Default values for arguments used in the `run` macro.",
    elements  = (

    ConfigOptionSrc(
        'titre', str, default='', index=0,
        fake_default='Sql',
        docs = "Titre de l'√©l√©ment.",
        yaml_desc = "Sqlide element title",
    ),
    ConfigOptionSrc(
        'sql', str, default='', index=1,
        docs = "Chemin relatif vers le fichier sql contenant le code √† afficher initialement dans le sqlide.",
        yaml_desc = "Relative path to the initial SQL content.",
    ),
    ConfigOptionSrc(
        'espace', str, is_optional=True,  index=2,
        docs = "Identifiant permettant de partager une m√™me base de donn√©es entre plusieurs sqlides.",
        yaml_desc = "Database identifier, to share it across several sqlides.",
    ),
    ConfigOptionSrc(
        'base', str, default='',
        fake_default='/',
        docs = "Chemin relatif vers le fichier .db (SQLite) contenant les donn√©es pour l'exercice.",
        yaml_desc = "Relative path to the .db file (SQLite).",
    ),
    ConfigOptionSrc(
        'init', str, default='',
        docs = "Chemin relatif vers le fichier .sql contenant un code d'initialisation √† ex√©cuter au chargement de l'√©l√©ment.",
        yaml_desc = "Relative path to the .sql file used for initialization.",
    ),
    ConfigOptionSrc(
        'autoexec', bool, default=False,
        docs = "Si `#!py True`, l'√©l√©ment est ex√©cut√© automatiquement au chargement de la page, comme si l'utilisateur avait cliqu√© sur le bouton.",
        yaml_desc = "Automatically execute the element if `True`.",
    ),
    ConfigOptionSrc(
        'hide', bool, default=False,
        docs = "Si `#!py True`, l'√©l√©ment n'est pas visible dans la page.",
        yaml_desc = "Hide the element in the page if `True`.",
    ),
))























CODE_FENCE_FORMATTING = MacroConfigSrc.with_default_docs(
    to_page(DOCS_RESUME)
)(
    '', elements=(

    ConfigOptionSrc(
        'auto_title', bool, default=False,
        docs = """
            Si vrai, le nom du fichier python est utilis√© comme titre pour le bloc de code.

            Sans effet si `title` est donn√©.
        """,
        yaml_desc="If true, use the python filename as title for the code block.",
    ),
    ConfigOptionSrc(
        'name_only', bool, default=True,
        docs = """
            Si vrai, Seul le nom du fichier est utilis√© pour construire automatiquement le titre
            du bloc de code. Si faux, le chemin relatif, tel que pass√© en argument avec `py_name`,
            est utilis√© (en y ajoutant l'extension `.py`).

            Sans effet si `title` est donn√©.
        """,
        yaml_desc="Use the name only or the full relative path argument for the automatic title.",
    ),
    ConfigOptionSrc(
        'title', str, default='',
        docs = "Titre √† utiliser pour d√©crire le bloc de code.",
        yaml_desc = "Title to use for the code block.",
    ),
    ConfigOptionSrc(
        'no_block', bool, default=False,
        docs = "Si `#!py True`, renvoie les contenus seuls, sans le bloc de code autour.",
        yaml_desc = "If `True`, returns the code content without the surrounding code block.",
    ),
    ConfigOptionSrc(
        'attrs', str, default='',
        docs = "Attributs markdown √† ajouter au bloc de code (ex: `'.inline .end style=\"color:red;\"'`)",
        yaml_desc = "Markdown attributes for the code block",
    ),
))


def code_fence_formatting_gen():
    return (arg.copy_with() for arg in CODE_FENCE_FORMATTING.elements)









SECTION = MacroConfigSrc.with_default_docs(
    to_page(DOCS_RESUME) / '#section'
)(
    'section',
    docs = "Valeurs par d√©faut pour les arguments de la macro `section`.",
    yaml_desc = "Default values for arguments used in the `section` macro.",
    elements = (

    # Required on the python side, but should never be given through "meta", so it has to be
    # non blocking on the config side:
    ConfigOptionSrc(
        "py_name", str, index=0, default="",
        inclusion_profile = InclusionProfile.all_but_yaml_stuff,
        docs="[Fichier python {{ annexe() }}](--ide-files).",
        extra_docs = """
            Chemin relatif au dossier contenant le ficher markdown {{ orange('source') }},
            permettant d'acc√©der au fichier python {{ annexe('principal') }} pour l'IDE.

            * Si l'argument n'est pas renseign√© ou est une cha√Æne vide, l'IDE sera cr√©√© vide
            (ex : [bac √† sable](--bac_a_sable/)).
            * Le chemin ne donne que le pr√©fixe commun des fichiers {{annexes()}} pour cet IDE,
            et il faut donc {{red("omettre l'extension")}} : si le fichier {{annexe("principal")}}
            est `.../exercice.py`, l'argument `py_name` doit √™tre  `".../exercice"`.
            * Une {{red('erreur')}} est lev√©e si un chemin est donn√© mais qu'aucun fichier python
            ne peut √™tre trouv√© pour les diff√©rentes [organisations de fichiers
            support√©es](--ide-files-organization).

            NOTE: cette macro ne marche pas avec des contenus python compos√©s de plusieurs fichiers
            diff√©rents. Utiliser la macro `composed_section` √† la place.
        """,
        yaml_desc = """
            Relative path (no extension) toward the `{exo}.py` file for an IDE, terminal, ...
        """,
    ),
    ConfigOptionSrc(
        'section', str, index=1, is_optional=True,
        docs = "Nom de la section √† extraire.",
        yaml_desc="Name of the section to extract.",
    ),

    *code_fence_formatting_gen(),
))









# Excluded from all documentations, but kept around...
COMPOSED_PY = MacroConfigSrc.with_default_docs(
    to_page(DOCS_RESUME) / '#composed_py'
)(
    'composed_py',
    docs = "Valeurs par d√©faut pour les arguments de la macro `composed_py`.",
    yaml_desc = "Default values for arguments used in the `composed_py` macro.",
    force_kwargs_index = 1,
    elements = (

    # Required on the python side, but should never be given through "meta", so it has to be
    # non blocking on the config side:
    ConfigOptionSrc(
        'py_name', Tuple[str], conf_type=C.ListOfItems(C.Type(str), default=['']),
        index=0, is_varargs=True,
        fake_name="py_name", fake_type='str', fake_default='',
        inclusion_profile = InclusionProfile.all_but_yaml_stuff,
        docs = "Ensemble des noms des [fichiers python {{ annexes() }}](--ide-files)",
        yaml_desc = """
            Relative paths (no extension) toward the `{exo}.py` files, with combination
            instructions.
        """,
    ),
    ConfigOptionSrc(
        'sections', str, default='',
        docs = """
            <br>Noms de sections √† afficher, s√©par√©s par des espaces, virgules et/ou points virgule.
            Par d√©faut, toutes les sections avec du contenu sont affich√©es (python et REMs).
        """,
        yaml_desc="List of section names from the composed python code to display.",
    ),
    ConfigOptionSrc(
        'with_headers', bool, default=True,
        docs = """
            Si `#!py False`, les ent√™tes `# --- PMT:{section} --- #` ne sont pas incorpor√©es au
            contenu.
            {{pmt_note("Dans ce cas, le contenu final affich√© peut ne pas √™tre un code python/PMT
            syntaxiquement valide.", lf_location=0)}}
        """,
        yaml_desc="Specify if the `# --- PMT:{section} --- #` headers are added to the content or not.",
    ),

    *code_fence_formatting_gen(),
))









PY = MacroConfigSrc.with_default_docs(
    to_page(DOCS_RESUME) / '#py'
)(
    'py',
    docs = "Valeurs par d√©faut pour les arguments de la macro `py`.",
    yaml_desc = "Default values for arguments used in the `py` macro.",
    elements = (

    # Required on the python side, but should never be given through "meta", so it has to be
    # non blocking on the config side:
    ConfigOptionSrc(
        'py_name', str, is_optional=True, index=0,
        fake_default = "",
        docs = "Chemin relatif vers le fichier source √† utiliser (sans l'extension).",
        yaml_desc="Relative path to the python file to use (without extension).",
    ),

    *code_fence_formatting_gen(),
))






















MULTI_QCM = MultiQcmConfigSrc.with_default_docs(
    to_page(DOCS_QCMS) / '#arguments'
)(
    'multi_qcm',
    docs = "Valeurs par d√©faut pour les arguments de la macro `multi_qcm`.",
    yaml_desc = "Default values for arguments used in the `multi_qcm` macro.",
    elements = (

    # Required on the python side, but should never be given through "meta": must not be blocking:
    ConfigOptionSrc(
        'questions',
        list, index=0, is_varargs=True,
        inclusion_profile = InclusionProfile.not_in(
            InclusionProfile.config,
            InclusionProfile.yaml_schema,
            InclusionProfile.yaml_docs_tree,
        ),
        fake_type="str", fake_default="",
        yaml_desc = """
            From PMT 2.4.0, relative path to a `.json` file containing the informations for the MCQ.
        """,
        docs = """
            √Ä partir de la version 2.4.0, devrait √™tre un unique chemin relatif vers un
            [fichier `json`](--qcms-json) contenant les donn√©es pour les diff√©rentes
            questions, et potentiellement les valeurs pour tous les autres arguments de
            la macro.
        """,
        extra_docs = """
            Suite √† la version `2.4.0` du th√®me, cet argument devrait √™tre une unique cha√Æne de
            caract√®res indiquant le chemin relatif vers un [fichier `json`](--qcms-json) contenant
            les donn√©es pour les diff√©rentes questions, et potentiellement les valeurs pour tous
            les autres arguments de la macro.
            <br>Ce fichier peut √™tre facilement cr√©√© gr√¢ce √† [l'outil de cr√©ation de fichier
            `json` pour les qcms](--qcm-builder), disponible dans la documentation du th√®me.

            {{ pmt_note("Si la d√©claration est √©crite √† la main, chaque argument individuel est
            alors une [liste d√©crivant une question avec ses choix et r√©ponses](--qcm_question).
            Cette m√©thode est cependant vivement d√©conseill√©e car elle pr√©sente de nombreux
            pi√®ges lors de la r√©daction de l'appel de macro.") }}
        """,
    ),
    ConfigOptionSrc(
        'description', str, default='',
        docs = """
            Texte d'introduction (markdown) d'un QCM, ajout√© au d√©but de l'admonition, avant
            la premi√®re question. Cet argument est optionnel.
        """,
        yaml_desc="Introduction text at the beginning of the quiz admonition.",
        # yaml_desc="Texte d'introduction au d√©but de l'admonition du QCM.",
    ),
    ConfigOptionSrc(
        'hide', bool, default=False,
        docs = """
            Si `#!py True`, un masque appara√Æt au-dessus des boutons pour signaler √† l'utilisateur
            que les r√©ponses resteront cach√©es apr√®s validation.
        """,
        yaml_desc = """
            Indicates whether correct/incorrect answers are visible or not after validation.
        """,
        # yaml_desc="Indique si les r√©ponses correctes/incorrects sont visibles √† la correction.",
    ),
    ConfigOptionSrc(
        'multi', bool, default=False,
        docs = """
            R√©glage pour toutes les questions du qcm ayant une seule bonne r√©ponse, indiquant si
            elles doivent √™tre consid√©r√©es comme √©tant √† choix simple ou multiples.
        """,
        yaml_desc="Disambiguate MCQ and SCQ if not automatically decidable.",
        # yaml_desc="Permet de clarifier entre QCM et QCU quand ambigu√´.",
    ),
    ConfigOptionSrc(
        'shuffle', bool, default=False,
        docs = "M√©lange les questions et leurs choix ou pas, √† chaque fois que le qcm est jou√©.",
        yaml_desc="Shuffle questions and their items or not.",
    ),
    ConfigOptionSrc(
        'shuffle_questions', bool, default=False,
        docs = "M√©lange les questions uniquement, √† chaque fois que le qcm est jou√©.",
        yaml_desc="Shuffling or not, questions only.",
    ),
    ConfigOptionSrc(
        'shuffle_items', bool, default=False,
        docs="M√©lange seulement les items de chaque question, √† chaque fois que le qcm est jou√©.",
        yaml_desc="Shuffling the items of each question or not.",
    ),
    ConfigOptionSrc(
        'admo_kind', str, conf_type=C.Choice(('!!!', '???', '???+', None), default="!!!"),
        yaml_desc="Type of the admonition wrapping the whole MCQ (`!!!`, ...).",
        docs = """
            Type d'admonition dans laquelle les questions seront rassembl√©es :{{ul_li([
                "`#!py '!!!'` : classique,",
                "`#!py '???'` : d√©pliable,",
                "`#!py '???+'` : repliable,",
                "`None` : pas d'admonition autour du qcm."
            ])}}
        """,
        extra_docs="""
            `None` permet d'ajouter du contenu markdown autour du qcm de mani√®re plus fine, si besoin.
            {{ pmt_note("√Ä noter que l'admonition restera visible dans le markdown g√©n√©r√© par la macro :
            elle sera supprim√©e dans la couche JS, au moment de l'affichage de la page html") }}.
        """,
    ),
    ConfigOptionSrc(
        'admo_class', str, default="tip",
        yaml_desc="Html class(es) for the admonition wrapping the whole MCQ (default: `tip`).",
        docs = """
            Pour changer la classe d'admonition. Il est √©galement possible d'ajouter d'autres
            classes si besoin, en les s√©parant par des espaces (exemple : `#!py 'tip inline end
            my-class'`).
        """,
    ),
    ConfigOptionSrc(
        'qcm_title', str, lang_default_access="qcm_title.msg",
        docs = "Pour changer le titre de l'admonition.",
        yaml_desc="Override the default title of the MCQ admonition.",
    ),
    ConfigOptionSrc(
        'tag_list_of_qs', str, conf_type=C.Choice(('ul', 'ol')), is_optional=True,
        docs = """
            {{ ul_li([
                '`#!py None` : automatique (d√©faut).',
                '`#!py "ol"` : questions num√©rot√©es.',
                '`#!py "ul"` : questions avec puces.',
            ]) }}
        """,
        extra_docs="""
            D√©finit le type de liste html utilis√©e pour construire les questions.
            <br>Si la valeur est `None`, '`#!py "ol"` est utilis√©, sauf s'il n'y a qu'une seule
            question pour le qcm, o√π c'est alors `#!py "ul"` qui est utilis√©.
        """,
        yaml_desc="Enforce the list tag used to build the questions in a MCQ.",
    ),
    ConfigOptionSrc(
        'DEBUG', bool, default=False,
        docs = "Si `True`, affiche dans la console le code markdown g√©n√©r√© pour ce qcm.",
        yaml_desc="""
            If `True`, the generated markdown of the MCQ will be printed to the console
            during mkdocs build.
        """,
    ),
    ConfigOptionSrc(
        'SHOW', str, conf_type=C.Choice(MacroShowConfig.VALUES, default=MacroShowConfig.none),
        docs="""
            Affiche des donn√©es sur l'appel de macro dans le terminal, durant le `mkdocs serve` :
            {{ul_li([
                "`#!py ''`: Ne fait rien (d√©faut).",
                "`#!py 'args'`: Affiche tous les arguments de l'appel de macro.",
            ])}}
        """,
        yaml_desc="Display macro related infos in the terminal.",
    ),
))






















FIGURE = MacroConfigSrc.with_default_docs(
    to_page(DOCS_FIGURES) / '#signature'
)(
    'figure',
    docs = "Valeurs par d√©faut pour les arguments de la macro `figure`.",
    yaml_desc = "Default values for arguments used in the `figure` macro.",
    elements = (

    # Required on the python side, but should never be given through "meta": must not be blocking:
    ConfigOptionSrc(
        'div_id', str, default="figure1", index=0,
        docs = """
            Id html de la div qui accueillera la figure ou l'√©l√©ment ins√©r√© dynamiquement.
            <br>√Ä modifier s'il y a plusieurs figures ins√©r√©es dans la m√™me page.
        """,
        yaml_desc="""
            Html id of the `div` tag that will hold the dynamically generated figure
            (default: `\"figure1\"`).
        """,
    ),
    ConfigOptionSrc(
        'div_class', str, default="",
        docs = f"""
            Classe html √† ajouter √† la div qui accueillera la figure.<br>La classe
            `{ HtmlClass.py_mk_figure }` est syst√©matiquement pr√©sente : il possible de
            surcharger les r√®gles css de cette classe pour obtenir l'affichage voulu.
        """,
        yaml_desc="Html class to add to the `div` tag that will hold dynamically generated figures.",
        # yaml_desc="Classe html √† donner √† la div qui accueillera la figure.",
    ),
    ConfigOptionSrc(
        'inner_text', str, lang_default_access="figure_text.msg",
        docs = "Texte qui sera affich√© avant qu'une figure ne soit trac√©e.",
        yaml_desc="Text used as placeholder before any figure is inserted.",
    ),
    ConfigOptionSrc(
        'admo_kind', str, default="!!!",
        docs = """
            Type d'admonition dans laquelle la figure sera affich√©e (`'???'` et `'???+'`
            sont √©galement utilisables).
            <br>Si `admo_kind` est `''`, la `<div>` sera ajout√©e sans admonition, et les
            arguments suivants seront alors ignor√©s.
        """,
        yaml_desc="Type of the admonition wrapping the generated figure (`!!!`, ...).",
        # yaml_desc="Type d'admonition pour la figure (`!!!`, ...).",
    ),
    ConfigOptionSrc(
        'admo_class', str, default="tip",
        docs = """
            Pour changer la classe d'admonition. Il est √©galement possible d'ajouter d'autres
            classes si besoin, en les s√©parant par des espaces (exemple : `#!py 'tip inline end
            my-class'`).
        """,
        yaml_desc = """
            Html class(es) of the admonition wrapping the generated figure (default: `tip`).
        """,
        # yaml_desc="Classe(s) utilis√©e(s) pour l'admonition de la figure (d√©faut: `tip`)."
    ),
    ConfigOptionSrc(
        'admo_title', str, lang_default_access="figure_admo_title.msg",
        docs = "Pour changer le titre de l'admonition.",
        yaml_desc="Admonition title.",
    ),
    ConfigOptionSrc(
        'p5_buttons', str, conf_type=C.Choice(P5BtnLocation.VALUES), is_optional=True,
        docs = f"""
            Si d√©fini, ajoute les boutons start/step/stop pour g√©rer les animations construites avec
            [p5](--p5_processing/how_to/).

            Les boutons sont ajout√©s sur le c√¥t√© indiqu√© du canevas, les valeurs possibles √©tant
            { items_comma_joiner(['`#!py "'+loc+'"`' for loc in P5BtnLocation.VALUES]) }.
        """,
        yaml_desc="""
            Add start, step and stop buttons for p5 animations, on the given side of the canvas.
        """,
    ),
    ConfigOptionSrc(
        'SHOW', str, conf_type=C.Choice(MacroShowConfig.VALUES, default=MacroShowConfig.none),
        docs="""
            Affiche des donn√©es sur l'appel de macro dans le terminal, durant le `mkdocs serve` :
            {{ul_li([
                "`#!py ''`: Ne fait rien (d√©faut).",
                "`#!py 'args'`: Affiche tous les arguments de l'appel de macro.",
            ])}}
        """,
        yaml_desc="Display macro related infos in the terminal.",
    ),
))






















ARGS_MACRO_CONFIG = SubConfigSrc(
    'args',
    docs_page_url = to_page(DOCS_CONFIG) / '#{py_macros_path}',
    extra_docs = """
        R√©glages des arguments par d√©faut accessibles pour les diff√©rentes macros du th√®me.
        Explications d√©taill√©es dans la page [Aide r√©dacteurs/R√©sum√©](--redactors/resume/).
    """,
    yaml_desc = """
        Configurations of default values for arguments used in `PyodideMacrosPlugin` macros.
    """,
    # yaml_desc = "Configurations des arguments par d√©faut pour les diff√©rentes macros du th√®me.",
     elements = (
        IDE,
        TERMINAL,
        PY_BTN,
        AUTO_RUN,
        SQLIDE,
        SECTION,
        COMPOSED_PY,
        PY,
        MULTI_QCM,
        FIGURE,
     )
)
