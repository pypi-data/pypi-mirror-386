[project]
name = "chift-mcp-server"
version = "0.2.4"
description = "MCP Server to interact with Chift API via Chift Python SDK"
authors = [{ name = "Dima Redchyts", email = "dima.redchyts@chift.eu" }]
requires-python = ">=3.11,<4.0"
readme = "README.md"
license = "MIT"
dependencies = [
    "mcp[cli]==1.12.4",
    "chift==0.3.11",
    "pydantic-config>=0.3.0",
    "loguru>=0.7.3",
    "inflect>=7.5.0",
    "pydantic>=2.11.7",
    "fastmcp>=2.12.0",
    "mcp>=1.12.4",
]

[project.scripts]
chift-mcp-server = "chift_mcp.__main__:main"

[dependency-groups]
dev = [
    "pytest",
    "pytest-asyncio",
    "ruff>=0.3.4",
    "poethepoet>=0.24.0"
]

[tool.hatch.build.targets.sdist]
include = ["src/chift_mcp"]

[tool.hatch.build.targets.wheel]
include = ["src/chift_mcp"]

[tool.hatch.build.targets.wheel.sources]
"src/chift_mcp" = "chift_mcp"

[tool.poe.tasks]
lint = "ruff check . --show-fixes --fix --config pyproject.toml"
format = "ruff format . --config pyproject.toml"
format-check = "ruff format --check . --config pyproject.toml"
test = "pytest tests"
install = "uv sync --dev"


[tool.ruff]
target-version = "py311"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = ["E", "F", "B", "I", "UP", "SIM", "C4", "TID", "RUF"]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["B018", "T201", "E402", "F811", "E501"]

[tool.ruff.lint.isort]
known-first-party = ["chift_mcp"]
combine-as-imports = true
force-single-line = false
lines-between-types = 1

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
