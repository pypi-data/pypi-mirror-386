"""Test utils."""

import io
import pathlib
import tempfile

import numpy as np
import pytest
import tomli
from phonopy.structure.atoms import PhonopyAtoms

from phelel.velph.utils.vasp import CutoffToFFTMesh, VaspIncar, VaspKpoints, VaspPotcar

cwd = pathlib.Path(__file__).parent


def test_write_kpoints_line_mode(nacl_cell: PhonopyAtoms):
    """Test of KPOINTS writer in line mode."""
    toml_str = """line = 51
path = [['GAMMA', 'X'], ['X', 'U'], ['U', 'K'], ['K', 'GAMMA']]
GAMMA = [0.000000, 0.000000, 0.000000]
K = [0.375000, 0.375000, 0.750000]
U = [0.625000, 0.250000, 0.625000]
X = [0.500000, 0.000000, 0.500000]
"""
    ref_str = """k points along high symmetry lines by velph
51
line mode
fractional
0.00000000 0.00000000 0.00000000 GAMMA
0.50000000 0.00000000 0.50000000 X

0.50000000 0.00000000 0.50000000 X
0.62500000 0.25000000 0.62500000 U

0.62500000 0.25000000 0.62500000 U
0.37500000 0.37500000 0.75000000 K

0.37500000 0.37500000 0.75000000 K
0.00000000 0.00000000 0.00000000 GAMMA
"""
    kpoints_str = _get_str_of_write_kpoints_line_mode(toml_str, nacl_cell)
    assert kpoints_str == ref_str


def test_write_kpoints_line_mode_seekpath(nacl_cell: PhonopyAtoms):
    """Test of KPOINTS writer in line mode with seekpath."""
    pytest.importorskip("seekpath")
    toml_str = """line = 51"""
    ref_str = """k points along high symmetry lines by velph
51
line mode
fractional
0.00000000 0.00000000 0.00000000 GAMMA
0.50000000 0.00000000 0.50000000 X

0.50000000 0.00000000 0.50000000 X
0.62500000 0.25000000 0.62500000 U

0.37500000 0.37500000 0.75000000 K
0.00000000 0.00000000 0.00000000 GAMMA

0.00000000 0.00000000 0.00000000 GAMMA
0.50000000 0.50000000 0.50000000 L

0.50000000 0.50000000 0.50000000 L
0.50000000 0.25000000 0.75000000 W

0.50000000 0.25000000 0.75000000 W
0.50000000 0.00000000 0.50000000 X
"""
    kpoints_str = _get_str_of_write_kpoints_line_mode(toml_str, nacl_cell)
    assert kpoints_str == ref_str


def _get_str_of_write_kpoints_line_mode(toml_str, cell):
    toml_dict = tomli.loads(toml_str)
    with tempfile.TemporaryFile() as fp:
        VaspKpoints.write_line_mode(fp, cell, toml_dict)
        fp.seek(0)
        kpoints_str = fp.read().decode("utf-8")
    return kpoints_str


def test_write_kpoints_mesh_mode():
    """Test of KPOINTS writer in mesh mode."""
    toml_str = "mesh = [8, 8, 8]"
    ref_str = """# Generated by velph
0
Gamma
            8             8             8
  0.0000000000000000   0.0000000000000000   0.0000000000000000"""
    kpoints_str = _get_str_of_write_kpoints_mesh_mode(toml_str)
    assert kpoints_str == ref_str


def test_write_kpoints_mesh_mode_grg():
    """Generalized regular grid for FCC."""
    toml_str = """mesh = [
  [-11, 11, 11],
  [11, -11, 11],
  [11, 11, -11]
]"""
    ref_str = """# Generated by velph
0
Reciprocal
  0.0000000000000000   0.0454545454545455   0.0454545454545455
  0.0454545454545455   0.0000000000000000   0.0454545454545455
  0.0454545454545455   0.0454545454545455   0.0000000000000000
  0.0000000000000000   0.0000000000000000   0.0000000000000000"""
    kpoints_str = _get_str_of_write_kpoints_mesh_mode(toml_str)
    assert kpoints_str == ref_str


def test_write_kpoints_mesh_mode_grg_tio2_prim():
    """Generalized regular grid for BCT.

    VASP returns 50 irreducible k-points.

    """
    toml_str = """mesh = [
  [0, 8, 8],
  [8, 0, 8],
  [3, 3, 0]
]"""
    ref_str = """# Generated by velph
0
Reciprocal
 -0.0625000000000000   0.0625000000000000   0.0625000000000000
  0.0625000000000000  -0.0625000000000000   0.0625000000000000
  0.1666666666666667   0.1666666666666667  -0.1666666666666667
  0.0000000000000000   0.0000000000000000   0.0000000000000000"""
    kpoints_str = _get_str_of_write_kpoints_mesh_mode(toml_str)

    assert kpoints_str == ref_str


def _get_str_of_write_kpoints_mesh_mode(toml_str):
    toml_dict = tomli.loads(toml_str)
    with tempfile.TemporaryFile() as fp:
        VaspKpoints.write_mesh_mode(fp, toml_dict)
        fp.seek(0)
        kpoints_str = fp.read().decode("utf-8")
    return kpoints_str


def test_write_incar():
    """Test of INCAR writer."""
    toml_str = """ismear = 0
sigma = 0.01
ediff = 1e-08
encut = 500
prec = "accurate"
lreal = false
lwave = false
lcharg = false
ibrion = -1
nsw = 0"""
    ref_str = """EDIFF = 1e-08
ENCUT = 500
IBRION = -1
ISMEAR = 0
LCHARG = .FALSE.
LREAL = .FALSE.
LWAVE = .FALSE.
NSW = 0
PREC = accurate
SIGMA = 0.01"""
    incar_str = _get_str_of_write_incar(toml_str)
    assert incar_str == ref_str


def test_write_incar2():
    """Test of INCAR writer."""
    toml_str = """system = "default"
encut = 500
ismear = 0
sigma = 0.1
prec = "accurate"
ediff = 1e-06
lwap = true
lreal = false
lwave = false
lcharg = false
lsorbit = false
addgrid = true
lnoncollinear = true
kpar = 2
npar = 4
isym = 0
magmom = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]"""
    ref_str = """ADDGRID = .TRUE.
EDIFF = 1e-06
ENCUT = 500
ISMEAR = 0
ISYM = 0
KPAR = 2
LCHARG = .FALSE.
LNONCOLLINEAR = .TRUE.
LREAL = .FALSE.
LSORBIT = .FALSE.
LWAP = .TRUE.
LWAVE = .FALSE.
MAGMOM = 24*0
NPAR = 4
PREC = accurate
SIGMA = 0.1
SYSTEM = default"""
    incar_str = _get_str_of_write_incar(toml_str)
    assert incar_str == ref_str


def test_write_incar3():
    """Test of INCAR writer."""
    toml_str = """system = "default"
encut = 500
ismear = 0
sigma = 0.1
prec = "accurate"
ediff = 1e-06
lwap = true
lreal = false
lwave = false
lcharg = false
lsorbit = false
addgrid = true
lnoncollinear = true
kpar = 2
npar = 4
isym = 0
magmom = "24*0"
"""
    ref_str = """ADDGRID = .TRUE.
EDIFF = 1e-06
ENCUT = 500
ISMEAR = 0
ISYM = 0
KPAR = 2
LCHARG = .FALSE.
LNONCOLLINEAR = .TRUE.
LREAL = .FALSE.
LSORBIT = .FALSE.
LWAP = .TRUE.
LWAVE = .FALSE.
MAGMOM = 24*0
NPAR = 4
PREC = accurate
SIGMA = 0.1
SYSTEM = default"""
    incar_str = _get_str_of_write_incar(toml_str)
    assert incar_str == ref_str


def test_write_incar4():
    """Test of INCAR writer."""
    toml_str = """system = "default"
encut = 500
ismear = 0
sigma = 0.1
prec = "accurate"
ediff = 1e-06
lwap = true
lreal = false
lwave = false
lcharg = false
lsorbit = false
addgrid = true
lnoncollinear = true
kpar = 2
npar = 4
isym = 0
magmom = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
]"""
    ref_str = """ADDGRID = .TRUE.
EDIFF = 1e-06
ENCUT = 500
ISMEAR = 0
ISYM = 0
KPAR = 2
LCHARG = .FALSE.
LNONCOLLINEAR = .TRUE.
LREAL = .FALSE.
LSORBIT = .FALSE.
LWAP = .TRUE.
LWAVE = .FALSE.
MAGMOM = 12*0 12*1
NPAR = 4
PREC = accurate
SIGMA = 0.1
SYSTEM = default"""
    incar_str = _get_str_of_write_incar(toml_str)
    assert incar_str == ref_str


def test_write_incar5():
    """Test of INCAR writer."""
    toml_str = """system = "default"
encut = 500
ismear = 0
sigma = 0.1
prec = "accurate"
ediff = 1e-06
lwap = true
lreal = false
lwave = false
lcharg = false
lsorbit = false
addgrid = true
lnoncollinear = true
kpar = 2
npar = 4
isym = 0
magmom = "12*0 12*1"
"""
    ref_str = """ADDGRID = .TRUE.
EDIFF = 1e-06
ENCUT = 500
ISMEAR = 0
ISYM = 0
KPAR = 2
LCHARG = .FALSE.
LNONCOLLINEAR = .TRUE.
LREAL = .FALSE.
LSORBIT = .FALSE.
LWAP = .TRUE.
LWAVE = .FALSE.
MAGMOM = 12*0 12*1
NPAR = 4
PREC = accurate
SIGMA = 0.1
SYSTEM = default"""
    incar_str = _get_str_of_write_incar(toml_str)
    assert incar_str == ref_str


def _get_str_of_write_incar(toml_str):
    toml_dict = tomli.loads(toml_str)
    with tempfile.TemporaryFile() as fp:
        VaspIncar.write(fp, toml_dict)
        fp.seek(0)
        incar_str = fp.read().decode("utf-8")
    return incar_str


def test_VaspIncar_expand():
    """Test to handle asterisk in INCAR value.

    "3*1 0 0 0 3*2" -> [1., 1., 1., 0., 0., 0., 2., 2., 2.]

    """
    vals = VaspIncar().expand("3*1 0 0 0 3*2")
    np.testing.assert_allclose(vals, [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0])


def test_NGX_calculator():
    """Test of CutoffToFFTMesh._is_factorized_by_2357.

    The values in fftchk.dat were obtained from the Fortran code for reference.
    First line of fftchk.dat is dummy for simple indexing.

    """
    ref_vasp = np.loadtxt(cwd / "fftchk.dat.bz2", dtype=int)
    for n in range(1, ref_vasp.shape[0]):
        n1 = n
        while not CutoffToFFTMesh._is_factorized_by_2357(n1):
            n1 += 1
        assert (n, n1) == tuple(ref_vasp[n])


def test_VaspPotcar():
    """Test VaspPotcar.

    Currently only ENMAX is tested.

    """
    potcar_lines = [
        "   TITEL  = PAW_PBE X 23Apr2024",
        "   ENMAX  =   12.345; ENMIN  =   54.321 eV",
        "   ENMAX  =   11.111; ENMIN  =   22.222 eV",
    ]
    vp = VaspPotcar(io.StringIO("\n".join(potcar_lines)))
    np.testing.assert_allclose([12.345, 11.111], vp.enmax)
    assert vp.titel[0] == "PAW_PBE X 23Apr2024"
