"""velph command line tool / velph-phonopy."""

from __future__ import annotations

import pathlib

import click
import tomli

from phelel.velph.cli import cmd_root
from phelel.velph.cli.phonopy.generate import write_supercell_input_files
from phelel.velph.cli.phonopy.init import run_init


@cmd_root.group("phonopy")
@click.help_option("-h", "--help")
def cmd_phonopy():
    """Choose phonopy options."""
    pass


#
# velph phonopy init
#
@cmd_phonopy.command("init")
@click.argument(
    "toml_filename",
    nargs=1,
    type=click.Path(),
    default="velph.toml",
)
@click.help_option("-h", "--help")
def cmd_init(toml_filename: str):
    """Generate displacements and write phonopy_disp.yaml."""
    with open(toml_filename, "rb") as f:
        toml_dict = tomli.load(f)

    if "phonopy" not in toml_dict:
        click.echo(f'[phonopy] section not found in "{toml_filename}" file.', err=True)
        return

    ph = run_init(toml_dict)

    phonopy_yaml_filename = pathlib.Path("phonopy/phonopy_disp.yaml")
    phonopy_yaml_filename.parent.mkdir(parents=True, exist_ok=True)
    ph.save(phonopy_yaml_filename)

    click.echo(f'"{phonopy_yaml_filename}" was generated. ')
    click.echo('VASP input files will be generated by "velph phonopy generate".')


#
# velph phonopy generate
#
@cmd_phonopy.command("generate")
@click.argument(
    "toml_filename",
    nargs=1,
    type=click.Path(),
    default="velph.toml",
)
@click.help_option("-h", "--help")
def cmd_generate(toml_filename: str):
    """Generate phonopy input files."""
    yaml_filename = "phonopy/phonopy_disp.yaml"
    if not pathlib.Path("POTCAR").exists():
        click.echo('"POTCAR" not found in current directory.')

    write_supercell_input_files(
        pathlib.Path(toml_filename), pathlib.Path(yaml_filename)
    )
