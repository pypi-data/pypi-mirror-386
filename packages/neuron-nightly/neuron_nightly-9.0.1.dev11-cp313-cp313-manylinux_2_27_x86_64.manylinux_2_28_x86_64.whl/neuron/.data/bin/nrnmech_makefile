
# Arguments:
# MODOBJFILES
# UserLDFLAGS
# UserINCFLAGS
# LinkCoreNEURON
# UserNMODLBIN
# UserNMODLFLAGS
# Rules to build MODOBJFILES from mod files are found in makemod2c_inc

# Mechanisms version are by default 0.0, but should be overriden
MECH_NAME =
MECH_VERSION = 0.0
MODS_PATH = .
# in the x86_64 folder
OUTPUT = .
DESTDIR =
UserINCFLAGS =
UserLDFLAGS =
UserNMODLBIN =

# install dirs
bindir := ${ROOT}/bin
libdir := ${ROOT}/lib
incdir := ${ROOT}/include
datadir:= ${ROOT}/share/nrn
datadir_lib := ${ROOT}/share/nrn/lib

# For a static build with Interviews need -linterviews -lreadline
IV_LINK =
READLINE_LINK =
ifeq ("ONOFF", "OFFOFF")
    ifeq ("ON", "ON")
        IV_LINK = -linterviews
    endif
    ifeq ("", "TRUE")
        READLINE_LINK = -lreadline
    endif
endif

# Additional variables set in CMAKE usable here
# - @NRN_COMPILE_DEFS
# - @NRN_LINK_DEFS
LDFLAGS = $(IV_LINK) $(READLINE_LINK) $(LINKFLAGS) $(UserLDFLAGS) 

NRNLIB_FLAGS = -L$(libdir) -lnrniv
NRNLIB_RPATH_FLAGS = -Wl,-rpath,$(libdir)

OS_NAME := $(shell uname)
_cm =,

# We rebuild the include dirs since a lot of stuff changes place
INCLUDES = -I. $(INCFLAGS) $(UserINCFLAGS) -I$(incdir)
ifeq (OFF, ON)
  INCLUDES += $(if /usr/include/openmpi-x86_64, -I$(subst ;, -I,/usr/include/openmpi-x86_64),)
endif

# CXX is always defined. If the definition comes from default change it
ifeq ($(origin CXX), default)
    CXX = /opt/rh/gcc-toolset-10/root/usr/bin/g++
endif
CXXFLAGS = -O2    -std=c++17
CXXCOMPILE = $(CXX) $(CXXFLAGS) -DUSE_PYTHON -DNRN_ENABLE_THREADS -DCORENRN_BUILD=0 -DNRNPYTHON_DYNAMICLOAD -DMPI_NO_CPPBIND=1 -DOMPI_SKIP_MPICXX=1 -DMPICH_SKIP_MPICXX=1 -DHAVE_CONFIG_H 
ifeq ($(origin CC), default)
    CC = /opt/rh/gcc-toolset-10/root/usr/bin/gcc
endif
CFLAGS = -O2    -std=c17
CCOMPILE = $(CC) $(CFLAGS) -DUSE_PYTHON -DNRN_ENABLE_THREADS -DCORENRN_BUILD=0 -DNRNPYTHON_DYNAMICLOAD -DMPI_NO_CPPBIND=1 -DOMPI_SKIP_MPICXX=1 -DMPICH_SKIP_MPICXX=1 -DHAVE_CONFIG_H 

CXX_LINK_EXE = $(CXX) $(CXXFLAGS)  -Wl,--unresolved-symbols=ignore-all 
CXX_LINK_SHARED = $(CXX) $(CXXFLAGS) -shared -fPIC  

ifeq ($(UserNMODLBIN), )
NOCMODL = $(bindir)/nocmodl
else
NOCMODL = $(UserNMODLBIN)
endif
NRNUNITS = $(datadir_lib)/nrnunits.lib

# File path config (internal)
MODC_DIR = .
OBJS_DIR = .
mod_objs   = $(MODOBJFILES)

mod_func_o = $(OBJS_DIR)/mod_func.o
mod_func_cpp = $(MODC_DIR)/mod_func.cpp

special  = $(OUTPUT)/special
LIB_SUFFIX_ = $(if $(MECH_NAME),_$(MECH_NAME),)
mech_libname = nrnmech

# In case of static library we need to link NRNLIB_FLAGS twice to avoid undefined
# symbols from circular dependencies. But for shared library we don't do it to avoid
# pthread linking with wheels.
ifeq (ON, ON)
    mech_lib = $(OUTPUT)/lib$(mech_libname).so
    mech_lib_type = mech_lib_shared
    extra_lib_link =
else
    mech_lib = $(OUTPUT)/lib$(mech_libname).a
    mech_lib_type = mech_lib_static
    extra_lib_link = $(NRNLIB_FLAGS)
endif

# add coreneuron flags
ifeq ($(LinkCoreNEURON), true)
    # -L$(libdir) is needed to find libcoreneuron-cuda.so in GPU builds
    EXTRA_LDFLAGS = -L$(libdir)  -lcorenrnmech  -lgomp -ldl
endif

# If no DESTDIR (we are probably just building) we use $ORIGIN (@loader_path in OSX)
_ORIGIN := $(if $(filter Darwin,$(OS_NAME)),@loader_path,$$ORIGIN)
_SONAME := -Wl,$(if $(filter Darwin,$(OS_NAME)),-install_name${_cm}@rpath/,-soname${_cm})$(notdir ${mech_lib})
DESTDIR_RPATH = $(if $(DESTDIR),$(DESTDIR)/lib,$(_ORIGIN))

C_RESET := \033[0m
C_GREEN := \033[32m


# ======== MAIN BUILD RULES ============

# Take the main and link with nrnmech.
# RPATH is set for DESTDIR_RPATH and coreneuron lib
special: $(mech_lib) $(datadir)/nrnmain.cpp
	@printf " => $(C_GREEN)LINKING$(C_RESET) executable \"${PWD}/$(special)\" LDFLAGS are: $(LDFLAGS)\n"
	$(CXX_LINK_EXE) -I $(incdir) -I $(incdir)/nrncvode -DAUTO_DLOPEN_NRNMECH=0 $(datadir)/nrnmain.cpp -o $(special) \
	  -L$(OBJS_DIR) -l$(mech_libname) $(NRNLIB_FLAGS) -l$(mech_libname) $(extra_lib_link) -Wl,-rpath,'$(DESTDIR_RPATH)' -Wl,-rpath,$(libdir) $(LDFLAGS) $(EXTRA_LDFLAGS)

$(mech_lib): $(mech_lib_type)

mech_lib_shared: mod_func.o $(mod_objs) build_always
	@printf " => $(C_GREEN)LINKING$(C_RESET) shared library \"${PWD}/$(mech_lib)\"\n"
	# .tmp output avoids nvc++ error: input file 'libnrnmech.so' is the same as output file
	$(CXX_LINK_SHARED) -I $(incdir) -o ${mech_lib}.tmp ${_SONAME} \
	  $(mod_func_o) $(mod_objs) $(NRNLIB_FLAGS) $(NRNLIB_RPATH_FLAGS) $(LDFLAGS) \
	  && mv ${mech_lib}.tmp ${mech_lib}
 

mech_lib_static: mod_func.o $(mod_objs) build_always
	@printf " => $(C_GREEN)LINKING$(C_RESET) static library \"${PWD}/$(mech_lib)\"\n"
	ar cq ${mech_lib} $(mod_func_o) $(mod_objs) $(cobjs);

mod_func.o: mod_func.cpp
	@printf " -> $(C_GREEN)Compiling$(C_RESET) $<\n"
	$(CXXCOMPILE) $(INCLUDES) -fPIC -c $< -o $@

# Generic build c->o. Need PIC for shared lib
$(OBJS_DIR)/%.o: $(MODC_DIR)/%.c | $(OBJS_DIR)
	@printf " -> $(C_GREEN)Compiling$(C_RESET) $<\n"
	$(CXXCOMPILE) $(INCLUDES) -fPIC -c $< -o $@


include makemod2c_inc

# If .mod doesnt exist attempt from previously built opt mods in shared/
$(MODC_DIR)/%.cpp: $(datadir_lib)/%.cpp | $(MODC_DIR)
	ln -s $< $@

install: special $(mech_lib)
	install -d $(DESTDIR)/bin $(DESTDIR)/lib
	install $(mech_lib) $(DESTDIR)/lib
	install $(special) $(DESTDIR)/bin

libnrnmech.la: $(mech_lib)

# == INIT ==
$(MODC_DIR):
	(cd .. ; mkdir -p $(MODC_DIR))
#$(OBJS_DIR):
#	mkdir -p $(OBJS_DIR)

.PHONY: build_always

$(VERBOSE).SILENT:
