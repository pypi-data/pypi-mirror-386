"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .logintype import LoginType
from pydantic import model_serializer
from syllable_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class UserCreateRequestTypedDict(TypedDict):
    r"""Request model to create a user."""

    email: str
    r"""Email address of the user"""
    role_id: int
    r"""ID of the role assigned to the user"""
    first_name: NotRequired[Nullable[str]]
    r"""First name of the user"""
    last_name: NotRequired[Nullable[str]]
    r"""Last name of the user"""
    login_type: NotRequired[Nullable[LoginType]]
    r"""The type of login to use for the user. If not provided, defaults to google for @gmail.com email addresses, and username and password otherwise."""
    skip_auth: NotRequired[bool]
    r"""Whether to skip authentication for the user."""


class UserCreateRequest(BaseModel):
    r"""Request model to create a user."""

    email: str
    r"""Email address of the user"""

    role_id: int
    r"""ID of the role assigned to the user"""

    first_name: OptionalNullable[str] = UNSET
    r"""First name of the user"""

    last_name: OptionalNullable[str] = UNSET
    r"""Last name of the user"""

    login_type: OptionalNullable[LoginType] = UNSET
    r"""The type of login to use for the user. If not provided, defaults to google for @gmail.com email addresses, and username and password otherwise."""

    skip_auth: Optional[bool] = False
    r"""Whether to skip authentication for the user."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["first_name", "last_name", "login_type", "skip_auth"]
        nullable_fields = ["first_name", "last_name", "login_type"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
