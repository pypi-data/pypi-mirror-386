{"version":3,"file":"AboutPanel-WJ9X3DIE.js","sources":["../../src/components/common/DeviceInfo.vue","../../src/components/common/SystemStatsPanel.vue","../../src/stores/aboutPanelStore.ts","../../src/components/dialog/content/setting/AboutPanel.vue"],"sourcesContent":["<template>\n  <div class=\"grid grid-cols-2 gap-2\">\n    <template v-for=\"col in deviceColumns\" :key=\"col.field\">\n      <div class=\"font-medium\">\n        {{ col.header }}\n      </div>\n      <div>\n        {{ formatValue(props.device[col.field], col.field) }}\n      </div>\n    </template>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { DeviceStats } from '@/schemas/apiSchema'\nimport { formatSize } from '@/utils/formatUtil'\n\nconst props = defineProps<{\n  device: DeviceStats\n}>()\n\nconst deviceColumns: { field: keyof DeviceStats; header: string }[] = [\n  { field: 'name', header: 'Name' },\n  { field: 'type', header: 'Type' },\n  { field: 'vram_total', header: 'VRAM Total' },\n  { field: 'vram_free', header: 'VRAM Free' },\n  { field: 'torch_vram_total', header: 'Torch VRAM Total' },\n  { field: 'torch_vram_free', header: 'Torch VRAM Free' }\n]\n\nconst formatValue = (value: any, field: string) => {\n  if (\n    ['vram_total', 'vram_free', 'torch_vram_total', 'torch_vram_free'].includes(\n      field\n    )\n  ) {\n    return formatSize(value)\n  }\n  return value\n}\n</script>\n","<template>\n  <div class=\"system-stats\">\n    <div class=\"mb-6\">\n      <h2 class=\"mb-4 text-2xl font-semibold\">\n        {{ $t('g.systemInfo') }}\n      </h2>\n      <div class=\"grid grid-cols-2 gap-2\">\n        <template v-for=\"col in systemColumns\" :key=\"col.field\">\n          <div class=\"font-medium\">\n            {{ col.header }}\n          </div>\n          <div>{{ formatValue(systemInfo[col.field], col.field) }}</div>\n        </template>\n      </div>\n    </div>\n\n    <Divider />\n\n    <div>\n      <h2 class=\"mb-4 text-2xl font-semibold\">\n        {{ $t('g.devices') }}\n      </h2>\n      <TabView v-if=\"props.stats.devices.length > 1\">\n        <TabPanel\n          v-for=\"device in props.stats.devices\"\n          :key=\"device.index\"\n          :header=\"device.name\"\n          :value=\"device.index\"\n        >\n          <DeviceInfo :device=\"device\" />\n        </TabPanel>\n      </TabView>\n      <DeviceInfo v-else :device=\"props.stats.devices[0]\" />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport Divider from 'primevue/divider'\nimport TabPanel from 'primevue/tabpanel'\nimport TabView from 'primevue/tabview'\nimport { computed } from 'vue'\n\nimport DeviceInfo from '@/components/common/DeviceInfo.vue'\nimport type { SystemStats } from '@/schemas/apiSchema'\nimport { formatSize } from '@/utils/formatUtil'\n\nconst props = defineProps<{\n  stats: SystemStats\n}>()\n\nconst systemInfo = computed(() => ({\n  ...props.stats.system,\n  argv: props.stats.system.argv.join(' ')\n}))\n\nconst systemColumns: { field: keyof SystemStats['system']; header: string }[] =\n  [\n    { field: 'os', header: 'OS' },\n    { field: 'python_version', header: 'Python Version' },\n    { field: 'embedded_python', header: 'Embedded Python' },\n    { field: 'pytorch_version', header: 'Pytorch Version' },\n    { field: 'argv', header: 'Arguments' },\n    { field: 'ram_total', header: 'RAM Total' },\n    { field: 'ram_free', header: 'RAM Free' }\n  ]\n\nconst formatValue = (value: any, field: string) => {\n  if (['ram_total', 'ram_free'].includes(field)) {\n    return formatSize(value)\n  }\n  return value\n}\n</script>\n","import { defineStore } from 'pinia'\nimport { computed } from 'vue'\n\nimport type { AboutPageBadge } from '@/types/comfy'\nimport { electronAPI, isElectron } from '@/utils/envUtil'\n\nimport { useExtensionStore } from './extensionStore'\nimport { useSystemStatsStore } from './systemStatsStore'\n\nexport const useAboutPanelStore = defineStore('aboutPanel', () => {\n  const frontendVersion = __COMFYUI_FRONTEND_VERSION__\n  const extensionStore = useExtensionStore()\n  const systemStatsStore = useSystemStatsStore()\n  const coreVersion = computed(\n    () => systemStatsStore?.systemStats?.system?.comfyui_version ?? ''\n  )\n\n  const coreBadges = computed<AboutPageBadge[]>(() => [\n    // In electron, the ComfyUI is packaged without the git repo,\n    // so the python server's API doesn't have the version info.\n    {\n      label: `ComfyUI ${\n        isElectron()\n          ? 'v' + electronAPI().getComfyUIVersion()\n          : coreVersion.value\n      }`,\n      url: 'https://github.com/comfyanonymous/ComfyUI',\n      icon: 'pi pi-github'\n    },\n    {\n      label: `ComfyUI_frontend v${frontendVersion}`,\n      url: 'https://github.com/Comfy-Org/ComfyUI_frontend',\n      icon: 'pi pi-github'\n    },\n    {\n      label: 'Discord',\n      url: 'https://www.comfy.org/discord',\n      icon: 'pi pi-discord'\n    },\n    { label: 'ComfyOrg', url: 'https://www.comfy.org/', icon: 'pi pi-globe' }\n  ])\n\n  const allBadges = computed<AboutPageBadge[]>(() => [\n    ...coreBadges.value,\n    ...extensionStore.extensions.flatMap((e) => e.aboutPageBadges ?? [])\n  ])\n\n  return {\n    badges: allBadges\n  }\n})\n","<template>\n  <PanelTemplate value=\"About\" class=\"about-container\">\n    <h2 class=\"mb-2 text-2xl font-bold\">\n      {{ $t('g.about') }}\n    </h2>\n    <div class=\"space-y-2\">\n      <a\n        v-for=\"badge in aboutPanelStore.badges\"\n        :key=\"badge.url\"\n        :href=\"badge.url\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        class=\"about-badge inline-flex items-center no-underline\"\n        :title=\"badge.url\"\n      >\n        <Tag class=\"mr-2\">\n          <template #icon>\n            <i :class=\"[badge.icon, 'mr-2 text-xl']\" />\n          </template>\n          {{ badge.label }}\n        </Tag>\n      </a>\n    </div>\n\n    <Divider />\n\n    <SystemStatsPanel\n      v-if=\"systemStatsStore.systemStats\"\n      :stats=\"systemStatsStore.systemStats\"\n    />\n  </PanelTemplate>\n</template>\n\n<script setup lang=\"ts\">\nimport Divider from 'primevue/divider'\nimport Tag from 'primevue/tag'\n\nimport SystemStatsPanel from '@/components/common/SystemStatsPanel.vue'\nimport { useAboutPanelStore } from '@/stores/aboutPanelStore'\nimport { useSystemStatsStore } from '@/stores/systemStatsStore'\n\nimport PanelTemplate from './PanelTemplate.vue'\n\nconst systemStatsStore = useSystemStatsStore()\nconst aboutPanelStore = useAboutPanelStore()\n</script>\n"],"names":["props","__props","deviceColumns","formatValue","__name","value","field","formatSize","systemInfo","computed","systemColumns","useAboutPanelStore","defineStore","frontendVersion","extensionStore","useExtensionStore","systemStatsStore","useSystemStatsStore","coreVersion","coreBadges","isElectron","electronAPI","e","aboutPanelStore"],"mappings":"q2EAiBA,MAAMA,EAAQC,EAIRC,EAAgE,CACpE,CAAE,MAAO,OAAQ,OAAQ,MAAO,EAChC,CAAE,MAAO,OAAQ,OAAQ,MAAO,EAChC,CAAE,MAAO,aAAc,OAAQ,YAAa,EAC5C,CAAE,MAAO,YAAa,OAAQ,WAAY,EAC1C,CAAE,MAAO,mBAAoB,OAAQ,kBAAmB,EACxD,CAAE,MAAO,kBAAmB,OAAQ,iBAAkB,CAAA,EAGlDC,EAAcC,EAAA,CAACC,EAAYC,IAE7B,CAAC,aAAc,YAAa,mBAAoB,iBAAiB,EAAE,SACjEA,CAAA,EAGKC,EAAWF,CAAK,EAElBA,EARW,kaCiBpB,MAAML,EAAQC,EAIRO,EAAaC,EAAS,KAAO,CACjC,GAAGT,EAAM,MAAM,OACf,KAAMA,EAAM,MAAM,OAAO,KAAK,KAAK,GAAG,CACtC,EAAA,EAEIU,EACJ,CACE,CAAE,MAAO,KAAM,OAAQ,IAAK,EAC5B,CAAE,MAAO,iBAAkB,OAAQ,gBAAiB,EACpD,CAAE,MAAO,kBAAmB,OAAQ,iBAAkB,EACtD,CAAE,MAAO,kBAAmB,OAAQ,iBAAkB,EACtD,CAAE,MAAO,OAAQ,OAAQ,WAAY,EACrC,CAAE,MAAO,YAAa,OAAQ,WAAY,EAC1C,CAAE,MAAO,WAAY,OAAQ,UAAW,CAAA,EAGtCP,EAAcC,EAAA,CAACC,EAAYC,IAC3B,CAAC,YAAa,UAAU,EAAE,SAASA,CAAK,EACnCC,EAAWF,CAAK,EAElBA,EAJW,omBC1DPM,EAAqBC,EAAY,aAAc,IAAM,CAChE,MAAMC,EAAkB,SAClBC,EAAiBC,IACjBC,EAAmBC,IACnBC,EAAcT,EAClB,IAAMO,GAAkB,aAAa,QAAQ,iBAAmB,EAAA,EAG5DG,EAAaV,EAA2B,IAAM,CAGlD,CACE,MAAO,WACLW,EAAA,EACI,IAAMC,EAAc,EAAA,kBACpB,EAAAH,EAAY,KAClB,GACA,IAAK,4CACL,KAAM,cACR,EACA,CACE,MAAO,qBAAqBL,CAAe,GAC3C,IAAK,gDACL,KAAM,cACR,EACA,CACE,MAAO,UACP,IAAK,gCACL,KAAM,eACR,EACA,CAAE,MAAO,WAAY,IAAK,yBAA0B,KAAM,aAAc,CAAA,CACzE,EAOM,MAAA,CACL,OANgBJ,EAA2B,IAAM,CACjD,GAAGU,EAAW,MACd,GAAGL,EAAe,WAAW,QAASQ,GAAMA,EAAE,iBAAmB,EAAE,CAAA,CACpE,CAGS,CAEZ,CAAC,kHCPD,MAAMN,EAAmBC,IACnBM,EAAkBZ"}