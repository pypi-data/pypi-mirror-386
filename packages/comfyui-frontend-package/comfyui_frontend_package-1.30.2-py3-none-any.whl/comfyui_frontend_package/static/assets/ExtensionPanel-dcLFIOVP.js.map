{"version":3,"file":"ExtensionPanel-dcLFIOVP.js","sources":["../../src/platform/settings/components/ExtensionPanel.vue"],"sourcesContent":["<template>\n  <PanelTemplate value=\"Extension\" class=\"extension-panel\">\n    <template #header>\n      <SearchBox\n        v-model=\"filters['global'].value\"\n        :placeholder=\"$t('g.searchExtensions') + '...'\"\n      />\n      <Message\n        v-if=\"hasChanges\"\n        severity=\"info\"\n        pt:text=\"w-full\"\n        class=\"max-h-96 overflow-y-auto\"\n      >\n        <ul>\n          <li v-for=\"ext in changedExtensions\" :key=\"ext.name\">\n            <span>\n              {{ extensionStore.isExtensionEnabled(ext.name) ? '[-]' : '[+]' }}\n            </span>\n            {{ ext.name }}\n          </li>\n        </ul>\n        <div class=\"flex justify-end\">\n          <Button\n            :label=\"$t('g.reloadToApplyChanges')\"\n            outlined\n            severity=\"danger\"\n            @click=\"applyChanges\"\n          />\n        </div>\n      </Message>\n    </template>\n    <div class=\"mb-3 flex gap-2\">\n      <SelectButton v-model=\"filterType\" :options=\"filterTypes\" />\n    </div>\n    <DataTable\n      v-model:selection=\"selectedExtensions\"\n      :value=\"filteredExtensions\"\n      striped-rows\n      size=\"small\"\n      :filters=\"filters\"\n      selection-mode=\"multiple\"\n      data-key=\"name\"\n    >\n      <Column selection-mode=\"multiple\" :frozen=\"true\" style=\"width: 3rem\" />\n      <Column :header=\"$t('g.extensionName')\" sortable field=\"name\">\n        <template #body=\"slotProps\">\n          {{ slotProps.data.name }}\n          <Tag\n            v-if=\"extensionStore.isCoreExtension(slotProps.data.name)\"\n            value=\"Core\"\n          />\n          <Tag v-else value=\"Custom\" severity=\"info\" />\n        </template>\n      </Column>\n      <Column\n        :pt=\"{\n          headerCell: 'flex items-center justify-end',\n          bodyCell: 'flex items-center justify-end'\n        }\"\n      >\n        <template #header>\n          <Button\n            icon=\"pi pi-ellipsis-h\"\n            text\n            severity=\"secondary\"\n            @click=\"menu?.show($event)\"\n          />\n          <ContextMenu ref=\"menu\" :model=\"contextMenuItems\" />\n        </template>\n        <template #body=\"slotProps\">\n          <ToggleSwitch\n            v-model=\"editingEnabledExtensions[slotProps.data.name]\"\n            :disabled=\"extensionStore.isExtensionReadOnly(slotProps.data.name)\"\n            @change=\"updateExtensionStatus\"\n          />\n        </template>\n      </Column>\n    </DataTable>\n  </PanelTemplate>\n</template>\n\n<script setup lang=\"ts\">\nimport { FilterMatchMode } from '@primevue/core/api'\nimport Button from 'primevue/button'\nimport Column from 'primevue/column'\nimport ContextMenu from 'primevue/contextmenu'\nimport DataTable from 'primevue/datatable'\nimport Message from 'primevue/message'\nimport SelectButton from 'primevue/selectbutton'\nimport Tag from 'primevue/tag'\nimport ToggleSwitch from 'primevue/toggleswitch'\nimport { computed, onMounted, ref } from 'vue'\n\nimport SearchBox from '@/components/common/SearchBox.vue'\nimport PanelTemplate from '@/components/dialog/content/setting/PanelTemplate.vue'\nimport { useSettingStore } from '@/platform/settings/settingStore'\nimport { useExtensionStore } from '@/stores/extensionStore'\n\nconst filterTypes = ['All', 'Core', 'Custom']\nconst filterType = ref('All')\nconst selectedExtensions = ref<Array<any>>([])\n\nconst filters = ref({\n  global: { value: '', matchMode: FilterMatchMode.CONTAINS }\n})\n\nconst extensionStore = useExtensionStore()\nconst settingStore = useSettingStore()\n\nconst editingEnabledExtensions = ref<Record<string, boolean>>({})\n\nconst filteredExtensions = computed(() => {\n  const extensions = extensionStore.extensions\n  switch (filterType.value) {\n    case 'Core':\n      return extensions.filter((ext) =>\n        extensionStore.isCoreExtension(ext.name)\n      )\n    case 'Custom':\n      return extensions.filter(\n        (ext) => !extensionStore.isCoreExtension(ext.name)\n      )\n    default:\n      return extensions\n  }\n})\n\nonMounted(() => {\n  extensionStore.extensions.forEach((ext) => {\n    editingEnabledExtensions.value[ext.name] =\n      extensionStore.isExtensionEnabled(ext.name)\n  })\n})\n\nconst changedExtensions = computed(() => {\n  return extensionStore.extensions.filter(\n    (ext) =>\n      editingEnabledExtensions.value[ext.name] !==\n      extensionStore.isExtensionEnabled(ext.name)\n  )\n})\n\nconst hasChanges = computed(() => {\n  return changedExtensions.value.length > 0\n})\n\nconst updateExtensionStatus = async () => {\n  const editingDisabledExtensionNames = Object.entries(\n    editingEnabledExtensions.value\n  )\n    .filter(([_, enabled]) => !enabled)\n    .map(([name]) => name)\n\n  await settingStore.set('Comfy.Extension.Disabled', [\n    ...extensionStore.inactiveDisabledExtensionNames,\n    ...editingDisabledExtensionNames\n  ])\n}\n\nconst enableAllExtensions = async () => {\n  extensionStore.extensions.forEach((ext) => {\n    if (extensionStore.isExtensionReadOnly(ext.name)) return\n\n    editingEnabledExtensions.value[ext.name] = true\n  })\n  await updateExtensionStatus()\n}\n\nconst disableAllExtensions = async () => {\n  extensionStore.extensions.forEach((ext) => {\n    if (extensionStore.isExtensionReadOnly(ext.name)) return\n\n    editingEnabledExtensions.value[ext.name] = false\n  })\n  await updateExtensionStatus()\n}\n\nconst disableThirdPartyExtensions = async () => {\n  extensionStore.extensions.forEach((ext) => {\n    if (extensionStore.isCoreExtension(ext.name)) return\n\n    editingEnabledExtensions.value[ext.name] = false\n  })\n  await updateExtensionStatus()\n}\n\nconst applyChanges = () => {\n  // Refresh the page to apply changes\n  window.location.reload()\n}\n\nconst menu = ref<InstanceType<typeof ContextMenu>>()\nconst contextMenuItems = [\n  {\n    label: 'Enable Selected',\n    icon: 'pi pi-check',\n    command: async () => {\n      selectedExtensions.value.forEach((ext) => {\n        if (!extensionStore.isExtensionReadOnly(ext.name)) {\n          editingEnabledExtensions.value[ext.name] = true\n        }\n      })\n      await updateExtensionStatus()\n    }\n  },\n  {\n    label: 'Disable Selected',\n    icon: 'pi pi-times',\n    command: async () => {\n      selectedExtensions.value.forEach((ext) => {\n        if (!extensionStore.isExtensionReadOnly(ext.name)) {\n          editingEnabledExtensions.value[ext.name] = false\n        }\n      })\n      await updateExtensionStatus()\n    }\n  },\n  {\n    separator: true\n  },\n  {\n    label: 'Enable All',\n    icon: 'pi pi-check',\n    command: enableAllExtensions\n  },\n  {\n    label: 'Disable All',\n    icon: 'pi pi-times',\n    command: disableAllExtensions\n  },\n  {\n    label: 'Disable 3rd Party',\n    icon: 'pi pi-times',\n    command: disableThirdPartyExtensions,\n    disabled: !extensionStore.hasThirdPartyExtensions\n  }\n]\n</script>\n"],"names":["filterTypes","filterType","ref","selectedExtensions","filters","FilterMatchMode","extensionStore","useExtensionStore","settingStore","useSettingStore","editingEnabledExtensions","filteredExtensions","computed","extensions","ext","onMounted","changedExtensions","hasChanges","updateExtensionStatus","__name","editingDisabledExtensionNames","_","enabled","name","enableAllExtensions","disableAllExtensions","disableThirdPartyExtensions","applyChanges","menu","contextMenuItems"],"mappings":"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"}