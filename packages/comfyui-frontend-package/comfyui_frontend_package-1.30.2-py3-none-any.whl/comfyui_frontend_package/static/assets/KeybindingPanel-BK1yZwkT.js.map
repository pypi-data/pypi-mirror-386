{"version":3,"file":"KeybindingPanel-BK1yZwkT.js","sources":["../../src/components/dialog/content/setting/keybinding/KeyComboDisplay.vue","../../src/components/dialog/content/setting/KeybindingPanel.vue"],"sourcesContent":["<template>\n  <span>\n    <template v-for=\"(sequence, index) in keySequences\" :key=\"index\">\n      <Tag :severity=\"isModified ? 'info' : 'secondary'\">\n        {{ sequence }}\n      </Tag>\n      <span v-if=\"index < keySequences.length - 1\" class=\"px-2\">+</span>\n    </template>\n  </span>\n</template>\n\n<script setup lang=\"ts\">\nimport Tag from 'primevue/tag'\nimport { computed } from 'vue'\n\nimport type { KeyComboImpl } from '@/stores/keybindingStore'\n\nconst { keyCombo, isModified = false } = defineProps<{\n  keyCombo: KeyComboImpl\n  isModified?: boolean\n}>()\n\nconst keySequences = computed(() => keyCombo.getKeySequences())\n</script>\n","<template>\n  <PanelTemplate value=\"Keybinding\" class=\"keybinding-panel\">\n    <template #header>\n      <SearchBox\n        v-model=\"filters['global'].value\"\n        :placeholder=\"$t('g.searchKeybindings') + '...'\"\n      />\n    </template>\n\n    <DataTable\n      v-model:selection=\"selectedCommandData\"\n      :value=\"commandsData\"\n      :global-filter-fields=\"['id', 'label']\"\n      :filters=\"filters\"\n      selection-mode=\"single\"\n      striped-rows\n      :pt=\"{\n        header: 'px-0'\n      }\"\n      @row-dblclick=\"editKeybinding($event.data)\"\n    >\n      <Column field=\"actions\" header=\"\">\n        <template #body=\"slotProps\">\n          <div class=\"actions invisible flex flex-row\">\n            <Button\n              icon=\"pi pi-pencil\"\n              class=\"p-button-text\"\n              @click=\"editKeybinding(slotProps.data)\"\n            />\n            <Button\n              icon=\"pi pi-replay\"\n              class=\"p-button-text p-button-warn\"\n              :disabled=\"\n                !keybindingStore.isCommandKeybindingModified(slotProps.data.id)\n              \"\n              @click=\"resetKeybinding(slotProps.data)\"\n            />\n            <Button\n              icon=\"pi pi-trash\"\n              class=\"p-button-text p-button-danger\"\n              :disabled=\"!slotProps.data.keybinding\"\n              @click=\"removeKeybinding(slotProps.data)\"\n            />\n          </div>\n        </template>\n      </Column>\n      <Column\n        field=\"id\"\n        :header=\"$t('g.command')\"\n        sortable\n        class=\"max-w-64 2xl:max-w-full\"\n      >\n        <template #body=\"slotProps\">\n          <div class=\"truncate\" :title=\"slotProps.data.id\">\n            {{ slotProps.data.label }}\n          </div>\n        </template>\n      </Column>\n      <Column field=\"keybinding\" :header=\"$t('g.keybinding')\">\n        <template #body=\"slotProps\">\n          <KeyComboDisplay\n            v-if=\"slotProps.data.keybinding\"\n            :key-combo=\"slotProps.data.keybinding.combo\"\n            :is-modified=\"\n              keybindingStore.isCommandKeybindingModified(slotProps.data.id)\n            \"\n          />\n          <span v-else>-</span>\n        </template>\n      </Column>\n      <Column field=\"source\" :header=\"$t('g.source')\">\n        <template #body=\"slotProps\">\n          <span class=\"overflow-hidden text-ellipsis\">{{\n            slotProps.data.source || '-'\n          }}</span>\n        </template>\n      </Column>\n    </DataTable>\n\n    <Dialog\n      v-model:visible=\"editDialogVisible\"\n      class=\"min-w-96\"\n      modal\n      :header=\"currentEditingCommand?.label\"\n      @hide=\"cancelEdit\"\n    >\n      <div>\n        <InputText\n          ref=\"keybindingInput\"\n          class=\"mb-2 text-center\"\n          :model-value=\"newBindingKeyCombo?.toString() ?? ''\"\n          :placeholder=\"$t('g.pressKeysForNewBinding')\"\n          autocomplete=\"off\"\n          fluid\n          @keydown.stop.prevent=\"captureKeybinding\"\n        />\n        <Message v-if=\"existingKeybindingOnCombo\" severity=\"warn\">\n          {{ $t('g.keybindingAlreadyExists') }}\n          <Tag\n            severity=\"secondary\"\n            :value=\"existingKeybindingOnCombo.commandId\"\n          />\n        </Message>\n      </div>\n      <template #footer>\n        <Button\n          :label=\"existingKeybindingOnCombo ? 'Overwrite' : 'Save'\"\n          :icon=\"existingKeybindingOnCombo ? 'pi pi-pencil' : 'pi pi-check'\"\n          :severity=\"existingKeybindingOnCombo ? 'warn' : undefined\"\n          autofocus\n          @click=\"saveKeybinding\"\n        />\n      </template>\n    </Dialog>\n    <Button\n      v-tooltip=\"$t('g.resetAllKeybindingsTooltip')\"\n      class=\"mt-4\"\n      :label=\"$t('g.resetAll')\"\n      icon=\"pi pi-replay\"\n      severity=\"danger\"\n      fluid\n      text\n      @click=\"resetAllKeybindings\"\n    />\n  </PanelTemplate>\n</template>\n\n<script setup lang=\"ts\">\nimport { FilterMatchMode } from '@primevue/core/api'\nimport Button from 'primevue/button'\nimport Column from 'primevue/column'\nimport DataTable from 'primevue/datatable'\nimport Dialog from 'primevue/dialog'\nimport InputText from 'primevue/inputtext'\nimport Message from 'primevue/message'\nimport Tag from 'primevue/tag'\nimport { useToast } from 'primevue/usetoast'\nimport { computed, ref, watchEffect } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nimport SearchBox from '@/components/common/SearchBox.vue'\nimport { useKeybindingService } from '@/services/keybindingService'\nimport { useCommandStore } from '@/stores/commandStore'\nimport {\n  KeyComboImpl,\n  KeybindingImpl,\n  useKeybindingStore\n} from '@/stores/keybindingStore'\nimport { normalizeI18nKey } from '@/utils/formatUtil'\n\nimport PanelTemplate from './PanelTemplate.vue'\nimport KeyComboDisplay from './keybinding/KeyComboDisplay.vue'\n\nconst filters = ref({\n  global: { value: '', matchMode: FilterMatchMode.CONTAINS }\n})\n\nconst keybindingStore = useKeybindingStore()\nconst keybindingService = useKeybindingService()\nconst commandStore = useCommandStore()\nconst { t } = useI18n()\n\ninterface ICommandData {\n  id: string\n  keybinding: KeybindingImpl | null\n  label: string\n  source?: string\n}\n\nconst commandsData = computed<ICommandData[]>(() => {\n  return Object.values(commandStore.commands).map((command) => ({\n    id: command.id,\n    label: t(\n      `commands.${normalizeI18nKey(command.id)}.label`,\n      command.label ?? ''\n    ),\n    keybinding: keybindingStore.getKeybindingByCommandId(command.id),\n    source: command.source\n  }))\n})\n\nconst selectedCommandData = ref<ICommandData | null>(null)\nconst editDialogVisible = ref(false)\nconst newBindingKeyCombo = ref<KeyComboImpl | null>(null)\nconst currentEditingCommand = ref<ICommandData | null>(null)\nconst keybindingInput = ref<InstanceType<typeof InputText> | null>(null)\n\nconst existingKeybindingOnCombo = computed<KeybindingImpl | null>(() => {\n  if (!currentEditingCommand.value) {\n    return null\n  }\n\n  // If the new keybinding is the same as the current editing command, then don't show the error\n  if (\n    currentEditingCommand.value.keybinding?.combo?.equals(\n      newBindingKeyCombo.value\n    )\n  ) {\n    return null\n  }\n\n  if (!newBindingKeyCombo.value) {\n    return null\n  }\n\n  return keybindingStore.getKeybinding(newBindingKeyCombo.value)\n})\n\nfunction editKeybinding(commandData: ICommandData) {\n  currentEditingCommand.value = commandData\n  newBindingKeyCombo.value = commandData.keybinding\n    ? commandData.keybinding.combo\n    : null\n  editDialogVisible.value = true\n}\n\nwatchEffect(() => {\n  if (editDialogVisible.value) {\n    // nextTick doesn't work here, so we use a timeout instead\n    setTimeout(() => {\n      // @ts-expect-error - $el is an internal property of the InputText component\n      keybindingInput.value?.$el?.focus()\n    }, 300)\n  }\n})\n\nasync function removeKeybinding(commandData: ICommandData) {\n  if (commandData.keybinding) {\n    keybindingStore.unsetKeybinding(commandData.keybinding)\n    await keybindingService.persistUserKeybindings()\n  }\n}\n\nasync function captureKeybinding(event: KeyboardEvent) {\n  // Allow the use of keyboard shortcuts when adding keyboard shortcuts\n  if (!event.shiftKey && !event.altKey && !event.ctrlKey && !event.metaKey) {\n    switch (event.key) {\n      case 'Escape':\n        cancelEdit()\n        return\n      case 'Enter':\n        await saveKeybinding()\n        return\n    }\n  }\n  const keyCombo = KeyComboImpl.fromEvent(event)\n  newBindingKeyCombo.value = keyCombo\n}\n\nfunction cancelEdit() {\n  editDialogVisible.value = false\n  currentEditingCommand.value = null\n  newBindingKeyCombo.value = null\n}\n\nasync function saveKeybinding() {\n  if (currentEditingCommand.value && newBindingKeyCombo.value) {\n    const updated = keybindingStore.updateKeybindingOnCommand(\n      new KeybindingImpl({\n        commandId: currentEditingCommand.value.id,\n        combo: newBindingKeyCombo.value\n      })\n    )\n    if (updated) {\n      await keybindingService.persistUserKeybindings()\n    }\n  }\n  cancelEdit()\n}\n\nasync function resetKeybinding(commandData: ICommandData) {\n  if (keybindingStore.resetKeybindingForCommand(commandData.id)) {\n    await keybindingService.persistUserKeybindings()\n  } else {\n    console.warn(\n      `No changes made when resetting keybinding for command: ${commandData.id}`\n    )\n  }\n}\n\nconst toast = useToast()\nasync function resetAllKeybindings() {\n  keybindingStore.resetAllKeybindings()\n  await keybindingService.persistUserKeybindings()\n  toast.add({\n    severity: 'info',\n    summary: 'Info',\n    detail: 'All keybindings reset',\n    life: 3000\n  })\n}\n</script>\n\n<style scoped>\n@reference '../../../../assets/css/style.css';\n\n:deep(.p-datatable-tbody) > tr > td {\n  @apply p-1;\n  min-height: 2rem;\n}\n\n:deep(.p-datatable-row-selected) .actions,\n:deep(.p-datatable-selectable-row:hover) .actions {\n  @apply visible;\n}\n</style>\n"],"names":["keySequences","computed","__props","filters","ref","FilterMatchMode","keybindingStore","useKeybindingStore","keybindingService","useKeybindingService","commandStore","useCommandStore","t","useI18n","commandsData","command","normalizeI18nKey","selectedCommandData","editDialogVisible","newBindingKeyCombo","currentEditingCommand","keybindingInput","existingKeybindingOnCombo","editKeybinding","commandData","__name","watchEffect","removeKeybinding","captureKeybinding","event","cancelEdit","saveKeybinding","keyCombo","KeyComboImpl","KeybindingImpl","resetKeybinding","toast","useToast","resetAllKeybindings"],"mappings":"2nFAsBA,MAAMA,EAAeC,EAAS,IAAMC,EAAA,SAAS,iBAAiB,0ZCmI9D,MAAMC,EAAUC,EAAI,CAClB,OAAQ,CAAE,MAAO,GAAI,UAAWC,EAAgB,QAAS,CAAA,CAC1D,EAEKC,EAAkBC,KAClBC,EAAoBC,KACpBC,EAAeC,KACf,CAAE,EAAAC,GAAMC,KASRC,EAAeb,EAAyB,IACrC,OAAO,OAAOS,EAAa,QAAQ,EAAE,IAAKK,IAAa,CAC5D,GAAIA,EAAQ,GACZ,MAAOH,EACL,YAAYI,GAAiBD,EAAQ,EAAE,CAAC,SACxCA,EAAQ,OAAS,EACnB,EACA,WAAYT,EAAgB,yBAAyBS,EAAQ,EAAE,EAC/D,OAAQA,EAAQ,MAChB,EAAA,CACH,EAEKE,EAAsBb,EAAyB,IAAI,EACnDc,EAAoBd,EAAI,EAAK,EAC7Be,EAAqBf,EAAyB,IAAI,EAClDgB,EAAwBhB,EAAyB,IAAI,EACrDiB,EAAkBjB,EAA2C,IAAI,EAEjEkB,EAA4BrB,EAAgC,IAC5D,CAACmB,EAAsB,OAMzBA,EAAsB,MAAM,YAAY,OAAO,OAC7CD,EAAmB,KAAA,GAMnB,CAACA,EAAmB,MACf,KAGFb,EAAgB,cAAca,EAAmB,KAAK,CAC9D,EAED,SAASI,EAAeC,EAA2B,CACjDJ,EAAsB,MAAQI,EAC9BL,EAAmB,MAAQK,EAAY,WACnCA,EAAY,WAAW,MACvB,KACJN,EAAkB,MAAQ,EAC5B,CANSO,EAAAF,EAAA,kBAQTG,EAAY,IAAM,CACZR,EAAkB,OAEpB,WAAW,IAAM,CAECG,EAAA,OAAO,KAAK,SAC3B,GAAG,CACR,CACD,EAED,eAAeM,EAAiBH,EAA2B,CACrDA,EAAY,aACElB,EAAA,gBAAgBkB,EAAY,UAAU,EACtD,MAAMhB,EAAkB,yBAE5B,CALeiB,EAAAE,EAAA,oBAOf,eAAeC,EAAkBC,EAAsB,CAEjD,GAAA,CAACA,EAAM,UAAY,CAACA,EAAM,QAAU,CAACA,EAAM,SAAW,CAACA,EAAM,QAC/D,OAAQA,EAAM,IAAK,CACjB,IAAK,SACQC,IACX,OACF,IAAK,QACH,MAAMC,EAAe,EACrB,MACJ,CAEI,MAAAC,EAAWC,GAAa,UAAUJ,CAAK,EAC7CV,EAAmB,MAAQa,CAC7B,CAdeP,EAAAG,EAAA,qBAgBf,SAASE,GAAa,CACpBZ,EAAkB,MAAQ,GAC1BE,EAAsB,MAAQ,KAC9BD,EAAmB,MAAQ,IAC7B,CAJSM,EAAAK,EAAA,cAMT,eAAeC,GAAiB,CAC1BX,EAAsB,OAASD,EAAmB,OACpCb,EAAgB,0BAC9B,IAAI4B,GAAe,CACjB,UAAWd,EAAsB,MAAM,GACvC,MAAOD,EAAmB,KAAA,CAC3B,CAAA,GAGD,MAAMX,EAAkB,yBAGjBsB,GACb,CAbeL,EAAAM,EAAA,kBAef,eAAeI,EAAgBX,EAA2B,CACpDlB,EAAgB,0BAA0BkB,EAAY,EAAE,EAC1D,MAAMhB,EAAkB,yBAEhB,QAAA,KACN,0DAA0DgB,EAAY,EAAE,EAAA,CAG9E,CAReC,EAAAU,EAAA,mBAUf,MAAMC,EAAQC,KACd,eAAeC,GAAsB,CACnChC,EAAgB,oBAAoB,EACpC,MAAME,EAAkB,yBACxB4B,EAAM,IAAI,CACR,SAAU,OACV,QAAS,OACT,OAAQ,wBACR,KAAM,GAAA,CACP,CACH,CATe,OAAAX,EAAAa,EAAA"}