{"version":3,"file":"ComfyQueueButton-NGQuLmd1.js","sources":["../../src/components/actionbar/BatchCountEdit.vue","../../src/components/actionbar/ComfyRunButton/ComfyQueueButton.vue"],"sourcesContent":["<template>\n  <div\n    v-tooltip.bottom=\"{\n      value: $t('menu.batchCount'),\n      showDelay: 600\n    }\"\n    class=\"batch-count\"\n    :aria-label=\"$t('menu.batchCount')\"\n  >\n    <InputNumber\n      v-model=\"batchCount\"\n      class=\"w-14\"\n      :min=\"minQueueCount\"\n      :max=\"maxQueueCount\"\n      fluid\n      show-buttons\n      :pt=\"{\n        incrementButton: {\n          class: 'w-6',\n          onmousedown: () => {\n            handleClick(true)\n          }\n        },\n        decrementButton: {\n          class: 'w-6',\n          onmousedown: () => {\n            handleClick(false)\n          }\n        }\n      }\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { storeToRefs } from 'pinia'\nimport InputNumber from 'primevue/inputnumber'\nimport { computed } from 'vue'\n\nimport { useSettingStore } from '@/platform/settings/settingStore'\nimport { useQueueSettingsStore } from '@/stores/queueStore'\n\nconst queueSettingsStore = useQueueSettingsStore()\nconst { batchCount } = storeToRefs(queueSettingsStore)\nconst minQueueCount = 1\n\nconst settingStore = useSettingStore()\nconst maxQueueCount = computed(() =>\n  settingStore.get('Comfy.QueueButton.BatchCountLimit')\n)\n\nconst handleClick = (increment: boolean) => {\n  let newCount: number\n  if (increment) {\n    const originalCount = batchCount.value - 1\n    newCount = Math.min(originalCount * 2, maxQueueCount.value)\n  } else {\n    const originalCount = batchCount.value + 1\n    newCount = Math.floor(originalCount / 2)\n  }\n\n  batchCount.value = newCount\n}\n</script>\n\n<style scoped>\n:deep(.p-inputtext) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n</style>\n","<template>\n  <div class=\"queue-button-group flex\">\n    <SplitButton\n      v-tooltip.bottom=\"{\n        value: workspaceStore.shiftDown\n          ? $t('menu.runWorkflowFront')\n          : $t('menu.runWorkflow'),\n        showDelay: 600\n      }\"\n      class=\"comfyui-queue-button\"\n      :label=\"String(activeQueueModeMenuItem?.label ?? '')\"\n      severity=\"primary\"\n      size=\"small\"\n      :model=\"queueModeMenuItems\"\n      data-testid=\"queue-button\"\n      @click=\"queuePrompt\"\n    >\n      <template #icon>\n        <i v-if=\"workspaceStore.shiftDown\" class=\"icon-[lucide--list-start]\" />\n        <i v-else-if=\"queueMode === 'disabled'\" class=\"icon-[lucide--play]\" />\n        <i\n          v-else-if=\"queueMode === 'instant'\"\n          class=\"icon-[lucide--fast-forward]\"\n        />\n        <i\n          v-else-if=\"queueMode === 'change'\"\n          class=\"icon-[lucide--step-forward]\"\n        />\n      </template>\n      <template #item=\"{ item }\">\n        <Button\n          v-tooltip=\"{\n            value: item.tooltip,\n            showDelay: 600\n          }\"\n          :label=\"String(item.label ?? '')\"\n          :icon=\"item.icon\"\n          :severity=\"item.key === queueMode ? 'primary' : 'secondary'\"\n          size=\"small\"\n          text\n        />\n      </template>\n    </SplitButton>\n    <BatchCountEdit />\n    <ButtonGroup class=\"execution-actions flex flex-nowrap\">\n      <Button\n        v-tooltip.bottom=\"{\n          value: $t('menu.interrupt'),\n          showDelay: 600\n        }\"\n        icon=\"pi pi-times\"\n        :severity=\"executingPrompt ? 'danger' : 'secondary'\"\n        :disabled=\"!executingPrompt\"\n        text\n        :aria-label=\"$t('menu.interrupt')\"\n        @click=\"() => commandStore.execute('Comfy.Interrupt')\"\n      />\n      <Button\n        v-tooltip.bottom=\"{\n          value: $t('sideToolbar.queueTab.clearPendingTasks'),\n          showDelay: 600\n        }\"\n        icon=\"pi pi-stop\"\n        :severity=\"hasPendingTasks ? 'danger' : 'secondary'\"\n        :disabled=\"!hasPendingTasks\"\n        text\n        :aria-label=\"$t('sideToolbar.queueTab.clearPendingTasks')\"\n        @click=\"\n          () => {\n            if (queueCountStore.count.value > 1) {\n              commandStore.execute('Comfy.ClearPendingTasks')\n            }\n            queueMode = 'disabled'\n          }\n        \"\n      />\n    </ButtonGroup>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { storeToRefs } from 'pinia'\nimport Button from 'primevue/button'\nimport ButtonGroup from 'primevue/buttongroup'\nimport type { MenuItem } from 'primevue/menuitem'\nimport SplitButton from 'primevue/splitbutton'\nimport { computed } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nimport { isCloud } from '@/platform/distribution/types'\nimport { useTelemetry } from '@/platform/telemetry'\nimport { useCommandStore } from '@/stores/commandStore'\nimport {\n  useQueuePendingTaskCountStore,\n  useQueueSettingsStore\n} from '@/stores/queueStore'\nimport { useWorkspaceStore } from '@/stores/workspaceStore'\n\nimport BatchCountEdit from '../BatchCountEdit.vue'\n\nconst workspaceStore = useWorkspaceStore()\nconst queueCountStore = storeToRefs(useQueuePendingTaskCountStore())\nconst { mode: queueMode } = storeToRefs(useQueueSettingsStore())\n\nconst { t } = useI18n()\nconst queueModeMenuItemLookup = computed(() => {\n  const items: Record<string, MenuItem> = {\n    disabled: {\n      key: 'disabled',\n      label: t('menu.run'),\n      tooltip: t('menu.disabledTooltip'),\n      command: () => {\n        queueMode.value = 'disabled'\n      }\n    },\n    change: {\n      key: 'change',\n      label: `${t('menu.run')} (${t('menu.onChange')})`,\n      tooltip: t('menu.onChangeTooltip'),\n      command: () => {\n        queueMode.value = 'change'\n      }\n    }\n  }\n  if (!isCloud) {\n    items.instant = {\n      key: 'instant',\n      label: `${t('menu.run')} (${t('menu.instant')})`,\n      tooltip: t('menu.instantTooltip'),\n      command: () => {\n        queueMode.value = 'instant'\n      }\n    }\n  }\n  return items\n})\n\nconst activeQueueModeMenuItem = computed(() => {\n  // Fallback to disabled mode if current mode is not available (e.g., instant mode in cloud)\n  return (\n    queueModeMenuItemLookup.value[queueMode.value] ||\n    queueModeMenuItemLookup.value.disabled\n  )\n})\nconst queueModeMenuItems = computed(() =>\n  Object.values(queueModeMenuItemLookup.value)\n)\n\nconst executingPrompt = computed(() => !!queueCountStore.count.value)\nconst hasPendingTasks = computed(\n  () => queueCountStore.count.value > 1 || queueMode.value !== 'disabled'\n)\n\nconst commandStore = useCommandStore()\nconst queuePrompt = async (e: Event) => {\n  const isShiftPressed = 'shiftKey' in e && e.shiftKey\n  const commandId = isShiftPressed\n    ? 'Comfy.QueuePromptFront'\n    : 'Comfy.QueuePrompt'\n\n  if (isCloud) {\n    useTelemetry()?.trackRunButton({ subscribe_to_run: false })\n  }\n\n  await commandStore.execute(commandId)\n}\n</script>\n\n<style scoped>\n.comfyui-queue-button :deep(.p-splitbutton-dropdown) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n</style>\n"],"names":["minQueueCount","queueSettingsStore","useQueueSettingsStore","batchCount","storeToRefs","settingStore","useSettingStore","maxQueueCount","computed","handleClick","__name","increment","newCount","originalCount","workspaceStore","useWorkspaceStore","queueCountStore","useQueuePendingTaskCountStore","queueMode","t","useI18n","queueModeMenuItemLookup","items","activeQueueModeMenuItem","queueModeMenuItems","executingPrompt","hasPendingTasks","commandStore","useCommandStore","queuePrompt","e","commandId"],"mappings":"yvEA4CMA,EAAgB,wCAFtB,MAAMC,EAAqBC,IACrB,CAAE,WAAAC,CAAA,EAAeC,EAAYH,CAAkB,EAG/CI,EAAeC,IACfC,EAAgBC,EAAS,IAC7BH,EAAa,IAAI,mCAAmC,CAAA,EAGhDI,EAAcC,EAACC,GAAuB,CACtC,IAAAC,EACJ,GAAID,EAAW,CACP,MAAAE,EAAgBV,EAAW,MAAQ,EACzCS,EAAW,KAAK,IAAIC,EAAgB,EAAGN,EAAc,KAAK,CAAA,KACrD,CACC,MAAAM,EAAgBV,EAAW,MAAQ,EAC9BS,EAAA,KAAK,MAAMC,EAAgB,CAAC,CACzC,CAEAV,EAAW,MAAQS,CAAA,EAVD,4zBCiDpB,MAAME,EAAiBC,IACjBC,EAAkBZ,EAAYa,EAAA,CAA+B,EAC7D,CAAE,KAAMC,CAAA,EAAcd,EAAYF,EAAuB,CAAA,EAEzD,CAAE,EAAAiB,GAAMC,IACRC,EAA0Bb,EAAS,IAAM,CAC7C,MAAMc,EAAkC,CACtC,SAAU,CACR,IAAK,WACL,MAAOH,EAAE,UAAU,EACnB,QAASA,EAAE,sBAAsB,EACjC,QAAST,EAAA,IAAM,CACbQ,EAAU,MAAQ,UACpB,EAFS,UAGX,EACA,OAAQ,CACN,IAAK,SACL,MAAO,GAAGC,EAAE,UAAU,CAAC,KAAKA,EAAE,eAAe,CAAC,IAC9C,QAASA,EAAE,sBAAsB,EACjC,QAAST,EAAA,IAAM,CACbQ,EAAU,MAAQ,QACpB,EAFS,UAGX,CAAA,EAGA,OAAAI,EAAM,QAAU,CACd,IAAK,UACL,MAAO,GAAGH,EAAE,UAAU,CAAC,KAAKA,EAAE,cAAc,CAAC,IAC7C,QAASA,EAAE,qBAAqB,EAChC,QAAST,EAAA,IAAM,CACbQ,EAAU,MAAQ,SACpB,EAFS,UAET,EAGGI,CAAA,CACR,EAEKC,EAA0Bf,EAAS,IAGrCa,EAAwB,MAAMH,EAAU,KAAK,GAC7CG,EAAwB,MAAM,QAEjC,EACKG,EAAqBhB,EAAS,IAClC,OAAO,OAAOa,EAAwB,KAAK,CAAA,EAGvCI,EAAkBjB,EAAS,IAAM,CAAC,CAACQ,EAAgB,MAAM,KAAK,EAC9DU,EAAkBlB,EACtB,IAAMQ,EAAgB,MAAM,MAAQ,GAAKE,EAAU,QAAU,UAAA,EAGzDS,EAAeC,IACfC,EAAcnB,EAAA,MAAOoB,GAAa,CAEhC,MAAAC,EADiB,aAAcD,GAAKA,EAAE,SAExC,yBACA,oBAME,MAAAH,EAAa,QAAQI,CAAS,CAAA,EAVlB"}