{"version":3,"file":"UserSelectView-DDaKCEpu.js","sources":["../../src/views/templates/BaseViewTemplate.vue","../../src/views/UserSelectView.vue"],"sourcesContent":["<template>\n  <div\n    class=\"flex h-screen w-screen flex-col font-sans\"\n    :class=\"[\n      dark\n        ? 'dark-theme bg-neutral-900 text-neutral-300'\n        : 'bg-neutral-300 text-neutral-900'\n    ]\"\n  >\n    <!-- Virtual top menu for native window (drag handle) -->\n    <div\n      v-show=\"isNativeWindow()\"\n      ref=\"topMenuRef\"\n      class=\"app-drag h-(--comfy-topbar-height) w-full\"\n    />\n    <div class=\"flex w-full grow items-center justify-center overflow-auto\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { nextTick, onMounted, ref } from 'vue'\n\nimport { electronAPI, isElectron, isNativeWindow } from '@/utils/envUtil'\n\nconst { dark = false } = defineProps<{\n  dark?: boolean\n}>()\n\nconst darkTheme = {\n  color: 'rgba(0, 0, 0, 0)',\n  symbolColor: '#d4d4d4'\n}\n\nconst lightTheme = {\n  color: 'rgba(0, 0, 0, 0)',\n  symbolColor: '#171717'\n}\n\nconst topMenuRef = ref<HTMLDivElement | null>(null)\nonMounted(async () => {\n  if (isElectron()) {\n    await nextTick()\n\n    electronAPI().changeTheme({\n      ...(dark ? darkTheme : lightTheme),\n      height: topMenuRef.value?.getBoundingClientRect().height ?? 0\n    })\n  }\n})\n</script>\n","<template>\n  <BaseViewTemplate dark>\n    <main\n      id=\"comfy-user-selection\"\n      class=\"relative min-w-84 rounded-lg bg-(--comfy-menu-bg) p-5 px-10 shadow-lg\"\n    >\n      <h1 class=\"my-2.5 mb-7 font-normal\">ComfyUI</h1>\n      <div class=\"flex w-full flex-col items-center\">\n        <div class=\"flex w-full flex-col gap-2\">\n          <label for=\"new-user-input\">{{ $t('userSelect.newUser') }}:</label>\n          <InputText\n            id=\"new-user-input\"\n            v-model=\"newUsername\"\n            :placeholder=\"$t('userSelect.enterUsername')\"\n            @keyup.enter=\"login\"\n          />\n        </div>\n        <Divider />\n        <div class=\"flex w-full flex-col gap-2\">\n          <label for=\"existing-user-select\"\n            >{{ $t('userSelect.existingUser') }}:</label\n          >\n          <Select\n            v-model=\"selectedUser\"\n            class=\"w-full\"\n            input-id=\"existing-user-select\"\n            :options=\"userStore.users\"\n            option-label=\"username\"\n            :placeholder=\"$t('userSelect.selectUser')\"\n            :disabled=\"createNewUser\"\n          />\n          <Message v-if=\"error\" severity=\"error\">\n            {{ error }}\n          </Message>\n        </div>\n        <footer class=\"mt-5\">\n          <Button :label=\"$t('userSelect.next')\" @click=\"login\" />\n        </footer>\n      </div>\n    </main>\n  </BaseViewTemplate>\n</template>\n\n<script setup lang=\"ts\">\nimport Button from 'primevue/button'\nimport Divider from 'primevue/divider'\nimport InputText from 'primevue/inputtext'\nimport Message from 'primevue/message'\nimport Select from 'primevue/select'\nimport { computed, onMounted, ref } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport type { User } from '@/stores/userStore'\nimport { useUserStore } from '@/stores/userStore'\nimport BaseViewTemplate from '@/views/templates/BaseViewTemplate.vue'\n\nconst userStore = useUserStore()\nconst router = useRouter()\n\nconst selectedUser = ref<User | null>(null)\nconst newUsername = ref('')\nconst loginError = ref('')\n\nconst createNewUser = computed(() => newUsername.value.trim() !== '')\nconst newUserExistsError = computed(() => {\n  return userStore.users.find((user) => user.username === newUsername.value)\n    ? `User \"${newUsername.value}\" already exists`\n    : ''\n})\nconst error = computed(() => newUserExistsError.value || loginError.value)\n\nconst login = async () => {\n  try {\n    const user = createNewUser.value\n      ? await userStore.createUser(newUsername.value)\n      : selectedUser.value\n\n    if (!user) {\n      throw new Error('No user selected')\n    }\n\n    await userStore.login(user)\n    await router.push('/')\n  } catch (err) {\n    loginError.value = err instanceof Error ? err.message : JSON.stringify(err)\n  }\n}\n\nonMounted(async () => {\n  if (!userStore.initialized) {\n    await userStore.initialize()\n  }\n})\n</script>\n"],"names":["darkTheme","lightTheme","topMenuRef","ref","onMounted","isElectron","nextTick","electronAPI","__props","userStore","useUserStore","router","useRouter","selectedUser","newUsername","loginError","createNewUser","computed","newUserExistsError","user","error","login","__name","err"],"mappings":"i7EA8BA,MAAMA,EAAY,CAChB,MAAO,mBACP,YAAa,SAAA,EAGTC,EAAa,CACjB,MAAO,mBACP,YAAa,SAAA,EAGTC,EAAaC,EAA2B,IAAI,EAClD,OAAAC,EAAU,SAAY,CAChBC,MACF,MAAMC,EAAS,EAEfC,EAAA,EAAc,YAAY,CACxB,GAAIC,OAAOR,EAAYC,EACvB,OAAQC,EAAW,OAAO,wBAAwB,QAAU,CAAA,CAC7D,EACH,CACD,4pBCMD,MAAMO,EAAYC,IACZC,EAASC,IAETC,EAAeV,EAAiB,IAAI,EACpCW,EAAcX,EAAI,EAAE,EACpBY,EAAaZ,EAAI,EAAE,EAEnBa,EAAgBC,EAAS,IAAMH,EAAY,MAAM,KAAA,IAAW,EAAE,EAC9DI,EAAqBD,EAAS,IAC3BR,EAAU,MAAM,KAAMU,GAASA,EAAK,WAAaL,EAAY,KAAK,EACrE,SAASA,EAAY,KAAK,mBAC1B,EACL,EACKM,EAAQH,EAAS,IAAMC,EAAmB,OAASH,EAAW,KAAK,EAEnEM,EAAQC,EAAA,SAAY,CACpB,GAAA,CACI,MAAAH,EAAOH,EAAc,MACvB,MAAMP,EAAU,WAAWK,EAAY,KAAK,EAC5CD,EAAa,MAEjB,GAAI,CAACM,EACG,MAAA,IAAI,MAAM,kBAAkB,EAG9B,MAAAV,EAAU,MAAMU,CAAI,EACpB,MAAAR,EAAO,KAAK,GAAG,QACdY,EAAK,CACZR,EAAW,MAAQQ,aAAe,MAAQA,EAAI,QAAU,KAAK,UAAUA,CAAG,CAC5E,CAAA,EAdY,SAiBd,OAAAnB,EAAU,SAAY,CACfK,EAAU,aACb,MAAMA,EAAU,YAClB,CACD"}