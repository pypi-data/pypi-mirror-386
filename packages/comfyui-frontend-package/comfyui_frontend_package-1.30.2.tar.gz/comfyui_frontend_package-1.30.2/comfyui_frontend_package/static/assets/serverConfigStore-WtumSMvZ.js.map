{"version":3,"file":"serverConfigStore-WtumSMvZ.js","sources":["../../src/stores/serverConfigStore.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { computed, ref } from 'vue'\n\nimport type { ServerConfig, ServerConfigValue } from '@/constants/serverConfig'\n\ntype ServerConfigWithValue<T> = ServerConfig<T> & {\n  /**\n   * Current value.\n   */\n  value: T\n  /**\n   * Initial value loaded from settings.\n   */\n  initialValue: T\n}\n\nexport const useServerConfigStore = defineStore('serverConfig', () => {\n  const serverConfigById = ref<\n    Record<string, ServerConfigWithValue<ServerConfigValue>>\n  >({})\n  const serverConfigs = computed(() => {\n    return Object.values(serverConfigById.value)\n  })\n  const modifiedConfigs = computed<ServerConfigWithValue<ServerConfigValue>[]>(\n    () => {\n      return serverConfigs.value.filter((config) => {\n        return config.initialValue !== config.value\n      })\n    }\n  )\n  const revertChanges = () => {\n    for (const config of modifiedConfigs.value) {\n      config.value = config.initialValue\n    }\n  }\n  const serverConfigsByCategory = computed<\n    Record<string, ServerConfigWithValue<ServerConfigValue>[]>\n  >(() => {\n    return serverConfigs.value.reduce(\n      (acc, config) => {\n        const category = config.category?.[0] ?? 'General'\n        acc[category] = acc[category] || []\n        acc[category].push(config)\n        return acc\n      },\n      {} as Record<string, ServerConfigWithValue<ServerConfigValue>[]>\n    )\n  })\n  const serverConfigValues = computed<Record<string, ServerConfigValue>>(() => {\n    return Object.fromEntries(\n      serverConfigs.value.map((config) => {\n        return [\n          config.id,\n          config.value === config.defaultValue ||\n          config.value === null ||\n          config.value === undefined\n            ? undefined\n            : config.value\n        ]\n      })\n    )\n  })\n  const launchArgs = computed<Record<string, string>>(() => {\n    const args: Record<\n      string,\n      Omit<ServerConfigValue, 'undefined' | 'null'>\n    > = Object.assign(\n      {},\n      ...serverConfigs.value.map((config) => {\n        // Filter out configs that have the default value or undefined | null value\n        if (\n          config.value === config.defaultValue ||\n          config.value === null ||\n          config.value === undefined\n        ) {\n          return {}\n        }\n        return config.getValue\n          ? config.getValue(config.value)\n          : { [config.id]: config.value }\n      })\n    )\n\n    // Convert true to empty string\n    // Convert number to string\n    return Object.fromEntries(\n      Object.entries(args).map(([key, value]) => {\n        if (value === true) {\n          return [key, '']\n        }\n        return [key, value.toString()]\n      })\n    ) as Record<string, string>\n  })\n  const commandLineArgs = computed<string>(() => {\n    return Object.entries(launchArgs.value)\n      .map(([key, value]) => [`--${key}`, value])\n      .flat()\n      .filter((arg: string) => arg !== '')\n      .join(' ')\n  })\n\n  function loadServerConfig(\n    configs: ServerConfig<ServerConfigValue>[],\n    values: Record<string, ServerConfigValue>\n  ) {\n    for (const config of configs) {\n      const value = values[config.id] ?? config.defaultValue\n      serverConfigById.value[config.id] = {\n        ...config,\n        value,\n        initialValue: value\n      }\n    }\n  }\n\n  return {\n    serverConfigById,\n    serverConfigs,\n    modifiedConfigs,\n    serverConfigsByCategory,\n    serverConfigValues,\n    launchArgs,\n    commandLineArgs,\n    revertChanges,\n    loadServerConfig\n  }\n})\n"],"names":["useServerConfigStore","defineStore","serverConfigById","ref","serverConfigs","computed","modifiedConfigs","config","revertChanges","__name","serverConfigsByCategory","acc","category","serverConfigValues","launchArgs","args","key","value","commandLineArgs","arg","loadServerConfig","configs","values"],"mappings":"oKAgBa,MAAAA,EAAuBC,EAAY,eAAgB,IAAM,CAC9D,MAAAC,EAAmBC,EAEvB,CAAA,CAAE,EACEC,EAAgBC,EAAS,IACtB,OAAO,OAAOH,EAAiB,KAAK,CAC5C,EACKI,EAAkBD,EACtB,IACSD,EAAc,MAAM,OAAQG,GAC1BA,EAAO,eAAiBA,EAAO,KACvC,CACH,EAEIC,EAAgBC,EAAA,IAAM,CACf,UAAAF,KAAUD,EAAgB,MACnCC,EAAO,MAAQA,EAAO,YACxB,EAHoB,iBAKhBG,EAA0BL,EAE9B,IACOD,EAAc,MAAM,OACzB,CAACO,EAAKJ,IAAW,CACf,MAAMK,EAAWL,EAAO,WAAW,CAAC,GAAK,UACzC,OAAAI,EAAIC,CAAQ,EAAID,EAAIC,CAAQ,GAAK,CAAA,EAC7BD,EAAAC,CAAQ,EAAE,KAAKL,CAAM,EAClBI,CACT,EACA,CAAC,CAAA,CAEJ,EACKE,EAAqBR,EAA4C,IAC9D,OAAO,YACZD,EAAc,MAAM,IAAKG,GAChB,CACLA,EAAO,GACPA,EAAO,QAAUA,EAAO,cACxBA,EAAO,QAAU,MACjBA,EAAO,QAAU,OACb,OACAA,EAAO,KAAA,CAEd,CAAA,CAEJ,EACKO,EAAaT,EAAiC,IAAM,CACxD,MAAMU,EAGF,OAAO,OACT,CAAC,EACD,GAAGX,EAAc,MAAM,IAAKG,GAGxBA,EAAO,QAAUA,EAAO,cACxBA,EAAO,QAAU,MACjBA,EAAO,QAAU,OAEV,GAEFA,EAAO,SACVA,EAAO,SAASA,EAAO,KAAK,EAC5B,CAAE,CAACA,EAAO,EAAE,EAAGA,EAAO,KAAM,CACjC,CAAA,EAKH,OAAO,OAAO,YACZ,OAAO,QAAQQ,CAAI,EAAE,IAAI,CAAC,CAACC,EAAKC,CAAK,IAC/BA,IAAU,GACL,CAACD,EAAK,EAAE,EAEV,CAACA,EAAKC,EAAM,SAAU,CAAA,CAC9B,CAAA,CACH,CACD,EACKC,EAAkBb,EAAiB,IAChC,OAAO,QAAQS,EAAW,KAAK,EACnC,IAAI,CAAC,CAACE,EAAKC,CAAK,IAAM,CAAC,KAAKD,CAAG,GAAIC,CAAK,CAAC,EACzC,KAAA,EACA,OAAQE,GAAgBA,IAAQ,EAAE,EAClC,KAAK,GAAG,CACZ,EAEQ,SAAAC,EACPC,EACAC,EACA,CACA,UAAWf,KAAUc,EAAS,CAC5B,MAAMJ,EAAQK,EAAOf,EAAO,EAAE,GAAKA,EAAO,aACzBL,EAAA,MAAMK,EAAO,EAAE,EAAI,CAClC,GAAGA,EACH,MAAAU,EACA,aAAcA,CAAA,CAElB,CACF,CAZS,OAAAR,EAAAW,EAAA,oBAcF,CACL,iBAAAlB,EACA,cAAAE,EACA,gBAAAE,EACA,wBAAAI,EACA,mBAAAG,EACA,WAAAC,EACA,gBAAAI,EACA,cAAAV,EACA,iBAAAY,CAAA,CAEJ,CAAC"}