[build-system]
requires = ["maturin>=1.4,<2.0"]
build-backend = "maturin"

[project]
name = "parquetframe"
version = "2.0.0-beta"
authors = [
    {name = "Christopher Murray", email = "lee.christopher.murray@gmail.com"},
]
description = "A universal data processing framework with multi-engine support (pandas, Polars, Dask) and multi-format I/O (CSV, JSON, Parquet, ORC, Avro) with intelligent backend selection"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Console",
    "Typing :: Typed",
]
keywords = [
    "pandas", "polars", "dask", "parquet", "csv", "json", "orc", "avro",
    "dataframe", "big-data", "multi-engine", "sql", "duckdb",
    "bioframe", "genomics", "cli", "multi-format", "data-science",
    "analytics", "bioinformatics", "file-format", "entity-framework"
]
dependencies = [
    "pandas>=2.0.0",
    "dask[dataframe]>=2023.1.0",
    "pyarrow>=10.0.0",
]

[project.optional-dependencies]
phase2 = [
    "polars>=0.19.0",  # Multi-engine support (Polars)
    "fastavro>=1.8.0",  # Apache Avro format support
]
engines = [
    "polars>=0.19.0",  # Alternative high-performance engine
]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-asyncio>=0.23.0",
    "ruff>=0.1.0",
    "black>=23.0",
    "pre-commit>=3.0",
    "mypy>=1.0",
    "tox>=4.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-asyncio>=0.23.0",
]
cli = [
    "click>=8.0",
    "rich>=13.0",  # For enhanced terminal output
    "psutil>=5.8.0",  # For performance monitoring
    "pyyaml>=6.0",  # For YAML workflow support
    "duckdb>=0.9.0",  # For SQL query functionality
    "polars>=1.33.1"
]
sql = [
    "duckdb>=0.9.0",  # For SQL query functionality
]
db = [
    "sqlalchemy>=2.0.0",  # For database connectivity
]
bio = [
    "bioframe>=0.4.0",  # For genomic interval operations
]
ai = [
    "ollama>=0.1.7",  # For LLM integration
    "prompt-toolkit>=3.0.0",  # For interactive CLI
]
rust = []  # Marker for Rust-enabled builds
all = [
    # Phase 2 multi-engine
    "polars>=0.19.0",
    "fastavro>=1.8.0",
    # CLI
    "click>=8.0",
    "rich>=13.0",
    "psutil>=5.8.0",
    "pyyaml>=6.0",
    # SQL & Database
    "duckdb>=0.9.0",
    "sqlalchemy>=2.0.0",
    # Bioinformatics
    "bioframe>=0.4.0",
    # AI
    "ollama>=0.1.7",
    "prompt-toolkit>=3.0.0",
]

[project.urls]
Homepage = "https://leechristophermurray.github.io/parquetframe/"
Documentation = "https://leechristophermurray.github.io/parquetframe/"
Repository = "https://github.com/leechristophermurray/parquetframe.git"
"Bug Tracker" = "https://github.com/leechristophermurray/parquetframe/issues"
Changelog = "https://github.com/leechristophermurray/parquetframe/blob/main/CHANGELOG.md"

[project.scripts]
pframe = "parquetframe.cli:main [cli]"

[tool.maturin]
features = ["pyo3/extension-module"]
module-name = "parquetframe._rustic"
python-source = "src"
manifest-path = "crates/pf-py/Cargo.toml"
include = ["LICENSE", "README.md", "CHANGELOG.md"]

# Tool configurations
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "B017", # assert raises with bare except
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B011", "F841", "B017"]

[tool.black]
target-version = ['py310']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false  # Relaxed for now - TODO: re-enable incrementally
disallow_incomplete_defs = false  # Relaxed for now - TODO: re-enable incrementally
check_untyped_defs = false  # Relaxed for now - TODO: re-enable incrementally
disallow_untyped_decorators = false  # Relaxed for now - TODO: re-enable incrementally
no_implicit_optional = false  # Relaxed for now - TODO: re-enable incrementally
warn_redundant_casts = true
warn_unused_ignores = false  # Relaxed to reduce noise
warn_no_return = true
warn_unreachable = false  # Relaxed to reduce noise
strict_equality = true

[[tool.mypy.overrides]]
module = ["dask.*", "pyarrow.*", "yaml.*", "bioframe.*", "duckdb.*", "psutil.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=src/parquetframe --cov-fail-under=45 --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as async tests",
    "ai: marks tests as AI/LLM related tests",
    "db: marks tests as database related tests",
    "graph: marks tests as graph processing related tests",
    "cli: marks tests as CLI related tests",
    "dask: marks tests that require Dask backend",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
