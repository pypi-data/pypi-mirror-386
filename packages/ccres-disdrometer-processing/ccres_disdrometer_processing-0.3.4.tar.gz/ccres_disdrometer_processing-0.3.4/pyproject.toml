[build-system]
requires = ["setuptools", "numpy"]
build-backend = "setuptools.build_meta"

[project]
name = "ccres_disdrometer_processing"
authors = [{ name = "ACTRIS-CCRES", email = "ccres-dev@listes.ipsl.fr" }]
description = "CCRES code to convert data"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: GNU Affero General Public License v3',
    'Natural Language :: English',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]
keywords = ['ccres_disdrometer_processing']
dependencies = [
    "click",
    "netCDF4",
    "xarray",
    "pandas",
    "numpy<2 ",
    "requests",
    "matplotlib",
    "scipy",
    "pyarrow",
    "pytmatrix == 0.3.2",
    "toml",
]
# Dynamic for setuptools
dynamic = ["version"]

[project.license]
file = "LICENSE"

[project.urls]
homepage = "https://github.com/ACTRIS-CCRES/ccres_disdrometer_processing"
documentation = "https://ccres-disdrometer-processing.readthedocs.io/en/latest/?version=latest"
repository = "https://github.com/ACTRIS-CCRES/ccres_disdrometer_processing"
changelog = "https://github.com/ACTRIS-CCRES/ccres_disdrometer_processing/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/ACTRIS-CCRES/ccres_disdrometer_processing/issues"

[project.optional-dependencies]
dev = [
    "ccres_disdrometer_processing",
    # Pytest
    "pytest>=6.1.1",
    "pytest-cov>=2.10.1",
    "pytest-mock>=3.6.1",
    "coverage>=5.3",
    "requests",

    # Tox
    "tox",

    # Pre-commit
    "pre-commit",

    # Bump2version
    "bump2version",
    # Formatting
    "ruff",

    # Typing
    "mypy",
]

docs = [
    "ablog",
    "numpydoc",
    "myst-nb",
    "sphinx",
    "sphinx-autobuild",
    "sphinx-book-theme",
    "sphinx-design",
    "sphinx-examples",
    "sphinx-copybutton",
    "sphinx-serve",
    "sphinx-tabs",
    "sphinx-togglebutton",
    "sphinx-thebe",
    "sphinxcontrib-bibtex",
    "sphinxcontrib-youtube",
    "sphinxext-opengraph",
]

[project.scripts]
ccres_disdrometer_processing = "ccres_disdrometer_processing.cli.cli:cli"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
include = ["ccres_disdrometer_processing", "ccres_disdrometer_processing.*"]

[tool.mypy]
explicit_package_bases = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = ["/build/", "/venv/", "/tests/(cli|logger|run)/.py$", "/tests/.py$"]

[tool.docformatter]
recursive = true
blank = true
syntax = "numpy"

[tool.ruff]
exclude = ["docs"]

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=. --cov-config=pyproject.toml -vv --cov-report=html:htmlcov --cov-report=xml:coverage.xml --cov-report term"
testpaths = ["tests"]
filterwarnings = [
    "ignore::RuntimeWarning",
    "ignore::DeprecationWarning",
    "ignore::FutureWarning",
    "default:::ccres_disdrometer_processing.*",
]

[tool.coverage.run]
branch = true
omit = ["ccres_disdrometer_processing/tests/*", "./tests/*", "setup.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.bumpversion]
current_version = "0.3.4"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)((-rc(?P<release_candidate>.*))?-dev(?P<dev>\\d+))?"
serialize = [
    "{major}.{minor}.{patch}-rc{release_candidate}-dev{dev}", # This line is useless. It is to make bump2version not failed.
    "{major}.{minor}.{patch}-dev{dev}",
    "{major}.{minor}.{patch}-rc{release_candidate}",
    "{major}.{minor}.{patch}",
]
commit = true
tag = true

[[tool.bumpversion.files]]
filename = "ccres_disdrometer_processing/__init__.py"
