{
  "nav": {
    "home": "Home",
    "playground": "Playground",
    "documentation": "Documentation",
    "github": "GitHub",
    "status_checking": "Checking...",
    "status_online": "Online",
    "status_offline": "Offline"
  },
  "common": {
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "warning": "Warning",
    "info": "Info",
    "close": "Close",
    "save": "Save",
    "cancel": "Cancel",
    "confirm": "Confirm",
    "download": "Download",
    "upload": "Upload",
    "generate": "Generate",
    "play": "Play",
    "stop": "Stop",
    "pause": "Pause",
    "resume": "Resume",
    "clear": "Clear",
    "reset": "Reset",
    "copy": "Copy",
    "copied": "Copied!",
    "language": "Language",
    "english": "English",
    "chinese": "中文",
    "validate": "Validate",
    "options": "Options",
    "max_length": "Max Length",
    "tip": "Tip",
    "choose_voice": "Choose from available voices",
    "select_format": "Select your preferred audio format",
    "loading_voices": "Loading voices...",
    "loading_formats": "Loading formats...",
    "ctrl_enter_tip": "Use Ctrl+Enter to generate",
    "auto_combine_enabled": "Auto-combine enabled"
  },
  "home": {
    "title": "Free Text-to-Speech for Python",
    "subtitle": "Generate high-quality speech from text using the free openai.fm service. No API keys, no registration - just install and start creating audio.",
    "try_demo": "Try Demo",
    "documentation": "Documentation",
    "github": "GitHub",
    "features_title": "Key Features",
    "features_subtitle": "Simple, free, and powerful text-to-speech for Python developers.",
    "feature_free_title": "Completely Free",
    "feature_free_desc": "No API keys or registration required. Uses the free openai.fm service.",
    "feature_voices_title": "11 Voices",
    "feature_voices_desc": "All OpenAI-compatible voices available for different use cases.",
    "feature_formats_title": "6 Audio Formats",
    "feature_formats_desc": "MP3, WAV, OPUS, AAC, FLAC, and PCM support for any application.",
    "feature_docker_title": "Docker Ready",
    "feature_docker_desc": "One-command deployment with web interface and API endpoints.",
    "feature_openai_title": "OpenAI Compatible",
    "feature_openai_desc": "Drop-in replacement for OpenAI's TTS API with auto-combine for long text.",
    "feature_async_title": "Async & Sync",
    "feature_async_desc": "Both asyncio and synchronous clients for maximum flexibility.",
    "quick_start_title": "Quick Start",
    "installation_title": "Installation",
    "installation_code": "pip install ttsfm",
    "usage_title": "Basic Usage",
    "docker_title": "Docker Deployment",
    "docker_desc": "Run TTSFM with web interface:",
    "api_title": "OpenAI-Compatible API",
    "api_desc": "Use with OpenAI Python client:",
    "footer_copyright": "© 2024 dbcccc"
  },
  "playground": {
    "title": "Interactive TTS Playground",
    "subtitle": "Test different voices and audio formats in real-time",
    "text_input_label": "Text to Convert",
    "text_input_placeholder": "Enter the text you want to convert to speech...",
    "voice_label": "Voice",
    "format_label": "Audio Format",
    "instructions_label": "Voice Instructions (Optional)",
    "instructions_placeholder": "Additional instructions for voice generation...",
    "character_count": "characters",
    "max_length_warning": "Text exceeds maximum length. It will be automatically split and combined.",
    "generate_speech": "Generate Speech",
    "generating": "Generating...",
    "download_audio": "Download Audio",
    "audio_player_title": "Generated Audio",
    "file_size": "File Size",
    "duration": "Duration",
    "format": "Format",
    "voice": "Voice",
    "chunks_combined": "Chunks Combined",
    "random_text": "Random Text",
    "clear_text": "Clear Text",
    "max_length_description": "Maximum characters per request (default: 1000)",
    "enable_length_validation": "Enable length validation",
    "auto_combine_long_text": "Auto-combine long text",
    "auto_combine_tooltip": "Automatically split long text and combine audio chunks into a single file",
    "auto_combine_description": "Automatically handles text longer than the limit",
    "instructions_description": "Provide optional instructions for voice modulation",
    "api_key_optional": "API Key (Optional)",
    "api_key_placeholder": "Enter your API key if required",
    "api_key_description": "Only required if API key protection is enabled on the server",
    "sample_texts": {
      "welcome": "Welcome to TTSFM! This is a free text-to-speech service that converts your text into high-quality audio using advanced AI technology.",
      "story": "Once upon a time, in a digital world far away, there lived a small Python package that could transform any text into beautiful speech. This package was called TTSFM, and it brought joy to developers everywhere.",
      "technical": "TTSFM is a Python client for text-to-speech APIs that provides both synchronous and asynchronous interfaces. It supports multiple voices and audio formats, making it perfect for various applications.",
      "multilingual": "TTSFM supports multiple languages and voices, allowing you to create diverse audio content for global audiences. The service is completely free and requires no API keys.",
      "long": "This is a longer text sample designed to test the auto-combine feature of TTSFM. When text exceeds the maximum length limit, TTSFM automatically splits it into smaller chunks, generates audio for each chunk, and then seamlessly combines them into a single audio file. This process is completely transparent to the user and ensures that you can convert text of any length without worrying about technical limitations. The resulting audio maintains consistent quality and natural flow throughout the entire content."
    },
    "error_messages": {
      "empty_text": "Please enter some text to convert.",
      "generation_failed": "Failed to generate speech. Please try again.",
      "network_error": "Network error. Please check your connection and try again.",
      "invalid_format": "Invalid audio format selected.",
      "invalid_voice": "Invalid voice selected.",
      "text_too_long": "Text is too long. Please reduce the length or enable auto-combine.",
      "server_error": "Server error. Please try again later."
    },
    "success_messages": {
      "generation_complete": "Speech generated successfully!",
      "text_copied": "Text copied to clipboard!",
      "download_started": "Download started!"
    }
  },
  "docs": {
    "title": "API Documentation",
    "subtitle": "Complete reference for the TTSFM Text-to-Speech API. Free, simple, and powerful.",
    "contents": "Contents",
    "overview": "Overview",
    "authentication": "Authentication",
    "text_validation": "Text Validation",
    "endpoints": "API Endpoints",
    "voices": "Voices",
    "formats": "Audio Formats",
    "generate": "Generate Speech",
    "combined": "Combined Audio",
    "status": "Status & Health",
    "errors": "Error Handling",
    "examples": "Code Examples",
    "python_package": "Python Package",
    "overview_title": "Overview",
    "overview_desc": "The TTSFM API provides a modern, OpenAI-compatible interface for text-to-speech generation. It supports multiple voices, audio formats, and includes advanced features like text length validation and intelligent auto-combine functionality.",
    "base_url": "Base URL:",
    "key_features": "Key Features",
    "feature_voices": "11 different voice options - Choose from alloy, echo, nova, and more",
    "feature_formats": "Multiple audio formats - MP3, WAV, OPUS, AAC, FLAC, PCM support",
    "feature_openai": "OpenAI compatibility - Drop-in replacement for OpenAI's TTS API",
    "feature_auto_combine": "Auto-combine feature - Automatically handles long text (>1000 chars) by splitting and combining audio",
    "feature_validation": "Text length validation - Smart validation with configurable limits",
    "feature_monitoring": "Real-time monitoring - Status endpoints and health checks",
    "new_version": "New in v3.3.4:",
    "new_version_desc": "Runtime images now ship with ffmpeg so MP3 auto-combine succeeds immediately, and the default long-text limit is trimmed to 1000 characters for predictable playback.",
    "authentication_title": "Authentication",
    "authentication_desc": "Currently, the API supports optional API key authentication. If configured, include your API key in the request headers.",
    "text_validation_title": "Text Length Validation",
    "text_validation_desc": "TTSFM includes built-in text length validation to ensure compatibility with TTS models. The default maximum length is 1000 characters, but this can be customized.",
    "important": "Important:",
    "text_validation_warning": "Text exceeding the maximum length will be rejected unless validation is disabled or the text is split into chunks.",
    "validation_options": "Validation Options",
    "max_length_option": "Maximum allowed characters (default: 1000)",
    "validate_length_option": "Enable/disable validation (default: true)",
    "preserve_words_option": "Avoid splitting words when chunking (default: true)",
    "endpoints_title": "API Endpoints",
    "get_voices_desc": "Get list of available voices.",
    "get_formats_desc": "Get list of supported audio formats.",
    "validate_text_desc": "Validate text length and get splitting suggestions.",
    "generate_speech_desc": "Generate speech from text.",
    "response_example": "Response Example:",
    "request_body": "Request Body:",
    "parameters": "Parameters:",
    "text_param": "Text to convert to speech",
    "voice_param": "Voice ID (default: \"alloy\")",
    "format_param": "Audio format (default: \"mp3\")",
    "instructions_param": "Voice modulation instructions",
    "max_length_param": "Maximum text length (default: 1000)",
    "validate_length_param": "Enable validation (default: true)",
    "response": "Response:",
    "response_audio": "Returns audio file with appropriate Content-Type header.",
    "response_combined_audio": "Returns a single audio file containing all chunks combined seamlessly.",
    "required": "required",
    "optional": "optional",
    "python_package_title": "Python Package",
    "long_text_support": "Long Text Support",
    "long_text_desc": "The TTSFM Python package includes built-in long text splitting functionality for developers who need fine-grained control:",
    "developer_features": "Developer Features:",
    "manual_splitting": "Manual Splitting: Full control over text chunking for advanced use cases",
    "word_preservation": "Word Preservation: Maintains word boundaries for natural speech",
    "separate_files": "Separate Files: Each chunk saved as individual audio file",
    "cli_support": "CLI Support: Use `--split-long-text` flag for command-line usage",
    "note": "Note:",
    "auto_combine_note": "For web users, the auto-combine feature in `/v1/audio/speech` is recommended as it automatically handles long text and returns a single seamless audio file.",
    "combined_audio_desc": "Generate a single combined audio file from long text. Automatically splits text into chunks, generates speech for each chunk, and combines them into one seamless audio file.",
    "response_headers": "Response Headers:",
    "chunks_combined_header": "Number of chunks that were combined",
    "original_text_length_header": "Original text length in characters",
    "audio_size_header": "Final audio file size in bytes",
    "openai_compatible_desc": "Enhanced OpenAI-compatible endpoint with auto-combine feature. Automatically handles long text by splitting and combining audio chunks when needed.",
    "enhanced_parameters": "Enhanced Parameters:",
    "auto_combine_param": "Automatically split long text and combine audio chunks into a single file",
    "auto_combine_false": "Return error if text exceeds max_length (standard OpenAI behavior)",
    "max_length_chunk_param": "Maximum characters per chunk when splitting",
    "auto_combine_header": "Whether auto-combine was enabled (true/false)",
    "chunks_combined_response": "Number of audio chunks combined (1 for short text)",
    "original_text_response": "Original text length (for long text processing)",
    "audio_format_header": "Audio format of the response",
    "audio_size_response": "Audio file size in bytes",
    "short_text_comment": "Short text (works normally)",
    "long_text_auto_comment": "Long text with auto-combine (default)",
    "long_text_no_auto_comment": "Long text without auto-combine (will error)",
    "audio_combination": "Audio Combination:",
    "audio_combination_desc": "Uses advanced audio processing (PyDub) when available, with intelligent fallbacks for different environments. Supports all audio formats.",
    "use_cases": "Use Cases:",
    "use_case_articles": "Long Articles: Convert blog posts or articles to single audio files",
    "use_case_audiobooks": "Audiobooks: Generate chapters as single audio files",
    "use_case_podcasts": "Podcasts: Create podcast episodes from scripts",
    "use_case_education": "Educational Content: Convert learning materials to audio",
    "example_usage": "Example Usage:",
    "python_example_comment": "Python example",
    "operations": "Operational Notes",
    "operational_title": "Operational Notes",
    "operational_limit": "Requests above 1000 characters are automatically split when auto_combine is enabled; disable validation to manage chunking yourself.",
    "operational_fallback": "MP3 requests return MP3. OPUS, AAC, FLAC, WAV, and PCM map to WAV for reliable playback.",
    "operational_backend": "Audio comes from the third-party openai.fm service; availability may change without notice—add graceful fallbacks.",
    "operational_ffmpeg": "The Docker image bundles ffmpeg so combined MP3 responses work immediately without extra setup."
  }
}