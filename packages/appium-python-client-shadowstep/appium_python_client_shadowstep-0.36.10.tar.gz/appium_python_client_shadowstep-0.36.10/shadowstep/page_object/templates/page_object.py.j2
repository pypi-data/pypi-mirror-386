import logging
from typing import Any

from shadowstep.decorators.decorators import current_page
from shadowstep.element.element import Element
from shadowstep.page_base import PageBaseShadowstep


class {{ class_name }}(PageBaseShadowstep):

    def __init__(self) -> None:
        super().__init__()
        self.logger = logging.getLogger(__name__)

    def __repr__(self) -> str:
        return f"{self.name} ({self.__class__.__name__})"

    @property
    def edges(self) -> dict[str, Any]:
        return {}

    @property
    def name(self) -> str:
        return "{{ raw_title }}"

    @property
    def title(self) -> Element:
        return self.shadowstep.get_element({{ title_locator | pretty_dict }})

{% for prop in properties %}
    @property
    def {{ prop.name }}(self) -> Element:
    {% if prop.anchor_name %}
        {% if prop.depth == 0 %}
        return self.{{ prop.anchor_name }}.get_sibling(
            {{ prop.locator | pretty_dict(base_indent=12) }}
        )
        {% else %}
        return self.{{ prop.anchor_name }}.get_cousin(
            {{ prop.locator | pretty_dict(base_indent=12) }})
        {% endif %}
    {% elif prop.sibling %}
        return self.{{ prop.base_name }}.get_sibling({{ prop.summary_id | pretty_dict(base_indent=12) }})
    {% elif prop.via_recycler %}
        return self.recycler.scroll_to_element({{ prop.locator | pretty_dict(base_indent=12) }})
    {% else %}
        return self.shadowstep.get_element({{ prop.locator | pretty_dict(base_indent=12) }})
    {% endif %}

{% endfor %}
{% if need_recycler %}
    @property
    def recycler(self) -> Element:
        return self.shadowstep.get_element({{ recycler_locator | pretty_dict(base_indent=12) }})
{% endif %}

    @current_page()
    def is_current_page(self) -> bool:
        try:
            return self.title.is_visible()
        except Exception as error:
            self.logger.error(error)
            return False
