{"version":3,"file":"main.js","mappings":"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","sources":["webpack://djangocms-aldryn-forms/./aldryn_forms/static/aldryn_forms/js/src/form.js","webpack://djangocms-aldryn-forms/./aldryn_forms/static/aldryn_forms/js/src/main.js"],"sourcesContent":["/* global gettext */\n\n// Prevent a situation when the translation is not implemented.\nif (typeof gettext !== \"function\") {\n\n    const django = {}\n\n    django.catalog = {}\n\n    window.gettext = function(msgid) {\n        const value = django.catalog[msgid]\n        if (typeof value === 'undefined') {\n          return msgid\n        } else {\n          return (typeof value === 'string') ? value : value[0]\n        }\n    }\n    window.ngettext = function(singular, plural, count) {\n        const value = django.catalog[singular]\n        if (typeof value === 'undefined') {\n          return (count == 1) ? singular : plural\n        } else {\n          return value.constructor === Array ? value[django.pluralidx(count)] : value\n        }\n      }\n    window.interpolate = function(fmt, obj, named) {\n        if (named) {\n          return fmt.replace(/%\\(\\w+\\)s/g, function(match){return String(obj[match.slice(2,-2)])})\n        } else {\n          return fmt.replace(/%s/g, function(match){return String(obj.shift())})\n        }\n    }\n}\n\n\nexport function toggleSubmitButton(form) {\n    const requiredInputs = form.querySelectorAll('input[required], select[required], textarea[required], input[type=file]')\n\n    const validateFieldset = () => {\n        const allValid = Array.from(requiredInputs).every(input => input.checkValidity())\n        if (form.dataset.toggle_submit) {\n            form.dataset.toggle_submit(allValid)\n        } else {\n            for(const submit of form.querySelectorAll('[type=\"submit\"]')) {\n                submit.disabled = !allValid\n            }\n        }\n    }\n    // Add event listeners to all required inputs\n    requiredInputs.forEach(input => {\n        input.addEventListener('input', validateFieldset)   // for text inputs\n        input.addEventListener('change', validateFieldset)  // for checkboxes, selects, etc.\n    })\n\n    // Disable submit buttons.\n    if (form.dataset.toggle_submit) {\n        form.dataset.toggle_submit(false)\n    } else {\n        for(const submit of form.querySelectorAll('[type=\"submit\"]')) {\n            submit.disabled = true\n        }\n    }\n}\n\n\nexport function handleFormRequiredCheckbox(event) {\n    // The event.target is a checkbox - this is the result of selector: .form-required input[type=checkbox]\n    const form = event.target.closest(\"form\")\n    if (form) {\n        // Remove error messages if there are any.\n        for (const element of form.querySelectorAll(\".aldryn-forms-required-msg, .aldryn-forms-submit-msg\")) {\n            element.parentNode.removeChild(element)\n        }\n        // Enable submit button.\n        for (const button of form.querySelectorAll('[type=submit]')) {\n            button.disabled = false\n            button.readOnly = false\n        }\n    }\n}\n\nexport function disableButtonSubmit(event, display_message) {\n    // Disable button submit to prevent user click more than once.\n    event.target.blur()\n    for (const button of event.target.querySelectorAll('[type=submit]')) {\n        button.disabled = true\n        button.readOnly = true\n        if (display_message) {\n            const form = event.target.closest(\"form\")\n            const message = form && form.dataset.message_wait ? form.dataset.message_wait : gettext(\"Please wait. Submitting form...\")\n            button.insertAdjacentHTML(\n                'afterend',\n                '<div class=\"text-danger aldryn-forms aldryn-forms-submit-msg\">' + message + '</div>')\n        }\n    }\n}\n\n\nfunction enableButtonSubmit(form) {\n    for (const button of form.querySelectorAll('[type=submit]')) {\n        button.disabled = false\n        button.readOnly = false\n    }\n    for (const msg of form.querySelectorAll('.aldryn-forms-submit-msg')) {\n        msg.remove()\n    }\n}\n\n\nexport function handleRequiredFields(event) {\n    // Handle required fields.\n    let requiredFieldsFulfilled = true\n    for (const checkboxset of this.getElementsByClassName(\"form-required\")) {\n        const chosen = checkboxset.querySelectorAll(\"input[type=checkbox]:checked\").length\n        if (chosen < parseInt(checkboxset.dataset.required_min)) {\n            requiredFieldsFulfilled = false\n            checkboxset.insertAdjacentHTML(\n                'afterend',\n                '<div class=\"text-danger aldryn-forms aldryn-forms-required-msg\">'\n                + interpolate(\n                    ngettext(\n                        \"You have to choose at least %(value)s option (chosen %(chosen)s).\",\n                        \"You have to choose at least %(value)s options (chosen %(chosen)s).\"\n                    ), {\n                        value: checkboxset.dataset.required_min,\n                        chosen: chosen\n                    }, true)\n                + '</div>')\n        }\n    }\n    // Do not submit the form if any required fields are missing.\n    if (requiredFieldsFulfilled) {\n        // Display a message to inform the user that the form has been submitted.\n        for (const button of this.querySelectorAll('[type=submit]')) {\n            button.insertAdjacentHTML(\n                'afterend',\n                '<div class=\"text-danger aldryn-forms aldryn-forms-submit-msg\">'\n                + gettext(\"Please wait. Submitting form...\")\n                + '</div>')\n        }\n    } else {\n        // Some required value is not set.\n        event.preventDefault()\n        for (const button of this.querySelectorAll('[type=submit]')) {\n            button.insertAdjacentHTML(\n                'afterend', '<div class=\"text-danger aldryn-forms aldryn-forms-submit-msg\">'\n                + gettext(\"Correct the errors first, please.\") + '</div>')\n        }\n    }\n}\n\nfunction displayNodeMessages(node, messages, class_name) {\n    node.insertAdjacentHTML(\n        'afterend',\n        `<ul class=\"messages aldryn-forms-post-message\"><li class=\"${class_name}\">`\n        + messages.join(`</li><li class=\"${class_name}\">`) + '</ul>') + '</ul>'\n}\n\nfunction displayMessage(form, message, class_name) {\n    for (const button of form.querySelectorAll('[type=submit]')) {\n        button.insertAdjacentHTML(\n            'afterend',\n            `<ul class=\"messages aldryn-forms-post-message\">\n                <li class=\"${class_name}\">${message}</li>\n            </ul>`)\n    }\n}\n\nfunction removeMessages(form) {\n    for (const node of form.querySelectorAll('.aldryn-forms-post-message')) {\n        node.remove()\n    }\n}\n\nfunction humanFileSize(size) {\n    var i = size == 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024));\n    return +((size / Math.pow(1024, i)).toFixed(2)) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];\n}\n\nfunction getAttachmentsList(nodeInputFile) {\n    const frame = nodeInputFile.closest(\".\" + uploadFilesFrame)\n    return frame.querySelector(\"ul.upload-file-names\")\n}\n\nfunction handleChangeFilesList(nodeInputFile) {\n\n    const listFileNames = getAttachmentsList(nodeInputFile)\n    const form = nodeInputFile.closest(\"form\")\n    const asyncFetch = form.classList.contains(\"submit-by-fetch\")\n\n    let attachments = 0\n    let total_size = 0\n\n    if (asyncFetch && nodeInputFile.multiple) {\n        for(const item of listFileNames.querySelectorAll(\"li\")) {\n            attachments += 1\n            total_size += item.file.size\n        }\n    } else {\n        listFileNames.innerHTML = \"\"\n    }\n\n    const accept = nodeInputFile.accept.length ? nodeInputFile.accept.split(',') : []\n    const extensions = [],\n        mimetypes = [],\n        maim_mimes = [];\n\n    const appendError = (listItem, message, name, text) => {\n        const msg = document.createElement(\"div\")\n        msg.classList.add(name)\n        msg.appendChild(document.createTextNode(text))\n        message.appendChild(msg)\n        listItem.classList.add(\"error\")\n        listItem.classList.add(name)\n        nodeInputFile.setCustomValidity(text)\n    }\n\n    if (nodeInputFile.accept.length) {\n        for (let i = 0; i < accept.length; i++) {\n            if (accept[i][0] === '.') {\n                extensions.push(accept[i])\n            } else {\n                const mtypes = accept[i].split('/')\n                if (mtypes[1] === '*') {\n                    maim_mimes.push(mtypes[0])\n                } else {\n                    mimetypes.push(accept[i])\n                }\n            }\n        }\n    }\n\n    console.log(\"extensions:\", extensions)\n    console.log(\"mimetypes:\", mimetypes)\n\n    let number_items_exceeded = false\n\n    for (let i = 0; i < nodeInputFile.files.length; i++) {\n        attachments += 1\n\n        const listItem = document.createElement(\"li\")\n        listItem.file = nodeInputFile.files[i]\n\n        const file_name = nodeInputFile.files[i].name\n\n        const status = document.createElement(\"div\")\n        status.classList.add(\"status\")\n        listItem.appendChild(status)\n\n        const content = document.createElement(\"div\")\n        content.classList.add(\"content\")\n        listItem.appendChild(content)\n\n        const name = document.createElement(\"div\")\n        name.classList.add(\"file-name\")\n        name.title = gettext(\"File size\") + \" \" + humanFileSize(nodeInputFile.files[i].size)\n        name.appendChild(document.createTextNode(file_name))\n        content.appendChild(name)\n\n        if (asyncFetch) {\n            const remove = document.createElement(\"div\")\n            remove.classList.add(\"remove\")\n            const trash = document.createElement(\"img\")\n            trash.src = form.dataset.icon_trash ? form.dataset.icon_trash : \"/static/aldryn_forms/img/trash.svg\"\n            trash.classList.add(\"trash\")\n            trash.style.cursor = \"pointer\"\n            trash.alt = trash.title = gettext(\"Remove file.\")\n            remove.appendChild(trash)\n            listItem.appendChild(remove)\n            trash.addEventListener(\"click\", removeAttachment)\n        }\n\n        const message = document.createElement(\"div\")\n        message.classList.add(\"error\")\n        content.appendChild(message)\n\n        let valid = true\n        if (nodeInputFile.dataset.max_files !== null && attachments > nodeInputFile.dataset.max_files) {\n            valid = false\n            appendError(listItem, message, \"files-limit\", gettext('This file exceeds the uploaded files limit.'))\n            number_items_exceeded = true\n        }\n\n        let is_expected_type = accept.length ? false : true\n\n        if (!is_expected_type && extensions) {\n            const ext = file_name.toLowerCase().match(/\\.\\w+$/)\n            if (ext !== null && extensions.includes(ext[0])) {\n                is_expected_type = true\n            }\n        }\n        if (!is_expected_type && mimetypes) {\n            if (mimetypes.includes(nodeInputFile.files[i].type)) {\n                is_expected_type = true\n            }\n        }\n        if (!is_expected_type && maim_mimes) {\n            const mt = nodeInputFile.files[i].type.split('/')\n            if (maim_mimes.includes(mt[0])) {\n                is_expected_type = true\n            }\n        }\n\n        if (!is_expected_type) {\n            valid = false\n            appendError(listItem, message, \"file-type\", gettext('The file type is not among the accpeted types.'))\n        }\n\n        total_size += nodeInputFile.files[i].size\n        if (nodeInputFile.dataset.max_size !== null && total_size > nodeInputFile.dataset.max_size) {\n            valid = false\n            appendError(listItem, message, \"file-size\", gettext('The total size of all files has exceeded the specified limit.'))\n        }\n\n        const icon = document.createElement(\"img\")\n        if (valid) {\n            icon.src = form.dataset.icon_attach ? form.dataset.icon_attach : \"/static/aldryn_forms/img/attach-file.svg\"\n        } else {\n            icon.src = form.dataset.icon_error ? form.dataset.icon_error : \"/static/aldryn_forms/img/exclamation-mark.svg\"\n        }\n        status.appendChild(icon)\n\n        listFileNames.appendChild(listItem)\n\n        if (number_items_exceeded) {\n            break\n        }\n    }\n}\n\nfunction removeAttachment(event) {\n    let nodeInputFile\n    try {\n        const listFileNames = event.target.closest(\"ul\")\n        const frame = listFileNames.closest(\".\" + uploadFilesFrame)\n        nodeInputFile = frame.querySelector(\"input[type=file]\")\n    } catch (error) {\n        console.error(error)\n        return\n    }\n    event.target.closest(\"li\").remove()\n\n    const listFileNames = getAttachmentsList(nodeInputFile)\n\n    // Recalculate all items for limit and size.\n    let total_size = 0\n    let attachments = 0\n    for (const nodeLi of listFileNames.querySelectorAll(\"li\")) {\n        if (nodeLi.classList.contains(\"files-limit\") && nodeInputFile.dataset.max_files !== null && attachments < nodeInputFile.dataset.max_files) {\n            removeError(nodeLi, \"files-limit\")\n        } else {\n            attachments += 1\n        }\n        total_size += nodeLi.file.size\n        if (nodeLi.classList.contains(\"file-size\") && nodeInputFile.dataset.max_size !== null && total_size < nodeInputFile.dataset.max_size) {\n            total_size -= nodeLi.file.size\n            removeError(nodeLi, \"file-size\")\n        }\n    }\n    if (!listFileNames.querySelectorAll(\"li.error\").length) {\n        nodeInputFile.setCustomValidity(\"\")\n        nodeInputFile.value = null\n        // Trigger event Change to validate form.\n        nodeInputFile.dispatchEvent(new Event(\"change\"))\n    }\n}\n\n\nfunction removeError(nodeLi, name) {\n    for (const node of nodeLi.querySelectorAll(\".content > .error > div.\" + name)) {\n        node.remove()\n    }\n    nodeLi.classList.remove(name)\n    if (!nodeLi.querySelectorAll(\".content > .error > div\").length) {\n        nodeLi.classList.remove(\"error\")\n        for (const node of nodeLi.querySelectorAll(\".status img\")) {\n            node.src = \"/static/aldryn_forms/img/attach-file.svg\"\n        }\n    }\n}\n\n\nconst uploadFilesFrame = \"upload-files-frame\"\n\n\nfunction dragAndDropFields(input) {\n    input.classList.add(\"check-validity\")\n    const uploadFileFrame = document.createElement(\"div\")\n    uploadFileFrame.classList.add(uploadFilesFrame)\n    if (input.classList.contains(\"drag-and-drop\")) {\n        uploadFileFrame.classList.add(\"drag-and-drop\")\n    }\n    const dragAndDrop = document.createElement(\"div\")\n    dragAndDrop.classList.add(\"drag-and-drop\")\n    uploadFileFrame.appendChild(dragAndDrop)\n\n    const form = input.closest(\"form\")\n\n    if (input.classList.contains(\"drag-and-drop\")) {\n        const label = document.createElement(\"div\")\n        label.classList.add(\"label\")\n\n        const icon = document.createElement(\"img\")\n        icon.src = form.dataset.icon_upload ? form.dataset.icon_upload : \"/static/aldryn_forms/img/upload-one.svg\"\n        label.appendChild(icon)\n\n        if (input.placeholder) {\n            const title = document.createElement(\"h4\")\n            title.appendChild(document.createTextNode(input.placeholder))\n            label.appendChild(title)\n        }\n        let labelText\n        if (input.dataset.max_size && input.dataset.max_files) {\n            labelText = interpolate(ngettext(\n                \"Max. %s file with a total size of max. %s\",\n                \"Max. %s files with a total size of max. %s\"\n            ), [input.dataset.max_files, humanFileSize(input.dataset.max_size)])\n        } else if (input.dataset.max_size) {\n            labelText = gettext(\"Max. size\") + \" \" + humanFileSize(input.dataset.max_size)\n        }\n        if (labelText) {\n            const description = document.createElement(\"div\")\n            description.appendChild(document.createTextNode(labelText))\n            label.appendChild(description)\n        }\n        dragAndDrop.appendChild(label)\n    }\n\n    let helpText\n    if (input.nextElementSibling.classList.contains(\"help-text\")) {\n        helpText = input.nextElementSibling\n        helpText.parentElement.removeChild(helpText)\n    }\n\n    input.parentNode.insertBefore(uploadFileFrame, input)\n    input.parentElement.removeChild(input)\n    dragAndDrop.appendChild(input)\n\n    if (helpText) {\n        uploadFileFrame.appendChild(helpText)\n    }\n\n    // <ul class=\"upload-file-names\"></ul>\n    const listFileNames = document.createElement(\"ul\")\n    listFileNames.classList.add(\"upload-file-names\")\n    uploadFileFrame.appendChild(listFileNames)\n\n    form.classList.add(\"adjust-uploads\")\n    input.addEventListener('change', (event) => handleChangeFilesList(event.target), false)\n}\n\n\nexport function enableFieldUploadDragAndDrop() {\n    for (const input of document.querySelectorAll('input[type=file]')) {\n        if (input.dataset.enable_js !== undefined) {\n            dragAndDropFields(input)\n        }\n    }\n}\n\nfunction adjustUploads(form) {\n    const formData = new FormData(form)\n    const attachment_names = []\n    for (const pair of formData.entries()) {\n        if (pair[1] instanceof File && !attachment_names.includes(pair[0])) {\n            attachment_names.push(pair[0])\n        }\n    }\n    for(const name of attachment_names) {\n        formData.delete(name)\n    }\n    for(const name of attachment_names) {\n        const input = form.querySelector(`input[name=${name}]`)\n        if (!input) {\n            continue\n        }\n        const frame = input.closest(\".\" + uploadFilesFrame)\n        if (!frame) {\n            continue\n        }\n        for(const attachment of frame.querySelectorAll(\".upload-file-names li\")) {\n            formData.append(name, attachment.file)\n        }\n    }\n    return formData\n}\n\n\nexport async function sendData(form) {\n    removeMessages(form)\n    const formData = form.classList.contains(\"adjust-uploads\") ? adjustUploads(form) : new FormData(form)\n    try {\n        const response = await fetch(form.action, {\n            method: \"POST\",\n            body: formData,\n            headers: {\n                \"X-Requested-With\": \"XMLHttpRequest\",\n            },\n        })\n        const data = await response.json()\n        console.log(data)\n        if (data.status === \"ERROR\") {\n            for (const name in data.form) {\n                if (name === \"__all__\") {\n                    const button = form.querySelector('[type=submit]')\n                    if (button) {\n                        displayNodeMessages(button, data.form[name], \"error\")\n                    } else {\n                        displayMessage(form, data.form[name], \"error\")\n                    }\n                } else {\n                    const input = form.querySelector(`input[name=\"${name}\"]`)\n                    if (input) {\n                        displayNodeMessages(input, data.form[name], \"error\")\n                    }\n                }\n            }\n        } else {\n            if (form.dataset.run_next) {\n                document[form.dataset.run_next](form, data)\n            } else {\n                displayMessage(form, data.message, \"success\")\n            }\n        }\n    } catch (e) {\n        displayMessage(form, e, \"error\")\n    } finally {\n        enableButtonSubmit(form)\n    }\n}\n\n\nexport function enableSubmitFromByFetch() {\n    for (const form of document.querySelectorAll('form.submit-by-fetch')) {\n        form.addEventListener(\"submit\", (event) => {\n            event.preventDefault()\n            sendData(form)\n        })\n    }\n}\n","import {\n    enableFieldUploadDragAndDrop,\n    disableButtonSubmit,\n    handleRequiredFields,\n    handleFormRequiredCheckbox,\n    enableSubmitFromByFetch,\n    sendData,\n    toggleSubmitButton\n} from './form'\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    enableFieldUploadDragAndDrop()\n    enableSubmitFromByFetch()\n\n    // Disable button submit to prevent user click more than once.\n    // Do not submit the form if any required fields are missing.\n    for (const form of document.getElementsByTagName(\"form\")) {\n        if (!form.classList.contains(\"skip-disable-submit\")) {\n            form.addEventListener('submit', (event) => disableButtonSubmit(event, false))\n        }\n        if (!form.getAttribute(\"novalidate-checkbox-groups\")) {\n            // Enable submit button if required were set.\n            form.addEventListener('submit', handleRequiredFields)\n            for (const element of form.querySelectorAll(\".form-required input[type=checkbox]\")) {\n                element.addEventListener('click', handleFormRequiredCheckbox)\n            }\n        }\n        // Note: Must be the last in a series of checks!\n        if (form.classList.contains(\"toggle-submit\")) {\n            toggleSubmitButton(form)\n        }\n    }\n})\n\n// Allow access from the entire document.\ndocument.AldrynFormsSendData = sendData\n"],"names":["gettext","django","window","msgid","value","catalog","ngettext","singular","plural","count","constructor","Array","pluralidx","interpolate","fmt","obj","named","replace","match","String","slice","shift","toggleSubmitButton","form","requiredInputs","querySelectorAll","validateFieldset","allValid","from","every","input","checkValidity","dataset","toggle_submit","submit","disabled","forEach","addEventListener","handleFormRequiredCheckbox","event","target","closest","element","parentNode","removeChild","button","readOnly","disableButtonSubmit","display_message","blur","message","message_wait","insertAdjacentHTML","handleRequiredFields","requiredFieldsFulfilled","checkboxset","this","getElementsByClassName","chosen","length","parseInt","required_min","preventDefault","displayNodeMessages","node","messages","class_name","join","displayMessage","humanFileSize","size","i","Math","floor","log","pow","toFixed","getAttachmentsList","nodeInputFile","uploadFilesFrame","querySelector","removeAttachment","error","console","remove","listFileNames","total_size","attachments","nodeLi","classList","contains","max_files","removeError","file","max_size","setCustomValidity","dispatchEvent","Event","name","src","dragAndDropFields","add","uploadFileFrame","document","createElement","dragAndDrop","appendChild","label","icon","icon_upload","placeholder","title","createTextNode","labelText","description","helpText","nextElementSibling","parentElement","insertBefore","asyncFetch","multiple","item","innerHTML","accept","split","extensions","mimetypes","maim_mimes","appendError","listItem","text","msg","push","mtypes","number_items_exceeded","files","file_name","status","content","trash","icon_trash","style","cursor","alt","valid","is_expected_type","ext","toLowerCase","includes","type","mt","icon_attach","icon_error","handleChangeFilesList","async","sendData","removeMessages","formData","FormData","attachment_names","pair","entries","File","delete","frame","attachment","append","adjustUploads","response","fetch","action","method","body","headers","data","json","run_next","e","enableButtonSubmit","undefined","enable_js","enableFieldUploadDragAndDrop","enableSubmitFromByFetch","getElementsByTagName","getAttribute","AldrynFormsSendData"],"sourceRoot":""}