[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "concurry"
dynamic = ["version"]
authors = [
    { name = "Abhishek Divekar", email = "adivekar@utexas.edu" }
]
description = "A unified, delightful Python concurrency library"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
license-files = ["LICENSE"]
keywords = ["concurrency", "parallel", "async", "threading", "multiprocessing", "ray"]
dependencies = [
    "tqdm>=4.60.0",
    "cloudpickle>=2.0.0",
    "morphic",
]

[project.optional-dependencies]
ray = [
    "ray>=2.0.0",
    "cloudpickle>=2.0.0",
]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-timeout>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.900",
    "aiofiles>=25.0",
    "aiohttp>=3.13",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "mike>=2.0.0",
]
all = [
    "morphic[all]",
    "concurry[dev,docs,ray]",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true

[tool.pytest.ini_options]
pythonpath = ["src"]
markers = [
    "performance: marks tests as performance tests (slow, may be flaky on CI)",
]

[tool.ruff]
line-length = 110
fix = true
force-exclude = true

[tool.ruff.lint]
fixable = [
    "I",    # Add all rules under isort linter: https://docs.astral.sh/ruff/rules/#isort-i
    "W",    # Add all rules under whitespace: https://docs.astral.sh/ruff/rules/#warning-w
    "E401", # multiple-imports-on-one-line: https://docs.astral.sh/ruff/rules/multiple-imports-on-one-line/
    "E713", # not-in-test: https://docs.astral.sh/ruff/rules/not-in-test/
    "E721", # type-comparison: https://docs.astral.sh/ruff/rules/type-comparison/
    "E722", # bare-except: https://docs.astral.sh/ruff/rules/bare-except/
    "F401", # unused-import: https://docs.astral.sh/ruff/rules/unused-import/
    "F541", # f-string-missing-placeholders: https://docs.astral.sh/ruff/rules/f-string-missing-placeholders/
    "F811", # redefined-while-unused: https://docs.astral.sh/ruff/rules/redefined-while-unused/
    "F841", # unused-variable: https://docs.astral.sh/ruff/rules/unused-variable/
]
ignore = [
    ## Ignored because it makes the code too verbose:
    "E731", # lambda-assignment: https://docs.astral.sh/ruff/rules/lambda-assignment/
    "E741", # ambiguous-variable-name: https://docs.astral.sh/ruff/rules/ambiguous-variable-name/

    ## Ignored because it causes no harm (and is needed sometimes):
    "F841",     # unused-variable: https://docs.astral.sh/ruff/rules/unused-variable/
]

[tool.black]
line-length = 110
target-version = ["py310", "py311", "py312"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true