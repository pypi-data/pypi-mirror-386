# coding: utf-8

"""
    Neurograph Core

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from neurograph.v1.models.db_my_client import DbMyClient
from neurograph.v1.models.db_my_org import DbMyOrg
from neurograph.v1.models.pgtype_timestamp import PgtypeTimestamp
from typing import Optional, Set
from typing_extensions import Self

class AdminUserDetailResponse(BaseModel):
    """
    AdminUserDetailResponse
    """ # noqa: E501
    clients: Optional[List[DbMyClient]] = None
    display_name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    error: Optional[StrictStr] = None
    firebase_uid: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    ng_roles: Optional[List[StrictStr]] = None
    orgs: Optional[List[DbMyOrg]] = None
    ts_created: Optional[PgtypeTimestamp] = None
    ts_updated: Optional[PgtypeTimestamp] = None
    __properties: ClassVar[List[str]] = ["clients", "display_name", "email", "error", "firebase_uid", "id", "ng_roles", "orgs", "ts_created", "ts_updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminUserDetailResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clients (list)
        _items = []
        if self.clients:
            for _item_clients in self.clients:
                if _item_clients:
                    _items.append(_item_clients.to_dict())
            _dict['clients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in orgs (list)
        _items = []
        if self.orgs:
            for _item_orgs in self.orgs:
                if _item_orgs:
                    _items.append(_item_orgs.to_dict())
            _dict['orgs'] = _items
        # override the default output from pydantic by calling `to_dict()` of ts_created
        if self.ts_created:
            _dict['ts_created'] = self.ts_created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ts_updated
        if self.ts_updated:
            _dict['ts_updated'] = self.ts_updated.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminUserDetailResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clients": [DbMyClient.from_dict(_item) for _item in obj["clients"]] if obj.get("clients") is not None else None,
            "display_name": obj.get("display_name"),
            "email": obj.get("email"),
            "error": obj.get("error"),
            "firebase_uid": obj.get("firebase_uid"),
            "id": obj.get("id"),
            "ng_roles": obj.get("ng_roles"),
            "orgs": [DbMyOrg.from_dict(_item) for _item in obj["orgs"]] if obj.get("orgs") is not None else None,
            "ts_created": PgtypeTimestamp.from_dict(obj["ts_created"]) if obj.get("ts_created") is not None else None,
            "ts_updated": PgtypeTimestamp.from_dict(obj["ts_updated"]) if obj.get("ts_updated") is not None else None
        })
        return _obj


