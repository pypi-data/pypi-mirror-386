# coding: utf-8

"""
    Neurograph Core

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from neurograph.v1.models.db_account_organization_brand import DbAccountOrganizationBrand
from neurograph.v1.models.db_user_org_role import DbUserOrgRole
from typing import Optional, Set
from typing_extensions import Self

class DbMyOrg(BaseModel):
    """
    DbMyOrg
    """ # noqa: E501
    brand: Optional[DbAccountOrganizationBrand] = None
    description: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    image_url: Optional[StrictStr] = None
    is_active: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    roles: Optional[List[DbUserOrgRole]] = None
    url: Optional[StrictStr] = None
    workbench_is_active: Optional[StrictBool] = None
    workbench_url: Optional[StrictStr] = None
    workbench_url_ext: Optional[StrictStr] = None
    workbench_version_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["brand", "description", "id", "image_url", "is_active", "name", "roles", "url", "workbench_is_active", "workbench_url", "workbench_url_ext", "workbench_version_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DbMyOrg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of brand
        if self.brand:
            _dict['brand'] = self.brand.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DbMyOrg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": DbAccountOrganizationBrand.from_dict(obj["brand"]) if obj.get("brand") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "image_url": obj.get("image_url"),
            "is_active": obj.get("is_active"),
            "name": obj.get("name"),
            "roles": [DbUserOrgRole.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "url": obj.get("url"),
            "workbench_is_active": obj.get("workbench_is_active"),
            "workbench_url": obj.get("workbench_url"),
            "workbench_url_ext": obj.get("workbench_url_ext"),
            "workbench_version_id": obj.get("workbench_version_id")
        })
        return _obj


