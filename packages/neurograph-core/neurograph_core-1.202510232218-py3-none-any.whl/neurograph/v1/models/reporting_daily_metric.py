# coding: utf-8

"""
    Neurograph Core

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReportingDailyMetric(BaseModel):
    """
    ReportingDailyMetric
    """ # noqa: E501
    avg_lifetime_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="DEPRECATED: Use WinsorizedAvgLTV instead")
    avg_ltv_original: Optional[Union[StrictFloat, StrictInt]] = None
    customers_with_orders: Optional[StrictInt] = None
    data_quality_flag: Optional[StrictStr] = None
    iqr_avg_ltv: Optional[Union[StrictFloat, StrictInt]] = None
    median_ltv: Optional[Union[StrictFloat, StrictInt]] = None
    outlier_count: Optional[StrictInt] = None
    p25_ltv: Optional[Union[StrictFloat, StrictInt]] = None
    p75_ltv: Optional[Union[StrictFloat, StrictInt]] = None
    persona_name: Optional[StrictStr] = None
    total_customers: Optional[StrictInt] = None
    trimmed_avg_ltv: Optional[Union[StrictFloat, StrictInt]] = None
    winsorized_avg_ltv: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["avg_lifetime_value", "avg_ltv_original", "customers_with_orders", "data_quality_flag", "iqr_avg_ltv", "median_ltv", "outlier_count", "p25_ltv", "p75_ltv", "persona_name", "total_customers", "trimmed_avg_ltv", "winsorized_avg_ltv"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportingDailyMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportingDailyMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avg_lifetime_value": obj.get("avg_lifetime_value"),
            "avg_ltv_original": obj.get("avg_ltv_original"),
            "customers_with_orders": obj.get("customers_with_orders"),
            "data_quality_flag": obj.get("data_quality_flag"),
            "iqr_avg_ltv": obj.get("iqr_avg_ltv"),
            "median_ltv": obj.get("median_ltv"),
            "outlier_count": obj.get("outlier_count"),
            "p25_ltv": obj.get("p25_ltv"),
            "p75_ltv": obj.get("p75_ltv"),
            "persona_name": obj.get("persona_name"),
            "total_customers": obj.get("total_customers"),
            "trimmed_avg_ltv": obj.get("trimmed_avg_ltv"),
            "winsorized_avg_ltv": obj.get("winsorized_avg_ltv")
        })
        return _obj


