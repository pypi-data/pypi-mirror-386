# coding: utf-8

"""
    Neurograph Core

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class KnowledgeEnrichmentArtifactCreateRequest(BaseModel):
    """
    KnowledgeEnrichmentArtifactCreateRequest
    """ # noqa: E501
    client_id: Optional[StrictStr] = None
    cloud_run_job_name: Optional[StrictStr] = None
    confidence: Optional[Union[StrictFloat, StrictInt]] = None
    config_entity_id: Optional[StrictStr] = None
    config_snapshot: Optional[Dict[str, Any]] = None
    input_params: Optional[Dict[str, Any]] = None
    job_name: Optional[StrictStr] = None
    kind: Optional[StrictStr] = None
    output_json: Optional[Dict[str, Any]] = None
    output_schema_id: Optional[StrictStr] = None
    output_text: Optional[StrictStr] = None
    spec_version: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    subject_entity_id: Optional[StrictStr] = None
    supersedes_artifact_id: Optional[StrictInt] = None
    task_name: Optional[StrictStr] = None
    task_queue_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["client_id", "cloud_run_job_name", "confidence", "config_entity_id", "config_snapshot", "input_params", "job_name", "kind", "output_json", "output_schema_id", "output_text", "spec_version", "status", "subject_entity_id", "supersedes_artifact_id", "task_name", "task_queue_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KnowledgeEnrichmentArtifactCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KnowledgeEnrichmentArtifactCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_id": obj.get("client_id"),
            "cloud_run_job_name": obj.get("cloud_run_job_name"),
            "confidence": obj.get("confidence"),
            "config_entity_id": obj.get("config_entity_id"),
            "config_snapshot": obj.get("config_snapshot"),
            "input_params": obj.get("input_params"),
            "job_name": obj.get("job_name"),
            "kind": obj.get("kind"),
            "output_json": obj.get("output_json"),
            "output_schema_id": obj.get("output_schema_id"),
            "output_text": obj.get("output_text"),
            "spec_version": obj.get("spec_version"),
            "status": obj.get("status"),
            "subject_entity_id": obj.get("subject_entity_id"),
            "supersedes_artifact_id": obj.get("supersedes_artifact_id"),
            "task_name": obj.get("task_name"),
            "task_queue_name": obj.get("task_queue_name")
        })
        return _obj


