# coding: utf-8

"""
    Neurograph Core

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkbenchWorkbenchUrlCheckResponse(BaseModel):
    """
    WorkbenchWorkbenchUrlCheckResponse
    """ # noqa: E501
    background_img_url: Optional[StrictStr] = None
    color1: Optional[StrictStr] = None
    color2: Optional[StrictStr] = None
    color3: Optional[StrictStr] = None
    color4: Optional[StrictStr] = None
    color5: Optional[StrictStr] = None
    error: Optional[StrictStr] = None
    logo_img_url: Optional[StrictStr] = None
    primary_color: Optional[StrictStr] = None
    secondary_color: Optional[StrictStr] = None
    tertiary_color: Optional[StrictStr] = None
    workbench_name: Optional[StrictStr] = None
    workbench_version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["background_img_url", "color1", "color2", "color3", "color4", "color5", "error", "logo_img_url", "primary_color", "secondary_color", "tertiary_color", "workbench_name", "workbench_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkbenchWorkbenchUrlCheckResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkbenchWorkbenchUrlCheckResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "background_img_url": obj.get("background_img_url"),
            "color1": obj.get("color1"),
            "color2": obj.get("color2"),
            "color3": obj.get("color3"),
            "color4": obj.get("color4"),
            "color5": obj.get("color5"),
            "error": obj.get("error"),
            "logo_img_url": obj.get("logo_img_url"),
            "primary_color": obj.get("primary_color"),
            "secondary_color": obj.get("secondary_color"),
            "tertiary_color": obj.get("tertiary_color"),
            "workbench_name": obj.get("workbench_name"),
            "workbench_version": obj.get("workbench_version")
        })
        return _obj


