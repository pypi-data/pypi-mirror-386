# coding: utf-8

"""
    Neurograph Core

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from neurograph.v1.models.knowledge_order_response import KnowledgeOrderResponse

class TestKnowledgeOrderResponse(unittest.TestCase):
    """KnowledgeOrderResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> KnowledgeOrderResponse:
        """Test KnowledgeOrderResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `KnowledgeOrderResponse`
        """
        model = KnowledgeOrderResponse()
        if include_optional:
            return KnowledgeOrderResponse(
                data = [
                    neurograph.v1.models.db/knowledge_order.db.KnowledgeOrder(
                        billing_address_hash = neurograph.v1.models.pgtype/text.pgtype.Text(
                            string = '', 
                            valid = True, ), 
                        billing_address_json = [
                            56
                            ], 
                        cancelled_at = neurograph.v1.models.pgtype/timestamp.pgtype.Timestamp(
                            infinity_modifier = 1, 
                            time = '', 
                            valid = True, ), 
                        channel = '', 
                        client_id = '', 
                        closed_at = neurograph.v1.models.pgtype/timestamp.pgtype.Timestamp(
                            time = '', 
                            valid = True, ), 
                        currency = '', 
                        customer_entity_id = neurograph.v1.models.pgtype/text.pgtype.Text(
                            string = '', 
                            valid = True, ), 
                        discount_amount = 1.337, 
                        email_at_order = , 
                        entity_id = '', 
                        ext_order_id = , 
                        ext_order_number = , 
                        ext_store_id = , 
                        financial_status = '', 
                        fulfillment_status = '', 
                        phone_at_order = , 
                        placed_at = , 
                        shipping_address_hash = , 
                        shipping_address_json = [
                            56
                            ], 
                        shipping_amount = 1.337, 
                        source_name = '', 
                        status = '', 
                        store_entity_id = , 
                        subtotal_amount = 1.337, 
                        tax_amount = 1.337, 
                        total_amount = 1.337, )
                    ],
                error = '',
                query = neurograph.v1.models.knowledge/order_query.knowledge.OrderQuery(
                    billing_address_hash = '', 
                    channel = '', 
                    client_id = '', 
                    currency = '', 
                    customer_entity_id = '', 
                    email_at_order = '', 
                    ext_order_id = '', 
                    ext_order_number = '', 
                    ext_store_id = '', 
                    financial_status = '', 
                    fulfillment_status = '', 
                    limit = 56, 
                    offset = 56, 
                    phone_at_order = '', 
                    placed_from = '', 
                    placed_to = '', 
                    shipping_address_hash = '', 
                    source_name = '', 
                    status = '', 
                    store_entity_id = '', 
                    total_max = '', 
                    total_min = '', )
            )
        else:
            return KnowledgeOrderResponse(
        )
        """

    def testKnowledgeOrderResponse(self):
        """Test KnowledgeOrderResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
