# coding: utf-8

"""
    Neurograph Core

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from neurograph.v1.models.db_my_org import DbMyOrg

class TestDbMyOrg(unittest.TestCase):
    """DbMyOrg unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DbMyOrg:
        """Test DbMyOrg
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DbMyOrg`
        """
        model = DbMyOrg()
        if include_optional:
            return DbMyOrg(
                brand = neurograph.v1.models.db/account_organization_brand.db.AccountOrganizationBrand(
                    background_img_url = '', 
                    color1 = '', 
                    color2 = '', 
                    color3 = '', 
                    color4 = '', 
                    color5 = '', 
                    id = 56, 
                    logo_img_url = '', 
                    org_id = '', 
                    primary_color = '', 
                    secondary_color = '', 
                    tertiary_color = '', ),
                description = '',
                id = '',
                image_url = '',
                is_active = True,
                name = '',
                roles = [
                    neurograph.v1.models.db/user_org_role.db.UserOrgRole(
                        id = 56, 
                        org_id = '', 
                        role_name = '', 
                        ts_created = neurograph.v1.models.pgtype/timestamp.pgtype.Timestamp(
                            infinity_modifier = 1, 
                            time = '', 
                            valid = True, ), )
                    ],
                url = '',
                workbench_is_active = True,
                workbench_url = '',
                workbench_url_ext = '',
                workbench_version_id = ''
            )
        else:
            return DbMyOrg(
        )
        """

    def testDbMyOrg(self):
        """Test DbMyOrg"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
