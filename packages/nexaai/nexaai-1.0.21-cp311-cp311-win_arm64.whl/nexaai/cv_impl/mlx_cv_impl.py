# Note: This code is generated by Cursor, not tested yet.

from typing import Optional, Union
import os

from nexaai.common import PluginID
from nexaai.cv import CVModel, CVModelConfig, CVResults
from nexaai.mlx_backend.cv.interface import CVModel as MLXCVInterface, create_cv_model


class MLXCVImpl(CVModel):
    def __init__(self):
        """Initialize MLX CV implementation."""
        super().__init__()
        self._mlx_cv = None

    @classmethod
    def _load_from(cls,
                   config: CVModelConfig,
                   plugin_id: Union[PluginID, str] = PluginID.MLX,
                   device_id: Optional[str] = None
        ) -> 'MLXCVImpl':
        """Load CV model from configuration using MLX backend."""
        try:
            # Get MLX config class
            from nexaai.mlx_backend.ml import CVModelConfig as MLXCVModelConfig
            
            # Convert our config to MLX format
            mlx_config = MLXCVModelConfig(
                capabilities=config.capabilities,
                det_model_path=config.det_model_path,
                rec_model_path=config.rec_model_path,
                model_path=config.model_path,
                system_library_path=config.system_library_path,
                backend_library_path=config.backend_library_path,
                extension_library_path=config.extension_library_path,
                config_file_path=config.config_file_path,
                char_dict_path=config.char_dict_path
            )
            
            # Create instance and load MLX CV model
            instance = cls()
            instance._mlx_cv = create_cv_model(mlx_config, device_id)
            
            return instance
        except Exception as e:
            raise RuntimeError(f"Failed to load MLX CV: {str(e)}")

    def eject(self):
        """Destroy the model and free resources."""
        if self._mlx_cv:
            self._mlx_cv.destroy()
            self._mlx_cv = None

    def infer(self, input_image_path: str) -> CVResults:
        """Perform inference on image."""
        if not self._mlx_cv:
            raise RuntimeError("MLX CV not loaded")
        
        try:
            # Use MLX CV inference
            result = self._mlx_cv.infer(input_image_path)
            
            # Convert MLX result to our format
            from nexaai.cv import CVResult
            
            our_results = []
            for mlx_result in result.results:
                our_result = CVResult(
                    image_paths=mlx_result.image_paths,
                    image_count=mlx_result.image_count,
                    class_id=mlx_result.class_id,
                    confidence=mlx_result.confidence,
                    bbox=mlx_result.bbox,
                    text=mlx_result.text,
                    embedding=mlx_result.embedding,
                    embedding_dim=mlx_result.embedding_dim
                )
                our_results.append(our_result)
            
            return CVResults(
                results=our_results,
                result_count=result.result_count
            )
            
        except Exception as e:
            raise RuntimeError(f"Failed to perform CV inference: {str(e)}")


