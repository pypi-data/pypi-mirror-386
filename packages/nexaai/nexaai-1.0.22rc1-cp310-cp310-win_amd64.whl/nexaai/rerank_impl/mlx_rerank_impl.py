# Note: This code is generated by Cursor, not tested yet.

from typing import List, Optional, Sequence, Union
import os

from nexaai.common import PluginID
from nexaai.rerank import Reranker, RerankConfig
from nexaai.mlx_backend.rerank.interface import Reranker as MLXRerankInterface, create_reranker


class MLXRerankImpl(Reranker):
    def __init__(self):
        """Initialize MLX Rerank implementation."""
        super().__init__()
        self._mlx_reranker = None

    @classmethod
    def _load_from(cls,
                   model_path: str,
                   model_name: str = None,
                   tokenizer_file: str = "tokenizer.json",
                   plugin_id: Union[PluginID, str] = PluginID.MLX,
                   device_id: Optional[str] = None
        ) -> 'MLXRerankImpl':
        """Load reranker model from local path using MLX backend."""
        try:
            # MLX Rerank interfaces are already imported
            
            # Create instance and load MLX reranker
            instance = cls()
            instance._mlx_reranker = create_reranker(
                model_path=model_path,
                # model_name=model_name, # FIXME: For MLX Reranker, model_name is not used
                tokenizer_path=tokenizer_file,
                device=device_id
            )
            
            # Load the model
            success = instance._mlx_reranker.load_model(model_path)
            if not success:
                raise RuntimeError("Failed to load MLX reranker model")
            
            return instance
        except Exception as e:
            raise RuntimeError(f"Failed to load MLX Reranker: {str(e)}")

    def eject(self):
        """Destroy the model and free resources."""
        if self._mlx_reranker:
            self._mlx_reranker.destroy()
            self._mlx_reranker = None

    def load_model(self, model_path: str, extra_data: Optional[str] = None) -> bool:
        """Load model from path."""
        if not self._mlx_reranker:
            raise RuntimeError("MLX Reranker not initialized")
        
        try:
            return self._mlx_reranker.load_model(model_path, extra_data)
        except Exception as e:
            raise RuntimeError(f"Failed to load reranker model: {str(e)}")

    def rerank(
        self,
        query: str,
        documents: Sequence[str],
        config: Optional[RerankConfig] = None,
    ) -> List[float]:
        """Rerank documents given a query."""
        if not self._mlx_reranker:
            raise RuntimeError("MLX Reranker not loaded")
        
        try:
            # Convert our config to MLX format if provided
            mlx_config = None
            if config:
                from nexaai.mlx_backend.rerank.interface import RerankConfig as MLXRerankConfig
                
                mlx_config = MLXRerankConfig(
                    batch_size=config.batch_size,
                    normalize=config.normalize,
                    normalize_method=config.normalize_method
                )
            
            # Use MLX reranking
            scores = self._mlx_reranker.rerank(query, documents, mlx_config)
            
            # Convert mx.array to Python list of floats
            return scores.tolist()
            
        except Exception as e:
            raise RuntimeError(f"Failed to rerank documents: {str(e)}")


