# Note: This code is generated by Cursor, not tested yet.

from typing import List, Optional, Union

from nexaai.common import PluginID
from nexaai.asr import ASR, ASRConfig, ASRResult
from nexaai.mlx_backend.asr.interface import MlxAsr as MLXASRInterface
from nexaai.mlx_backend.ml import ModelConfig as MLXModelConfig, SamplerConfig as MLXSamplerConfig, GenerationConfig as MLXGenerationConfig, EmbeddingConfig


class MLXASRImpl(ASR):
    def __init__(self):
        """Initialize MLX ASR implementation."""
        super().__init__()
        self._mlx_asr = None

    @classmethod
    def _load_from(cls,
                   model_path: str,
                   tokenizer_path: Optional[str] = None,
                   language: Optional[str] = None,
                   plugin_id: Union[PluginID, str] = PluginID.MLX,
                   device_id: Optional[str] = None
        ) -> 'MLXASRImpl':
        """Load ASR model from local path using MLX backend."""
        try:
            # MLX ASR interface is already imported
            
            # Create instance and load MLX ASR
            instance = cls()
            instance._mlx_asr = MLXASRInterface(
                model_path=model_path,
                tokenizer_path=tokenizer_path,
                language=language,
                device=device_id
            )
            
            return instance
        except Exception as e:
            raise RuntimeError(f"Failed to load MLX ASR: {str(e)}")

    def eject(self):
        """Destroy the model and free resources."""
        if self._mlx_asr:
            self._mlx_asr.destroy()
            self._mlx_asr = None
            
    def transcribe(
        self,
        audio_path: str,
        language: Optional[str] = None,
        config: Optional[ASRConfig] = None,
    ) -> ASRResult:
        """Transcribe audio file to text."""
        if not self._mlx_asr:
            raise RuntimeError("MLX ASR not loaded")
        
        try:
            # Convert our config to MLX format if provided
            mlx_config = None
            if config:
                from nexaai.mlx_backend.ml import ASRConfig as MLXASRConfig
                
                mlx_config = MLXASRConfig()
                mlx_config.timestamps = config.timestamps
                mlx_config.beam_size = config.beam_size
                mlx_config.stream = config.stream
            
            # Use MLX ASR transcription
            result = self._mlx_asr.transcribe(audio_path, language, mlx_config)
            
            # Convert MLX result to our format
            return ASRResult(
                transcript=result.transcript,
                confidence_scores=result.confidence_scores,
                timestamps=result.timestamps
            )
            
        except Exception as e:
            raise RuntimeError(f"Failed to transcribe audio: {str(e)}")

    def list_supported_languages(self) -> List[str]:
        """List supported languages."""
        if not self._mlx_asr:
            raise RuntimeError("MLX ASR not loaded")
        
        try:
            return self._mlx_asr.list_supported_languages()
        except Exception as e:
            raise RuntimeError(f"Failed to list supported languages: {str(e)}")


