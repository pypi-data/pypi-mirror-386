# Note: This code is generated by Cursor, not tested yet.

from typing import List, Optional, Union
import os

from nexaai.common import PluginID
from nexaai.tts import TTS, TTSConfig, TTSResult
from nexaai.mlx_backend.tts.interface import MlxTts as MLXTTSInterface


class MLXTTSImpl(TTS):
    def __init__(self):
        """Initialize MLX TTS implementation."""
        super().__init__()
        self._mlx_tts = None

    @classmethod
    def _load_from(cls,
                   model_path: str,
                   vocoder_path: str,
                   plugin_id: Union[PluginID, str] = PluginID.MLX,
                   device_id: Optional[str] = None
        ) -> 'MLXTTSImpl':
        """Load TTS model from local path using MLX backend."""
        try:
            # MLX TTS interface is already imported
            
            # Create instance and load MLX TTS
            instance = cls()
            instance._mlx_tts = MLXTTSInterface(
                model_path=model_path,
                vocoder_path=vocoder_path,
                device=device_id
            )
            
            return instance
        except Exception as e:
            raise RuntimeError(f"Failed to load MLX TTS: {str(e)}")

    def eject(self):
        """Destroy the model and free resources."""
        if self._mlx_tts:
            self._mlx_tts.destroy()
            self._mlx_tts = None

    def synthesize(
        self,
        text: str,
        config: Optional[TTSConfig] = None,
        output_path: Optional[str] = None,
    ) -> TTSResult:
        """Synthesize speech from text and save to filesystem."""
        if not self._mlx_tts:
            raise RuntimeError("MLX TTS not loaded")
        
        try:
            # Convert our config to MLX format if provided
            mlx_config = None
            if config:
                from nexaai.mlx_backend.ml import TTSConfig as MLXTTSConfig
                
                mlx_config = MLXTTSConfig(
                    voice=config.voice,
                    speed=config.speed,
                    seed=config.seed,
                    sample_rate=config.sample_rate
                )
            
            # Use MLX TTS synthesis
            result = self._mlx_tts.synthesize(text, mlx_config, output_path)
            
            # Convert MLX result to our format
            return TTSResult(
                audio_path=result.audio_path,
                duration_seconds=result.duration_seconds,
                sample_rate=result.sample_rate,
                channels=result.channels,
                num_samples=result.num_samples
            )
            
        except Exception as e:
            raise RuntimeError(f"Failed to synthesize speech: {str(e)}")

    def list_available_voices(self) -> List[str]:
        """List available voices."""
        if not self._mlx_tts:
            raise RuntimeError("MLX TTS not loaded")
        
        try:
            return self._mlx_tts.list_available_voices()
        except Exception as e:
            raise RuntimeError(f"Failed to list available voices: {str(e)}")


