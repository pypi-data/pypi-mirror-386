# ========================================================================================
# ðŸ”¹ PROJECT METADATA
# ========================================================================================
[project]
name = "fleetmaster"
dynamic = ["version"]
description = "A wrapper to run capytaine in batch from the commandline"
authors = [{ name = "Eelco van Vliet", email = "eelco@davelab.nl" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.10,<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]


dependencies = [
    "capytaine>=2.3.1",
    "click>=8.1.8",
    "h5netcdf>=1.7.0",
    "h5py>=3.15.0",
    "numpy>=2.0.2",
    "pandas>=2.3.3",
    "pydantic>=2.12.2",
    "pyglet<2",
    "pyyaml>=6.0.3",
    "rich>=14.2.0",
    "trimesh>=4.8.3",
    "vtk>=9.5.2",
    "xarray>=2025.6.1",
]

[project.optional-dependencies]
gui = ["pyside6-essentials>=6.10.0"]
dev = [
    "pytest>=7.2.0",
    "pre-commit>=4.3.0",
    "tox-uv>=1.11.3",
    "deptry>=0.22.0",
    "mypy>=1.18.2",
    "pytest-cov>=4.0.0",
    "ruff>=0.14.1",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "types-PyYAML>=6.0.12.12",
    "pandas-stubs>=2.3.2.250926",
    "pyside6-essentials>=6.10.0",
]

[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pre-commit>=4.3.0",
    "tox-uv>=1.11.3",
    "deptry>=0.22.0",
    "mypy>=1.18.2",
    "pytest-cov>=4.0.0",
    "ruff>=0.14.1",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "types-PyYAML>=6.0.12.12",
    "pyside6-essentials>=6.10.0",
    "pandas-stubs>=2.3.2.250926",
    "pytest-mock>=3.15.1",
]

[project.urls]
Homepage = "https://eelcovv.github.io/fleetmaster/"
Repository = "https://github.com/eelcovv/fleetmaster"
Documentation = "https://eelcovv.github.io/fleetmaster/"

[project.scripts]
fleetmaster = "fleetmaster.cli:cli"

# ========================================================================================
# ðŸ”¹ Build System
# ========================================================================================
[build-system]
requires = ["setuptools>=61.2", "setuptools_scm>=8"]

build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = { attr = "setuptools_scm.get_version" }
readme = { file = ["README.md"], content-type = "text/markdown" }


[tool.setuptools_scm]
# Guess dev-versie based on last tag. .e.g after v0.1 it will be  0.1.1.devN
version_scheme = "guess-next-dev"

# removes tghe "+g..." hash, such that PyPI accepts the versionjk:w

local_scheme = "no-local-version"


# ========================================================================================
# ðŸ”¹ PUBLICATION using UV
# ========================================================================================
# === uv  ===


# ========================================================================================
# ðŸ”¹ FORMATTING & LINTING
# ========================================================================================
[tool.mypy]
files = ["src"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "capytaine.*",
    "click",
    "h5py.*",
    "numpy.*",
    "pandas",
    "PySide6.*",
    "rich.*",
    "trimesh.*",
    "vtk.*",
    "yaml",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py312"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E",
    "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.lint.per-file-ignores]
"*test*.py" = ["S101"]
"*_test.py" = ["S101"]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["src"]


# ========================================================================================
# ðŸ”¹ DEBTRY
# ========================================================================================
[tool.deptry]
# This section defines which errors to ignore for which packages.
# It is NOT an inline table, but a nested table structure.

[tool.deptry.per_rule_ignores]
# Ignore "unused dependency" errors (DEP002) for these packages
"DEP002" = [
    "h5netcdf",
    "vtk",
    "pytest",
    "pre-commit",
    "tox-uv",
    "deptry",
    "mypy",
    "pandas-stubs",
    "pytest-cov",
    "ruff",
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings",
    "pyglet",
    "types-PyYAML",
]

# Ignore "transitive dependency" error (DEP003) for our own package
"DEP003" = ["fleetmaster"]


# ========================================================================================
# ðŸ”¹ TOX
# ========================================================================================
[tool.tox]
requires = ["tox>4", "tox-uv>=1.11.3"]
isolated_build = true
env_list = ["py310", "py311", "py312", "py313", "fix", "dev", "type", "build"]

# === testenv to run pytest over all your environment ===
[tool.tox.env_run_base]
# this section runs the python tests using pytest, and coverage fo the python version given in your env_list
# to run one of the environments, use `tox -e py39` for example
# to run all environments, use `tox`
description = "Invoke pytest to run automated tests under {env_name} with coverage"
changedir = "{toxinidir}"
allowlist_externals = ["pytest", "uv"]
dependency_groups = ["dev"]
commands = [["pytest"]]

[tool.tox.env.build]
description = "Build the package using uv"
changedir = "{toxinidir}"
commands = [["uv", "build"]]
allowlist_externals = ["uv"]

[tool.tox.env.fix]
runner = "uv-venv-runner"
description = "run code formatter and linter (auto-fix)"
skip_install = true
dependency_groups = ["dev"]
deps = ["pre-commit-uv >= 4.1.1"]
commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure"]]

[tool.tox.env.type]
runner = "uv-venv-lock-runner"
description = "run type checker via mypy"
dependency_groups = ["dev"]
deps = ["."]
commands = [["mypy", "{posargs:src}"]]

[tool.tox.env.dev]
runner = "uv-venv-lock-runner"
description = "dev environment"
dependency_groups = ["dev"]
commands = [["uv", "pip", "tree"]]
