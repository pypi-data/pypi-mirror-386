from _typeshed import Incomplete
from pycorelibs.security.aesgcmbox import AesGcmBox as AesGcmBox
from typing import Any, Callable, Generic, Protocol, TypeVar

T = TypeVar('T')

class Serializer(Generic[T], Protocol):
    def dumps(self, obj: T) -> bytes: ...
    def loads(self, data: bytes) -> T: ...

class JsonSerializer(Serializer[Any]):
    ensure_ascii: Incomplete
    indent: Incomplete
    def __init__(self, ensure_ascii: bool = False, indent: int = 4) -> None: ...
    def dumps(self, obj: Any) -> bytes: ...
    def loads(self, data: bytes) -> Any: ...

class PickleSerializer(Serializer[Any]):
    def dumps(self, obj: Any) -> bytes: ...
    def loads(self, data: bytes) -> Any: ...

def ensure_dir(path: str) -> None: ...

class Namespace(Generic[T]):
    name: Incomplete
    filepath: Incomplete
    serializer: Incomplete
    default_factory: Incomplete
    autosave: Incomplete
    backup_on_save: Incomplete
    cipher: Incomplete
    cipher_policy: Incomplete
    encrypt_on_save_if_cipher: Incomplete
    def __init__(self, name: str, filepath: str, serializer: Serializer[T], default_factory: Callable[[], T] | None = None, autosave: bool = False, backup_on_save: bool = False, cipher: AesGcmBox | None = None, cipher_policy: str = 'auto', encrypt_on_save_if_cipher: bool = True) -> None: ...
    def load(self) -> T: ...
    def save(self) -> None: ...
    def get(self) -> T: ...
    def set(self, value: T, save: bool | None = None) -> None: ...
    def update(self, mutator: Callable[[T], T], save: bool | None = None) -> T: ...
    def reset(self, save: bool | None = None) -> T: ...

class ConfigRepo:
    root: Incomplete
    def __init__(self, root: str | None = None, subdir: str | None = None) -> None: ...
    def resolve(self, filename: str) -> str: ...
    def register(self, name: str, serializer: Serializer[Any], filename: str | None = None, default_factory: Callable[[], Any] | None = None, autosave: bool = False, backup_on_save: bool = False, cipher: AesGcmBox | None = None, cipher_policy: str = 'auto', encrypt_on_save_if_cipher: bool = True) -> Namespace[Any]: ...
    def space(self, name: str) -> Namespace[Any]: ...
    def get(self, name: str) -> Any: ...
    def set(self, name: str, value: Any, save: bool | None = None) -> None: ...
    def update(self, name: str, mutator: Callable[[Any], Any], save: bool | None = None) -> Any: ...
    def save_all(self) -> None: ...
    def load_all(self) -> None: ...
