{
    "config": {
        "abort": {
            "addon_connection_failed": "Failed to connect to the {addon} add-on. Check the add-on status and try again later.",
            "addon_info_failed": "Failed get info for the {addon} add-on.",
            "addon_install_failed": "Failed to install the {addon} add-on.",
            "addon_start_failed": "Failed to start the {addon} add-on.",
            "already_configured": "Service is already configured",
            "reauth_successful": "Re-authentication was successful",
            "reconfigure_successful": "Re-configuration was successful",
            "single_instance_allowed": "Already configured. Only a single configuration possible."
        },
        "error": {
            "bad_birth": "Invalid birth topic",
            "bad_certificate": "The CA certificate is invalid",
            "bad_client_cert": "Invalid client certificate, ensure a valid file is supplied",
            "bad_client_cert_key": "Client certificate and private key are not a valid pair",
            "bad_discovery_prefix": "Invalid discovery prefix",
            "bad_will": "Invalid will topic",
            "bad_ws_headers": "Supply valid HTTP headers as a JSON object",
            "cannot_connect": "Failed to connect",
            "client_key_error": "Invalid private key file or invalid password supplied",
            "invalid_auth": "Invalid authentication",
            "invalid_inclusion": "The client certificate and private key must be configured together"
        },
        "step": {
            "broker": {
                "data": {
                    "advanced_options": "Advanced options",
                    "broker": "Broker",
                    "certificate": "Upload custom CA certificate file",
                    "client_cert": "Upload client certificate file",
                    "client_id": "Client ID (leave empty to randomly generated one)",
                    "client_key": "Upload private key file",
                    "client_key_password": "Password",
                    "keepalive": "The time between sending keep alive messages",
                    "password": "Password",
                    "port": "Port",
                    "protocol": "MQTT protocol",
                    "set_ca_cert": "Broker certificate validation",
                    "set_client_cert": "Use a client certificate",
                    "tls_insecure": "Ignore broker certificate validation",
                    "transport": "MQTT transport",
                    "username": "Username",
                    "ws_headers": "WebSocket headers in JSON format",
                    "ws_path": "WebSocket path"
                },
                "data_description": {
                    "advanced_options": "Enable and select **Next** to set advanced options.",
                    "broker": "The hostname or IP address of your MQTT broker.",
                    "certificate": "The custom CA certificate file to validate your MQTT brokers certificate.",
                    "client_cert": "The client certificate to authenticate against your MQTT broker.",
                    "client_id": "The unique ID to identify the Home Assistant MQTT API as MQTT client. It is recommended to leave this option blank.",
                    "client_key": "The private key file that belongs to your client certificate.",
                    "client_key_password": "The password for the private key file (if set).",
                    "keepalive": "A value less than 90 seconds is advised.",
                    "password": "The password to log in to your MQTT broker.",
                    "port": "The port your MQTT broker listens to. For example 1883.",
                    "protocol": "The MQTT protocol your broker operates at. For example 3.1.1.",
                    "set_ca_cert": "Select **Auto** for automatic CA validation, or **Custom** and select **Next** to set a custom CA certificate, to allow validating your MQTT brokers certificate.",
                    "set_client_cert": "Enable and select **Next** to set a client certificate and private key to authenticate against your MQTT broker.",
                    "tls_insecure": "Option to ignore validation of your MQTT broker's certificate.",
                    "transport": "The transport to be used for the connection to your MQTT broker.",
                    "username": "The username to log in to your MQTT broker.",
                    "ws_headers": "The WebSocket headers to pass through the WebSocket-based connection to your MQTT broker.",
                    "ws_path": "The WebSocket path to be used for the connection to your MQTT broker."
                },
                "description": "Please enter the connection information of your MQTT broker."
            },
            "hassio_confirm": {
                "description": "Do you want to configure Home Assistant to connect to the MQTT broker provided by the add-on {addon}?",
                "title": "MQTT broker via Home Assistant add-on"
            },
            "install_addon": {
                "title": "Installing add-on"
            },
            "reauth_confirm": {
                "data": {
                    "password": "Password",
                    "username": "Username"
                },
                "data_description": {
                    "password": "The password to log in to your MQTT broker.",
                    "username": "The username to log in to your MQTT broker."
                },
                "description": "The MQTT broker reported an authentication error. Please confirm the brokers correct username and password.",
                "title": "Re-authentication required with the MQTT broker"
            },
            "start_addon": {
                "title": "Starting add-on"
            },
            "user": {
                "description": "Please choose how you want to connect to the MQTT broker:",
                "menu_options": {
                    "addon": "Use the official {addon} add-on.",
                    "broker": "Manually enter the MQTT broker connection details"
                }
            }
        }
    },
    "config_subentries": {
        "device": {
            "abort": {
                "reconfigure_successful": "Re-configuration was successful"
            },
            "create_entry": {
                "default": "MQTT device with {platform} entity \"{entity}\" was set up successfully.\n\nNote that you can reconfigure the MQTT device at any time, e.g. to add more entities."
            },
            "entry_type": "MQTT device",
            "error": {
                "cover_get_and_set_position_must_be_set_together": "The get position and set position topic options must be set together",
                "cover_get_position_template_must_be_used_with_get_position_topic": "The position value template must be used together with the position state topic",
                "cover_set_position_template_must_be_used_with_set_position_topic": "The set position template must be used with the set position topic",
                "cover_tilt_command_template_must_be_used_with_tilt_command_topic": "The tilt command template must be used with the tilt command topic",
                "cover_tilt_status_template_must_be_used_with_tilt_status_topic": "The tilt value template must be used with the tilt status topic",
                "cover_value_template_must_be_used_with_state_topic": "The value template must be used with the state topic option",
                "empty_list_not_allowed": "Empty list is not allowed. Add at least one item",
                "fan_preset_mode_reset_in_preset_modes_list": "Payload \"reset preset mode\" is not a valid as a preset mode",
                "fan_speed_range_max_must_be_greater_than_speed_range_min": "Speed range max must be greater than speed range min",
                "invalid_input": "Invalid value",
                "invalid_regular_expression": "Must be a valid regular expression",
                "invalid_subscribe_topic": "Invalid subscribe topic",
                "invalid_supported_color_modes": "Invalid supported colour modes selection",
                "invalid_template": "Invalid template",
                "invalid_uom": "The unit of measurement \"{unit_of_measurement}\" is not supported by the selected device class, please either remove the device class, select a device class which supports \"{unit_of_measurement}\", or pick a supported unit of measurement from the list",
                "invalid_uom_for_state_class": "The unit of measurement \"{unit_of_measurement}\" is not supported by the selected state class, please either remove the state class, select a state class which supports \"{unit_of_measurement}\", or pick a supported unit of measurement from the list",
                "invalid_url": "Invalid URL",
                "last_reset_not_with_state_class_total": "The last reset value template option should be used with state class 'Total' only",
                "max_below_min_humidity": "Max humidity value should be greater than min humidity value",
                "max_below_min_kelvin": "Max Kelvin value should be greater than min Kelvin value",
                "max_below_min_temperature": "Max temperature value should be greater than min temperature value",
                "options_device_class_enum": "The 'Options' setting must be used with the Enumeration device class. If you continue, the existing options will be reset",
                "options_not_allowed_with_state_class_or_uom": "The 'Options' setting is not allowed when state class or unit of measurement are used",
                "options_with_enum_device_class": "Configure options for the enumeration sensor",
                "preset_mode_none_not_allowed": "Preset \"none\" is not a valid preset mode",
                "uom_required_for_device_class": "The selected device class requires a unit"
            },
            "initiate_flow": {
                "reconfigure": "Reconfigure MQTT device",
                "user": "Add MQTT device"
            },
            "step": {
                "availability": {
                    "data": {
                        "availability_template": "Availability template",
                        "availability_topic": "Availability topic",
                        "payload_available": "Payload available",
                        "payload_not_available": "Payload not available"
                    },
                    "data_description": {
                        "availability_template": "A [template]({value_templating_url}) to render the availability payload received on the availability topic",
                        "availability_topic": "Topic to receive the availability payload on",
                        "payload_available": "The payload that indicates the device is available (defaults to 'online')",
                        "payload_not_available": "The payload that indicates the device is not available (defaults to 'offline')"
                    },
                    "description": "The availability feature allows a device to report its availability.",
                    "title": "Availability options"
                },
                "delete_entity": {
                    "data": {
                        "component": "Entity"
                    },
                    "data_description": {
                        "component": "Select the entity you want to delete. Minimal one entity is required."
                    },
                    "description": "Delete an entity. The entity will be removed from the device. Removing an entity will break any automations or scripts that depend on it.",
                    "title": "Delete entity"
                },
                "device": {
                    "data": {
                        "configuration_url": "Configuration URL",
                        "model": "Model",
                        "model_id": "Model ID",
                        "name": "Name"
                    },
                    "data_description": {
                        "configuration_url": "A link to the webpage that can manage the configuration of this device. Can be either a 'http://', 'https://' or an internal 'homeassistant://' URL.",
                        "model": "E.g. 'Cleanmaster Pro'.",
                        "model_id": "E.g. '123NK2PRO'.",
                        "name": "The name of the manually added MQTT device."
                    },
                    "description": "Enter the MQTT device details:",
                    "sections": {
                        "advanced_settings": {
                            "data": {
                                "hw_version": "Hardware version",
                                "sw_version": "Software version"
                            },
                            "data_description": {
                                "hw_version": "The hardware version of the device. E.g. 'v1.0 rev a'.",
                                "sw_version": "The software version of the device. E.g. '2025.1.0'."
                            },
                            "name": "Advanced device settings"
                        },
                        "mqtt_settings": {
                            "data": {
                                "qos": "QoS"
                            },
                            "data_description": {
                                "qos": "The Quality of Service value the device's entities should use."
                            },
                            "name": "MQTT settings"
                        }
                    },
                    "title": "Configure MQTT device details"
                },
                "entity": {
                    "data": {
                        "entity_picture": "Entity picture",
                        "name": "Entity name",
                        "platform": "Type of entity"
                    },
                    "data_description": {
                        "entity_picture": "A URL to a picture to be assigned.",
                        "name": "The name of the entity. Leave empty to set it to `None` to [mark it as main feature of the MQTT device]({naming_entities_url}).",
                        "platform": "The type of the entity to configure."
                    },
                    "description": "Configure the basic {platform_label}entity settings{entity_name_label}",
                    "title": "Configure MQTT device \"{mqtt_device}\""
                },
                "entity_platform_config": {
                    "data": {
                        "alarm_control_panel_code_mode": "Alarm code validation mode",
                        "climate_feature_action": "Current action support",
                        "climate_feature_current_humidity": "Current humidity support",
                        "climate_feature_current_temperature": "Current temperature support",
                        "climate_feature_fan_modes": "Fan mode support",
                        "climate_feature_power": "Power on/off support",
                        "climate_feature_preset_modes": "Preset modes support",
                        "climate_feature_swing_horizontal_modes": "Horizontal swing mode support",
                        "climate_feature_swing_modes": "Swing mode support",
                        "climate_feature_target_humidity": "Target humidity support",
                        "climate_feature_target_temperature": "Target temperature support",
                        "device_class": "Device class",
                        "entity_category": "Entity category",
                        "fan_feature_direction": "Direction support",
                        "fan_feature_oscillation": "Oscillation support",
                        "fan_feature_preset_modes": "Preset modes support",
                        "fan_feature_speed": "Speed support",
                        "image_processing_mode": "Image processing mode",
                        "options": "Add option",
                        "schema": "Schema",
                        "state_class": "State class",
                        "suggested_display_precision": "Suggested display precision",
                        "supported_features": "Supported features",
                        "temperature_unit": "Temperature unit",
                        "unit_of_measurement": "Unit of measurement"
                    },
                    "data_description": {
                        "alarm_control_panel_code_mode": "Configures how the alarm control panel validates the code. A local code is configured with the entity and is validated by Home Assistant. A remote code is sent to the device and validated remotely. [Learn more.]({url}#code)",
                        "climate_feature_action": "The climate supports reporting the current action.",
                        "climate_feature_current_humidity": "The climate supports reporting the current humidity.",
                        "climate_feature_current_temperature": "The climate supports reporting the current temperature.",
                        "climate_feature_fan_modes": "The climate supports fan modes.",
                        "climate_feature_power": "The climate supports the power \"on\" and \"off\" commands.",
                        "climate_feature_preset_modes": "The climate supports preset modes.",
                        "climate_feature_swing_horizontal_modes": "The climate supports horizontal swing modes.",
                        "climate_feature_swing_modes": "The climate supports swing modes.",
                        "climate_feature_target_humidity": "The climate supports setting the target humidity.",
                        "climate_feature_target_temperature": "The climate supports setting the target temperature.",
                        "device_class": "The device class of the {platform} entity. [Learn more.]({url}#device_class)",
                        "entity_category": "Allows marking an entity as device configuration or diagnostics. An entity with a category will not be exposed to cloud, Alexa, or Google Assistant components, nor included in indirect action calls to devices or areas. Sensor entities cannot be assigned a device configuration class. [Learn more.]({registry_properties_url})",
                        "fan_feature_direction": "The fan supports direction.",
                        "fan_feature_oscillation": "The fan supports oscillation.",
                        "fan_feature_preset_modes": "The fan supports preset modes.",
                        "fan_feature_speed": "The fan supports multiple speeds.",
                        "image_processing_mode": "Select how the image data is received.",
                        "options": "Options for allowed sensor state values. The sensor\u2019s Device class must be set to Enumeration. The 'Options' setting cannot be used together with State class or Unit of measurement.",
                        "schema": "The schema to use. [Learn more.]({url}#comparison-of-light-mqtt-schemas)",
                        "state_class": "The [State class]({available_state_classes_url}) of the sensor. [Learn more.]({url}#state_class)",
                        "suggested_display_precision": "The number of decimals which should be used in the {platform} entity state after rounding. [Learn more.]({url}#suggested_display_precision)",
                        "supported_features": "The features that the entity supports.",
                        "temperature_unit": "This determines the native unit of measurement the MQTT climate device works with.",
                        "unit_of_measurement": "Defines the unit of measurement, if any."
                    },
                    "description": "Please configure specific details for {platform} entity \"{entity}\":",
                    "sections": {
                        "advanced_settings": {
                            "data": {
                                "suggested_display_precision": "Suggested display precision"
                            },
                            "data_description": {
                                "suggested_display_precision": "The number of decimals which should be used in the {platform} entity state after rounding. [Learn more.]({url}#suggested_display_precision)"
                            },
                            "name": "Advanced options"
                        }
                    },
                    "title": "Configure MQTT device \"{mqtt_device}\""
                },
                "export": {
                    "description": "An export allows you to migrate the MQTT device configuration to YAML-based configuration or MQTT discovery. The configuration export can also be helpful for troubleshooting.",
                    "menu_options": {
                        "export_discovery": "Export MQTT discovery information",
                        "export_yaml": "Export to YAML configuration"
                    },
                    "title": "Export MQTT device config"
                },
                "export_discovery": {
                    "data": {
                        "discovery_payload": "Discovery payload:",
                        "discovery_topic": "Discovery topic"
                    },
                    "data_description": {
                        "discovery_payload": "The JSON [discovery payload]({url}#device-discovery-payload) that contains information about the MQTT device.",
                        "discovery_topic": "The [discovery topic]({url}#discovery-topic) to publish the discovery payload, used to trigger MQTT discovery. An empty payload published to this topic will remove the device and discovered entities."
                    },
                    "description": "To allow setup via MQTT [discovery]({url}#device-discovery-payload), the discovery payload needs to be published to the discovery topic. Copy the information from the fields below. Home Assistant will detect if the setup of the MQTT device was tried via MQTT discovery instead, and will offer a repair flow to clean up the redundant subentry. You can also choose to change the identifiers if you do not want to remove the subentry.",
                    "title": "Export MQTT device config"
                },
                "export_yaml": {
                    "data": {
                        "yaml": "Copy the YAML configuration below:"
                    },
                    "data_description": {
                        "yaml": "Place YAML configuration in your [configuration.yaml]({url}#yaml-configuration-listed-per-item)."
                    },
                    "description": "You can copy the configuration below and place it your configuration.yaml file. Home Assistant will detect if the setup of the MQTT device was tried via YAML instead, and will offer a repair flow to clean up the redundant subentry. You can also choose to change the identifiers if you do not want to remove the subentry.",
                    "title": "Export MQTT device config"
                },
                "mqtt_platform_config": {
                    "data": {
                        "blue_template": "Blue template",
                        "brightness_template": "Brightness template",
                        "code": "Alarm code",
                        "code_arm_required": "Code arm required",
                        "code_disarm_required": "Code disarm required",
                        "code_format": "Code format",
                        "code_trigger_required": "Code trigger required",
                        "color_temp_template": "Colour temperature template",
                        "command_off_template": "Command \"off\" template",
                        "command_on_template": "Command \"on\" template",
                        "command_template": "Command template",
                        "command_topic": "Command topic",
                        "content_type": "Content type",
                        "force_update": "Force update",
                        "green_template": "Green template",
                        "image_encoding": "Image encoding",
                        "image_topic": "Image topic",
                        "last_reset_value_template": "Last reset value template",
                        "mode_command_template": "Operation mode command template",
                        "mode_command_topic": "Operation mode command topic",
                        "mode_state_template": "Operation mode value template",
                        "mode_state_topic": "Operation mode state topic",
                        "modes": "Supported operation modes",
                        "on_command_type": "ON command type",
                        "optimistic": "Optimistic",
                        "payload_off": "Payload \"off\"",
                        "payload_on": "Payload \"on\"",
                        "payload_press": "Payload \"press\"",
                        "qos": "QoS",
                        "red_template": "Red template",
                        "retain": "Retain",
                        "state_off": "State \"off\"",
                        "state_on": "State \"on\"",
                        "state_template": "State template",
                        "state_topic": "State topic",
                        "state_value_template": "State value template",
                        "supported_color_modes": "Supported colour modes",
                        "url_template": "URL template",
                        "url_topic": "URL topic",
                        "value_template": "Value template"
                    },
                    "data_description": {
                        "blue_template": "[Template]({value_templating_url}) to extract blue colour from the state payload value. Expected result of the template is an integer from 0-255 range.",
                        "brightness_template": "[Template]({value_templating_url}) to extract brightness from the state payload value. Expected result of the template is an integer from 0-255 range.",
                        "code": "Specifies a code to enable or disable the alarm in the frontend. Note that this blocks sending MQTT message commands to the remote device if the code validation fails. [Learn more.]({url}#code)",
                        "code_arm_required": "If set, the code is required to arm the alarm. If not set, the code is not validated.",
                        "code_disarm_required": "If set, the code is required to disarm the alarm. If not set, the code is not validated.",
                        "code_format": "A regular expression to validate a supplied code when it is set during the action to open, lock or unlock the MQTT lock. [Learn more.]({url}#code_format)",
                        "code_trigger_required": "If set, the code is required to manually trigger the alarm. If not set, the code is not validated.",
                        "color_temp_template": "[Template]({value_templating_url}) to extract colour temperature in Kelvin from the state payload value. Expected result of the template is an integer.",
                        "command_off_template": "The [template]({command_templating_url}) for \"off\" state changes. Available variables are: `state` and `transition`.",
                        "command_on_template": "The [template]({command_templating_url}) for \"on\" state changes. Available variables: `state`, `brightness`, `color_temp`, `red`, `green`, `blue`, `hue`, `sat`, `flash`, `transition` and `effect`. Values `red`, `green`, `blue` and `brightness` are provided as integers from range 0-255. Value of `hue` is provided as float from range 0-360. Value of `sat` is provided as float from range 0-100. Value of `color_temp` is provided as integer representing Kelvin units.",
                        "command_template": "A [template]({command_templating_url}) to render the payload to be published at the command topic. [Learn more.]({url}#command_template)",
                        "command_topic": "The publishing topic that will be used to control the {platform} entity. [Learn more.]({url}#command_topic)",
                        "content_type": "The content type or the image data that is received at the image topic.",
                        "force_update": "Sends update events even if the value hasn\u2019t changed. Useful if you want to have meaningful value graphs in history. [Learn more.]({url}#force_update)",
                        "green_template": "[Template]({value_templating_url}) to extract green colour from the state payload value. Expected result of the template is an integer from 0-255 range.",
                        "image_encoding": "Select the encoding of the received image data",
                        "image_topic": "The MQTT topic subscribed to receive messages containing the image data. [Learn more.]({url}#image_topic)",
                        "last_reset_value_template": "Defines a [template]({value_templating_url}) to extract the last reset. When Last reset template is set, the State class option must be Total. [Learn more.]({url}#last_reset_value_template)",
                        "mode_command_template": "[Template]({command_templating_url}) to define the operation mode to be sent to the operation mode command topic. [Learn more.]({url}#mode_command_template)",
                        "mode_command_topic": "The MQTT topic to publish commands to change the climate operation mode. [Learn more.]({url}#mode_command_topic)",
                        "mode_state_template": "Defines a [template]({value_templating_url}) to extract the operation mode state. [Learn more.]({url}#mode_state_template)",
                        "mode_state_topic": "The MQTT topic subscribed to receive operation mode state messages. [Learn more.]({url}#mode_state_topic)",
                        "modes": "A list of supported operation modes. [Learn more.]({url}#modes)",
                        "on_command_type": "Defines when the payload \"on\" is sent. Using \"Last\" (the default) will send any style (brightness, colour, etc) topics first and then a payload \"on\" to the command topic. Using \"First\" will send the payload \"on\" and then any style topics. Using \"Brightness\" will only send brightness commands instead of the payload \"on\" to turn the light on.",
                        "optimistic": "Flag that defines if the {platform} entity works in optimistic mode. [Learn more.]({url}#optimistic)",
                        "payload_off": "The payload that represents the \"off\" state.",
                        "payload_on": "The payload that represents the \"on\" state.",
                        "payload_press": "The payload to send when the button is triggered.",
                        "qos": "The QoS value a {platform} entity should use.",
                        "red_template": "[Template]({value_templating_url}) to extract red colour from the state payload value. Expected result of the template is an integer from 0-255 range.",
                        "retain": "Select if values published by the {platform} entity should be retained at the MQTT broker.",
                        "state_off": "The incoming payload that represents the \"off\" state. Use only when the value that represents \"off\" state in the state topic is different from value that should be sent to the command topic to turn the device off.",
                        "state_on": "The incoming payload that represents the \"on\" state. Use only when the value that represents \"on\" state in the state topic is different from value that should be sent to the command topic to turn the device on.",
                        "state_template": "[Template]({value_templating_url}) to extract state from the state payload value.",
                        "state_topic": "The MQTT topic subscribed to receive {platform} state values. [Learn more.]({url}#state_topic)",
                        "supported_color_modes": "A list of colour modes supported by the light. Possible colour modes are On/Off, Brightness, Colour temperature, HS, XY, RGB, RGBW, RGBWW, White. Note that if On/Off or Brightness are used, that must be the only value in the list. [Learn more.]({url}#supported_color_modes)",
                        "url_template": "[Template]({value_templating_url}) to extract an URL from the received URL topic payload value. [Learn more.]({url}#url_template)",
                        "url_topic": "The MQTT topic subscribed to receive messages containing the image URL. [Learn more.]({url}#url_topic)",
                        "value_template": "Defines a [template]({value_templating_url}) to extract the {platform} entity value. [Learn more.]({url}#value_template)"
                    },
                    "description": "Please configure MQTT specific details for {platform} entity \"{entity}\":",
                    "sections": {
                        "advanced_settings": {
                            "data": {
                                "expire_after": "Expire after",
                                "flash": "Flash support",
                                "flash_time_long": "Flash time long",
                                "flash_time_short": "Flash time short",
                                "max_kelvin": "Max Kelvin",
                                "min_kelvin": "Min Kelvin",
                                "off_delay": "OFF delay",
                                "transition": "Transition support"
                            },
                            "data_description": {
                                "expire_after": "If set, it defines the number of seconds after the sensor\u2019s state expires, if it\u2019s not updated. After expiry, the sensor\u2019s state becomes unavailable. If not set, the sensor's state never expires. [Learn more.]({url}#expire_after)",
                                "flash": "Enable the flash feature for this light",
                                "flash_time_long": "The duration, in seconds, of a \"long\" flash.",
                                "flash_time_short": "The duration, in seconds, of a \"short\" flash.",
                                "max_kelvin": "The maximum colour temperature in Kelvin.",
                                "min_kelvin": "The minimum colour temperature in Kelvin.",
                                "off_delay": "For sensors that only send \"on\" state updates (like PIRs), this variable sets a delay in seconds after which the sensor\u2019s state will be updated back to \"off\".",
                                "transition": "Enable the transition feature for this light"
                            },
                            "name": "Advanced settings"
                        },
                        "alarm_control_panel_payload_settings": {
                            "data": {
                                "payload_arm_away": "Payload \"arm away\"",
                                "payload_arm_custom_bypass": "Payload \"arm custom bypass\"",
                                "payload_arm_disarm": "Payload \"disarm\"",
                                "payload_arm_home": "Payload \"arm home\"",
                                "payload_arm_night": "Payload \"arm night\"",
                                "payload_arm_vacation": "Payload \"arm holiday\"",
                                "payload_trigger": "Payload \"trigger alarm\""
                            },
                            "data_description": {
                                "payload_arm_away": "The payload sent when an \"arm away\" command is issued.",
                                "payload_arm_custom_bypass": "The payload sent when an \"arm custom bypass\" command is issued.",
                                "payload_arm_disarm": "The payload sent when a \"disarm\" command is issued.",
                                "payload_arm_home": "The payload sent when an \"arm home\" command is issued.",
                                "payload_arm_night": "The payload sent when an \"arm night\" command is issued.",
                                "payload_arm_vacation": "The payload sent when an \"arm holiday\" command is issued.",
                                "payload_trigger": "The payload sent when a \"trigger alarm\" command is issued."
                            },
                            "name": "Alarm control panel payload settings"
                        },
                        "climate_action_settings": {
                            "data": {
                                "action_template": "Action template",
                                "action_topic": "Action topic"
                            },
                            "data_description": {
                                "action_template": "A [template]({value_templating_url}) to render the value received on the action topic with.",
                                "action_topic": "The MQTT topic to subscribe for changes of the current action. If this is set, the climate graph uses the value received as data source. A \"None\" payload resets the current action state. An empty payload is ignored. Valid action values are: \"off\", \"heating\", \"cooling\", \"drying\", \"idle\" and \"fan\".  [Learn more.]({url}#action_topic)"
                            },
                            "name": "Current action settings"
                        },
                        "climate_fan_mode_settings": {
                            "data": {
                                "fan_mode_command_template": "Fan mode command template",
                                "fan_mode_command_topic": "Fan mode command topic",
                                "fan_mode_state_template": "Fan mode state template",
                                "fan_mode_state_topic": "Fan mode state topic",
                                "fan_modes": "Fan modes"
                            },
                            "data_description": {
                                "fan_mode_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the fan mode command topic.",
                                "fan_mode_command_topic": "The MQTT topic to publish commands to change the climate fan mode. [Learn more.]({url}#fan_mode_command_topic)",
                                "fan_mode_state_template": "Defines a [template]({value_templating_url}) to extract the climate fan mode value.",
                                "fan_mode_state_topic": "The MQTT topic subscribed to receive the climate fan mode. [Learn more.]({url}#fan_mode_state_topic)",
                                "fan_modes": "List of fan modes this climate is capable of running at. Common fan modes that offer translations are `off`, `on`, `auto`, `low`, `medium`, `high`, `middle`, `focus` and `diffuse`."
                            },
                            "name": "Fan mode settings"
                        },
                        "climate_power_settings": {
                            "data": {
                                "payload_off": "Payload \"off\"",
                                "payload_on": "Payload \"on\"",
                                "power_command_template": "Power command template",
                                "power_command_topic": "Power command topic"
                            },
                            "data_description": {
                                "payload_off": "The payload that represents the \"off\" state.",
                                "payload_on": "The payload that represents the \"on\" state.",
                                "power_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the power command topic. The `value` parameter is the payload set for payload \"on\" or payload \"off\".",
                                "power_command_topic": "The MQTT topic to publish commands to change the climate power state. Sends the payload configured with payload \"on\" or payload \"off\". [Learn more.]({url}#power_command_topic)"
                            },
                            "name": "Power settings"
                        },
                        "climate_preset_mode_settings": {
                            "data": {
                                "preset_mode_command_template": "Preset mode command template",
                                "preset_mode_command_topic": "Preset mode command topic",
                                "preset_mode_state_topic": "Preset mode state topic",
                                "preset_mode_value_template": "Preset mode value template",
                                "preset_modes": "Preset modes"
                            },
                            "data_description": {
                                "preset_mode_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the preset mode command topic.",
                                "preset_mode_command_topic": "The MQTT topic to publish commands to change the climate preset mode. [Learn more.]({url}#preset_mode_command_topic)",
                                "preset_mode_state_topic": "The MQTT topic subscribed to receive fan preset mode. [Learn more.]({url}#preset_mode_state_topic)",
                                "preset_mode_value_template": "Defines a [template]({value_templating_url}) to extract fan preset mode value.",
                                "preset_modes": "List of preset modes this climate is capable of running at. Common preset modes that offer translations are `none`, `away`, `eco`, `boost`, `comfort`, `home`, `sleep` and `activity`."
                            },
                            "name": "Preset mode settings"
                        },
                        "climate_swing_horizontal_mode_settings": {
                            "data": {
                                "swing_horizontal_mode_command_template": "Horizontal swing mode command template",
                                "swing_horizontal_mode_command_topic": "Horizontal swing mode command topic",
                                "swing_horizontal_mode_state_template": "Horizontal swing mode state template",
                                "swing_horizontal_mode_state_topic": "Horizontal swing mode state topic",
                                "swing_horizontal_modes": "Horizontal swing modes"
                            },
                            "data_description": {
                                "swing_horizontal_mode_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the horizontal swing mode command topic.",
                                "swing_horizontal_mode_command_topic": "The MQTT topic to publish commands to change the climate horizontal swing mode. [Learn more.]({url}#swing_horizontal_mode_command_topic)",
                                "swing_horizontal_mode_state_template": "Defines a [template]({value_templating_url}) to extract the climate horizontal swing mode value.",
                                "swing_horizontal_mode_state_topic": "The MQTT topic subscribed to receive the climate horizontal swing mode. [Learn more.]({url}#swing_horizontal_mode_state_topic)",
                                "swing_horizontal_modes": "List of horizontal swing modes this climate is capable of running at. Common horizontal swing modes that offer translations are `off` and `on`."
                            },
                            "name": "Horizontal swing mode settings"
                        },
                        "climate_swing_mode_settings": {
                            "data": {
                                "swing_mode_command_template": "Swing mode command template",
                                "swing_mode_command_topic": "Swing mode command topic",
                                "swing_mode_state_template": "Swing mode state template",
                                "swing_mode_state_topic": "Swing mode state topic",
                                "swing_modes": "Swing modes"
                            },
                            "data_description": {
                                "swing_mode_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the swing mode command topic.",
                                "swing_mode_command_topic": "The MQTT topic to publish commands to change the climate swing mode. [Learn more.]({url}#swing_mode_command_topic)",
                                "swing_mode_state_template": "Defines a [template]({value_templating_url}) to extract the climate swing mode value.",
                                "swing_mode_state_topic": "The MQTT topic subscribed to receive the climate swing mode. [Learn more.]({url}#swing_mode_state_topic)",
                                "swing_modes": "List of swing modes this climate is capable of running at. Common swing modes that offer translations are `off`, `on`, `vertical`, `horizontal` and `both`."
                            },
                            "name": "Swing mode settings"
                        },
                        "cover_payload_settings": {
                            "data": {
                                "payload_close": "Payload \"close\"",
                                "payload_open": "Payload \"open\"",
                                "payload_stop": "Payload \"stop\"",
                                "payload_stop_tilt": "Payload \"stop tilt\"",
                                "state_closed": "State \"closed\"",
                                "state_closing": "State \"closing\"",
                                "state_open": "State \"open\"",
                                "state_opening": "State \"opening\"",
                                "state_stopped": "State \"stopped\""
                            },
                            "data_description": {
                                "payload_close": "The payload sent when a \"close\" command is issued.",
                                "payload_open": "The payload sent when an \"open\" command is issued.",
                                "payload_stop": "The payload sent when a \"stop\" command is issued. Leave empty to disable the \"stop\" feature.",
                                "payload_stop_tilt": "The payload sent when a \"stop tilt\" command is issued.",
                                "state_closed": "The payload received at the state topic that represents the \"closed\" state.",
                                "state_closing": "The payload received at the state topic that represents the \"closing\" state.",
                                "state_open": "The payload received at the state topic that represents the \"open\" state.",
                                "state_opening": "The payload received at the state topic that represents the \"opening\" state.",
                                "state_stopped": "The payload received at the state topic that represents the \"stopped\" state (for covers that do not report \"open\"/\"closed\" state)."
                            },
                            "name": "Payload settings"
                        },
                        "cover_position_settings": {
                            "data": {
                                "position_closed": "Position \"closed\" value",
                                "position_open": "Position \"open\" value",
                                "position_template": "Position value template",
                                "position_topic": "Position state topic",
                                "set_position_template": "Set position template",
                                "set_position_topic": "Set position topic"
                            },
                            "data_description": {
                                "position_closed": "Number which represents \"closed\" position.",
                                "position_open": "Number which represents \"open\" position.",
                                "position_template": "Defines a [template]({value_templating_url}) to extract the payload for the position topic. Within the template the following variables are also available: `entity_id`, `position_open`, `position_closed`, `tilt_min` and `tilt_max`. [Learn more.]({url}#position_template)",
                                "position_topic": "The MQTT topic subscribed to receive cover position state messages. [Learn more.]({url}#position_topic)",
                                "set_position_template": "[Template]({command_templating_url}) to define the position to be sent to the set position topic. Within the template the following variables are available: `value` (the scaled target position), `entity_id`, `position` (the target position percentage), `position_open`, `position_closed`, `tilt_min` and `tilt_max`. [Learn more.]({url}#set_position_template)",
                                "set_position_topic": "The MQTT topic to publish position commands to. You need to use the set position topic as well if you want to use the position topic. Use template if position topic wants different values than within range \"position closed\" - \"position_open\". If template is not defined and position \"closed\" != 100 and position \"open\" != 0 then proper position value is calculated from percentage position. [Learn more.]({url}#set_position_topic)"
                            },
                            "name": "Position settings"
                        },
                        "cover_tilt_settings": {
                            "data": {
                                "tilt_closed_value": "Tilt \"closed\" value",
                                "tilt_command_template": "Tilt command template",
                                "tilt_command_topic": "Tilt command topic",
                                "tilt_max": "Tilt max",
                                "tilt_min": "Tilt min",
                                "tilt_opened_value": "Tilt \"opened\" value",
                                "tilt_optimistic": "Tilt optimistic",
                                "tilt_status_template": "Tilt value template",
                                "tilt_status_topic": "Tilt status topic"
                            },
                            "data_description": {
                                "tilt_closed_value": "The value that will be sent to the \"tilt command topic\" when the cover tilt is closed.",
                                "tilt_command_template": "[Template]({command_templating_url}) to define the position to be sent to the tilt command topic. Within the template the following variables are available: `entity_id`, `tilt_position` (the target tilt position percentage), `position_open`, `position_closed`, `tilt_min` and `tilt_max`. [Learn more.]({url}#tilt_command_template)",
                                "tilt_command_topic": "The MQTT topic to publish commands to control the cover tilt. [Learn more.]({url}#tilt_command_topic)",
                                "tilt_max": "The maximum tilt value.",
                                "tilt_min": "The minimum tilt value.",
                                "tilt_opened_value": "The value that will be sent to the \"tilt command topic\" when the cover tilt is opened.",
                                "tilt_optimistic": "Flag that defines if tilt works in optimistic mode. If tilt status topic is not defined, tilt works in optimistic mode by default. [Learn more.]({url}#tilt_optimistic)",
                                "tilt_status_template": "Defines a [template]({value_templating_url}) to extract the payload for the tilt status topic. Within the template the following variables are available: `entity_id`, `position_open`, `position_closed`, `tilt_min` and `tilt_max`. [Learn more.]({url}#tilt_status_template)",
                                "tilt_status_topic": "The MQTT topic subscribed to receive tilt status update values. [Learn more.]({url}#tilt_status_topic)"
                            },
                            "name": "Tilt settings"
                        },
                        "current_humidity_settings": {
                            "data": {
                                "current_humidity_template": "Current humidity template",
                                "current_humidity_topic": "Current humidity topic"
                            },
                            "data_description": {
                                "current_humidity_template": "Defines a [template]({value_templating_url}) to extract the current humidity value. [Learn more.]({url}#current_humidity_template)",
                                "current_humidity_topic": "The MQTT topic subscribed to receive current humidity update values. [Learn more.]({url}#current_humidity_topic)"
                            },
                            "name": "Current humidity settings"
                        },
                        "current_temperature_settings": {
                            "data": {
                                "current_temperature_template": "Current temperature template",
                                "current_temperature_topic": "Current temperature topic"
                            },
                            "data_description": {
                                "current_temperature_template": "Defines a [template]({value_templating_url}) to extract the current temperature value. [Learn more.]({url}#current_temperature_template)",
                                "current_temperature_topic": "The MQTT topic subscribed to receive current temperature update values. [Learn more.]({url}#current_temperature_topic)"
                            },
                            "name": "Current temperature settings"
                        },
                        "fan_direction_settings": {
                            "data": {
                                "direction_command_template": "Direction command template",
                                "direction_command_topic": "Direction command topic",
                                "direction_state_topic": "Direction state topic",
                                "direction_value_template": "Direction value template"
                            },
                            "data_description": {
                                "direction_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the direction command topic. The template variable `value` will be either `forward` or `reverse`.",
                                "direction_command_topic": "The MQTT topic to publish commands to change the fan direction. The payload will be either `forward` or `reverse` and can be customized using the direction command template. [Learn more.]({url}#direction_command_topic)",
                                "direction_state_topic": "The MQTT topic subscribed to receive fan direction state. Accepted state payloads are `forward` or `reverse`. [Learn more.]({url}#direction_state_topic)",
                                "direction_value_template": "Defines a [template]({value_templating_url}) to extract fan direction state value. The template should return either `forward` or `reverse`. When the template returns an empty string, the direction will be ignored."
                            },
                            "name": "Direction settings"
                        },
                        "fan_oscillation_settings": {
                            "data": {
                                "oscillation_command_template": "Oscillation command template",
                                "oscillation_command_topic": "Oscillation command topic",
                                "oscillation_state_topic": "Oscillation state topic",
                                "oscillation_value_template": "Oscillation value template",
                                "payload_oscillation_off": "Payload \"oscillation off\"",
                                "payload_oscillation_on": "Payload \"oscillation on\""
                            },
                            "data_description": {
                                "oscillation_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the oscillation command topic.",
                                "oscillation_command_topic": "The MQTT topic to publish commands to change the fan oscillation state. [Learn more.]({url}#oscillation_command_topic)",
                                "oscillation_state_topic": "The MQTT topic subscribed to receive fan oscillation state. [Learn more.]({url}#oscillation_state_topic)",
                                "oscillation_value_template": "Defines a [template]({value_templating_url}) to extract fan oscillation state value.",
                                "payload_oscillation_off": "The payload that represents the oscillation \"off\" state.",
                                "payload_oscillation_on": "The payload that represents the oscillation \"on\" state."
                            },
                            "name": "Oscillation settings"
                        },
                        "fan_preset_mode_settings": {
                            "data": {
                                "payload_reset_preset_mode": "Payload \"reset preset mode\"",
                                "preset_mode_command_template": "Preset mode command template",
                                "preset_mode_command_topic": "Preset mode command topic",
                                "preset_mode_state_topic": "Preset mode state topic",
                                "preset_mode_value_template": "Preset mode value template",
                                "preset_modes": "Preset modes"
                            },
                            "data_description": {
                                "payload_reset_preset_mode": "A special payload that resets the fan preset mode state attribute to unknown when received at the preset mode state topic.",
                                "preset_mode_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the preset mode command topic.",
                                "preset_mode_command_topic": "The MQTT topic to publish commands to change the fan preset mode. [Learn more.]({url}#preset_mode_command_topic)",
                                "preset_mode_state_topic": "The MQTT topic subscribed to receive fan preset mode. [Learn more.]({url}#preset_mode_state_topic)",
                                "preset_mode_value_template": "Defines a [template]({value_templating_url}) to extract fan preset mode value.",
                                "preset_modes": "List of preset modes this fan is capable of running at. Common examples include auto, smart, whoosh, eco and breeze."
                            },
                            "name": "Preset mode settings"
                        },
                        "fan_speed_settings": {
                            "data": {
                                "payload_reset_percentage": "Payload \"reset percentage\"",
                                "percentage_command_template": "Percentage command template",
                                "percentage_command_topic": "Percentage command topic",
                                "percentage_state_topic": "Percentage state topic",
                                "percentage_value_template": "Percentage value template",
                                "speed_range_max": "Speed range max",
                                "speed_range_min": "Speed range min"
                            },
                            "data_description": {
                                "payload_reset_percentage": "A special payload that resets the fan speed percentage state attribute to unknown when received at the percentage state topic.",
                                "percentage_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the percentage command topic.",
                                "percentage_command_topic": "The MQTT topic to publish commands to change the fan speed state based on a percentage. [Learn more.]({url}#percentage_command_topic)",
                                "percentage_state_topic": "The MQTT topic subscribed to receive fan speed based on percentage. [Learn more.]({url}#percentage_state_topic)",
                                "percentage_value_template": "Defines a [template]({value_templating_url}) to extract the speed percentage value.",
                                "speed_range_max": "The maximum of numeric output range (representing 100 %). The percentage step is 100 / number of speeds within the \"speed range\".",
                                "speed_range_min": "The minimum of numeric output range (off not included, so speed_range_min - 1 represents 0 %). The percentage step is 100 / the number of speeds within the \"speed range\"."
                            },
                            "name": "Speed settings"
                        },
                        "light_brightness_settings": {
                            "data": {
                                "brightness": "Separate brightness",
                                "brightness_command_template": "Brightness command template",
                                "brightness_command_topic": "Brightness command topic",
                                "brightness_scale": "Brightness scale",
                                "brightness_state_topic": "Brightness state topic",
                                "brightness_value_template": "Brightness value template"
                            },
                            "data_description": {
                                "brightness": "Flag that defines if light supports brightness when the RGB, RGBW, or RGBWW colour mode is supported.",
                                "brightness_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the brightness command topic.",
                                "brightness_command_topic": "The publishing topic that will be used to control the brightness. [Learn more.]({url}#brightness_command_topic)",
                                "brightness_scale": "Defines the maximum brightness value (i.e., 100%) of the maximum brightness.",
                                "brightness_state_topic": "The MQTT topic subscribed to receive brightness state values. [Learn more.]({url}#brightness_state_topic)",
                                "brightness_value_template": "Defines a [template]({value_templating_url}) to extract the brightness value."
                            },
                            "name": "Brightness settings"
                        },
                        "light_color_mode_settings": {
                            "data": {
                                "color_mode_state_topic": "Colour mode state topic",
                                "color_mode_value_template": "Colour mode value template"
                            },
                            "data_description": {
                                "color_mode_state_topic": "The MQTT topic subscribed to receive colour mode updates. If this is not configured, the colour mode will be automatically set according to the last received valid colour or colour temperature.",
                                "color_mode_value_template": "Defines a [template]({value_templating_url}) to extract the colour mode value."
                            },
                            "name": "Colour mode settings"
                        },
                        "light_color_temp_settings": {
                            "data": {
                                "color_temp_command_template": "Colour temperature command template",
                                "color_temp_command_topic": "Colour temperature command topic",
                                "color_temp_state_topic": "Colour temperature state topic",
                                "color_temp_value_template": "Colour temperature value template"
                            },
                            "data_description": {
                                "color_temp_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the colour temperature command topic.",
                                "color_temp_command_topic": "The publishing topic that will be used to control the colour temperature. [Learn more.]({url}#color_temp_command_topic)",
                                "color_temp_state_topic": "The MQTT topic subscribed to receive colour temperature state updates. [Learn more.]({url}#color_temp_state_topic)",
                                "color_temp_value_template": "Defines a [template]({value_templating_url}) to extract the colour temperature value."
                            },
                            "name": "Colour temperature settings"
                        },
                        "light_effect_settings": {
                            "data": {
                                "effect": "Effect",
                                "effect_command_template": "Effect command template",
                                "effect_command_topic": "Effect command topic",
                                "effect_list": "Effect list",
                                "effect_state_topic": "Effect state topic",
                                "effect_template": "Effect template",
                                "effect_value_template": "Effect value template"
                            },
                            "data_description": {
                                "effect": "Flag that defines if the light supports effects.",
                                "effect_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the effect command topic.",
                                "effect_command_topic": "The publishing topic that will be used to control the light's effect state. [Learn more.]({url}#effect_command_topic)",
                                "effect_list": "The list of effects the light supports.",
                                "effect_state_topic": "The MQTT topic subscribed to receive effect state updates. [Learn more.]({url}#effect_state_topic)"
                            },
                            "name": "Effect settings"
                        },
                        "light_hs_settings": {
                            "data": {
                                "hs_command_template": "HS command template",
                                "hs_command_topic": "HS command topic",
                                "hs_state_topic": "HS state topic",
                                "hs_value_template": "HS value template"
                            },
                            "data_description": {
                                "hs_command_template": "Defines a [template]({command_templating_url}) to compose message which will be sent to HS command topic. Available variables: `hue` and `sat`.",
                                "hs_command_topic": "The MQTT topic to publish commands to change the light\u2019s colour state in HS format (Hue Saturation). Range for Hue: 0\u00b0 .. 360\u00b0, Range of Saturation: 0..100. Note: Brightness is sent separately in the brightness command topic. [Learn more.]({url}#hs_command_topic)",
                                "hs_state_topic": "The MQTT topic subscribed to receive colour state updates in HS format. The expected payload is the hue and saturation values separated by commas, for example, `359.5,100.0`. Note: Brightness is received separately in the brightness state topic. [Learn more.]({url}#hs_state_topic)",
                                "hs_value_template": "Defines a [template]({value_templating_url}) to extract the HS value."
                            },
                            "name": "HS colour mode settings"
                        },
                        "light_rgb_settings": {
                            "data": {
                                "rgb_command_template": "RGB command template",
                                "rgb_command_topic": "RGB command topic",
                                "rgb_state_topic": "RGB state topic",
                                "rgb_value_template": "RGB value template"
                            },
                            "data_description": {
                                "rgb_command_template": "Defines a [template]({command_templating_url}) to compose message which will be sent to RGB command topic. Available variables: `red`, `green` and `blue`.",
                                "rgb_command_topic": "The MQTT topic to publish commands to change the light\u2019s RGB state. [Learn more.]({url}#rgb_command_topic)",
                                "rgb_state_topic": "The MQTT topic subscribed to receive RGB state updates. The expected payload is the RGB values separated by commas, for example, `255,0,127`. [Learn more.]({url}#rgb_state_topic)",
                                "rgb_value_template": "Defines a [template]({value_templating_url}) to extract the RGB value."
                            },
                            "name": "RGB colour mode settings"
                        },
                        "light_rgbw_settings": {
                            "data": {
                                "rgbw_command_template": "RGBW command template",
                                "rgbw_command_topic": "RGBW command topic",
                                "rgbw_state_topic": "RGBW state topic",
                                "rgbw_value_template": "RGBW value template"
                            },
                            "data_description": {
                                "rgbw_command_template": "Defines a [template]({command_templating_url}) to compose message which will be sent to RGBW command topic. Available variables: `red`, `green`, `blue` and `white`.",
                                "rgbw_command_topic": "The MQTT topic to publish commands to change the light\u2019s RGBW state. [Learn more.]({url}#rgbw_command_topic)",
                                "rgbw_state_topic": "The MQTT topic subscribed to receive RGBW state updates. The expected payload is the RGBW values separated by commas, for example, `255,0,127,64`. [Learn more.]({url}#rgbw_state_topic)",
                                "rgbw_value_template": "Defines a [template]({value_templating_url}) to extract the RGBW value."
                            },
                            "name": "RGBW colour mode settings"
                        },
                        "light_rgbww_settings": {
                            "data": {
                                "rgbww_command_template": "RGBWW command template",
                                "rgbww_command_topic": "RGBWW command topic",
                                "rgbww_state_topic": "RGBWW state topic",
                                "rgbww_value_template": "RGBWW value template"
                            },
                            "data_description": {
                                "rgbww_command_template": "Defines a [template]({command_templating_url}) to compose message which will be sent to RGBWW command topic. Available variables: `red`, `green`, `blue`, `cold_white` and `warm_white`.",
                                "rgbww_command_topic": "The MQTT topic to publish commands to change the light\u2019s RGBWW state. [Learn more.]({url}#rgbww_command_topic)",
                                "rgbww_state_topic": "The MQTT topic subscribed to receive RGBWW state updates. The expected payload is the RGBWW values separated by commas, for example, `255,0,127,64,32`. [Learn more.]({url}#rgbww_state_topic)",
                                "rgbww_value_template": "Defines a [template]({value_templating_url}) to extract the RGBWW value."
                            },
                            "name": "RGBWW colour mode settings"
                        },
                        "light_white_settings": {
                            "data": {
                                "white_command_topic": "White command topic",
                                "white_scale": "White scale"
                            },
                            "data_description": {
                                "white_command_topic": "The MQTT topic to publish commands to change the light to white mode with a given brightness. [Learn more.]({url}#white_command_topic)",
                                "white_scale": "Defines the maximum white level (i.e., 100%) of the maximum."
                            },
                            "name": "White colour mode settings"
                        },
                        "light_xy_settings": {
                            "data": {
                                "xy_command_template": "XY command template",
                                "xy_command_topic": "XY command topic",
                                "xy_state_topic": "XY state topic",
                                "xy_value_template": "XY value template"
                            },
                            "data_description": {
                                "xy_command_template": "Defines a [template]({command_templating_url}) to compose message which will be sent to XY command topic. Available variables: `x` and `y`.",
                                "xy_command_topic": "The MQTT topic to publish commands to change the light\u2019s XY state. [Learn more.]({url}#xy_command_topic)",
                                "xy_state_topic": "The MQTT topic subscribed to receive XY state updates. The expected payload is the X and Y colour values separated by commas, for example, `0.675,0.322`. [Learn more.]({url}#xy_state_topic)",
                                "xy_value_template": "Defines a [template]({value_templating_url}) to extract the XY value."
                            },
                            "name": "XY colour mode settings"
                        },
                        "lock_payload_settings": {
                            "data": {
                                "payload_lock": "Payload \"lock\"",
                                "payload_open": "Payload \"open\"",
                                "payload_reset": "Payload \"reset\"",
                                "payload_unlock": "Payload \"unlock\"",
                                "state_jammed": "State \"jammed\"",
                                "state_locked": "State \"locked\"",
                                "state_locking": "State \"locking\"",
                                "state_unlocked": "State \"unlocked\"",
                                "state_unlocking": "State \"unlocking\""
                            },
                            "data_description": {
                                "payload_lock": "The payload sent when a \"lock\" command is issued.",
                                "payload_open": "The payload sent when an \"open\" command is issued. Set this payload if your lock supports the \"open\" action.",
                                "payload_reset": "The payload received at the state topic that resets the lock to an unknown state.",
                                "payload_unlock": "The payload sent when an \"unlock\" command is issued.",
                                "state_jammed": "The payload received at the state topic that represents the \"jammed\" state.",
                                "state_locked": "The payload received at the state topic that represents the \"locked\" state.",
                                "state_locking": "The payload received at the state topic that represents the \"locking\" state.",
                                "state_unlocked": "The payload received at the state topic that represents the \"unlocked\" state.",
                                "state_unlocking": "The payload received at the state topic that represents the \"unlocking\" state."
                            },
                            "name": "Lock payload settings"
                        },
                        "target_humidity_settings": {
                            "data": {
                                "max_humidity": "Maximum humidity",
                                "min_humidity": "Minimum humidity",
                                "target_humidity_command_template": "Target humidity command template",
                                "target_humidity_command_topic": "Target humidity command topic",
                                "target_humidity_state_template": "Target humidity state template",
                                "target_humidity_state_topic": "Target humidity state topic"
                            },
                            "data_description": {
                                "max_humidity": "The maximum target humidity that can be set.",
                                "min_humidity": "The minimum target humidity that can be set.",
                                "target_humidity_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the target humidity command topic.",
                                "target_humidity_command_topic": "The MQTT topic to publish commands to change the climate target humidity. [Learn more.]({url}#humidity_command_topic)",
                                "target_humidity_state_template": "A [template]({value_templating_url}) to render the value received on the target humidity state topic with.",
                                "target_humidity_state_topic": "The MQTT topic to subscribe for changes of the target humidity. [Learn more.]({url}#humidity_state_topic)"
                            },
                            "name": "Target humidity settings"
                        },
                        "target_temperature_settings": {
                            "data": {
                                "initial": "Initial temperature",
                                "max_temp": "Maximum temperature",
                                "min_temp": "Minimum temperature",
                                "precision": "Precision",
                                "temp_step": "Temperature step",
                                "temperature_command_template": "Temperature command template",
                                "temperature_command_topic": "Temperature command topic",
                                "temperature_high_command_template": "Upper temperature command template",
                                "temperature_high_command_topic": "Upper temperature command topic",
                                "temperature_high_state_template": "Upper temperature state template",
                                "temperature_high_state_topic": "Upper temperature state topic",
                                "temperature_low_command_template": "Lower temperature command template",
                                "temperature_low_command_topic": "Lower temperature command topic",
                                "temperature_low_state_template": "Lower temperature state template",
                                "temperature_low_state_topic": "Lower temperature state topic",
                                "temperature_state_template": "Temperature state template",
                                "temperature_state_topic": "Temperature state topic"
                            },
                            "data_description": {
                                "initial": "The climate initialises with this target temperature.",
                                "max_temp": "The maximum target temperature that can be set.",
                                "min_temp": "The minimum target temperature that can be set.",
                                "precision": "The precision in degrees the thermostat is working at.",
                                "temp_step": "The target temperature step in degrees Celsius or Fahrenheit.",
                                "temperature_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the temperature command topic.",
                                "temperature_command_topic": "The MQTT topic to publish commands to change the climate target temperature. [Learn more.]({url}#temperature_command_topic)",
                                "temperature_high_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the upper temperature command topic.",
                                "temperature_high_command_topic": "The MQTT topic to publish commands to change the climate upper target temperature. [Learn more.]({url}#temperature_high_command_topic)",
                                "temperature_high_state_template": "A [template]({value_templating_url}) to render the value received on the upper temperature state topic with.",
                                "temperature_high_state_topic": "The MQTT topic to subscribe for changes of the upper target temperature. [Learn more.]({url}#temperature_high_state_topic)",
                                "temperature_low_command_template": "A [template]({command_templating_url}) to compose the payload to be published at the lower temperature command topic.",
                                "temperature_low_command_topic": "The MQTT topic to publish commands to change the climate lower target temperature. [Learn more.]({url}#temperature_low_command_topic)",
                                "temperature_low_state_template": "A [template]({value_templating_url}) to render the value received on the lower temperature state topic with.",
                                "temperature_low_state_topic": "The MQTT topic to subscribe for changes of the lower target temperature. [Learn more.]({url}#temperature_low_state_topic)",
                                "temperature_state_template": "A [template]({value_templating_url}) to render the value received on the temperature state topic with.",
                                "temperature_state_topic": "The MQTT topic to subscribe for changes of the target temperature. [Learn more.]({url}#temperature_state_topic)"
                            },
                            "name": "Target temperature settings"
                        }
                    },
                    "title": "Configure MQTT device \"{mqtt_device}\""
                },
                "summary_menu": {
                    "description": "Entities set up:\n{mqtt_items}\n\nDecide what to do next:",
                    "menu_options": {
                        "availability": "Configure availability",
                        "delete_entity": "Delete an entity",
                        "device": "Update device properties",
                        "entity": "Add another entity to \"{mqtt_device}\"",
                        "export": "Export MQTT device configuration",
                        "save_changes": "Save changes",
                        "update_entity": "Update entity properties"
                    },
                    "title": "Reconfigure \"{mqtt_device}\""
                },
                "update_entity": {
                    "data": {
                        "component": "Entity"
                    },
                    "data_description": {
                        "component": "Select the entity you want to update."
                    },
                    "description": "Select the entity you want to update",
                    "title": "Select entity"
                }
            }
        }
    },
    "device_automation": {
        "trigger_subtype": {
            "button_1": "First button",
            "button_2": "Second button",
            "button_3": "Third button",
            "button_4": "Fourth button",
            "button_5": "Fifth button",
            "button_6": "Sixth button",
            "turn_off": "Turn off",
            "turn_on": "Turn on"
        },
        "trigger_type": {
            "button_double_press": "\"{subtype}\" double clicked",
            "button_long_press": "\"{subtype}\" continuously pressed",
            "button_long_release": "\"{subtype}\" released after long press",
            "button_quadruple_press": "\"{subtype}\" quadruple clicked",
            "button_quintuple_press": "\"{subtype}\" quintuple clicked",
            "button_short_press": "\"{subtype}\" pressed",
            "button_short_release": "\"{subtype}\" released",
            "button_triple_press": "\"{subtype}\" triple clicked"
        }
    },
    "exceptions": {
        "addon_start_failed": {
            "message": "Failed to correctly start {addon} add-on."
        },
        "command_template_error": {
            "message": "Parsing template `{command_template}` for entity `{entity_id}` failed with error: {error}."
        },
        "invalid_platform_config": {
            "message": "Reloading YAML config for manually configured MQTT `{domain}` item failed. See logs for more details."
        },
        "invalid_publish_topic": {
            "message": "Unable to publish: topic template `{topic_template}` produced an invalid topic `{topic}` after rendering ({error})"
        },
        "mqtt_broker_error": {
            "message": "Error talking to MQTT: {error_message}."
        },
        "mqtt_not_setup_cannot_publish": {
            "message": "Cannot publish to topic \"{topic}\", make sure MQTT is set up correctly."
        },
        "mqtt_not_setup_cannot_subscribe": {
            "message": "Cannot subscribe to topic \"{topic}\", make sure MQTT is set up correctly."
        },
        "mqtt_not_setup_cannot_unsubscribe_twice": {
            "message": "Cannot unsubscribe topic \"{topic}\" twice."
        },
        "mqtt_topic_not_a_string": {
            "message": "Topic needs to be a string! Got: {topic}."
        },
        "mqtt_trigger_cannot_remove_twice": {
            "message": "Can't remove trigger twice."
        }
    },
    "issues": {
        "deprecated_object_id": {
            "description": "Entity {entity_id} uses the `object_id` option which is deprecated. To fix the issue, replace the `object_id: {object_id}` option with `default_entity_id: {domain}.{object_id}` in your \"configuration.yaml\", and restart Home Assistant.",
            "title": "Deprecated option object_id used"
        },
        "deprecated_vacuum_battery_feature": {
            "description": "Vacuum entity {entity_id} implements the battery feature which is deprecated. This will stop working in Home Assistant 2026.2. Implement a separate entity for the battery state instead. To fix the issue, remove the `battery` feature from the configured supported features, and restart Home Assistant.",
            "title": "Deprecated battery feature used"
        },
        "invalid_platform_config": {
            "description": "Home Assistant detected an invalid config for a manually configured item.\n\nPlatform domain: **{domain}**\nConfiguration file: **{config_file}**\nNear line: **{line}**\nConfiguration found:\n```yaml\n{config}\n```\nError: **{error}**.\n\nMake sure the configuration is valid and [reload](/developer-tools/yaml) the manually configured MQTT items or restart Home Assistant to fix this issue.",
            "title": "Invalid config found for MQTT {domain} item"
        },
        "subentry_migration_discovery": {
            "fix_flow": {
                "step": {
                    "confirm": {
                        "description": "Exported MQTT device \"{name}\" identified via MQTT discovery. Select **Submit** to confirm that the MQTT device is to be migrated to the main MQTT configuration, and to remove the existing MQTT device subentry. Make sure that the discovery is retained at the MQTT broker, or is resent after the subentry is removed, so that the MQTT device will be set up correctly. As an alternative you can change the device identifiers and entity unique ID-s in your MQTT discovery configuration payload, and cancel this repair if you want to keep the MQTT device subentry.",
                        "title": "MQTT device \"{name}\" subentry migration to MQTT discovery"
                    }
                }
            },
            "title": "MQTT device \"{name}\" subentry migration to MQTT discovery"
        },
        "subentry_migration_yaml": {
            "fix_flow": {
                "step": {
                    "confirm": {
                        "description": "Exported MQTT device \"{name}\" identified in YAML configuration. Select **Submit** to confirm that the MQTT device is to be migrated to main MQTT config entry, and to remove the existing MQTT device subentry. As an alternative you can change the device identifiers and entity unique ID-s in your configuration.yaml file, and cancel this repair if you want to keep the MQTT device subentry.",
                        "title": "MQTT device \"{name}\" subentry migration to YAML"
                    }
                }
            },
            "title": "MQTT device \"{name}\" subentry migration to YAML"
        }
    },
    "options": {
        "error": {
            "bad_birth": "Invalid birth topic",
            "bad_certificate": "The CA certificate is invalid",
            "bad_client_cert": "Invalid client certificate, ensure a valid file is supplied",
            "bad_client_cert_key": "Client certificate and private key are not a valid pair",
            "bad_discovery_prefix": "Invalid discovery prefix",
            "bad_will": "Invalid will topic",
            "bad_ws_headers": "Supply valid HTTP headers as a JSON object",
            "cannot_connect": "Failed to connect",
            "client_key_error": "Invalid private key file or invalid password supplied",
            "invalid_inclusion": "The client certificate and private key must be configured together"
        },
        "step": {
            "broker": {
                "data": {
                    "advanced_options": "Advanced options",
                    "broker": "Broker",
                    "certificate": "Upload custom CA certificate file",
                    "client_cert": "Upload client certificate file",
                    "client_id": "Client ID (leave empty to randomly generated one)",
                    "client_key": "Upload private key file",
                    "keepalive": "The time between sending keep alive messages",
                    "password": "Password",
                    "port": "Port",
                    "protocol": "MQTT protocol",
                    "set_ca_cert": "Broker certificate validation",
                    "set_client_cert": "Use a client certificate",
                    "tls_insecure": "Ignore broker certificate validation",
                    "transport": "MQTT transport",
                    "username": "Username",
                    "ws_headers": "WebSocket headers in JSON format",
                    "ws_path": "WebSocket path"
                },
                "data_description": {
                    "advanced_options": "Enable and select **Next** to set advanced options.",
                    "broker": "The hostname or IP address of your MQTT broker.",
                    "certificate": "The custom CA certificate file to validate your MQTT brokers certificate.",
                    "client_cert": "The client certificate to authenticate against your MQTT broker.",
                    "client_id": "The unique ID to identify the Home Assistant MQTT API as MQTT client. It is recommended to leave this option blank.",
                    "client_key": "The private key file that belongs to your client certificate.",
                    "keepalive": "A value less than 90 seconds is advised.",
                    "password": "The password to log in to your MQTT broker.",
                    "port": "The port your MQTT broker listens to. For example 1883.",
                    "protocol": "The MQTT protocol your broker operates at. For example 3.1.1.",
                    "set_ca_cert": "Select **Auto** for automatic CA validation, or **Custom** and select **Next** to set a custom CA certificate, to allow validating your MQTT brokers certificate.",
                    "set_client_cert": "Enable and select **Next** to set a client certificate and private key to authenticate against your MQTT broker.",
                    "tls_insecure": "Option to ignore validation of your MQTT broker's certificate.",
                    "transport": "The transport to be used for the connection to your MQTT broker.",
                    "username": "The username to log in to your MQTT broker.",
                    "ws_headers": "The WebSocket headers to pass through the WebSocket-based connection to your MQTT broker.",
                    "ws_path": "The WebSocket path to be used for the connection to your MQTT broker."
                },
                "description": "Please enter the connection information of your MQTT broker.",
                "title": "Broker options"
            },
            "options": {
                "data": {
                    "birth_enable": "Enable birth message",
                    "birth_payload": "Birth message payload",
                    "birth_qos": "Birth message QoS",
                    "birth_retain": "Birth message retain",
                    "birth_topic": "Birth message topic",
                    "discovery": "Enable discovery",
                    "discovery_prefix": "Discovery prefix",
                    "will_enable": "Enable will message",
                    "will_payload": "Will message payload",
                    "will_qos": "Will message QoS",
                    "will_retain": "Will message retain",
                    "will_topic": "Will message topic"
                },
                "data_description": {
                    "birth_enable": "When set, Home Assistant will publish an online message to your MQTT broker when MQTT is ready.",
                    "birth_payload": "The \"birth\" message that is published when MQTT is ready and connected.",
                    "birth_qos": "The quality of service of the \"birth\" message that is published when MQTT is ready and connected",
                    "birth_retain": "When set, Home Assistant will retain the \"birth\" message published to your MQTT broker.",
                    "birth_topic": "The MQTT topic where Home Assistant will publish a \"birth\" message.",
                    "discovery": "Option to enable MQTT automatic discovery.",
                    "discovery_prefix": "The prefix of configuration topics the MQTT integration will subscribe to.",
                    "will_enable": "When set, Home Assistant will ask your broker to publish a \"will\" message when MQTT is stopped or when it loses the connection to your broker.",
                    "will_payload": "The message your MQTT broker \"will\" publish when the MQTT integration is stopped or when the connection is lost.",
                    "will_qos": "The quality of service of the \"will\" message that is published by your MQTT broker.",
                    "will_retain": "When set, your MQTT broker will retain the \"will\" message.",
                    "will_topic": "The MQTT topic your MQTT broker will publish a \"will\" message to."
                },
                "description": "Discovery - If discovery is enabled (recommended), Home Assistant will automatically discover devices and entities which publish their configuration on the MQTT broker. If discovery is disabled, all configuration must be done manually.\nDiscovery prefix - The prefix a configuration topic for automatic discovery must start with.\nBirth message - The birth message will be sent each time Home Assistant (re)connects to the MQTT broker.\nWill message - The will message will be sent each time Home Assistant loses its connection to the broker, both in case of a clean (e.g. Home Assistant shutting down) and in case of an unclean (e.g. Home Assistant crashing or losing its network connection) disconnect.",
                "title": "MQTT options"
            }
        }
    },
    "selector": {
        "alarm_control_panel_code_mode": {
            "options": {
                "local_code": "Local code validation",
                "remote_code": "Numeric remote code validation",
                "remote_code_text": "Text remote code validation"
            }
        },
        "alarm_control_panel_features": {
            "options": {
                "arm_away": "Arm away",
                "arm_custom_bypass": "Arm with custom bypass",
                "arm_home": "Arm home",
                "arm_night": "Arm night",
                "arm_vacation": "Arm holiday",
                "trigger": "Trigger"
            }
        },
        "climate_modes": {
            "options": {
                "auto": "Auto",
                "cool": "Cool",
                "dry": "Dry",
                "fan_only": "Fan only",
                "heat": "Heat",
                "heat_cool": "Heat/Cool",
                "off": "Off"
            }
        },
        "device_class_binary_sensor": {
            "options": {
                "battery": "Battery",
                "battery_charging": "Charging",
                "carbon_monoxide": "Carbon monoxide",
                "cold": "Cold",
                "connectivity": "Connectivity",
                "door": "Door",
                "garage_door": "Garage door",
                "gas": "Gas",
                "heat": "Heat",
                "light": "Light",
                "lock": "Lock",
                "moisture": "Moisture",
                "motion": "Motion",
                "moving": "Moving",
                "occupancy": "Occupancy",
                "opening": "Opening",
                "plug": "Plug",
                "power": "Power",
                "presence": "Presence",
                "problem": "Problem",
                "running": "Running",
                "safety": "Safety",
                "smoke": "Smoke",
                "sound": "Sound",
                "tamper": "Tamper",
                "update": "Update",
                "vibration": "Vibration",
                "window": "Window"
            }
        },
        "device_class_button": {
            "options": {
                "identify": "Identify",
                "restart": "Restart",
                "update": "Update"
            }
        },
        "device_class_cover": {
            "options": {
                "awning": "Awning",
                "blind": "Blind",
                "curtain": "Curtain",
                "damper": "Damper",
                "door": "Door",
                "garage": "Garage",
                "gate": "Gate",
                "shade": "Shade",
                "shutter": "Shutter",
                "window": "Window"
            }
        },
        "device_class_sensor": {
            "options": {
                "absolute_humidity": "Absolute humidity",
                "apparent_power": "Apparent power",
                "aqi": "Air quality index",
                "area": "Area",
                "atmospheric_pressure": "Atmospheric pressure",
                "battery": "Battery",
                "blood_glucose_concentration": "Blood glucose concentration",
                "carbon_dioxide": "Carbon dioxide",
                "carbon_monoxide": "Carbon monoxide",
                "conductivity": "Conductivity",
                "current": "Current",
                "data_rate": "Data rate",
                "data_size": "Data size",
                "date": "Date",
                "distance": "Distance",
                "duration": "Duration",
                "energy": "Energy",
                "energy_distance": "Energy per distance",
                "energy_storage": "Stored energy",
                "enum": "Enumeration",
                "frequency": "Frequency",
                "gas": "Gas",
                "humidity": "Humidity",
                "illuminance": "Illuminance",
                "irradiance": "Irradiance",
                "moisture": "Moisture",
                "monetary": "Monetary balance",
                "nitrogen_dioxide": "Nitrogen dioxide",
                "nitrogen_monoxide": "Nitrogen monoxide",
                "nitrous_oxide": "Nitrous oxide",
                "ozone": "Ozone",
                "ph": "pH",
                "pm1": "PM1",
                "pm10": "PM10",
                "pm25": "PM2.5",
                "pm4": "PM4",
                "power": "Power",
                "power_factor": "Power factor",
                "precipitation": "Precipitation",
                "precipitation_intensity": "Precipitation intensity",
                "pressure": "Pressure",
                "reactive_energy": "Reactive energy",
                "reactive_power": "Reactive power",
                "signal_strength": "Signal strength",
                "sound_pressure": "Sound pressure",
                "speed": "Speed",
                "sulphur_dioxide": "Sulphur dioxide",
                "temperature": "Temperature",
                "timestamp": "Timestamp",
                "volatile_organic_compounds": "Volatile organic compounds",
                "volatile_organic_compounds_parts": "Volatile organic compounds parts",
                "voltage": "Voltage",
                "volume": "Volume",
                "volume_flow_rate": "Volume flow rate",
                "volume_storage": "Stored volume",
                "water": "Water",
                "weight": "Weight",
                "wind_direction": "Wind direction",
                "wind_speed": "Wind speed"
            }
        },
        "device_class_switch": {
            "options": {
                "outlet": "Socket",
                "switch": "Switch"
            }
        },
        "entity_category": {
            "options": {
                "config": "Config",
                "diagnostic": "Diagnostic"
            }
        },
        "image_encoding": {
            "options": {
                "b64": "Base64 encoding",
                "raw": "Raw data"
            }
        },
        "image_processing_mode": {
            "options": {
                "image_data": "Image data is received",
                "image_url": "Image URL is received"
            }
        },
        "light_schema": {
            "options": {
                "basic": "Default schema",
                "json": "JSON",
                "template": "Template"
            }
        },
        "on_command_type": {
            "options": {
                "brightness": "Brightness",
                "first": "First",
                "last": "Last"
            }
        },
        "platform": {
            "options": {
                "alarm_control_panel": "Alarm control panel",
                "binary_sensor": "Binary sensor",
                "button": "Button",
                "climate": "Climate",
                "cover": "Cover",
                "fan": "Fan",
                "image": "Image",
                "light": "Light",
                "lock": "Lock",
                "notify": "Notifications",
                "sensor": "Sensor",
                "switch": "Switch"
            }
        },
        "set_ca_cert": {
            "options": {
                "auto": "Auto",
                "custom": "Custom",
                "off": "Off"
            }
        },
        "state_class": {
            "options": {
                "measurement": "Measurement",
                "measurement_angle": "Measurement angle",
                "total": "Total",
                "total_increasing": "Total increasing"
            }
        },
        "supported_color_modes": {
            "options": {
                "brightness": "Brightness only",
                "color_temp": "Colour temperature",
                "hs": "HS",
                "onoff": "On/Off",
                "rgb": "RGB",
                "rgbw": "RGBW",
                "rgbww": "RGBWW",
                "white": "White",
                "xy": "XY"
            }
        },
        "target_temperature_feature": {
            "options": {
                "high_low": "Upper/lower target temperature",
                "none": "No target temperature",
                "single": "Single target temperature"
            }
        }
    },
    "services": {
        "dump": {
            "description": "Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.",
            "fields": {
                "duration": {
                    "description": "How long we should listen for messages in seconds.",
                    "name": "Duration"
                },
                "topic": {
                    "description": "Topic to listen to.",
                    "name": "Topic"
                }
            },
            "name": "Export"
        },
        "publish": {
            "description": "Publishes a message to an MQTT topic.",
            "fields": {
                "evaluate_payload": {
                    "description": "If 'Payload' is a Python bytes literal, evaluate the bytes literal and publish the raw data.",
                    "name": "Evaluate payload"
                },
                "payload": {
                    "description": "The payload to publish. Publishes an empty message if not provided.",
                    "name": "Payload"
                },
                "qos": {
                    "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.",
                    "name": "QoS"
                },
                "retain": {
                    "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.",
                    "name": "Retain"
                },
                "topic": {
                    "description": "Topic to publish to.",
                    "name": "Topic"
                }
            },
            "name": "Publish"
        },
        "reload": {
            "description": "Reloads MQTT entities from the YAML-configuration.",
            "name": "Reload"
        }
    },
    "triggers": {
        "_": {
            "description": "When a specific message is received on a given MQTT topic.",
            "description_configured": "When an MQTT message has been received",
            "fields": {
                "payload": {
                    "description": "The payload to trigger on.",
                    "name": "Payload"
                },
                "topic": {
                    "description": "MQTT topic to listen to.",
                    "name": "Topic"
                }
            },
            "name": "MQTT"
        }
    }
}