{
    "config": {
        "abort": {
            "addon_get_discovery_info_failed": "Failed to get Z-Wave add-on discovery info.",
            "addon_info_failed": "Failed to get Z-Wave add-on info.",
            "addon_install_failed": "Failed to install the Z-Wave add-on.",
            "addon_required": "The Z-Wave migration flow requires the integration to be configured using the Z-Wave Supervisor add-on. If you are using Z-Wave JS UI, please follow our [migration instructions]({zwave_js_ui_migration}).",
            "addon_set_config_failed": "Failed to set Z-Wave configuration.",
            "addon_start_failed": "Failed to start the Z-Wave add-on.",
            "addon_stop_failed": "Failed to stop the Z-Wave add-on.",
            "already_configured": "Device is already configured",
            "already_in_progress": "Configuration flow is already in progress",
            "backup_failed": "Failed to back up network.",
            "cannot_connect": "Failed to connect",
            "config_entry_not_loaded": "The Z-Wave configuration entry is not loaded. Please try again when the configuration entry is loaded.",
            "different_device": "The connected USB device is not the same as previously configured for this config entry. Please instead create a new config entry for the new device.",
            "discovery_requires_supervisor": "Discovery requires the Home Assistant Supervisor.",
            "migration_low_sdk_version": "The SDK version of the old adapter is lower than {ok_sdk_version}. This means it's not possible to migrate the non-volatile memory (NVM) of the old adapter to another adapter.\n\nCheck the documentation on the manufacturer support pages of the old adapter, if it's possible to upgrade the firmware of the old adapter to a version that is built with SDK version {ok_sdk_version} or higher.",
            "migration_successful": "Migration successful.",
            "not_hassio": "ESPHome discovery requires Home Assistant to configure the Z-Wave add-on.",
            "not_zwave_device": "Discovered device is not a Z-Wave device.",
            "not_zwave_js_addon": "Discovered add-on is not the official Z-Wave add-on.",
            "reconfigure_successful": "Re-configuration was successful",
            "reset_failed": "Failed to reset adapter.",
            "usb_ports_failed": "Failed to get USB devices."
        },
        "error": {
            "addon_start_failed": "Failed to start the Z-Wave add-on. Check the configuration.",
            "cannot_connect": "Failed to connect",
            "invalid_ws_url": "Invalid websocket URL",
            "unknown": "Unexpected error"
        },
        "flow_title": "{name}",
        "progress": {
            "backup_nvm": "Please wait while the network backup completes",
            "install_addon": "Installation can take several minutes",
            "restore_nvm": "Please wait while the network restore completes",
            "start_addon": "Starting add-on"
        },
        "step": {
            "choose_serial_port": {
                "data": {
                    "usb_path": "USB device path"
                },
                "title": "Select your Z-Wave device"
            },
            "configure_addon_reconfigure": {
                "data": {
                    "lr_s2_access_control_key": "Long Range S2 Access Control Key",
                    "lr_s2_authenticated_key": "Long Range S2 Authenticated Key",
                    "s0_legacy_key": "S0 Key (Legacy)",
                    "s2_access_control_key": "S2 Access Control Key",
                    "s2_authenticated_key": "S2 Authenticated Key",
                    "s2_unauthenticated_key": "S2 Unauthenticated Key",
                    "usb_path": "USB device path"
                },
                "description": "Select your Z-Wave adapter",
                "title": "Enter the Z-Wave add-on configuration"
            },
            "configure_addon_user": {
                "data": {
                    "usb_path": "USB device path"
                },
                "description": "Select your Z-Wave adapter",
                "title": "Enter the Z-Wave add-on configuration"
            },
            "configure_security_keys": {
                "data": {
                    "lr_s2_access_control_key": "Long Range S2 Access Control Key",
                    "lr_s2_authenticated_key": "Long Range S2 Authenticated Key",
                    "s0_legacy_key": "S0 Key (Legacy)",
                    "s2_access_control_key": "S2 Access Control Key",
                    "s2_authenticated_key": "S2 Authenticated Key",
                    "s2_unauthenticated_key": "S2 Unauthenticated Key"
                },
                "description": "Enter the security keys for your existing Z-Wave network",
                "title": "Security keys"
            },
            "confirm_usb_migration": {
                "description": "You are about to migrate your Z-Wave network from the old adapter to the new adapter {usb_title}. This will take a backup of the network from the old adapter and restore the network to the new adapter.\n\nPress Submit to continue with the migration.",
                "title": "Migrate to a new adapter"
            },
            "hassio_confirm": {
                "description": "Do you want to set up the Z-Wave integration with the Z-Wave add-on?"
            },
            "install_addon": {
                "title": "Installing add-on"
            },
            "installation_type": {
                "description": "In a few steps, we're going to set up your adapter. Home Assistant can automatically install and configure the recommended Z-Wave setup, or you can customize it.",
                "menu_options": {
                    "intent_custom": "Custom installation",
                    "intent_recommended": "Recommended installation"
                },
                "title": "Set up Z-Wave"
            },
            "instruct_unplug": {
                "description": "Backup saved to \"{file_path}\"\n\nYour old adapter has not been reset. You should now unplug it to prevent it from interfering with the new adapter.\n\nPlease make sure your new adapter is plugged in before continuing.",
                "title": "Unplug your old adapter"
            },
            "manual": {
                "data": {
                    "url": "URL"
                },
                "data_description": {
                    "url": "The URL of the Z-Wave Server WebSocket API, e.g. {example_server_url}"
                },
                "description": "The Z-Wave integration requires a running Z-Wave Server. If you don't already have that set up, please read the [instructions]({server_instructions}) in our documentation.\n\nWhen you have a Z-Wave Server running, enter its URL below to allow the integration to connect."
            },
            "manual_reconfigure": {
                "data": {
                    "url": "URL"
                },
                "data_description": {
                    "url": "The URL of the Z-Wave Server WebSocket API, e.g. {example_server_url}"
                },
                "description": "The Z-Wave integration requires a running Z-Wave Server. If you don't already have that set up, please read the [instructions]({server_instructions}) in our documentation.\n\nWhen you have a Z-Wave Server running, enter its URL below to allow the integration to connect."
            },
            "network_type": {
                "data": {
                    "network_type": "Is your network new or does it already exist?"
                },
                "title": "Z-Wave network"
            },
            "on_supervisor": {
                "data": {
                    "use_addon": "Use the Z-Wave Supervisor add-on"
                },
                "description": "Do you want to use the Z-Wave Supervisor add-on?",
                "title": "Select connection method"
            },
            "on_supervisor_reconfigure": {
                "data": {
                    "use_addon": "Use the Z-Wave Supervisor add-on"
                },
                "description": "Do you want to use the Z-Wave Supervisor add-on?",
                "title": "Select connection method"
            },
            "reconfigure": {
                "description": "Are you migrating to a new adapter or re-configuring the current adapter?",
                "menu_option_descriptions": {
                    "intent_migrate": "This will move your Z-Wave network to a new adapter.",
                    "intent_reconfigure": "This will let you change the adapter configuration."
                },
                "menu_options": {
                    "intent_migrate": "Migrate to a new adapter",
                    "intent_reconfigure": "Re-configure the current adapter"
                },
                "title": "Migrate or re-configure"
            },
            "restore_failed": {
                "description": "Your Z-Wave network could not be restored to the new adapter. This means that your Z-Wave devices are not connected to Home Assistant.\n\nThe backup is saved to \u201d{file_path}\u201d\n\n'<'a href=\"{file_url}\" download=\"{file_name}\"'>'Download backup file'<'/a'>'",
                "submit": "Try again",
                "title": "Restoring unsuccessful"
            },
            "rf_region": {
                "data": {
                    "rf_region": "RF region"
                },
                "data_description": {
                    "rf_region": "The radio frequency region for your Z-Wave network. This must match the region of your Z-Wave devices."
                },
                "description": "Select the RF region for your Z-Wave network.",
                "title": "Z-Wave region"
            },
            "start_addon": {
                "title": "Configuring add-on"
            },
            "zeroconf_confirm": {
                "description": "Do you want to add the Z-Wave Server with home ID {home_id} found at {url} to Home Assistant?",
                "title": "Discovered Z-Wave Server"
            }
        }
    },
    "device_automation": {
        "action_type": {
            "clear_lock_usercode": "Clear usercode on {entity_name}",
            "ping": "Ping device",
            "refresh_value": "Refresh the value(s) for {entity_name}",
            "reset_meter": "Reset meters on {subtype}",
            "set_config_parameter": "Set value of config parameter {subtype}",
            "set_lock_usercode": "Set a usercode on {entity_name}",
            "set_value": "Set value of a Z-Wave Value"
        },
        "condition_type": {
            "config_parameter": "Config parameter {subtype} value",
            "node_status": "Node status",
            "value": "Current value of a Z-Wave Value"
        },
        "extra_fields": {
            "code_slot": "Code slot",
            "command_class": "Command class",
            "data_type": "Data type",
            "endpoint": "Endpoint",
            "event": "Event",
            "event_label": "Event label",
            "event_type": "Event type",
            "for": "Duration",
            "from": "From",
            "label": "Label",
            "property": "Property",
            "property_key": "Property key",
            "refresh_all_values": "Refresh all values",
            "status": "Status",
            "to": "To",
            "type.": "Type",
            "usercode": "Usercode",
            "value": "Value",
            "wait_for_result": "Wait for result"
        },
        "trigger_type": {
            "event.notification.entry_control": "Sent an Entry Control notification",
            "event.notification.notification": "Sent a notification",
            "event.value_notification.basic": "Basic CC event on {subtype}",
            "event.value_notification.central_scene": "Central Scene action on {subtype}",
            "event.value_notification.scene_activation": "Scene Activation on {subtype}",
            "state.node_status": "Node status changed",
            "zwave_js.value_updated.config_parameter": "Value change on config parameter {subtype}",
            "zwave_js.value_updated.value": "Value change on a Z-Wave Value"
        }
    },
    "entity": {
        "button": {
            "ping": {
                "name": "Ping"
            }
        },
        "sensor": {
            "avg_signal_noise": {
                "name": "Avg. signal noise (channel {channel})"
            },
            "can": {
                "name": "Collisions"
            },
            "commands_dropped": {
                "name": "Commands dropped ({direction})"
            },
            "controller_status": {
                "name": "Status",
                "state": {
                    "jammed": "Jammed",
                    "ready": "Ready",
                    "unresponsive": "Unresponsive"
                }
            },
            "last_seen": {
                "name": "Last seen"
            },
            "messages_dropped": {
                "name": "Messages dropped ({direction})"
            },
            "nak": {
                "name": "Messages not accepted"
            },
            "node_status": {
                "name": "Node status",
                "state": {
                    "alive": "Alive",
                    "asleep": "Asleep",
                    "awake": "Awake",
                    "dead": "Dead",
                    "unknown": "Unknown"
                }
            },
            "rtt": {
                "name": "Round trip time"
            },
            "signal_noise": {
                "name": "Signal noise (channel {channel})"
            },
            "signal_strength": {
                "name": "Signal strength"
            },
            "successful_commands": {
                "name": "Successful commands ({direction})"
            },
            "successful_messages": {
                "name": "Successful messages ({direction})"
            },
            "timeout_ack": {
                "name": "Missing ACKs"
            },
            "timeout_callback": {
                "name": "Timed out callbacks"
            },
            "timeout_response": {
                "name": "Timed out responses"
            }
        }
    },
    "issues": {
        "device_config_file_changed": {
            "fix_flow": {
                "abort": {
                    "cannot_connect": "Cannot connect to {device_name}. Please try again later after confirming that your Z-Wave network is up and connected to Home Assistant.",
                    "issue_ignored": "Device config file update for {device_name} ignored."
                },
                "step": {
                    "init": {
                        "description": "The device configuration file for {device_name} has changed.\n\nZ-Wave discovers a lot of device metadata by interviewing the device. However, some of the information has to be loaded from a configuration file. Some of this information is only evaluated once, during the device interview.\n\nWhen a device config file is updated, this information may be stale and the device must be re-interviewed to pick up the changes.\n\nThis is not a required operation and device functionality will be impacted during the re-interview process, but you may see improvements for your device once it is complete.\n\nIf you decide to proceed with the re-interview, it will take place in the background.\n\nNote: Battery-powered sleeping devices need to be woken up during re-interview for it to work. How to wake up the device is device-specific and is normally explained in the device manual.",
                        "menu_options": {
                            "confirm": "Re-interview device",
                            "ignore": "Ignore device config update"
                        },
                        "title": "Device configuration file changed: {device_name}"
                    }
                }
            },
            "title": "Device configuration file changed: {device_name}"
        },
        "invalid_server_version": {
            "description": "The version of Z-Wave Server you are currently running is too old for this version of Home Assistant. Please update the Z-Wave Server to the latest version to fix this issue.",
            "title": "Newer version of Z-Wave Server needed"
        },
        "migrate_unique_id": {
            "fix_flow": {
                "step": {
                    "confirm": {
                        "description": "A Z-Wave adapter of model {controller_model} was connected to the {config_entry_title} configuration entry. This adapter has a different ID ({new_unique_id}) than the previously connected adapter ({old_unique_id}).\n\nReasons for a different adapter ID could be:\n\n1. The adapter was factory reset using a 3rd party application.\n2. A backup of the adapter's non-volatile memory was restored to the adapter using a 3rd party application.\n3. A different adapter was connected to this configuration entry.\n\nIf a different adapter was connected, you should instead set up a new configuration entry for the new adapter.\n\nIf you are sure that the current adapter is the correct adapter, confirm by pressing Submit. The configuration entry will remember the new adapter ID.",
                        "title": "An unknown adapter was detected"
                    }
                }
            },
            "title": "An unknown adapter was detected"
        }
    },
    "selector": {
        "network_type": {
            "options": {
                "existing": "It already exists",
                "new": "It's new"
            }
        }
    },
    "services": {
        "bulk_set_partial_config_parameters": {
            "description": "Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.",
            "fields": {
                "area_id": {
                    "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.",
                    "name": "Area ID(s)"
                },
                "device_id": {
                    "description": "The device(s) to target for this action.",
                    "name": "Device ID(s)"
                },
                "endpoint": {
                    "description": "The configuration parameter's endpoint.",
                    "name": "Endpoint"
                },
                "entity_id": {
                    "description": "The entity ID(s) to target for this action.",
                    "name": "Entity ID(s)"
                },
                "parameter": {
                    "description": "The name (or ID) of the configuration parameter you want to configure.",
                    "name": "Parameter"
                },
                "value": {
                    "description": "The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter.",
                    "name": "Value"
                }
            },
            "name": "Bulk set partial configuration parameters (advanced)"
        },
        "clear_lock_usercode": {
            "description": "Clears a user code from a lock.",
            "fields": {
                "code_slot": {
                    "description": "Code slot to clear code from.",
                    "name": "Code slot"
                }
            },
            "name": "Clear lock user code"
        },
        "invoke_cc_api": {
            "description": "Calls a Command Class API on a node. Some Command Classes can't be fully controlled via the `set_value` action and require direct calls to the Command Class API.",
            "fields": {
                "area_id": {
                    "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.",
                    "name": "Area ID(s)"
                },
                "command_class": {
                    "description": "The ID of the command class that you want to issue a command to.",
                    "name": "Command class"
                },
                "device_id": {
                    "description": "The device(s) to target for this action.",
                    "name": "Device ID(s)"
                },
                "endpoint": {
                    "description": "The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted.",
                    "name": "Endpoint"
                },
                "entity_id": {
                    "description": "The entity ID(s) to target for this action.",
                    "name": "Entity ID(s)"
                },
                "method_name": {
                    "description": "The name of the API method to call. Refer to the Z-Wave Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for available methods.",
                    "name": "Method name"
                },
                "parameters": {
                    "description": "A list of parameters to pass to the API method. Refer to the Z-Wave Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for parameters.",
                    "name": "Parameters"
                }
            },
            "name": "Invoke a Command Class API on a node (advanced)"
        },
        "multicast_set_value": {
            "description": "Changes any value that Z-Wave recognises on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This action has minimal validation so only use this action if you know what you are doing.",
            "fields": {
                "area_id": {
                    "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.",
                    "name": "Area ID(s)"
                },
                "broadcast": {
                    "description": "Whether the command should be broadcast to all devices on the network.",
                    "name": "Broadcast"
                },
                "command_class": {
                    "description": "The ID of the command class for the value.",
                    "name": "Command class"
                },
                "device_id": {
                    "description": "The device(s) to target for this action.",
                    "name": "Device ID(s)"
                },
                "endpoint": {
                    "description": "The endpoint for the value.",
                    "name": "Endpoint"
                },
                "entity_id": {
                    "description": "The entity ID(s) to target for this action.",
                    "name": "Entity ID(s)"
                },
                "options": {
                    "description": "Set value options map. Refer to the Z-Wave documentation for more information on what options can be set.",
                    "name": "Options"
                },
                "property": {
                    "description": "The ID of the property for the value.",
                    "name": "Property"
                },
                "property_key": {
                    "description": "The ID of the property key for the value.",
                    "name": "Property key"
                },
                "value": {
                    "description": "The new value to set.",
                    "name": "Value"
                }
            },
            "name": "Set a value on multiple devices via multicast (advanced)"
        },
        "ping": {
            "description": "Forces Z-Wave to try to reach a node. This can be used to update the status of the node in Z-Wave when you think it doesn't accurately reflect reality, e.g. reviving a failed/dead node or marking the node as asleep.",
            "fields": {
                "area_id": {
                    "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.",
                    "name": "Area ID(s)"
                },
                "device_id": {
                    "description": "The device(s) to target for this action.",
                    "name": "Device ID(s)"
                },
                "entity_id": {
                    "description": "The entity ID(s) to target for this action.",
                    "name": "Entity ID(s)"
                }
            },
            "name": "Ping a node"
        },
        "refresh_notifications": {
            "description": "Refreshes notifications on a node based on notification type and optionally notification event.",
            "fields": {
                "area_id": {
                    "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.",
                    "name": "Area ID(s)"
                },
                "device_id": {
                    "description": "The device(s) to target for this action.",
                    "name": "Device ID(s)"
                },
                "entity_id": {
                    "description": "The entity ID(s) to target for this action.",
                    "name": "Entity ID(s)"
                },
                "notification_event": {
                    "description": "The Notification Event number as defined in the Z-Wave specs.",
                    "name": "Notification Event"
                },
                "notification_type": {
                    "description": "The Notification Type number as defined in the Z-Wave specs.",
                    "name": "Notification Type"
                }
            },
            "name": "Refresh notifications on a node (advanced)"
        },
        "refresh_value": {
            "description": "Force updates the values of a Z-Wave entity.",
            "fields": {
                "entity_id": {
                    "description": "Entities to refresh.",
                    "name": "Entities"
                },
                "refresh_all_values": {
                    "description": "Whether to refresh all values or just the primary value.",
                    "name": "Refresh all values"
                }
            },
            "name": "Refresh values"
        },
        "reset_meter": {
            "description": "Resets the meters on a node.",
            "fields": {
                "area_id": {
                    "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.",
                    "name": "Area ID(s)"
                },
                "device_id": {
                    "description": "The device(s) to target for this action.",
                    "name": "Device ID(s)"
                },
                "entity_id": {
                    "description": "The entity ID(s) to target for this action.",
                    "name": "Entity ID(s)"
                },
                "meter_type": {
                    "description": "The type of meter to reset. Not all meters support the ability to pick a meter type to reset.",
                    "name": "Meter type"
                },
                "value": {
                    "description": "The value that meters should be reset to. Not all meters support the ability to be reset to a specific value.",
                    "name": "Target value"
                }
            },
            "name": "Reset meters on a node"
        },
        "set_config_parameter": {
            "description": "Changes the configuration parameters of your Z-Wave devices.",
            "fields": {
                "area_id": {
                    "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.",
                    "name": "Area ID(s)"
                },
                "bitmask": {
                    "description": "Target a specific bitmask (see the documentation for more information). Cannot be combined with 'Value size' or 'Value format'.",
                    "name": "Bitmask"
                },
                "device_id": {
                    "description": "The device(s) to target for this action.",
                    "name": "Device ID(s)"
                },
                "endpoint": {
                    "description": "The configuration parameter's endpoint.",
                    "name": "Endpoint"
                },
                "entity_id": {
                    "description": "The entity ID(s) to target for this action.",
                    "name": "Entity ID(s)"
                },
                "parameter": {
                    "description": "The name (or ID) of the configuration parameter you want to configure.",
                    "name": "Parameter"
                },
                "value": {
                    "description": "The new value to set for this configuration parameter.",
                    "name": "Value"
                },
                "value_format": {
                    "description": "Format of the value, 0 for signed integer, 1 for unsigned integer, 2 for enumerated, 3 for bitfield. Used in combination with 'Value size' when a config parameter is not defined in your device's configuration file. Cannot be combined with 'Bitmask'.",
                    "name": "Value format"
                },
                "value_size": {
                    "description": "Size of the value, either 1, 2, or 4. Used in combination with 'Value format' when a config parameter is not defined in your device's configuration file. Cannot be combined with 'Bitmask'.",
                    "name": "Value size"
                }
            },
            "name": "Set device configuration parameter"
        },
        "set_lock_configuration": {
            "description": "Sets the configuration for a lock.",
            "fields": {
                "auto_relock_time": {
                    "description": "Duration in seconds until lock returns to locked state. Only enforced when operation type is `constant`.",
                    "name": "Autorelock time"
                },
                "block_to_block": {
                    "description": "Whether the lock should run the motor until it hits resistance.",
                    "name": "Block to Block"
                },
                "hold_and_release_time": {
                    "description": "Duration in seconds the latch stays retracted.",
                    "name": "Hold and release time"
                },
                "lock_timeout": {
                    "description": "Seconds until lock mode times out. Should only be used if operation type is `timed`.",
                    "name": "Lock timeout"
                },
                "operation_type": {
                    "description": "The operation type of the lock.",
                    "name": "Operation type"
                },
                "twist_assist": {
                    "description": "Whether the motor should help in locking and unlocking.",
                    "name": "Twist Assist"
                }
            },
            "name": "Set lock configuration"
        },
        "set_lock_usercode": {
            "description": "Sets a user code on a lock.",
            "fields": {
                "code_slot": {
                    "description": "Code slot to set the code.",
                    "name": "Code slot"
                },
                "usercode": {
                    "description": "Lock code to set.",
                    "name": "Code"
                }
            },
            "name": "Set lock user code"
        },
        "set_value": {
            "description": "Changes any value that Z-Wave recognises on a Z-Wave device. This action has minimal validation so only use this action if you know what you are doing.",
            "fields": {
                "area_id": {
                    "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.",
                    "name": "Area ID(s)"
                },
                "command_class": {
                    "description": "The ID of the command class for the value.",
                    "name": "Command class"
                },
                "device_id": {
                    "description": "The device(s) to target for this action.",
                    "name": "Device ID(s)"
                },
                "endpoint": {
                    "description": "The endpoint for the value.",
                    "name": "Endpoint"
                },
                "entity_id": {
                    "description": "The entity ID(s) to target for this action.",
                    "name": "Entity ID(s)"
                },
                "options": {
                    "description": "Set value options map. Refer to the Z-Wave documentation for more information on what options can be set.",
                    "name": "Options"
                },
                "property": {
                    "description": "The ID of the property for the value.",
                    "name": "Property"
                },
                "property_key": {
                    "description": "The ID of the property key for the value.",
                    "name": "Property key"
                },
                "value": {
                    "description": "The new value to set.",
                    "name": "Value"
                },
                "wait_for_result": {
                    "description": "Whether to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If enabled, the action can take a while if setting a value on an asleep battery device.",
                    "name": "Wait for result"
                }
            },
            "name": "Set a value (advanced)"
        }
    }
}