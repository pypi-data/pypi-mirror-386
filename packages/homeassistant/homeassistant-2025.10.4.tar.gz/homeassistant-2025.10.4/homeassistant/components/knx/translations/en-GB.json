{
    "config": {
        "abort": {
            "reconfigure_successful": "Re-configuration was successful"
        },
        "error": {
            "cannot_connect": "Failed to connect",
            "invalid_backbone_key": "Invalid backbone key. 32 hexadecimal digits expected.",
            "invalid_individual_address": "Value does not match pattern for KNX individual address.\n'area.line.device'",
            "invalid_ip_address": "Invalid IPv4 address.",
            "keyfile_invalid_signature": "The password to decrypt the `.knxkeys` file is wrong.",
            "keyfile_no_backbone_key": "The `.knxkeys` file does not contain a backbone key for secure routing.",
            "keyfile_no_tunnel_for_host": "The `.knxkeys` file does not contain credentials for host `{host}`.",
            "keyfile_not_found": "The specified `.knxkeys` file was not found in the path config/.storage/knx/",
            "no_router_discovered": "No KNXnet/IP router was discovered on the network.",
            "no_tunnel_discovered": "Could not find a KNX tunnelling server on your network.",
            "unsupported_tunnel_type": "Selected tunnelling type not supported by gateway."
        },
        "step": {
            "connection_type": {
                "data": {
                    "connection_type": "KNX connection type"
                },
                "data_description": {
                    "connection_type": "Please select the connection type you want to use for your KNX connection."
                },
                "description": "'Automatic' performs a gateway scan on start, to find a KNX IP interface. It will connect via a tunnel. (Not available if a gateway scan was not successful.)\n\n'Tunnelling' will connect to a specific KNX IP interface over a tunnel.\n\n'Routing' will use Multicast to communicate with KNX IP routers.",
                "title": "KNX connection"
            },
            "knxkeys_tunnel_select": {
                "data": {
                    "tunnel_endpoint_ia": "Select the tunnel endpoint used for the connection."
                },
                "data_description": {
                    "tunnel_endpoint_ia": "'Automatic' selects a free tunnel endpoint for you when connecting. If you're unsure, this is the best option."
                },
                "title": "Tunnel endpoint"
            },
            "manual_tunnel": {
                "data": {
                    "host": "Host",
                    "local_ip": "Local IP interface",
                    "port": "Port",
                    "route_back": "Route back / NAT mode",
                    "tunneling_type": "KNX tunnelling type"
                },
                "data_description": {
                    "host": "IP address or hostname of the KNX/IP tunnelling device.",
                    "local_ip": "Local IP or interface name used for the connection from Home Assistant. Leave blank to use auto-discovery.",
                    "port": "Port used by the KNX/IP tunnelling device.",
                    "route_back": "Enable if your KNXnet/IP tunnelling server is behind NAT. Only applies for UDP connections.",
                    "tunneling_type": "Select the tunnelling type of your KNX/IP tunnelling device. Older interfaces may only support `UDP`."
                },
                "description": "Please enter the connection information of your tunnelling device.",
                "title": "Tunnel settings"
            },
            "reconfigure": {
                "menu_options": {
                    "connection_type": "Reconfigure KNX connection",
                    "secure_knxkeys": "Import KNX keyring file"
                },
                "title": "KNX connection settings"
            },
            "routing": {
                "data": {
                    "individual_address": "Individual address",
                    "local_ip": "Local IP interface",
                    "multicast_group": "Multicast group",
                    "multicast_port": "Multicast port",
                    "routing_secure": "KNX IP Secure Routing"
                },
                "data_description": {
                    "individual_address": "KNX address to be used by Home Assistant, e.g. `0.0.4`",
                    "local_ip": "Local IP or interface name used for the connection from Home Assistant. Leave blank to use auto-discovery.",
                    "multicast_group": "Multicast group used by your installation. Default is `224.0.23.12`",
                    "multicast_port": "Multicast port used by your installation. Default is `3671`",
                    "routing_secure": "Select if your installation uses encrypted communication according to the KNX IP Secure standard. This setting requires compatible devices and configuration. You'll be prompted for credentials in the next step."
                },
                "description": "Please configure the routing options.",
                "title": "Routing"
            },
            "secure_key_source_menu_routing": {
                "description": "How do you want to configure KNX/IP Secure?",
                "menu_options": {
                    "secure_knxkeys": "Use a `.knxkeys` file providing IP Secure keys",
                    "secure_routing_manual": "Configure IP Secure backbone key manually"
                },
                "title": "KNX IP Secure"
            },
            "secure_key_source_menu_tunnel": {
                "description": "How do you want to configure KNX/IP Secure?",
                "menu_options": {
                    "secure_knxkeys": "Use a `.knxkeys` file providing IP Secure keys",
                    "secure_tunnel_manual": "Configure IP Secure credentials manually"
                },
                "title": "KNX IP Secure"
            },
            "secure_knxkeys": {
                "data": {
                    "knxkeys_file": "Keyring file",
                    "knxkeys_password": "Keyring password"
                },
                "data_description": {
                    "knxkeys_file": "Select a `.knxkeys` file. This can be exported from ETS.",
                    "knxkeys_password": "The password to open the `.knxkeys` file was set when exporting."
                },
                "description": "The keyring is used to encrypt and decrypt KNX IP Secure communication. You can import a new keyring file or re-import to update existing keys if your configuration has changed.",
                "title": "Import KNX Keyring"
            },
            "secure_routing_manual": {
                "data": {
                    "backbone_key": "Backbone key",
                    "sync_latency_tolerance": "Network latency tolerance"
                },
                "data_description": {
                    "backbone_key": "Can be seen in the 'Security' report of your ETS project. E.g. `00112233445566778899AABBCCDDEEFF`",
                    "sync_latency_tolerance": "Should be equal to the backbone configuration of your ETS project. Default is `1000`"
                },
                "description": "Please enter your IP Secure information.",
                "title": "Secure routing"
            },
            "secure_tunnel_manual": {
                "data": {
                    "device_authentication": "Device authentication password",
                    "user_id": "User ID",
                    "user_password": "User password"
                },
                "data_description": {
                    "device_authentication": "This is set in the 'IP' panel of the interface in ETS.",
                    "user_id": "This is usually tunnel number +1. So first tunnel in the list presented in ETS would have User-ID `2`.",
                    "user_password": "Password for the specific tunnel connection set in the 'Properties' panel of the tunnel in ETS."
                },
                "description": "Please enter your IP Secure information.",
                "title": "Secure tunnelling"
            },
            "tcp_tunnel_endpoint": {
                "data": {
                    "tunnel_endpoint_ia": "Select the tunnel endpoint used for the connection."
                },
                "data_description": {
                    "tunnel_endpoint_ia": "'Automatic' selects a free tunnel endpoint for you when connecting. If you're unsure, this is the best option."
                },
                "title": "Tunnel endpoint"
            },
            "tunnel": {
                "data": {
                    "gateway": "Please select a gateway from the list."
                },
                "data_description": {
                    "gateway": "Select a KNX tunnelling interface you want use for the connection."
                },
                "title": "Tunnel"
            }
        }
    },
    "config_panel": {
        "entities": {
            "create": {
                "_": {
                    "entity": {
                        "description": "Home Assistant specific settings.",
                        "device_description": "A device allows to group multiple entities. Select the device this entity belongs to or create a new one.",
                        "entity_category_description": "Classification of a non-primary entity. Leave empty for standard behaviour.",
                        "entity_category_title": "Entity category",
                        "entity_description": "Optional if a device is selected, otherwise required. If the entity is assigned to a device, the device name is used as prefix.",
                        "entity_label": "Entity name",
                        "name_description": "Define how the entity should be named in Home Assistant.",
                        "name_title": "Device and entity name",
                        "title": "Entity configuration"
                    },
                    "knx": {
                        "knx_group_address": {
                            "dpt": "Datapoint type",
                            "passive_addresses": "Passive addresses",
                            "send_address": "Send address",
                            "state_address": "State address",
                            "valid_dpts": "Valid DPTs"
                        },
                        "sync_state": {
                            "description": "Actively request state updates from KNX bus for state addresses.",
                            "options": {
                                "every": "Scheduled every",
                                "expire": "Expire after last value update",
                                "false": "Never",
                                "init": "Once when connection established",
                                "true": "Use integration default"
                            },
                            "strategy": "Strategy",
                            "title": "State updater"
                        },
                        "title": "KNX configuration"
                    }
                },
                "binary_sensor": {
                    "description": "Read-only entity for binary datapoints. Window or door states etc.",
                    "knx": {
                        "context_timeout": {
                            "description": "The time in seconds between multiple identical telegram payloads would count towards an internal counter. This can be used to automate on multi-clicks of a button. `0` to disable this feature.",
                            "label": "Context timeout"
                        },
                        "ignore_internal_state": {
                            "description": "Write each update to the state machine, even if the data is the same.",
                            "label": "Force update"
                        },
                        "invert": {
                            "description": "Invert payload before processing.",
                            "label": "Invert"
                        },
                        "reset_after": {
                            "description": "Reset back to \u201coff\u201d state after specified seconds.",
                            "label": "Reset after"
                        },
                        "section_advanced_options": {
                            "description": "Properties of the binary sensor state.",
                            "title": "State properties"
                        },
                        "section_binary_sensor": {
                            "description": "DPT 1 group addresses representing binary states.",
                            "title": "Binary sensor"
                        }
                    }
                },
                "cover": {
                    "description": "The KNX cover platform is used as an interface to shutter actuators.",
                    "knx": {
                        "ga_angle": {
                            "label": "Tilt angle"
                        },
                        "ga_position_set": {
                            "label": "Set position"
                        },
                        "ga_position_state": {
                            "label": "Current position"
                        },
                        "ga_step": {
                            "label": "Stepwise move"
                        },
                        "ga_stop": {
                            "label": "Stop"
                        },
                        "ga_up_down": {
                            "label": "Open/Close control"
                        },
                        "invert_angle": {
                            "description": "Invert telegram payload before processing. Enable if KNX reports 0% as fully closed.",
                            "label": "Invert angle"
                        },
                        "invert_position": {
                            "description": "Invert telegram payload before processing. Enable if KNX reports 0% as fully closed.",
                            "label": "Invert position"
                        },
                        "invert_updown": {
                            "description": "Default is UP (0) to open a cover and DOWN (1) to close a cover. Enable this to invert the open/close commands from/to your KNX actuator.",
                            "label": "Invert open/close"
                        },
                        "section_binary_control": {
                            "description": "DPT 1 group addresses triggering full movement.",
                            "title": "Open/Close control"
                        },
                        "section_position_control": {
                            "description": "Control cover position.",
                            "title": "Position"
                        },
                        "section_stop_control": {
                            "description": "DPT 1 group addresses for stopping movement.",
                            "title": "Stop"
                        },
                        "section_tilt_control": {
                            "description": "Control slat tilt angle.",
                            "title": "Tilt"
                        },
                        "section_travel_time": {
                            "description": "Used to calculate intermediate positions of the cover while travelling.",
                            "title": "Travel time"
                        },
                        "travelling_time_down": {
                            "description": "Time in seconds the cover needs to fully close.",
                            "label": "Time for closing"
                        },
                        "travelling_time_up": {
                            "description": "Time in seconds the cover needs to fully open.",
                            "label": "Time for opening"
                        }
                    }
                },
                "header": "Create new entity",
                "light": {
                    "description": "The KNX light platform is used as an interface to dimming actuators, LED controllers, DALI gateways and similar.",
                    "knx": {
                        "color": {
                            "description": "Control the colour of the light.",
                            "ga_blue_brightness": {
                                "label": "Blue brightness"
                            },
                            "ga_blue_switch": {
                                "label": "Blue switch"
                            },
                            "ga_color": {
                                "label": "Colour addresses",
                                "options": {
                                    "232_600": "RGB",
                                    "242_600": "XYY",
                                    "251_600": "RGBW"
                                }
                            },
                            "ga_green_brightness": {
                                "label": "Green brightness"
                            },
                            "ga_green_switch": {
                                "label": "Green switch"
                            },
                            "ga_hue": {
                                "description": "Controls the light's hue.",
                                "label": "Hue"
                            },
                            "ga_red_brightness": {
                                "label": "Red brightness"
                            },
                            "ga_red_switch": {
                                "label": "Red switch"
                            },
                            "ga_saturation": {
                                "description": "Controls the light's saturation.",
                                "label": "Saturation"
                            },
                            "ga_white_brightness": {
                                "label": "White brightness"
                            },
                            "ga_white_switch": {
                                "label": "White switch"
                            },
                            "options": {
                                "hsv_addresses": {
                                    "description": "Hue, saturation and brightness controlled by individual group addresses.",
                                    "label": "HSV"
                                },
                                "individual_addresses": {
                                    "description": "RGB(W) using individual group addresses for each colour channel's state and brightness.",
                                    "label": "Individual addresses"
                                },
                                "single_address": {
                                    "description": "RGB, RGBW or XYY colour controlled by a single group address.",
                                    "label": "Single address"
                                }
                            },
                            "section_blue": {
                                "description": "Controls the light's blue colour component. Brightness group address is required.",
                                "title": "Blue"
                            },
                            "section_green": {
                                "description": "Controls the light's green colour component. Brightness group address is required.",
                                "title": "Green"
                            },
                            "section_red": {
                                "description": "Controls the light's red colour component. Brightness group address is required.",
                                "title": "Red"
                            },
                            "section_white": {
                                "description": "Controls the light's white colour component. Brightness group address is required.",
                                "title": "White"
                            },
                            "title": "Colour"
                        },
                        "color_temp_max": {
                            "label": "Coldest possible colour temperature"
                        },
                        "color_temp_min": {
                            "label": "Warmest possible colour temperature"
                        },
                        "ga_brightness": {
                            "label": "Brightness"
                        },
                        "ga_color_temp": {
                            "label": "Colour temperature addresses",
                            "options": {
                                "5_001": "Percent",
                                "7_600": "Kelvin",
                                "9": "2-byte floating point"
                            }
                        },
                        "ga_switch": {
                            "label": "Switch"
                        },
                        "section_brightness": {
                            "description": "Control the brightness of the light.",
                            "title": "Brightness"
                        },
                        "section_color_temp": {
                            "description": "Control the colour temperature of the light.",
                            "title": "Colour temperature"
                        },
                        "section_switch": {
                            "description": "Turn the light on/off.",
                            "title": "Switch"
                        }
                    }
                },
                "switch": {
                    "description": "The KNX switch platform is used as an interface to switching actuators.",
                    "knx": {
                        "ga_switch": {
                            "description": "Group address to switch the device on/off.",
                            "label": "Switch"
                        },
                        "invert": {
                            "description": "Invert payloads before processing or sending.",
                            "label": "Invert"
                        },
                        "respond_to_read": {
                            "description": "Respond to GroupValueRead telegrams received to the configured send address.",
                            "label": "Respond to read"
                        },
                        "section_switch": {
                            "description": "DPT 1 group addresses controlling the switch function.",
                            "title": "Switching"
                        }
                    }
                },
                "type_selection": {
                    "header": "Create KNX entity",
                    "title": "Select entity type"
                }
            }
        }
    },
    "device_automation": {
        "extra_fields": {
            "destination": "Group addresses",
            "group_value_read": "GroupValueRead",
            "group_value_response": "GroupValueResponse",
            "group_value_write": "GroupValueWrite",
            "incoming": "Incoming",
            "outgoing": "Outgoing"
        },
        "extra_fields_descriptions": {
            "destination": "The trigger will listen to telegrams sent or received on these group addresses. If no address is selected, the trigger will fire for every group address.",
            "group_value_read": "Listen on GroupValueRead telegrams.",
            "group_value_response": "Listen on GroupValueResponse telegrams.",
            "group_value_write": "Listen on GroupValueWrite telegrams.",
            "incoming": "Listen on incoming telegrams.",
            "outgoing": "Listen on outgoing telegrams."
        },
        "trigger_type": {
            "telegram": "Telegram"
        }
    },
    "entity": {
        "climate": {
            "knx_climate": {
                "state_attributes": {
                    "preset_mode": {
                        "name": "Preset",
                        "state": {
                            "auto": "Auto",
                            "building_protection": "Building protection",
                            "comfort": "Comfort",
                            "economy": "Eco",
                            "standby": "Standby"
                        }
                    }
                }
            }
        },
        "sensor": {
            "connected_since": {
                "name": "Connection established"
            },
            "connection_type": {
                "name": "Connection type"
            },
            "individual_address": {
                "name": "Individual address"
            },
            "telegram_count": {
                "name": "Telegrams",
                "unit_of_measurement": "telegrams"
            },
            "telegrams_incoming": {
                "name": "Incoming telegrams",
                "unit_of_measurement": "telegrams"
            },
            "telegrams_incoming_error": {
                "name": "Incoming telegram errors",
                "unit_of_measurement": "errors"
            },
            "telegrams_outgoing": {
                "name": "Outgoing telegrams",
                "unit_of_measurement": "telegrams"
            },
            "telegrams_outgoing_error": {
                "name": "Outgoing telegram errors",
                "unit_of_measurement": "errors"
            }
        }
    },
    "exceptions": {
        "integration_not_loaded": {
            "message": "KNX integration is not loaded."
        },
        "service_exposure_remove_not_found": {
            "message": "Could not find exposure for `{group_address}` to remove."
        },
        "service_send_invalid_payload": {
            "message": "Invalid payload for `knx.send` service. {error}"
        },
        "service_send_invalid_type": {
            "message": "Invalid type for `knx.send` service: {type}"
        }
    },
    "options": {
        "step": {
            "communication_settings": {
                "data": {
                    "rate_limit": "Rate limit",
                    "state_updater": "State updater",
                    "telegram_log_size": "Telegram history limit"
                },
                "data_description": {
                    "rate_limit": "Maximum outgoing telegrams per second.\n`0` to disable limit. Recommended: `0` or between `20` and `40`",
                    "state_updater": "Sets the default behaviour for reading state addresses from the KNX Bus.\nWhen enabled, Home Assistant will monitor each group address and read it from the bus if no value has been received for one hour.\nWhen disabled, state addresses will only be read once after a bus connection is established.\nThis behaviour can be overridden for individual entities using the `sync_state` option.",
                    "telegram_log_size": "Telegrams to keep in memory for KNX panel group monitor. Maximum: {telegram_log_size_max}"
                },
                "title": "Communication settings"
            }
        }
    },
    "services": {
        "event_register": {
            "description": "Adds or removes group addresses to knx_event filter for triggering `knx_event`s. Only addresses added with this action can be removed.",
            "fields": {
                "address": {
                    "description": "Group address(es) that shall be added or removed. Lists are allowed.",
                    "name": "Group address"
                },
                "remove": {
                    "description": "Whether the group address(es) will be removed.",
                    "name": "Remove event registration"
                },
                "type": {
                    "description": "If set, the payload will be decoded as given DPT in the event data `value` key. KNX sensor types are valid values (see https://www.home-assistant.io/integrations/knx/#value-types).",
                    "name": "Value type"
                }
            },
            "name": "Register knx_event"
        },
        "exposure_register": {
            "description": "Adds or removes exposures to KNX bus. Only exposures added with this action can be removed.",
            "fields": {
                "address": {
                    "description": "Group address state or attribute updates will be sent to. GroupValueRead requests will be answered. Per address only one exposure can be registered.",
                    "name": "Group address"
                },
                "attribute": {
                    "description": "Attribute of the entity that shall be sent to the KNX bus. If not set, the state will be sent. E.g. for a light the state is either \u201con\u201d or \u201coff\u201d - with attribute you can expose its \u201cbrightness\u201d.",
                    "name": "Entity attribute"
                },
                "default": {
                    "description": "Default value to send to the bus if the state or attribute value is None. E.g. a light with state \u201coff\u201d has no brightness attribute so a default value of 0 could be used. If not set (or None) no value would be sent to the bus and a GroupReadRequest to the address would return the last known value.",
                    "name": "Default value"
                },
                "entity_id": {
                    "description": "Entity ID whose state or attribute shall be exposed.",
                    "name": "Entity"
                },
                "remove": {
                    "description": "Whether the exposure should be removed. Only the 'Address' field is required for removal.",
                    "name": "Remove exposure"
                },
                "type": {
                    "description": "Telegrams will be encoded as given DPT. 'binary' and all KNX sensor types are valid values (see https://www.home-assistant.io/integrations/knx/#value-types).",
                    "name": "Value type"
                }
            },
            "name": "Expose to KNX bus"
        },
        "read": {
            "description": "Sends GroupValueRead requests to the KNX bus. Response can be used from `knx_event` and will be processed in KNX entities.",
            "fields": {
                "address": {
                    "description": "Group address(es) to send read request to. Lists will read multiple group addresses.",
                    "name": "Group address"
                }
            },
            "name": "Read from KNX bus"
        },
        "reload": {
            "description": "Reloads the KNX integration.",
            "name": "Reload"
        },
        "send": {
            "description": "Sends arbitrary data directly to the KNX bus.",
            "fields": {
                "address": {
                    "description": "Group address(es) to write to. Lists will send to multiple group addresses successively.",
                    "name": "Group address"
                },
                "payload": {
                    "description": "Payload to send to the bus. Integers are treated as DPT 1/2/3 payloads. For DPTs > 6 bits send a list. Each value represents 1 octet (0-255). Pad with 0 to DPT byte length.",
                    "name": "Payload"
                },
                "response": {
                    "description": "Whether the telegram should be sent as a `GroupValueResponse` instead of a `GroupValueWrite`.",
                    "name": "Send as Response"
                },
                "type": {
                    "description": "If set, the payload will not be sent as raw bytes, but encoded as given DPT. KNX sensor types are valid values (see https://www.home-assistant.io/integrations/knx/#value-types).",
                    "name": "Value type"
                }
            },
            "name": "Send to KNX bus"
        }
    }
}