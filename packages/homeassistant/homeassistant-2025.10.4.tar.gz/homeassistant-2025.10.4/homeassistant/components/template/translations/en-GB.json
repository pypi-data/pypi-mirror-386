{
    "common": {
        "advanced_options": "Advanced options",
        "availability": "Availability template",
        "availability_description": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed.",
        "code_format": "Code format",
        "device_class": "Device class",
        "device_id_description": "Select a device to link to this entity.",
        "state": "State",
        "turn_off": "Actions on turn off",
        "turn_on": "Actions on turn on",
        "unit_of_measurement": "Unit of measurement"
    },
    "config": {
        "step": {
            "alarm_control_panel": {
                "data": {
                    "arm_away": "Actions on arm away",
                    "arm_custom_bypass": "Actions on arm custom bypass",
                    "arm_home": "Actions on arm home",
                    "arm_night": "Actions on arm night",
                    "arm_vacation": "Actions on arm holiday",
                    "code_arm_required": "Code arm required",
                    "code_format": "Code format",
                    "device_id": "Device",
                    "disarm": "Actions on disarm",
                    "name": "Name",
                    "trigger": "Actions on trigger",
                    "value_template": "State"
                },
                "data_description": {
                    "arm_away": "Defines actions to run when the alarm control panel is armed to `arm_away`. Receives variable `code`.",
                    "arm_custom_bypass": "Defines actions to run when the alarm control panel is armed to `arm_custom_bypass`. Receives variable `code`.",
                    "arm_home": "Defines actions to run when the alarm control panel is armed to `arm_home`. Receives variable `code`.",
                    "arm_night": "Defines actions to run when the alarm control panel is armed to `arm_night`. Receives variable `code`.",
                    "arm_vacation": "Defines actions to run when the alarm control panel is armed to `arm_vacation`. Receives variable `code`.",
                    "code_arm_required": "If true, the code is required to arm the alarm.",
                    "code_format": "One of `number`, `text` or `no_code`. Format for the code used to arm/disarm the alarm.",
                    "device_id": "Select a device to link to this entity.",
                    "disarm": "Defines actions to run when the alarm control panel is disarmed. Receives variable `code`.",
                    "trigger": "Defines actions to run when the alarm control panel is triggered. Receives variable `code`.",
                    "value_template": "Defines a template to set the state of the alarm panel. Valid output values from the template are `armed_away`, `armed_home`, `armed_night`, `armed_vacation`, `arming`, `disarmed`, `pending`, and `triggered`."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template alarm control panel"
            },
            "binary_sensor": {
                "data": {
                    "device_class": "Device class",
                    "device_id": "Device",
                    "name": "Name",
                    "state": "State"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "state": "The sensor is `on` if the template evaluates as `True`, `yes`, `on`, `enable` or a positive number. Any other value will render it as `off`."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template binary sensor"
            },
            "button": {
                "data": {
                    "device_class": "Device class",
                    "device_id": "Device",
                    "name": "Name",
                    "press": "Actions on press"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "press": "Defines actions to run when button is pressed."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template button"
            },
            "cover": {
                "data": {
                    "close_cover": "Actions on close",
                    "device_class": "Device class",
                    "device_id": "Device",
                    "name": "Name",
                    "open_cover": "Actions on open",
                    "position": "Position",
                    "set_cover_position": "Actions on set position",
                    "state": "State",
                    "stop_cover": "Actions on stop"
                },
                "data_description": {
                    "close_cover": "Defines actions to run when the cover is closed.",
                    "device_id": "Select a device to link to this entity.",
                    "open_cover": "Defines actions to run when the cover is opened.",
                    "position": "Defines a template to get the position of the cover. Value values are numbers between `0` (`closed`) and `100` (`open`).",
                    "set_cover_position": "Defines actions to run when the cover is given a `set_cover_position` command. Receives variable `position`.",
                    "state": "Defines a template to get the state of the cover. Valid output values from the template are `open`, `opening`, `closing` and `closed` which are directly mapped to the corresponding states.  If both a state and a position are specified, only `opening` and `closing` are set from the state template.",
                    "stop_cover": "Defines actions to run when the cover is stopped."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template cover"
            },
            "event": {
                "data": {
                    "device_class": "Device class",
                    "device_id": "Device",
                    "event_type": "Last fired event type",
                    "event_types": "Event types",
                    "name": "Name"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "event_type": "Defines a template for the type of the event.",
                    "event_types": "Defines a template for a list of available event types."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template event"
            },
            "fan": {
                "data": {
                    "device_id": "Device",
                    "name": "Name",
                    "percentage": "Percentage",
                    "set_percentage": "Actions on set percentage",
                    "speed_count": "Speed count",
                    "state": "State",
                    "turn_off": "Actions on turn off",
                    "turn_on": "Actions on turn on"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "percentage": "Defines a template to get the speed percentage of the fan.",
                    "set_percentage": "Defines actions to run when the fan is given a speed percentage command.  Receives variable `percentage`.",
                    "speed_count": "The number of speeds the fan supports. Used to calculate the percentage step for the `fan.increase_speed` and `fan.decrease_speed` actions.",
                    "state": "The fan is `on` if the template evaluates as `True`, `yes`, `on`, `enable` or a positive number. Any other value will render it as `off`.",
                    "turn_off": "Defines actions to run when the fan is turned off.",
                    "turn_on": "Defines actions to run when the fan is turned on. Receives variables `percentage` and/or `preset_mode`."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template fan"
            },
            "image": {
                "data": {
                    "device_id": "Device",
                    "name": "Name",
                    "url": "URL",
                    "verify_ssl": "Verify SSL certificate"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "url": "Defines a template to get the URL on which the image is served.",
                    "verify_ssl": "Enable or disable SSL certificate verification. Disable to use an http URL, or if you have a self-signed SSL certificate and haven\u2019t installed the CA certificate to enable verification."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template image"
            },
            "light": {
                "data": {
                    "device_id": "Device",
                    "hs": "HS colour",
                    "level": "Brightness level",
                    "name": "Name",
                    "set_hs": "Actions on set HS colour",
                    "set_level": "Actions on set level",
                    "set_temperature": "Actions on set colour temperature",
                    "state": "State",
                    "temperature": "Colour temperature",
                    "turn_off": "Actions on turn off",
                    "turn_on": "Actions on turn on"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "hs": "Defines a template to get the HS colour of the light. Must render a tuple (hue, saturation).",
                    "level": "Defines a template to get the brightness of the light. Valid values are 0 to 255.",
                    "set_hs": "Defines actions to run when the light is given an HS colour command. Available variables: `hs` as a tuple, `h` and `s`.",
                    "set_level": "Defines actions to run when the light is given a brightness command. The script will only be called if the `turn_on` call only has `brightness`, and optionally `transition`. Receives variables `brightness` and, optionally, `transition`.",
                    "set_temperature": "Defines actions to run when the light is given a colour temperature command. Receives variable `color_temp_kelvin`. May also receive variables `brightness` and/or `transition`.",
                    "state": "The light is `on` if the template evaluates as `True`, `yes`, `on`, `enable` or a positive number. Any other value will render it as `off`.",
                    "temperature": "Defines a template to get the colour temperature of the light.",
                    "turn_off": "Defines actions to run when the light is turned off.",
                    "turn_on": "Defines actions to run when the light is turned on."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template light"
            },
            "lock": {
                "data": {
                    "code_format": "Code format",
                    "device_id": "Device",
                    "lock": "Actions on lock",
                    "name": "Name",
                    "open": "Actions on open",
                    "state": "State",
                    "unlock": "Actions on unlock"
                },
                "data_description": {
                    "code_format": "Defines a template to get the `code_format` attribute of the lock.",
                    "device_id": "Select a device to link to this entity.",
                    "lock": "Defines actions to run when the lock is locked.",
                    "open": "Defines actions to run when the lock is opened.",
                    "state": "Defines a template to set the state of the lock.  The lock is locked if the template evaluates to `True`, `true`, `on`, or `locked`.  The lock is unlocked if the template evaluates to `False`, `false`, `off`, or `unlocked`.  Other valid states are `jammed`, `opening`, `locking`, `open`, and `unlocking`.",
                    "unlock": "Defines actions to run when the lock is unlocked."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template lock"
            },
            "number": {
                "data": {
                    "device_id": "Device",
                    "max": "Maximum value",
                    "min": "Minimum value",
                    "name": "Name",
                    "set_value": "Actions on set value",
                    "state": "State",
                    "step": "Step value",
                    "unit_of_measurement": "Unit of measurement"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "max": "Defines the number's maximum value.",
                    "min": "Defines the number's minimum value.",
                    "set_value": "Defines actions to run when the number is set to a value. Receives variable `value`.",
                    "state": "Template for the number's current value.",
                    "step": "Defines the number's increment/decrement step.",
                    "unit_of_measurement": "Defines the unit of measurement of the number, if any."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template number"
            },
            "select": {
                "data": {
                    "device_id": "Device",
                    "name": "Name",
                    "options": "Available options",
                    "select_option": "Actions on select",
                    "state": "State"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "options": "Template for the select\u2019s available options.",
                    "select_option": "Defines actions to run when an `option` from the `options` list is selected. Receives variable `option`.",
                    "state": "Template for the select\u2019s current value."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template select"
            },
            "sensor": {
                "data": {
                    "device_class": "Device class",
                    "device_id": "Device",
                    "name": "Name",
                    "state": "State",
                    "state_class": "State class",
                    "unit_of_measurement": "Unit of measurement"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "state": "Defines a template to get the state of the sensor. If the sensor is numeric, i.e. it has a `state_class` or a `unit_of_measurement`, the state template must render to a number or to `none`. The state template must not render to a string, including `unknown` or `unavailable`. An `availability` template may be defined to suppress rendering of the state template.",
                    "unit_of_measurement": "Defines the unit of measurement for the sensor, if any. This will also display the value based on the number format setting in the user profile and influence the graphical presentation in the history visualisation as a continuous value."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template sensor"
            },
            "switch": {
                "data": {
                    "device_id": "Device",
                    "name": "Name",
                    "turn_off": "Actions on turn off",
                    "turn_on": "Actions on turn on",
                    "value_template": "State"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "turn_off": "Defines actions to run when the switch is turned off.",
                    "turn_on": "Defines actions to run when the switch is turned on.",
                    "value_template": "Defines a template to set the state of the switch. If not defined, the switch will optimistically assume all commands are successful."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template switch"
            },
            "update": {
                "data": {
                    "backup": "Backup",
                    "device_class": "Device class",
                    "device_id": "Device",
                    "in_progress": "In progress",
                    "install": "Actions on install",
                    "installed_version": "Installed version",
                    "latest_version": "Latest version",
                    "name": "Name",
                    "release_summary": "Release summary",
                    "release_url": "Release URL",
                    "specific_version": "Specific version",
                    "title": "Title",
                    "update_percentage": "Update percentage"
                },
                "data_description": {
                    "backup": "Enable or disable the `automatic backup before update` option in the update repair. When disabled, the `backup` variable will always provide `False` during the `install` action and it will not accept the `backup` option.",
                    "device_id": "Select a device to link to this entity.",
                    "in_progress": "Defines a template to get the in-progress state.",
                    "install": "Defines actions to run when the update is installed. Receives variables `specific_version` and `backup` when enabled.",
                    "installed_version": "Defines a template to get the installed version.",
                    "latest_version": "Defines a template to get the latest version.",
                    "release_summary": "Defines a template to get the release summary.",
                    "release_url": "Defines a template to get the release URL.",
                    "specific_version": "Enable or disable using the `version` variable with the `install` action. When disabled, the `specific_version` variable will always provide `None` in the `install` actions",
                    "title": "Defines a template to get the update title.",
                    "update_percentage": "Defines a template to get the update completion percentage."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template update"
            },
            "user": {
                "description": "This helper allows you to create helper entities that define their state using a template. What kind of template would you like to create?",
                "menu_options": {
                    "alarm_control_panel": "Alarm control panel",
                    "binary_sensor": "Binary sensor",
                    "button": "Button",
                    "cover": "Cover",
                    "event": "Event",
                    "fan": "Fan",
                    "image": "Image",
                    "light": "Light",
                    "lock": "Lock",
                    "number": "Number",
                    "select": "Select",
                    "sensor": "Sensor",
                    "switch": "Switch",
                    "update": "Update",
                    "vacuum": "Vacuum"
                },
                "title": "Template helper"
            },
            "vacuum": {
                "data": {
                    "clean_spot": "Actions on clean spot",
                    "device_id": "Device",
                    "fan_speed": "Fan speed",
                    "fan_speeds": "Fan speeds",
                    "locate": "Actions on locate",
                    "name": "Name",
                    "pause": "Actions on pause",
                    "return_to_base": "Actions on return to dock",
                    "set_fan_speed": "Actions on set fan speed",
                    "start": "Actions on start",
                    "state": "State",
                    "stop": "Actions on stop"
                },
                "data_description": {
                    "clean_spot": "Defines actions to run when the vacuum is given a 'Clean spot' command.",
                    "device_id": "Select a device to link to this entity.",
                    "fan_speed": "Defines a template to get the fan speed of the vacuum.",
                    "fan_speeds": "List of fan speeds supported by the vacuum.",
                    "locate": "Defines actions to run when the vacuum is given a 'Locate' command.",
                    "pause": "Defines actions to run when the vacuum is paused.",
                    "return_to_base": "Defines actions to run when the vacuum is given a 'Return to dock' command.",
                    "set_fan_speed": "Defines actions to run when the vacuum is given a command to set the fan speed. Receives variable `fan_speed`.",
                    "start": "Defines actions to run when the vacuum is started.",
                    "state": "Defines a template to get the state of the vacuum. Valid values are `cleaning`, `docked`, `idle`, `paused`, `returning`, and `error`.",
                    "stop": "Defines actions to run when the vacuum is stopped."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template vacuum"
            }
        }
    },
    "exceptions": {
        "code_format_template_error": {
            "message": "Error evaluating code format template \"{code_format_template}\" for {entity_id}: {cause}"
        }
    },
    "issues": {
        "deprecated_battery_level": {
            "description": "The template vacuum options `battery_level` and `battery_level_template` are being removed in 2026.8.\n\nPlease remove the `battery_level` or `battery_level_template` option from the YAML configuration for {entity_id} ({entity_name}).",
            "title": "Deprecated battery level option in {entity_name}"
        }
    },
    "options": {
        "step": {
            "alarm_control_panel": {
                "data": {
                    "arm_away": "Actions on arm away",
                    "arm_custom_bypass": "Actions on arm custom bypass",
                    "arm_home": "Actions on arm home",
                    "arm_night": "Actions on arm night",
                    "arm_vacation": "Actions on arm holiday",
                    "code_arm_required": "Code arm required",
                    "code_format": "Code format",
                    "device_id": "Device",
                    "disarm": "Actions on disarm",
                    "trigger": "Actions on trigger",
                    "value_template": "State"
                },
                "data_description": {
                    "arm_away": "Defines actions to run when the alarm control panel is armed to `arm_away`. Receives variable `code`.",
                    "arm_custom_bypass": "Defines actions to run when the alarm control panel is armed to `arm_custom_bypass`. Receives variable `code`.",
                    "arm_home": "Defines actions to run when the alarm control panel is armed to `arm_home`. Receives variable `code`.",
                    "arm_night": "Defines actions to run when the alarm control panel is armed to `arm_night`. Receives variable `code`.",
                    "arm_vacation": "Defines actions to run when the alarm control panel is armed to `arm_vacation`. Receives variable `code`.",
                    "code_arm_required": "If true, the code is required to arm the alarm.",
                    "code_format": "One of `number`, `text` or `no_code`. Format for the code used to arm/disarm the alarm.",
                    "device_id": "Select a device to link to this entity.",
                    "disarm": "Defines actions to run when the alarm control panel is disarmed. Receives variable `code`.",
                    "trigger": "Defines actions to run when the alarm control panel is triggered. Receives variable `code`.",
                    "value_template": "Defines a template to set the state of the alarm panel. Valid output values from the template are `armed_away`, `armed_home`, `armed_night`, `armed_vacation`, `arming`, `disarmed`, `pending`, and `triggered`."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template alarm control panel"
            },
            "binary_sensor": {
                "data": {
                    "device_id": "Device",
                    "state": "State"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "state": "The sensor is `on` if the template evaluates as `True`, `yes`, `on`, `enable` or a positive number. Any other value will render it as `off`."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template binary sensor"
            },
            "button": {
                "data": {
                    "device_id": "Device",
                    "press": "Actions on press"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "press": "Defines actions to run when button is pressed."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template button"
            },
            "cover": {
                "data": {
                    "close_cover": "Actions on close",
                    "device_id": "Device",
                    "open_cover": "Actions on open",
                    "position": "Position",
                    "set_cover_position": "Actions on set position",
                    "state": "State",
                    "stop_cover": "Actions on stop"
                },
                "data_description": {
                    "close_cover": "Defines actions to run when the cover is closed.",
                    "device_id": "Select a device to link to this entity.",
                    "open_cover": "Defines actions to run when the cover is opened.",
                    "position": "Defines a template to get the position of the cover. Value values are numbers between `0` (`closed`) and `100` (`open`).",
                    "set_cover_position": "Defines actions to run when the cover is given a `set_cover_position` command. Receives variable `position`.",
                    "state": "Defines a template to get the state of the cover. Valid output values from the template are `open`, `opening`, `closing` and `closed` which are directly mapped to the corresponding states.  If both a state and a position are specified, only `opening` and `closing` are set from the state template.",
                    "stop_cover": "Defines actions to run when the cover is stopped."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template cover"
            },
            "event": {
                "data": {
                    "device_id": "Device",
                    "event_type": "Last fired event type",
                    "event_types": "Event types",
                    "name": "Name"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "event_type": "Defines a template for the type of the event.",
                    "event_types": "Defines a template for a list of available event types."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template event"
            },
            "fan": {
                "data": {
                    "device_id": "Device",
                    "percentage": "Percentage",
                    "set_percentage": "Actions on set percentage",
                    "speed_count": "Speed count",
                    "state": "State",
                    "turn_off": "Actions on turn off",
                    "turn_on": "Actions on turn on"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "percentage": "Defines a template to get the speed percentage of the fan.",
                    "set_percentage": "Defines actions to run when the fan is given a speed percentage command.  Receives variable `percentage`.",
                    "speed_count": "The number of speeds the fan supports. Used to calculate the percentage step for the `fan.increase_speed` and `fan.decrease_speed` actions.",
                    "state": "The fan is `on` if the template evaluates as `True`, `yes`, `on`, `enable` or a positive number. Any other value will render it as `off`.",
                    "turn_off": "Defines actions to run when the fan is turned off.",
                    "turn_on": "Defines actions to run when the fan is turned on. Receives variables `percentage` and/or `preset_mode`."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template fan"
            },
            "image": {
                "data": {
                    "device_id": "Device",
                    "url": "URL",
                    "verify_ssl": "Verify SSL certificate"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "url": "Defines a template to get the URL on which the image is served.",
                    "verify_ssl": "Enable or disable SSL certificate verification. Disable to use an http URL, or if you have a self-signed SSL certificate and haven\u2019t installed the CA certificate to enable verification."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template image"
            },
            "light": {
                "data": {
                    "device_id": "Device",
                    "hs": "HS colour",
                    "level": "Brightness level",
                    "name": "Name",
                    "set_hs": "Actions on set HS colour",
                    "set_level": "Actions on set level",
                    "set_temperature": "Actions on set colour temperature",
                    "state": "State",
                    "temperature": "Colour temperature",
                    "turn_off": "Actions on turn off",
                    "turn_on": "Actions on turn on"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "hs": "Defines a template to get the HS colour of the light. Must render a tuple (hue, saturation).",
                    "level": "Defines a template to get the brightness of the light. Valid values are 0 to 255.",
                    "set_hs": "Defines actions to run when the light is given an HS colour command. Available variables: `hs` as a tuple, `h` and `s`.",
                    "set_level": "Defines actions to run when the light is given a brightness command. The script will only be called if the `turn_on` call only has `brightness`, and optionally `transition`. Receives variables `brightness` and, optionally, `transition`.",
                    "set_temperature": "Defines actions to run when the light is given a colour temperature command. Receives variable `color_temp_kelvin`. May also receive variables `brightness` and/or `transition`.",
                    "state": "The light is `on` if the template evaluates as `True`, `yes`, `on`, `enable` or a positive number. Any other value will render it as `off`.",
                    "temperature": "Defines a template to get the colour temperature of the light.",
                    "turn_off": "Defines actions to run when the light is turned off.",
                    "turn_on": "Defines actions to run when the light is turned on."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template light"
            },
            "lock": {
                "data": {
                    "code_format": "Code format",
                    "device_id": "Device",
                    "lock": "Actions on lock",
                    "open": "Actions on open",
                    "state": "State",
                    "unlock": "Actions on unlock"
                },
                "data_description": {
                    "code_format": "Defines a template to get the `code_format` attribute of the lock.",
                    "device_id": "Select a device to link to this entity.",
                    "lock": "Defines actions to run when the lock is locked.",
                    "open": "Defines actions to run when the lock is opened.",
                    "state": "Defines a template to set the state of the lock.  The lock is locked if the template evaluates to `True`, `true`, `on`, or `locked`.  The lock is unlocked if the template evaluates to `False`, `false`, `off`, or `unlocked`.  Other valid states are `jammed`, `opening`, `locking`, `open`, and `unlocking`.",
                    "unlock": "Defines actions to run when the lock is unlocked."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template lock"
            },
            "number": {
                "data": {
                    "device_id": "Device",
                    "max": "Maximum value",
                    "min": "Minimum value",
                    "name": "Name",
                    "set_value": "Actions on set value",
                    "state": "State",
                    "step": "Step value"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "max": "Defines the number's maximum value.",
                    "min": "Defines the number's minimum value.",
                    "set_value": "Defines actions to run when the number is set to a value. Receives variable `value`.",
                    "state": "Template for the number's current value.",
                    "step": "Defines the number's increment/decrement step."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template number"
            },
            "select": {
                "data": {
                    "device_id": "Device",
                    "name": "Name",
                    "options": "Available options",
                    "select_option": "Actions on select",
                    "state": "State"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "options": "Template for the select\u2019s available options.",
                    "select_option": "Defines actions to run when an `option` from the `options` list is selected. Receives variable `option`.",
                    "state": "Template for the select\u2019s current value."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template select"
            },
            "sensor": {
                "data": {
                    "device_class": "Device class",
                    "device_id": "Device",
                    "state": "State",
                    "state_class": "State class",
                    "unit_of_measurement": "Unit of measurement"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "state": "Defines a template to get the state of the sensor. If the sensor is numeric, i.e. it has a `state_class` or a `unit_of_measurement`, the state template must render to a number or to `none`. The state template must not render to a string, including `unknown` or `unavailable`. An `availability` template may be defined to suppress rendering of the state template.",
                    "unit_of_measurement": "Defines the unit of measurement for the sensor, if any. This will also display the value based on the number format setting in the user profile and influence the graphical presentation in the history visualisation as a continuous value."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template sensor"
            },
            "switch": {
                "data": {
                    "device_id": "Device",
                    "name": "Name",
                    "turn_off": "Actions on turn off",
                    "turn_on": "Actions on turn on",
                    "value_template": "State"
                },
                "data_description": {
                    "device_id": "Select a device to link to this entity.",
                    "turn_off": "Defines actions to run when the switch is turned off.",
                    "turn_on": "Defines actions to run when the switch is turned on.",
                    "value_template": "Defines a template to set the state of the switch. If not defined, the switch will optimistically assume all commands are successful."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template switch"
            },
            "update": {
                "data": {
                    "backup": "Backup",
                    "device_class": "Device class",
                    "device_id": "Device",
                    "in_progress": "In progress",
                    "install": "Actions on install",
                    "installed_version": "Installed version",
                    "latest_version": "Latest version",
                    "name": "Name",
                    "release_summary": "Release summary",
                    "release_url": "Release URL",
                    "specific_version": "Specific version",
                    "title": "Title",
                    "update_percentage": "Update percentage"
                },
                "data_description": {
                    "backup": "Enable or disable the `automatic backup before update` option in the update repair. When disabled, the `backup` variable will always provide `False` during the `install` action and it will not accept the `backup` option.",
                    "device_id": "Select a device to link to this entity.",
                    "in_progress": "Defines a template to get the in-progress state.",
                    "install": "Defines actions to run when the update is installed. Receives variables `specific_version` and `backup` when enabled.",
                    "installed_version": "Defines a template to get the installed version.",
                    "latest_version": "Defines a template to get the latest version.",
                    "release_summary": "Defines a template to get the release summary.",
                    "release_url": "Defines a template to get the release URL.",
                    "specific_version": "Enable or disable using the `version` variable with the `install` action. When disabled, the `specific_version` variable will always provide `None` in the `install` actions",
                    "title": "Defines a template to get the update title.",
                    "update_percentage": "Defines a template to get the update completion percentage."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template update"
            },
            "vacuum": {
                "data": {
                    "clean_spot": "Actions on clean spot",
                    "device_id": "Device",
                    "fan_speed": "Fan speed",
                    "fan_speeds": "Fan speeds",
                    "locate": "Actions on locate",
                    "name": "Name",
                    "pause": "Actions on pause",
                    "return_to_base": "Actions on return to dock",
                    "set_fan_speed": "Actions on set fan speed",
                    "start": "Actions on start",
                    "state": "State",
                    "stop": "Actions on stop"
                },
                "data_description": {
                    "clean_spot": "Defines actions to run when the vacuum is given a 'Clean spot' command.",
                    "device_id": "Select a device to link to this entity.",
                    "fan_speed": "Defines a template to get the fan speed of the vacuum.",
                    "fan_speeds": "List of fan speeds supported by the vacuum.",
                    "locate": "Defines actions to run when the vacuum is given a 'Locate' command.",
                    "pause": "Defines actions to run when the vacuum is paused.",
                    "return_to_base": "Defines actions to run when the vacuum is given a 'Return to dock' command.",
                    "set_fan_speed": "Defines actions to run when the vacuum is given a command to set the fan speed. Receives variable `fan_speed`.",
                    "start": "Defines actions to run when the vacuum is started.",
                    "state": "Defines a template to get the state of the vacuum. Valid values are `cleaning`, `docked`, `idle`, `paused`, `returning`, and `error`.",
                    "stop": "Defines actions to run when the vacuum is stopped."
                },
                "sections": {
                    "advanced_options": {
                        "data": {
                            "availability": "Availability template"
                        },
                        "data_description": {
                            "availability": "Defines a template to get the `available` state of the entity. If the template either fails to render or returns `True`, `\"1\"`, `\"true\"`, `\"yes\"`, `\"on\"`, `\"enable\"`, or a non-zero number, the entity will be `available`. If the template returns any other value, the entity will be `unavailable`. If not configured, the entity will always be `available`. Note that the string comparison is not case sensitive; `\"TrUe\"` and `\"yEs\"` are allowed."
                        },
                        "name": "Advanced options"
                    }
                },
                "title": "Template vacuum"
            }
        }
    },
    "selector": {
        "alarm_control_panel_code_format": {
            "options": {
                "no_code": "No code format",
                "number": "Number",
                "text": "Text"
            }
        },
        "binary_sensor_device_class": {
            "options": {
                "battery": "Battery",
                "battery_charging": "Charging",
                "carbon_monoxide": "Carbon monoxide",
                "cold": "Cold",
                "connectivity": "Connectivity",
                "door": "Door",
                "garage_door": "Garage door",
                "gas": "Gas",
                "heat": "Heat",
                "light": "Light",
                "lock": "Lock",
                "moisture": "Moisture",
                "motion": "Motion",
                "moving": "Moving",
                "occupancy": "Occupancy",
                "opening": "Opening",
                "plug": "Plug",
                "power": "Power",
                "presence": "Presence",
                "problem": "Problem",
                "running": "Running",
                "safety": "Safety",
                "smoke": "Smoke",
                "sound": "Sound",
                "tamper": "Tamper",
                "update": "Update",
                "vibration": "Vibration",
                "window": "Window"
            }
        },
        "button_device_class": {
            "options": {
                "identify": "Identify",
                "restart": "Restart",
                "update": "Update"
            }
        },
        "cover_device_class": {
            "options": {
                "awning": "Awning",
                "blind": "Blind",
                "curtain": "Curtain",
                "damper": "Damper",
                "door": "Door",
                "garage": "Garage",
                "gate": "Gate",
                "shade": "Shade",
                "shutter": "Shutter",
                "window": "Window"
            }
        },
        "event_device_class": {
            "options": {
                "button": "Button",
                "doorbell": "Doorbell",
                "motion": "Motion"
            }
        },
        "sensor_device_class": {
            "options": {
                "absolute_humidity": "Absolute humidity",
                "apparent_power": "Apparent power",
                "aqi": "Air quality index",
                "area": "Area",
                "atmospheric_pressure": "Atmospheric pressure",
                "battery": "Battery",
                "blood_glucose_concentration": "Blood glucose concentration",
                "carbon_dioxide": "Carbon dioxide",
                "carbon_monoxide": "Carbon monoxide",
                "conductivity": "Conductivity",
                "current": "Current",
                "data_rate": "Data rate",
                "data_size": "Data size",
                "date": "Date",
                "distance": "Distance",
                "duration": "Duration",
                "energy": "Energy",
                "energy_distance": "Energy per distance",
                "energy_storage": "Stored energy",
                "frequency": "Frequency",
                "gas": "Gas",
                "humidity": "Humidity",
                "illuminance": "Illuminance",
                "irradiance": "Irradiance",
                "moisture": "Moisture",
                "monetary": "Monetary balance",
                "nitrogen_dioxide": "Nitrogen dioxide",
                "nitrogen_monoxide": "Nitrogen monoxide",
                "nitrous_oxide": "Nitrous oxide",
                "ozone": "Ozone",
                "ph": "pH",
                "pm1": "PM1",
                "pm10": "PM10",
                "pm25": "PM2.5",
                "pm4": "PM4",
                "power": "Power",
                "power_factor": "Power factor",
                "precipitation": "Precipitation",
                "precipitation_intensity": "Precipitation intensity",
                "pressure": "Pressure",
                "reactive_energy": "Reactive energy",
                "reactive_power": "Reactive power",
                "signal_strength": "Signal strength",
                "sound_pressure": "Sound pressure",
                "speed": "Speed",
                "sulphur_dioxide": "Sulphur dioxide",
                "temperature": "Temperature",
                "timestamp": "Timestamp",
                "volatile_organic_compounds": "Volatile organic compounds",
                "volatile_organic_compounds_parts": "Volatile organic compounds parts",
                "voltage": "Voltage",
                "volume": "Volume",
                "volume_flow_rate": "Volume flow rate",
                "volume_storage": "Stored volume",
                "water": "Water",
                "weight": "Weight",
                "wind_direction": "Wind direction",
                "wind_speed": "Wind speed"
            }
        },
        "sensor_state_class": {
            "options": {
                "measurement": "Measurement",
                "measurement_angle": "Measurement angle",
                "total": "Total",
                "total_increasing": "Total increasing"
            }
        },
        "sensor_unit_of_measurement": {
            "options": {
                "none": "No unit of measurement"
            }
        },
        "update_device_class": {
            "options": {
                "firmware": "Firmware"
            }
        }
    },
    "services": {
        "reload": {
            "description": "Reloads template entities from the YAML-configuration.",
            "name": "Reload"
        }
    }
}