# https://docs.unpage.ai/examples/k8s_crash_loop_backoff
description: Investigate Kubernetes pods stuck in crash loops

prompt: >
  - Extract pod name and namespace from the PagerDuty alert
  - Use `shell_kubectl_get_pod` to get current pod status, restart count, and container states
  - Use `shell_kubectl_describe_pod` to get detailed pod information and recent events
  - Use `shell_kubectl_logs_current` to get current container logs
  - Use `shell_kubectl_logs_previous` to get logs from the previous failed container
  - Use `shell_kubectl_get_events` to get cluster events related to the pod and namespace
  - Use `shell_kubectl_top_pod` to check current resource usage and identify potential OOM issues
  - Use `shell_kubectl_get_configmaps` to verify referenced ConfigMaps exist
  - Use `shell_kubectl_get_secrets` to verify referenced Secrets exist
  - Use datadog_search_logs to search for application errors and stack traces from the pod
  - If the pod depends on external services, use graph_get_neighboring_resources to identify them
  - For each external dependency, use networking_ping or appropriate connectivity tools to verify reachability
  - Analyze all collected data to determine the root cause:
    - Application crashes (check exit codes and error logs)
    - Resource constraints (OOM kills, CPU throttling)
    - Configuration issues (missing ConfigMaps/Secrets, bad environment variables)
    - Connectivity problems (external service failures, DNS issues)
    - Image pull failures (registry authentication, missing tags)
  - Create a comprehensive status update including:
    - Pod restart count and crash frequency pattern
    - Exit codes and termination reasons
    - Critical error messages from logs
    - Resource usage patterns and OOM evidence
    - Missing or invalid configurations
    - External dependency status
    - Root cause analysis and recommended immediate actions
  - Post findings to PagerDuty with pagerduty_post_status_update for immediate remediation

tools:
  - "shell_kubectl_get_pod"
  - "shell_kubectl_describe_pod"
  - "shell_kubectl_logs_current"
  - "shell_kubectl_logs_previous"
  - "shell_kubectl_get_events"
  - "shell_kubectl_top_pod"
  - "shell_kubectl_get_configmaps"
  - "shell_kubectl_get_secrets"
  - "datadog_search_logs"
  - "graph_get_neighboring_resources"
  - "networking_ping"
  - "pagerduty_post_status_update"

config:
  # https://docs.unpage.ai/examples/k8s_crash_loop_backoff#defining-custom-tools
  plugins:
    shell:
      settings:
        commands:
          - handle: kubectl_get_pod
            description: Get detailed pod status including restarts and container states.
            command: kubectl get pod {pod_name} -n {namespace} -o wide
            args:
              pod_name: The name of the pod to inspect
              namespace: The Kubernetes namespace containing the pod
          - handle: kubectl_describe_pod
            description: Get detailed pod description including events and container status.
            command: kubectl describe pod {pod_name} -n {namespace}
            args:
              pod_name: The name of the pod to inspect
              namespace: The Kubernetes namespace containing the pod
          - handle: kubectl_logs_current
            description: Get current container logs from the pod.
            command: kubectl logs {pod_name} -n {namespace} --tail=100 --timestamps
            args:
              pod_name: The name of the pod to get logs from
              namespace: The Kubernetes namespace containing the pod
          - handle: kubectl_logs_previous
            description: Get logs from the previous failed container instance.
            command: kubectl logs {pod_name} -n {namespace} --previous --tail=100 --timestamps || echo "No previous container logs available"
            args:
              pod_name: The name of the pod to get previous logs from
              namespace: The Kubernetes namespace containing the pod
          - handle: kubectl_get_events
            description: Get Kubernetes events related to the pod and namespace.
            command: kubectl get events -n {namespace} --field-selector involvedObject.name={pod_name} --sort-by='.lastTimestamp'
            args:
              pod_name: The name of the pod to get events for
              namespace: The Kubernetes namespace to search for events
          - handle: kubectl_top_pod
            description: Get current resource usage for the pod to identify OOM or resource constraints.
            command: kubectl top pod {pod_name} -n {namespace} --containers || echo "Metrics server not available or pod not running"
            args:
              pod_name: The name of the pod to check resource usage
              namespace: The Kubernetes namespace containing the pod
          - handle: kubectl_get_configmaps
            description: List ConfigMaps in the namespace to verify pod dependencies.
            command: kubectl get configmaps -n {namespace}
            args:
              pod_name: The name of the pod to check ConfigMap references
              namespace: The Kubernetes namespace to search
          - handle: kubectl_get_secrets
            description: List Secrets in the namespace to verify pod dependencies.
            command: kubectl get secrets -n {namespace}
            args:
              pod_name: The name of the pod to check Secret references
              namespace: The Kubernetes namespace to search

test_payloads:
  k8s_log:
    description: Example log from a Kubernetes pod stuck in a CrashLoopBackOff state
    payload: >
      [01:23:45 AM] CRITICAL - Pod CrashLoopBackOff
      Namespace: production
      Pod: api-server-deployment-7d8f6b9c4-x7k2m
      Restarts: 15
      Last State: Terminated (exit code 1)
