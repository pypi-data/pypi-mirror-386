[project]
name = "unpage"
version = "0.1.0-alpha.45"
description = "An agent framework for production engineering"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "aioboto3>=14.1.0",
    "anyio>=4.9.0",
    "apscheduler>=3.11.0",
    "azure-identity>=1.15.0",
    "azure-mgmt-compute>=29.0.0",
    "azure-mgmt-cosmosdb>=8.0.0",
    "azure-mgmt-monitor>=5.0.0",
    "azure-mgmt-network>=23.0.0",
    "azure-mgmt-rdbms>=10.0.0",
    "azure-mgmt-resource>=22.0.0",
    "azure-mgmt-sql>=3.0.1",
    "azure-mgmt-storage>=20.0.0",
    "azure-mgmt-subscription>=3.0.0",
    "dnspython>=2.7.0",
    "fastmcp>=2.12.4",
    "graphviz>=0.20.3",
    "httpx>=0.28.1",
    "networkx>=3.4.2",
    "pydantic>=2.11.3,<2.12.0",
    "pydot>=3.0.4",
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
    "scapy>=2.6.1",
    "cyclopts>=3.22.5",
    "boltons>=25.0.0",
    "pydantic-yaml>=1.5.1",
    "questionary>=2.1.0",
    "sentry-sdk>=2.29.1",
    "datadog-api-client[async]>=2.34.0",
    "kr8s>=0.20.7",
    "dotenv>=0.9.9",
    "pagerduty>=3.1.0",
    "fastapi[standard]>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    "pyngrok>=7.2.12",
    "pydantic-settings>=2.9.1",
    "mlflow>=3.1.4",
    "human-readable>=2.0.0",
    "litellm>=1.75.5.post1",
    "dspy>=3.0.0,<4.0.0",
    "rich-gradient>=0.3.4",
    "expandvars>=1.1.2",
    "azure-mgmt-containerservice>=39.1.0",
    "google-auth>=2.40.3",
    "google-auth-httplib2>=0.2.0",
    "google-cloud-monitoring>=2.27.2",
    "google-cloud-logging>=3.12.1",
    "aiohttp>=3.11.18",
]

[tool.hatch.metadata]
allow-direct-references = true

[project.scripts]
unpage = "unpage.cli:main"

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "pyright>=1.1.402",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-freezer>=0.4.9",
    "ruff>=0.12.7",
    "types-aioboto3[aioboto3]>=14.1.0",
    "types-boltons>=25.0.0.20250516",
    "types-networkx>=3.4.2.20250515",
]

[build-system]
requires = ["hatchling", "tomlkit"]
build-backend = "pinned_hatchling_backend"
backend-path = ["."]

[tool.hatch.build.targets.sdist]
exclude = ["CLAUDE.md", "tests/", "docs/"]

[tool.hatch.build.targets.wheel]
exclude = ["CLAUDE.md", "tests/", "docs/"]

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__"]
typeCheckingMode = "standard"

# See:
# - https://docs.astral.sh/ruff/configuration/
# - https://docs.astral.sh/ruff/settings/
# - https://docs.astral.sh/ruff/rules/
[tool.ruff]
line-length = 100

[tool.ruff.lint]
exclude = ["tests/**/test_*.py", "tests/**/conftest.py"]
ignore = [
    "S603" # false positive: https://github.com/astral-sh/ruff/issues/4045
]
select = [
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "E4",    # pycodestyle-4xx
    "E7",    # pycodestyle-7xx
    "E9",    # pycodestyle-9xx
    "ERA",   # eradicate
    "F",     # pyflakes
    "FURB",  # refurb
    "I",     # isort
    "N",     # pep8-naming
    "NPY",   # numpy
    "PERF",  # perflint
    "PTH",   # flake8-use-pathlib
    "RUF",   # ruff
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "TC",    # flake8-type-checking
    "UP",    # pyupgrade
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    # Allow Pydantic's `@validator` decorator to be recognized as a class method.
    "pydantic.validator",
    # Allow the @classproperty decorator to be recognized as a class method.
    "classproperty",
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true # allow typing *args and *kwargs with Any

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
build_command = "pip install uv && uv lock && git add uv.lock && uv build"
commit_parser = "conventional"
allow_zero_version = true
major_on_zero = false

[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "alpha"
prerelease = true

[tool.semantic_release.commit_parser_options]
# https://python-semantic-release.readthedocs.io/en/latest/concepts/commit_parsing.html#conventional-commits-parser
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "style",
    "refactor",
    "test",
]
allowed_tags = [
    "feat",
    "fix",
    "perf",
    "build",
    "chore",
    "ci",
    "docs",
    "style",
    "refactor",
    "test",
]

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Initial [Cc]ommit.*''', # codespell:ignore ommit
]

[tool.codespell]
check-filenames = true
ignore-words-list = "aks"
