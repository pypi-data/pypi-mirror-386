import smartpy as sp


def pow(be):
    """Compute the result of a 'base' to the power of an 'exponent'.

    Parameters:
        be (sp.pair[sp.int, sp.nat]): A pair of int and nat values (b, e)

    Returns:
        sp.int: `pow((b,e))` returns the value of 'b' to the power of 'e'

    Examples:
        import smartpy.stdlib.math as math
        math.pow((2, 0)) == sp.int(1)
        math.pow((2, 1)) == sp.int(2)
        math.pow((2, 3)) == sp.int(8)
        math.pow((10, 3)) == sp.int(1000)
    """
    (b, e) = sp.cast(be, sp.pair[sp.int, sp.nat])
    y = 1
    p = b
    n = e
    while n != 0:
        if (n & 1) != 0:
            y = p * y
        n = n >> 1
        p = p * p
    return y


def gcd(ab):
    """Compute the greatest common divisor (gcd) between two int values '(a, b)'.

    Parameters:
        ab (sp.pair[sp.int, sp.int]): A pair of int values '(a, b)'.

    Returns:
        sp.int: `gcd((a,b))` returns the gcd between 'a' and 'b'.

    Examples:
        import smartpy.stdlib.math as math
        math.gcd((15, 10)) == sp.int(5)
        math.gcd((18, 42)) == sp.int(6)
        math.gcd((15, 36)) == sp.int(3)
        math.gcd((4, 24)) == sp.int(4)
        math.gcd((-4, 24)) == sp.int(4)
    """
    (a, b) = sp.cast(ab, sp.pair[sp.int, sp.int])
    assert (a == 0 and b != 0) or (a != 0 and b == 0) or (a != 0 and b != 0)
    while b != 0:
        temp = b
        (_, remainder) = sp.ediv(a, b).unwrap_some()
        b = sp.to_int(remainder)
        a = temp
    return a


def lcm(ab):
    """Compute the least common multiple (lcm) between two int values '(a, b)'.

    Parameters:
        ab (sp.pair[sp.int, sp.int]): A pair of int values '(a, b)'.

    Returns:
        sp.int: `lcm((a,b))` returns the lcm between 'a' and 'b'.

    Examples:
        import smartpy.stdlib.math as math
        math.lcm((3, 5)) == sp.int(15)
        math.lcm((54, 24)) == sp.int(216)
    """
    (a, b) = sp.cast(ab, sp.pair[sp.int, sp.int])
    return a * b / gcd((a, b))
