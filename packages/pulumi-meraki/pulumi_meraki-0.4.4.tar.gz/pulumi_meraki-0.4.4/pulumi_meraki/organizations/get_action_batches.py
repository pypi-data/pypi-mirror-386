# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetActionBatchesResult',
    'AwaitableGetActionBatchesResult',
    'get_action_batches',
    'get_action_batches_output',
]

@pulumi.output_type
class GetActionBatchesResult:
    """
    A collection of values returned by getActionBatches.
    """
    def __init__(__self__, action_batch_id=None, id=None, item=None, items=None, organization_id=None, status=None):
        if action_batch_id and not isinstance(action_batch_id, str):
            raise TypeError("Expected argument 'action_batch_id' to be a str")
        pulumi.set(__self__, "action_batch_id", action_batch_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if item and not isinstance(item, dict):
            raise TypeError("Expected argument 'item' to be a dict")
        pulumi.set(__self__, "item", item)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="actionBatchId")
    def action_batch_id(self) -> Optional[_builtins.str]:
        """
        actionBatchId path parameter. Action batch ID
        """
        return pulumi.get(self, "action_batch_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def item(self) -> 'outputs.GetActionBatchesItemResult':
        return pulumi.get(self, "item")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetActionBatchesItemResult']:
        """
        Array of ResponseOrganizationsGetOrganizationActionBatches
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
        """
        return pulumi.get(self, "status")


class AwaitableGetActionBatchesResult(GetActionBatchesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetActionBatchesResult(
            action_batch_id=self.action_batch_id,
            id=self.id,
            item=self.item,
            items=self.items,
            organization_id=self.organization_id,
            status=self.status)


def get_action_batches(action_batch_id: Optional[_builtins.str] = None,
                       organization_id: Optional[_builtins.str] = None,
                       status: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetActionBatchesResult:
    """
    ## Example Usage


    :param _builtins.str action_batch_id: actionBatchId path parameter. Action batch ID
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.str status: status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
    """
    __args__ = dict()
    __args__['actionBatchId'] = action_batch_id
    __args__['organizationId'] = organization_id
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:organizations/getActionBatches:getActionBatches', __args__, opts=opts, typ=GetActionBatchesResult).value

    return AwaitableGetActionBatchesResult(
        action_batch_id=pulumi.get(__ret__, 'action_batch_id'),
        id=pulumi.get(__ret__, 'id'),
        item=pulumi.get(__ret__, 'item'),
        items=pulumi.get(__ret__, 'items'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        status=pulumi.get(__ret__, 'status'))
def get_action_batches_output(action_batch_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              organization_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetActionBatchesResult]:
    """
    ## Example Usage


    :param _builtins.str action_batch_id: actionBatchId path parameter. Action batch ID
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.str status: status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
    """
    __args__ = dict()
    __args__['actionBatchId'] = action_batch_id
    __args__['organizationId'] = organization_id
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:organizations/getActionBatches:getActionBatches', __args__, opts=opts, typ=GetActionBatchesResult)
    return __ret__.apply(lambda __response__: GetActionBatchesResult(
        action_batch_id=pulumi.get(__response__, 'action_batch_id'),
        id=pulumi.get(__response__, 'id'),
        item=pulumi.get(__response__, 'item'),
        items=pulumi.get(__response__, 'items'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        status=pulumi.get(__response__, 'status')))
