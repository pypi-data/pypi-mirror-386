# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInsightMonitoredMediaServersResult',
    'AwaitableGetInsightMonitoredMediaServersResult',
    'get_insight_monitored_media_servers',
    'get_insight_monitored_media_servers_output',
]

@pulumi.output_type
class GetInsightMonitoredMediaServersResult:
    """
    A collection of values returned by getInsightMonitoredMediaServers.
    """
    def __init__(__self__, id=None, item=None, items=None, monitored_media_server_id=None, organization_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if item and not isinstance(item, dict):
            raise TypeError("Expected argument 'item' to be a dict")
        pulumi.set(__self__, "item", item)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if monitored_media_server_id and not isinstance(monitored_media_server_id, str):
            raise TypeError("Expected argument 'monitored_media_server_id' to be a str")
        pulumi.set(__self__, "monitored_media_server_id", monitored_media_server_id)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def item(self) -> 'outputs.GetInsightMonitoredMediaServersItemResult':
        return pulumi.get(self, "item")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInsightMonitoredMediaServersItemResult']:
        """
        Array of ResponseInsightGetOrganizationInsightMonitoredMediaServers
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="monitoredMediaServerId")
    def monitored_media_server_id(self) -> Optional[_builtins.str]:
        """
        monitoredMediaServerId path parameter. Monitored media server ID
        """
        return pulumi.get(self, "monitored_media_server_id")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")


class AwaitableGetInsightMonitoredMediaServersResult(GetInsightMonitoredMediaServersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInsightMonitoredMediaServersResult(
            id=self.id,
            item=self.item,
            items=self.items,
            monitored_media_server_id=self.monitored_media_server_id,
            organization_id=self.organization_id)


def get_insight_monitored_media_servers(monitored_media_server_id: Optional[_builtins.str] = None,
                                        organization_id: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInsightMonitoredMediaServersResult:
    """
    ## Example Usage


    :param _builtins.str monitored_media_server_id: monitoredMediaServerId path parameter. Monitored media server ID
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    """
    __args__ = dict()
    __args__['monitoredMediaServerId'] = monitored_media_server_id
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:organizations/getInsightMonitoredMediaServers:getInsightMonitoredMediaServers', __args__, opts=opts, typ=GetInsightMonitoredMediaServersResult).value

    return AwaitableGetInsightMonitoredMediaServersResult(
        id=pulumi.get(__ret__, 'id'),
        item=pulumi.get(__ret__, 'item'),
        items=pulumi.get(__ret__, 'items'),
        monitored_media_server_id=pulumi.get(__ret__, 'monitored_media_server_id'),
        organization_id=pulumi.get(__ret__, 'organization_id'))
def get_insight_monitored_media_servers_output(monitored_media_server_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               organization_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInsightMonitoredMediaServersResult]:
    """
    ## Example Usage


    :param _builtins.str monitored_media_server_id: monitoredMediaServerId path parameter. Monitored media server ID
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    """
    __args__ = dict()
    __args__['monitoredMediaServerId'] = monitored_media_server_id
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:organizations/getInsightMonitoredMediaServers:getInsightMonitoredMediaServers', __args__, opts=opts, typ=GetInsightMonitoredMediaServersResult)
    return __ret__.apply(lambda __response__: GetInsightMonitoredMediaServersResult(
        id=pulumi.get(__response__, 'id'),
        item=pulumi.get(__response__, 'item'),
        items=pulumi.get(__response__, 'items'),
        monitored_media_server_id=pulumi.get(__response__, 'monitored_media_server_id'),
        organization_id=pulumi.get(__response__, 'organization_id')))
