# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyObjectsResult',
    'AwaitableGetPolicyObjectsResult',
    'get_policy_objects',
    'get_policy_objects_output',
]

@pulumi.output_type
class GetPolicyObjectsResult:
    """
    A collection of values returned by getPolicyObjects.
    """
    def __init__(__self__, ending_before=None, id=None, item=None, organization_id=None, per_page=None, policy_object_id=None, starting_after=None):
        if ending_before and not isinstance(ending_before, str):
            raise TypeError("Expected argument 'ending_before' to be a str")
        pulumi.set(__self__, "ending_before", ending_before)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if item and not isinstance(item, dict):
            raise TypeError("Expected argument 'item' to be a dict")
        pulumi.set(__self__, "item", item)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if per_page and not isinstance(per_page, int):
            raise TypeError("Expected argument 'per_page' to be a int")
        pulumi.set(__self__, "per_page", per_page)
        if policy_object_id and not isinstance(policy_object_id, str):
            raise TypeError("Expected argument 'policy_object_id' to be a str")
        pulumi.set(__self__, "policy_object_id", policy_object_id)
        if starting_after and not isinstance(starting_after, str):
            raise TypeError("Expected argument 'starting_after' to be a str")
        pulumi.set(__self__, "starting_after", starting_after)

    @_builtins.property
    @pulumi.getter(name="endingBefore")
    def ending_before(self) -> Optional[_builtins.str]:
        """
        endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        """
        return pulumi.get(self, "ending_before")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def item(self) -> 'outputs.GetPolicyObjectsItemResult':
        return pulumi.get(self, "item")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="perPage")
    def per_page(self) -> Optional[_builtins.int]:
        """
        perPage query parameter. The number of entries per page returned. Acceptable range is 10 5000. Default is 5000.
        """
        return pulumi.get(self, "per_page")

    @_builtins.property
    @pulumi.getter(name="policyObjectId")
    def policy_object_id(self) -> Optional[_builtins.str]:
        """
        policyObjectId path parameter. Policy object ID
        """
        return pulumi.get(self, "policy_object_id")

    @_builtins.property
    @pulumi.getter(name="startingAfter")
    def starting_after(self) -> Optional[_builtins.str]:
        """
        startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        """
        return pulumi.get(self, "starting_after")


class AwaitableGetPolicyObjectsResult(GetPolicyObjectsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyObjectsResult(
            ending_before=self.ending_before,
            id=self.id,
            item=self.item,
            organization_id=self.organization_id,
            per_page=self.per_page,
            policy_object_id=self.policy_object_id,
            starting_after=self.starting_after)


def get_policy_objects(ending_before: Optional[_builtins.str] = None,
                       organization_id: Optional[_builtins.str] = None,
                       per_page: Optional[_builtins.int] = None,
                       policy_object_id: Optional[_builtins.str] = None,
                       starting_after: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyObjectsResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.organizations.get_policy_objects(ending_before="string",
        organization_id="string",
        per_page=1,
        starting_after="string")
    pulumi.export("merakiOrganizationsPolicyObjectsExample", example.item)
    ```


    :param _builtins.str ending_before: endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.int per_page: perPage query parameter. The number of entries per page returned. Acceptable range is 10 5000. Default is 5000.
    :param _builtins.str policy_object_id: policyObjectId path parameter. Policy object ID
    :param _builtins.str starting_after: startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    """
    __args__ = dict()
    __args__['endingBefore'] = ending_before
    __args__['organizationId'] = organization_id
    __args__['perPage'] = per_page
    __args__['policyObjectId'] = policy_object_id
    __args__['startingAfter'] = starting_after
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:organizations/getPolicyObjects:getPolicyObjects', __args__, opts=opts, typ=GetPolicyObjectsResult).value

    return AwaitableGetPolicyObjectsResult(
        ending_before=pulumi.get(__ret__, 'ending_before'),
        id=pulumi.get(__ret__, 'id'),
        item=pulumi.get(__ret__, 'item'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        per_page=pulumi.get(__ret__, 'per_page'),
        policy_object_id=pulumi.get(__ret__, 'policy_object_id'),
        starting_after=pulumi.get(__ret__, 'starting_after'))
def get_policy_objects_output(ending_before: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              organization_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              per_page: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                              policy_object_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              starting_after: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyObjectsResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.organizations.get_policy_objects(ending_before="string",
        organization_id="string",
        per_page=1,
        starting_after="string")
    pulumi.export("merakiOrganizationsPolicyObjectsExample", example.item)
    ```


    :param _builtins.str ending_before: endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.int per_page: perPage query parameter. The number of entries per page returned. Acceptable range is 10 5000. Default is 5000.
    :param _builtins.str policy_object_id: policyObjectId path parameter. Policy object ID
    :param _builtins.str starting_after: startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    """
    __args__ = dict()
    __args__['endingBefore'] = ending_before
    __args__['organizationId'] = organization_id
    __args__['perPage'] = per_page
    __args__['policyObjectId'] = policy_object_id
    __args__['startingAfter'] = starting_after
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:organizations/getPolicyObjects:getPolicyObjects', __args__, opts=opts, typ=GetPolicyObjectsResult)
    return __ret__.apply(lambda __response__: GetPolicyObjectsResult(
        ending_before=pulumi.get(__response__, 'ending_before'),
        id=pulumi.get(__response__, 'id'),
        item=pulumi.get(__response__, 'item'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        per_page=pulumi.get(__response__, 'per_page'),
        policy_object_id=pulumi.get(__response__, 'policy_object_id'),
        starting_after=pulumi.get(__response__, 'starting_after')))
