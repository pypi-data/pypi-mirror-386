# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SmBypassActivationLockAttemptsArgs', 'SmBypassActivationLockAttempts']

@pulumi.input_type
class SmBypassActivationLockAttemptsArgs:
    def __init__(__self__, *,
                 network_id: pulumi.Input[_builtins.str],
                 attempt_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a SmBypassActivationLockAttempts resource.
        :param pulumi.Input[_builtins.str] network_id: networkId path parameter. Network ID
        :param pulumi.Input[_builtins.str] attempt_id: attemptId path parameter. Attempt ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ids: The ids of the devices to attempt activation lock bypass.
        """
        pulumi.set(__self__, "network_id", network_id)
        if attempt_id is not None:
            pulumi.set(__self__, "attempt_id", attempt_id)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[_builtins.str]:
        """
        networkId path parameter. Network ID
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="attemptId")
    def attempt_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        attemptId path parameter. Attempt ID
        """
        return pulumi.get(self, "attempt_id")

    @attempt_id.setter
    def attempt_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attempt_id", value)

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ids of the devices to attempt activation lock bypass.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class _SmBypassActivationLockAttemptsState:
    def __init__(__self__, *,
                 attempt_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data: Optional[pulumi.Input['SmBypassActivationLockAttemptsDataArgs']] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SmBypassActivationLockAttempts resources.
        :param pulumi.Input[_builtins.str] attempt_id: attemptId path parameter. Attempt ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ids: The ids of the devices to attempt activation lock bypass.
        :param pulumi.Input[_builtins.str] network_id: networkId path parameter. Network ID
        """
        if attempt_id is not None:
            pulumi.set(__self__, "attempt_id", attempt_id)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="attemptId")
    def attempt_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        attemptId path parameter. Attempt ID
        """
        return pulumi.get(self, "attempt_id")

    @attempt_id.setter
    def attempt_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attempt_id", value)

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input['SmBypassActivationLockAttemptsDataArgs']]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input['SmBypassActivationLockAttemptsDataArgs']]):
        pulumi.set(self, "data", value)

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ids of the devices to attempt activation lock bypass.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ids", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        networkId path parameter. Network ID
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("meraki:networks/smBypassActivationLockAttempts:SmBypassActivationLockAttempts")
class SmBypassActivationLockAttempts(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attempt_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_meraki as meraki

        example = meraki.networks.SmBypassActivationLockAttempts("example",
            ids=[
                "1284392014819",
                "2983092129865",
            ],
            network_id="string")
        pulumi.export("merakiNetworksSmBypassActivationLockAttemptsExample", example)
        ```

        ## Import

        ```sh
        $ pulumi import meraki:networks/smBypassActivationLockAttempts:SmBypassActivationLockAttempts example "attempt_id,network_id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] attempt_id: attemptId path parameter. Attempt ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ids: The ids of the devices to attempt activation lock bypass.
        :param pulumi.Input[_builtins.str] network_id: networkId path parameter. Network ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmBypassActivationLockAttemptsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_meraki as meraki

        example = meraki.networks.SmBypassActivationLockAttempts("example",
            ids=[
                "1284392014819",
                "2983092129865",
            ],
            network_id="string")
        pulumi.export("merakiNetworksSmBypassActivationLockAttemptsExample", example)
        ```

        ## Import

        ```sh
        $ pulumi import meraki:networks/smBypassActivationLockAttempts:SmBypassActivationLockAttempts example "attempt_id,network_id"
        ```

        :param str resource_name: The name of the resource.
        :param SmBypassActivationLockAttemptsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmBypassActivationLockAttemptsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attempt_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmBypassActivationLockAttemptsArgs.__new__(SmBypassActivationLockAttemptsArgs)

            __props__.__dict__["attempt_id"] = attempt_id
            __props__.__dict__["ids"] = ids
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["data"] = None
            __props__.__dict__["status"] = None
        super(SmBypassActivationLockAttempts, __self__).__init__(
            'meraki:networks/smBypassActivationLockAttempts:SmBypassActivationLockAttempts',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attempt_id: Optional[pulumi.Input[_builtins.str]] = None,
            data: Optional[pulumi.Input[Union['SmBypassActivationLockAttemptsDataArgs', 'SmBypassActivationLockAttemptsDataArgsDict']]] = None,
            ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            network_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'SmBypassActivationLockAttempts':
        """
        Get an existing SmBypassActivationLockAttempts resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] attempt_id: attemptId path parameter. Attempt ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ids: The ids of the devices to attempt activation lock bypass.
        :param pulumi.Input[_builtins.str] network_id: networkId path parameter. Network ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmBypassActivationLockAttemptsState.__new__(_SmBypassActivationLockAttemptsState)

        __props__.__dict__["attempt_id"] = attempt_id
        __props__.__dict__["data"] = data
        __props__.__dict__["ids"] = ids
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["status"] = status
        return SmBypassActivationLockAttempts(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="attemptId")
    def attempt_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        attemptId path parameter. Attempt ID
        """
        return pulumi.get(self, "attempt_id")

    @_builtins.property
    @pulumi.getter
    def data(self) -> pulumi.Output['outputs.SmBypassActivationLockAttemptsData']:
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The ids of the devices to attempt activation lock bypass.
        """
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[_builtins.str]:
        """
        networkId path parameter. Network ID
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "status")

