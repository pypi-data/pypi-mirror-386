# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLicensingSubscriptionSubscriptionsResult',
    'AwaitableGetLicensingSubscriptionSubscriptionsResult',
    'get_licensing_subscription_subscriptions',
    'get_licensing_subscription_subscriptions_output',
]

@pulumi.output_type
class GetLicensingSubscriptionSubscriptionsResult:
    """
    A collection of values returned by getLicensingSubscriptionSubscriptions.
    """
    def __init__(__self__, end_date=None, ending_before=None, id=None, items=None, organization_ids=None, per_page=None, product_types=None, start_date=None, starting_after=None, statuses=None, subscription_ids=None):
        if end_date and not isinstance(end_date, str):
            raise TypeError("Expected argument 'end_date' to be a str")
        pulumi.set(__self__, "end_date", end_date)
        if ending_before and not isinstance(ending_before, str):
            raise TypeError("Expected argument 'ending_before' to be a str")
        pulumi.set(__self__, "ending_before", ending_before)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if organization_ids and not isinstance(organization_ids, list):
            raise TypeError("Expected argument 'organization_ids' to be a list")
        pulumi.set(__self__, "organization_ids", organization_ids)
        if per_page and not isinstance(per_page, int):
            raise TypeError("Expected argument 'per_page' to be a int")
        pulumi.set(__self__, "per_page", per_page)
        if product_types and not isinstance(product_types, list):
            raise TypeError("Expected argument 'product_types' to be a list")
        pulumi.set(__self__, "product_types", product_types)
        if start_date and not isinstance(start_date, str):
            raise TypeError("Expected argument 'start_date' to be a str")
        pulumi.set(__self__, "start_date", start_date)
        if starting_after and not isinstance(starting_after, str):
            raise TypeError("Expected argument 'starting_after' to be a str")
        pulumi.set(__self__, "starting_after", starting_after)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if subscription_ids and not isinstance(subscription_ids, list):
            raise TypeError("Expected argument 'subscription_ids' to be a list")
        pulumi.set(__self__, "subscription_ids", subscription_ids)

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[_builtins.str]:
        """
        endDate query parameter. Filter subscriptions by end date, ISO 8601 format. To filter with a range of dates, use 'endDate[
        ]=?' in the request. Accepted options include lt, gt, lte, gte.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="endingBefore")
    def ending_before(self) -> Optional[_builtins.str]:
        """
        endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        """
        return pulumi.get(self, "ending_before")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetLicensingSubscriptionSubscriptionsItemResult']:
        """
        Array of ResponseLicensingGetAdministeredLicensingSubscriptionSubscriptions
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="organizationIds")
    def organization_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        organizationIds query parameter. Organizations to get associated subscriptions for
        """
        return pulumi.get(self, "organization_ids")

    @_builtins.property
    @pulumi.getter(name="perPage")
    def per_page(self) -> Optional[_builtins.int]:
        """
        perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        """
        return pulumi.get(self, "per_page")

    @_builtins.property
    @pulumi.getter(name="productTypes")
    def product_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        productTypes query parameter. List of product types that returned subscriptions need to have entitlements for.
        """
        return pulumi.get(self, "product_types")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[_builtins.str]:
        """
        startDate query parameter. Filter subscriptions by start date, ISO 8601 format. To filter with a range of dates, use 'startDate[
        ]=?' in the request. Accepted options include lt, gt, lte, gte.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="startingAfter")
    def starting_after(self) -> Optional[_builtins.str]:
        """
        startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        """
        return pulumi.get(self, "starting_after")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        """
        statuses query parameter. List of statuses that returned subscriptions can have
        """
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="subscriptionIds")
    def subscription_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        subscriptionIds query parameter. List of subscription ids to fetch
        """
        return pulumi.get(self, "subscription_ids")


class AwaitableGetLicensingSubscriptionSubscriptionsResult(GetLicensingSubscriptionSubscriptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLicensingSubscriptionSubscriptionsResult(
            end_date=self.end_date,
            ending_before=self.ending_before,
            id=self.id,
            items=self.items,
            organization_ids=self.organization_ids,
            per_page=self.per_page,
            product_types=self.product_types,
            start_date=self.start_date,
            starting_after=self.starting_after,
            statuses=self.statuses,
            subscription_ids=self.subscription_ids)


def get_licensing_subscription_subscriptions(end_date: Optional[_builtins.str] = None,
                                             ending_before: Optional[_builtins.str] = None,
                                             organization_ids: Optional[Sequence[_builtins.str]] = None,
                                             per_page: Optional[_builtins.int] = None,
                                             product_types: Optional[Sequence[_builtins.str]] = None,
                                             start_date: Optional[_builtins.str] = None,
                                             starting_after: Optional[_builtins.str] = None,
                                             statuses: Optional[Sequence[_builtins.str]] = None,
                                             subscription_ids: Optional[Sequence[_builtins.str]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLicensingSubscriptionSubscriptionsResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.administered.get_licensing_subscription_subscriptions(end_date="string",
        ending_before="string",
        organization_ids=["string"],
        per_page=1,
        product_types=["string"],
        start_date="string",
        starting_after="string",
        statuses=["string"],
        subscription_ids=["string"])
    pulumi.export("merakiAdministeredLicensingSubscriptionSubscriptionsExample", example.items)
    ```


    :param _builtins.str end_date: endDate query parameter. Filter subscriptions by end date, ISO 8601 format. To filter with a range of dates, use 'endDate[
           ]=?' in the request. Accepted options include lt, gt, lte, gte.
    :param _builtins.str ending_before: endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] organization_ids: organizationIds query parameter. Organizations to get associated subscriptions for
    :param _builtins.int per_page: perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
    :param Sequence[_builtins.str] product_types: productTypes query parameter. List of product types that returned subscriptions need to have entitlements for.
    :param _builtins.str start_date: startDate query parameter. Filter subscriptions by start date, ISO 8601 format. To filter with a range of dates, use 'startDate[
           ]=?' in the request. Accepted options include lt, gt, lte, gte.
    :param _builtins.str starting_after: startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] statuses: statuses query parameter. List of statuses that returned subscriptions can have
    :param Sequence[_builtins.str] subscription_ids: subscriptionIds query parameter. List of subscription ids to fetch
    """
    __args__ = dict()
    __args__['endDate'] = end_date
    __args__['endingBefore'] = ending_before
    __args__['organizationIds'] = organization_ids
    __args__['perPage'] = per_page
    __args__['productTypes'] = product_types
    __args__['startDate'] = start_date
    __args__['startingAfter'] = starting_after
    __args__['statuses'] = statuses
    __args__['subscriptionIds'] = subscription_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:administered/getLicensingSubscriptionSubscriptions:getLicensingSubscriptionSubscriptions', __args__, opts=opts, typ=GetLicensingSubscriptionSubscriptionsResult).value

    return AwaitableGetLicensingSubscriptionSubscriptionsResult(
        end_date=pulumi.get(__ret__, 'end_date'),
        ending_before=pulumi.get(__ret__, 'ending_before'),
        id=pulumi.get(__ret__, 'id'),
        items=pulumi.get(__ret__, 'items'),
        organization_ids=pulumi.get(__ret__, 'organization_ids'),
        per_page=pulumi.get(__ret__, 'per_page'),
        product_types=pulumi.get(__ret__, 'product_types'),
        start_date=pulumi.get(__ret__, 'start_date'),
        starting_after=pulumi.get(__ret__, 'starting_after'),
        statuses=pulumi.get(__ret__, 'statuses'),
        subscription_ids=pulumi.get(__ret__, 'subscription_ids'))
def get_licensing_subscription_subscriptions_output(end_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    ending_before: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    organization_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                    per_page: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                                    product_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                    start_date: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    starting_after: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                    subscription_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLicensingSubscriptionSubscriptionsResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.administered.get_licensing_subscription_subscriptions(end_date="string",
        ending_before="string",
        organization_ids=["string"],
        per_page=1,
        product_types=["string"],
        start_date="string",
        starting_after="string",
        statuses=["string"],
        subscription_ids=["string"])
    pulumi.export("merakiAdministeredLicensingSubscriptionSubscriptionsExample", example.items)
    ```


    :param _builtins.str end_date: endDate query parameter. Filter subscriptions by end date, ISO 8601 format. To filter with a range of dates, use 'endDate[
           ]=?' in the request. Accepted options include lt, gt, lte, gte.
    :param _builtins.str ending_before: endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] organization_ids: organizationIds query parameter. Organizations to get associated subscriptions for
    :param _builtins.int per_page: perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
    :param Sequence[_builtins.str] product_types: productTypes query parameter. List of product types that returned subscriptions need to have entitlements for.
    :param _builtins.str start_date: startDate query parameter. Filter subscriptions by start date, ISO 8601 format. To filter with a range of dates, use 'startDate[
           ]=?' in the request. Accepted options include lt, gt, lte, gte.
    :param _builtins.str starting_after: startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] statuses: statuses query parameter. List of statuses that returned subscriptions can have
    :param Sequence[_builtins.str] subscription_ids: subscriptionIds query parameter. List of subscription ids to fetch
    """
    __args__ = dict()
    __args__['endDate'] = end_date
    __args__['endingBefore'] = ending_before
    __args__['organizationIds'] = organization_ids
    __args__['perPage'] = per_page
    __args__['productTypes'] = product_types
    __args__['startDate'] = start_date
    __args__['startingAfter'] = starting_after
    __args__['statuses'] = statuses
    __args__['subscriptionIds'] = subscription_ids
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:administered/getLicensingSubscriptionSubscriptions:getLicensingSubscriptionSubscriptions', __args__, opts=opts, typ=GetLicensingSubscriptionSubscriptionsResult)
    return __ret__.apply(lambda __response__: GetLicensingSubscriptionSubscriptionsResult(
        end_date=pulumi.get(__response__, 'end_date'),
        ending_before=pulumi.get(__response__, 'ending_before'),
        id=pulumi.get(__response__, 'id'),
        items=pulumi.get(__response__, 'items'),
        organization_ids=pulumi.get(__response__, 'organization_ids'),
        per_page=pulumi.get(__response__, 'per_page'),
        product_types=pulumi.get(__response__, 'product_types'),
        start_date=pulumi.get(__response__, 'start_date'),
        starting_after=pulumi.get(__response__, 'starting_after'),
        statuses=pulumi.get(__response__, 'statuses'),
        subscription_ids=pulumi.get(__response__, 'subscription_ids')))
