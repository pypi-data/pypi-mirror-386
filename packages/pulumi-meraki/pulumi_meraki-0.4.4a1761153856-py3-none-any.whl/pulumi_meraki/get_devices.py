# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDevicesResult',
    'AwaitableGetDevicesResult',
    'get_devices',
    'get_devices_output',
]

@pulumi.output_type
class GetDevicesResult:
    """
    A collection of values returned by getDevices.
    """
    def __init__(__self__, configuration_updated_after=None, ending_before=None, id=None, item=None, items=None, mac=None, macs=None, model=None, models=None, name=None, network_ids=None, organization_id=None, per_page=None, product_types=None, sensor_alert_profile_ids=None, sensor_metrics=None, serial=None, serials=None, starting_after=None, tags=None, tags_filter_type=None):
        if configuration_updated_after and not isinstance(configuration_updated_after, str):
            raise TypeError("Expected argument 'configuration_updated_after' to be a str")
        pulumi.set(__self__, "configuration_updated_after", configuration_updated_after)
        if ending_before and not isinstance(ending_before, str):
            raise TypeError("Expected argument 'ending_before' to be a str")
        pulumi.set(__self__, "ending_before", ending_before)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if item and not isinstance(item, dict):
            raise TypeError("Expected argument 'item' to be a dict")
        pulumi.set(__self__, "item", item)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if mac and not isinstance(mac, str):
            raise TypeError("Expected argument 'mac' to be a str")
        pulumi.set(__self__, "mac", mac)
        if macs and not isinstance(macs, list):
            raise TypeError("Expected argument 'macs' to be a list")
        pulumi.set(__self__, "macs", macs)
        if model and not isinstance(model, str):
            raise TypeError("Expected argument 'model' to be a str")
        pulumi.set(__self__, "model", model)
        if models and not isinstance(models, list):
            raise TypeError("Expected argument 'models' to be a list")
        pulumi.set(__self__, "models", models)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_ids and not isinstance(network_ids, list):
            raise TypeError("Expected argument 'network_ids' to be a list")
        pulumi.set(__self__, "network_ids", network_ids)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if per_page and not isinstance(per_page, int):
            raise TypeError("Expected argument 'per_page' to be a int")
        pulumi.set(__self__, "per_page", per_page)
        if product_types and not isinstance(product_types, list):
            raise TypeError("Expected argument 'product_types' to be a list")
        pulumi.set(__self__, "product_types", product_types)
        if sensor_alert_profile_ids and not isinstance(sensor_alert_profile_ids, list):
            raise TypeError("Expected argument 'sensor_alert_profile_ids' to be a list")
        pulumi.set(__self__, "sensor_alert_profile_ids", sensor_alert_profile_ids)
        if sensor_metrics and not isinstance(sensor_metrics, list):
            raise TypeError("Expected argument 'sensor_metrics' to be a list")
        pulumi.set(__self__, "sensor_metrics", sensor_metrics)
        if serial and not isinstance(serial, str):
            raise TypeError("Expected argument 'serial' to be a str")
        pulumi.set(__self__, "serial", serial)
        if serials and not isinstance(serials, list):
            raise TypeError("Expected argument 'serials' to be a list")
        pulumi.set(__self__, "serials", serials)
        if starting_after and not isinstance(starting_after, str):
            raise TypeError("Expected argument 'starting_after' to be a str")
        pulumi.set(__self__, "starting_after", starting_after)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tags_filter_type and not isinstance(tags_filter_type, str):
            raise TypeError("Expected argument 'tags_filter_type' to be a str")
        pulumi.set(__self__, "tags_filter_type", tags_filter_type)

    @_builtins.property
    @pulumi.getter(name="configurationUpdatedAfter")
    def configuration_updated_after(self) -> Optional[_builtins.str]:
        """
        configurationUpdatedAfter query parameter. Filter results by whether or not the device's configuration has been updated after the given timestamp
        """
        return pulumi.get(self, "configuration_updated_after")

    @_builtins.property
    @pulumi.getter(name="endingBefore")
    def ending_before(self) -> Optional[_builtins.str]:
        """
        endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        """
        return pulumi.get(self, "ending_before")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def item(self) -> 'outputs.GetDevicesItemResult':
        return pulumi.get(self, "item")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDevicesItemResult']:
        """
        Array of ResponseOrganizationsGetOrganizationDevices
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> Optional[_builtins.str]:
        """
        mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter
    def macs(self) -> Optional[Sequence[_builtins.str]]:
        """
        macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
        """
        return pulumi.get(self, "macs")

    @_builtins.property
    @pulumi.getter
    def model(self) -> Optional[_builtins.str]:
        """
        model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
        """
        return pulumi.get(self, "model")

    @_builtins.property
    @pulumi.getter
    def models(self) -> Optional[Sequence[_builtins.str]]:
        """
        models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
        """
        return pulumi.get(self, "models")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        networkIds query parameter. Optional parameter to filter devices by network.
        """
        return pulumi.get(self, "network_ids")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="perPage")
    def per_page(self) -> Optional[_builtins.int]:
        """
        perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        """
        return pulumi.get(self, "per_page")

    @_builtins.property
    @pulumi.getter(name="productTypes")
    def product_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
        """
        return pulumi.get(self, "product_types")

    @_builtins.property
    @pulumi.getter(name="sensorAlertProfileIds")
    def sensor_alert_profile_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
        """
        return pulumi.get(self, "sensor_alert_profile_ids")

    @_builtins.property
    @pulumi.getter(name="sensorMetrics")
    def sensor_metrics(self) -> Optional[Sequence[_builtins.str]]:
        """
        sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
        """
        return pulumi.get(self, "sensor_metrics")

    @_builtins.property
    @pulumi.getter
    def serial(self) -> Optional[_builtins.str]:
        """
        serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
        """
        return pulumi.get(self, "serial")

    @_builtins.property
    @pulumi.getter
    def serials(self) -> Optional[Sequence[_builtins.str]]:
        """
        serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
        """
        return pulumi.get(self, "serials")

    @_builtins.property
    @pulumi.getter(name="startingAfter")
    def starting_after(self) -> Optional[_builtins.str]:
        """
        startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        """
        return pulumi.get(self, "starting_after")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[_builtins.str]]:
        """
        tags query parameter. Optional parameter to filter devices by tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsFilterType")
    def tags_filter_type(self) -> Optional[_builtins.str]:
        """
        tagsFilterType query parameter. Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
        """
        return pulumi.get(self, "tags_filter_type")


class AwaitableGetDevicesResult(GetDevicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDevicesResult(
            configuration_updated_after=self.configuration_updated_after,
            ending_before=self.ending_before,
            id=self.id,
            item=self.item,
            items=self.items,
            mac=self.mac,
            macs=self.macs,
            model=self.model,
            models=self.models,
            name=self.name,
            network_ids=self.network_ids,
            organization_id=self.organization_id,
            per_page=self.per_page,
            product_types=self.product_types,
            sensor_alert_profile_ids=self.sensor_alert_profile_ids,
            sensor_metrics=self.sensor_metrics,
            serial=self.serial,
            serials=self.serials,
            starting_after=self.starting_after,
            tags=self.tags,
            tags_filter_type=self.tags_filter_type)


def get_devices(configuration_updated_after: Optional[_builtins.str] = None,
                ending_before: Optional[_builtins.str] = None,
                mac: Optional[_builtins.str] = None,
                macs: Optional[Sequence[_builtins.str]] = None,
                model: Optional[_builtins.str] = None,
                models: Optional[Sequence[_builtins.str]] = None,
                name: Optional[_builtins.str] = None,
                network_ids: Optional[Sequence[_builtins.str]] = None,
                organization_id: Optional[_builtins.str] = None,
                per_page: Optional[_builtins.int] = None,
                product_types: Optional[Sequence[_builtins.str]] = None,
                sensor_alert_profile_ids: Optional[Sequence[_builtins.str]] = None,
                sensor_metrics: Optional[Sequence[_builtins.str]] = None,
                serial: Optional[_builtins.str] = None,
                serials: Optional[Sequence[_builtins.str]] = None,
                starting_after: Optional[_builtins.str] = None,
                tags: Optional[Sequence[_builtins.str]] = None,
                tags_filter_type: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDevicesResult:
    """
    ## Example Usage


    :param _builtins.str configuration_updated_after: configurationUpdatedAfter query parameter. Filter results by whether or not the device's configuration has been updated after the given timestamp
    :param _builtins.str ending_before: endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param _builtins.str mac: mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
    :param Sequence[_builtins.str] macs: macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
    :param _builtins.str model: model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
    :param Sequence[_builtins.str] models: models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
    :param _builtins.str name: name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
    :param Sequence[_builtins.str] network_ids: networkIds query parameter. Optional parameter to filter devices by network.
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.int per_page: perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
    :param Sequence[_builtins.str] product_types: productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
    :param Sequence[_builtins.str] sensor_alert_profile_ids: sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
    :param Sequence[_builtins.str] sensor_metrics: sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
    :param _builtins.str serial: serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
    :param Sequence[_builtins.str] serials: serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
    :param _builtins.str starting_after: startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] tags: tags query parameter. Optional parameter to filter devices by tags.
    :param _builtins.str tags_filter_type: tagsFilterType query parameter. Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
    """
    __args__ = dict()
    __args__['configurationUpdatedAfter'] = configuration_updated_after
    __args__['endingBefore'] = ending_before
    __args__['mac'] = mac
    __args__['macs'] = macs
    __args__['model'] = model
    __args__['models'] = models
    __args__['name'] = name
    __args__['networkIds'] = network_ids
    __args__['organizationId'] = organization_id
    __args__['perPage'] = per_page
    __args__['productTypes'] = product_types
    __args__['sensorAlertProfileIds'] = sensor_alert_profile_ids
    __args__['sensorMetrics'] = sensor_metrics
    __args__['serial'] = serial
    __args__['serials'] = serials
    __args__['startingAfter'] = starting_after
    __args__['tags'] = tags
    __args__['tagsFilterType'] = tags_filter_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:index/getDevices:getDevices', __args__, opts=opts, typ=GetDevicesResult).value

    return AwaitableGetDevicesResult(
        configuration_updated_after=pulumi.get(__ret__, 'configuration_updated_after'),
        ending_before=pulumi.get(__ret__, 'ending_before'),
        id=pulumi.get(__ret__, 'id'),
        item=pulumi.get(__ret__, 'item'),
        items=pulumi.get(__ret__, 'items'),
        mac=pulumi.get(__ret__, 'mac'),
        macs=pulumi.get(__ret__, 'macs'),
        model=pulumi.get(__ret__, 'model'),
        models=pulumi.get(__ret__, 'models'),
        name=pulumi.get(__ret__, 'name'),
        network_ids=pulumi.get(__ret__, 'network_ids'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        per_page=pulumi.get(__ret__, 'per_page'),
        product_types=pulumi.get(__ret__, 'product_types'),
        sensor_alert_profile_ids=pulumi.get(__ret__, 'sensor_alert_profile_ids'),
        sensor_metrics=pulumi.get(__ret__, 'sensor_metrics'),
        serial=pulumi.get(__ret__, 'serial'),
        serials=pulumi.get(__ret__, 'serials'),
        starting_after=pulumi.get(__ret__, 'starting_after'),
        tags=pulumi.get(__ret__, 'tags'),
        tags_filter_type=pulumi.get(__ret__, 'tags_filter_type'))
def get_devices_output(configuration_updated_after: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       ending_before: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       mac: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       macs: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       model: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       models: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       network_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       organization_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       per_page: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                       product_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       sensor_alert_profile_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       sensor_metrics: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       serial: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       serials: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       starting_after: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       tags: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                       tags_filter_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDevicesResult]:
    """
    ## Example Usage


    :param _builtins.str configuration_updated_after: configurationUpdatedAfter query parameter. Filter results by whether or not the device's configuration has been updated after the given timestamp
    :param _builtins.str ending_before: endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param _builtins.str mac: mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
    :param Sequence[_builtins.str] macs: macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
    :param _builtins.str model: model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
    :param Sequence[_builtins.str] models: models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
    :param _builtins.str name: name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
    :param Sequence[_builtins.str] network_ids: networkIds query parameter. Optional parameter to filter devices by network.
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.int per_page: perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
    :param Sequence[_builtins.str] product_types: productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
    :param Sequence[_builtins.str] sensor_alert_profile_ids: sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
    :param Sequence[_builtins.str] sensor_metrics: sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
    :param _builtins.str serial: serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
    :param Sequence[_builtins.str] serials: serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
    :param _builtins.str starting_after: startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] tags: tags query parameter. Optional parameter to filter devices by tags.
    :param _builtins.str tags_filter_type: tagsFilterType query parameter. Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
    """
    __args__ = dict()
    __args__['configurationUpdatedAfter'] = configuration_updated_after
    __args__['endingBefore'] = ending_before
    __args__['mac'] = mac
    __args__['macs'] = macs
    __args__['model'] = model
    __args__['models'] = models
    __args__['name'] = name
    __args__['networkIds'] = network_ids
    __args__['organizationId'] = organization_id
    __args__['perPage'] = per_page
    __args__['productTypes'] = product_types
    __args__['sensorAlertProfileIds'] = sensor_alert_profile_ids
    __args__['sensorMetrics'] = sensor_metrics
    __args__['serial'] = serial
    __args__['serials'] = serials
    __args__['startingAfter'] = starting_after
    __args__['tags'] = tags
    __args__['tagsFilterType'] = tags_filter_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:index/getDevices:getDevices', __args__, opts=opts, typ=GetDevicesResult)
    return __ret__.apply(lambda __response__: GetDevicesResult(
        configuration_updated_after=pulumi.get(__response__, 'configuration_updated_after'),
        ending_before=pulumi.get(__response__, 'ending_before'),
        id=pulumi.get(__response__, 'id'),
        item=pulumi.get(__response__, 'item'),
        items=pulumi.get(__response__, 'items'),
        mac=pulumi.get(__response__, 'mac'),
        macs=pulumi.get(__response__, 'macs'),
        model=pulumi.get(__response__, 'model'),
        models=pulumi.get(__response__, 'models'),
        name=pulumi.get(__response__, 'name'),
        network_ids=pulumi.get(__response__, 'network_ids'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        per_page=pulumi.get(__response__, 'per_page'),
        product_types=pulumi.get(__response__, 'product_types'),
        sensor_alert_profile_ids=pulumi.get(__response__, 'sensor_alert_profile_ids'),
        sensor_metrics=pulumi.get(__response__, 'sensor_metrics'),
        serial=pulumi.get(__response__, 'serial'),
        serials=pulumi.get(__response__, 'serials'),
        starting_after=pulumi.get(__response__, 'starting_after'),
        tags=pulumi.get(__response__, 'tags'),
        tags_filter_type=pulumi.get(__response__, 'tags_filter_type')))
