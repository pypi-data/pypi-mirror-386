# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LicensingSubscriptionSubscriptionsClaimArgs', 'LicensingSubscriptionSubscriptionsClaim']

@pulumi.input_type
class LicensingSubscriptionSubscriptionsClaimArgs:
    def __init__(__self__, *,
                 parameters: pulumi.Input['LicensingSubscriptionSubscriptionsClaimParametersArgs'],
                 validate: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a LicensingSubscriptionSubscriptionsClaim resource.
        :param pulumi.Input[_builtins.bool] validate: validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
        """
        pulumi.set(__self__, "parameters", parameters)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Input['LicensingSubscriptionSubscriptionsClaimParametersArgs']:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input['LicensingSubscriptionSubscriptionsClaimParametersArgs']):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
        """
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "validate", value)


@pulumi.input_type
class _LicensingSubscriptionSubscriptionsClaimState:
    def __init__(__self__, *,
                 item: Optional[pulumi.Input['LicensingSubscriptionSubscriptionsClaimItemArgs']] = None,
                 parameters: Optional[pulumi.Input['LicensingSubscriptionSubscriptionsClaimParametersArgs']] = None,
                 validate: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering LicensingSubscriptionSubscriptionsClaim resources.
        :param pulumi.Input[_builtins.bool] validate: validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
        """
        if item is not None:
            pulumi.set(__self__, "item", item)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)

    @_builtins.property
    @pulumi.getter
    def item(self) -> Optional[pulumi.Input['LicensingSubscriptionSubscriptionsClaimItemArgs']]:
        return pulumi.get(self, "item")

    @item.setter
    def item(self, value: Optional[pulumi.Input['LicensingSubscriptionSubscriptionsClaimItemArgs']]):
        pulumi.set(self, "item", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['LicensingSubscriptionSubscriptionsClaimParametersArgs']]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['LicensingSubscriptionSubscriptionsClaimParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
        """
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "validate", value)


@pulumi.type_token("meraki:administered/licensingSubscriptionSubscriptionsClaim:LicensingSubscriptionSubscriptionsClaim")
class LicensingSubscriptionSubscriptionsClaim(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 parameters: Optional[pulumi.Input[Union['LicensingSubscriptionSubscriptionsClaimParametersArgs', 'LicensingSubscriptionSubscriptionsClaimParametersArgsDict']]] = None,
                 validate: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
        already existed previously.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] validate: validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LicensingSubscriptionSubscriptionsClaimArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
        already existed previously.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param LicensingSubscriptionSubscriptionsClaimArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LicensingSubscriptionSubscriptionsClaimArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 parameters: Optional[pulumi.Input[Union['LicensingSubscriptionSubscriptionsClaimParametersArgs', 'LicensingSubscriptionSubscriptionsClaimParametersArgsDict']]] = None,
                 validate: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LicensingSubscriptionSubscriptionsClaimArgs.__new__(LicensingSubscriptionSubscriptionsClaimArgs)

            if parameters is None and not opts.urn:
                raise TypeError("Missing required property 'parameters'")
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["validate"] = validate
            __props__.__dict__["item"] = None
        super(LicensingSubscriptionSubscriptionsClaim, __self__).__init__(
            'meraki:administered/licensingSubscriptionSubscriptionsClaim:LicensingSubscriptionSubscriptionsClaim',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            item: Optional[pulumi.Input[Union['LicensingSubscriptionSubscriptionsClaimItemArgs', 'LicensingSubscriptionSubscriptionsClaimItemArgsDict']]] = None,
            parameters: Optional[pulumi.Input[Union['LicensingSubscriptionSubscriptionsClaimParametersArgs', 'LicensingSubscriptionSubscriptionsClaimParametersArgsDict']]] = None,
            validate: Optional[pulumi.Input[_builtins.bool]] = None) -> 'LicensingSubscriptionSubscriptionsClaim':
        """
        Get an existing LicensingSubscriptionSubscriptionsClaim resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] validate: validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LicensingSubscriptionSubscriptionsClaimState.__new__(_LicensingSubscriptionSubscriptionsClaimState)

        __props__.__dict__["item"] = item
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["validate"] = validate
        return LicensingSubscriptionSubscriptionsClaim(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def item(self) -> pulumi.Output['outputs.LicensingSubscriptionSubscriptionsClaimItem']:
        return pulumi.get(self, "item")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output['outputs.LicensingSubscriptionSubscriptionsClaimParameters']:
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def validate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
        """
        return pulumi.get(self, "validate")

