# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSmDevicesResult',
    'AwaitableGetSmDevicesResult',
    'get_sm_devices',
    'get_sm_devices_output',
]

@pulumi.output_type
class GetSmDevicesResult:
    """
    A collection of values returned by getSmDevices.
    """
    def __init__(__self__, ending_before=None, fields=None, id=None, ids=None, items=None, network_id=None, per_page=None, scopes=None, serials=None, starting_after=None, system_types=None, uuids=None, wifi_macs=None):
        if ending_before and not isinstance(ending_before, str):
            raise TypeError("Expected argument 'ending_before' to be a str")
        pulumi.set(__self__, "ending_before", ending_before)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if per_page and not isinstance(per_page, int):
            raise TypeError("Expected argument 'per_page' to be a int")
        pulumi.set(__self__, "per_page", per_page)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if serials and not isinstance(serials, list):
            raise TypeError("Expected argument 'serials' to be a list")
        pulumi.set(__self__, "serials", serials)
        if starting_after and not isinstance(starting_after, str):
            raise TypeError("Expected argument 'starting_after' to be a str")
        pulumi.set(__self__, "starting_after", starting_after)
        if system_types and not isinstance(system_types, list):
            raise TypeError("Expected argument 'system_types' to be a list")
        pulumi.set(__self__, "system_types", system_types)
        if uuids and not isinstance(uuids, list):
            raise TypeError("Expected argument 'uuids' to be a list")
        pulumi.set(__self__, "uuids", uuids)
        if wifi_macs and not isinstance(wifi_macs, list):
            raise TypeError("Expected argument 'wifi_macs' to be a list")
        pulumi.set(__self__, "wifi_macs", wifi_macs)

    @_builtins.property
    @pulumi.getter(name="endingBefore")
    def ending_before(self) -> Optional[_builtins.str]:
        """
        endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        """
        return pulumi.get(self, "ending_before")

    @_builtins.property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[_builtins.str]]:
        """
        fields query parameter. Additional fields that will be displayed for each device.
        The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,
        systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,
        ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,
        simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,
        isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,
        hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, cellular, and url.
        """
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        ids query parameter. Filter devices by id(s).
        """
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSmDevicesItemResult']:
        """
        Array of ResponseSmGetNetworkSmDevices
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        networkId path parameter. Network ID
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="perPage")
    def per_page(self) -> Optional[_builtins.int]:
        """
        perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        """
        return pulumi.get(self, "per_page")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[_builtins.str]]:
        """
        scope query parameter. Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter
    def serials(self) -> Optional[Sequence[_builtins.str]]:
        """
        serials query parameter. Filter devices by serial(s).
        """
        return pulumi.get(self, "serials")

    @_builtins.property
    @pulumi.getter(name="startingAfter")
    def starting_after(self) -> Optional[_builtins.str]:
        """
        startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        """
        return pulumi.get(self, "starting_after")

    @_builtins.property
    @pulumi.getter(name="systemTypes")
    def system_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        systemTypes query parameter. Filter devices by system type(s).
        """
        return pulumi.get(self, "system_types")

    @_builtins.property
    @pulumi.getter
    def uuids(self) -> Optional[Sequence[_builtins.str]]:
        """
        uuids query parameter. Filter devices by uuid(s).
        """
        return pulumi.get(self, "uuids")

    @_builtins.property
    @pulumi.getter(name="wifiMacs")
    def wifi_macs(self) -> Optional[Sequence[_builtins.str]]:
        """
        wifiMacs query parameter. Filter devices by wifi mac(s).
        """
        return pulumi.get(self, "wifi_macs")


class AwaitableGetSmDevicesResult(GetSmDevicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmDevicesResult(
            ending_before=self.ending_before,
            fields=self.fields,
            id=self.id,
            ids=self.ids,
            items=self.items,
            network_id=self.network_id,
            per_page=self.per_page,
            scopes=self.scopes,
            serials=self.serials,
            starting_after=self.starting_after,
            system_types=self.system_types,
            uuids=self.uuids,
            wifi_macs=self.wifi_macs)


def get_sm_devices(ending_before: Optional[_builtins.str] = None,
                   fields: Optional[Sequence[_builtins.str]] = None,
                   ids: Optional[Sequence[_builtins.str]] = None,
                   network_id: Optional[_builtins.str] = None,
                   per_page: Optional[_builtins.int] = None,
                   scopes: Optional[Sequence[_builtins.str]] = None,
                   serials: Optional[Sequence[_builtins.str]] = None,
                   starting_after: Optional[_builtins.str] = None,
                   system_types: Optional[Sequence[_builtins.str]] = None,
                   uuids: Optional[Sequence[_builtins.str]] = None,
                   wifi_macs: Optional[Sequence[_builtins.str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmDevicesResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.networks.get_sm_devices(ending_before="string",
        fields=["string"],
        ids=["string"],
        network_id="string",
        per_page=1,
        scopes=["string"],
        serials=["string"],
        starting_after="string",
        system_types=["string"],
        uuids=["string"],
        wifi_macs=["string"])
    pulumi.export("merakiNetworksSmDevicesExample", example.items)
    ```


    :param _builtins.str ending_before: endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] fields: fields query parameter. Additional fields that will be displayed for each device.
           The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,
           systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,
           ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,
           simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,
           isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,
           hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, cellular, and url.
    :param Sequence[_builtins.str] ids: ids query parameter. Filter devices by id(s).
    :param _builtins.str network_id: networkId path parameter. Network ID
    :param _builtins.int per_page: perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
    :param Sequence[_builtins.str] scopes: scope query parameter. Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
    :param Sequence[_builtins.str] serials: serials query parameter. Filter devices by serial(s).
    :param _builtins.str starting_after: startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] system_types: systemTypes query parameter. Filter devices by system type(s).
    :param Sequence[_builtins.str] uuids: uuids query parameter. Filter devices by uuid(s).
    :param Sequence[_builtins.str] wifi_macs: wifiMacs query parameter. Filter devices by wifi mac(s).
    """
    __args__ = dict()
    __args__['endingBefore'] = ending_before
    __args__['fields'] = fields
    __args__['ids'] = ids
    __args__['networkId'] = network_id
    __args__['perPage'] = per_page
    __args__['scopes'] = scopes
    __args__['serials'] = serials
    __args__['startingAfter'] = starting_after
    __args__['systemTypes'] = system_types
    __args__['uuids'] = uuids
    __args__['wifiMacs'] = wifi_macs
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:networks/getSmDevices:getSmDevices', __args__, opts=opts, typ=GetSmDevicesResult).value

    return AwaitableGetSmDevicesResult(
        ending_before=pulumi.get(__ret__, 'ending_before'),
        fields=pulumi.get(__ret__, 'fields'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        items=pulumi.get(__ret__, 'items'),
        network_id=pulumi.get(__ret__, 'network_id'),
        per_page=pulumi.get(__ret__, 'per_page'),
        scopes=pulumi.get(__ret__, 'scopes'),
        serials=pulumi.get(__ret__, 'serials'),
        starting_after=pulumi.get(__ret__, 'starting_after'),
        system_types=pulumi.get(__ret__, 'system_types'),
        uuids=pulumi.get(__ret__, 'uuids'),
        wifi_macs=pulumi.get(__ret__, 'wifi_macs'))
def get_sm_devices_output(ending_before: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          fields: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                          ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                          network_id: Optional[pulumi.Input[_builtins.str]] = None,
                          per_page: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                          scopes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                          serials: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                          starting_after: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          system_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                          uuids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                          wifi_macs: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmDevicesResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.networks.get_sm_devices(ending_before="string",
        fields=["string"],
        ids=["string"],
        network_id="string",
        per_page=1,
        scopes=["string"],
        serials=["string"],
        starting_after="string",
        system_types=["string"],
        uuids=["string"],
        wifi_macs=["string"])
    pulumi.export("merakiNetworksSmDevicesExample", example.items)
    ```


    :param _builtins.str ending_before: endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] fields: fields query parameter. Additional fields that will be displayed for each device.
           The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,
           systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,
           ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,
           simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,
           isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,
           hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, cellular, and url.
    :param Sequence[_builtins.str] ids: ids query parameter. Filter devices by id(s).
    :param _builtins.str network_id: networkId path parameter. Network ID
    :param _builtins.int per_page: perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
    :param Sequence[_builtins.str] scopes: scope query parameter. Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
    :param Sequence[_builtins.str] serials: serials query parameter. Filter devices by serial(s).
    :param _builtins.str starting_after: startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
    :param Sequence[_builtins.str] system_types: systemTypes query parameter. Filter devices by system type(s).
    :param Sequence[_builtins.str] uuids: uuids query parameter. Filter devices by uuid(s).
    :param Sequence[_builtins.str] wifi_macs: wifiMacs query parameter. Filter devices by wifi mac(s).
    """
    __args__ = dict()
    __args__['endingBefore'] = ending_before
    __args__['fields'] = fields
    __args__['ids'] = ids
    __args__['networkId'] = network_id
    __args__['perPage'] = per_page
    __args__['scopes'] = scopes
    __args__['serials'] = serials
    __args__['startingAfter'] = starting_after
    __args__['systemTypes'] = system_types
    __args__['uuids'] = uuids
    __args__['wifiMacs'] = wifi_macs
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:networks/getSmDevices:getSmDevices', __args__, opts=opts, typ=GetSmDevicesResult)
    return __ret__.apply(lambda __response__: GetSmDevicesResult(
        ending_before=pulumi.get(__response__, 'ending_before'),
        fields=pulumi.get(__response__, 'fields'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        items=pulumi.get(__response__, 'items'),
        network_id=pulumi.get(__response__, 'network_id'),
        per_page=pulumi.get(__response__, 'per_page'),
        scopes=pulumi.get(__response__, 'scopes'),
        serials=pulumi.get(__response__, 'serials'),
        starting_after=pulumi.get(__response__, 'starting_after'),
        system_types=pulumi.get(__response__, 'system_types'),
        uuids=pulumi.get(__response__, 'uuids'),
        wifi_macs=pulumi.get(__response__, 'wifi_macs')))
