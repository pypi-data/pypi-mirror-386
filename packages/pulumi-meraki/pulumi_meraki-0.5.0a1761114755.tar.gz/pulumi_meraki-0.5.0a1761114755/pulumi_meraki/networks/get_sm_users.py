# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSmUsersResult',
    'AwaitableGetSmUsersResult',
    'get_sm_users',
    'get_sm_users_output',
]

@pulumi.output_type
class GetSmUsersResult:
    """
    A collection of values returned by getSmUsers.
    """
    def __init__(__self__, emails=None, id=None, ids=None, items=None, network_id=None, scopes=None, usernames=None):
        if emails and not isinstance(emails, list):
            raise TypeError("Expected argument 'emails' to be a list")
        pulumi.set(__self__, "emails", emails)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if usernames and not isinstance(usernames, list):
            raise TypeError("Expected argument 'usernames' to be a list")
        pulumi.set(__self__, "usernames", usernames)

    @_builtins.property
    @pulumi.getter
    def emails(self) -> Optional[Sequence[_builtins.str]]:
        """
        emails query parameter. Filter users by email(s).
        """
        return pulumi.get(self, "emails")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        ids query parameter. Filter users by id(s).
        """
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSmUsersItemResult']:
        """
        Array of ResponseSmGetNetworkSmUsers
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        networkId path parameter. Network ID
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[_builtins.str]]:
        """
        scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter
    def usernames(self) -> Optional[Sequence[_builtins.str]]:
        """
        usernames query parameter. Filter users by username(s).
        """
        return pulumi.get(self, "usernames")


class AwaitableGetSmUsersResult(GetSmUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmUsersResult(
            emails=self.emails,
            id=self.id,
            ids=self.ids,
            items=self.items,
            network_id=self.network_id,
            scopes=self.scopes,
            usernames=self.usernames)


def get_sm_users(emails: Optional[Sequence[_builtins.str]] = None,
                 ids: Optional[Sequence[_builtins.str]] = None,
                 network_id: Optional[_builtins.str] = None,
                 scopes: Optional[Sequence[_builtins.str]] = None,
                 usernames: Optional[Sequence[_builtins.str]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmUsersResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.networks.get_sm_users(emails=["string"],
        ids=["string"],
        network_id="string",
        scopes=["string"],
        usernames=["string"])
    pulumi.export("merakiNetworksSmUsersExample", example.items)
    ```


    :param Sequence[_builtins.str] emails: emails query parameter. Filter users by email(s).
    :param Sequence[_builtins.str] ids: ids query parameter. Filter users by id(s).
    :param _builtins.str network_id: networkId path parameter. Network ID
    :param Sequence[_builtins.str] scopes: scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
    :param Sequence[_builtins.str] usernames: usernames query parameter. Filter users by username(s).
    """
    __args__ = dict()
    __args__['emails'] = emails
    __args__['ids'] = ids
    __args__['networkId'] = network_id
    __args__['scopes'] = scopes
    __args__['usernames'] = usernames
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:networks/getSmUsers:getSmUsers', __args__, opts=opts, typ=GetSmUsersResult).value

    return AwaitableGetSmUsersResult(
        emails=pulumi.get(__ret__, 'emails'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        items=pulumi.get(__ret__, 'items'),
        network_id=pulumi.get(__ret__, 'network_id'),
        scopes=pulumi.get(__ret__, 'scopes'),
        usernames=pulumi.get(__ret__, 'usernames'))
def get_sm_users_output(emails: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                        ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                        network_id: Optional[pulumi.Input[_builtins.str]] = None,
                        scopes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                        usernames: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmUsersResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.networks.get_sm_users(emails=["string"],
        ids=["string"],
        network_id="string",
        scopes=["string"],
        usernames=["string"])
    pulumi.export("merakiNetworksSmUsersExample", example.items)
    ```


    :param Sequence[_builtins.str] emails: emails query parameter. Filter users by email(s).
    :param Sequence[_builtins.str] ids: ids query parameter. Filter users by id(s).
    :param _builtins.str network_id: networkId path parameter. Network ID
    :param Sequence[_builtins.str] scopes: scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
    :param Sequence[_builtins.str] usernames: usernames query parameter. Filter users by username(s).
    """
    __args__ = dict()
    __args__['emails'] = emails
    __args__['ids'] = ids
    __args__['networkId'] = network_id
    __args__['scopes'] = scopes
    __args__['usernames'] = usernames
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:networks/getSmUsers:getSmUsers', __args__, opts=opts, typ=GetSmUsersResult)
    return __ret__.apply(lambda __response__: GetSmUsersResult(
        emails=pulumi.get(__response__, 'emails'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        items=pulumi.get(__response__, 'items'),
        network_id=pulumi.get(__response__, 'network_id'),
        scopes=pulumi.get(__response__, 'scopes'),
        usernames=pulumi.get(__response__, 'usernames')))
