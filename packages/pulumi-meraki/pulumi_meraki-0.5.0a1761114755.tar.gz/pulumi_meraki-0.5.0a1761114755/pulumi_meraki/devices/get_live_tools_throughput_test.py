# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLiveToolsThroughputTestResult',
    'AwaitableGetLiveToolsThroughputTestResult',
    'get_live_tools_throughput_test',
    'get_live_tools_throughput_test_output',
]

@pulumi.output_type
class GetLiveToolsThroughputTestResult:
    """
    A collection of values returned by getLiveToolsThroughputTest.
    """
    def __init__(__self__, id=None, item=None, serial=None, throughput_test_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if item and not isinstance(item, dict):
            raise TypeError("Expected argument 'item' to be a dict")
        pulumi.set(__self__, "item", item)
        if serial and not isinstance(serial, str):
            raise TypeError("Expected argument 'serial' to be a str")
        pulumi.set(__self__, "serial", serial)
        if throughput_test_id and not isinstance(throughput_test_id, str):
            raise TypeError("Expected argument 'throughput_test_id' to be a str")
        pulumi.set(__self__, "throughput_test_id", throughput_test_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def item(self) -> 'outputs.GetLiveToolsThroughputTestItemResult':
        return pulumi.get(self, "item")

    @_builtins.property
    @pulumi.getter
    def serial(self) -> _builtins.str:
        """
        serial path parameter.
        """
        return pulumi.get(self, "serial")

    @_builtins.property
    @pulumi.getter(name="throughputTestId")
    def throughput_test_id(self) -> _builtins.str:
        """
        throughputTestId path parameter. Throughput test ID
        """
        return pulumi.get(self, "throughput_test_id")


class AwaitableGetLiveToolsThroughputTestResult(GetLiveToolsThroughputTestResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLiveToolsThroughputTestResult(
            id=self.id,
            item=self.item,
            serial=self.serial,
            throughput_test_id=self.throughput_test_id)


def get_live_tools_throughput_test(serial: Optional[_builtins.str] = None,
                                   throughput_test_id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLiveToolsThroughputTestResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.devices.get_live_tools_throughput_test(serial="string",
        throughput_test_id="string")
    pulumi.export("merakiDevicesLiveToolsThroughputTestExample", example.item)
    ```


    :param _builtins.str serial: serial path parameter.
    :param _builtins.str throughput_test_id: throughputTestId path parameter. Throughput test ID
    """
    __args__ = dict()
    __args__['serial'] = serial
    __args__['throughputTestId'] = throughput_test_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:devices/getLiveToolsThroughputTest:getLiveToolsThroughputTest', __args__, opts=opts, typ=GetLiveToolsThroughputTestResult).value

    return AwaitableGetLiveToolsThroughputTestResult(
        id=pulumi.get(__ret__, 'id'),
        item=pulumi.get(__ret__, 'item'),
        serial=pulumi.get(__ret__, 'serial'),
        throughput_test_id=pulumi.get(__ret__, 'throughput_test_id'))
def get_live_tools_throughput_test_output(serial: Optional[pulumi.Input[_builtins.str]] = None,
                                          throughput_test_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLiveToolsThroughputTestResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_meraki as meraki

    example = meraki.devices.get_live_tools_throughput_test(serial="string",
        throughput_test_id="string")
    pulumi.export("merakiDevicesLiveToolsThroughputTestExample", example.item)
    ```


    :param _builtins.str serial: serial path parameter.
    :param _builtins.str throughput_test_id: throughputTestId path parameter. Throughput test ID
    """
    __args__ = dict()
    __args__['serial'] = serial
    __args__['throughputTestId'] = throughput_test_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:devices/getLiveToolsThroughputTest:getLiveToolsThroughputTest', __args__, opts=opts, typ=GetLiveToolsThroughputTestResult)
    return __ret__.apply(lambda __response__: GetLiveToolsThroughputTestResult(
        id=pulumi.get(__response__, 'id'),
        item=pulumi.get(__response__, 'item'),
        serial=pulumi.get(__response__, 'serial'),
        throughput_test_id=pulumi.get(__response__, 'throughput_test_id')))
