# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LicensingCotermLicensesMoveArgs', 'LicensingCotermLicensesMove']

@pulumi.input_type
class LicensingCotermLicensesMoveArgs:
    def __init__(__self__, *,
                 organization_id: pulumi.Input[_builtins.str],
                 parameters: pulumi.Input['LicensingCotermLicensesMoveParametersArgs']):
        """
        The set of arguments for constructing a LicensingCotermLicensesMove resource.
        :param pulumi.Input[_builtins.str] organization_id: organizationId path parameter. Organization ID
        """
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Input['LicensingCotermLicensesMoveParametersArgs']:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input['LicensingCotermLicensesMoveParametersArgs']):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class _LicensingCotermLicensesMoveState:
    def __init__(__self__, *,
                 item: Optional[pulumi.Input['LicensingCotermLicensesMoveItemArgs']] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input['LicensingCotermLicensesMoveParametersArgs']] = None):
        """
        Input properties used for looking up and filtering LicensingCotermLicensesMove resources.
        :param pulumi.Input[_builtins.str] organization_id: organizationId path parameter. Organization ID
        """
        if item is not None:
            pulumi.set(__self__, "item", item)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @_builtins.property
    @pulumi.getter
    def item(self) -> Optional[pulumi.Input['LicensingCotermLicensesMoveItemArgs']]:
        return pulumi.get(self, "item")

    @item.setter
    def item(self, value: Optional[pulumi.Input['LicensingCotermLicensesMoveItemArgs']]):
        pulumi.set(self, "item", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['LicensingCotermLicensesMoveParametersArgs']]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['LicensingCotermLicensesMoveParametersArgs']]):
        pulumi.set(self, "parameters", value)


@pulumi.type_token("meraki:organizations/licensingCotermLicensesMove:LicensingCotermLicensesMove")
class LicensingCotermLicensesMove(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Union['LicensingCotermLicensesMoveParametersArgs', 'LicensingCotermLicensesMoveParametersArgsDict']]] = None,
                 __props__=None):
        """
        ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
        already existed previously.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_meraki as meraki

        example = meraki.organizations.LicensingCotermLicensesMove("example",
            organization_id="string",
            parameters={
                "destination": {
                    "mode": "addDevices",
                    "organization_id": "123",
                },
                "licenses": [{
                    "counts": [{
                        "count": 5,
                        "model": "MR Enterprise",
                    }],
                    "key": "Z2AA-BBBB-CCCC",
                }],
            })
        pulumi.export("merakiOrganizationsLicensingCotermLicensesMoveExample", example)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] organization_id: organizationId path parameter. Organization ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LicensingCotermLicensesMoveArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
        already existed previously.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_meraki as meraki

        example = meraki.organizations.LicensingCotermLicensesMove("example",
            organization_id="string",
            parameters={
                "destination": {
                    "mode": "addDevices",
                    "organization_id": "123",
                },
                "licenses": [{
                    "counts": [{
                        "count": 5,
                        "model": "MR Enterprise",
                    }],
                    "key": "Z2AA-BBBB-CCCC",
                }],
            })
        pulumi.export("merakiOrganizationsLicensingCotermLicensesMoveExample", example)
        ```

        :param str resource_name: The name of the resource.
        :param LicensingCotermLicensesMoveArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LicensingCotermLicensesMoveArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Union['LicensingCotermLicensesMoveParametersArgs', 'LicensingCotermLicensesMoveParametersArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LicensingCotermLicensesMoveArgs.__new__(LicensingCotermLicensesMoveArgs)

            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if parameters is None and not opts.urn:
                raise TypeError("Missing required property 'parameters'")
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["item"] = None
        super(LicensingCotermLicensesMove, __self__).__init__(
            'meraki:organizations/licensingCotermLicensesMove:LicensingCotermLicensesMove',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            item: Optional[pulumi.Input[Union['LicensingCotermLicensesMoveItemArgs', 'LicensingCotermLicensesMoveItemArgsDict']]] = None,
            organization_id: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Union['LicensingCotermLicensesMoveParametersArgs', 'LicensingCotermLicensesMoveParametersArgsDict']]] = None) -> 'LicensingCotermLicensesMove':
        """
        Get an existing LicensingCotermLicensesMove resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] organization_id: organizationId path parameter. Organization ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LicensingCotermLicensesMoveState.__new__(_LicensingCotermLicensesMoveState)

        __props__.__dict__["item"] = item
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["parameters"] = parameters
        return LicensingCotermLicensesMove(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def item(self) -> pulumi.Output['outputs.LicensingCotermLicensesMoveItem']:
        return pulumi.get(self, "item")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output['outputs.LicensingCotermLicensesMoveParameters']:
        return pulumi.get(self, "parameters")

