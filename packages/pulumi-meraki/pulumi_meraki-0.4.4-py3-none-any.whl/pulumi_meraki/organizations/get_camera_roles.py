# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCameraRolesResult',
    'AwaitableGetCameraRolesResult',
    'get_camera_roles',
    'get_camera_roles_output',
]

@pulumi.output_type
class GetCameraRolesResult:
    """
    A collection of values returned by getCameraRoles.
    """
    def __init__(__self__, id=None, item=None, items=None, organization_id=None, role_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if item and not isinstance(item, dict):
            raise TypeError("Expected argument 'item' to be a dict")
        pulumi.set(__self__, "item", item)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def item(self) -> 'outputs.GetCameraRolesItemResult':
        return pulumi.get(self, "item")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetCameraRolesItemResult']:
        """
        Array of ResponseCameraGetOrganizationCameraRoles
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[_builtins.str]:
        """
        roleId path parameter. Role ID
        """
        return pulumi.get(self, "role_id")


class AwaitableGetCameraRolesResult(GetCameraRolesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCameraRolesResult(
            id=self.id,
            item=self.item,
            items=self.items,
            organization_id=self.organization_id,
            role_id=self.role_id)


def get_camera_roles(organization_id: Optional[_builtins.str] = None,
                     role_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCameraRolesResult:
    """
    ## Example Usage


    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.str role_id: roleId path parameter. Role ID
    """
    __args__ = dict()
    __args__['organizationId'] = organization_id
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:organizations/getCameraRoles:getCameraRoles', __args__, opts=opts, typ=GetCameraRolesResult).value

    return AwaitableGetCameraRolesResult(
        id=pulumi.get(__ret__, 'id'),
        item=pulumi.get(__ret__, 'item'),
        items=pulumi.get(__ret__, 'items'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        role_id=pulumi.get(__ret__, 'role_id'))
def get_camera_roles_output(organization_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            role_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCameraRolesResult]:
    """
    ## Example Usage


    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.str role_id: roleId path parameter. Role ID
    """
    __args__ = dict()
    __args__['organizationId'] = organization_id
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:organizations/getCameraRoles:getCameraRoles', __args__, opts=opts, typ=GetCameraRolesResult)
    return __ret__.apply(lambda __response__: GetCameraRolesResult(
        id=pulumi.get(__response__, 'id'),
        item=pulumi.get(__response__, 'item'),
        items=pulumi.get(__response__, 'items'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        role_id=pulumi.get(__response__, 'role_id')))
