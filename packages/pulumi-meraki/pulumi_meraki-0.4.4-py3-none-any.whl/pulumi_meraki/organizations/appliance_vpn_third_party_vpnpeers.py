# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplianceVpnThirdPartyVpnpeersArgs', 'ApplianceVpnThirdPartyVpnpeers']

@pulumi.input_type
class ApplianceVpnThirdPartyVpnpeersArgs:
    def __init__(__self__, *,
                 organization_id: pulumi.Input[_builtins.str],
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeerArgs']]]] = None):
        """
        The set of arguments for constructing a ApplianceVpnThirdPartyVpnpeers resource.
        :param pulumi.Input[_builtins.str] organization_id: organizationId path parameter. Organization ID
        :param pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeerArgs']]] peers: The list of VPN peers
        """
        pulumi.set(__self__, "organization_id", organization_id)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeerArgs']]]]:
        """
        The list of VPN peers
        """
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeerArgs']]]]):
        pulumi.set(self, "peers", value)


@pulumi.input_type
class _ApplianceVpnThirdPartyVpnpeersState:
    def __init__(__self__, *,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeerArgs']]]] = None,
                 peers_responses: Optional[pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeersResponseArgs']]]] = None):
        """
        Input properties used for looking up and filtering ApplianceVpnThirdPartyVpnpeers resources.
        :param pulumi.Input[_builtins.str] organization_id: organizationId path parameter. Organization ID
        :param pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeerArgs']]] peers: The list of VPN peers
        :param pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeersResponseArgs']]] peers_responses: The list of VPN peers
        """
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)
        if peers_responses is not None:
            pulumi.set(__self__, "peers_responses", peers_responses)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeerArgs']]]]:
        """
        The list of VPN peers
        """
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeerArgs']]]]):
        pulumi.set(self, "peers", value)

    @_builtins.property
    @pulumi.getter(name="peersResponses")
    def peers_responses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeersResponseArgs']]]]:
        """
        The list of VPN peers
        """
        return pulumi.get(self, "peers_responses")

    @peers_responses.setter
    def peers_responses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplianceVpnThirdPartyVpnpeersPeersResponseArgs']]]]):
        pulumi.set(self, "peers_responses", value)


@pulumi.type_token("meraki:organizations/applianceVpnThirdPartyVpnpeers:ApplianceVpnThirdPartyVpnpeers")
class ApplianceVpnThirdPartyVpnpeers(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApplianceVpnThirdPartyVpnpeersPeerArgs', 'ApplianceVpnThirdPartyVpnpeersPeerArgsDict']]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        ```sh
        $ pulumi import meraki:organizations/applianceVpnThirdPartyVpnpeers:ApplianceVpnThirdPartyVpnpeers example "organization_id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] organization_id: organizationId path parameter. Organization ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['ApplianceVpnThirdPartyVpnpeersPeerArgs', 'ApplianceVpnThirdPartyVpnpeersPeerArgsDict']]]] peers: The list of VPN peers
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplianceVpnThirdPartyVpnpeersArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        ```sh
        $ pulumi import meraki:organizations/applianceVpnThirdPartyVpnpeers:ApplianceVpnThirdPartyVpnpeers example "organization_id"
        ```

        :param str resource_name: The name of the resource.
        :param ApplianceVpnThirdPartyVpnpeersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplianceVpnThirdPartyVpnpeersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApplianceVpnThirdPartyVpnpeersPeerArgs', 'ApplianceVpnThirdPartyVpnpeersPeerArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplianceVpnThirdPartyVpnpeersArgs.__new__(ApplianceVpnThirdPartyVpnpeersArgs)

            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["peers"] = peers
            __props__.__dict__["peers_responses"] = None
        super(ApplianceVpnThirdPartyVpnpeers, __self__).__init__(
            'meraki:organizations/applianceVpnThirdPartyVpnpeers:ApplianceVpnThirdPartyVpnpeers',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            organization_id: Optional[pulumi.Input[_builtins.str]] = None,
            peers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApplianceVpnThirdPartyVpnpeersPeerArgs', 'ApplianceVpnThirdPartyVpnpeersPeerArgsDict']]]]] = None,
            peers_responses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ApplianceVpnThirdPartyVpnpeersPeersResponseArgs', 'ApplianceVpnThirdPartyVpnpeersPeersResponseArgsDict']]]]] = None) -> 'ApplianceVpnThirdPartyVpnpeers':
        """
        Get an existing ApplianceVpnThirdPartyVpnpeers resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] organization_id: organizationId path parameter. Organization ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['ApplianceVpnThirdPartyVpnpeersPeerArgs', 'ApplianceVpnThirdPartyVpnpeersPeerArgsDict']]]] peers: The list of VPN peers
        :param pulumi.Input[Sequence[pulumi.Input[Union['ApplianceVpnThirdPartyVpnpeersPeersResponseArgs', 'ApplianceVpnThirdPartyVpnpeersPeersResponseArgsDict']]]] peers_responses: The list of VPN peers
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplianceVpnThirdPartyVpnpeersState.__new__(_ApplianceVpnThirdPartyVpnpeersState)

        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["peers"] = peers
        __props__.__dict__["peers_responses"] = peers_responses
        return ApplianceVpnThirdPartyVpnpeers(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def peers(self) -> pulumi.Output[Optional[Sequence['outputs.ApplianceVpnThirdPartyVpnpeersPeer']]]:
        """
        The list of VPN peers
        """
        return pulumi.get(self, "peers")

    @_builtins.property
    @pulumi.getter(name="peersResponses")
    def peers_responses(self) -> pulumi.Output[Sequence['outputs.ApplianceVpnThirdPartyVpnpeersPeersResponse']]:
        """
        The list of VPN peers
        """
        return pulumi.get(self, "peers_responses")

