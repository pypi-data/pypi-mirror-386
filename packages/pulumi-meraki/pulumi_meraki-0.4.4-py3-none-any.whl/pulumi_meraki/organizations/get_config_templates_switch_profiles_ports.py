# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetConfigTemplatesSwitchProfilesPortsResult',
    'AwaitableGetConfigTemplatesSwitchProfilesPortsResult',
    'get_config_templates_switch_profiles_ports',
    'get_config_templates_switch_profiles_ports_output',
]

@pulumi.output_type
class GetConfigTemplatesSwitchProfilesPortsResult:
    """
    A collection of values returned by getConfigTemplatesSwitchProfilesPorts.
    """
    def __init__(__self__, config_template_id=None, id=None, item=None, items=None, organization_id=None, port_id=None, profile_id=None):
        if config_template_id and not isinstance(config_template_id, str):
            raise TypeError("Expected argument 'config_template_id' to be a str")
        pulumi.set(__self__, "config_template_id", config_template_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if item and not isinstance(item, dict):
            raise TypeError("Expected argument 'item' to be a dict")
        pulumi.set(__self__, "item", item)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if port_id and not isinstance(port_id, str):
            raise TypeError("Expected argument 'port_id' to be a str")
        pulumi.set(__self__, "port_id", port_id)
        if profile_id and not isinstance(profile_id, str):
            raise TypeError("Expected argument 'profile_id' to be a str")
        pulumi.set(__self__, "profile_id", profile_id)

    @_builtins.property
    @pulumi.getter(name="configTemplateId")
    def config_template_id(self) -> Optional[_builtins.str]:
        """
        configTemplateId path parameter. Config template ID
        """
        return pulumi.get(self, "config_template_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def item(self) -> 'outputs.GetConfigTemplatesSwitchProfilesPortsItemResult':
        return pulumi.get(self, "item")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetConfigTemplatesSwitchProfilesPortsItemResult']:
        """
        Array of ResponseSwitchGetOrganizationConfigTemplateSwitchProfilePorts
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[_builtins.str]:
        """
        organizationId path parameter. Organization ID
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[_builtins.str]:
        """
        portId path parameter. Port ID
        """
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[_builtins.str]:
        """
        profileId path parameter. Profile ID
        """
        return pulumi.get(self, "profile_id")


class AwaitableGetConfigTemplatesSwitchProfilesPortsResult(GetConfigTemplatesSwitchProfilesPortsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigTemplatesSwitchProfilesPortsResult(
            config_template_id=self.config_template_id,
            id=self.id,
            item=self.item,
            items=self.items,
            organization_id=self.organization_id,
            port_id=self.port_id,
            profile_id=self.profile_id)


def get_config_templates_switch_profiles_ports(config_template_id: Optional[_builtins.str] = None,
                                               organization_id: Optional[_builtins.str] = None,
                                               port_id: Optional[_builtins.str] = None,
                                               profile_id: Optional[_builtins.str] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigTemplatesSwitchProfilesPortsResult:
    """
    ## Example Usage


    :param _builtins.str config_template_id: configTemplateId path parameter. Config template ID
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.str port_id: portId path parameter. Port ID
    :param _builtins.str profile_id: profileId path parameter. Profile ID
    """
    __args__ = dict()
    __args__['configTemplateId'] = config_template_id
    __args__['organizationId'] = organization_id
    __args__['portId'] = port_id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('meraki:organizations/getConfigTemplatesSwitchProfilesPorts:getConfigTemplatesSwitchProfilesPorts', __args__, opts=opts, typ=GetConfigTemplatesSwitchProfilesPortsResult).value

    return AwaitableGetConfigTemplatesSwitchProfilesPortsResult(
        config_template_id=pulumi.get(__ret__, 'config_template_id'),
        id=pulumi.get(__ret__, 'id'),
        item=pulumi.get(__ret__, 'item'),
        items=pulumi.get(__ret__, 'items'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        port_id=pulumi.get(__ret__, 'port_id'),
        profile_id=pulumi.get(__ret__, 'profile_id'))
def get_config_templates_switch_profiles_ports_output(config_template_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      organization_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      port_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      profile_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigTemplatesSwitchProfilesPortsResult]:
    """
    ## Example Usage


    :param _builtins.str config_template_id: configTemplateId path parameter. Config template ID
    :param _builtins.str organization_id: organizationId path parameter. Organization ID
    :param _builtins.str port_id: portId path parameter. Port ID
    :param _builtins.str profile_id: profileId path parameter. Profile ID
    """
    __args__ = dict()
    __args__['configTemplateId'] = config_template_id
    __args__['organizationId'] = organization_id
    __args__['portId'] = port_id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('meraki:organizations/getConfigTemplatesSwitchProfilesPorts:getConfigTemplatesSwitchProfilesPorts', __args__, opts=opts, typ=GetConfigTemplatesSwitchProfilesPortsResult)
    return __ret__.apply(lambda __response__: GetConfigTemplatesSwitchProfilesPortsResult(
        config_template_id=pulumi.get(__response__, 'config_template_id'),
        id=pulumi.get(__response__, 'id'),
        item=pulumi.get(__response__, 'item'),
        items=pulumi.get(__response__, 'items'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        port_id=pulumi.get(__response__, 'port_id'),
        profile_id=pulumi.get(__response__, 'profile_id')))
