[build-system]
requires = ["setuptools>=61.0", "versioneer[toml]>=0.29"]
build-backend = "setuptools.build_meta"

[project]
name = "eval-protocol"
dynamic = ["version"]
authors = [
    {name = "Fireworks AI", email = "info@fireworks.ai"},
]
description = "The official Python SDK for Eval Protocol (EP.) EP is an open protocol that standardizes how developers author evals for large language model (LLM) applications."
readme = "README.md"
license         = "MIT"                # SPDX expression
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
dependencies = [
    "requests>=2.25.0",
    "pydantic>=2.0.0",
    "dataclasses-json>=0.5.7",
    "uvicorn>=0.15.0",
    "python-dotenv>=0.19.0",
    "openai>=1.78.1",
    "aiosqlite",
    "aiohttp",
    "mcp>=1.9.2",
    "PyYAML>=5.0",
    "hydra-core>=1.3.2",
    "omegaconf>=2.3.0",
    "httpx>=0.24.0",
    "anthropic>=0.59.0",
    "litellm<1.75.0",
    "pytest>=6.0.0",
    "pytest-asyncio>=0.21.0",
    "peewee>=3.18.2",
    "backoff>=2.2.0",
    "questionary>=2.0.0",
    # Dependencies for vendored tau2 package
    "toml>=0.10.0",
    "loguru>=0.6.0",
    "docstring-parser>=0.15",
    "rich>=12.0.0",
    "psutil>=5.8.0",
    "addict>=2.4.0",
    "deepdiff>=6.0.0",
    "websockets>=15.0.1",
    "fastapi>=0.116.1",
]

[project.urls]
Homepage = "https://github.com/fireworks-ai/eval-protocol"

[project.optional-dependencies]
dev = [
    "build",
    "twine",
    "pytest-httpserver",
    "werkzeug>=2.0.0",
    "ruff>=0.5.0",
    "transformers>=4.0.0",
    "pandas>=1.5.0",
    "types-setuptools",
    "types-requests",
    "types-PyYAML",
    "types-docker",
    "versioneer>=0.20",
    "openai>=1.78.1",
    "pre-commit",
    "e2b",
    "pytest-cov",
    "pytest-xdist",
    "docker==7.1.0",
    "ipykernel>=6.30.0",
    "jupyter>=1.1.1",
    "pip>=25.1.1",
    "haikus==0.3.8",
    "syrupy>=4.0.0",
    "gymnasium>=1.2.0",
]
trl = [
    "torch>=1.9",
    "trl>=0.7.0",
    "peft>=0.7.0",
    "transformers>=4.0.0",
    "accelerate>=0.28.0",
]
openevals = [
    "openevals>=0.1.0",
]
fireworks = [
    "fireworks-ai>=0.19.19",
]
box2d = [
    "swig",
    "gymnasium[box2d]>=0.29.0",
    "Pillow",
]
langfuse = [
    "langfuse>=2.0.0",
]
huggingface = [
    # Keep in sync with core dependency to ensure compatibility with latest pyarrow
    "datasets>=3.0.0",
    "transformers>=4.0.0",
]
langsmith = [
    "langsmith>=0.1.86",
]
bigquery = [
    "google-cloud-bigquery>=3.0.0",
    "google-auth>=2.0.0",
]
svgbench = [
    "selenium>=4.0.0",
]
pydantic = [
    "pydantic-ai>=1.0.2",
]
supabase = [
    "supabase>=2.18.1",
]
chinook = [
    "psycopg2-binary>=2.9.10",
]
langchain = [
    "langchain-core>=0.3.0",
]
braintrust = [
    "braintrust[otel]",
]

# Optional deps for LangGraph example/tests
langgraph = [
    "langgraph>=0.6.7",
    "langchain-core>=0.3.75",
]
langgraph_tools = [
    "langgraph>=0.6.7",
    "langchain>=0.3.0",
    "langchain-fireworks>=0.3.0",
]

[project.scripts]
fireworks-reward = "eval_protocol.cli:main"
eval-protocol = "eval_protocol.cli:main"
ep = "eval_protocol.cli:main"

[project.entry-points.pytest11]
eval_protocol = "eval_protocol.pytest.plugin"

[tool.setuptools.packages.find]
include = ["eval_protocol*", "development*", "vendor*"]

[tool.setuptools.package-data]
"eval_protocol" = ["../vite-app/dist/**/*"]
"eval_protocol.mcp_servers.tau2" = ["*.md", "tests/system_prompts/*.md"]
"eval_protocol.benchmarks" = ["data/*.jsonl"]
"vendor.tau2" = ["data/**/*.md"]


[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "eval_protocol/_version.py"
versionfile_build = "eval_protocol/_version.py"
tag_prefix = "v"
parentdir_prefix = "eval-protocol-"

### Black and isort removed; Ruff provides formatting and imports

[tool.uv.sources]
tau2 = { git = "https://github.com/sierra-research/tau2-bench.git" }

[dependency-groups]
dev = [
    "basedpyright>=1.31.3",
    "fastapi[standard]>=0.116.1",
    "fastmcp>=2.10.6",
    "haikus==0.3.8",
    "pytest>=8.4.1",
]
[tool.ruff]
line-length = 119
target-version = "py310"
exclude = ["vite-app", "vendor", "local_evals"]

[tool.ruff.lint]
# Relax: only enforce core errors (E/F); drop W/I for now
select = ["E", "F"]
# Preserve current flake8 ignore behavior to minimize churn
ignore = ["E203", "E402", "E501", "F401"]

# Suppress noisy rules in tests/examples/vendor where readability patterns differ
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["F841", "E712", "E731", "F821"]
"examples/**/*.py" = ["F841", "E712", "E731", "F821"]
"eval_protocol/pytest/**/*.py" = ["F841", "E712", "E731", "F811"]
"vendor/**" = ["F841", "E712", "E731", "F811"]
"development/**/*.py" = ["F841", "E712", "E731"]
"eval_protocol/**/*.py" = ["F841", "F811", "E731", "E721"]

[tool.ruff.lint.isort]
known-first-party = ["eval_protocol"]
combine-as-imports = true

[tool.pyright]
typeCheckingMode = "basic"  # Changed from "standard" to reduce memory usage
pythonVersion = "3.10"
include = ["eval_protocol"]  # Reduced scope to just the main package
exclude = ["vite-app", "vendor", "examples", "tests", "development", "local_evals"]
# Ignore diagnostics for vendored generator code
ignore = ["versioneer.py"]
reportUnusedCallResult = "none"
# Memory optimization settings
useLibraryCodeForTypes = false
reportMissingImports = false
reportMissingTypeStubs = false
