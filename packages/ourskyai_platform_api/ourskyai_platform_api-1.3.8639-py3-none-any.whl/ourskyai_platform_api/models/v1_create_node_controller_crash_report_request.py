# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class V1CreateNodeControllerCrashReportRequest(BaseModel):
    """
    create a crash report  # noqa: E501
    """
    lineage_id: StrictStr = Field(..., alias="lineageId")
    file_sha: StrictStr = Field(..., alias="fileSha")
    file_size_mb: Union[StrictFloat, StrictInt] = Field(..., alias="fileSizeMb")
    software_version: StrictStr = Field(..., alias="softwareVersion")
    component_name: StrictStr = Field(..., alias="componentName")
    kernel_version: StrictStr = Field(..., alias="kernelVersion")
    backtrace: StrictStr = Field(...)
    __properties = ["lineageId", "fileSha", "fileSizeMb", "softwareVersion", "componentName", "kernelVersion", "backtrace"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateNodeControllerCrashReportRequest:
        """Create an instance of V1CreateNodeControllerCrashReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateNodeControllerCrashReportRequest:
        """Create an instance of V1CreateNodeControllerCrashReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateNodeControllerCrashReportRequest.parse_obj(obj)

        _obj = V1CreateNodeControllerCrashReportRequest.parse_obj({
            "lineage_id": obj.get("lineageId"),
            "file_sha": obj.get("fileSha"),
            "file_size_mb": obj.get("fileSizeMb"),
            "software_version": obj.get("softwareVersion"),
            "component_name": obj.get("componentName"),
            "kernel_version": obj.get("kernelVersion"),
            "backtrace": obj.get("backtrace")
        })
        return _obj


