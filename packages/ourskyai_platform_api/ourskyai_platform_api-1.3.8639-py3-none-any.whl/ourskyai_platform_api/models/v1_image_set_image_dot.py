# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt

class V1ImageSetImageDot(BaseModel):
    """
    Data related to the extraction of a dot from an image.  # noqa: E501
    """
    centroid_ra: Union[StrictFloat, StrictInt] = Field(..., alias="centroidRa")
    centroid_dec: Union[StrictFloat, StrictInt] = Field(..., alias="centroidDec")
    calibrated_centroid_ra: Union[StrictFloat, StrictInt] = Field(..., alias="calibratedCentroidRa")
    calibrated_centroid_dec: Union[StrictFloat, StrictInt] = Field(..., alias="calibratedCentroidDec")
    centroid_time: datetime = Field(..., alias="centroidTime")
    centroid_time_is_gps: StrictBool = Field(..., alias="centroidTimeIsGps")
    centroid_x: StrictInt = Field(..., alias="centroidX")
    centroid_y: StrictInt = Field(..., alias="centroidY")
    snr: Union[StrictFloat, StrictInt] = Field(...)
    magnitude: Union[StrictFloat, StrictInt] = Field(...)
    magnitude_error: Union[StrictFloat, StrictInt] = Field(..., alias="magnitudeError")
    magnitude_is_absolute: StrictBool = Field(..., alias="magnitudeIsAbsolute")
    magntiude_is_accurate: StrictBool = Field(..., alias="magntiudeIsAccurate")
    __properties = ["centroidRa", "centroidDec", "calibratedCentroidRa", "calibratedCentroidDec", "centroidTime", "centroidTimeIsGps", "centroidX", "centroidY", "snr", "magnitude", "magnitudeError", "magnitudeIsAbsolute", "magntiudeIsAccurate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ImageSetImageDot:
        """Create an instance of V1ImageSetImageDot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ImageSetImageDot:
        """Create an instance of V1ImageSetImageDot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ImageSetImageDot.parse_obj(obj)

        _obj = V1ImageSetImageDot.parse_obj({
            "centroid_ra": obj.get("centroidRa"),
            "centroid_dec": obj.get("centroidDec"),
            "calibrated_centroid_ra": obj.get("calibratedCentroidRa"),
            "calibrated_centroid_dec": obj.get("calibratedCentroidDec"),
            "centroid_time": obj.get("centroidTime"),
            "centroid_time_is_gps": obj.get("centroidTimeIsGps"),
            "centroid_x": obj.get("centroidX"),
            "centroid_y": obj.get("centroidY"),
            "snr": obj.get("snr"),
            "magnitude": obj.get("magnitude"),
            "magnitude_error": obj.get("magnitudeError"),
            "magnitude_is_absolute": obj.get("magnitudeIsAbsolute"),
            "magntiude_is_accurate": obj.get("magntiudeIsAccurate")
        })
        return _obj


