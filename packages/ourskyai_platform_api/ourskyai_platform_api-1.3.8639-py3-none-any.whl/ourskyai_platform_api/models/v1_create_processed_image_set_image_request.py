# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from ourskyai_platform_api.models.fits_header import FitsHeader
from ourskyai_platform_api.models.v1_image_rejection_reason import V1ImageRejectionReason
from ourskyai_platform_api.models.v1_image_set_image_dot import V1ImageSetImageDot
from ourskyai_platform_api.models.v1_image_set_image_streak import V1ImageSetImageStreak

class V1CreateProcessedImageSetImageRequest(BaseModel):
    """
    Data needed to create a complete image set image and its extracted data.  # noqa: E501
    """
    image_set_id: StrictStr = Field(..., alias="imageSetId")
    binning: StrictInt = Field(...)
    exposure_length: Union[StrictFloat, StrictInt] = Field(..., alias="exposureLength")
    image_sha: Optional[StrictStr] = Field(None, alias="imageSha")
    image_size_mb: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="imageSizeMb")
    captured_at: datetime = Field(..., alias="capturedAt")
    gps_timestamp: StrictBool = Field(..., alias="gpsTimestamp")
    rejected_reason: Optional[V1ImageRejectionReason] = Field(None, alias="rejectedReason")
    fwhm_average: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fwhmAverage")
    fwhm_std_dev: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fwhmStdDev")
    ra_degrees: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="raDegrees")
    dec_degrees: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="decDegrees")
    ra_offset: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="raOffset")
    dec_offset: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="decOffset")
    total_offset: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalOffset")
    total_offset_std_dev: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalOffsetStdDev")
    total_offset_rms: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalOffsetRMS")
    fits_headers: conlist(FitsHeader) = Field(..., alias="fitsHeaders")
    extracted_streaks: Optional[conlist(V1ImageSetImageStreak)] = Field(None, alias="extractedStreaks")
    extracted_dots: Optional[conlist(V1ImageSetImageDot)] = Field(None, alias="extractedDots")
    __properties = ["imageSetId", "binning", "exposureLength", "imageSha", "imageSizeMb", "capturedAt", "gpsTimestamp", "rejectedReason", "fwhmAverage", "fwhmStdDev", "raDegrees", "decDegrees", "raOffset", "decOffset", "totalOffset", "totalOffsetStdDev", "totalOffsetRMS", "fitsHeaders", "extractedStreaks", "extractedDots"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateProcessedImageSetImageRequest:
        """Create an instance of V1CreateProcessedImageSetImageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in fits_headers (list)
        _items = []
        if self.fits_headers:
            for _item in self.fits_headers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fitsHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extracted_streaks (list)
        _items = []
        if self.extracted_streaks:
            for _item in self.extracted_streaks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extractedStreaks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extracted_dots (list)
        _items = []
        if self.extracted_dots:
            for _item in self.extracted_dots:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extractedDots'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateProcessedImageSetImageRequest:
        """Create an instance of V1CreateProcessedImageSetImageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateProcessedImageSetImageRequest.parse_obj(obj)

        _obj = V1CreateProcessedImageSetImageRequest.parse_obj({
            "image_set_id": obj.get("imageSetId"),
            "binning": obj.get("binning"),
            "exposure_length": obj.get("exposureLength"),
            "image_sha": obj.get("imageSha"),
            "image_size_mb": obj.get("imageSizeMb"),
            "captured_at": obj.get("capturedAt"),
            "gps_timestamp": obj.get("gpsTimestamp"),
            "rejected_reason": obj.get("rejectedReason"),
            "fwhm_average": obj.get("fwhmAverage"),
            "fwhm_std_dev": obj.get("fwhmStdDev"),
            "ra_degrees": obj.get("raDegrees"),
            "dec_degrees": obj.get("decDegrees"),
            "ra_offset": obj.get("raOffset"),
            "dec_offset": obj.get("decOffset"),
            "total_offset": obj.get("totalOffset"),
            "total_offset_std_dev": obj.get("totalOffsetStdDev"),
            "total_offset_rms": obj.get("totalOffsetRMS"),
            "fits_headers": [FitsHeader.from_dict(_item) for _item in obj.get("fitsHeaders")] if obj.get("fitsHeaders") is not None else None,
            "extracted_streaks": [V1ImageSetImageStreak.from_dict(_item) for _item in obj.get("extractedStreaks")] if obj.get("extractedStreaks") is not None else None,
            "extracted_dots": [V1ImageSetImageDot.from_dict(_item) for _item in obj.get("extractedDots")] if obj.get("extractedDots") is not None else None
        })
        return _obj


