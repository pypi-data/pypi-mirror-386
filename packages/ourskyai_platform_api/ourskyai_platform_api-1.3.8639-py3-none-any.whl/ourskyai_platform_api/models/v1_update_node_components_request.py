# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from ourskyai_platform_api.models.v1_update_node_components_request_camera import V1UpdateNodeComponentsRequestCamera
from ourskyai_platform_api.models.v1_update_node_components_request_focuser import V1UpdateNodeComponentsRequestFocuser
from ourskyai_platform_api.models.v1_update_node_components_request_mount import V1UpdateNodeComponentsRequestMount
from ourskyai_platform_api.models.v1_update_node_components_request_optical_tube import V1UpdateNodeComponentsRequestOpticalTube

class V1UpdateNodeComponentsRequest(BaseModel):
    """
    V1UpdateNodeComponentsRequest
    """
    node_id: StrictStr = Field(..., alias="nodeId")
    camera: Optional[V1UpdateNodeComponentsRequestCamera] = None
    mount: Optional[V1UpdateNodeComponentsRequestMount] = None
    optical_tube: Optional[V1UpdateNodeComponentsRequestOpticalTube] = Field(None, alias="opticalTube")
    focuser: Optional[V1UpdateNodeComponentsRequestFocuser] = None
    __properties = ["nodeId", "camera", "mount", "opticalTube", "focuser"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1UpdateNodeComponentsRequest:
        """Create an instance of V1UpdateNodeComponentsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of camera
        if self.camera:
            _dict['camera'] = self.camera.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mount
        if self.mount:
            _dict['mount'] = self.mount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of optical_tube
        if self.optical_tube:
            _dict['opticalTube'] = self.optical_tube.to_dict()
        # override the default output from pydantic by calling `to_dict()` of focuser
        if self.focuser:
            _dict['focuser'] = self.focuser.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1UpdateNodeComponentsRequest:
        """Create an instance of V1UpdateNodeComponentsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1UpdateNodeComponentsRequest.parse_obj(obj)

        _obj = V1UpdateNodeComponentsRequest.parse_obj({
            "node_id": obj.get("nodeId"),
            "camera": V1UpdateNodeComponentsRequestCamera.from_dict(obj.get("camera")) if obj.get("camera") is not None else None,
            "mount": V1UpdateNodeComponentsRequestMount.from_dict(obj.get("mount")) if obj.get("mount") is not None else None,
            "optical_tube": V1UpdateNodeComponentsRequestOpticalTube.from_dict(obj.get("opticalTube")) if obj.get("opticalTube") is not None else None,
            "focuser": V1UpdateNodeComponentsRequestFocuser.from_dict(obj.get("focuser")) if obj.get("focuser") is not None else None
        })
        return _obj


