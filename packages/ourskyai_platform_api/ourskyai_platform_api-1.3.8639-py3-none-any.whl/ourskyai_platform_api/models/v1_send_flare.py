# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class V1SendFlare(BaseModel):
    """
    V1SendFlare
    """
    node_id: StrictStr = Field(..., alias="nodeId")
    journal_size_limit_bytes: Optional[StrictInt] = Field(None, alias="journalSizeLimitBytes")
    diagnose_mount: Optional[StrictBool] = Field(None, alias="diagnoseMount")
    diagnose_astro_camera: Optional[StrictBool] = Field(None, alias="diagnoseAstroCamera")
    diagnose_all_sky_camera: Optional[StrictBool] = Field(None, alias="diagnoseAllSkyCamera")
    diagnose_focuser: Optional[StrictBool] = Field(None, alias="diagnoseFocuser")
    diagnose_weather_station: Optional[StrictBool] = Field(None, alias="diagnoseWeatherStation")
    diagnose_relays: Optional[StrictBool] = Field(None, alias="diagnoseRelays")
    diagnose_roof: Optional[StrictBool] = Field(None, alias="diagnoseRoof")
    diagnose_platform_connection: Optional[StrictBool] = Field(None, alias="diagnosePlatformConnection")
    executable_at: Optional[datetime] = Field(None, alias="executableAt")
    __properties = ["nodeId", "journalSizeLimitBytes", "diagnoseMount", "diagnoseAstroCamera", "diagnoseAllSkyCamera", "diagnoseFocuser", "diagnoseWeatherStation", "diagnoseRelays", "diagnoseRoof", "diagnosePlatformConnection", "executableAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SendFlare:
        """Create an instance of V1SendFlare from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SendFlare:
        """Create an instance of V1SendFlare from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SendFlare.parse_obj(obj)

        _obj = V1SendFlare.parse_obj({
            "node_id": obj.get("nodeId"),
            "journal_size_limit_bytes": obj.get("journalSizeLimitBytes"),
            "diagnose_mount": obj.get("diagnoseMount"),
            "diagnose_astro_camera": obj.get("diagnoseAstroCamera"),
            "diagnose_all_sky_camera": obj.get("diagnoseAllSkyCamera"),
            "diagnose_focuser": obj.get("diagnoseFocuser"),
            "diagnose_weather_station": obj.get("diagnoseWeatherStation"),
            "diagnose_relays": obj.get("diagnoseRelays"),
            "diagnose_roof": obj.get("diagnoseRoof"),
            "diagnose_platform_connection": obj.get("diagnosePlatformConnection"),
            "executable_at": obj.get("executableAt")
        })
        return _obj


