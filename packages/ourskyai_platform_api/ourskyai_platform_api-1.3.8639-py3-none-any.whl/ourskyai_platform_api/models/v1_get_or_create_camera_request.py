# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from ourskyai_platform_api.models.shutter_type import ShutterType
from ourskyai_platform_api.models.v1_gain_curve import V1GainCurve
from ourskyai_platform_api.models.v1_setup_action import V1SetupAction
from ourskyai_platform_api.models.v1_video_mode_framerate_property import V1VideoModeFramerateProperty

class V1GetOrCreateCameraRequest(BaseModel):
    """
    V1GetOrCreateCameraRequest
    """
    model: Optional[StrictStr] = None
    pixel_size_microns: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="pixelSizeMicrons")
    full_well_capacity: Optional[StrictInt] = Field(None, alias="fullWellCapacity")
    pixels_x: Optional[StrictInt] = Field(None, alias="pixelsX")
    pixels_y: Optional[StrictInt] = Field(None, alias="pixelsY")
    megapixels: Optional[Union[StrictFloat, StrictInt]] = None
    chilled: Optional[StrictBool] = None
    shutter_type: Optional[ShutterType] = Field(None, alias="shutterType")
    sensor_xmm: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sensorXmm")
    sensor_ymm: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sensorYmm")
    unity_gain: Optional[StrictInt] = Field(None, alias="unityGain")
    optimal_nighttime_gain: Optional[StrictInt] = Field(None, alias="optimalNighttimeGain")
    optimal_nighttime_gain_offset: Optional[StrictInt] = Field(None, alias="optimalNighttimeGainOffset")
    optimal_nighttime_gain_mode: Optional[StrictInt] = Field(None, alias="optimalNighttimeGainMode")
    supports_video_mode: Optional[StrictBool] = Field(None, alias="supportsVideoMode")
    adc_bit_depth: Optional[StrictInt] = Field(None, alias="adcBitDepth")
    quantum_efficiency: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="quantumEfficiency")
    gain_curves: Optional[conlist(V1GainCurve)] = Field(None, alias="gainCurves")
    setup_actions: Optional[conlist(V1SetupAction)] = Field(None, alias="setupActions")
    is_color: Optional[StrictBool] = Field(None, alias="isColor")
    video_mode_framerate_properties: Optional[conlist(V1VideoModeFramerateProperty)] = Field(None, alias="videoModeFramerateProperties")
    __properties = ["model", "pixelSizeMicrons", "fullWellCapacity", "pixelsX", "pixelsY", "megapixels", "chilled", "shutterType", "sensorXmm", "sensorYmm", "unityGain", "optimalNighttimeGain", "optimalNighttimeGainOffset", "optimalNighttimeGainMode", "supportsVideoMode", "adcBitDepth", "quantumEfficiency", "gainCurves", "setupActions", "isColor", "videoModeFramerateProperties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1GetOrCreateCameraRequest:
        """Create an instance of V1GetOrCreateCameraRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in gain_curves (list)
        _items = []
        if self.gain_curves:
            for _item in self.gain_curves:
                if _item:
                    _items.append(_item.to_dict())
            _dict['gainCurves'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in setup_actions (list)
        _items = []
        if self.setup_actions:
            for _item in self.setup_actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['setupActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in video_mode_framerate_properties (list)
        _items = []
        if self.video_mode_framerate_properties:
            for _item in self.video_mode_framerate_properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['videoModeFramerateProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1GetOrCreateCameraRequest:
        """Create an instance of V1GetOrCreateCameraRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1GetOrCreateCameraRequest.parse_obj(obj)

        _obj = V1GetOrCreateCameraRequest.parse_obj({
            "model": obj.get("model"),
            "pixel_size_microns": obj.get("pixelSizeMicrons"),
            "full_well_capacity": obj.get("fullWellCapacity"),
            "pixels_x": obj.get("pixelsX"),
            "pixels_y": obj.get("pixelsY"),
            "megapixels": obj.get("megapixels"),
            "chilled": obj.get("chilled"),
            "shutter_type": obj.get("shutterType"),
            "sensor_xmm": obj.get("sensorXmm"),
            "sensor_ymm": obj.get("sensorYmm"),
            "unity_gain": obj.get("unityGain"),
            "optimal_nighttime_gain": obj.get("optimalNighttimeGain"),
            "optimal_nighttime_gain_offset": obj.get("optimalNighttimeGainOffset"),
            "optimal_nighttime_gain_mode": obj.get("optimalNighttimeGainMode"),
            "supports_video_mode": obj.get("supportsVideoMode"),
            "adc_bit_depth": obj.get("adcBitDepth"),
            "quantum_efficiency": obj.get("quantumEfficiency"),
            "gain_curves": [V1GainCurve.from_dict(_item) for _item in obj.get("gainCurves")] if obj.get("gainCurves") is not None else None,
            "setup_actions": [V1SetupAction.from_dict(_item) for _item in obj.get("setupActions")] if obj.get("setupActions") is not None else None,
            "is_color": obj.get("isColor"),
            "video_mode_framerate_properties": [V1VideoModeFramerateProperty.from_dict(_item) for _item in obj.get("videoModeFramerateProperties")] if obj.get("videoModeFramerateProperties") is not None else None
        })
        return _obj


