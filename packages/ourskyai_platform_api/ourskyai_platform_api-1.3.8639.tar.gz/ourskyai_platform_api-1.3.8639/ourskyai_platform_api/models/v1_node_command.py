# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from ourskyai_platform_api.models.v1_disable_debug_services import V1DisableDebugServices
from ourskyai_platform_api.models.v1_enable_autonomous_operation import V1EnableAutonomousOperation
from ourskyai_platform_api.models.v1_enable_debug_services import V1EnableDebugServices
from ourskyai_platform_api.models.v1_enable_manual_operation import V1EnableManualOperation
from ourskyai_platform_api.models.v1_reboot_system import V1RebootSystem
from ourskyai_platform_api.models.v1_send_flare import V1SendFlare

class V1NodeCommand(BaseModel):
    """
    V1NodeCommand
    """
    id: StrictStr = Field(...)
    v1_enable_manual_operation: Optional[V1EnableManualOperation] = Field(None, alias="V1EnableManualOperation")
    v1_enable_autonomous_operation: Optional[V1EnableAutonomousOperation] = Field(None, alias="V1EnableAutonomousOperation")
    v1_reboot_system: Optional[V1RebootSystem] = Field(None, alias="V1RebootSystem")
    v1_send_flare: Optional[V1SendFlare] = Field(None, alias="V1SendFlare")
    v1_enable_debug_services: Optional[V1EnableDebugServices] = Field(None, alias="V1EnableDebugServices")
    v1_disable_debug_services: Optional[V1DisableDebugServices] = Field(None, alias="V1DisableDebugServices")
    executable_at: Optional[datetime] = Field(None, alias="executableAt")
    __properties = ["id", "V1EnableManualOperation", "V1EnableAutonomousOperation", "V1RebootSystem", "V1SendFlare", "V1EnableDebugServices", "V1DisableDebugServices", "executableAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1NodeCommand:
        """Create an instance of V1NodeCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of v1_enable_manual_operation
        if self.v1_enable_manual_operation:
            _dict['V1EnableManualOperation'] = self.v1_enable_manual_operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of v1_enable_autonomous_operation
        if self.v1_enable_autonomous_operation:
            _dict['V1EnableAutonomousOperation'] = self.v1_enable_autonomous_operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of v1_reboot_system
        if self.v1_reboot_system:
            _dict['V1RebootSystem'] = self.v1_reboot_system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of v1_send_flare
        if self.v1_send_flare:
            _dict['V1SendFlare'] = self.v1_send_flare.to_dict()
        # override the default output from pydantic by calling `to_dict()` of v1_enable_debug_services
        if self.v1_enable_debug_services:
            _dict['V1EnableDebugServices'] = self.v1_enable_debug_services.to_dict()
        # override the default output from pydantic by calling `to_dict()` of v1_disable_debug_services
        if self.v1_disable_debug_services:
            _dict['V1DisableDebugServices'] = self.v1_disable_debug_services.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1NodeCommand:
        """Create an instance of V1NodeCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1NodeCommand.parse_obj(obj)

        _obj = V1NodeCommand.parse_obj({
            "id": obj.get("id"),
            "v1_enable_manual_operation": V1EnableManualOperation.from_dict(obj.get("V1EnableManualOperation")) if obj.get("V1EnableManualOperation") is not None else None,
            "v1_enable_autonomous_operation": V1EnableAutonomousOperation.from_dict(obj.get("V1EnableAutonomousOperation")) if obj.get("V1EnableAutonomousOperation") is not None else None,
            "v1_reboot_system": V1RebootSystem.from_dict(obj.get("V1RebootSystem")) if obj.get("V1RebootSystem") is not None else None,
            "v1_send_flare": V1SendFlare.from_dict(obj.get("V1SendFlare")) if obj.get("V1SendFlare") is not None else None,
            "v1_enable_debug_services": V1EnableDebugServices.from_dict(obj.get("V1EnableDebugServices")) if obj.get("V1EnableDebugServices") is not None else None,
            "v1_disable_debug_services": V1DisableDebugServices.from_dict(obj.get("V1DisableDebugServices")) if obj.get("V1DisableDebugServices") is not None else None,
            "executable_at": obj.get("executableAt")
        })
        return _obj


