# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from ourskyai_platform_api.models.shutter_type import ShutterType
from ourskyai_platform_api.models.v1_setup_action import V1SetupAction
from ourskyai_platform_api.models.v1_video_mode_framerate_property import V1VideoModeFramerateProperty

class V1Camera(BaseModel):
    """
    Camera  # noqa: E501
    """
    id: StrictStr = Field(...)
    model: StrictStr = Field(...)
    pixel_size_microns: Union[StrictFloat, StrictInt] = Field(..., alias="pixelSizeMicrons")
    pixels_x: Optional[StrictInt] = Field(None, alias="pixelsX")
    pixels_y: Optional[StrictInt] = Field(None, alias="pixelsY")
    megapixels: Union[StrictFloat, StrictInt] = Field(...)
    chilled: StrictBool = Field(...)
    adc_bit_depth: StrictInt = Field(..., alias="adcBitDepth")
    gps_timestamps: Optional[StrictBool] = Field(None, alias="gpsTimestamps")
    shutter_type: ShutterType = Field(..., alias="shutterType")
    full_well_capacity: Optional[StrictInt] = Field(None, alias="fullWellCapacity")
    setup_actions: Optional[conlist(V1SetupAction)] = Field(None, alias="setupActions")
    is_color: StrictBool = Field(..., alias="isColor")
    video_mode_framerate_properties: Optional[conlist(V1VideoModeFramerateProperty)] = Field(None, alias="videoModeFramerateProperties")
    __properties = ["id", "model", "pixelSizeMicrons", "pixelsX", "pixelsY", "megapixels", "chilled", "adcBitDepth", "gpsTimestamps", "shutterType", "fullWellCapacity", "setupActions", "isColor", "videoModeFramerateProperties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Camera:
        """Create an instance of V1Camera from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in setup_actions (list)
        _items = []
        if self.setup_actions:
            for _item in self.setup_actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['setupActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in video_mode_framerate_properties (list)
        _items = []
        if self.video_mode_framerate_properties:
            for _item in self.video_mode_framerate_properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['videoModeFramerateProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Camera:
        """Create an instance of V1Camera from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Camera.parse_obj(obj)

        _obj = V1Camera.parse_obj({
            "id": obj.get("id"),
            "model": obj.get("model"),
            "pixel_size_microns": obj.get("pixelSizeMicrons"),
            "pixels_x": obj.get("pixelsX"),
            "pixels_y": obj.get("pixelsY"),
            "megapixels": obj.get("megapixels"),
            "chilled": obj.get("chilled"),
            "adc_bit_depth": obj.get("adcBitDepth"),
            "gps_timestamps": obj.get("gpsTimestamps"),
            "shutter_type": obj.get("shutterType"),
            "full_well_capacity": obj.get("fullWellCapacity"),
            "setup_actions": [V1SetupAction.from_dict(_item) for _item in obj.get("setupActions")] if obj.get("setupActions") is not None else None,
            "is_color": obj.get("isColor"),
            "video_mode_framerate_properties": [V1VideoModeFramerateProperty.from_dict(_item) for _item in obj.get("videoModeFramerateProperties")] if obj.get("videoModeFramerateProperties") is not None else None
        })
        return _obj


