# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from ourskyai_platform_api.models.metric_type import MetricType

class V1Metric(BaseModel):
    """
    V1Metric
    """
    name: StrictStr = Field(...)
    value: Union[StrictFloat, StrictInt] = Field(...)
    tags: Optional[conlist(StrictStr)] = Field(None, description="List of colon separated key value pairs, i.e. [\"tag1:value1\",\"tag2:value2\"]")
    description: Optional[StrictStr] = None
    type: MetricType = Field(...)
    measured_at: datetime = Field(..., alias="measuredAt")
    __properties = ["name", "value", "tags", "description", "type", "measuredAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Metric:
        """Create an instance of V1Metric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Metric:
        """Create an instance of V1Metric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Metric.parse_obj(obj)

        _obj = V1Metric.parse_obj({
            "name": obj.get("name"),
            "value": obj.get("value"),
            "tags": obj.get("tags"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "measured_at": obj.get("measuredAt")
        })
        return _obj


