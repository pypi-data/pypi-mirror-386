# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr
from ourskyai_platform_api.models.v1_time_windowed_asset_type import V1TimeWindowedAssetType

class V1TimeWindowedAsset(BaseModel):
    """
    V1TimeWindowedAsset  # noqa: E501
    """
    id: StrictStr = Field(...)
    description: StrictStr = Field(...)
    url: StrictStr = Field(...)
    node_id: StrictStr = Field(..., alias="nodeId")
    asset_type: V1TimeWindowedAssetType = Field(..., alias="assetType")
    asset_start_time: datetime = Field(..., alias="assetStartTime")
    asset_end_time: datetime = Field(..., alias="assetEndTime")
    created_at: datetime = Field(..., alias="createdAt")
    __properties = ["id", "description", "url", "nodeId", "assetType", "assetStartTime", "assetEndTime", "createdAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TimeWindowedAsset:
        """Create an instance of V1TimeWindowedAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TimeWindowedAsset:
        """Create an instance of V1TimeWindowedAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TimeWindowedAsset.parse_obj(obj)

        _obj = V1TimeWindowedAsset.parse_obj({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "url": obj.get("url"),
            "node_id": obj.get("nodeId"),
            "asset_type": obj.get("assetType"),
            "asset_start_time": obj.get("assetStartTime"),
            "asset_end_time": obj.get("assetEndTime"),
            "created_at": obj.get("createdAt")
        })
        return _obj


