# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from ourskyai_platform_api.models.image_set_type import ImageSetType

class V1CameraRollImage(BaseModel):
    """
    V1CameraRollImage
    """
    id: StrictStr = Field(...)
    image_set_id: StrictStr = Field(..., alias="imageSetId")
    image_type: ImageSetType = Field(..., alias="imageType")
    thumbnail_url: StrictStr = Field(..., alias="thumbnailUrl")
    full_size_jpeg_url: StrictStr = Field(..., alias="fullSizeJpegUrl")
    width: Optional[StrictInt] = None
    height: Optional[StrictInt] = None
    captured_at: datetime = Field(..., alias="capturedAt")
    __properties = ["id", "imageSetId", "imageType", "thumbnailUrl", "fullSizeJpegUrl", "width", "height", "capturedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CameraRollImage:
        """Create an instance of V1CameraRollImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CameraRollImage:
        """Create an instance of V1CameraRollImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CameraRollImage.parse_obj(obj)

        _obj = V1CameraRollImage.parse_obj({
            "id": obj.get("id"),
            "image_set_id": obj.get("imageSetId"),
            "image_type": obj.get("imageType"),
            "thumbnail_url": obj.get("thumbnailUrl"),
            "full_size_jpeg_url": obj.get("fullSizeJpegUrl"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "captured_at": obj.get("capturedAt")
        })
        return _obj


