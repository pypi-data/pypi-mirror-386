# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr
from ourskyai_platform_api.models.v1_node_component_type import V1NodeComponentType
from ourskyai_platform_api.models.v1_node_diagnostic_type import V1NodeDiagnosticType

class V1CreateNodeDiagnostic(BaseModel):
    """
    V1CreateNodeDiagnostic
    """
    component_type: V1NodeComponentType = Field(..., alias="componentType")
    component_id: StrictStr = Field(..., alias="componentId")
    diagnostic_type: V1NodeDiagnosticType = Field(..., alias="diagnosticType")
    value: StrictStr = Field(...)
    measured_at: datetime = Field(..., alias="measuredAt")
    __properties = ["componentType", "componentId", "diagnosticType", "value", "measuredAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateNodeDiagnostic:
        """Create an instance of V1CreateNodeDiagnostic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateNodeDiagnostic:
        """Create an instance of V1CreateNodeDiagnostic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateNodeDiagnostic.parse_obj(obj)

        _obj = V1CreateNodeDiagnostic.parse_obj({
            "component_type": obj.get("componentType"),
            "component_id": obj.get("componentId"),
            "diagnostic_type": obj.get("diagnosticType"),
            "value": obj.get("value"),
            "measured_at": obj.get("measuredAt")
        })
        return _obj


