# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.8639
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from ourskyai_platform_api.models.v1_instruction import V1Instruction  # noqa: E501

class TestV1Instruction(unittest.TestCase):
    """V1Instruction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1Instruction:
        """Test V1Instruction
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1Instruction`
        """
        model = V1Instruction()  # noqa: E501
        if include_optional:
            return V1Instruction(
                observation = ourskyai_platform_api.models.v1_observation_instruction.V1ObservationInstruction(
                    id = '', 
                    norad_id = '', 
                    orbit_type = 'GEOSTATIONARY', 
                    image_set_id = '', 
                    target_id = '', 
                    tracking_type = 'SIDEREAL', 
                    exposure_duration = 1.337, 
                    binning = 56, 
                    gain = 56, 
                    gain_mode = 56, 
                    gain_offset = 56, 
                    ra = 1.337, 
                    dec = 1.337, 
                    capture_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    capture_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    pre_capture_wait = 56, 
                    start_slew_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    camera_mode = 'VIDEO', 
                    tle_name = '', 
                    tle_line1 = '', 
                    tle_line2 = '', 
                    tle_offset_dec = 1.337, 
                    tle_offset_ra = 1.337, 
                    blackout_boxes = [
                        ourskyai_platform_api.models.v1_blackout_box.V1BlackoutBox(
                            ra_start_degrees = 1.337, 
                            ra_end_degrees = 1.337, 
                            dec_start_degrees = 1.337, 
                            dec_end_degrees = 1.337, )
                        ], 
                    plate_solve_parameters = ourskyai_platform_api.models.plate_solve_parameters.PlateSolveParameters(
                        exposure_duration = 1.337, 
                        tolerance_arc_min = 1.337, 
                        binning = 56, 
                        gain = 56, ), 
                    upload_priority = 'STANDARD', 
                    satellite_pass_ephemeris = [
                        ourskyai_platform_api.models.v1_observation_instruction_satellite_pass_ephemeris_inner.V1ObservationInstruction_satellitePassEphemeris_inner(
                            time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            azimuth = 1.337, 
                            elevation = 1.337, )
                        ], 
                    ascom_axis_rates = ourskyai_platform_api.models.v1_observation_instruction_ascom_axis_rates.V1ObservationInstruction_ascomAxisRates(
                        max_primary_speed = 1.337, 
                        max_secondary_speed = 1.337, 
                        primary_sign_west = 56, 
                        primary_sign_east = 56, 
                        secondary_sign_west = 56, 
                        secondary_sign_east = 56, 
                        primary_reversed = True, 
                        secondary_reversed = True, ), ),
                diagnostic = ourskyai_platform_api.models.v1_diagnostic_instruction.V1DiagnosticInstruction(
                    diagnostic_type = 'SLEW_SPEED_DEGREES_PER_SECOND', ),
                search = [
                    ourskyai_platform_api.models.v1_observation_instruction.V1ObservationInstruction(
                        id = '', 
                        norad_id = '', 
                        orbit_type = 'GEOSTATIONARY', 
                        image_set_id = '', 
                        target_id = '', 
                        tracking_type = 'SIDEREAL', 
                        exposure_duration = 1.337, 
                        binning = 56, 
                        gain = 56, 
                        gain_mode = 56, 
                        gain_offset = 56, 
                        ra = 1.337, 
                        dec = 1.337, 
                        capture_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        capture_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        pre_capture_wait = 56, 
                        start_slew_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        camera_mode = 'VIDEO', 
                        tle_name = '', 
                        tle_line1 = '', 
                        tle_line2 = '', 
                        tle_offset_dec = 1.337, 
                        tle_offset_ra = 1.337, 
                        blackout_boxes = [
                            ourskyai_platform_api.models.v1_blackout_box.V1BlackoutBox(
                                ra_start_degrees = 1.337, 
                                ra_end_degrees = 1.337, 
                                dec_start_degrees = 1.337, 
                                dec_end_degrees = 1.337, )
                            ], 
                        plate_solve_parameters = ourskyai_platform_api.models.plate_solve_parameters.PlateSolveParameters(
                            exposure_duration = 1.337, 
                            tolerance_arc_min = 1.337, 
                            binning = 56, 
                            gain = 56, ), 
                        upload_priority = 'STANDARD', 
                        satellite_pass_ephemeris = [
                            ourskyai_platform_api.models.v1_observation_instruction_satellite_pass_ephemeris_inner.V1ObservationInstruction_satellitePassEphemeris_inner(
                                time_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                azimuth = 1.337, 
                                elevation = 1.337, )
                            ], 
                        ascom_axis_rates = ourskyai_platform_api.models.v1_observation_instruction_ascom_axis_rates.V1ObservationInstruction_ascomAxisRates(
                            max_primary_speed = 1.337, 
                            max_secondary_speed = 1.337, 
                            primary_sign_west = 56, 
                            primary_sign_east = 56, 
                            secondary_sign_west = 56, 
                            secondary_sign_east = 56, 
                            primary_reversed = True, 
                            secondary_reversed = True, ), )
                    ],
                resolved = None,
                autofocus = ourskyai_platform_api.models.v1_auto_focus_instruction.V1AutoFocusInstruction(
                    id = '', 
                    coordinates = [
                        ourskyai_platform_api.models.v1_auto_focus_instruction_coordinates_inner.V1AutoFocusInstruction_coordinates_inner(
                            right_ascension = 1.337, 
                            declination = 1.337, )
                        ], )
            )
        else:
            return V1Instruction(
        )
        """

    def testV1Instruction(self):
        """Test V1Instruction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
