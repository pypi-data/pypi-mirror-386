Metadata-Version: 2.4
Name: grzctl
Version: 1.2.0
Summary: Control CLI for GRZ administrators.
Project-URL: Homepage, https://github.com/BfArM-MVH/grz-tools
Project-URL: Repository, https://github.com/BfArM-MVH/grz-tools
Project-URL: Documentation, https://github.com/BfArM-MVH/grz-tools/tree/main/packages/grzctl
Project-URL: Issues, https://github.com/BfArM-MVH/grz-tools/issues
Author-email: Koray Kirli <koraykirli@gmail.com>, Mathias Lesche <mathias.lesche@tu-dresden.de>, "Florian R. HÃ¶lzlwimmer" <git.ich@frhoelzlwimmer.de>, Till Hartmann <till.hartmann@bih-charite.de>, Thomas Sell <thomas.sell@bih-charite.de>, Travis Wrightsman <travis.wrightsman@uni-tuebingen.de>
License-Expression: MIT
Keywords: GDC,GRZ,S3
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.12
Requires-Dist: boto3<2,>=1.36
Requires-Dist: click<9,>=8.2
Requires-Dist: crypt4gh<2,>=1.7
Requires-Dist: grz-cli<2,>=1.3
Requires-Dist: grz-common<2,>=1.4.0
Requires-Dist: grz-db<2,>=1.1.0
Requires-Dist: grz-pydantic-models<3,>=2.4
Requires-Dist: jsonschema<5,>=4.23.0
Requires-Dist: platformdirs<5,>=4.3.6
Requires-Dist: pydantic-settings<2.10,>=2.9.0
Requires-Dist: pydantic<2.10,>=2.9.2
Requires-Dist: pysam==0.23.*
Requires-Dist: pyyaml<7,>=6.0.2
Requires-Dist: requests<3,>=2.32.3
Requires-Dist: rich==13.*
Requires-Dist: textual~=5.3
Requires-Dist: tqdm<5,>=4.66.5
Description-Content-Type: text/markdown

# grzctl

Command-line tool for internal GRZ operations.

## Running a development version

1. Install [`uv`](https://docs.astral.sh/uv)
  - An easy way is to create a Conda environment containing `uv`.
2. Clone the `grz-tools` repository locally
3. From the repository root, use `uv run grzctl <grzctl options here>`
  - Alternatively, you can use `uv run --project path/to/repo grzctl <grzctl options here>` to run it from any directory.
    This is useful if your config uses relative paths and `grzctl` must therefore be run from a specific directory.

## Running unit tests

First, ensure `uv` is installed (see above).

To run the grz-tools integration tests, run the following from the repository root:

```
uv run tox -e 3.12
```

Some packages have their own unit tests.
Run the same command above while inside a specific package directory to run that package's unit tests, if it has any.


## Debugging Textual

Start the remote Textual debugging console on the machine you will use to debug the Textual app.

```
uv run textual console
```

Use the `TEXTUAL=devtools` environment variable to instruct Textual to connect to the remote debug console.

``` shell
TEXTUAL=devtools uv run grzctl db --config-file config.db.yaml tui
```

