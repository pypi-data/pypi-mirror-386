// qorbitcameracontroller.sip generated by MetaSIP
//
// This file is part of the Qt3DExtras Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DExtras
{
%TypeHeaderCode
#include <qorbitcameracontroller.h>
%End

    class QOrbitCameraController : public Qt3DExtras::QAbstractCameraController
    {
%TypeHeaderCode
#include <qorbitcameracontroller.h>
%End

    public:
        explicit QOrbitCameraController(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QOrbitCameraController();
        float zoomInLimit() const;
%If (Qt3D_6_7_0 -)
        QVector3D upVector() const;
%End
%If (Qt3D_6_7_0 -)
        bool inverseXTranslate() const;
%End
%If (Qt3D_6_7_0 -)
        bool inverseYTranslate() const;
%End
%If (Qt3D_6_7_0 -)
        bool inversePan() const;
%End
%If (Qt3D_6_7_0 -)
        bool inverseTilt() const;
%End
%If (Qt3D_6_7_0 -)
        bool zoomTranslateViewCenter() const;
%End

    public slots:
        void setZoomInLimit(float zoomInLimit);
%If (Qt3D_6_7_0 -)
        void setUpVector(const QVector3D &upVector);
%End
%If (Qt3D_6_7_0 -)
        void setInverseXTranslate(bool isInverse);
%End
%If (Qt3D_6_7_0 -)
        void setInverseYTranslate(bool isInverse);
%End
%If (Qt3D_6_7_0 -)
        void setInversePan(bool isInverse);
%End
%If (Qt3D_6_7_0 -)
        void setInverseTilt(bool isInverse);
%End
%If (Qt3D_6_7_0 -)
        void setZoomTranslateViewCenter(bool isTranslate);
%End

    signals:
        void zoomInLimitChanged();
%If (Qt3D_6_7_0 -)
        void upVectorChanged(const QVector3D &upVector);
%End
%If (Qt3D_6_7_0 -)
        void inverseXTranslateChanged(bool isInverse);
%End
%If (Qt3D_6_7_0 -)
        void inverseYTranslateChanged(bool isInverse);
%End
%If (Qt3D_6_7_0 -)
        void inversePanChanged(bool isInverse);
%End
%If (Qt3D_6_7_0 -)
        void inverseTiltChanged(bool isInverse);
%End
%If (Qt3D_6_7_0 -)
        void zoomTranslateViewCenterChanged(bool isTranslate);
%End
    };
};
