// qtexture.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DRender
{
%TypeHeaderCode
#include <qtexture.h>
%End

    class QTexture1D : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTexture1D(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTexture1D();
    };

    class QTexture1DArray : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTexture1DArray(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTexture1DArray();
    };

    class QTexture2D : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTexture2D(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTexture2D();
    };

    class QTexture2DArray : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTexture2DArray(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTexture2DArray();
    };

    class QTexture3D : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTexture3D(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTexture3D();
    };

    class QTextureCubeMap : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTextureCubeMap(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTextureCubeMap();
    };

    class QTextureCubeMapArray : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTextureCubeMapArray(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTextureCubeMapArray();
    };

    class QTexture2DMultisample : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTexture2DMultisample(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTexture2DMultisample();
    };

    class QTexture2DMultisampleArray : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTexture2DMultisampleArray(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTexture2DMultisampleArray();
    };

    class QTextureRectangle : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTextureRectangle(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTextureRectangle();
    };

    class QTextureBuffer : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTextureBuffer(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTextureBuffer();
    };

    class QTextureLoader : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QTextureLoader(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTextureLoader();
        QUrl source() const;

    public slots:
        void setSource(const QUrl &source);

    signals:
        void sourceChanged(const QUrl &source);

    public:
        bool isMirrored() const;

    public slots:
        void setMirrored(bool mirrored);

    signals:
        void mirroredChanged(bool mirrored);
    };

    class QSharedGLTexture : public Qt3DRender::QAbstractTexture
    {
%TypeHeaderCode
#include <qtexture.h>
%End

    public:
        explicit QSharedGLTexture(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QSharedGLTexture();
        int textureId() const;

    public slots:
        void setTextureId(int id);

    signals:
        void textureIdChanged(int textureId);
    };
};
