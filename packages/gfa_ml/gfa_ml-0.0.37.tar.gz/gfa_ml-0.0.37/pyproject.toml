[project]
name = "gfa_ml"
version = "0.0.37"
description = "ML library for end-to-end ML pipeline"
authors = [
    {name = "Minh-Tri Nguyen (GreenFactory.AI)", email = "tri@greenfactory.ai"}
]
readme = "README.md"
requires-python = ">=3.10, <3.14"
packages = [{ include = "gfa_ml", from = "gfa_ml" }]
dependencies = [
    "pandas (>=2.3.1,<3.0.0)",
    "openpyxl (>=3.1.5,<4.0.0)",
    "pydantic (>=2.11.7,<3.0.0)",
    "pyyaml (>=6.0.2,<7.0.0)",
    "scikit-learn (>=1.7.1,<2.0.0)",
    "mlflow (>=3.2.0,<4.0.0)",
    "optuna (>=4.5.0,<5.0.0)"
]
[project.optional-dependencies]
training = [
    "torch (>=2.8.0,<3.0.0)",
    "shap (>=0.48.0,<0.49.0)",
    "notebook (>=7.4.5,<8.0.0)",
    "ipykernel (>=6.30.1,<7.0.0)",
    "matplotlib (>=3.10.5,<4.0.0)",
]
torch-cpu = ["torch>=2.8.0,<3.0.0"]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
ruff = "^0.12.7"

[tool.ruff.lint]
select = [
  "F",   # Pyflakes
  "PL",  # Pylint convention
  "E",   # Pycode styles
  "W",   # Pycode styles
  "N",   # Pep8 naming
  "I",   # Isort,
  "UP",  # Pyupgrade
  "C4",  # Flake8 compehension
  "ISC", # Flake8 implicit str concat
  "B",   # Flake8 bugbear
  "PGH", # Pygrep hook
  "RUF", # Ruff specific rules
]
ignore = [
  "E501",   # Line too long
  "RET504", # Unnecessary assignment
  "RET505", # Unnecessary else after return
  "C901",   # Too complex function
  "B904",   # raise-without-from-inside-except, enable when understand more
  "PLR",
  "ISC001",
]
[tool.ruff.lint.pylint]
max-args = 10