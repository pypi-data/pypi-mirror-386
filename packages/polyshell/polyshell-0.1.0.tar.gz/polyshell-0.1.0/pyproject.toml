[build-system]
requires = ["maturin>=1.8,<2.0"]
build-backend = "maturin"

[project]
name = "polyshell"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering"
]
authors = [
    { name = "Niall Oswald", email = "niall.oswald20@imperial.ac.uk" },
    { name = "Kenneth Martin", email = "k.martin24@imperial.ac.uk" },
    { name = "Jo Wayne Tan", email = "jo.tan17@imperial.ac.uk" },
]
description = "A high-performance coverage-preserving polygon reduction library for Python, written in Rust"
license = { text = "Apache License Version 2.0" }
dynamic = ["version"]
dependencies = []

[project.urls]
    repository = "https://github.com/ecmwf/polyshell"
    documentation = "https://ecmwf.github.io/PolyShell/"
    issues = "https://github.com/ecmwf/polyshell/issues"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "pytest-cases>=3.9.1",
    "pre-commit",
    "numpy>=2.2.6",
    "shapely>=2.0.7",
]

tests = [
    "pytest>=8.3.5",
    "pytest-cases>=3.9.1",
    "numpy>=2.2.6",
    "shapely>=2.0.7",
]

readers = [
    "numpy>=2.2.6",
    "shapely>=2.0.7",
]

cli = [
    "matplotlib>=3.10.5",
    "typer>=0.17.4",
]

[dependency-groups]
docs = [
    "mkdocs-material>=9.6.15",
    "termynal>=0.13.1",
]

[tool.maturin]
python-source = "python"
module-name = "polyshell._polyshell"
features = ["pyo3/extension-module"]

[tool.uv]
# Rebuild package when any rust files change
cache-keys = [{ file = "pyproject.toml" }, { file = "rust/Cargo.toml" }, { file = "**/*.rs" }]
# Uncomment to build rust code in development mode
# config-settings = { build-args = '--profile=dev' }


[project.scripts]
    polyshell = "polyshell._cli:app"


[tool.pytest.ini_options]
testpaths = "tests"

[tool.ruff.lint.isort]
known-first-party = [
    "polyshell",
    "benchmark",
    "cli",
]
[tool.ruff.format]
quote-style = "double"

[tool.isort]
profile = "black"  # Ensures compatibility with Black's formatting.

[tool.black]
skip-string-normalization = false
