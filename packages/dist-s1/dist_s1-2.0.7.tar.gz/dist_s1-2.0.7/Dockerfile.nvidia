FROM nvidia/cuda:11.8.0-runtime-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    wget \
    git \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

ENV MINIFORGE_VERSION=23.3.1-0
ENV MINIFORGE_HOME=/opt/miniforge
ENV PATH="$MINIFORGE_HOME/bin:$PATH"
# https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-virtual.html
ENV CONDA_OVERRIDE_CUDA=11.8

RUN wget https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-Linux-x86_64.sh -O /tmp/miniforge.sh && \
    bash /tmp/miniforge.sh -b -p $MINIFORGE_HOME && \
    rm /tmp/miniforge.sh && \
    conda init bash

SHELL ["/bin/bash", "-l", "-c"]

# Create non-root user/group with default inputs
ARG UID=1000
ARG GID=1000

RUN groupadd -g "${GID}" --system dist_user && \
    useradd -l -u "${UID}" -g "${GID}" --system -d /home/ops -m  -s /bin/bash dist_user && \
    chown -R dist_user:dist_user /opt

# Switch to non-root user
USER dist_user
WORKDIR /home/ops

COPY --chown=dist_user:dist_user . /home/ops/dist-s1/

# Create the environment with mamba
RUN mamba env create -f /home/ops/dist-s1/environment_gpu.yml && \
    conda clean -afy

# Ensure that environment is activated on startup and interactive shell
RUN echo ". /opt/miniforge/etc/profile.d/conda.sh" >> ~/.profile && \
    echo "conda activate dist-s1-env" >> ~/.profile
RUN echo ". /opt/miniforge/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate dist-s1-env" >> ~/.bashrc

# Install repository with pip
RUN python -m pip install --no-cache-dir /home/ops/dist-s1

## Allows us to provide CLI arguments to the container
## If interactively jump into the container is desired, 
## overwrite the entrypoint with --entrypoint /bin/bash ...
ENTRYPOINT ["/home/ops/dist-s1/src/dist_s1/etc/entrypoint.sh"]
CMD ["--help"]