[project]
name = "shared_memory_lock"
version = "0.1.0"
description = "A multiprocessing lock implemented using shared memory and atomics."
readme = "README.md"
requires-python = ">=3.13.7"
authors = [
    {name = "Raymond Chastain", email = "RaymondLC92@protonmail.com"}
]
license = {text = "MIT"}
keywords = ["multiprocessing", "lock", "synchronization", "atomic", "shared-memory"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware :: Symmetric Multi-processing",
]
dependencies = [
    "atomics>=1.0.3"
]

[tool.uv]
dev-dependencies = [
    "pytest-check>=2.4.1",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "mypy>=1.18.2",
]

[tool.uv.sources]
shared_memory_lock = { workspace = true }

[tool.ruff]
line-length = 144

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "C4", "UP"]

[tool.ruff.lint.isort]
known-first-party = ["shared_memory_lock"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.13.7"
packages = ["shared_memory_lock"]
strict = true