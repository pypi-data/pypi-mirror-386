# coding: utf-8

"""
    TOCTOC API ROUTER

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from toctoc_controller_router_sdk.models.summary200_response import Summary200Response

class TestSummary200Response(unittest.TestCase):
    """Summary200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Summary200Response:
        """Test Summary200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Summary200Response`
        """
        model = Summary200Response()
        if include_optional:
            return Summary200Response(
                status = 'ok',
                status_code = 200,
                message = ,
                total_docs = 2,
                limit = 10,
                page = 1,
                total_pages = 1,
                docs = [
                    toctoc_controller_router_sdk.models.response_highlight_summary_dto.ResponseHighlightSummaryDto(
                        code = '21000390063626', 
                        title = 'Agrícola en arriendo en Yerbas Buenas', 
                        description = '¡Gran oportunidad!', 
                        code_from_broker = '21000390063626', 
                        id_property = 1234456, 
                        url_publication = 'https://www.toctoc.com/propiedades/compranuevo/departamento/la-florida/titulo/1234456', 
                        finances = toctoc_controller_router_sdk.models.properties_finances.PropertiesFinances(
                            minimun_prices = 10000000, 
                            maximun_prices = 15000000, 
                            currency_type = 2, 
                            minimun_prices_uf = 1000, 
                            maximun_prices_uf = 1500, 
                            subsidy = 'DS19', ), 
                        address = toctoc_controller_router_sdk.models.properties_address.PropertiesAddress(
                            street = 'Del empresario 3122', 
                            commune = toctoc_controller_router_sdk.models.properties_commune.PropertiesCommune(
                                id_commune = 161, 
                                name = 'Las Condes', 
                                id_region = 13, 
                                name_region = 'Metropolitana', ), 
                            location = toctoc_controller_router_sdk.models.properties_address_location.PropertiesAddressLocation(
                                type = 'Point', 
                                coordinates = [-72.1023137,-36.6062508], ), 
                            id_zone = 160001, 
                            id_block = 1.337, ), 
                        distribution = toctoc_controller_router_sdk.models.properties_distribution.PropertiesDistribution(
                            minimun_bedrooms = 1, 
                            maximun_bedrooms = 2, 
                            minimun_bathrooms = 1, 
                            maximun_bathrooms = 2, 
                            amenities = [""], 
                            images = toctoc_controller_router_sdk.models.images.Images(
                                path = 'https://d1cfu8v5n1wsm.cloudfront.net/toctoc/fotos/new/2025/07/20/d695fde6a418b71968879c9ae44c79dc2aec7790/', 
                                names = ["da6bfcee990460aa48ffc7f9500670334ff47dc0.jpeg","9430ebeb3de1d4f70b351bf1da7d84af9f63731c.jpeg"], 
                                content_path = '20250720', ), 
                            multimedia = toctoc_controller_router_sdk.models.properties_multimedia.PropertiesMultimedia(
                                video = True, 
                                virtual_tour = True, 
                                url_video = 'http://video.example/123', 
                                url_virtual_tour = 'http://video.example/123', ), ), 
                        area = toctoc_controller_router_sdk.models.properties_area.PropertiesArea(
                            minimun_constructed = 90, 
                            maximun_constructed = 100, 
                            minimun_land = 200, 
                            maximun_land = 500, 
                            minimun_balcony = 5, 
                            maximun_balcony = 6, 
                            minimun_usable = 80, 
                            maximun_usable = 85, ), 
                        operation = toctoc_controller_router_sdk.models.properties_operation.PropertiesOperation(
                            operation_family = 'Arriendo', 
                            id_operation_family = 3, 
                            type_family = 'Agricola', 
                            id_type_family = 7, 
                            condition = 'used', 
                            id_condition = 2, 
                            availability = 1, 
                            order = 63, 
                            publication_date = '2025-01-15T13:00Z', 
                            modified_date = '2025-01-15T13:00Z', 
                            highlighted = True, 
                            id_property_operation = 11, 
                            property_operation = 'Venta Usado Corredor', 
                            id_property_type = 22, 
                            property_type = 'Parcela', 
                            year_construction = 2001, ), 
                        client = toctoc_controller_router_sdk.models.properties_client.PropertiesClient(
                            id = 1, 
                            name = 'Broker name', 
                            id_type = 2, 
                            description = '...', 
                            logo = 'https://d1cfu8v5n1wsm.cloudfront.net/toctoc/logos/corredora/9779/2017052651052244405.jpg', ), 
                        created_at = '2025-01-15T13:00Z', 
                        updated_at = '2025-01-15T13:00Z', )
                    ]
            )
        else:
            return Summary200Response(
                status = 'ok',
                status_code = 200,
                message = ,
        )
        """

    def testSummary200Response(self):
        """Test Summary200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
