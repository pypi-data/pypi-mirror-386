# coding: utf-8

"""
    TOCTOC API ROUTER

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from toctoc_controller_router_sdk.models.properties_address_location import PropertiesAddressLocation
from toctoc_controller_router_sdk.models.properties_commune import PropertiesCommune
from typing import Optional, Set
from typing_extensions import Self

class PropertiesAddress(BaseModel):
    """
    PropertiesAddress
    """ # noqa: E501
    street: StrictStr = Field(description="Stret of property")
    commune: PropertiesCommune
    location: PropertiesAddressLocation
    id_zone: Union[StrictFloat, StrictInt] = Field(description="Id of the zone, this id is internally used", alias="idZone")
    id_block: Union[StrictFloat, StrictInt] = Field(description="Id of the block, this id is internally used", alias="idBlock")
    __properties: ClassVar[List[str]] = ["street", "commune", "location", "idZone", "idBlock"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertiesAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of commune
        if self.commune:
            _dict['commune'] = self.commune.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertiesAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "street": obj.get("street"),
            "commune": PropertiesCommune.from_dict(obj["commune"]) if obj.get("commune") is not None else None,
            "location": PropertiesAddressLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "idZone": obj.get("idZone"),
            "idBlock": obj.get("idBlock")
        })
        return _obj


