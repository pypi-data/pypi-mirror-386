# coding: utf-8

"""
    TOCTOC API ROUTER

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class PropertiesArea(BaseModel):
    """
    PropertiesArea
    """ # noqa: E501
    minimun_constructed: Union[StrictFloat, StrictInt] = Field(description="Minimun contructed for the current property or proyect", alias="minimunConstructed")
    maximun_constructed: Union[StrictFloat, StrictInt] = Field(description="Maximun contructed for the current property or proyect", alias="maximunConstructed")
    minimun_land: Union[StrictFloat, StrictInt] = Field(description="Minimun land for the current property or proyect", alias="minimunLand")
    maximun_land: Union[StrictFloat, StrictInt] = Field(description="Maximun land for the current property or proyect", alias="maximunLand")
    minimun_balcony: Union[StrictFloat, StrictInt] = Field(description="Minimun balcony for the current property or proyect", alias="minimunBalcony")
    maximun_balcony: Union[StrictFloat, StrictInt] = Field(description="Maximun balcony for the current property or proyect", alias="maximunBalcony")
    minimun_usable: Union[StrictFloat, StrictInt] = Field(description="Minimun usable area for the current property or proyect", alias="minimunUsable")
    maximun_usable: Union[StrictFloat, StrictInt] = Field(description="Maximun usable area for the current property or proyect", alias="maximunUsable")
    __properties: ClassVar[List[str]] = ["minimunConstructed", "maximunConstructed", "minimunLand", "maximunLand", "minimunBalcony", "maximunBalcony", "minimunUsable", "maximunUsable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertiesArea from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertiesArea from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "minimunConstructed": obj.get("minimunConstructed"),
            "maximunConstructed": obj.get("maximunConstructed"),
            "minimunLand": obj.get("minimunLand"),
            "maximunLand": obj.get("maximunLand"),
            "minimunBalcony": obj.get("minimunBalcony"),
            "maximunBalcony": obj.get("maximunBalcony"),
            "minimunUsable": obj.get("minimunUsable"),
            "maximunUsable": obj.get("maximunUsable")
        })
        return _obj


