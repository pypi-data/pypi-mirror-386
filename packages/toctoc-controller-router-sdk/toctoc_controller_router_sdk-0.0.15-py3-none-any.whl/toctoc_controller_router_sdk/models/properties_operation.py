# coding: utf-8

"""
    TOCTOC API ROUTER

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class PropertiesOperation(BaseModel):
    """
    PropertiesOperation
    """ # noqa: E501
    operation_family: StrictStr = Field(description="Type of operation family for the property", alias="operationFamily")
    id_operation_family: Union[StrictFloat, StrictInt] = Field(description="Id of the operation family", alias="idOperationFamily")
    type_family: StrictStr = Field(description="Type of property for the property", alias="typeFamily")
    id_type_family: Union[StrictFloat, StrictInt] = Field(description="ID of property type", alias="idTypeFamily")
    condition: StrictStr = Field(description="Condition of the property")
    id_condition: Union[StrictFloat, StrictInt] = Field(description="Condition of the property", alias="idCondition")
    availability: Union[StrictFloat, StrictInt] = Field(description="Availability or disponibility of the property")
    order: Union[StrictFloat, StrictInt] = Field(description="Order of the property, this represent how toctoc order the priority of the property as is searched")
    publication_date: datetime = Field(description="When was published", alias="publicationDate")
    modified_date: datetime = Field(description="When was modified", alias="modifiedDate")
    highlighted: StrictBool = Field(description="If is highlighted")
    id_property_operation: Union[StrictFloat, StrictInt] = Field(description="Id of property operation", alias="idPropertyOperation")
    property_operation: StrictStr = Field(description="Property Operation for search purposes", alias="propertyOperation")
    id_property_type: Union[StrictFloat, StrictInt] = Field(description="Id property type", alias="idPropertyType")
    property_type: StrictStr = Field(description="Name of property type", alias="propertyType")
    year_construction: Union[StrictFloat, StrictInt] = Field(description="Year of contruction", alias="yearConstruction")
    __properties: ClassVar[List[str]] = ["operationFamily", "idOperationFamily", "typeFamily", "idTypeFamily", "condition", "idCondition", "availability", "order", "publicationDate", "modifiedDate", "highlighted", "idPropertyOperation", "propertyOperation", "idPropertyType", "propertyType", "yearConstruction"]

    @field_validator('id_operation_family')
    def id_operation_family_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([1, 2, 3, 4, 5, 6]):
            raise ValueError("must be one of enum values (1, 2, 3, 4, 5, 6)")
        return value

    @field_validator('id_type_family')
    def id_type_family_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]):
            raise ValueError("must be one of enum values (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)")
        return value

    @field_validator('id_condition')
    def id_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([1, 2]):
            raise ValueError("must be one of enum values (1, 2)")
        return value

    @field_validator('availability')
    def availability_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([1, 2, 3]):
            raise ValueError("must be one of enum values (1, 2, 3)")
        return value

    @field_validator('id_property_operation')
    def id_property_operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]):
            raise ValueError("must be one of enum values (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)")
        return value

    @field_validator('id_property_type')
    def id_property_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]):
            raise ValueError("must be one of enum values (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertiesOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertiesOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operationFamily": obj.get("operationFamily"),
            "idOperationFamily": obj.get("idOperationFamily"),
            "typeFamily": obj.get("typeFamily"),
            "idTypeFamily": obj.get("idTypeFamily"),
            "condition": obj.get("condition"),
            "idCondition": obj.get("idCondition"),
            "availability": obj.get("availability"),
            "order": obj.get("order"),
            "publicationDate": obj.get("publicationDate"),
            "modifiedDate": obj.get("modifiedDate"),
            "highlighted": obj.get("highlighted"),
            "idPropertyOperation": obj.get("idPropertyOperation"),
            "propertyOperation": obj.get("propertyOperation"),
            "idPropertyType": obj.get("idPropertyType"),
            "propertyType": obj.get("propertyType"),
            "yearConstruction": obj.get("yearConstruction")
        })
        return _obj


