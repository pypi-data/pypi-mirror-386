# coding: utf-8

"""
    TOCTOC API ROUTER

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from toctoc_controller_router_sdk.models.response_commune_dto import ResponseCommuneDto
from toctoc_controller_router_sdk.models.response_paginate_dto_message import ResponsePaginateDtoMessage
from typing import Optional, Set
from typing_extensions import Self

class GetCommunes200Response(BaseModel):
    """
    GetCommunes200Response
    """ # noqa: E501
    status: StrictStr
    status_code: Union[StrictFloat, StrictInt] = Field(description="Response code", alias="statusCode")
    message: ResponsePaginateDtoMessage
    total_docs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of records", alias="totalDocs")
    limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Limit of records per page")
    page: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current page")
    total_pages: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of pages", alias="totalPages")
    docs: Optional[List[ResponseCommuneDto]] = None
    __properties: ClassVar[List[str]] = ["status", "statusCode", "message", "totalDocs", "limit", "page", "totalPages", "docs"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ok', 'error']):
            raise ValueError("must be one of enum values ('ok', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCommunes200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in docs (list)
        _items = []
        if self.docs:
            for _item_docs in self.docs:
                if _item_docs:
                    _items.append(_item_docs.to_dict())
            _dict['docs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCommunes200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "statusCode": obj.get("statusCode"),
            "message": ResponsePaginateDtoMessage.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "totalDocs": obj.get("totalDocs"),
            "limit": obj.get("limit"),
            "page": obj.get("page"),
            "totalPages": obj.get("totalPages"),
            "docs": [ResponseCommuneDto.from_dict(_item) for _item in obj["docs"]] if obj.get("docs") is not None else None
        })
        return _obj


