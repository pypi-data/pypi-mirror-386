# coding: utf-8

"""
    TOCTOC API ROUTER

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from toctoc_controller_router_sdk.models.properties_address import PropertiesAddress
from toctoc_controller_router_sdk.models.properties_area import PropertiesArea
from toctoc_controller_router_sdk.models.properties_client import PropertiesClient
from toctoc_controller_router_sdk.models.properties_distribution import PropertiesDistribution
from toctoc_controller_router_sdk.models.properties_finances import PropertiesFinances
from toctoc_controller_router_sdk.models.properties_operation import PropertiesOperation
from typing import Optional, Set
from typing_extensions import Self

class ResponsePropertyDto(BaseModel):
    """
    ResponsePropertyDto
    """ # noqa: E501
    code: StrictStr = Field(description="Code from broker")
    title: StrictStr = Field(description="Title of the property")
    description: StrictStr = Field(description="Description for the property")
    code_from_broker: StrictStr = Field(description="Code from broker", alias="codeFromBroker")
    id_property: Union[StrictFloat, StrictInt] = Field(description="ID of property for TOCTOC", alias="idProperty")
    url_publication: StrictStr = Field(description="Page of property on TOCTOC", alias="urlPublication")
    finances: PropertiesFinances
    address: PropertiesAddress
    distribution: PropertiesDistribution
    area: PropertiesArea
    operation: PropertiesOperation
    client: PropertiesClient
    created_at: datetime = Field(description="When was created", alias="createdAt")
    updated_at: datetime = Field(description="When was updated", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["code", "title", "description", "codeFromBroker", "idProperty", "urlPublication", "finances", "address", "distribution", "area", "operation", "client", "createdAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponsePropertyDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of finances
        if self.finances:
            _dict['finances'] = self.finances.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of distribution
        if self.distribution:
            _dict['distribution'] = self.distribution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of area
        if self.area:
            _dict['area'] = self.area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation
        if self.operation:
            _dict['operation'] = self.operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponsePropertyDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "codeFromBroker": obj.get("codeFromBroker"),
            "idProperty": obj.get("idProperty"),
            "urlPublication": obj.get("urlPublication"),
            "finances": PropertiesFinances.from_dict(obj["finances"]) if obj.get("finances") is not None else None,
            "address": PropertiesAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "distribution": PropertiesDistribution.from_dict(obj["distribution"]) if obj.get("distribution") is not None else None,
            "area": PropertiesArea.from_dict(obj["area"]) if obj.get("area") is not None else None,
            "operation": PropertiesOperation.from_dict(obj["operation"]) if obj.get("operation") is not None else None,
            "client": PropertiesClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


