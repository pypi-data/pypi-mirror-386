# coding: utf-8

"""
    TOCTOC API ROUTER

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from toctoc_controller_router_sdk.models.images import Images
from toctoc_controller_router_sdk.models.properties_multimedia import PropertiesMultimedia
from typing import Optional, Set
from typing_extensions import Self

class PropertiesDistribution(BaseModel):
    """
    PropertiesDistribution
    """ # noqa: E501
    minimun_bedrooms: Union[StrictFloat, StrictInt] = Field(description="Minimun bedrooms for the current property or proyect", alias="minimunBedrooms")
    maximun_bedrooms: Union[StrictFloat, StrictInt] = Field(description="Maximun bedrooms for the current property or proyect", alias="maximunBedrooms")
    minimun_bathrooms: Union[StrictFloat, StrictInt] = Field(description="Minimun bathrooms for the current property or proyect", alias="minimunBathrooms")
    maximun_bathrooms: Union[StrictFloat, StrictInt] = Field(description="Maximun bathrooms for the current property or proyect", alias="maximunBathrooms")
    amenities: List[StrictStr] = Field(description="Amenities avaibable")
    images: Images
    multimedia: PropertiesMultimedia
    __properties: ClassVar[List[str]] = ["minimunBedrooms", "maximunBedrooms", "minimunBathrooms", "maximunBathrooms", "amenities", "images", "multimedia"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertiesDistribution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of images
        if self.images:
            _dict['images'] = self.images.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multimedia
        if self.multimedia:
            _dict['multimedia'] = self.multimedia.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertiesDistribution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "minimunBedrooms": obj.get("minimunBedrooms"),
            "maximunBedrooms": obj.get("maximunBedrooms"),
            "minimunBathrooms": obj.get("minimunBathrooms"),
            "maximunBathrooms": obj.get("maximunBathrooms"),
            "amenities": obj.get("amenities"),
            "images": Images.from_dict(obj["images"]) if obj.get("images") is not None else None,
            "multimedia": PropertiesMultimedia.from_dict(obj["multimedia"]) if obj.get("multimedia") is not None else None
        })
        return _obj


