# coding: utf-8

"""
    TOCTOC API ROUTER

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt
from typing import Optional, Union
from typing_extensions import Annotated
from toctoc_controller_router_sdk.models.get_communes200_response import GetCommunes200Response
from toctoc_controller_router_sdk.models.get_regions200_response import GetRegions200Response

from toctoc_controller_router_sdk.api_client import ApiClient, RequestSerialized
from toctoc_controller_router_sdk.api_response import ApiResponse
from toctoc_controller_router_sdk.rest import RESTResponseType


class EnvironmentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_communes(
        self,
        commune_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Commune id")] = None,
        region_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Region id")] = None,
        commune_id_sii: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SII commune id")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number for pagination")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of items per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCommunes200Response:
        """Get communes

         Here you can obtain the list of communes that you can use to obtain specific information on the other endpoints.       <div style=\"color:#014361; background-color:#e5f6fd; padding: 15px;font-family: Nunito;display: flex; flex-direction: column;gap: 10px\">      <div style=\"display: flex;gap: 6px;align-items: center;\">   <svg viewBox=\"0 0 16 16\" width=\"20\" height=\"20\" stroke-width=\"1\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#0288d1\">   <path d=\"M8 4.648A.581.581 0 108 5.81a.581.581 0 000-1.162z\"></path>   <circle cx=\"8\" cy=\"8\" r=\"6\" transform=\"rotate(-180 8 8)\"></circle>   <path d=\"M8 11V7\"></path> </svg>   <strong>Internal Revenue Service (SII)</strong>   </div>      <p style=\"margin: 0px;\">If you have the commune ID from the Internal Revenue Service (SII), you can use it as a filter</p>   </div>      

        :param commune_id: Commune id
        :type commune_id: float
        :param region_id: Region id
        :type region_id: float
        :param commune_id_sii: SII commune id
        :type commune_id_sii: float
        :param page: Page number for pagination
        :type page: float
        :param page_size: Number of items per page
        :type page_size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_communes_serialize(
            commune_id=commune_id,
            region_id=region_id,
            commune_id_sii=commune_id_sii,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCommunes200Response",
            '400': "ResponseBadRequestDto",
            '500': "ResponseErrorDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_communes_with_http_info(
        self,
        commune_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Commune id")] = None,
        region_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Region id")] = None,
        commune_id_sii: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SII commune id")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number for pagination")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of items per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCommunes200Response]:
        """Get communes

         Here you can obtain the list of communes that you can use to obtain specific information on the other endpoints.       <div style=\"color:#014361; background-color:#e5f6fd; padding: 15px;font-family: Nunito;display: flex; flex-direction: column;gap: 10px\">      <div style=\"display: flex;gap: 6px;align-items: center;\">   <svg viewBox=\"0 0 16 16\" width=\"20\" height=\"20\" stroke-width=\"1\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#0288d1\">   <path d=\"M8 4.648A.581.581 0 108 5.81a.581.581 0 000-1.162z\"></path>   <circle cx=\"8\" cy=\"8\" r=\"6\" transform=\"rotate(-180 8 8)\"></circle>   <path d=\"M8 11V7\"></path> </svg>   <strong>Internal Revenue Service (SII)</strong>   </div>      <p style=\"margin: 0px;\">If you have the commune ID from the Internal Revenue Service (SII), you can use it as a filter</p>   </div>      

        :param commune_id: Commune id
        :type commune_id: float
        :param region_id: Region id
        :type region_id: float
        :param commune_id_sii: SII commune id
        :type commune_id_sii: float
        :param page: Page number for pagination
        :type page: float
        :param page_size: Number of items per page
        :type page_size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_communes_serialize(
            commune_id=commune_id,
            region_id=region_id,
            commune_id_sii=commune_id_sii,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCommunes200Response",
            '400': "ResponseBadRequestDto",
            '500': "ResponseErrorDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_communes_without_preload_content(
        self,
        commune_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Commune id")] = None,
        region_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Region id")] = None,
        commune_id_sii: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="SII commune id")] = None,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Page number for pagination")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of items per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get communes

         Here you can obtain the list of communes that you can use to obtain specific information on the other endpoints.       <div style=\"color:#014361; background-color:#e5f6fd; padding: 15px;font-family: Nunito;display: flex; flex-direction: column;gap: 10px\">      <div style=\"display: flex;gap: 6px;align-items: center;\">   <svg viewBox=\"0 0 16 16\" width=\"20\" height=\"20\" stroke-width=\"1\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#0288d1\">   <path d=\"M8 4.648A.581.581 0 108 5.81a.581.581 0 000-1.162z\"></path>   <circle cx=\"8\" cy=\"8\" r=\"6\" transform=\"rotate(-180 8 8)\"></circle>   <path d=\"M8 11V7\"></path> </svg>   <strong>Internal Revenue Service (SII)</strong>   </div>      <p style=\"margin: 0px;\">If you have the commune ID from the Internal Revenue Service (SII), you can use it as a filter</p>   </div>      

        :param commune_id: Commune id
        :type commune_id: float
        :param region_id: Region id
        :type region_id: float
        :param commune_id_sii: SII commune id
        :type commune_id_sii: float
        :param page: Page number for pagination
        :type page: float
        :param page_size: Number of items per page
        :type page_size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_communes_serialize(
            commune_id=commune_id,
            region_id=region_id,
            commune_id_sii=commune_id_sii,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCommunes200Response",
            '400': "ResponseBadRequestDto",
            '500': "ResponseErrorDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_communes_serialize(
        self,
        commune_id,
        region_id,
        commune_id_sii,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if commune_id is not None:
            
            _query_params.append(('communeId', commune_id))
            
        if region_id is not None:
            
            _query_params.append(('regionId', region_id))
            
        if commune_id_sii is not None:
            
            _query_params.append(('communeIdSII', commune_id_sii))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/1.0/realstate/environment/communes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_regions(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRegions200Response:
        """Get regions

        Here you can obtain the list of regions that you can use to obtain specific information on the other endpoints.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_regions_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRegions200Response",
            '400': "ResponseBadRequestDto",
            '500': "ResponseErrorDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_regions_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRegions200Response]:
        """Get regions

        Here you can obtain the list of regions that you can use to obtain specific information on the other endpoints.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_regions_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRegions200Response",
            '400': "ResponseBadRequestDto",
            '500': "ResponseErrorDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_regions_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get regions

        Here you can obtain the list of regions that you can use to obtain specific information on the other endpoints.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_regions_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRegions200Response",
            '400': "ResponseBadRequestDto",
            '500': "ResponseErrorDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_regions_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/1.0/realstate/environment/regions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


