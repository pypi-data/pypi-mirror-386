# coding: utf-8

"""
    TOCTOC API ROUTER

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from toctoc_controller_router_sdk.models.get_properties200_response import GetProperties200Response

from toctoc_controller_router_sdk.api_client import ApiClient, RequestSerialized
from toctoc_controller_router_sdk.api_response import ApiResponse
from toctoc_controller_router_sdk.rest import RESTResponseType


class PropertiesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_properties(
        self,
        limit: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True, ge=1)], Annotated[int, Field(le=100, strict=True, ge=1)]]], Field(description="Limit")] = None,
        page_number: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Maximun Bathrooms")] = None,
        minimun_bedrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Minimun Bedrooms")] = None,
        maximun_bedrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Maximun Bedrooms")] = None,
        minimun_bathrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Minimun Bathrooms")] = None,
        maximun_bathrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Maximun Bathrooms")] = None,
        minimun_prices: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Minimun Prices")] = None,
        maximun_prices: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximun Prices")] = None,
        surface_minimun_usable: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Surface minimun usable")] = None,
        surface_maximun_usable: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Surface maximun usable")] = None,
        currency_type_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Type of currency")] = None,
        commune_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Commune ids")] = None,
        region_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Region ids")] = None,
        coordinates: Annotated[Optional[StrictStr], Field(description="Coordinates")] = None,
        property_operation_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Id of property operation")] = None,
        operation_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Operation family ids")] = None,
        family_types_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Property family types ids")] = None,
        property_types_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Property types ids")] = None,
        radio_publication_date: Annotated[Optional[Union[Annotated[float, Field(le=365, strict=True, ge=1)], Annotated[int, Field(le=365, strict=True, ge=1)]]], Field(description="Days published")] = None,
        condition_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Condition ids")] = None,
        client_ids: Annotated[Optional[List[StrictStr]], Field(description="Client ids")] = None,
        client_types_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Client types")] = None,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Ids of properties")] = None,
        codes_from_broker: Annotated[Optional[List[StrictStr]], Field(description="Codes from broker")] = None,
        hash_id: Annotated[Optional[StrictStr], Field(description="Hash id of property")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        sort_ascending: Annotated[Optional[StrictBool], Field(description="Sort ascending")] = None,
        barrio: Annotated[Optional[StrictStr], Field(description="Neighborhood of property")] = None,
        project_order: Annotated[Optional[List[StrictStr]], Field(description="Project order, comma-separated numbers (e.g., \"1,2,3\")")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetProperties200Response:
        """Get properties

               <div style=\"color:#014361; background-color:#e5f6fd; padding: 15px;font-family: Nunito;display: flex; flex-direction: column;gap: 10px\">      <div style=\"display: flex;gap: 6px;align-items: center;\">   <svg viewBox=\"0 0 16 16\" width=\"20\" height=\"20\" stroke-width=\"1\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#0288d1\">   <path d=\"M8 4.648A.581.581 0 108 5.81a.581.581 0 000-1.162z\"></path>   <circle cx=\"8\" cy=\"8\" r=\"6\" transform=\"rotate(-180 8 8)\"></circle>   <path d=\"M8 11V7\"></path> </svg>   <strong>Property Search</strong>   </div>      <p style=\"margin: 0px;\">Retrieve a list of properties based on the provided filters and search criteria.</p>   </div>              <div style=\"color:#014361; background-color:#e5f6fd; padding: 15px;font-family: Nunito;display: flex; flex-direction: column;gap: 10px\">      <div style=\"display: flex;gap: 6px;align-items: center;\">   <svg viewBox=\"0 0 16 16\" width=\"20\" height=\"20\" stroke-width=\"1\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#0288d1\">   <path d=\"M8 4.648A.581.581 0 108 5.81a.581.581 0 000-1.162z\"></path>   <circle cx=\"8\" cy=\"8\" r=\"6\" transform=\"rotate(-180 8 8)\"></circle>   <path d=\"M8 11V7\"></path> </svg>   <strong>Pagination</strong>   </div>      <p style=\"margin: 0px;\">Results are paginated and sorted by relevance. Use pagination parameters to navigate through large result sets.</p>   </div>      

        :param limit: Limit
        :type limit: float
        :param page_number: Maximun Bathrooms
        :type page_number: float
        :param minimun_bedrooms: Minimun Bedrooms
        :type minimun_bedrooms: float
        :param maximun_bedrooms: Maximun Bedrooms
        :type maximun_bedrooms: float
        :param minimun_bathrooms: Minimun Bathrooms
        :type minimun_bathrooms: float
        :param maximun_bathrooms: Maximun Bathrooms
        :type maximun_bathrooms: float
        :param minimun_prices: Minimun Prices
        :type minimun_prices: float
        :param maximun_prices: Maximun Prices
        :type maximun_prices: float
        :param surface_minimun_usable: Surface minimun usable
        :type surface_minimun_usable: float
        :param surface_maximun_usable: Surface maximun usable
        :type surface_maximun_usable: float
        :param currency_type_id: Type of currency
        :type currency_type_id: float
        :param commune_ids: Commune ids
        :type commune_ids: float
        :param region_ids: Region ids
        :type region_ids: float
        :param coordinates: Coordinates
        :type coordinates: str
        :param property_operation_ids: Id of property operation
        :type property_operation_ids: float
        :param operation_ids: Operation family ids
        :type operation_ids: float
        :param family_types_ids: Property family types ids
        :type family_types_ids: float
        :param property_types_ids: Property types ids
        :type property_types_ids: float
        :param radio_publication_date: Days published
        :type radio_publication_date: float
        :param condition_ids: Condition ids
        :type condition_ids: float
        :param client_ids: Client ids
        :type client_ids: List[str]
        :param client_types_ids: Client types
        :type client_types_ids: float
        :param ids: Ids of properties
        :type ids: List[str]
        :param codes_from_broker: Codes from broker
        :type codes_from_broker: List[str]
        :param hash_id: Hash id of property
        :type hash_id: str
        :param sort_field: Sort field
        :type sort_field: str
        :param sort_ascending: Sort ascending
        :type sort_ascending: bool
        :param barrio: Neighborhood of property
        :type barrio: str
        :param project_order: Project order, comma-separated numbers (e.g., \"1,2,3\")
        :type project_order: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_properties_serialize(
            limit=limit,
            page_number=page_number,
            minimun_bedrooms=minimun_bedrooms,
            maximun_bedrooms=maximun_bedrooms,
            minimun_bathrooms=minimun_bathrooms,
            maximun_bathrooms=maximun_bathrooms,
            minimun_prices=minimun_prices,
            maximun_prices=maximun_prices,
            surface_minimun_usable=surface_minimun_usable,
            surface_maximun_usable=surface_maximun_usable,
            currency_type_id=currency_type_id,
            commune_ids=commune_ids,
            region_ids=region_ids,
            coordinates=coordinates,
            property_operation_ids=property_operation_ids,
            operation_ids=operation_ids,
            family_types_ids=family_types_ids,
            property_types_ids=property_types_ids,
            radio_publication_date=radio_publication_date,
            condition_ids=condition_ids,
            client_ids=client_ids,
            client_types_ids=client_types_ids,
            ids=ids,
            codes_from_broker=codes_from_broker,
            hash_id=hash_id,
            sort_field=sort_field,
            sort_ascending=sort_ascending,
            barrio=barrio,
            project_order=project_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetProperties200Response",
            '400': "ResponseBadRequestDto",
            '500': "ResponseErrorDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_properties_with_http_info(
        self,
        limit: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True, ge=1)], Annotated[int, Field(le=100, strict=True, ge=1)]]], Field(description="Limit")] = None,
        page_number: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Maximun Bathrooms")] = None,
        minimun_bedrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Minimun Bedrooms")] = None,
        maximun_bedrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Maximun Bedrooms")] = None,
        minimun_bathrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Minimun Bathrooms")] = None,
        maximun_bathrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Maximun Bathrooms")] = None,
        minimun_prices: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Minimun Prices")] = None,
        maximun_prices: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximun Prices")] = None,
        surface_minimun_usable: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Surface minimun usable")] = None,
        surface_maximun_usable: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Surface maximun usable")] = None,
        currency_type_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Type of currency")] = None,
        commune_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Commune ids")] = None,
        region_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Region ids")] = None,
        coordinates: Annotated[Optional[StrictStr], Field(description="Coordinates")] = None,
        property_operation_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Id of property operation")] = None,
        operation_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Operation family ids")] = None,
        family_types_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Property family types ids")] = None,
        property_types_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Property types ids")] = None,
        radio_publication_date: Annotated[Optional[Union[Annotated[float, Field(le=365, strict=True, ge=1)], Annotated[int, Field(le=365, strict=True, ge=1)]]], Field(description="Days published")] = None,
        condition_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Condition ids")] = None,
        client_ids: Annotated[Optional[List[StrictStr]], Field(description="Client ids")] = None,
        client_types_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Client types")] = None,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Ids of properties")] = None,
        codes_from_broker: Annotated[Optional[List[StrictStr]], Field(description="Codes from broker")] = None,
        hash_id: Annotated[Optional[StrictStr], Field(description="Hash id of property")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        sort_ascending: Annotated[Optional[StrictBool], Field(description="Sort ascending")] = None,
        barrio: Annotated[Optional[StrictStr], Field(description="Neighborhood of property")] = None,
        project_order: Annotated[Optional[List[StrictStr]], Field(description="Project order, comma-separated numbers (e.g., \"1,2,3\")")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetProperties200Response]:
        """Get properties

               <div style=\"color:#014361; background-color:#e5f6fd; padding: 15px;font-family: Nunito;display: flex; flex-direction: column;gap: 10px\">      <div style=\"display: flex;gap: 6px;align-items: center;\">   <svg viewBox=\"0 0 16 16\" width=\"20\" height=\"20\" stroke-width=\"1\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#0288d1\">   <path d=\"M8 4.648A.581.581 0 108 5.81a.581.581 0 000-1.162z\"></path>   <circle cx=\"8\" cy=\"8\" r=\"6\" transform=\"rotate(-180 8 8)\"></circle>   <path d=\"M8 11V7\"></path> </svg>   <strong>Property Search</strong>   </div>      <p style=\"margin: 0px;\">Retrieve a list of properties based on the provided filters and search criteria.</p>   </div>              <div style=\"color:#014361; background-color:#e5f6fd; padding: 15px;font-family: Nunito;display: flex; flex-direction: column;gap: 10px\">      <div style=\"display: flex;gap: 6px;align-items: center;\">   <svg viewBox=\"0 0 16 16\" width=\"20\" height=\"20\" stroke-width=\"1\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#0288d1\">   <path d=\"M8 4.648A.581.581 0 108 5.81a.581.581 0 000-1.162z\"></path>   <circle cx=\"8\" cy=\"8\" r=\"6\" transform=\"rotate(-180 8 8)\"></circle>   <path d=\"M8 11V7\"></path> </svg>   <strong>Pagination</strong>   </div>      <p style=\"margin: 0px;\">Results are paginated and sorted by relevance. Use pagination parameters to navigate through large result sets.</p>   </div>      

        :param limit: Limit
        :type limit: float
        :param page_number: Maximun Bathrooms
        :type page_number: float
        :param minimun_bedrooms: Minimun Bedrooms
        :type minimun_bedrooms: float
        :param maximun_bedrooms: Maximun Bedrooms
        :type maximun_bedrooms: float
        :param minimun_bathrooms: Minimun Bathrooms
        :type minimun_bathrooms: float
        :param maximun_bathrooms: Maximun Bathrooms
        :type maximun_bathrooms: float
        :param minimun_prices: Minimun Prices
        :type minimun_prices: float
        :param maximun_prices: Maximun Prices
        :type maximun_prices: float
        :param surface_minimun_usable: Surface minimun usable
        :type surface_minimun_usable: float
        :param surface_maximun_usable: Surface maximun usable
        :type surface_maximun_usable: float
        :param currency_type_id: Type of currency
        :type currency_type_id: float
        :param commune_ids: Commune ids
        :type commune_ids: float
        :param region_ids: Region ids
        :type region_ids: float
        :param coordinates: Coordinates
        :type coordinates: str
        :param property_operation_ids: Id of property operation
        :type property_operation_ids: float
        :param operation_ids: Operation family ids
        :type operation_ids: float
        :param family_types_ids: Property family types ids
        :type family_types_ids: float
        :param property_types_ids: Property types ids
        :type property_types_ids: float
        :param radio_publication_date: Days published
        :type radio_publication_date: float
        :param condition_ids: Condition ids
        :type condition_ids: float
        :param client_ids: Client ids
        :type client_ids: List[str]
        :param client_types_ids: Client types
        :type client_types_ids: float
        :param ids: Ids of properties
        :type ids: List[str]
        :param codes_from_broker: Codes from broker
        :type codes_from_broker: List[str]
        :param hash_id: Hash id of property
        :type hash_id: str
        :param sort_field: Sort field
        :type sort_field: str
        :param sort_ascending: Sort ascending
        :type sort_ascending: bool
        :param barrio: Neighborhood of property
        :type barrio: str
        :param project_order: Project order, comma-separated numbers (e.g., \"1,2,3\")
        :type project_order: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_properties_serialize(
            limit=limit,
            page_number=page_number,
            minimun_bedrooms=minimun_bedrooms,
            maximun_bedrooms=maximun_bedrooms,
            minimun_bathrooms=minimun_bathrooms,
            maximun_bathrooms=maximun_bathrooms,
            minimun_prices=minimun_prices,
            maximun_prices=maximun_prices,
            surface_minimun_usable=surface_minimun_usable,
            surface_maximun_usable=surface_maximun_usable,
            currency_type_id=currency_type_id,
            commune_ids=commune_ids,
            region_ids=region_ids,
            coordinates=coordinates,
            property_operation_ids=property_operation_ids,
            operation_ids=operation_ids,
            family_types_ids=family_types_ids,
            property_types_ids=property_types_ids,
            radio_publication_date=radio_publication_date,
            condition_ids=condition_ids,
            client_ids=client_ids,
            client_types_ids=client_types_ids,
            ids=ids,
            codes_from_broker=codes_from_broker,
            hash_id=hash_id,
            sort_field=sort_field,
            sort_ascending=sort_ascending,
            barrio=barrio,
            project_order=project_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetProperties200Response",
            '400': "ResponseBadRequestDto",
            '500': "ResponseErrorDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_properties_without_preload_content(
        self,
        limit: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True, ge=1)], Annotated[int, Field(le=100, strict=True, ge=1)]]], Field(description="Limit")] = None,
        page_number: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Maximun Bathrooms")] = None,
        minimun_bedrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Minimun Bedrooms")] = None,
        maximun_bedrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Maximun Bedrooms")] = None,
        minimun_bathrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Minimun Bathrooms")] = None,
        maximun_bathrooms: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Maximun Bathrooms")] = None,
        minimun_prices: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="Minimun Prices")] = None,
        maximun_prices: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximun Prices")] = None,
        surface_minimun_usable: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Surface minimun usable")] = None,
        surface_maximun_usable: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Surface maximun usable")] = None,
        currency_type_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Type of currency")] = None,
        commune_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Commune ids")] = None,
        region_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Region ids")] = None,
        coordinates: Annotated[Optional[StrictStr], Field(description="Coordinates")] = None,
        property_operation_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Id of property operation")] = None,
        operation_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Operation family ids")] = None,
        family_types_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Property family types ids")] = None,
        property_types_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Property types ids")] = None,
        radio_publication_date: Annotated[Optional[Union[Annotated[float, Field(le=365, strict=True, ge=1)], Annotated[int, Field(le=365, strict=True, ge=1)]]], Field(description="Days published")] = None,
        condition_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Condition ids")] = None,
        client_ids: Annotated[Optional[List[StrictStr]], Field(description="Client ids")] = None,
        client_types_ids: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Client types")] = None,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Ids of properties")] = None,
        codes_from_broker: Annotated[Optional[List[StrictStr]], Field(description="Codes from broker")] = None,
        hash_id: Annotated[Optional[StrictStr], Field(description="Hash id of property")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        sort_ascending: Annotated[Optional[StrictBool], Field(description="Sort ascending")] = None,
        barrio: Annotated[Optional[StrictStr], Field(description="Neighborhood of property")] = None,
        project_order: Annotated[Optional[List[StrictStr]], Field(description="Project order, comma-separated numbers (e.g., \"1,2,3\")")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get properties

               <div style=\"color:#014361; background-color:#e5f6fd; padding: 15px;font-family: Nunito;display: flex; flex-direction: column;gap: 10px\">      <div style=\"display: flex;gap: 6px;align-items: center;\">   <svg viewBox=\"0 0 16 16\" width=\"20\" height=\"20\" stroke-width=\"1\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#0288d1\">   <path d=\"M8 4.648A.581.581 0 108 5.81a.581.581 0 000-1.162z\"></path>   <circle cx=\"8\" cy=\"8\" r=\"6\" transform=\"rotate(-180 8 8)\"></circle>   <path d=\"M8 11V7\"></path> </svg>   <strong>Property Search</strong>   </div>      <p style=\"margin: 0px;\">Retrieve a list of properties based on the provided filters and search criteria.</p>   </div>              <div style=\"color:#014361; background-color:#e5f6fd; padding: 15px;font-family: Nunito;display: flex; flex-direction: column;gap: 10px\">      <div style=\"display: flex;gap: 6px;align-items: center;\">   <svg viewBox=\"0 0 16 16\" width=\"20\" height=\"20\" stroke-width=\"1\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#0288d1\">   <path d=\"M8 4.648A.581.581 0 108 5.81a.581.581 0 000-1.162z\"></path>   <circle cx=\"8\" cy=\"8\" r=\"6\" transform=\"rotate(-180 8 8)\"></circle>   <path d=\"M8 11V7\"></path> </svg>   <strong>Pagination</strong>   </div>      <p style=\"margin: 0px;\">Results are paginated and sorted by relevance. Use pagination parameters to navigate through large result sets.</p>   </div>      

        :param limit: Limit
        :type limit: float
        :param page_number: Maximun Bathrooms
        :type page_number: float
        :param minimun_bedrooms: Minimun Bedrooms
        :type minimun_bedrooms: float
        :param maximun_bedrooms: Maximun Bedrooms
        :type maximun_bedrooms: float
        :param minimun_bathrooms: Minimun Bathrooms
        :type minimun_bathrooms: float
        :param maximun_bathrooms: Maximun Bathrooms
        :type maximun_bathrooms: float
        :param minimun_prices: Minimun Prices
        :type minimun_prices: float
        :param maximun_prices: Maximun Prices
        :type maximun_prices: float
        :param surface_minimun_usable: Surface minimun usable
        :type surface_minimun_usable: float
        :param surface_maximun_usable: Surface maximun usable
        :type surface_maximun_usable: float
        :param currency_type_id: Type of currency
        :type currency_type_id: float
        :param commune_ids: Commune ids
        :type commune_ids: float
        :param region_ids: Region ids
        :type region_ids: float
        :param coordinates: Coordinates
        :type coordinates: str
        :param property_operation_ids: Id of property operation
        :type property_operation_ids: float
        :param operation_ids: Operation family ids
        :type operation_ids: float
        :param family_types_ids: Property family types ids
        :type family_types_ids: float
        :param property_types_ids: Property types ids
        :type property_types_ids: float
        :param radio_publication_date: Days published
        :type radio_publication_date: float
        :param condition_ids: Condition ids
        :type condition_ids: float
        :param client_ids: Client ids
        :type client_ids: List[str]
        :param client_types_ids: Client types
        :type client_types_ids: float
        :param ids: Ids of properties
        :type ids: List[str]
        :param codes_from_broker: Codes from broker
        :type codes_from_broker: List[str]
        :param hash_id: Hash id of property
        :type hash_id: str
        :param sort_field: Sort field
        :type sort_field: str
        :param sort_ascending: Sort ascending
        :type sort_ascending: bool
        :param barrio: Neighborhood of property
        :type barrio: str
        :param project_order: Project order, comma-separated numbers (e.g., \"1,2,3\")
        :type project_order: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_properties_serialize(
            limit=limit,
            page_number=page_number,
            minimun_bedrooms=minimun_bedrooms,
            maximun_bedrooms=maximun_bedrooms,
            minimun_bathrooms=minimun_bathrooms,
            maximun_bathrooms=maximun_bathrooms,
            minimun_prices=minimun_prices,
            maximun_prices=maximun_prices,
            surface_minimun_usable=surface_minimun_usable,
            surface_maximun_usable=surface_maximun_usable,
            currency_type_id=currency_type_id,
            commune_ids=commune_ids,
            region_ids=region_ids,
            coordinates=coordinates,
            property_operation_ids=property_operation_ids,
            operation_ids=operation_ids,
            family_types_ids=family_types_ids,
            property_types_ids=property_types_ids,
            radio_publication_date=radio_publication_date,
            condition_ids=condition_ids,
            client_ids=client_ids,
            client_types_ids=client_types_ids,
            ids=ids,
            codes_from_broker=codes_from_broker,
            hash_id=hash_id,
            sort_field=sort_field,
            sort_ascending=sort_ascending,
            barrio=barrio,
            project_order=project_order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetProperties200Response",
            '400': "ResponseBadRequestDto",
            '500': "ResponseErrorDto",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_properties_serialize(
        self,
        limit,
        page_number,
        minimun_bedrooms,
        maximun_bedrooms,
        minimun_bathrooms,
        maximun_bathrooms,
        minimun_prices,
        maximun_prices,
        surface_minimun_usable,
        surface_maximun_usable,
        currency_type_id,
        commune_ids,
        region_ids,
        coordinates,
        property_operation_ids,
        operation_ids,
        family_types_ids,
        property_types_ids,
        radio_publication_date,
        condition_ids,
        client_ids,
        client_types_ids,
        ids,
        codes_from_broker,
        hash_id,
        sort_field,
        sort_ascending,
        barrio,
        project_order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'clientIds': 'multi',
            'ids': 'multi',
            'codesFromBroker': 'multi',
            'projectOrder': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if minimun_bedrooms is not None:
            
            _query_params.append(('minimunBedrooms', minimun_bedrooms))
            
        if maximun_bedrooms is not None:
            
            _query_params.append(('maximunBedrooms', maximun_bedrooms))
            
        if minimun_bathrooms is not None:
            
            _query_params.append(('minimunBathrooms', minimun_bathrooms))
            
        if maximun_bathrooms is not None:
            
            _query_params.append(('maximunBathrooms', maximun_bathrooms))
            
        if minimun_prices is not None:
            
            _query_params.append(('minimunPrices', minimun_prices))
            
        if maximun_prices is not None:
            
            _query_params.append(('maximunPrices', maximun_prices))
            
        if surface_minimun_usable is not None:
            
            _query_params.append(('surfaceMinimunUsable', surface_minimun_usable))
            
        if surface_maximun_usable is not None:
            
            _query_params.append(('surfaceMaximunUsable', surface_maximun_usable))
            
        if currency_type_id is not None:
            
            _query_params.append(('currencyTypeId', currency_type_id))
            
        if commune_ids is not None:
            
            _query_params.append(('communeIds', commune_ids))
            
        if region_ids is not None:
            
            _query_params.append(('regionIds', region_ids))
            
        if coordinates is not None:
            
            _query_params.append(('coordinates', coordinates))
            
        if property_operation_ids is not None:
            
            _query_params.append(('propertyOperationIds', property_operation_ids))
            
        if operation_ids is not None:
            
            _query_params.append(('operationIds', operation_ids))
            
        if family_types_ids is not None:
            
            _query_params.append(('familyTypesIds', family_types_ids))
            
        if property_types_ids is not None:
            
            _query_params.append(('propertyTypesIds', property_types_ids))
            
        if radio_publication_date is not None:
            
            _query_params.append(('radioPublicationDate', radio_publication_date))
            
        if condition_ids is not None:
            
            _query_params.append(('conditionIds', condition_ids))
            
        if client_ids is not None:
            
            _query_params.append(('clientIds', client_ids))
            
        if client_types_ids is not None:
            
            _query_params.append(('clientTypesIds', client_types_ids))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if codes_from_broker is not None:
            
            _query_params.append(('codesFromBroker', codes_from_broker))
            
        if hash_id is not None:
            
            _query_params.append(('hashId', hash_id))
            
        if sort_field is not None:
            
            _query_params.append(('sortField', sort_field))
            
        if sort_ascending is not None:
            
            _query_params.append(('sortAscending', sort_ascending))
            
        if barrio is not None:
            
            _query_params.append(('barrio', barrio))
            
        if project_order is not None:
            
            _query_params.append(('projectOrder', project_order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/1.0/properties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


