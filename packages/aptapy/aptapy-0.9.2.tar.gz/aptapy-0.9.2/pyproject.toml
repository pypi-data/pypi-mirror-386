# See the Python packaging user guide for the ultimate reference
# https://packaging.python.org/en/latest/specifications/pyproject-toml/

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "aptapy"
dynamic = ["version"]
description = "Statistical tools for online monitoring and analysis"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
]
authors = [
  { name = "Luca Baldini", email = "luca.baldini@unipi.it" }
  ]
dependencies = [
    "cycler",
    "loguru",
    "matplotlib",
    "numpy",
    "scipy",
    "uncertainties",
  ]

[project.optional-dependencies]
dev = [
    "packaging",
    "pytest",
    "ruff",
    "pylint",
  ]
docs = [
    "sphinx",
    "sphinxawesome-theme",
    "sphinx-gallery",
  ]

[project.urls]
Homepage = "https://github.com/lucabaldini/aptapy"
Issues = "https://github.com/lucabaldini/aptapy/issues"

[tool.hatch.version]
path = "src/aptapy/_version.py"

# ruff configuration, see https://docs.astral.sh/ruff/configuration/
# Note we target the oldest Python version that we support, which helps
# in avoiding features that are only available in newer versions.
[tool.ruff]
target-version = "py37"
line-length = 100
src = ["src"]
exclude = ["docs"]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort (imports)
  "B",   # flake8-bugbear
  "UP",  # pyupgrade (kept safe for py37)
  "SIM", # flake8-simplify
  "C4",  # flake8-comprehensions
  "NPY", # NumPy-specific best practices
  "PERF" # performance gotchas
  ]
ignore = [
  "C408" # I sometimes like dict() calls better than literal dicts
  ]

# pylint is fairly noisy by default, and you might want to disable some rules.
[tool.pylint.'MESSAGES CONTROL']
disable = [
  "missing-docstring",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-positional-arguments",
  "too-many-instance-attributes",
  "too-many-locals",
  "too-many-lines",
  "use-dict-literal",
  ]
[tool.pylint.TYPECHECK]
# Treat this module as “special”; skip strict import/member checks there.
ignored-modules = ["scipy.special"]
[tool.pylint.'BASIC']
good-names = ["i", "j", "k", "x", "y", "z"]
[tool.pylint.'FORMAT']
max-line-length = 100