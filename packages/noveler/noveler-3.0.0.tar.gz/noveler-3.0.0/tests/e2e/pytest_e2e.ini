# E2Eテスト専用pytest設定
# 使用方法: pytest -c tests/e2e/pytest_e2e.ini

[pytest]
testpaths = tests/e2e
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# E2E専用キャッシュディレクトリ
cache_dir = "temp/cache/pytest_e2e"

# E2E実行に最適化されたオプション
addopts =
    --strict-markers
    --strict-config
    --tb=long
    --durations=20
    --maxfail=3
    -v
    --capture=no
    --showlocals

# E2E専用マーカー
markers =
    e2e: E2E（エンドツーエンド）テスト
    workflow: ワークフロー統合テスト
    quality: 品質保証ワークフローテスト
    performance: パフォーマンステスト
    slow: 時間のかかるテスト（通常は選択実行）
    critical: 重要なワークフロー（必須実行）
    integration: システム統合テスト
    regression: 回帰テスト
    smoke: スモークテスト（基本機能確認）
    stress: ストレステスト（負荷テスト）
    spec: 仕様参照（例: SPEC-XXXX）
    scenario: シナリオ/BDD系の統合テスト

; テストタイムアウト設定（pytest-timeoutプラグイン使用時にCLIで指定）
; timeout = 300  # 5分でタイムアウト

# 出力設定
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# ディレクトリ除外
norecursedirs =
    backup
    temp
    .git
    __pycache__
    .pytest_cache
    .benchmarks
    node_modules

# フィルター設定
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:.*yaml.*

# JUnit XML出力（CI/CD統合用）
junit_family = "xunit2"
# junit_logging = "all"

# HTML レポート設定（pytest-htmlが利用可能な場合）
# html_report = "temp/reports/e2e_report.html"
# self_contained_html = true

# カバレッジ設定（E2Eでは通常無効）
# E2Eテストでのカバレッジは実行時間とリソースを大量消費するため
# 必要に応じて個別に有効化する
# cov = "scripts"
# cov-report = ["term-missing", "html:temp/coverage/e2e_htmlcov"]
# cov-fail-under = 60  # E2Eは低めの閾値
