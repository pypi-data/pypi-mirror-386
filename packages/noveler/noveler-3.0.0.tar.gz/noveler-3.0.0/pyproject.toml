[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# editable installサポート設定は下部の[tool.setuptools.packages.find]に統合

[project]
name = "noveler"
version = "3.0.0"
description = "小説執筆支援システム for なろう系Web小説"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Novel Writing Support Team"}
]
keywords = ["novel", "writing", "narou", "web-novel", "japanese"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Text Processing :: Markup",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# メイン依存関係（requirements.txtから統合）
dependencies = [
    # 必須パッケージ
    "PyYAML>=6.0",
    "rich>=13.0.0",  # MCPサーバーでの美しい出力表示に使用
    "requests>=2.28.0",
    "janome>=0.4.2",
    "deal>=4.24.0",  # Design by Contract support

    # MCP統合（Claude Code対応）
    "mcp>=1.13.0",  # Claude Code MCP統合サーバー

    # オプションパッケージ（推奨）
    "jinja2>=3.1.0",  # テンプレート処理で使用

    # プロセス管理（ビルドシステム）
    "psutil>=5.9.0",  # ビルド時既存プロセス停止対応

    # YAML整形・検証
    "ruamel.yaml>=0.18.0",
    "yamllint>=1.33.0",
    "numpy>=1.26.0",  # ログ分析ユーティリティ（LogAnalyzer）で使用
]

# システム要件（外部ツール）
# 注意: 以下は手動インストールが必要です
# - GNU parallel: 並列処理による高速品質チェック（推奨）
#   Ubuntu/Debian: sudo apt install parallel
#   macOS: brew install parallel
#   Windows WSL: sudo apt install parallel

# 開発依存関係（requirements-dev.txtから統合）
[project.optional-dependencies]
dev = [
    # テスト関連
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-xdist>=3.5.0",
    "langgraph>=0.6.7",
    "hypothesis>=6.100.0",

    # アーキテクチャ検証ツール
    "import-linter>=2.0",
    "pytest-archon>=0.0.5",

    # 品質管理ツール
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",

    # 型ヒント用スタブ
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-xdist>=3.5.0",
    "langgraph>=0.6.7",
    "pytest-timeout>=2.2.0",
    "hypothesis>=6.100.0",
]

lint = [
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
]

# パッケージディスカバリ設定 - hatchling用
[tool.hatch.build.targets.wheel]
packages = ["src/noveler"]

# Typer CLI削除により、MCPサーバー専用アーキテクチャに移行
# 詳細: MCPサーバーが17個の専門ツールで完全な機能セットを提供
# [project.scripts]
# novel = "noveler.presentation.cli.novel_cli:main"  # 削除済み: MCPサーバーで代替
# noveler = "noveler.presentation.cli.novel_cli:main"  # 削除済み: MCPサーバーで代替

[project.urls]
Homepage = "https://github.com/novel-writing-support/novel-system"
Documentation = "https://novel-writing-support.readthedocs.io/"
Repository = "https://github.com/novel-writing-support/novel-system.git"
Issues = "https://github.com/novel-writing-support/novel-system/issues"

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# 追加の厳格な設定
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
warn_incomplete_stub = true
namespace_packages = true
# キャッシュディレクトリをtempに移動
cache_dir = "temp/cache/mypy"

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "scripts.utils.*"
ignore_errors = true  # レガシーコードは段階的に対応

[[tool.mypy.overrides]]
module = "backup.*"
ignore_errors = true  # バックアップファイルは除外

[tool.ruff]
target-version = "py310"
line-length = 120
cache-dir = "temp/cache/ruff"
# プロダクションコードのみ対象とする
src = ["src", "tests"]
exclude = [
    "backup*",
    "backups*",
    "archive*",
    "temp*",
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".tox",
    "dist",
    "build",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # Ruff-specific rules
    "PIE", # flake8-pie
    "N",   # pep8-naming
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S",   # flake8-bandit (security)
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "C90", # mccabe complexity
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ERA", # eradicate (commented-out code)
    "EXE", # flake8-executable
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "PERF", # perflint
    "D",   # pydocstyle (docstring checks)
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "COM812", # trailing comma (conflicts with formatter)
    "S101",   # use of assert (OK in tests)
    "PLR0913", # too many arguments (sometimes necessary)
    "T201",   # print found (OK for CLI tools)
    "ERA001", # commented-out code (OK for explanatory comments)
    "N806",   # non-lowercase variable in function (OK for constants)
    "SIM102", # nested if statements (sometimes clearer)
    "UP017",  # Python 3.10: datetime.UTC not available
    "TRY300", # Consider moving to else block (often less readable)
    "TRY301", # Abstract raise to inner function (often less readable)
    "PERF203", # try-except in loop (sometimes necessary)
    "S311",   # pseudo-random generators (OK for non-crypto use)
    "S603",   # subprocess call (OK with trusted input)
    "S607",   # partial executable path (OK in controlled environment)
    "S112",   # try-except-continue (OK with proper logging)
    "BLE001", # blind except (OK with proper handling)
    "E402",   # module level import not at top (OK for conditional imports)
    "ANN201", # missing return type annotation (gradual typing)
    "D102",   # missing docstring in public method (gradual documentation)
    "TC001",  # move into type-checking block (performance vs readability tradeoff)
    "PTH108", # os.unlink vs Path.unlink (compatibility)
    # 日本語プロジェクト用の除外設定
    "RUF001", # ambiguous unicode character in string (日本語文字列)
    "RUF002", # ambiguous unicode character in docstring (日本語ドキュメント)
    "RUF003", # ambiguous unicode character in comment (日本語コメント)
    "PLC2401", # non-ascii name (日本語変数名)
    "PLR2004", # magic value comparison (固定値比較は頻繁に使用)
    # Docstring rules to ignore (practical approach)
    "D105",   # missing docstring in magic method
    "D107",   # missing docstring in __init__
    "D200",   # one-line docstring should fit on one line (formatter handles)
    "D202",   # no blank lines allowed after function docstring (formatter handles)
    "D204",   # 1 blank line required after class docstring (formatter handles)
    "D205",   # 1 blank line required between summary and description
    "D212",   # multi-line docstring summary should start at the first line
    "D400",   # first line should end with a period (too strict for Japanese)
    "D401",   # first line should be in imperative mood (English-centric)
    "D403",   # first word of first line should be capitalized (English-centric)
    "D413",   # missing blank line after last section
    "D415",   # first line should end with punctuation (too strict for Japanese)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"  # Google docstring style

[tool.ruff.lint.per-file-ignores]
# テストファイルはdocstring不要、関数内インポート許可
"scripts/tests/**/*.py" = ["D100", "D101", "D102", "D103", "D104", "PLC0415", "ANN", "TRY", "PLC", "G004"]
"tests/**/*.py" = ["D100", "D101", "D102", "D103", "D104", "PLC0415", "ANN", "TRY", "PLC", "G004"]
# __init__.pyもdocstring不要
"**/__init__.py" = ["D104"]
# 開発ツールは関数内インポート許可
"scripts/**/*.py" = ["ANN", "TRY", "PLC", "G004"]
"scripts/tools/**/*.py" = ["PLC0415", "ANN", "TRY", "PLC", "G004"]
# DIコンテナやファクトリーパターンでは関数内インポート許可
"scripts/infrastructure/di/**/*.py" = ["PLC0415"]
"scripts/**/factory*.py" = ["PLC0415"]
"scripts/**/adapter*.py" = ["PLC0415"]
# DDD準拠の遅延初期化パターンを保護
"src/noveler/application/use_cases/**/*.py" = ["PLC0415"]
"src/noveler/application/services/**/*service*.py" = ["PLC0415"]
"src/noveler/domain/services/**/*service*.py" = ["PLC0415"]
"src/noveler/infrastructure/adapters/**/*adapter*.py" = ["PLC0415"]
"src/noveler/infrastructure/factories/**/*factory*.py" = ["PLC0415"]
# MCPサーバー関連の遅延初期化パターン保護
"src/mcp_servers/**/*.py" = ["PLC0415"]
"src/noveler/tools/**/*.py" = ["ANN", "TRY", "PLC", "G004"]
"src/noveler/infrastructure/logging/**/*.py" = ["ANN", "TRY", "PLC", "G004"]


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# PYTHONPATH設定（src/ディレクトリを追加）
pythonpath = ["src"]
cache_dir = "temp/cache/pytest"
norecursedirs = [
    "backup",
    "backups",
    "archive",
    "archive/backups",
    "temp",
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".benchmarks",
]
# asyncio サポート設定（async def テスト関数の自動認識）
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",  # より簡潔なトレースバック
    "--durations=10",  # 最も遅い10テストを表示
    # 並列実行を一時的に無効化（ハング問題解決）
    # "-n",
    # "auto",
    # "--dist=loadscope",  # 並列実行（pytest-xdist）
    # 統合サービス対応中により一時的にスキップ
    "-m", "not integration_skip and not performance",
    # タイムアウト設定（pytest-timeout統合）
    "--timeout=120",  # デフォルト2分でタイムアウト（パフォーマンステスト除外により短縮）
    "--timeout-method=thread",  # threadベースタイムアウト（Windows互換）
    # カバレッジはCI環境でのみ実行
    # "--cov=scripts",
    # "--cov-branch",
    # "--cov-report=term-missing",
    # "--cov-fail-under=80",
    # pytest警告の無視
    "--disable-warnings",
]
filterwarnings = [
    "ignore::pytest.PytestCollectionWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests (deselect with '-m \"not performance\"')",
    "spec: marks tests with specification references",
    "critical: marks tests as critical",
    "workflow: marks tests as workflow tests",
    "smoke: marks tests as smoke tests",
    "stress: marks tests as stress tests",
    "regression: marks tests as regression tests",
    "quality: marks tests as quality tests",
    "scenario: marks tests as behavior-driven development scenarios",
    "bdd: marks tests as behavior-driven development tests",
    "hash_management: marks tests for hash management features",
    "mcp_tools: marks tests for MCP tool integrations",
    "mcp_integration: marks tests for MCP integration testing",
    "integration_future: marks tests for future integration features",
    "benchmark: marks tests as performance benchmarks",
    "contract: marks contract compliance tests",
    "contracts: backwards-compatible alias for contract tests",
    "project: marks project-domain focused tests",
    "a31_evaluation: marks A31 evaluation domain tests",
    "error_messages: marks error message behaviour tests",
    "infrastructure_services: marks infrastructure service layer tests",
    "plot_episode: marks episode-plot specific scenarios",
    "quality_domain: marks tests covering quality-domain logic",
    "architecture: marks architecture contract tests",
    "requirement: marks requirement-level regression checks",
    "vo_smoke: marks smoke tests for value objects",
    "timeout: marks timeout-behaviour tests",
]

# タイムアウト統一基準（pytest-timeout）
# unit: 10秒, integration: 30秒, e2e: 120秒（2分）, performance: 180秒（3分）
# pytest-timeoutプラグイン経由で制御（コマンドライン引数 --timeout=300）

[tool.coverage.run]
branch = true
source = ["src/noveler"]
data_file = "temp/coverage/.coverage"
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/conftest.py",
    "backup/*",
    "temp/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "temp/coverage/htmlcov"

[tool.coverage.xml]
output = "temp/coverage/coverage.xml"

[tool.coverage.json]
output = "temp/coverage/coverage.json"
