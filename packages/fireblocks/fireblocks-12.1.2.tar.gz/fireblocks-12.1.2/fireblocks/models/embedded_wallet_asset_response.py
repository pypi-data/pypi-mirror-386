# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EmbeddedWalletAssetResponse(BaseModel):
    """
    EmbeddedWalletAssetResponse
    """ # noqa: E501
    id: StrictStr
    symbol: StrictStr = Field(description="The asset symbol")
    name: StrictStr = Field(description="The asset name")
    decimals: Union[StrictFloat, StrictInt] = Field(description="Number of decimals")
    network_protocol: StrictStr = Field(description="Netowrk protocol of the blockchain (BTC, ETH)", alias="networkProtocol")
    testnet: StrictBool = Field(description="Is in testnet")
    has_fee: StrictBool = Field(description="Has fee", alias="hasFee")
    base_asset: StrictStr = Field(description="Base asset symbol BTC_TEST, ETH_TEST5)", alias="baseAsset")
    eth_network: Optional[StrictStr] = Field(default=None, alias="ethNetwork")
    eth_contract_address: Optional[StrictStr] = Field(default=None, alias="ethContractAddress")
    issuer_address: Optional[StrictStr] = Field(default=None, description="The address of the issuer of this token. Will be part of the identifier of this token on chain.", alias="issuerAddress")
    blockchain_symbol: Optional[StrictStr] = Field(default=None, description="Name of blockchain", alias="blockchainSymbol")
    deprecated: Optional[StrictBool] = Field(default=None, description="Is blockchain deprecated")
    coin_type: Union[StrictFloat, StrictInt] = Field(description="Unique identifier of an asset (0 for BTC, 60 for ETH, etc.)", alias="coinType")
    blockchain: StrictStr = Field(description="The blockchain native asset id which the token is deployed on")
    blockchain_display_name: Optional[StrictStr] = Field(default=None, description="Name of blockchain", alias="blockchainDisplayName")
    algorithm: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "symbol", "name", "decimals", "networkProtocol", "testnet", "hasFee", "baseAsset", "ethNetwork", "ethContractAddress", "issuerAddress", "blockchainSymbol", "deprecated", "coinType", "blockchain", "blockchainDisplayName", "algorithm"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MPC_ECDSA_SECP256K1', 'MPC_EDDSA_ED25519']):
            raise ValueError("must be one of enum values ('MPC_ECDSA_SECP256K1', 'MPC_EDDSA_ED25519')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmbeddedWalletAssetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmbeddedWalletAssetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "decimals": obj.get("decimals"),
            "networkProtocol": obj.get("networkProtocol"),
            "testnet": obj.get("testnet"),
            "hasFee": obj.get("hasFee"),
            "baseAsset": obj.get("baseAsset"),
            "ethNetwork": obj.get("ethNetwork"),
            "ethContractAddress": obj.get("ethContractAddress"),
            "issuerAddress": obj.get("issuerAddress"),
            "blockchainSymbol": obj.get("blockchainSymbol"),
            "deprecated": obj.get("deprecated"),
            "coinType": obj.get("coinType"),
            "blockchain": obj.get("blockchain"),
            "blockchainDisplayName": obj.get("blockchainDisplayName"),
            "algorithm": obj.get("algorithm")
        })
        return _obj


