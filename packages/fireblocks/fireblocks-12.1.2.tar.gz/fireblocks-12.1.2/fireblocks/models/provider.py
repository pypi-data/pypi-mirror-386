# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.validator import Validator
from typing import Optional, Set
from typing_extensions import Self

class Provider(BaseModel):
    """
    Provider
    """ # noqa: E501
    id: StrictStr = Field(description="The ID of the provider")
    provider_name: StrictStr = Field(description="Name of the provider", alias="providerName")
    validators: List[Validator] = Field(description="An array of objects that includes chain descriptors and the corresponding fee percentages for validators supported by the provider")
    icon_url: Optional[StrictStr] = Field(default=None, description="URL to the validator's icon", alias="iconUrl")
    terms_of_service_url: Optional[StrictStr] = Field(default=None, description="URL to the terms of service", alias="termsOfServiceUrl")
    is_terms_of_service_approved: StrictBool = Field(description="Indicates whether the terms of service are approved", alias="isTermsOfServiceApproved")
    is_private: Optional[StrictBool] = Field(default=None, description="Is the provider private, i.e created by the user", alias="isPrivate")
    is_liquid_staking: StrictBool = Field(description="Is the provider a liquid staking provider", alias="isLiquidStaking")
    __properties: ClassVar[List[str]] = ["id", "providerName", "validators", "iconUrl", "termsOfServiceUrl", "isTermsOfServiceApproved", "isPrivate", "isLiquidStaking"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Provider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in validators (list)
        _items = []
        if self.validators:
            for _item_validators in self.validators:
                if _item_validators:
                    _items.append(_item_validators.to_dict())
            _dict['validators'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Provider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "providerName": obj.get("providerName"),
            "validators": [Validator.from_dict(_item) for _item in obj["validators"]] if obj.get("validators") is not None else None,
            "iconUrl": obj.get("iconUrl"),
            "termsOfServiceUrl": obj.get("termsOfServiceUrl"),
            "isTermsOfServiceApproved": obj.get("isTermsOfServiceApproved"),
            "isPrivate": obj.get("isPrivate"),
            "isLiquidStaking": obj.get("isLiquidStaking")
        })
        return _obj


