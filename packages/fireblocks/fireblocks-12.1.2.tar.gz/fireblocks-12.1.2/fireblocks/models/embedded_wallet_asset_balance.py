# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.embedded_wallet_asset_reward_info import EmbeddedWalletAssetRewardInfo
from typing import Optional, Set
from typing_extensions import Self

class EmbeddedWalletAssetBalance(BaseModel):
    """
    EmbeddedWalletAssetBalance
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of the asset balance entry")
    total: StrictStr = Field(description="Total balance amount for the asset in the account (including pending, locked, and available)")
    available: StrictStr = Field(description="The balance available for use or withdrawal")
    pending: StrictStr = Field(description="Amount pending confirmation from blockchain (e.g., unconfirmed deposits)")
    frozen: StrictStr = Field(description="Balance that is frozen due to policy or regulatory lock")
    locked_amount: StrictStr = Field(description="Funds locked for operations such as staking or delegation", alias="lockedAmount")
    block_height: Optional[StrictStr] = Field(default=None, description="Latest known blockchain height when balance was fetched", alias="blockHeight")
    block_hash: Optional[StrictStr] = Field(default=None, description="Hash of the blockchain block associated with the current balance state", alias="blockHash")
    reward_info: Optional[EmbeddedWalletAssetRewardInfo] = Field(default=None, alias="rewardInfo")
    __properties: ClassVar[List[str]] = ["id", "total", "available", "pending", "frozen", "lockedAmount", "blockHeight", "blockHash", "rewardInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmbeddedWalletAssetBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reward_info
        if self.reward_info:
            _dict['rewardInfo'] = self.reward_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmbeddedWalletAssetBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "total": obj.get("total"),
            "available": obj.get("available"),
            "pending": obj.get("pending"),
            "frozen": obj.get("frozen"),
            "lockedAmount": obj.get("lockedAmount"),
            "blockHeight": obj.get("blockHeight"),
            "blockHash": obj.get("blockHash"),
            "rewardInfo": EmbeddedWalletAssetRewardInfo.from_dict(obj["rewardInfo"]) if obj.get("rewardInfo") is not None else None
        })
        return _obj


