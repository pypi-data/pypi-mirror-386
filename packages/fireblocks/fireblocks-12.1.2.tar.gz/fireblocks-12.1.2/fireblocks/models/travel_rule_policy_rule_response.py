# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TravelRulePolicyRuleResponse(BaseModel):
    """
    TravelRulePolicyRuleResponse
    """ # noqa: E501
    source_type: Optional[StrictStr] = Field(default=None, alias="sourceType")
    source_sub_type: Optional[StrictStr] = Field(default=None, alias="sourceSubType")
    dest_type: Optional[StrictStr] = Field(default=None, alias="destType")
    dest_sub_type: Optional[StrictStr] = Field(default=None, alias="destSubType")
    dest_address: Optional[StrictStr] = Field(default=None, alias="destAddress")
    source_id: Optional[StrictStr] = Field(default=None, alias="sourceId")
    dest_id: Optional[StrictStr] = Field(default=None, alias="destId")
    asset: Optional[StrictStr] = None
    base_asset: Optional[StrictStr] = Field(default=None, alias="baseAsset")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    amount_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="amountUSD")
    network_protocol: Optional[StrictStr] = Field(default=None, description="The network protocol of the token", alias="networkProtocol")
    operation: Optional[StrictStr] = None
    action: StrictStr
    __properties: ClassVar[List[str]] = ["sourceType", "sourceSubType", "destType", "destSubType", "destAddress", "sourceId", "destId", "asset", "baseAsset", "amount", "amountUSD", "networkProtocol", "operation", "action"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SCREEN', 'PASS', 'FREEZE']):
            raise ValueError("must be one of enum values ('SCREEN', 'PASS', 'FREEZE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TravelRulePolicyRuleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TravelRulePolicyRuleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceType": obj.get("sourceType"),
            "sourceSubType": obj.get("sourceSubType"),
            "destType": obj.get("destType"),
            "destSubType": obj.get("destSubType"),
            "destAddress": obj.get("destAddress"),
            "sourceId": obj.get("sourceId"),
            "destId": obj.get("destId"),
            "asset": obj.get("asset"),
            "baseAsset": obj.get("baseAsset"),
            "amount": obj.get("amount"),
            "amountUSD": obj.get("amountUSD"),
            "networkProtocol": obj.get("networkProtocol"),
            "operation": obj.get("operation"),
            "action": obj.get("action")
        })
        return _obj


