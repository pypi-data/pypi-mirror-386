# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from fireblocks.models.smart_transfer_create_ticket_term import SmartTransferCreateTicketTerm
from typing import Optional, Set
from typing_extensions import Self

class SmartTransferCreateTicket(BaseModel):
    """
    SmartTransferCreateTicket
    """ # noqa: E501
    created_by_network_id: StrictStr = Field(alias="createdByNetworkId")
    type: StrictStr
    expires_in: Optional[Union[Annotated[float, Field(le=48, strict=True, ge=1)], Annotated[int, Field(le=48, strict=True, ge=1)]]] = Field(default=None, description="Number of hours after which an OPEN ticket will expire if no term is funded.", alias="expiresIn")
    terms: Optional[List[SmartTransferCreateTicketTerm]] = None
    external_ref_id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, alias="externalRefId")
    note: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = None
    submit: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["createdByNetworkId", "type", "expiresIn", "terms", "externalRefId", "note", "submit"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ASYNC', 'DVP']):
            raise ValueError("must be one of enum values ('ASYNC', 'DVP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SmartTransferCreateTicket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict['terms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SmartTransferCreateTicket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdByNetworkId": obj.get("createdByNetworkId"),
            "type": obj.get("type"),
            "expiresIn": obj.get("expiresIn"),
            "terms": [SmartTransferCreateTicketTerm.from_dict(_item) for _item in obj["terms"]] if obj.get("terms") is not None else None,
            "externalRefId": obj.get("externalRefId"),
            "note": obj.get("note"),
            "submit": obj.get("submit")
        })
        return _obj


