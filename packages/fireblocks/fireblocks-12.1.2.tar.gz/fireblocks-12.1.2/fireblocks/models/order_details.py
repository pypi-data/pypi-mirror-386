# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from fireblocks.models.access_type import AccessType
from fireblocks.models.execution_response_details import ExecutionResponseDetails
from fireblocks.models.execution_step import ExecutionStep
from fireblocks.models.fee import Fee
from fireblocks.models.order_status import OrderStatus
from fireblocks.models.participants_identification import ParticipantsIdentification
from fireblocks.models.payment_instructions import PaymentInstructions
from fireblocks.models.settlement import Settlement
from fireblocks.models.transfer_receipt import TransferReceipt
from typing import Optional, Set
from typing_extensions import Self

class OrderDetails(BaseModel):
    """
    OrderDetails
    """ # noqa: E501
    id: StrictStr
    via: AccessType
    status: OrderStatus
    created_at: datetime = Field(alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    receipt: Optional[TransferReceipt] = None
    general_fees: Optional[List[Fee]] = Field(default=None, alias="generalFees")
    execution_steps: List[ExecutionStep] = Field(alias="executionSteps")
    execution_response_details: ExecutionResponseDetails = Field(alias="executionResponseDetails")
    settlement: Settlement
    participants_identification: Optional[ParticipantsIdentification] = Field(default=None, alias="participantsIdentification")
    payment_instructions: Optional[List[PaymentInstructions]] = Field(default=None, description="Payment instructions for the order, the client can use one of these to pay the order.", alias="paymentInstructions")
    created_by: StrictStr = Field(description="The ID of the user who created the order", alias="createdBy")
    customer_internal_reference_id: Optional[StrictStr] = Field(default=None, description="Internal reference ID for the customer", alias="customerInternalReferenceId")
    note: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Optional note for the Order")
    expires_at: Optional[datetime] = Field(default=None, alias="expiresAt")
    __properties: ClassVar[List[str]] = ["id", "via", "status", "createdAt", "updatedAt", "receipt", "generalFees", "executionSteps", "executionResponseDetails", "settlement", "participantsIdentification", "paymentInstructions", "createdBy", "customerInternalReferenceId", "note", "expiresAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of via
        if self.via:
            _dict['via'] = self.via.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receipt
        if self.receipt:
            _dict['receipt'] = self.receipt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in general_fees (list)
        _items = []
        if self.general_fees:
            for _item_general_fees in self.general_fees:
                if _item_general_fees:
                    _items.append(_item_general_fees.to_dict())
            _dict['generalFees'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in execution_steps (list)
        _items = []
        if self.execution_steps:
            for _item_execution_steps in self.execution_steps:
                if _item_execution_steps:
                    _items.append(_item_execution_steps.to_dict())
            _dict['executionSteps'] = _items
        # override the default output from pydantic by calling `to_dict()` of execution_response_details
        if self.execution_response_details:
            _dict['executionResponseDetails'] = self.execution_response_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settlement
        if self.settlement:
            _dict['settlement'] = self.settlement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of participants_identification
        if self.participants_identification:
            _dict['participantsIdentification'] = self.participants_identification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_instructions (list)
        _items = []
        if self.payment_instructions:
            for _item_payment_instructions in self.payment_instructions:
                if _item_payment_instructions:
                    _items.append(_item_payment_instructions.to_dict())
            _dict['paymentInstructions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "via": AccessType.from_dict(obj["via"]) if obj.get("via") is not None else None,
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "receipt": TransferReceipt.from_dict(obj["receipt"]) if obj.get("receipt") is not None else None,
            "generalFees": [Fee.from_dict(_item) for _item in obj["generalFees"]] if obj.get("generalFees") is not None else None,
            "executionSteps": [ExecutionStep.from_dict(_item) for _item in obj["executionSteps"]] if obj.get("executionSteps") is not None else None,
            "executionResponseDetails": ExecutionResponseDetails.from_dict(obj["executionResponseDetails"]) if obj.get("executionResponseDetails") is not None else None,
            "settlement": Settlement.from_dict(obj["settlement"]) if obj.get("settlement") is not None else None,
            "participantsIdentification": ParticipantsIdentification.from_dict(obj["participantsIdentification"]) if obj.get("participantsIdentification") is not None else None,
            "paymentInstructions": [PaymentInstructions.from_dict(_item) for _item in obj["paymentInstructions"]] if obj.get("paymentInstructions") is not None else None,
            "createdBy": obj.get("createdBy"),
            "customerInternalReferenceId": obj.get("customerInternalReferenceId"),
            "note": obj.get("note"),
            "expiresAt": obj.get("expiresAt")
        })
        return _obj


