# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.collection_token_metadata_dto import CollectionTokenMetadataDto
from typing import Optional, Set
from typing_extensions import Self

class CollectionMintRequestDto(BaseModel):
    """
    CollectionMintRequestDto
    """ # noqa: E501
    vault_account_id: StrictStr = Field(description="The id of the vault account that initiates the mint function.", alias="vaultAccountId")
    to: StrictStr = Field(description="The EVM address to mint to ")
    token_id: StrictStr = Field(description="The token id, recommended to have numerical format and in sequential order", alias="tokenId")
    amount: Optional[StrictStr] = Field(default=None, description="For ERC721, amount is optional or should always be 1 and for ERC1155, amount should be 1 or greater")
    metadata_uri: Optional[StrictStr] = Field(default=None, description="URL of metadata uploaded, skip uploading to IPFS if this field is provided with any value", alias="metadataURI")
    metadata: Optional[CollectionTokenMetadataDto] = Field(default=None, description="Metadata to upload")
    external_id: Optional[StrictStr] = Field(default=None, description="External id that can be used to identify the transaction in your system. The unique identifier of the transaction outside of Fireblocks with max length of 255 characters", alias="externalId")
    __properties: ClassVar[List[str]] = ["vaultAccountId", "to", "tokenId", "amount", "metadataURI", "metadata", "externalId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectionMintRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectionMintRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "vaultAccountId": obj.get("vaultAccountId"),
            "to": obj.get("to"),
            "tokenId": obj.get("tokenId"),
            "amount": obj.get("amount"),
            "metadataURI": obj.get("metadataURI"),
            "metadata": CollectionTokenMetadataDto.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "externalId": obj.get("externalId")
        })
        return _obj


