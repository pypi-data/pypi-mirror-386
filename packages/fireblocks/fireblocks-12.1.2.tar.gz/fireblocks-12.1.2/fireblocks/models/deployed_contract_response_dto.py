# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.gassless_standard_configurations import GasslessStandardConfigurations
from fireblocks.models.multichain_deployment_metadata import MultichainDeploymentMetadata
from fireblocks.models.solana_config import SolanaConfig
from typing import Optional, Set
from typing_extensions import Self

class DeployedContractResponseDto(BaseModel):
    """
    DeployedContractResponseDto
    """ # noqa: E501
    id: StrictStr = Field(description="The deployed contract data identifier")
    contract_address: StrictStr = Field(description="The contract's onchain address", alias="contractAddress")
    contract_template_id: StrictStr = Field(description="The contract template identifier", alias="contractTemplateId")
    vault_account_id: Optional[StrictStr] = Field(default=None, description="The vault account id this contract was deploy from", alias="vaultAccountId")
    blockchain_id: StrictStr = Field(alias="blockchainId")
    base_asset_id: Optional[StrictStr] = Field(default=None, description="The blockchain base assetId", alias="baseAssetId")
    gasless_config: Optional[GasslessStandardConfigurations] = Field(default=None, alias="gaslessConfig")
    multichain_deployment_metadata: Optional[MultichainDeploymentMetadata] = Field(default=None, alias="multichainDeploymentMetadata")
    solana_config: Optional[SolanaConfig] = Field(default=None, alias="solanaConfig")
    __properties: ClassVar[List[str]] = ["id", "contractAddress", "contractTemplateId", "vaultAccountId", "blockchainId", "baseAssetId", "gaslessConfig", "multichainDeploymentMetadata", "solanaConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeployedContractResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gasless_config
        if self.gasless_config:
            _dict['gaslessConfig'] = self.gasless_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multichain_deployment_metadata
        if self.multichain_deployment_metadata:
            _dict['multichainDeploymentMetadata'] = self.multichain_deployment_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of solana_config
        if self.solana_config:
            _dict['solanaConfig'] = self.solana_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeployedContractResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "contractAddress": obj.get("contractAddress"),
            "contractTemplateId": obj.get("contractTemplateId"),
            "vaultAccountId": obj.get("vaultAccountId"),
            "blockchainId": obj.get("blockchainId"),
            "baseAssetId": obj.get("baseAssetId"),
            "gaslessConfig": GasslessStandardConfigurations.from_dict(obj["gaslessConfig"]) if obj.get("gaslessConfig") is not None else None,
            "multichainDeploymentMetadata": MultichainDeploymentMetadata.from_dict(obj["multichainDeploymentMetadata"]) if obj.get("multichainDeploymentMetadata") is not None else None,
            "solanaConfig": SolanaConfig.from_dict(obj["solanaConfig"]) if obj.get("solanaConfig") is not None else None
        })
        return _obj


