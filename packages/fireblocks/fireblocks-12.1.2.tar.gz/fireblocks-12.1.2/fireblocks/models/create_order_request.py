# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from fireblocks.models.access_type import AccessType
from fireblocks.models.execution_request_details import ExecutionRequestDetails
from fireblocks.models.participants_identification import ParticipantsIdentification
from fireblocks.models.settlement import Settlement
from typing import Optional, Set
from typing_extensions import Self

class CreateOrderRequest(BaseModel):
    """
    CreateOrderRequest
    """ # noqa: E501
    via: AccessType
    execution_request_details: ExecutionRequestDetails = Field(alias="executionRequestDetails")
    settlement: Settlement
    participants_identification: Optional[ParticipantsIdentification] = Field(default=None, alias="participantsIdentification")
    customer_internal_reference_id: Optional[StrictStr] = Field(default=None, description="Internal reference ID for the customer", alias="customerInternalReferenceId")
    note: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Optional note for the order")
    __properties: ClassVar[List[str]] = ["via", "executionRequestDetails", "settlement", "participantsIdentification", "customerInternalReferenceId", "note"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of via
        if self.via:
            _dict['via'] = self.via.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_request_details
        if self.execution_request_details:
            _dict['executionRequestDetails'] = self.execution_request_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settlement
        if self.settlement:
            _dict['settlement'] = self.settlement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of participants_identification
        if self.participants_identification:
            _dict['participantsIdentification'] = self.participants_identification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "via": AccessType.from_dict(obj["via"]) if obj.get("via") is not None else None,
            "executionRequestDetails": ExecutionRequestDetails.from_dict(obj["executionRequestDetails"]) if obj.get("executionRequestDetails") is not None else None,
            "settlement": Settlement.from_dict(obj["settlement"]) if obj.get("settlement") is not None else None,
            "participantsIdentification": ParticipantsIdentification.from_dict(obj["participantsIdentification"]) if obj.get("participantsIdentification") is not None else None,
            "customerInternalReferenceId": obj.get("customerInternalReferenceId"),
            "note": obj.get("note")
        })
        return _obj


