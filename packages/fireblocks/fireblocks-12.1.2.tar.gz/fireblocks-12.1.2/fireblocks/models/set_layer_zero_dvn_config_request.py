# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from fireblocks.models.dvn_config import DvnConfig
from typing import Optional, Set
from typing_extensions import Self

class SetLayerZeroDvnConfigRequest(BaseModel):
    """
    SetLayerZeroDvnConfigRequest
    """ # noqa: E501
    vault_account_id: StrictStr = Field(description="Vault account that pays gas", alias="vaultAccountId")
    source_adapter_token_link_id: StrictStr = Field(description="Source adapter TokenLink ID", alias="sourceAdapterTokenLinkId")
    destination_adapter_token_link_id: StrictStr = Field(description="Destination adapter TokenLink ID", alias="destinationAdapterTokenLinkId")
    send_config: DvnConfig = Field(alias="sendConfig")
    receive_config: DvnConfig = Field(alias="receiveConfig")
    __properties: ClassVar[List[str]] = ["vaultAccountId", "sourceAdapterTokenLinkId", "destinationAdapterTokenLinkId", "sendConfig", "receiveConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SetLayerZeroDvnConfigRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of send_config
        if self.send_config:
            _dict['sendConfig'] = self.send_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receive_config
        if self.receive_config:
            _dict['receiveConfig'] = self.receive_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SetLayerZeroDvnConfigRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "vaultAccountId": obj.get("vaultAccountId"),
            "sourceAdapterTokenLinkId": obj.get("sourceAdapterTokenLinkId"),
            "destinationAdapterTokenLinkId": obj.get("destinationAdapterTokenLinkId"),
            "sendConfig": DvnConfig.from_dict(obj["sendConfig"]) if obj.get("sendConfig") is not None else None,
            "receiveConfig": DvnConfig.from_dict(obj["receiveConfig"]) if obj.get("receiveConfig") is not None else None
        })
        return _obj


