# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScreeningMetadataConfig(BaseModel):
    """
    Screening metadata configuration
    """ # noqa: E501
    direction: StrictStr = Field(description="Direction of transaction")
    provider: Optional[StrictStr] = Field(default=None, description="Screening provider")
    risk_rating: Optional[StrictStr] = Field(default=None, description="Risk rating threshold", alias="riskRating")
    risk_score: Optional[StrictStr] = Field(default=None, description="Risk score threshold", alias="riskScore")
    exposure_type: Optional[StrictStr] = Field(default=None, description="Exposure type", alias="exposureType")
    category: Optional[List[StrictStr]] = None
    name: Optional[List[StrictStr]] = None
    category_id: Optional[List[StrictStr]] = Field(default=None, alias="categoryId")
    status: Optional[StrictStr] = Field(default=None, description="Transaction status")
    source_address: Optional[StrictStr] = Field(default=None, description="Source address", alias="sourceAddress")
    dest_address: Optional[StrictStr] = Field(default=None, description="Destination address", alias="destAddress")
    __properties: ClassVar[List[str]] = ["direction", "provider", "riskRating", "riskScore", "exposureType", "category", "name", "categoryId", "status", "sourceAddress", "destAddress"]

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['INBOUND', 'OUTBOUND', 'ANY']):
            raise ValueError("must be one of enum values ('INBOUND', 'OUTBOUND', 'ANY')")
        return value

    @field_validator('provider')
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHAINALYSIS', 'CHAINALYSIS_V2', 'ELLIPTIC', 'ELLIPTIC_HOLISTIC', 'NOTABENE']):
            raise ValueError("must be one of enum values ('CHAINALYSIS', 'CHAINALYSIS_V2', 'ELLIPTIC', 'ELLIPTIC_HOLISTIC', 'NOTABENE')")
        return value

    @field_validator('risk_rating')
    def risk_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOW', 'MEDIUM', 'HIGH', 'SEVERE', 'ANY']):
            raise ValueError("must be one of enum values ('LOW', 'MEDIUM', 'HIGH', 'SEVERE', 'ANY')")
        return value

    @field_validator('exposure_type')
    def exposure_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DIRECT', 'INDIRECT', 'ANY']):
            raise ValueError("must be one of enum values ('DIRECT', 'INDIRECT', 'ANY')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPLETED', 'PENDING', 'REJECTED', 'FAILED', 'CANCELED', 'BLOCKING_TIME_EXPIRED']):
            raise ValueError("must be one of enum values ('COMPLETED', 'PENDING', 'REJECTED', 'FAILED', 'CANCELED', 'BLOCKING_TIME_EXPIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScreeningMetadataConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if provider (nullable) is None
        # and model_fields_set contains the field
        if self.provider is None and "provider" in self.model_fields_set:
            _dict['provider'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScreeningMetadataConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "direction": obj.get("direction"),
            "provider": obj.get("provider"),
            "riskRating": obj.get("riskRating"),
            "riskScore": obj.get("riskScore"),
            "exposureType": obj.get("exposureType"),
            "category": obj.get("category"),
            "name": obj.get("name"),
            "categoryId": obj.get("categoryId"),
            "status": obj.get("status"),
            "sourceAddress": obj.get("sourceAddress"),
            "destAddress": obj.get("destAddress")
        })
        return _obj


