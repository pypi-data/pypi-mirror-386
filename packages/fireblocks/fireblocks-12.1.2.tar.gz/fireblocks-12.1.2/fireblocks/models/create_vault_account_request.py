# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateVaultAccountRequest(BaseModel):
    """
    CreateVaultAccountRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Account Name")
    hidden_on_ui: Optional[StrictBool] = Field(default=None, description="Optional - if true, the created account and all related transactions will not be shown on Fireblocks console", alias="hiddenOnUI")
    customer_ref_id: Optional[StrictStr] = Field(default=None, description="Optional - Sets a customer reference ID", alias="customerRefId")
    auto_fuel: Optional[StrictBool] = Field(default=None, description="Optional - Sets the autoFuel property of the vault account", alias="autoFuel")
    vault_type: Optional[StrictStr] = Field(default='MPC', description="Type of vault account. The default type will be set to MPC.<br/>  If the workspace does not support the selected type, it will return an error.", alias="vaultType")
    auto_assign: Optional[StrictBool] = Field(default=False, description="Applicable only when the vault account type is KEY_LINK. For MPC, this parameter will be ignored.<br/> If set to true and there are available keys, random keys will be assigned to the newly created vault account.<br/> If set to true and there are no available keys to be assigned, it will return an error.<br/> If set to false, the vault account will be created without any keys.", alias="autoAssign")
    __properties: ClassVar[List[str]] = ["name", "hiddenOnUI", "customerRefId", "autoFuel", "vaultType", "autoAssign"]

    @field_validator('vault_type')
    def vault_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MPC', 'KEY_LINK']):
            raise ValueError("must be one of enum values ('MPC', 'KEY_LINK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateVaultAccountRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateVaultAccountRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "hiddenOnUI": obj.get("hiddenOnUI"),
            "customerRefId": obj.get("customerRefId"),
            "autoFuel": obj.get("autoFuel"),
            "vaultType": obj.get("vaultType") if obj.get("vaultType") is not None else 'MPC',
            "autoAssign": obj.get("autoAssign") if obj.get("autoAssign") is not None else False
        })
        return _obj


