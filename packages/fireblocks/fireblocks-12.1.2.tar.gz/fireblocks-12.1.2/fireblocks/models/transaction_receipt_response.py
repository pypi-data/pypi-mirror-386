# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.tx_log import TxLog
from typing import Optional, Set
from typing_extensions import Self

class TransactionReceiptResponse(BaseModel):
    """
    TransactionReceiptResponse
    """ # noqa: E501
    block_hash: StrictStr = Field(description="The block hash", alias="blockHash")
    block_number: StrictInt = Field(description="The block number", alias="blockNumber")
    contract_address: Optional[StrictStr] = Field(default=None, description="The address of deployed contract", alias="contractAddress")
    cumulative_gas_used: StrictInt = Field(description="The cumulative gas used in the transaction", alias="cumulativeGasUsed")
    effective_gas_price: StrictInt = Field(description="The effective gas price", alias="effectiveGasPrice")
    var_from: StrictStr = Field(description="Sender address", alias="from")
    gas_used: StrictInt = Field(description="Gas used by the transaction", alias="gasUsed")
    logs: List[TxLog] = Field(description="Array of transaction logs")
    logs_bloom: StrictStr = Field(description="Logs bloom filter", alias="logsBloom")
    status: StrictInt = Field(description="Transaction status (1 for success, 0 for failure)")
    to: Optional[StrictStr] = Field(default=None, description="Recipient address")
    transaction_hash: StrictStr = Field(description="The transaction hash", alias="transactionHash")
    transaction_index: StrictInt = Field(description="Transaction index in the block", alias="transactionIndex")
    type: StrictStr = Field(description="Type of transaction")
    __properties: ClassVar[List[str]] = ["blockHash", "blockNumber", "contractAddress", "cumulativeGasUsed", "effectiveGasPrice", "from", "gasUsed", "logs", "logsBloom", "status", "to", "transactionHash", "transactionIndex", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionReceiptResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in logs (list)
        _items = []
        if self.logs:
            for _item_logs in self.logs:
                if _item_logs:
                    _items.append(_item_logs.to_dict())
            _dict['logs'] = _items
        # set to None if contract_address (nullable) is None
        # and model_fields_set contains the field
        if self.contract_address is None and "contract_address" in self.model_fields_set:
            _dict['contractAddress'] = None

        # set to None if to (nullable) is None
        # and model_fields_set contains the field
        if self.to is None and "to" in self.model_fields_set:
            _dict['to'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionReceiptResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockHash": obj.get("blockHash"),
            "blockNumber": obj.get("blockNumber"),
            "contractAddress": obj.get("contractAddress"),
            "cumulativeGasUsed": obj.get("cumulativeGasUsed"),
            "effectiveGasPrice": obj.get("effectiveGasPrice"),
            "from": obj.get("from"),
            "gasUsed": obj.get("gasUsed"),
            "logs": [TxLog.from_dict(_item) for _item in obj["logs"]] if obj.get("logs") is not None else None,
            "logsBloom": obj.get("logsBloom"),
            "status": obj.get("status"),
            "to": obj.get("to"),
            "transactionHash": obj.get("transactionHash"),
            "transactionIndex": obj.get("transactionIndex"),
            "type": obj.get("type")
        })
        return _obj


