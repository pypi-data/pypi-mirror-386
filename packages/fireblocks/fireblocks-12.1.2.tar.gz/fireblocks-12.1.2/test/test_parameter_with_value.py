# coding: utf-8

"""
Fireblocks API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.6.2
Contact: support@fireblocks.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from fireblocks.models.parameter_with_value import ParameterWithValue


class TestParameterWithValue(unittest.TestCase):
    """ParameterWithValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ParameterWithValue:
        """Test ParameterWithValue
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ParameterWithValue`
        """
        model = ParameterWithValue()
        if include_optional:
            return ParameterWithValue(
                name = '_name',
                description = 'The name of the token',
                internal_type = 'string',
                type = 'string',
                components = [
                    fireblocks.models.parameter.Parameter(
                        name = '_name', 
                        description = 'The name of the token', 
                        internal_type = 'string', 
                        type = 'string', 
                        components = [
                            fireblocks.models.parameter.Parameter(
                                name = '_name', 
                                description = 'The name of the token', 
                                internal_type = 'string', 
                                type = 'string', )
                            ], )
                    ],
                value = 'true',
                function_value = fireblocks.models.lean_abi_function.LeanAbiFunction(
                    name = 'initialize', 
                    inputs = [
                        fireblocks.models.parameter_with_value.ParameterWithValue(
                            name = '_name', 
                            description = 'The name of the token', 
                            internal_type = 'string', 
                            type = 'string', 
                            components = [
                                fireblocks.models.parameter.Parameter(
                                    name = '_name', 
                                    description = 'The name of the token', 
                                    internal_type = 'string', 
                                    type = 'string', )
                                ], 
                            value = 'true', 
                            function_value = null, )
                        ], 
                    outputs = [
                        fireblocks.models.parameter_with_value.ParameterWithValue(
                            name = '_name', 
                            description = 'The name of the token', 
                            internal_type = 'string', 
                            type = 'string', 
                            value = 'true', 
                            function_value = null, )
                        ], 
                    state_mutability = 'nonpayable', )
            )
        else:
            return ParameterWithValue(
                name = '_name',
                type = 'string',
        )
        """

    def testParameterWithValue(self):
        """Test ParameterWithValue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
