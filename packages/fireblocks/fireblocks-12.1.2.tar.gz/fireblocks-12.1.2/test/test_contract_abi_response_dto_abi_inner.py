# coding: utf-8

"""
Fireblocks API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.6.2
Contact: support@fireblocks.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from fireblocks.models.contract_abi_response_dto_abi_inner import (
    ContractAbiResponseDtoAbiInner,
)


class TestContractAbiResponseDtoAbiInner(unittest.TestCase):
    """ContractAbiResponseDtoAbiInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ContractAbiResponseDtoAbiInner:
        """Test ContractAbiResponseDtoAbiInner
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ContractAbiResponseDtoAbiInner`
        """
        model = ContractAbiResponseDtoAbiInner()
        if include_optional:
            return ContractAbiResponseDtoAbiInner(
                name = 'transfer',
                state_mutability = 'pure',
                type = 'constructor',
                inputs = [
                    fireblocks.models.parameter.Parameter(
                        name = '_name', 
                        description = 'The name of the token', 
                        internal_type = 'string', 
                        type = 'string', 
                        components = [
                            fireblocks.models.parameter.Parameter(
                                name = '_name', 
                                description = 'The name of the token', 
                                internal_type = 'string', 
                                type = 'string', )
                            ], )
                    ],
                outputs = [
                    fireblocks.models.parameter.Parameter(
                        name = '_name', 
                        description = 'The name of the token', 
                        internal_type = 'string', 
                        type = 'string', 
                        components = [
                            fireblocks.models.parameter.Parameter(
                                name = '_name', 
                                description = 'The name of the token', 
                                internal_type = 'string', 
                                type = 'string', )
                            ], )
                    ],
                description = '',
                discriminator = [13],
                accounts = [
                    fireblocks.models.sol_account.SOLAccount(
                        name = 'mint', 
                        signer = False, 
                        writable = True, 
                        address = '4PVcDXAkAgQkVx4puiSXdZ5H8BrTqUzstJBKKWFy3XsH', )
                    ],
                args = [
                    fireblocks.models.sol_parameter.SolParameter(
                        name = 'mint', 
                        type = 'u8', )
                    ]
            )
        else:
            return ContractAbiResponseDtoAbiInner(
                name = 'transfer',
                type = 'constructor',
                discriminator = [13],
                accounts = [
                    fireblocks.models.sol_account.SOLAccount(
                        name = 'mint', 
                        signer = False, 
                        writable = True, 
                        address = '4PVcDXAkAgQkVx4puiSXdZ5H8BrTqUzstJBKKWFy3XsH', )
                    ],
                args = [
                    fireblocks.models.sol_parameter.SolParameter(
                        name = 'mint', 
                        type = 'u8', )
                    ],
        )
        """

    def testContractAbiResponseDtoAbiInner(self):
        """Test ContractAbiResponseDtoAbiInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
