# coding: utf-8

"""
Fireblocks API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.6.2
Contact: support@fireblocks.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from fireblocks.models.publish_result import PublishResult


class TestPublishResult(unittest.TestCase):
    """PublishResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PublishResult:
        """Test PublishResult
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `PublishResult`
        """
        model = PublishResult()
        if include_optional:
            return PublishResult(
                status = 'SUCCESS',
                rules = [
                    fireblocks.models.policy_rule.PolicyRule(
                        name = 'High Value Transfer Policy', 
                        id = 'policy_rule_001', 
                        policy_engine_version = 'v2', 
                        type = 'TRANSFER', 
                        sub_type = 'TRANSFER', 
                        initiator = null, 
                        asset = fireblocks.models.asset_config.AssetConfig(
                            nft_transfer = False, 
                            asset_types = ["FUNGIBLE","NFT","*"], 
                            operator = 'INCLUDES', ), 
                        source = fireblocks.models.account_config.AccountConfig(
                            type = 'VAULT', 
                            ids = [
                                fireblocks.models.account_identifier.AccountIdentifier(
                                    type = 'VAULT', 
                                    id = 'account123', 
                                    address = '0x123...', )
                                ], 
                            operator = 'INCLUDES', 
                            match_from = 'ACCOUNT', ), 
                        destination = {"type":["EXTERNAL"],"operator":"INCLUDES","addressType":"WHITELISTED"}, 
                        account = fireblocks.models.account_config.AccountConfig(
                            type = , 
                            operator = , 
                            match_from = 'ACCOUNT', ), 
                        verdict = fireblocks.models.verdict_config.VerdictConfig(
                            action = 'ALLOW', 
                            approvers = fireblocks.models.approvers_config.ApproversConfig(
                                can_initiator_approve = False, 
                                allow_operator_as_authorizer = False, 
                                approval_groups = [{"threshold":2,"users":["user1","user2"]}], ), 
                            designated_signers = fireblocks.models.designated_signers_config.DesignatedSignersConfig(
                                type = 'SINGLE', 
                                users = ["user1","user2"], 
                                groups = ["group1","group2"], ), ), 
                        amount_over_time = fireblocks.models.amount_over_time_config.AmountOverTimeConfig(
                            range = fireblocks.models.amount_over_time_config_range.AmountOverTimeConfig_range(
                                min = '100', 
                                max = '10000', ), 
                            currency = 'USD', 
                            time_period = fireblocks.models.time_period_config.TimePeriodConfig(
                                seconds = '86400', 
                                initiator = 'PER_SINGLE_MATCH', 
                                source = 'PER_SINGLE_MATCH', 
                                destination = 'PER_SINGLE_MATCH', ), ), 
                        amount = {"min":"100","max":"10000","currency":"USD"}, 
                        external_descriptor = 'High value transfer policy for institutional clients', 
                        method = null, 
                        is_global_policy = False, 
                        program_call = fireblocks.models.program_call_config.ProgramCallConfig(
                            allowed_solana_program_calls = 'WHITELISTED', ), 
                        screening_metadata = fireblocks.models.screening_metadata_config.ScreeningMetadataConfig(
                            direction = 'OUTBOUND', 
                            provider = 'CHAINALYSIS', 
                            risk_rating = 'MEDIUM', 
                            risk_score = '0.8', 
                            exposure_type = 'DIRECT', 
                            category = [
                                ''
                                ], 
                            name = [
                                ''
                                ], 
                            category_id = [
                                ''
                                ], 
                            status = 'COMPLETED', 
                            source_address = '0x123...', 
                            dest_address = '0x456...', ), 
                        quote_asset = fireblocks.models.asset_config.AssetConfig(
                            nft_transfer = False, 
                            asset_types = ["FUNGIBLE","NFT","*"], ), 
                        base_asset = , 
                        quote_amount = {"min":"100","max":"10000","currency":"USD"}, 
                        base_amount = {"min":"100","max":"10000","currency":"USD"}, 
                        derivation_path = {"path":[44,0,0,0,0],"partial":false}, 
                        index = 1, )
                    ],
                check_result = fireblocks.models.policy_check_result.PolicyCheckResult(
                    errors = 1.337, 
                    results = [
                        fireblocks.models.policy_rule_check_result.PolicyRuleCheckResult(
                            index = 1.337, 
                            status = 'ok', 
                            errors = [
                                fireblocks.models.policy_rule_error.PolicyRuleError(
                                    error_message = '', 
                                    error_code = 1.337, 
                                    error_code_name = '', 
                                    error_field = 'operator', )
                                ], )
                        ], ),
                metadata = fireblocks.models.policy_metadata.PolicyMetadata(
                    edited_by = 'user123', 
                    edited_at = '2024-01-15T10:30:00Z', 
                    published_by = 'user456', 
                    published_at = '2024-01-15T11:00:00Z', 
                    policy_type = 'TRANSFER', )
            )
        else:
            return PublishResult(
                status = 'SUCCESS',
                rules = [
                    fireblocks.models.policy_rule.PolicyRule(
                        name = 'High Value Transfer Policy', 
                        id = 'policy_rule_001', 
                        policy_engine_version = 'v2', 
                        type = 'TRANSFER', 
                        sub_type = 'TRANSFER', 
                        initiator = null, 
                        asset = fireblocks.models.asset_config.AssetConfig(
                            nft_transfer = False, 
                            asset_types = ["FUNGIBLE","NFT","*"], 
                            operator = 'INCLUDES', ), 
                        source = fireblocks.models.account_config.AccountConfig(
                            type = 'VAULT', 
                            ids = [
                                fireblocks.models.account_identifier.AccountIdentifier(
                                    type = 'VAULT', 
                                    id = 'account123', 
                                    address = '0x123...', )
                                ], 
                            operator = 'INCLUDES', 
                            match_from = 'ACCOUNT', ), 
                        destination = {"type":["EXTERNAL"],"operator":"INCLUDES","addressType":"WHITELISTED"}, 
                        account = fireblocks.models.account_config.AccountConfig(
                            type = , 
                            operator = , 
                            match_from = 'ACCOUNT', ), 
                        verdict = fireblocks.models.verdict_config.VerdictConfig(
                            action = 'ALLOW', 
                            approvers = fireblocks.models.approvers_config.ApproversConfig(
                                can_initiator_approve = False, 
                                allow_operator_as_authorizer = False, 
                                approval_groups = [{"threshold":2,"users":["user1","user2"]}], ), 
                            designated_signers = fireblocks.models.designated_signers_config.DesignatedSignersConfig(
                                type = 'SINGLE', 
                                users = ["user1","user2"], 
                                groups = ["group1","group2"], ), ), 
                        amount_over_time = fireblocks.models.amount_over_time_config.AmountOverTimeConfig(
                            range = fireblocks.models.amount_over_time_config_range.AmountOverTimeConfig_range(
                                min = '100', 
                                max = '10000', ), 
                            currency = 'USD', 
                            time_period = fireblocks.models.time_period_config.TimePeriodConfig(
                                seconds = '86400', 
                                initiator = 'PER_SINGLE_MATCH', 
                                source = 'PER_SINGLE_MATCH', 
                                destination = 'PER_SINGLE_MATCH', ), ), 
                        amount = {"min":"100","max":"10000","currency":"USD"}, 
                        external_descriptor = 'High value transfer policy for institutional clients', 
                        method = null, 
                        is_global_policy = False, 
                        program_call = fireblocks.models.program_call_config.ProgramCallConfig(
                            allowed_solana_program_calls = 'WHITELISTED', ), 
                        screening_metadata = fireblocks.models.screening_metadata_config.ScreeningMetadataConfig(
                            direction = 'OUTBOUND', 
                            provider = 'CHAINALYSIS', 
                            risk_rating = 'MEDIUM', 
                            risk_score = '0.8', 
                            exposure_type = 'DIRECT', 
                            category = [
                                ''
                                ], 
                            name = [
                                ''
                                ], 
                            category_id = [
                                ''
                                ], 
                            status = 'COMPLETED', 
                            source_address = '0x123...', 
                            dest_address = '0x456...', ), 
                        quote_asset = fireblocks.models.asset_config.AssetConfig(
                            nft_transfer = False, 
                            asset_types = ["FUNGIBLE","NFT","*"], ), 
                        base_asset = , 
                        quote_amount = {"min":"100","max":"10000","currency":"USD"}, 
                        base_amount = {"min":"100","max":"10000","currency":"USD"}, 
                        derivation_path = {"path":[44,0,0,0,0],"partial":false}, 
                        index = 1, )
                    ],
                check_result = fireblocks.models.policy_check_result.PolicyCheckResult(
                    errors = 1.337, 
                    results = [
                        fireblocks.models.policy_rule_check_result.PolicyRuleCheckResult(
                            index = 1.337, 
                            status = 'ok', 
                            errors = [
                                fireblocks.models.policy_rule_error.PolicyRuleError(
                                    error_message = '', 
                                    error_code = 1.337, 
                                    error_code_name = '', 
                                    error_field = 'operator', )
                                ], )
                        ], ),
                metadata = fireblocks.models.policy_metadata.PolicyMetadata(
                    edited_by = 'user123', 
                    edited_at = '2024-01-15T10:30:00Z', 
                    published_by = 'user456', 
                    published_at = '2024-01-15T11:00:00Z', 
                    policy_type = 'TRANSFER', ),
        )
        """

    def testPublishResult(self):
        """Test PublishResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
