# coding: utf-8

"""
Fireblocks API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.6.2
Contact: support@fireblocks.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from fireblocks.models.blockchain_response import BlockchainResponse


class TestBlockchainResponse(unittest.TestCase):
    """BlockchainResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BlockchainResponse:
        """Test BlockchainResponse
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `BlockchainResponse`
        """
        model = BlockchainResponse()
        if include_optional:
            return BlockchainResponse(
                id = '9f9f7062-df90-4fc0-8697-96685184357b',
                legacy_id = 'ETH',
                display_name = 'Ethereum',
                native_asset_id = '9f9f7062-df90-4fc0-8697-96685184356a',
                onchain = fireblocks.models.blockchain_onchain.BlockchainOnchain(
                    protocol = 'EVM', 
                    chain_id = '1', 
                    test = False, 
                    signing_algo = 'ECDSA_SECP256K1', ),
                metadata = fireblocks.models.blockchain_metadata.BlockchainMetadata(
                    scope = 'GLOBAL', 
                    deprecated = False, 
                    media = [
                        fireblocks.models.blockchain_media.BlockchainMedia(
                            url = 'https://example.com/image.png', 
                            type = 'image/svg+xml', )
                        ], 
                    explorer = fireblocks.models.blockchain_explorer.BlockchainExplorer(
                        base = 'https://example.com', 
                        address = 'https://example.com/address/{address}', 
                        tx = 'https://example.com/tx/{tx}', 
                        token = 'https://example.com/nft/{contract}/{tokenId}', ), )
            )
        else:
            return BlockchainResponse(
                id = '9f9f7062-df90-4fc0-8697-96685184357b',
                legacy_id = 'ETH',
                display_name = 'Ethereum',
                native_asset_id = '9f9f7062-df90-4fc0-8697-96685184356a',
                onchain = fireblocks.models.blockchain_onchain.BlockchainOnchain(
                    protocol = 'EVM', 
                    chain_id = '1', 
                    test = False, 
                    signing_algo = 'ECDSA_SECP256K1', ),
                metadata = fireblocks.models.blockchain_metadata.BlockchainMetadata(
                    scope = 'GLOBAL', 
                    deprecated = False, 
                    media = [
                        fireblocks.models.blockchain_media.BlockchainMedia(
                            url = 'https://example.com/image.png', 
                            type = 'image/svg+xml', )
                        ], 
                    explorer = fireblocks.models.blockchain_explorer.BlockchainExplorer(
                        base = 'https://example.com', 
                        address = 'https://example.com/address/{address}', 
                        tx = 'https://example.com/tx/{tx}', 
                        token = 'https://example.com/nft/{contract}/{tokenId}', ), ),
        )
        """

    def testBlockchainResponse(self):
        """Test BlockchainResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
