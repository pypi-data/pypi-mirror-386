# coding: utf-8

"""
Fireblocks API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.6.2
Contact: support@fireblocks.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from fireblocks.models.execution_conversion_operation import (
    ExecutionConversionOperation,
)


class TestExecutionConversionOperation(unittest.TestCase):
    """ExecutionConversionOperation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExecutionConversionOperation:
        """Test ExecutionConversionOperation
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ExecutionConversionOperation`
        """
        model = ExecutionConversionOperation()
        if include_optional:
            return ExecutionConversionOperation(
                operation_id = '',
                status = 'PENDING',
                validation_failure = fireblocks.models.conversion_validation_failure.ConversionValidationFailure(
                    reason = 'ACCOUNT_NOT_FOUND', 
                    data = {
                        'key' : null
                        }, ),
                operation_type = 'CONVERSION',
                preview = fireblocks.models.conversion_operation_preview.ConversionOperationPreview(
                    input = fireblocks.models.conversion_operation_config_params.ConversionOperationConfigParams(
                        amount = '', 
                        account_id = '', 
                        src_asset_id = '', 
                        dest_asset_id = '', 
                        slippage_basis_points = 0, ), 
                    output = fireblocks.models.conversion_operation_preview_output.ConversionOperationPreviewOutput(
                        amount = fireblocks.models.asset_amount.AssetAmount(
                            amount = '', 
                            asset_id = '', ), 
                        fee = fireblocks.models.asset_amount.AssetAmount(
                            amount = '', 
                            asset_id = '', ), 
                        conversion_rate = '', 
                        time_seconds = 1.337, ), 
                    failure = fireblocks.models.conversion_operation_failure.ConversionOperationFailure(
                        reason = 'INVALID_AMOUNT', 
                        data = {
                            'key' : null
                            }, ), ),
                execution = fireblocks.models.conversion_operation_execution.ConversionOperationExecution(
                    input = fireblocks.models.conversion_operation_config_params.ConversionOperationConfigParams(
                        amount = '', 
                        account_id = '', 
                        src_asset_id = '', 
                        dest_asset_id = '', 
                        slippage_basis_points = 0, ), 
                    output = fireblocks.models.conversion_operation_execution_output.ConversionOperationExecutionOutput(
                        amount = fireblocks.models.asset_amount.AssetAmount(
                            amount = '', 
                            asset_id = '', ), 
                        fee = fireblocks.models.asset_amount.AssetAmount(
                            amount = '', 
                            asset_id = '', ), 
                        conversion_rate = '', ), 
                    started_at = 1.337, 
                    finished_at = 1.337, 
                    failure = fireblocks.models.conversion_operation_failure.ConversionOperationFailure(
                        reason = 'INVALID_AMOUNT', 
                        data = {
                            'key' : null
                            }, ), )
            )
        else:
            return ExecutionConversionOperation(
                operation_id = '',
                status = 'PENDING',
                operation_type = 'CONVERSION',
        )
        """

    def testExecutionConversionOperation(self):
        """Test ExecutionConversionOperation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
