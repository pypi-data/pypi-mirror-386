# coding: utf-8

"""
Fireblocks API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.6.2
Contact: support@fireblocks.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from fireblocks.models.execution_disbursement_operation import (
    ExecutionDisbursementOperation,
)


class TestExecutionDisbursementOperation(unittest.TestCase):
    """ExecutionDisbursementOperation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExecutionDisbursementOperation:
        """Test ExecutionDisbursementOperation
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ExecutionDisbursementOperation`
        """
        model = ExecutionDisbursementOperation()
        if include_optional:
            return ExecutionDisbursementOperation(
                operation_id = '',
                status = 'PENDING',
                validation_failure = fireblocks.models.disbursement_validation_failure.DisbursementValidationFailure(
                    reason = 'ACCOUNT_NOT_FOUND', 
                    data = {
                        'key' : null
                        }, ),
                operation_type = 'DISBURSEMENT',
                preview = fireblocks.models.disbursement_operation_preview.DisbursementOperationPreview(
                    input = fireblocks.models.disbursement_operation_input.DisbursementOperationInput(
                        amount = '', 
                        payment_account = fireblocks.models.account.Account(
                            account_id = '', 
                            account_type = 'EXCHANGE_ACCOUNT', ), 
                        instruction_set = [
                            null
                            ], ), 
                    output = fireblocks.models.disbursement_operation_preview_output.DisbursementOperationPreviewOutput(
                        instruction_set = [
                            null
                            ], ), 
                    failure = fireblocks.models.operation_execution_failure.OperationExecutionFailure(
                        reason = '', 
                        data = {
                            'key' : null
                            }, ), ),
                execution = fireblocks.models.disbursement_operation_execution.DisbursementOperationExecution(
                    input = fireblocks.models.disbursement_operation_input.DisbursementOperationInput(
                        amount = '', 
                        payment_account = fireblocks.models.account.Account(
                            account_id = '', 
                            account_type = 'EXCHANGE_ACCOUNT', ), 
                        instruction_set = [
                            null
                            ], ), 
                    output = fireblocks.models.disbursement_operation_execution_output.DisbursementOperationExecutionOutput(
                        instruction_set = [
                            fireblocks.models.disbursement_instruction_output.DisbursementInstructionOutput(
                                amount = fireblocks.models.asset_amount.AssetAmount(
                                    amount = '', 
                                    asset_id = '', ), 
                                fee = fireblocks.models.asset_amount.AssetAmount(
                                    amount = '', 
                                    asset_id = '', ), 
                                payee_account = null, )
                            ], ), 
                    payout_id = '', 
                    started_at = 1.337, 
                    finished_at = 1.337, 
                    failure = fireblocks.models.operation_execution_failure.OperationExecutionFailure(
                        reason = '', 
                        data = {
                            'key' : null
                            }, ), )
            )
        else:
            return ExecutionDisbursementOperation(
                operation_id = '',
                status = 'PENDING',
                operation_type = 'DISBURSEMENT',
        )
        """

    def testExecutionDisbursementOperation(self):
        """Test ExecutionDisbursementOperation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
