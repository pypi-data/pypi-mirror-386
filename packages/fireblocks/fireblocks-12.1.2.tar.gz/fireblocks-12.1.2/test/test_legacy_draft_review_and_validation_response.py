# coding: utf-8

"""
Fireblocks API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.6.2
Contact: support@fireblocks.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from fireblocks.models.legacy_draft_review_and_validation_response import (
    LegacyDraftReviewAndValidationResponse,
)


class TestLegacyDraftReviewAndValidationResponse(unittest.TestCase):
    """LegacyDraftReviewAndValidationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LegacyDraftReviewAndValidationResponse:
        """Test LegacyDraftReviewAndValidationResponse
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `LegacyDraftReviewAndValidationResponse`
        """
        model = LegacyDraftReviewAndValidationResponse()
        if include_optional:
            return LegacyDraftReviewAndValidationResponse(
                draft_response = fireblocks.models.legacy_draft_response.LegacyDraftResponse(
                    status = '', 
                    rules = [
                        fireblocks.models.legacy_policy_rule.LegacyPolicyRule(
                            operator = '', 
                            operators = fireblocks.models.legacy_policy_rule_operators.LegacyPolicyRule_operators(
                                wildcard = '*', 
                                users = [
                                    ''
                                    ], 
                                users_groups = [
                                    ''
                                    ], 
                                services = [
                                    ''
                                    ], ), 
                            transaction_type = 'TRANSFER', 
                            designated_signer = '', 
                            designated_signers = fireblocks.models.legacy_policy_rule_designated_signers.LegacyPolicyRule_designatedSigners(), 
                            type = 'TRANSFER', 
                            action = 'ALLOW', 
                            asset = '', 
                            src_type = null, 
                            src_sub_type = null, 
                            src_id = null, 
                            src = fireblocks.models.legacy_policy_rule_src.LegacyPolicyRule_src(
                                ids = [
                                    [
                                        null
                                        ]
                                    ], ), 
                            dst_type = null, 
                            dst_sub_type = null, 
                            dst_id = null, 
                            dst = fireblocks.models.legacy_policy_rule_dst.LegacyPolicyRule_dst(), 
                            dst_address_type = 'WHITELISTED', 
                            amount_currency = 'USD', 
                            amount_scope = 'SINGLE_TX', 
                            amount = null, 
                            period_sec = 1.337, 
                            authorizers = [
                                ''
                                ], 
                            authorizers_count = 1.337, 
                            authorization_groups = fireblocks.models.legacy_policy_rule_authorization_groups.LegacyPolicyRule_authorizationGroups(
                                logic = 'AND', 
                                allow_operator_as_authorizer = True, 
                                groups = [
                                    fireblocks.models.legacy_policy_rule_authorization_groups_groups_inner.LegacyPolicyRule_authorizationGroups_groups_inner(
                                        th = 1.337, )
                                    ], ), 
                            amount_aggregation = fireblocks.models.legacy_policy_rule_amount_aggregation.LegacyPolicyRule_amountAggregation(
                                src_transfer_peers = 'PER_SINGLE_MATCH', 
                                dst_transfer_peers = 'PER_SINGLE_MATCH', ), 
                            raw_message_signing = fireblocks.models.legacy_policy_rule_raw_message_signing.LegacyPolicyRule_rawMessageSigning(
                                algorithm = '', 
                                derivation_path = fireblocks.models.legacy_policy_rule_raw_message_signing_derivation_path.LegacyPolicyRule_rawMessageSigning_derivationPath(
                                    path = [
                                        1.337
                                        ], ), ), 
                            apply_for_approve = True, 
                            apply_for_typed_message = True, 
                            external_descriptor = '', )
                        ], 
                    draft_id = '', 
                    metadata = fireblocks.models.legacy_policy_metadata.LegacyPolicyMetadata(
                        edited_by = '', 
                        edited_at = '', 
                        published_by = '', 
                        published_at = '', ), ),
                validation = fireblocks.models.legacy_policy_validation.LegacyPolicyValidation(
                    status = '', 
                    check_result = fireblocks.models.legacy_policy_check_result.LegacyPolicyCheckResult(
                        errors = 1.337, 
                        results = [
                            fireblocks.models.legacy_policy_rule_check_result.LegacyPolicyRuleCheckResult(
                                index = 1.337, 
                                status = 'ok', 
                                errors = [
                                    fireblocks.models.legacy_policy_rule_error.LegacyPolicyRuleError(
                                        error_message = '', 
                                        error_code = 1.337, 
                                        error_code_name = '', 
                                        error_field = 'operator', )
                                    ], )
                            ], ), )
            )
        else:
            return LegacyDraftReviewAndValidationResponse(
                draft_response = fireblocks.models.legacy_draft_response.LegacyDraftResponse(
                    status = '', 
                    rules = [
                        fireblocks.models.legacy_policy_rule.LegacyPolicyRule(
                            operator = '', 
                            operators = fireblocks.models.legacy_policy_rule_operators.LegacyPolicyRule_operators(
                                wildcard = '*', 
                                users = [
                                    ''
                                    ], 
                                users_groups = [
                                    ''
                                    ], 
                                services = [
                                    ''
                                    ], ), 
                            transaction_type = 'TRANSFER', 
                            designated_signer = '', 
                            designated_signers = fireblocks.models.legacy_policy_rule_designated_signers.LegacyPolicyRule_designatedSigners(), 
                            type = 'TRANSFER', 
                            action = 'ALLOW', 
                            asset = '', 
                            src_type = null, 
                            src_sub_type = null, 
                            src_id = null, 
                            src = fireblocks.models.legacy_policy_rule_src.LegacyPolicyRule_src(
                                ids = [
                                    [
                                        null
                                        ]
                                    ], ), 
                            dst_type = null, 
                            dst_sub_type = null, 
                            dst_id = null, 
                            dst = fireblocks.models.legacy_policy_rule_dst.LegacyPolicyRule_dst(), 
                            dst_address_type = 'WHITELISTED', 
                            amount_currency = 'USD', 
                            amount_scope = 'SINGLE_TX', 
                            amount = null, 
                            period_sec = 1.337, 
                            authorizers = [
                                ''
                                ], 
                            authorizers_count = 1.337, 
                            authorization_groups = fireblocks.models.legacy_policy_rule_authorization_groups.LegacyPolicyRule_authorizationGroups(
                                logic = 'AND', 
                                allow_operator_as_authorizer = True, 
                                groups = [
                                    fireblocks.models.legacy_policy_rule_authorization_groups_groups_inner.LegacyPolicyRule_authorizationGroups_groups_inner(
                                        th = 1.337, )
                                    ], ), 
                            amount_aggregation = fireblocks.models.legacy_policy_rule_amount_aggregation.LegacyPolicyRule_amountAggregation(
                                src_transfer_peers = 'PER_SINGLE_MATCH', 
                                dst_transfer_peers = 'PER_SINGLE_MATCH', ), 
                            raw_message_signing = fireblocks.models.legacy_policy_rule_raw_message_signing.LegacyPolicyRule_rawMessageSigning(
                                algorithm = '', 
                                derivation_path = fireblocks.models.legacy_policy_rule_raw_message_signing_derivation_path.LegacyPolicyRule_rawMessageSigning_derivationPath(
                                    path = [
                                        1.337
                                        ], ), ), 
                            apply_for_approve = True, 
                            apply_for_typed_message = True, 
                            external_descriptor = '', )
                        ], 
                    draft_id = '', 
                    metadata = fireblocks.models.legacy_policy_metadata.LegacyPolicyMetadata(
                        edited_by = '', 
                        edited_at = '', 
                        published_by = '', 
                        published_at = '', ), ),
                validation = fireblocks.models.legacy_policy_validation.LegacyPolicyValidation(
                    status = '', 
                    check_result = fireblocks.models.legacy_policy_check_result.LegacyPolicyCheckResult(
                        errors = 1.337, 
                        results = [
                            fireblocks.models.legacy_policy_rule_check_result.LegacyPolicyRuleCheckResult(
                                index = 1.337, 
                                status = 'ok', 
                                errors = [
                                    fireblocks.models.legacy_policy_rule_error.LegacyPolicyRuleError(
                                        error_message = '', 
                                        error_code = 1.337, 
                                        error_code_name = '', 
                                        error_field = 'operator', )
                                    ], )
                            ], ), ),
        )
        """

    def testLegacyDraftReviewAndValidationResponse(self):
        """Test LegacyDraftReviewAndValidationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
