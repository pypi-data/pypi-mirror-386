"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pytest
from unittest.mock import patch, MagicMock
from fireblocks.client import Fireblocks
from fireblocks.client_configuration import ClientConfiguration
from fireblocks.threaded_api_client import ThreadedApiClient
from fireblocks.api.api_user_api import ApiUserApi
from fireblocks.api.assets_api import AssetsApi
from fireblocks.api.audit_logs_api import AuditLogsApi
from fireblocks.api.blockchains_assets_api import BlockchainsAssetsApi
from fireblocks.api.compliance_api import ComplianceApi
from fireblocks.api.compliance_screening_configuration_api import ComplianceScreeningConfigurationApi
from fireblocks.api.connected_accounts_beta_api import ConnectedAccountsBetaApi
from fireblocks.api.console_user_api import ConsoleUserApi
from fireblocks.api.contract_interactions_api import ContractInteractionsApi
from fireblocks.api.contract_templates_api import ContractTemplatesApi
from fireblocks.api.contracts_api import ContractsApi
from fireblocks.api.cosigners_beta_api import CosignersBetaApi
from fireblocks.api.deployed_contracts_api import DeployedContractsApi
from fireblocks.api.embedded_wallets_api import EmbeddedWalletsApi
from fireblocks.api.exchange_accounts_api import ExchangeAccountsApi
from fireblocks.api.external_wallets_api import ExternalWalletsApi
from fireblocks.api.fiat_accounts_api import FiatAccountsApi
from fireblocks.api.gas_stations_api import GasStationsApi
from fireblocks.api.internal_wallets_api import InternalWalletsApi
from fireblocks.api.job_management_api import JobManagementApi
from fireblocks.api.key_link_beta_api import KeyLinkBetaApi
from fireblocks.api.keys_beta_api import KeysBetaApi
from fireblocks.api.nfts_api import NFTsApi
from fireblocks.api.network_connections_api import NetworkConnectionsApi
from fireblocks.api.ota_beta_api import OTABetaApi
from fireblocks.api.off_exchanges_api import OffExchangesApi
from fireblocks.api.payments_payout_api import PaymentsPayoutApi
from fireblocks.api.policy_editor_v2_beta_api import PolicyEditorV2BetaApi
from fireblocks.api.policy_editor_beta_api import PolicyEditorBetaApi
from fireblocks.api.reset_device_api import ResetDeviceApi
from fireblocks.api.smart_transfer_api import SmartTransferApi
from fireblocks.api.staking_api import StakingApi
from fireblocks.api.tags_api import TagsApi
from fireblocks.api.tokenization_api import TokenizationApi
from fireblocks.api.trading_beta_api import TradingBetaApi
from fireblocks.api.transactions_api import TransactionsApi
from fireblocks.api.travel_rule_api import TravelRuleApi
from fireblocks.api.user_groups_beta_api import UserGroupsBetaApi
from fireblocks.api.users_api import UsersApi
from fireblocks.api.vaults_api import VaultsApi
from fireblocks.api.web3_connections_api import Web3ConnectionsApi
from fireblocks.api.webhooks_api import WebhooksApi
from fireblocks.api.webhooks_v2_api import WebhooksV2Api
from fireblocks.api.workspace_status_beta_api import WorkspaceStatusBetaApi
from fireblocks.api.whitelist_ip_addresses_api import WhitelistIpAddressesApi

@pytest.fixture
def fireblocks_instance(mocker):
    try:
        mocker.patch('fireblocks.client.ThreadedApiClient', return_value=MagicMock(spec=ThreadedApiClient))
        config = ClientConfiguration(api_key="dummy_api_key", secret_key="dummy_secret_key", base_path="dummy_base_path")
        return Fireblocks(config)
    except Exception as e:
        return e

def test_fireblocks_construction(fireblocks_instance):
    assert isinstance(fireblocks_instance, Fireblocks)
    assert isinstance(fireblocks_instance._api_client, ThreadedApiClient)

def test_get_api_user(fireblocks_instance):
    assert isinstance(fireblocks_instance.api_user, ApiUserApi)

def test_get_assets(fireblocks_instance):
    assert isinstance(fireblocks_instance.assets, AssetsApi)

def test_get_audit_logs(fireblocks_instance):
    assert isinstance(fireblocks_instance.audit_logs, AuditLogsApi)

def test_get_blockchains_assets(fireblocks_instance):
    assert isinstance(fireblocks_instance.blockchains_assets, BlockchainsAssetsApi)

def test_get_compliance(fireblocks_instance):
    assert isinstance(fireblocks_instance.compliance, ComplianceApi)

def test_get_compliance_screening_configuration(fireblocks_instance):
    assert isinstance(fireblocks_instance.compliance_screening_configuration, ComplianceScreeningConfigurationApi)

def test_get_connected_accounts_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.connected_accounts_beta, ConnectedAccountsBetaApi)

def test_get_console_user(fireblocks_instance):
    assert isinstance(fireblocks_instance.console_user, ConsoleUserApi)

def test_get_contract_interactions(fireblocks_instance):
    assert isinstance(fireblocks_instance.contract_interactions, ContractInteractionsApi)

def test_get_contract_templates(fireblocks_instance):
    assert isinstance(fireblocks_instance.contract_templates, ContractTemplatesApi)

def test_get_contracts(fireblocks_instance):
    assert isinstance(fireblocks_instance.contracts, ContractsApi)

def test_get_cosigners_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.cosigners_beta, CosignersBetaApi)

def test_get_deployed_contracts(fireblocks_instance):
    assert isinstance(fireblocks_instance.deployed_contracts, DeployedContractsApi)

def test_get_embedded_wallets(fireblocks_instance):
    assert isinstance(fireblocks_instance.embedded_wallets, EmbeddedWalletsApi)

def test_get_exchange_accounts(fireblocks_instance):
    assert isinstance(fireblocks_instance.exchange_accounts, ExchangeAccountsApi)

def test_get_external_wallets(fireblocks_instance):
    assert isinstance(fireblocks_instance.external_wallets, ExternalWalletsApi)

def test_get_fiat_accounts(fireblocks_instance):
    assert isinstance(fireblocks_instance.fiat_accounts, FiatAccountsApi)

def test_get_gas_stations(fireblocks_instance):
    assert isinstance(fireblocks_instance.gas_stations, GasStationsApi)

def test_get_internal_wallets(fireblocks_instance):
    assert isinstance(fireblocks_instance.internal_wallets, InternalWalletsApi)

def test_get_job_management(fireblocks_instance):
    assert isinstance(fireblocks_instance.job_management, JobManagementApi)

def test_get_key_link_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.key_link_beta, KeyLinkBetaApi)

def test_get_keys_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.keys_beta, KeysBetaApi)

def test_get_nfts(fireblocks_instance):
    assert isinstance(fireblocks_instance.nfts, NFTsApi)

def test_get_network_connections(fireblocks_instance):
    assert isinstance(fireblocks_instance.network_connections, NetworkConnectionsApi)

def test_get_ota_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.ota_beta, OTABetaApi)

def test_get_off_exchanges(fireblocks_instance):
    assert isinstance(fireblocks_instance.off_exchanges, OffExchangesApi)

def test_get_payments_payout(fireblocks_instance):
    assert isinstance(fireblocks_instance.payments_payout, PaymentsPayoutApi)

def test_get_policy_editor_v2_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.policy_editor_v2_beta, PolicyEditorV2BetaApi)

def test_get_policy_editor_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.policy_editor_beta, PolicyEditorBetaApi)

def test_get_reset_device(fireblocks_instance):
    assert isinstance(fireblocks_instance.reset_device, ResetDeviceApi)

def test_get_smart_transfer(fireblocks_instance):
    assert isinstance(fireblocks_instance.smart_transfer, SmartTransferApi)

def test_get_staking(fireblocks_instance):
    assert isinstance(fireblocks_instance.staking, StakingApi)

def test_get_tags(fireblocks_instance):
    assert isinstance(fireblocks_instance.tags, TagsApi)

def test_get_tokenization(fireblocks_instance):
    assert isinstance(fireblocks_instance.tokenization, TokenizationApi)

def test_get_trading_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.trading_beta, TradingBetaApi)

def test_get_transactions(fireblocks_instance):
    assert isinstance(fireblocks_instance.transactions, TransactionsApi)

def test_get_travel_rule(fireblocks_instance):
    assert isinstance(fireblocks_instance.travel_rule, TravelRuleApi)

def test_get_user_groups_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.user_groups_beta, UserGroupsBetaApi)

def test_get_users(fireblocks_instance):
    assert isinstance(fireblocks_instance.users, UsersApi)

def test_get_vaults(fireblocks_instance):
    assert isinstance(fireblocks_instance.vaults, VaultsApi)

def test_get_web3_connections(fireblocks_instance):
    assert isinstance(fireblocks_instance.web3_connections, Web3ConnectionsApi)

def test_get_webhooks(fireblocks_instance):
    assert isinstance(fireblocks_instance.webhooks, WebhooksApi)

def test_get_webhooks_v2(fireblocks_instance):
    assert isinstance(fireblocks_instance.webhooks_v2, WebhooksV2Api)

def test_get_workspace_status_beta(fireblocks_instance):
    assert isinstance(fireblocks_instance.workspace_status_beta, WorkspaceStatusBetaApi)

def test_get_whitelist_ip_addresses(fireblocks_instance):
    assert isinstance(fireblocks_instance.whitelist_ip_addresses, WhitelistIpAddressesApi)

