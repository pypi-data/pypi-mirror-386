# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WalletAssetAdditionalInfo(BaseModel):
    """
    WalletAssetAdditionalInfo
    """ # noqa: E501
    account_holder_given_name: Optional[StrictStr] = Field(default=None, alias="accountHolderGivenName")
    account_holder_surname: Optional[StrictStr] = Field(default=None, alias="accountHolderSurname")
    account_holder_city: Optional[StrictStr] = Field(default=None, alias="accountHolderCity")
    account_holder_country: Optional[StrictStr] = Field(default=None, alias="accountHolderCountry")
    account_holder_address1: Optional[StrictStr] = Field(default=None, alias="accountHolderAddress1")
    account_holder_address2: Optional[StrictStr] = Field(default=None, alias="accountHolderAddress2")
    account_holder_district: Optional[StrictStr] = Field(default=None, alias="accountHolderDistrict")
    account_holder_postal_code: Optional[StrictStr] = Field(default=None, alias="accountHolderPostalCode")
    aba_routing_number: Optional[StrictStr] = Field(default=None, alias="abaRoutingNumber")
    aba_account_number: Optional[StrictStr] = Field(default=None, alias="abaAccountNumber")
    aba_country: Optional[StrictStr] = Field(default=None, alias="abaCountry")
    iban: Optional[StrictStr] = None
    iban_city: Optional[StrictStr] = Field(default=None, alias="ibanCity")
    iban_country: Optional[StrictStr] = Field(default=None, alias="ibanCountry")
    spei_clabe: Optional[StrictStr] = Field(default=None, alias="speiClabe")
    spei_name: Optional[StrictStr] = Field(default=None, alias="speiName")
    __properties: ClassVar[List[str]] = ["accountHolderGivenName", "accountHolderSurname", "accountHolderCity", "accountHolderCountry", "accountHolderAddress1", "accountHolderAddress2", "accountHolderDistrict", "accountHolderPostalCode", "abaRoutingNumber", "abaAccountNumber", "abaCountry", "iban", "ibanCity", "ibanCountry", "speiClabe", "speiName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WalletAssetAdditionalInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WalletAssetAdditionalInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountHolderGivenName": obj.get("accountHolderGivenName"),
            "accountHolderSurname": obj.get("accountHolderSurname"),
            "accountHolderCity": obj.get("accountHolderCity"),
            "accountHolderCountry": obj.get("accountHolderCountry"),
            "accountHolderAddress1": obj.get("accountHolderAddress1"),
            "accountHolderAddress2": obj.get("accountHolderAddress2"),
            "accountHolderDistrict": obj.get("accountHolderDistrict"),
            "accountHolderPostalCode": obj.get("accountHolderPostalCode"),
            "abaRoutingNumber": obj.get("abaRoutingNumber"),
            "abaAccountNumber": obj.get("abaAccountNumber"),
            "abaCountry": obj.get("abaCountry"),
            "iban": obj.get("iban"),
            "ibanCity": obj.get("ibanCity"),
            "ibanCountry": obj.get("ibanCountry"),
            "speiClabe": obj.get("speiClabe"),
            "speiName": obj.get("speiName")
        })
        return _obj


