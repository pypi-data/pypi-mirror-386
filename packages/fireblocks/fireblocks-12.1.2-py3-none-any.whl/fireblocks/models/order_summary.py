# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.access_type import AccessType
from fireblocks.models.account_reference import AccountReference
from fireblocks.models.order_status import OrderStatus
from fireblocks.models.settlement_source_account import SettlementSourceAccount
from typing import Optional, Set
from typing_extensions import Self

class OrderSummary(BaseModel):
    """
    OrderSummary
    """ # noqa: E501
    id: StrictStr
    via: AccessType
    side: StrictStr = Field(description="Side of the order")
    base_amount: StrictStr = Field(alias="baseAmount")
    quote_amount: Optional[StrictStr] = Field(default=None, alias="quoteAmount")
    base_asset_id: StrictStr = Field(alias="baseAssetId")
    quote_asset_id: StrictStr = Field(alias="quoteAssetId")
    status: OrderStatus
    destination: AccountReference
    source: Optional[SettlementSourceAccount] = None
    created_at: datetime = Field(alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "via", "side", "baseAmount", "quoteAmount", "baseAssetId", "quoteAssetId", "status", "destination", "source", "createdAt"]

    @field_validator('side')
    def side_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BUY', 'SELL']):
            raise ValueError("must be one of enum values ('BUY', 'SELL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of via
        if self.via:
            _dict['via'] = self.via.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "via": AccessType.from_dict(obj["via"]) if obj.get("via") is not None else None,
            "side": obj.get("side"),
            "baseAmount": obj.get("baseAmount"),
            "quoteAmount": obj.get("quoteAmount"),
            "baseAssetId": obj.get("baseAssetId"),
            "quoteAssetId": obj.get("quoteAssetId"),
            "status": obj.get("status"),
            "destination": AccountReference.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "source": SettlementSourceAccount.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "createdAt": obj.get("createdAt")
        })
        return _obj


