# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SepaPaymentInfo(BaseModel):
    """
    SEPA payment information for European Single Euro Payments Area transfers
    """ # noqa: E501
    rail: StrictStr = Field(description="The payment rail type for SEPA transfers")
    addressing_system: StrictStr = Field(description="The addressing system used for SEPA transfers", alias="addressingSystem")
    account_holder_given_name: StrictStr = Field(description="The given name (first name) of the account holder", alias="accountHolderGivenName")
    account_holder_surname: StrictStr = Field(description="The surname (last name) of the account holder", alias="accountHolderSurname")
    account_holder_country: Optional[StrictStr] = Field(default=None, description="The country where the account holder resides (ISO 3166-1 alpha-2 code)", alias="accountHolderCountry")
    account_holder_address: Optional[StrictStr] = Field(default=None, description="The address of the account holder", alias="accountHolderAddress")
    iban: StrictStr = Field(description="The International Bank Account Number (IBAN)")
    country: StrictStr = Field(description="The country for the transfer (ISO 3166-1 alpha-2 code)")
    bic: Optional[StrictStr] = Field(default=None, description="The Bank Identifier Code (BIC/SWIFT code)")
    bank_name: Optional[StrictStr] = Field(default=None, description="The name of the bank", alias="bankName")
    bank_branch: Optional[StrictStr] = Field(default=None, description="The bank branch information", alias="bankBranch")
    bank_address: Optional[StrictStr] = Field(default=None, description="The address of the bank", alias="bankAddress")
    purpose_code: Optional[StrictStr] = Field(default=None, description="The purpose code for the transfer", alias="purposeCode")
    tax_id: Optional[StrictStr] = Field(default=None, description="The tax identification number", alias="taxId")
    __properties: ClassVar[List[str]] = ["rail", "addressingSystem", "accountHolderGivenName", "accountHolderSurname", "accountHolderCountry", "accountHolderAddress", "iban", "country", "bic", "bankName", "bankBranch", "bankAddress", "purposeCode", "taxId"]

    @field_validator('rail')
    def rail_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SEPA']):
            raise ValueError("must be one of enum values ('SEPA')")
        return value

    @field_validator('addressing_system')
    def addressing_system_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['IBAN']):
            raise ValueError("must be one of enum values ('IBAN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SepaPaymentInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SepaPaymentInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rail": obj.get("rail"),
            "addressingSystem": obj.get("addressingSystem"),
            "accountHolderGivenName": obj.get("accountHolderGivenName"),
            "accountHolderSurname": obj.get("accountHolderSurname"),
            "accountHolderCountry": obj.get("accountHolderCountry"),
            "accountHolderAddress": obj.get("accountHolderAddress"),
            "iban": obj.get("iban"),
            "country": obj.get("country"),
            "bic": obj.get("bic"),
            "bankName": obj.get("bankName"),
            "bankBranch": obj.get("bankBranch"),
            "bankAddress": obj.get("bankAddress"),
            "purposeCode": obj.get("purposeCode"),
            "taxId": obj.get("taxId")
        })
        return _obj


