# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MomoPaymentInfo(BaseModel):
    """
    Mobile Money (MOMO) payment information for African mobile payment services
    """ # noqa: E501
    rail: StrictStr = Field(description="The payment rail type for mobile money transfers")
    addressing_system: StrictStr = Field(description="The addressing system used for mobile money transfers", alias="addressingSystem")
    account_holder_given_name: StrictStr = Field(description="The given name (first name) of the account holder", alias="accountHolderGivenName")
    account_holder_surname: StrictStr = Field(description="The surname (last name) of the account holder", alias="accountHolderSurname")
    country: StrictStr = Field(description="The country for the transfer (ISO 3166-1 alpha-2 code)")
    mobile_phone_number: StrictStr = Field(description="The mobile phone number associated with the mobile money account", alias="mobilePhoneNumber")
    provider: StrictStr = Field(description="The mobile money service provider")
    beneficiary_document_id: Optional[StrictStr] = Field(default=None, description="The document ID of the beneficiary", alias="beneficiaryDocumentId")
    beneficiary_relationship: Optional[StrictStr] = Field(default=None, description="The relationship between sender and beneficiary", alias="beneficiaryRelationship")
    __properties: ClassVar[List[str]] = ["rail", "addressingSystem", "accountHolderGivenName", "accountHolderSurname", "country", "mobilePhoneNumber", "provider", "beneficiaryDocumentId", "beneficiaryRelationship"]

    @field_validator('rail')
    def rail_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MOMO']):
            raise ValueError("must be one of enum values ('MOMO')")
        return value

    @field_validator('addressing_system')
    def addressing_system_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MOMO']):
            raise ValueError("must be one of enum values ('MOMO')")
        return value

    @field_validator('provider')
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['M_PESA', 'AIRTEL', 'MTN', 'TIGO']):
            raise ValueError("must be one of enum values ('M_PESA', 'AIRTEL', 'MTN', 'TIGO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MomoPaymentInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MomoPaymentInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rail": obj.get("rail"),
            "addressingSystem": obj.get("addressingSystem"),
            "accountHolderGivenName": obj.get("accountHolderGivenName"),
            "accountHolderSurname": obj.get("accountHolderSurname"),
            "country": obj.get("country"),
            "mobilePhoneNumber": obj.get("mobilePhoneNumber"),
            "provider": obj.get("provider"),
            "beneficiaryDocumentId": obj.get("beneficiaryDocumentId"),
            "beneficiaryRelationship": obj.get("beneficiaryRelationship")
        })
        return _obj


