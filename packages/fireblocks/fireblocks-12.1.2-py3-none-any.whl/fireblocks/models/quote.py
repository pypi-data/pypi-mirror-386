# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from fireblocks.models.access_type import AccessType
from fireblocks.models.execution_step_details import ExecutionStepDetails
from fireblocks.models.fee import Fee
from typing import Optional, Set
from typing_extensions import Self

class Quote(BaseModel):
    """
    Quote
    """ # noqa: E501
    via: AccessType
    id: StrictStr
    type: StrictStr = Field(description="Indicates this is an indicative quote")
    quote_asset_id: StrictStr = Field(alias="quoteAssetId")
    base_asset_id: StrictStr = Field(alias="baseAssetId")
    base_amount: StrictStr = Field(alias="baseAmount")
    quote_amount: StrictStr = Field(alias="quoteAmount")
    price_impact: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceImpact")
    quote_min_amount: Optional[StrictStr] = Field(default=None, alias="quoteMinAmount")
    execution_steps: Optional[List[ExecutionStepDetails]] = Field(default=None, alias="executionSteps")
    general_fees: Optional[List[Fee]] = Field(default=None, alias="generalFees")
    side: StrictStr = Field(description="Side of the order")
    expires_at: datetime = Field(description="ISO 8601 timestamp of the expiration time of the quote.", alias="expiresAt")
    __properties: ClassVar[List[str]] = ["via", "id", "type", "quoteAssetId", "baseAssetId", "baseAmount", "quoteAmount", "priceImpact", "quoteMinAmount", "executionSteps", "generalFees", "side", "expiresAt"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['INDICATIVE']):
            raise ValueError("must be one of enum values ('INDICATIVE')")
        return value

    @field_validator('side')
    def side_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BUY', 'SELL']):
            raise ValueError("must be one of enum values ('BUY', 'SELL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Quote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of via
        if self.via:
            _dict['via'] = self.via.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in execution_steps (list)
        _items = []
        if self.execution_steps:
            for _item_execution_steps in self.execution_steps:
                if _item_execution_steps:
                    _items.append(_item_execution_steps.to_dict())
            _dict['executionSteps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in general_fees (list)
        _items = []
        if self.general_fees:
            for _item_general_fees in self.general_fees:
                if _item_general_fees:
                    _items.append(_item_general_fees.to_dict())
            _dict['generalFees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Quote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "via": AccessType.from_dict(obj["via"]) if obj.get("via") is not None else None,
            "id": obj.get("id"),
            "type": obj.get("type"),
            "quoteAssetId": obj.get("quoteAssetId"),
            "baseAssetId": obj.get("baseAssetId"),
            "baseAmount": obj.get("baseAmount"),
            "quoteAmount": obj.get("quoteAmount"),
            "priceImpact": obj.get("priceImpact"),
            "quoteMinAmount": obj.get("quoteMinAmount"),
            "executionSteps": [ExecutionStepDetails.from_dict(_item) for _item in obj["executionSteps"]] if obj.get("executionSteps") is not None else None,
            "generalFees": [Fee.from_dict(_item) for _item in obj["generalFees"]] if obj.get("generalFees") is not None else None,
            "side": obj.get("side"),
            "expiresAt": obj.get("expiresAt")
        })
        return _obj


