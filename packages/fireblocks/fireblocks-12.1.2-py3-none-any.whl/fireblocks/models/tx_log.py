# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class TxLog(BaseModel):
    """
    TxLog
    """ # noqa: E501
    address: StrictStr = Field(description="The log address")
    topics: List[StrictStr] = Field(description="Array of log topics")
    data: StrictStr = Field(description="The log data")
    block_number: StrictInt = Field(description="Block number where the log occurred", alias="blockNumber")
    transaction_hash: StrictStr = Field(description="Transaction hash associated with the log", alias="transactionHash")
    transaction_index: StrictInt = Field(description="Transaction index in the block", alias="transactionIndex")
    block_hash: StrictStr = Field(description="The hash of the block", alias="blockHash")
    log_index: StrictInt = Field(description="Log index in the block", alias="logIndex")
    removed: StrictBool = Field(description="Indicates if the log was removed")
    __properties: ClassVar[List[str]] = ["address", "topics", "data", "blockNumber", "transactionHash", "transactionIndex", "blockHash", "logIndex", "removed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TxLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TxLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "topics": obj.get("topics"),
            "data": obj.get("data"),
            "blockNumber": obj.get("blockNumber"),
            "transactionHash": obj.get("transactionHash"),
            "transactionIndex": obj.get("transactionIndex"),
            "blockHash": obj.get("blockHash"),
            "logIndex": obj.get("logIndex"),
            "removed": obj.get("removed")
        })
        return _obj


