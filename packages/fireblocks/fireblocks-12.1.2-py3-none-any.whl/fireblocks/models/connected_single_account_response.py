# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.connected_account_approval_status import ConnectedAccountApprovalStatus
from fireblocks.models.connected_account_manifest import ConnectedAccountManifest
from fireblocks.models.connected_account_total_balance import ConnectedAccountTotalBalance
from typing import Optional, Set
from typing_extensions import Self

class ConnectedSingleAccountResponse(BaseModel):
    """
    ConnectedSingleAccountResponse
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of the connected account.")
    name: StrictStr = Field(description="Human-readable name of the connected account.")
    provider_id: StrictStr = Field(description="The ID of the venue the account belongs to.", alias="providerId")
    status: ConnectedAccountApprovalStatus
    total_balance: ConnectedAccountTotalBalance = Field(alias="totalBalance")
    manifest: ConnectedAccountManifest
    parent_id: Optional[StrictStr] = Field(default=None, description="The ID of the parent main account, if this is a sub account.", alias="parentId")
    sub_accounts_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of sub-accounts associated with this connected account.", alias="subAccountsIds")
    __properties: ClassVar[List[str]] = ["id", "name", "providerId", "status", "totalBalance", "manifest", "parentId", "subAccountsIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectedSingleAccountResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total_balance
        if self.total_balance:
            _dict['totalBalance'] = self.total_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manifest
        if self.manifest:
            _dict['manifest'] = self.manifest.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectedSingleAccountResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "providerId": obj.get("providerId"),
            "status": obj.get("status"),
            "totalBalance": ConnectedAccountTotalBalance.from_dict(obj["totalBalance"]) if obj.get("totalBalance") is not None else None,
            "manifest": ConnectedAccountManifest.from_dict(obj["manifest"]) if obj.get("manifest") is not None else None,
            "parentId": obj.get("parentId"),
            "subAccountsIds": obj.get("subAccountsIds")
        })
        return _obj


