# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.asset_feature import AssetFeature
from fireblocks.models.asset_media import AssetMedia
from fireblocks.models.asset_note import AssetNote
from fireblocks.models.asset_scope import AssetScope
from typing import Optional, Set
from typing_extensions import Self

class AssetDetailsMetadata(BaseModel):
    """
    AssetDetailsMetadata
    """ # noqa: E501
    scope: AssetScope
    verified: StrictBool = Field(description="Is asset verified by Fireblocks")
    deprecated: StrictBool = Field(description="Is asset deprecated")
    deprecation_referral_id: Optional[StrictStr] = Field(default=None, description="New asset ID replacement", alias="deprecationReferralId")
    website: Optional[StrictStr] = Field(default=None, description="Vendor’s website")
    media: Optional[List[AssetMedia]] = Field(default=None, description="Asset’s media")
    note: Optional[AssetNote] = None
    features: Optional[List[AssetFeature]] = Field(default=None, description="Asset features")
    __properties: ClassVar[List[str]] = ["scope", "verified", "deprecated", "deprecationReferralId", "website", "media", "note", "features"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetDetailsMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in media (list)
        _items = []
        if self.media:
            for _item_media in self.media:
                if _item_media:
                    _items.append(_item_media.to_dict())
            _dict['media'] = _items
        # override the default output from pydantic by calling `to_dict()` of note
        if self.note:
            _dict['note'] = self.note.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetDetailsMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scope": obj.get("scope"),
            "verified": obj.get("verified"),
            "deprecated": obj.get("deprecated"),
            "deprecationReferralId": obj.get("deprecationReferralId"),
            "website": obj.get("website"),
            "media": [AssetMedia.from_dict(_item) for _item in obj["media"]] if obj.get("media") is not None else None,
            "note": AssetNote.from_dict(obj["note"]) if obj.get("note") is not None else None,
            "features": obj.get("features")
        })
        return _obj


