# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConnectedAccountBalances(BaseModel):
    """
    ConnectedAccountBalances
    """ # noqa: E501
    asset_id: StrictStr = Field(description="Asset identifier (e.g., BTC, ETH, USDC).", alias="assetId")
    available_amount: StrictStr = Field(description="Amount available for use.", alias="availableAmount")
    total_amount: StrictStr = Field(description="Total amount including locked/held balances.", alias="totalAmount")
    locked_amount: Optional[StrictStr] = Field(default=None, description="Amount currently locked/held.", alias="lockedAmount")
    credit_amount: Optional[StrictStr] = Field(default=None, description="Credit line amount, if applicable (0 when not used).", alias="creditAmount")
    balance_type: StrictStr = Field(description="Wallet type/category (e.g., SPOT, MARGIN, FUNDING).", alias="balanceType")
    balance_name: Optional[StrictStr] = Field(default=None, description="Display name for the balance type (at the provider)", alias="balanceName")
    __properties: ClassVar[List[str]] = ["assetId", "availableAmount", "totalAmount", "lockedAmount", "creditAmount", "balanceType", "balanceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectedAccountBalances from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectedAccountBalances from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetId": obj.get("assetId"),
            "availableAmount": obj.get("availableAmount"),
            "totalAmount": obj.get("totalAmount"),
            "lockedAmount": obj.get("lockedAmount"),
            "creditAmount": obj.get("creditAmount"),
            "balanceType": obj.get("balanceType"),
            "balanceName": obj.get("balanceName")
        })
        return _obj


