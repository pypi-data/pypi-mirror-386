# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.account_identifier import AccountIdentifier
from fireblocks.models.account_type2 import AccountType2
from fireblocks.models.policy_operator import PolicyOperator
from typing import Optional, Set
from typing_extensions import Self

class DestinationConfig(BaseModel):
    """
    Destination configuration for policy rules
    """ # noqa: E501
    type: AccountType2
    sub_type: Optional[List[AccountIdentifier]] = Field(default=None, alias="subType")
    ids: Optional[List[AccountIdentifier]] = None
    operator: PolicyOperator
    match_from: Optional[StrictStr] = Field(default=None, description="Whether to match from account or source", alias="matchFrom")
    address_type: StrictStr = Field(description="Type of destination addresses allowed", alias="addressType")
    __properties: ClassVar[List[str]] = ["type", "subType", "ids", "operator", "matchFrom", "addressType"]

    @field_validator('match_from')
    def match_from_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCOUNT', 'SOURCE']):
            raise ValueError("must be one of enum values ('ACCOUNT', 'SOURCE')")
        return value

    @field_validator('address_type')
    def address_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ALL', '*', 'WHITELISTED', 'ONE_TIME', 'OEC_PARTNER']):
            raise ValueError("must be one of enum values ('ALL', '*', 'WHITELISTED', 'ONE_TIME', 'OEC_PARTNER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DestinationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sub_type (list)
        _items = []
        if self.sub_type:
            for _item_sub_type in self.sub_type:
                if _item_sub_type:
                    _items.append(_item_sub_type.to_dict())
            _dict['subType'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ids (list)
        _items = []
        if self.ids:
            for _item_ids in self.ids:
                if _item_ids:
                    _items.append(_item_ids.to_dict())
            _dict['ids'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DestinationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "subType": [AccountIdentifier.from_dict(_item) for _item in obj["subType"]] if obj.get("subType") is not None else None,
            "ids": [AccountIdentifier.from_dict(_item) for _item in obj["ids"]] if obj.get("ids") is not None else None,
            "operator": obj.get("operator"),
            "matchFrom": obj.get("matchFrom"),
            "addressType": obj.get("addressType")
        })
        return _obj


