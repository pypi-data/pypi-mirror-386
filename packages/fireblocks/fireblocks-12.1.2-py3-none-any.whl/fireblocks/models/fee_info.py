# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FeeInfo(BaseModel):
    """
    Details of the transaction's fee.
    """ # noqa: E501
    network_fee: Optional[StrictStr] = Field(default=None, description="The fee paid to the network", alias="networkFee")
    service_fee: Optional[StrictStr] = Field(default=None, description="The total fee deducted by the exchange from the actual requested amount (serviceFee = amount - netAmount)", alias="serviceFee")
    gas_price: Optional[StrictStr] = Field(default=None, alias="gasPrice")
    l1network_fee: Optional[StrictStr] = Field(default=None, description="Layer 1 network fee for Layer 2 blockchain transactions", alias="L1networkFee")
    l2network_fee: Optional[StrictStr] = Field(default=None, description="Layer 2 network fee (gas price component for Layer 2 transactions)", alias="L2networkFee")
    paid_by_relay: Optional[StrictBool] = Field(default=None, description="Wether the fee was paid by the relay or not", alias="paidByRelay")
    relay_type: Optional[StrictStr] = Field(default=None, description="Wether the relay is the same tenant (LOCAL) or another tenant (THIRD_PARTY)", alias="relayType")
    relay_id: Optional[StrictStr] = Field(default=None, description="The vault account ID of the relay", alias="relayId")
    relay_name: Optional[StrictStr] = Field(default=None, description="The name of the tenant, only for THIRD_PARTY relays", alias="relayName")
    fee_usd: Optional[StrictStr] = Field(default=None, description="The USD value of the fee", alias="feeUSD")
    __properties: ClassVar[List[str]] = ["networkFee", "serviceFee", "gasPrice", "L1networkFee", "L2networkFee", "paidByRelay", "relayType", "relayId", "relayName", "feeUSD"]

    @field_validator('relay_type')
    def relay_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOCAL', 'THIRD_PARTY']):
            raise ValueError("must be one of enum values ('LOCAL', 'THIRD_PARTY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FeeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FeeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "networkFee": obj.get("networkFee"),
            "serviceFee": obj.get("serviceFee"),
            "gasPrice": obj.get("gasPrice"),
            "L1networkFee": obj.get("L1networkFee"),
            "L2networkFee": obj.get("L2networkFee"),
            "paidByRelay": obj.get("paidByRelay"),
            "relayType": obj.get("relayType"),
            "relayId": obj.get("relayId"),
            "relayName": obj.get("relayName"),
            "feeUSD": obj.get("feeUSD")
        })
        return _obj


