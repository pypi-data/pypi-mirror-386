# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from fireblocks.models.players import Players
from typing import Optional, Set
from typing_extensions import Self

class MpcKey(BaseModel):
    """
    MpcKey
    """ # noqa: E501
    key_id: Annotated[str, Field(min_length=36, strict=True, max_length=36)] = Field(alias="keyId")
    user_id: Annotated[str, Field(min_length=36, strict=True, max_length=36)] = Field(description="The user id that owns the key", alias="userId")
    algorithm: Union[StrictFloat, StrictInt] = Field(description="The algorithm of the key")
    players: List[Players] = Field(description="The players that are associated with the key")
    last_preprocessed_index: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The last index used on this key", alias="lastPreprocessedIndex")
    __properties: ClassVar[List[str]] = ["keyId", "userId", "algorithm", "players", "lastPreprocessedIndex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MpcKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in players (list)
        _items = []
        if self.players:
            for _item_players in self.players:
                if _item_players:
                    _items.append(_item_players.to_dict())
            _dict['players'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MpcKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyId": obj.get("keyId"),
            "userId": obj.get("userId"),
            "algorithm": obj.get("algorithm"),
            "players": [Players.from_dict(_item) for _item in obj["players"]] if obj.get("players") is not None else None,
            "lastPreprocessedIndex": obj.get("lastPreprocessedIndex")
        })
        return _obj


