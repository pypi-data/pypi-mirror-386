# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from fireblocks.models.account_config import AccountConfig
from fireblocks.models.amount_over_time_config import AmountOverTimeConfig
from fireblocks.models.amount_range import AmountRange
from fireblocks.models.asset_config import AssetConfig
from fireblocks.models.contract_method_pattern import ContractMethodPattern
from fireblocks.models.derivation_path_config import DerivationPathConfig
from fireblocks.models.destination_config import DestinationConfig
from fireblocks.models.initiator_config_pattern import InitiatorConfigPattern
from fireblocks.models.policy_type import PolicyType
from fireblocks.models.program_call_config import ProgramCallConfig
from fireblocks.models.screening_metadata_config import ScreeningMetadataConfig
from fireblocks.models.verdict_config import VerdictConfig
from typing import Optional, Set
from typing_extensions import Self

class PolicyRule(BaseModel):
    """
    V2 Policy rule which is enforced on transactions
    """ # noqa: E501
    name: StrictStr = Field(description="Name of the policy rule")
    id: StrictStr = Field(description="Unique identifier for the policy rule")
    policy_engine_version: StrictStr = Field(description="Policy engine version", alias="policyEngineVersion")
    type: PolicyType
    sub_type: Optional[PolicyType] = Field(default=None, alias="subType")
    initiator: InitiatorConfigPattern
    asset: AssetConfig
    source: AccountConfig
    destination: Optional[DestinationConfig] = None
    account: Optional[AccountConfig] = None
    verdict: VerdictConfig
    amount_over_time: Optional[AmountOverTimeConfig] = Field(default=None, alias="amountOverTime")
    amount: Optional[AmountRange] = None
    external_descriptor: Optional[StrictStr] = Field(default=None, description="External descriptor for the rule", alias="externalDescriptor")
    method: Optional[ContractMethodPattern] = None
    is_global_policy: Optional[StrictBool] = Field(default=None, description="Whether this is a global policy", alias="isGlobalPolicy")
    program_call: Optional[ProgramCallConfig] = Field(default=None, alias="programCall")
    screening_metadata: Optional[ScreeningMetadataConfig] = Field(default=None, alias="screeningMetadata")
    quote_asset: Optional[AssetConfig] = Field(default=None, alias="quoteAsset")
    base_asset: Optional[AssetConfig] = Field(default=None, alias="baseAsset")
    quote_amount: Optional[AmountRange] = Field(default=None, alias="quoteAmount")
    base_amount: Optional[AmountRange] = Field(default=None, alias="baseAmount")
    derivation_path: Optional[DerivationPathConfig] = Field(default=None, alias="derivationPath")
    index: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Index for the policy rule")
    __properties: ClassVar[List[str]] = ["name", "id", "policyEngineVersion", "type", "subType", "initiator", "asset", "source", "destination", "account", "verdict", "amountOverTime", "amount", "externalDescriptor", "method", "isGlobalPolicy", "programCall", "screeningMetadata", "quoteAsset", "baseAsset", "quoteAmount", "baseAmount", "derivationPath", "index"]

    @field_validator('policy_engine_version')
    def policy_engine_version_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['v2']):
            raise ValueError("must be one of enum values ('v2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initiator
        if self.initiator:
            _dict['initiator'] = self.initiator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asset
        if self.asset:
            _dict['asset'] = self.asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verdict
        if self.verdict:
            _dict['verdict'] = self.verdict.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount_over_time
        if self.amount_over_time:
            _dict['amountOverTime'] = self.amount_over_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of method
        if self.method:
            _dict['method'] = self.method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of program_call
        if self.program_call:
            _dict['programCall'] = self.program_call.to_dict()
        # override the default output from pydantic by calling `to_dict()` of screening_metadata
        if self.screening_metadata:
            _dict['screeningMetadata'] = self.screening_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_asset
        if self.quote_asset:
            _dict['quoteAsset'] = self.quote_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of base_asset
        if self.base_asset:
            _dict['baseAsset'] = self.base_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_amount
        if self.quote_amount:
            _dict['quoteAmount'] = self.quote_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of base_amount
        if self.base_amount:
            _dict['baseAmount'] = self.base_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of derivation_path
        if self.derivation_path:
            _dict['derivationPath'] = self.derivation_path.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "id": obj.get("id"),
            "policyEngineVersion": obj.get("policyEngineVersion"),
            "type": obj.get("type"),
            "subType": obj.get("subType"),
            "initiator": InitiatorConfigPattern.from_dict(obj["initiator"]) if obj.get("initiator") is not None else None,
            "asset": AssetConfig.from_dict(obj["asset"]) if obj.get("asset") is not None else None,
            "source": AccountConfig.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "destination": DestinationConfig.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "account": AccountConfig.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "verdict": VerdictConfig.from_dict(obj["verdict"]) if obj.get("verdict") is not None else None,
            "amountOverTime": AmountOverTimeConfig.from_dict(obj["amountOverTime"]) if obj.get("amountOverTime") is not None else None,
            "amount": AmountRange.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "externalDescriptor": obj.get("externalDescriptor"),
            "method": ContractMethodPattern.from_dict(obj["method"]) if obj.get("method") is not None else None,
            "isGlobalPolicy": obj.get("isGlobalPolicy"),
            "programCall": ProgramCallConfig.from_dict(obj["programCall"]) if obj.get("programCall") is not None else None,
            "screeningMetadata": ScreeningMetadataConfig.from_dict(obj["screeningMetadata"]) if obj.get("screeningMetadata") is not None else None,
            "quoteAsset": AssetConfig.from_dict(obj["quoteAsset"]) if obj.get("quoteAsset") is not None else None,
            "baseAsset": AssetConfig.from_dict(obj["baseAsset"]) if obj.get("baseAsset") is not None else None,
            "quoteAmount": AmountRange.from_dict(obj["quoteAmount"]) if obj.get("quoteAmount") is not None else None,
            "baseAmount": AmountRange.from_dict(obj["baseAmount"]) if obj.get("baseAmount") is not None else None,
            "derivationPath": DerivationPathConfig.from_dict(obj["derivationPath"]) if obj.get("derivationPath") is not None else None,
            "index": obj.get("index")
        })
        return _obj


