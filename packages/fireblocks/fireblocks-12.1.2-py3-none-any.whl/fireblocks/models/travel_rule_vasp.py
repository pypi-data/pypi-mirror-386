# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.travel_rule_issuers import TravelRuleIssuers
from typing import Optional, Set
from typing_extensions import Self

class TravelRuleVASP(BaseModel):
    """
    TravelRuleVASP
    """ # noqa: E501
    did: StrictStr = Field(description="The Decentralized Identifier (DID) of the VASP.")
    name: StrictStr = Field(description="The name of the VASP.")
    verification_status: StrictStr = Field(description="The current verification status of the VASP.", alias="verificationStatus")
    address_line1: StrictStr = Field(description="The first line of the VASP's address.", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="The second line of the VASP's address (if applicable).", alias="addressLine2")
    city: StrictStr = Field(description="The city where the VASP is located.")
    country: StrictStr = Field(description="The country where the VASP is registered (ISO-3166 Alpha-2 code).")
    email_domains: StrictStr = Field(description="Comma-separated list of email domains associated with the VASP.", alias="emailDomains")
    website: StrictStr = Field(description="The official website of the VASP.")
    logo: Optional[StrictStr] = Field(default=None, description="URL to the logo of the VASP.")
    legal_structure: StrictStr = Field(description="The legal structure of the VASP (e.g., Corporation, LLC).", alias="legalStructure")
    legal_name: StrictStr = Field(description="The legal name of the VASP.", alias="legalName")
    year_founded: StrictStr = Field(description="The year the VASP was founded.", alias="yearFounded")
    incorporation_country: StrictStr = Field(description="The country where the VASP is incorporated (ISO-3166 Alpha-2 code).", alias="incorporationCountry")
    is_regulated: StrictStr = Field(description="Indicates whether the VASP is regulated.", alias="isRegulated")
    other_names: Optional[StrictStr] = Field(default=None, description="Other names the VASP is known by.", alias="otherNames")
    identification_type: Optional[StrictStr] = Field(default=None, description="The type of identification used by the VASP.", alias="identificationType")
    identification_country: Optional[StrictStr] = Field(default=None, description="The country of identification for the VASP (ISO-3166 Alpha-2 code).", alias="identificationCountry")
    business_number: Optional[StrictStr] = Field(default=None, description="The business registration number of the VASP.", alias="businessNumber")
    regulatory_authorities: Optional[StrictStr] = Field(default=None, description="The regulatory authorities overseeing the VASP.", alias="regulatoryAuthorities")
    jurisdictions: StrictStr = Field(description="The jurisdictions where the VASP operates.")
    street: Optional[StrictStr] = Field(default=None, description="The street name where the VASP is located.")
    number: Optional[StrictStr] = Field(default=None, description="The building number of the VASP's address.")
    unit: Optional[StrictStr] = Field(default=None, description="The unit or suite number of the VASP's address.")
    post_code: Optional[StrictStr] = Field(default=None, description="The postal code of the VASP's location.", alias="postCode")
    state: Optional[StrictStr] = Field(default=None, description="The state or region where the VASP is located.")
    certificates: Optional[StrictStr] = Field(default=None, description="Certificates or licenses held by the VASP.")
    description: Optional[StrictStr] = Field(default=None, description="A brief description of the VASP.")
    travel_rule_openvasp: Optional[StrictStr] = Field(default=None, description="Travel rule compliance status for OpenVASP.", alias="travelRule_OPENVASP")
    travel_rule_sygna: Optional[StrictStr] = Field(default=None, description="Travel rule compliance status for Sygna.", alias="travelRule_SYGNA")
    travel_rule_trisa: Optional[StrictStr] = Field(default=None, description="Travel rule compliance status for TRISA.", alias="travelRule_TRISA")
    travel_rule_trlight: StrictStr = Field(description="Travel rule compliance status for TRLight.", alias="travelRule_TRLIGHT")
    travel_rule_email: Optional[StrictStr] = Field(default=None, description="Travel rule compliance status for EMAIL.", alias="travelRule_EMAIL")
    travel_rule_trp: Optional[StrictStr] = Field(default=None, description="Travel rule compliance status for TRP.", alias="travelRule_TRP")
    travel_rule_shyft: Optional[StrictStr] = Field(default=None, description="Travel rule compliance status for Shyft.", alias="travelRule_SHYFT")
    travel_rule_ustravelrulewg: Optional[StrictStr] = Field(default=None, description="Travel rule compliance status for US Travel Rule WG.", alias="travelRule_USTRAVELRULEWG")
    created_at: StrictStr = Field(description="Timestamp when the VASP record was created.", alias="createdAt")
    created_by: Optional[StrictStr] = Field(default=None, description="User or system that created the VASP record.", alias="createdBy")
    updated_at: Optional[StrictStr] = Field(default=None, description="Timestamp of the last update to the VASP record.", alias="updatedAt")
    updated_by: Optional[StrictStr] = Field(default=None, description="User or system that last updated the VASP record.", alias="updatedBy")
    last_sent_date: Optional[StrictStr] = Field(default=None, description="The last date a transaction was sent by the VASP.", alias="lastSentDate")
    last_received_date: Optional[StrictStr] = Field(default=None, description="The last date a transaction was received by the VASP.", alias="lastReceivedDate")
    documents: Optional[StrictStr] = Field(default=None, description="Documents associated with the VASP.")
    has_admin: StrictBool = Field(description="Indicates if the VASP has an admin.", alias="hasAdmin")
    is_notifiable: StrictBool = Field(description="Indicates if the VASP is notifiable for compliance reasons.", alias="isNotifiable")
    issuers: TravelRuleIssuers
    __properties: ClassVar[List[str]] = ["did", "name", "verificationStatus", "addressLine1", "addressLine2", "city", "country", "emailDomains", "website", "logo", "legalStructure", "legalName", "yearFounded", "incorporationCountry", "isRegulated", "otherNames", "identificationType", "identificationCountry", "businessNumber", "regulatoryAuthorities", "jurisdictions", "street", "number", "unit", "postCode", "state", "certificates", "description", "travelRule_OPENVASP", "travelRule_SYGNA", "travelRule_TRISA", "travelRule_TRLIGHT", "travelRule_EMAIL", "travelRule_TRP", "travelRule_SHYFT", "travelRule_USTRAVELRULEWG", "createdAt", "createdBy", "updatedAt", "updatedBy", "lastSentDate", "lastReceivedDate", "documents", "hasAdmin", "isNotifiable", "issuers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TravelRuleVASP from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of issuers
        if self.issuers:
            _dict['issuers'] = self.issuers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TravelRuleVASP from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "did": obj.get("did"),
            "name": obj.get("name"),
            "verificationStatus": obj.get("verificationStatus"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "emailDomains": obj.get("emailDomains"),
            "website": obj.get("website"),
            "logo": obj.get("logo"),
            "legalStructure": obj.get("legalStructure"),
            "legalName": obj.get("legalName"),
            "yearFounded": obj.get("yearFounded"),
            "incorporationCountry": obj.get("incorporationCountry"),
            "isRegulated": obj.get("isRegulated"),
            "otherNames": obj.get("otherNames"),
            "identificationType": obj.get("identificationType"),
            "identificationCountry": obj.get("identificationCountry"),
            "businessNumber": obj.get("businessNumber"),
            "regulatoryAuthorities": obj.get("regulatoryAuthorities"),
            "jurisdictions": obj.get("jurisdictions"),
            "street": obj.get("street"),
            "number": obj.get("number"),
            "unit": obj.get("unit"),
            "postCode": obj.get("postCode"),
            "state": obj.get("state"),
            "certificates": obj.get("certificates"),
            "description": obj.get("description"),
            "travelRule_OPENVASP": obj.get("travelRule_OPENVASP"),
            "travelRule_SYGNA": obj.get("travelRule_SYGNA"),
            "travelRule_TRISA": obj.get("travelRule_TRISA"),
            "travelRule_TRLIGHT": obj.get("travelRule_TRLIGHT"),
            "travelRule_EMAIL": obj.get("travelRule_EMAIL"),
            "travelRule_TRP": obj.get("travelRule_TRP"),
            "travelRule_SHYFT": obj.get("travelRule_SHYFT"),
            "travelRule_USTRAVELRULEWG": obj.get("travelRule_USTRAVELRULEWG"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "updatedAt": obj.get("updatedAt"),
            "updatedBy": obj.get("updatedBy"),
            "lastSentDate": obj.get("lastSentDate"),
            "lastReceivedDate": obj.get("lastReceivedDate"),
            "documents": obj.get("documents"),
            "hasAdmin": obj.get("hasAdmin"),
            "isNotifiable": obj.get("isNotifiable"),
            "issuers": TravelRuleIssuers.from_dict(obj["issuers"]) if obj.get("issuers") is not None else None
        })
        return _obj


