"""
Fireblocks API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.6.2
Contact: support@fireblocks.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import os
from fireblocks.threaded_api_client import ThreadedApiClient
from fireblocks.client_configuration import ClientConfiguration

from fireblocks.api.api_user_api import ApiUserApi
from fireblocks.api.assets_api import AssetsApi
from fireblocks.api.audit_logs_api import AuditLogsApi
from fireblocks.api.blockchains_assets_api import BlockchainsAssetsApi
from fireblocks.api.compliance_api import ComplianceApi
from fireblocks.api.compliance_screening_configuration_api import (
    ComplianceScreeningConfigurationApi,
)
from fireblocks.api.connected_accounts_beta_api import ConnectedAccountsBetaApi
from fireblocks.api.console_user_api import ConsoleUserApi
from fireblocks.api.contract_interactions_api import ContractInteractionsApi
from fireblocks.api.contract_templates_api import ContractTemplatesApi
from fireblocks.api.contracts_api import ContractsApi
from fireblocks.api.cosigners_beta_api import CosignersBetaApi
from fireblocks.api.deployed_contracts_api import DeployedContractsApi
from fireblocks.api.embedded_wallets_api import EmbeddedWalletsApi
from fireblocks.api.exchange_accounts_api import ExchangeAccountsApi
from fireblocks.api.external_wallets_api import ExternalWalletsApi
from fireblocks.api.fiat_accounts_api import FiatAccountsApi
from fireblocks.api.gas_stations_api import GasStationsApi
from fireblocks.api.internal_wallets_api import InternalWalletsApi
from fireblocks.api.job_management_api import JobManagementApi
from fireblocks.api.key_link_beta_api import KeyLinkBetaApi
from fireblocks.api.keys_beta_api import KeysBetaApi
from fireblocks.api.nfts_api import NFTsApi
from fireblocks.api.network_connections_api import NetworkConnectionsApi
from fireblocks.api.ota_beta_api import OTABetaApi
from fireblocks.api.off_exchanges_api import OffExchangesApi
from fireblocks.api.payments_payout_api import PaymentsPayoutApi
from fireblocks.api.policy_editor_v2_beta_api import PolicyEditorV2BetaApi
from fireblocks.api.policy_editor_beta_api import PolicyEditorBetaApi
from fireblocks.api.reset_device_api import ResetDeviceApi
from fireblocks.api.smart_transfer_api import SmartTransferApi
from fireblocks.api.staking_api import StakingApi
from fireblocks.api.tags_api import TagsApi
from fireblocks.api.tokenization_api import TokenizationApi
from fireblocks.api.trading_beta_api import TradingBetaApi
from fireblocks.api.transactions_api import TransactionsApi
from fireblocks.api.travel_rule_api import TravelRuleApi
from fireblocks.api.user_groups_beta_api import UserGroupsBetaApi
from fireblocks.api.users_api import UsersApi
from fireblocks.api.vaults_api import VaultsApi
from fireblocks.api.web3_connections_api import Web3ConnectionsApi
from fireblocks.api.webhooks_api import WebhooksApi
from fireblocks.api.webhooks_v2_api import WebhooksV2Api
from fireblocks.api.workspace_status_beta_api import WorkspaceStatusBetaApi
from fireblocks.api.whitelist_ip_addresses_api import WhitelistIpAddressesApi

"""This class contains the Fireblocks API client.
:param configuration: The configuration to use for the client.
"""


class Fireblocks:
    def __init__(self, configuration: ClientConfiguration = None):
        self._api_client = ThreadedApiClient(configuration=configuration)

        # APIs
        self._api_user = None
        self._assets = None
        self._audit_logs = None
        self._blockchains_assets = None
        self._compliance = None
        self._compliance_screening_configuration = None
        self._connected_accounts_beta = None
        self._console_user = None
        self._contract_interactions = None
        self._contract_templates = None
        self._contracts = None
        self._cosigners_beta = None
        self._deployed_contracts = None
        self._embedded_wallets = None
        self._exchange_accounts = None
        self._external_wallets = None
        self._fiat_accounts = None
        self._gas_stations = None
        self._internal_wallets = None
        self._job_management = None
        self._key_link_beta = None
        self._keys_beta = None
        self._nfts = None
        self._network_connections = None
        self._ota_beta = None
        self._off_exchanges = None
        self._payments_payout = None
        self._policy_editor_v2_beta = None
        self._policy_editor_beta = None
        self._reset_device = None
        self._smart_transfer = None
        self._staking = None
        self._tags = None
        self._tokenization = None
        self._trading_beta = None
        self._transactions = None
        self._travel_rule = None
        self._user_groups_beta = None
        self._users = None
        self._vaults = None
        self._web3_connections = None
        self._webhooks = None
        self._webhooks_v2 = None
        self._workspace_status_beta = None
        self._whitelist_ip_addresses = None

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.close()

    def close(self):
        self._api_client.close()

    @property
    def api_user(self) -> ApiUserApi:
        if self._api_user is None:
            self._api_user = ApiUserApi(self._api_client)
        return self._api_user

    @property
    def assets(self) -> AssetsApi:
        if self._assets is None:
            self._assets = AssetsApi(self._api_client)
        return self._assets

    @property
    def audit_logs(self) -> AuditLogsApi:
        if self._audit_logs is None:
            self._audit_logs = AuditLogsApi(self._api_client)
        return self._audit_logs

    @property
    def blockchains_assets(self) -> BlockchainsAssetsApi:
        if self._blockchains_assets is None:
            self._blockchains_assets = BlockchainsAssetsApi(self._api_client)
        return self._blockchains_assets

    @property
    def compliance(self) -> ComplianceApi:
        if self._compliance is None:
            self._compliance = ComplianceApi(self._api_client)
        return self._compliance

    @property
    def compliance_screening_configuration(self) -> ComplianceScreeningConfigurationApi:
        if self._compliance_screening_configuration is None:
            self._compliance_screening_configuration = (
                ComplianceScreeningConfigurationApi(self._api_client)
            )
        return self._compliance_screening_configuration

    @property
    def connected_accounts_beta(self) -> ConnectedAccountsBetaApi:
        if self._connected_accounts_beta is None:
            self._connected_accounts_beta = ConnectedAccountsBetaApi(self._api_client)
        return self._connected_accounts_beta

    @property
    def console_user(self) -> ConsoleUserApi:
        if self._console_user is None:
            self._console_user = ConsoleUserApi(self._api_client)
        return self._console_user

    @property
    def contract_interactions(self) -> ContractInteractionsApi:
        if self._contract_interactions is None:
            self._contract_interactions = ContractInteractionsApi(self._api_client)
        return self._contract_interactions

    @property
    def contract_templates(self) -> ContractTemplatesApi:
        if self._contract_templates is None:
            self._contract_templates = ContractTemplatesApi(self._api_client)
        return self._contract_templates

    @property
    def contracts(self) -> ContractsApi:
        if self._contracts is None:
            self._contracts = ContractsApi(self._api_client)
        return self._contracts

    @property
    def cosigners_beta(self) -> CosignersBetaApi:
        if self._cosigners_beta is None:
            self._cosigners_beta = CosignersBetaApi(self._api_client)
        return self._cosigners_beta

    @property
    def deployed_contracts(self) -> DeployedContractsApi:
        if self._deployed_contracts is None:
            self._deployed_contracts = DeployedContractsApi(self._api_client)
        return self._deployed_contracts

    @property
    def embedded_wallets(self) -> EmbeddedWalletsApi:
        if self._embedded_wallets is None:
            self._embedded_wallets = EmbeddedWalletsApi(self._api_client)
        return self._embedded_wallets

    @property
    def exchange_accounts(self) -> ExchangeAccountsApi:
        if self._exchange_accounts is None:
            self._exchange_accounts = ExchangeAccountsApi(self._api_client)
        return self._exchange_accounts

    @property
    def external_wallets(self) -> ExternalWalletsApi:
        if self._external_wallets is None:
            self._external_wallets = ExternalWalletsApi(self._api_client)
        return self._external_wallets

    @property
    def fiat_accounts(self) -> FiatAccountsApi:
        if self._fiat_accounts is None:
            self._fiat_accounts = FiatAccountsApi(self._api_client)
        return self._fiat_accounts

    @property
    def gas_stations(self) -> GasStationsApi:
        if self._gas_stations is None:
            self._gas_stations = GasStationsApi(self._api_client)
        return self._gas_stations

    @property
    def internal_wallets(self) -> InternalWalletsApi:
        if self._internal_wallets is None:
            self._internal_wallets = InternalWalletsApi(self._api_client)
        return self._internal_wallets

    @property
    def job_management(self) -> JobManagementApi:
        if self._job_management is None:
            self._job_management = JobManagementApi(self._api_client)
        return self._job_management

    @property
    def key_link_beta(self) -> KeyLinkBetaApi:
        if self._key_link_beta is None:
            self._key_link_beta = KeyLinkBetaApi(self._api_client)
        return self._key_link_beta

    @property
    def keys_beta(self) -> KeysBetaApi:
        if self._keys_beta is None:
            self._keys_beta = KeysBetaApi(self._api_client)
        return self._keys_beta

    @property
    def nfts(self) -> NFTsApi:
        if self._nfts is None:
            self._nfts = NFTsApi(self._api_client)
        return self._nfts

    @property
    def network_connections(self) -> NetworkConnectionsApi:
        if self._network_connections is None:
            self._network_connections = NetworkConnectionsApi(self._api_client)
        return self._network_connections

    @property
    def ota_beta(self) -> OTABetaApi:
        if self._ota_beta is None:
            self._ota_beta = OTABetaApi(self._api_client)
        return self._ota_beta

    @property
    def off_exchanges(self) -> OffExchangesApi:
        if self._off_exchanges is None:
            self._off_exchanges = OffExchangesApi(self._api_client)
        return self._off_exchanges

    @property
    def payments_payout(self) -> PaymentsPayoutApi:
        if self._payments_payout is None:
            self._payments_payout = PaymentsPayoutApi(self._api_client)
        return self._payments_payout

    @property
    def policy_editor_v2_beta(self) -> PolicyEditorV2BetaApi:
        if self._policy_editor_v2_beta is None:
            self._policy_editor_v2_beta = PolicyEditorV2BetaApi(self._api_client)
        return self._policy_editor_v2_beta

    @property
    def policy_editor_beta(self) -> PolicyEditorBetaApi:
        if self._policy_editor_beta is None:
            self._policy_editor_beta = PolicyEditorBetaApi(self._api_client)
        return self._policy_editor_beta

    @property
    def reset_device(self) -> ResetDeviceApi:
        if self._reset_device is None:
            self._reset_device = ResetDeviceApi(self._api_client)
        return self._reset_device

    @property
    def smart_transfer(self) -> SmartTransferApi:
        if self._smart_transfer is None:
            self._smart_transfer = SmartTransferApi(self._api_client)
        return self._smart_transfer

    @property
    def staking(self) -> StakingApi:
        if self._staking is None:
            self._staking = StakingApi(self._api_client)
        return self._staking

    @property
    def tags(self) -> TagsApi:
        if self._tags is None:
            self._tags = TagsApi(self._api_client)
        return self._tags

    @property
    def tokenization(self) -> TokenizationApi:
        if self._tokenization is None:
            self._tokenization = TokenizationApi(self._api_client)
        return self._tokenization

    @property
    def trading_beta(self) -> TradingBetaApi:
        if self._trading_beta is None:
            self._trading_beta = TradingBetaApi(self._api_client)
        return self._trading_beta

    @property
    def transactions(self) -> TransactionsApi:
        if self._transactions is None:
            self._transactions = TransactionsApi(self._api_client)
        return self._transactions

    @property
    def travel_rule(self) -> TravelRuleApi:
        if self._travel_rule is None:
            self._travel_rule = TravelRuleApi(self._api_client)
        return self._travel_rule

    @property
    def user_groups_beta(self) -> UserGroupsBetaApi:
        if self._user_groups_beta is None:
            self._user_groups_beta = UserGroupsBetaApi(self._api_client)
        return self._user_groups_beta

    @property
    def users(self) -> UsersApi:
        if self._users is None:
            self._users = UsersApi(self._api_client)
        return self._users

    @property
    def vaults(self) -> VaultsApi:
        if self._vaults is None:
            self._vaults = VaultsApi(self._api_client)
        return self._vaults

    @property
    def web3_connections(self) -> Web3ConnectionsApi:
        if self._web3_connections is None:
            self._web3_connections = Web3ConnectionsApi(self._api_client)
        return self._web3_connections

    @property
    def webhooks(self) -> WebhooksApi:
        if self._webhooks is None:
            self._webhooks = WebhooksApi(self._api_client)
        return self._webhooks

    @property
    def webhooks_v2(self) -> WebhooksV2Api:
        if self._webhooks_v2 is None:
            self._webhooks_v2 = WebhooksV2Api(self._api_client)
        return self._webhooks_v2

    @property
    def workspace_status_beta(self) -> WorkspaceStatusBetaApi:
        if self._workspace_status_beta is None:
            self._workspace_status_beta = WorkspaceStatusBetaApi(self._api_client)
        return self._workspace_status_beta

    @property
    def whitelist_ip_addresses(self) -> WhitelistIpAddressesApi:
        if self._whitelist_ip_addresses is None:
            self._whitelist_ip_addresses = WhitelistIpAddressesApi(self._api_client)
        return self._whitelist_ip_addresses
