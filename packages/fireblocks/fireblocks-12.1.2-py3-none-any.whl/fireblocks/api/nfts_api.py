# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from concurrent.futures import Future
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from fireblocks.models.get_nfts_response import GetNFTsResponse
from fireblocks.models.get_ownership_tokens_response import GetOwnershipTokensResponse
from fireblocks.models.list_owned_collections_response import ListOwnedCollectionsResponse
from fireblocks.models.list_owned_tokens_response import ListOwnedTokensResponse
from fireblocks.models.token_ownership_spam_update_payload import TokenOwnershipSpamUpdatePayload
from fireblocks.models.token_ownership_status_update_payload import TokenOwnershipStatusUpdatePayload
from fireblocks.models.token_response import TokenResponse
from fireblocks.models.update_token_ownership_status_dto import UpdateTokenOwnershipStatusDto

from fireblocks.api_client import ApiClient, RequestSerialized
from fireblocks.api_response import ApiResponse
from fireblocks.rest import RESTResponseType
from fireblocks.validation_utils import validate_not_empty_string


class NFTsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_nft(
        self,
        id: Annotated[StrictStr, Field(description="NFT ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[TokenResponse]]:
        """List token data by ID

        Returns the requested token data. 

        :param id: NFT ID (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        validate_not_empty_string(function_name="get_nft", param_name="id", param_value=id)

        _param = self._get_nft_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TokenResponse",
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _get_nft_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/nfts/tokens/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_nfts(
        self,
        ids: Annotated[StrictStr, Field(description="A comma separated list of NFT IDs. Up to 100 are allowed in a single request.")],
        page_cursor: Annotated[Optional[StrictStr], Field(description="Page cursor to fetch")] = None,
        page_size: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True, ge=1)], Annotated[int, Field(le=100, strict=True, ge=1)]]], Field(description="Items per page (max 100)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort by param, it can be one param or a list of params separated by comma")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order direction, it can be `ASC` for ascending or `DESC` for descending")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[GetNFTsResponse]]:
        """List tokens by IDs

        Returns the requested tokens data. 

        :param ids: A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (required)
        :type ids: str
        :param page_cursor: Page cursor to fetch
        :type page_cursor: str
        :param page_size: Items per page (max 100)
        :type page_size: float
        :param sort: Sort by param, it can be one param or a list of params separated by comma
        :type sort: List[str]
        :param order: Order direction, it can be `ASC` for ascending or `DESC` for descending
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        validate_not_empty_string(function_name="get_nfts", param_name="ids", param_value=ids)

        _param = self._get_nfts_serialize(
            ids=ids,
            page_cursor=page_cursor,
            page_size=page_size,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetNFTsResponse",
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _get_nfts_serialize(
        self,
        ids,
        page_cursor,
        page_size,
        sort,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if page_cursor is not None:
            
            _query_params.append(('pageCursor', page_cursor))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/nfts/tokens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ownership_tokens(
        self,
        blockchain_descriptor: Annotated[Optional[StrictStr], Field(description="Blockchain descriptor filter")] = None,
        vault_account_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request.  This field will be ignored when walletType=END_USER_WALLET or ncwId is provided.")] = None,
        ncw_id: Annotated[Optional[StrictStr], Field(description="Tenant's Non-Custodial Wallet ID")] = None,
        ncw_account_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of Non-Custodial account IDs. Up to 100 are allowed in a single request. This field will be ignored when walletType=VAULT_ACCOUNT or ncwId is not provided.")] = None,
        wallet_type: Annotated[Optional[StrictStr], Field(description="Wallet type, it can be `VAULT_ACCOUNT` or `END_USER_WALLET`")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of NFT IDs. Up to 100 are allowed in a single request.")] = None,
        collection_ids: Annotated[Optional[StrictStr], Field(description="A comma separated list of collection IDs. Up to 100 are allowed in a single request.")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Page cursor to fetch")] = None,
        page_size: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True, ge=1)], Annotated[int, Field(le=100, strict=True, ge=1)]]], Field(description="Items per page (max 100)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort by param, it can be one param or a list of params separated by comma")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order direction, it can be `ASC` for ascending or `DESC` for descending")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Token ownership status")] = None,
        search: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name.")] = None,
        spam: Annotated[Optional[StrictStr], Field(description="Token ownership spam status.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[GetOwnershipTokensResponse]]:
        """List all owned tokens (paginated)

        Returns all tokens and their data in your workspace. 

        :param blockchain_descriptor: Blockchain descriptor filter
        :type blockchain_descriptor: str
        :param vault_account_ids: A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request.  This field will be ignored when walletType=END_USER_WALLET or ncwId is provided.
        :type vault_account_ids: str
        :param ncw_id: Tenant's Non-Custodial Wallet ID
        :type ncw_id: str
        :param ncw_account_ids: A comma separated list of Non-Custodial account IDs. Up to 100 are allowed in a single request. This field will be ignored when walletType=VAULT_ACCOUNT or ncwId is not provided.
        :type ncw_account_ids: str
        :param wallet_type: Wallet type, it can be `VAULT_ACCOUNT` or `END_USER_WALLET`
        :type wallet_type: str
        :param ids: A comma separated list of NFT IDs. Up to 100 are allowed in a single request.
        :type ids: str
        :param collection_ids: A comma separated list of collection IDs. Up to 100 are allowed in a single request.
        :type collection_ids: str
        :param page_cursor: Page cursor to fetch
        :type page_cursor: str
        :param page_size: Items per page (max 100)
        :type page_size: float
        :param sort: Sort by param, it can be one param or a list of params separated by comma
        :type sort: List[str]
        :param order: Order direction, it can be `ASC` for ascending or `DESC` for descending
        :type order: str
        :param status: Token ownership status
        :type status: str
        :param search: Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name.
        :type search: str
        :param spam: Token ownership spam status.
        :type spam: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._get_ownership_tokens_serialize(
            blockchain_descriptor=blockchain_descriptor,
            vault_account_ids=vault_account_ids,
            ncw_id=ncw_id,
            ncw_account_ids=ncw_account_ids,
            wallet_type=wallet_type,
            ids=ids,
            collection_ids=collection_ids,
            page_cursor=page_cursor,
            page_size=page_size,
            sort=sort,
            order=order,
            status=status,
            search=search,
            spam=spam,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetOwnershipTokensResponse",
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _get_ownership_tokens_serialize(
        self,
        blockchain_descriptor,
        vault_account_ids,
        ncw_id,
        ncw_account_ids,
        wallet_type,
        ids,
        collection_ids,
        page_cursor,
        page_size,
        sort,
        order,
        status,
        search,
        spam,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if blockchain_descriptor is not None:
            
            _query_params.append(('blockchainDescriptor', blockchain_descriptor))
            
        if vault_account_ids is not None:
            
            _query_params.append(('vaultAccountIds', vault_account_ids))
            
        if ncw_id is not None:
            
            _query_params.append(('ncwId', ncw_id))
            
        if ncw_account_ids is not None:
            
            _query_params.append(('ncwAccountIds', ncw_account_ids))
            
        if wallet_type is not None:
            
            _query_params.append(('walletType', wallet_type))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if collection_ids is not None:
            
            _query_params.append(('collectionIds', collection_ids))
            
        if page_cursor is not None:
            
            _query_params.append(('pageCursor', page_cursor))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if spam is not None:
            
            _query_params.append(('spam', spam))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/nfts/ownership/tokens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_owned_collections(
        self,
        ncw_id: Annotated[Optional[StrictStr], Field(description="Tenant's Non-Custodial Wallet ID")] = None,
        wallet_type: Annotated[Optional[StrictStr], Field(description="Wallet type, it can be `VAULT_ACCOUNT` or `END_USER_WALLET`")] = None,
        search: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Search owned collections. Possible criteria for search: collection name, collection contract address.")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Page cursor to fetch")] = None,
        page_size: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True, ge=1)], Annotated[int, Field(le=100, strict=True, ge=1)]]], Field(description="Items per page (max 100)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort by param, it can be one param or a list of params separated by comma")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order direction, it can be `ASC` for ascending or `DESC` for descending")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Token ownership status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[ListOwnedCollectionsResponse]]:
        """List owned collections (paginated)

        Returns all collections in your workspace 

        :param ncw_id: Tenant's Non-Custodial Wallet ID
        :type ncw_id: str
        :param wallet_type: Wallet type, it can be `VAULT_ACCOUNT` or `END_USER_WALLET`
        :type wallet_type: str
        :param search: Search owned collections. Possible criteria for search: collection name, collection contract address.
        :type search: str
        :param page_cursor: Page cursor to fetch
        :type page_cursor: str
        :param page_size: Items per page (max 100)
        :type page_size: float
        :param sort: Sort by param, it can be one param or a list of params separated by comma
        :type sort: List[str]
        :param order: Order direction, it can be `ASC` for ascending or `DESC` for descending
        :type order: str
        :param status: Token ownership status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._list_owned_collections_serialize(
            ncw_id=ncw_id,
            wallet_type=wallet_type,
            search=search,
            page_cursor=page_cursor,
            page_size=page_size,
            sort=sort,
            order=order,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListOwnedCollectionsResponse",
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _list_owned_collections_serialize(
        self,
        ncw_id,
        wallet_type,
        search,
        page_cursor,
        page_size,
        sort,
        order,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ncw_id is not None:
            
            _query_params.append(('ncwId', ncw_id))
            
        if wallet_type is not None:
            
            _query_params.append(('walletType', wallet_type))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if page_cursor is not None:
            
            _query_params.append(('pageCursor', page_cursor))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/nfts/ownership/collections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_owned_tokens(
        self,
        ncw_id: Annotated[Optional[StrictStr], Field(description="Tenant's Non-Custodial Wallet ID")] = None,
        wallet_type: Annotated[Optional[StrictStr], Field(description="Wallet type, it can be `VAULT_ACCOUNT` or `END_USER_WALLET`")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Page cursor to fetch")] = None,
        page_size: Annotated[Optional[Union[Annotated[float, Field(le=100, strict=True, ge=1)], Annotated[int, Field(le=100, strict=True, ge=1)]]], Field(description="Items per page (max 100)")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Sort by param, it can be one param or a list of params separated by comma")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order direction, it can be `ASC` for ascending or `DESC` for descending")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Token ownership status")] = None,
        search: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Search owned tokens by token name")] = None,
        spam: Annotated[Optional[StrictStr], Field(description="Token ownership spam status.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[ListOwnedTokensResponse]]:
        """List all distinct owned tokens (paginated)

        Returns all owned distinct tokens (for your tenant) and their data in your workspace. 

        :param ncw_id: Tenant's Non-Custodial Wallet ID
        :type ncw_id: str
        :param wallet_type: Wallet type, it can be `VAULT_ACCOUNT` or `END_USER_WALLET`
        :type wallet_type: str
        :param page_cursor: Page cursor to fetch
        :type page_cursor: str
        :param page_size: Items per page (max 100)
        :type page_size: float
        :param sort: Sort by param, it can be one param or a list of params separated by comma
        :type sort: List[str]
        :param order: Order direction, it can be `ASC` for ascending or `DESC` for descending
        :type order: str
        :param status: Token ownership status
        :type status: str
        :param search: Search owned tokens by token name
        :type search: str
        :param spam: Token ownership spam status.
        :type spam: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._list_owned_tokens_serialize(
            ncw_id=ncw_id,
            wallet_type=wallet_type,
            page_cursor=page_cursor,
            page_size=page_size,
            sort=sort,
            order=order,
            status=status,
            search=search,
            spam=spam,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListOwnedTokensResponse",
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _list_owned_tokens_serialize(
        self,
        ncw_id,
        wallet_type,
        page_cursor,
        page_size,
        sort,
        order,
        status,
        search,
        spam,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ncw_id is not None:
            
            _query_params.append(('ncwId', ncw_id))
            
        if wallet_type is not None:
            
            _query_params.append(('walletType', wallet_type))
            
        if page_cursor is not None:
            
            _query_params.append(('pageCursor', page_cursor))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if spam is not None:
            
            _query_params.append(('spam', spam))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/nfts/ownership/assets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def refresh_nft_metadata(
        self,
        id: Annotated[StrictStr, Field(description="NFT ID")],
        x_end_user_wallet_id: Annotated[Optional[StrictStr], Field(description="Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.")] = None,
        idempotency_key: Annotated[Optional[StrictStr], Field(description="A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[None]]:
        """Refresh token metadata

        Updates the latest token metadata. 

        :param id: NFT ID (required)
        :type id: str
        :param x_end_user_wallet_id: Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
        :type x_end_user_wallet_id: str
        :param idempotency_key: A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
        :type idempotency_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        validate_not_empty_string(function_name="refresh_nft_metadata", param_name="id", param_value=id)

        _param = self._refresh_nft_metadata_serialize(
            id=id,
            x_end_user_wallet_id=x_end_user_wallet_id,
            idempotency_key=idempotency_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _refresh_nft_metadata_serialize(
        self,
        id,
        x_end_user_wallet_id,
        idempotency_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if x_end_user_wallet_id is not None:
            _header_params['X-End-User-Wallet-Id'] = x_end_user_wallet_id
        if idempotency_key is not None:
            _header_params['Idempotency-Key'] = idempotency_key
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/nfts/tokens/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_ownership_tokens(
        self,
        blockchain_descriptor: Annotated[StrictStr, Field(description="Blockchain descriptor filter")],
        vault_account_id: Annotated[StrictStr, Field(description="Vault account filter")],
        idempotency_key: Annotated[Optional[StrictStr], Field(description="A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[None]]:
        """Refresh vault account tokens

        Updates all tokens and balances per blockchain and vault account. 

        :param blockchain_descriptor: Blockchain descriptor filter (required)
        :type blockchain_descriptor: str
        :param vault_account_id: Vault account filter (required)
        :type vault_account_id: str
        :param idempotency_key: A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
        :type idempotency_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        validate_not_empty_string(function_name="update_ownership_tokens", param_name="blockchain_descriptor", param_value=blockchain_descriptor)
        validate_not_empty_string(function_name="update_ownership_tokens", param_name="vault_account_id", param_value=vault_account_id)

        _param = self._update_ownership_tokens_serialize(
            blockchain_descriptor=blockchain_descriptor,
            vault_account_id=vault_account_id,
            idempotency_key=idempotency_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': None,
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _update_ownership_tokens_serialize(
        self,
        blockchain_descriptor,
        vault_account_id,
        idempotency_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if blockchain_descriptor is not None:
            
            _query_params.append(('blockchainDescriptor', blockchain_descriptor))
            
        if vault_account_id is not None:
            
            _query_params.append(('vaultAccountId', vault_account_id))
            
        # process the header parameters
        if idempotency_key is not None:
            _header_params['Idempotency-Key'] = idempotency_key
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/nfts/ownership/tokens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_token_ownership_status(
        self,
        id: Annotated[StrictStr, Field(description="NFT ID")],
        update_token_ownership_status_dto: UpdateTokenOwnershipStatusDto,
        x_end_user_wallet_id: Annotated[Optional[StrictStr], Field(description="Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.")] = None,
        idempotency_key: Annotated[Optional[StrictStr], Field(description="A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[None]]:
        """Update token ownership status

        Updates token status for a tenant, in all tenant vaults. 

        :param id: NFT ID (required)
        :type id: str
        :param update_token_ownership_status_dto: (required)
        :type update_token_ownership_status_dto: UpdateTokenOwnershipStatusDto
        :param x_end_user_wallet_id: Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
        :type x_end_user_wallet_id: str
        :param idempotency_key: A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
        :type idempotency_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        validate_not_empty_string(function_name="update_token_ownership_status", param_name="id", param_value=id)

        _param = self._update_token_ownership_status_serialize(
            id=id,
            update_token_ownership_status_dto=update_token_ownership_status_dto,
            x_end_user_wallet_id=x_end_user_wallet_id,
            idempotency_key=idempotency_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _update_token_ownership_status_serialize(
        self,
        id,
        update_token_ownership_status_dto,
        x_end_user_wallet_id,
        idempotency_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if x_end_user_wallet_id is not None:
            _header_params['X-End-User-Wallet-Id'] = x_end_user_wallet_id
        if idempotency_key is not None:
            _header_params['Idempotency-Key'] = idempotency_key
        # process the form parameters
        # process the body parameter
        if update_token_ownership_status_dto is not None:
            _body_params = update_token_ownership_status_dto



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/nfts/ownership/tokens/{id}/status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_tokens_ownership_spam(
        self,
        token_ownership_spam_update_payload: List[TokenOwnershipSpamUpdatePayload],
        x_end_user_wallet_id: Annotated[Optional[StrictStr], Field(description="Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.")] = None,
        idempotency_key: Annotated[Optional[StrictStr], Field(description="A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[None]]:
        """Update tokens ownership spam property

        Updates tokens spam property for a tenant's token ownerships, in all tenant vaults.

        :param token_ownership_spam_update_payload: (required)
        :type token_ownership_spam_update_payload: List[TokenOwnershipSpamUpdatePayload]
        :param x_end_user_wallet_id: Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
        :type x_end_user_wallet_id: str
        :param idempotency_key: A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
        :type idempotency_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._update_tokens_ownership_spam_serialize(
            token_ownership_spam_update_payload=token_ownership_spam_update_payload,
            x_end_user_wallet_id=x_end_user_wallet_id,
            idempotency_key=idempotency_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _update_tokens_ownership_spam_serialize(
        self,
        token_ownership_spam_update_payload,
        x_end_user_wallet_id,
        idempotency_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'TokenOwnershipSpamUpdatePayload': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_end_user_wallet_id is not None:
            _header_params['X-End-User-Wallet-Id'] = x_end_user_wallet_id
        if idempotency_key is not None:
            _header_params['Idempotency-Key'] = idempotency_key
        # process the form parameters
        # process the body parameter
        if token_ownership_spam_update_payload is not None:
            _body_params = token_ownership_spam_update_payload



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/nfts/ownership/tokens/spam',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_tokens_ownership_status(
        self,
        token_ownership_status_update_payload: List[TokenOwnershipStatusUpdatePayload],
        x_end_user_wallet_id: Annotated[Optional[StrictStr], Field(description="Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.")] = None,
        idempotency_key: Annotated[Optional[StrictStr], Field(description="A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Future[ApiResponse[None]]:
        """Update tokens ownership status

        Updates tokens status for a tenant, in all tenant vaults.

        :param token_ownership_status_update_payload: (required)
        :type token_ownership_status_update_payload: List[TokenOwnershipStatusUpdatePayload]
        :param x_end_user_wallet_id: Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
        :type x_end_user_wallet_id: str
        :param idempotency_key: A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
        :type idempotency_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._update_tokens_ownership_status_serialize(
            token_ownership_status_update_payload=token_ownership_status_update_payload,
            x_end_user_wallet_id=x_end_user_wallet_id,
            idempotency_key=idempotency_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }

        return self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout,
            _response_types_map=_response_types_map,
        )

    def _update_tokens_ownership_status_serialize(
        self,
        token_ownership_status_update_payload,
        x_end_user_wallet_id,
        idempotency_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'TokenOwnershipStatusUpdatePayload': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_end_user_wallet_id is not None:
            _header_params['X-End-User-Wallet-Id'] = x_end_user_wallet_id
        if idempotency_key is not None:
            _header_params['Idempotency-Key'] = idempotency_key
        # process the form parameters
        # process the body parameter
        if token_ownership_status_update_payload is not None:
            _body_params = token_ownership_status_update_payload



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/nfts/ownership/tokens/status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


