# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.achievement_completion_response import AchievementCompletionResponse
from ..types.achievement_with_stats_response import AchievementWithStatsResponse
from ..types.upserted_user import UpsertedUser
from .raw_client import AsyncRawAchievementsClient, RawAchievementsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AchievementsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAchievementsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAchievementsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAchievementsClient
        """
        return self._raw_client

    def all_(
        self, *, user_attributes: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[AchievementWithStatsResponse]:
        """
        Get all achievements and their completion stats.

        Parameters
        ----------
        user_attributes : typing.Optional[str]
            Optional colon-delimited user attributes in the format attribute:value,attribute:value. Only achievements accessible to a user with the provided attributes will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AchievementWithStatsResponse]
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.achievements.all_(
            user_attributes="plan-type:premium,region:us-east",
        )
        """
        _response = self._raw_client.all_(user_attributes=user_attributes, request_options=request_options)
        return _response.data

    def complete(
        self, key: str, *, user: UpsertedUser, request_options: typing.Optional[RequestOptions] = None
    ) -> AchievementCompletionResponse:
        """
        Mark an achievement as completed for a user.

        Parameters
        ----------
        key : str
            Unique reference of the achievement as set when created.

        user : UpsertedUser
            The user that completed the achievement.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AchievementCompletionResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi, UpsertedUser

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.achievements.complete(
            key="finish-onboarding",
            user=UpsertedUser(
                email="user@example.com",
                name="User",
                tz="Europe/London",
                device_tokens=["token1", "token2"],
                subscribe_to_emails=True,
                attributes={"department": "engineering", "role": "developer"},
                id="user-id",
            ),
        )
        """
        _response = self._raw_client.complete(key, user=user, request_options=request_options)
        return _response.data


class AsyncAchievementsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAchievementsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAchievementsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAchievementsClient
        """
        return self._raw_client

    async def all_(
        self, *, user_attributes: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[AchievementWithStatsResponse]:
        """
        Get all achievements and their completion stats.

        Parameters
        ----------
        user_attributes : typing.Optional[str]
            Optional colon-delimited user attributes in the format attribute:value,attribute:value. Only achievements accessible to a user with the provided attributes will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AchievementWithStatsResponse]
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.achievements.all_(
                user_attributes="plan-type:premium,region:us-east",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.all_(user_attributes=user_attributes, request_options=request_options)
        return _response.data

    async def complete(
        self, key: str, *, user: UpsertedUser, request_options: typing.Optional[RequestOptions] = None
    ) -> AchievementCompletionResponse:
        """
        Mark an achievement as completed for a user.

        Parameters
        ----------
        key : str
            Unique reference of the achievement as set when created.

        user : UpsertedUser
            The user that completed the achievement.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AchievementCompletionResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi, UpsertedUser

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.achievements.complete(
                key="finish-onboarding",
                user=UpsertedUser(
                    email="user@example.com",
                    name="User",
                    tz="Europe/London",
                    device_tokens=["token1", "token2"],
                    subscribe_to_emails=True,
                    attributes={"department": "engineering", "role": "developer"},
                    id="user-id",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.complete(key, user=user, request_options=request_options)
        return _response.data
