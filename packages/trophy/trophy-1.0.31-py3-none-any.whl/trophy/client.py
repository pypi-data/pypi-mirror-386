# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import TrophyApiEnvironment

if typing.TYPE_CHECKING:
    from .achievements.client import AchievementsClient, AsyncAchievementsClient
    from .admin.client import AdminClient, AsyncAdminClient
    from .leaderboards.client import AsyncLeaderboardsClient, LeaderboardsClient
    from .metrics.client import AsyncMetricsClient, MetricsClient
    from .points.client import AsyncPointsClient, PointsClient
    from .streaks.client import AsyncStreaksClient, StreaksClient
    from .users.client import AsyncUsersClient, UsersClient


class TrophyApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    environment : TrophyApiEnvironment
        The environment to use for requests from the client. from .environment import TrophyApiEnvironment



        Defaults to TrophyApiEnvironment.PRODUCTION



    api_key : str
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from trophy import TrophyApi

    client = TrophyApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        environment: TrophyApiEnvironment = TrophyApiEnvironment.PRODUCTION,
        api_key: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            environment=environment,
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._achievements: typing.Optional[AchievementsClient] = None
        self._metrics: typing.Optional[MetricsClient] = None
        self._users: typing.Optional[UsersClient] = None
        self._streaks: typing.Optional[StreaksClient] = None
        self._points: typing.Optional[PointsClient] = None
        self._leaderboards: typing.Optional[LeaderboardsClient] = None
        self._admin: typing.Optional[AdminClient] = None

    @property
    def achievements(self):
        if self._achievements is None:
            from .achievements.client import AchievementsClient  # noqa: E402

            self._achievements = AchievementsClient(client_wrapper=self._client_wrapper)
        return self._achievements

    @property
    def metrics(self):
        if self._metrics is None:
            from .metrics.client import MetricsClient  # noqa: E402

            self._metrics = MetricsClient(client_wrapper=self._client_wrapper)
        return self._metrics

    @property
    def users(self):
        if self._users is None:
            from .users.client import UsersClient  # noqa: E402

            self._users = UsersClient(client_wrapper=self._client_wrapper)
        return self._users

    @property
    def streaks(self):
        if self._streaks is None:
            from .streaks.client import StreaksClient  # noqa: E402

            self._streaks = StreaksClient(client_wrapper=self._client_wrapper)
        return self._streaks

    @property
    def points(self):
        if self._points is None:
            from .points.client import PointsClient  # noqa: E402

            self._points = PointsClient(client_wrapper=self._client_wrapper)
        return self._points

    @property
    def leaderboards(self):
        if self._leaderboards is None:
            from .leaderboards.client import LeaderboardsClient  # noqa: E402

            self._leaderboards = LeaderboardsClient(client_wrapper=self._client_wrapper)
        return self._leaderboards

    @property
    def admin(self):
        if self._admin is None:
            from .admin.client import AdminClient  # noqa: E402

            self._admin = AdminClient(client_wrapper=self._client_wrapper)
        return self._admin


class AsyncTrophyApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    environment : TrophyApiEnvironment
        The environment to use for requests from the client. from .environment import TrophyApiEnvironment



        Defaults to TrophyApiEnvironment.PRODUCTION



    api_key : str
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from trophy import AsyncTrophyApi

    client = AsyncTrophyApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        environment: TrophyApiEnvironment = TrophyApiEnvironment.PRODUCTION,
        api_key: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            environment=environment,
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._achievements: typing.Optional[AsyncAchievementsClient] = None
        self._metrics: typing.Optional[AsyncMetricsClient] = None
        self._users: typing.Optional[AsyncUsersClient] = None
        self._streaks: typing.Optional[AsyncStreaksClient] = None
        self._points: typing.Optional[AsyncPointsClient] = None
        self._leaderboards: typing.Optional[AsyncLeaderboardsClient] = None
        self._admin: typing.Optional[AsyncAdminClient] = None

    @property
    def achievements(self):
        if self._achievements is None:
            from .achievements.client import AsyncAchievementsClient  # noqa: E402

            self._achievements = AsyncAchievementsClient(client_wrapper=self._client_wrapper)
        return self._achievements

    @property
    def metrics(self):
        if self._metrics is None:
            from .metrics.client import AsyncMetricsClient  # noqa: E402

            self._metrics = AsyncMetricsClient(client_wrapper=self._client_wrapper)
        return self._metrics

    @property
    def users(self):
        if self._users is None:
            from .users.client import AsyncUsersClient  # noqa: E402

            self._users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        return self._users

    @property
    def streaks(self):
        if self._streaks is None:
            from .streaks.client import AsyncStreaksClient  # noqa: E402

            self._streaks = AsyncStreaksClient(client_wrapper=self._client_wrapper)
        return self._streaks

    @property
    def points(self):
        if self._points is None:
            from .points.client import AsyncPointsClient  # noqa: E402

            self._points = AsyncPointsClient(client_wrapper=self._client_wrapper)
        return self._points

    @property
    def leaderboards(self):
        if self._leaderboards is None:
            from .leaderboards.client import AsyncLeaderboardsClient  # noqa: E402

            self._leaderboards = AsyncLeaderboardsClient(client_wrapper=self._client_wrapper)
        return self._leaderboards

    @property
    def admin(self):
        if self._admin is None:
            from .admin.client import AsyncAdminClient  # noqa: E402

            self._admin = AsyncAdminClient(client_wrapper=self._client_wrapper)
        return self._admin
