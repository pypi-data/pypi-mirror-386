# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....types.create_streak_freezes_response import CreateStreakFreezesResponse
from .raw_client import AsyncRawFreezesClient, RawFreezesClient
from .types.create_streak_freezes_request_freezes_item import CreateStreakFreezesRequestFreezesItem

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FreezesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFreezesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFreezesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFreezesClient
        """
        return self._raw_client

    def create(
        self,
        *,
        freezes: typing.Sequence[CreateStreakFreezesRequestFreezesItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateStreakFreezesResponse:
        """
        Create streak freezes for multiple users.

        Parameters
        ----------
        freezes : typing.Sequence[CreateStreakFreezesRequestFreezesItem]
            Array of freezes to create. Maximum 1,000 freezes per request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateStreakFreezesResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi
        from trophy.admin.streaks.freezes import CreateStreakFreezesRequestFreezesItem

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.admin.streaks.freezes.create(
            freezes=[
                CreateStreakFreezesRequestFreezesItem(
                    user_id="user-123",
                ),
                CreateStreakFreezesRequestFreezesItem(
                    user_id="user-456",
                ),
                CreateStreakFreezesRequestFreezesItem(
                    user_id="user-123",
                ),
            ],
        )
        """
        _response = self._raw_client.create(freezes=freezes, request_options=request_options)
        return _response.data


class AsyncFreezesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFreezesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFreezesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFreezesClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        freezes: typing.Sequence[CreateStreakFreezesRequestFreezesItem],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateStreakFreezesResponse:
        """
        Create streak freezes for multiple users.

        Parameters
        ----------
        freezes : typing.Sequence[CreateStreakFreezesRequestFreezesItem]
            Array of freezes to create. Maximum 1,000 freezes per request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateStreakFreezesResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi
        from trophy.admin.streaks.freezes import CreateStreakFreezesRequestFreezesItem

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.admin.streaks.freezes.create(
                freezes=[
                    CreateStreakFreezesRequestFreezesItem(
                        user_id="user-123",
                    ),
                    CreateStreakFreezesRequestFreezesItem(
                        user_id="user-456",
                    ),
                    CreateStreakFreezesRequestFreezesItem(
                        user_id="user-123",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(freezes=freezes, request_options=request_options)
        return _response.data
