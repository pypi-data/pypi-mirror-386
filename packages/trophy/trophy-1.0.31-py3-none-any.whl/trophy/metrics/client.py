# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.event_response import EventResponse
from ..types.upserted_user import UpsertedUser
from .raw_client import AsyncRawMetricsClient, RawMetricsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MetricsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMetricsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMetricsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMetricsClient
        """
        return self._raw_client

    def event(
        self,
        key: str,
        *,
        user: UpsertedUser,
        value: float,
        idempotency_key: typing.Optional[str] = None,
        attributes: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EventResponse:
        """
        Increment or decrement the value of a metric for a user.

        Parameters
        ----------
        key : str
            Unique reference of the metric as set when created.

        user : UpsertedUser
            The user that triggered the event.

        value : float
            The value to add to the user's current total for the given metric.

        idempotency_key : typing.Optional[str]
            The idempotency key for the event.

        attributes : typing.Optional[typing.Dict[str, str]]
            Event attributes as key-value pairs. Keys must match existing event attributes set up in the Trophy dashboard.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EventResponse
            Created event

        Examples
        --------
        from trophy import TrophyApi, UpsertedUser

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.metrics.event(
            key="words-written",
            idempotency_key="e4296e4b-8493-4bd1-9c30-5a1a9ac4d78f",
            user=UpsertedUser(
                email="user@example.com",
                name="User",
                tz="Europe/London",
                device_tokens=["token1", "token2"],
                subscribe_to_emails=True,
                attributes={"department": "engineering", "role": "developer"},
                id="18",
            ),
            value=750.0,
            attributes={"category": "writing", "source": "mobile-app"},
        )
        """
        _response = self._raw_client.event(
            key,
            user=user,
            value=value,
            idempotency_key=idempotency_key,
            attributes=attributes,
            request_options=request_options,
        )
        return _response.data


class AsyncMetricsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMetricsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMetricsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMetricsClient
        """
        return self._raw_client

    async def event(
        self,
        key: str,
        *,
        user: UpsertedUser,
        value: float,
        idempotency_key: typing.Optional[str] = None,
        attributes: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EventResponse:
        """
        Increment or decrement the value of a metric for a user.

        Parameters
        ----------
        key : str
            Unique reference of the metric as set when created.

        user : UpsertedUser
            The user that triggered the event.

        value : float
            The value to add to the user's current total for the given metric.

        idempotency_key : typing.Optional[str]
            The idempotency key for the event.

        attributes : typing.Optional[typing.Dict[str, str]]
            Event attributes as key-value pairs. Keys must match existing event attributes set up in the Trophy dashboard.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EventResponse
            Created event

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi, UpsertedUser

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.metrics.event(
                key="words-written",
                idempotency_key="e4296e4b-8493-4bd1-9c30-5a1a9ac4d78f",
                user=UpsertedUser(
                    email="user@example.com",
                    name="User",
                    tz="Europe/London",
                    device_tokens=["token1", "token2"],
                    subscribe_to_emails=True,
                    attributes={"department": "engineering", "role": "developer"},
                    id="18",
                ),
                value=750.0,
                attributes={"category": "writing", "source": "mobile-app"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.event(
            key,
            user=user,
            value=value,
            idempotency_key=idempotency_key,
            attributes=attributes,
            request_options=request_options,
        )
        return _response.data
