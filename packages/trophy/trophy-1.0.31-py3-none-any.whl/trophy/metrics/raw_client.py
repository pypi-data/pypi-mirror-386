# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.error_body import ErrorBody
from ..types.event_response import EventResponse
from ..types.upserted_user import UpsertedUser

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawMetricsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def event(
        self,
        key: str,
        *,
        user: UpsertedUser,
        value: float,
        idempotency_key: typing.Optional[str] = None,
        attributes: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[EventResponse]:
        """
        Increment or decrement the value of a metric for a user.

        Parameters
        ----------
        key : str
            Unique reference of the metric as set when created.

        user : UpsertedUser
            The user that triggered the event.

        value : float
            The value to add to the user's current total for the given metric.

        idempotency_key : typing.Optional[str]
            The idempotency key for the event.

        attributes : typing.Optional[typing.Dict[str, str]]
            Event attributes as key-value pairs. Keys must match existing event attributes set up in the Trophy dashboard.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[EventResponse]
            Created event
        """
        _response = self._client_wrapper.httpx_client.request(
            f"metrics/{jsonable_encoder(key)}/event",
            base_url=self._client_wrapper.get_environment().api,
            method="POST",
            json={
                "user": convert_and_respect_annotation_metadata(
                    object_=user, annotation=UpsertedUser, direction="write"
                ),
                "value": value,
                "attributes": attributes,
            },
            headers={
                "content-type": "application/json",
                "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    EventResponse,
                    parse_obj_as(
                        type_=EventResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawMetricsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def event(
        self,
        key: str,
        *,
        user: UpsertedUser,
        value: float,
        idempotency_key: typing.Optional[str] = None,
        attributes: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[EventResponse]:
        """
        Increment or decrement the value of a metric for a user.

        Parameters
        ----------
        key : str
            Unique reference of the metric as set when created.

        user : UpsertedUser
            The user that triggered the event.

        value : float
            The value to add to the user's current total for the given metric.

        idempotency_key : typing.Optional[str]
            The idempotency key for the event.

        attributes : typing.Optional[typing.Dict[str, str]]
            Event attributes as key-value pairs. Keys must match existing event attributes set up in the Trophy dashboard.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[EventResponse]
            Created event
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"metrics/{jsonable_encoder(key)}/event",
            base_url=self._client_wrapper.get_environment().api,
            method="POST",
            json={
                "user": convert_and_respect_annotation_metadata(
                    object_=user, annotation=UpsertedUser, direction="write"
                ),
                "value": value,
                "attributes": attributes,
            },
            headers={
                "content-type": "application/json",
                "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    EventResponse,
                    parse_obj_as(
                        type_=EventResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorBody,
                        parse_obj_as(
                            type_=ErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
