# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.completed_achievement_response import CompletedAchievementResponse
from ..types.get_user_points_response import GetUserPointsResponse
from ..types.metric_response import MetricResponse
from ..types.streak_response import StreakResponse
from ..types.user import User
from ..types.user_leaderboard_response_with_history import UserLeaderboardResponseWithHistory
from .raw_client import AsyncRawUsersClient, RawUsersClient
from .types.users_metric_event_summary_request_aggregation import UsersMetricEventSummaryRequestAggregation
from .types.users_metric_event_summary_response_item import UsersMetricEventSummaryResponseItem
from .types.users_points_event_summary_request_aggregation import UsersPointsEventSummaryRequestAggregation
from .types.users_points_event_summary_response_item import UsersPointsEventSummaryResponseItem

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUsersClient
        """
        return self._raw_client

    def create(
        self,
        *,
        id: str,
        email: str,
        name: str,
        device_tokens: typing.Sequence[str],
        subscribe_to_emails: bool,
        attributes: typing.Dict[str, str],
        tz: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Create a new user.

        Parameters
        ----------
        id : str
            The ID of the user in your database. Must be a string.

        email : str
            The user's email address. Required if subscribeToEmails is true.

        name : str
            The name to refer to the user by in emails.

        device_tokens : typing.Sequence[str]
            The user's device tokens, used for push notifications.

        subscribe_to_emails : bool
            Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.

        attributes : typing.Dict[str, str]
            User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.

        tz : typing.Optional[str]
            The user's timezone (used for email scheduling).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            Identified user

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.create(
            email="user@example.com",
            name="User",
            device_tokens=["token1", "token2"],
            subscribe_to_emails=True,
            attributes={"department": "engineering", "role": "developer"},
            id="user-id",
        )
        """
        _response = self._raw_client.create(
            id=id,
            email=email,
            name=name,
            device_tokens=device_tokens,
            subscribe_to_emails=subscribe_to_emails,
            attributes=attributes,
            tz=tz,
            request_options=request_options,
        )
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> User:
        """
        Get a single user.

        Parameters
        ----------
        id : str
            ID of the user to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            Found user

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.get(
            id="userId",
        )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def identify(
        self,
        id: str,
        *,
        email: str,
        name: str,
        device_tokens: typing.Sequence[str],
        subscribe_to_emails: bool,
        attributes: typing.Dict[str, str],
        tz: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Identify a user.

        Parameters
        ----------
        id : str
            ID of the user to identify.

        email : str
            The user's email address. Required if subscribeToEmails is true.

        name : str
            The name to refer to the user by in emails.

        device_tokens : typing.Sequence[str]
            The user's device tokens, used for push notifications.

        subscribe_to_emails : bool
            Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.

        attributes : typing.Dict[str, str]
            User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.

        tz : typing.Optional[str]
            The user's timezone (used for email scheduling).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            Upserted user

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.identify(
            id="id",
            email="user@example.com",
            name="User",
            tz="Europe/London",
            device_tokens=["token1", "token2"],
            subscribe_to_emails=True,
            attributes={"department": "engineering", "role": "developer"},
        )
        """
        _response = self._raw_client.identify(
            id,
            email=email,
            name=name,
            device_tokens=device_tokens,
            subscribe_to_emails=subscribe_to_emails,
            attributes=attributes,
            tz=tz,
            request_options=request_options,
        )
        return _response.data

    def update(
        self,
        id: str,
        *,
        email: str,
        name: str,
        device_tokens: typing.Sequence[str],
        subscribe_to_emails: bool,
        attributes: typing.Dict[str, str],
        tz: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Update a user.

        Parameters
        ----------
        id : str
            ID of the user to update.

        email : str
            The user's email address. Required if subscribeToEmails is true.

        name : str
            The name to refer to the user by in emails.

        device_tokens : typing.Sequence[str]
            The user's device tokens, used for push notifications.

        subscribe_to_emails : bool
            Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.

        attributes : typing.Dict[str, str]
            User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.

        tz : typing.Optional[str]
            The user's timezone (used for email scheduling).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            Updated user

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.update(
            id="id",
            email="user@example.com",
            name="User",
            tz="Europe/London",
            device_tokens=["token1", "token2"],
            subscribe_to_emails=True,
            attributes={"department": "engineering", "role": "developer"},
        )
        """
        _response = self._raw_client.update(
            id,
            email=email,
            name=name,
            device_tokens=device_tokens,
            subscribe_to_emails=subscribe_to_emails,
            attributes=attributes,
            tz=tz,
            request_options=request_options,
        )
        return _response.data

    def all_metrics(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[MetricResponse]:
        """
        Get a single user's progress against all active metrics.

        Parameters
        ----------
        id : str
            ID of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[MetricResponse]
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.all_metrics(
            id="userId",
        )
        """
        _response = self._raw_client.all_metrics(id, request_options=request_options)
        return _response.data

    def single_metric(
        self, id: str, key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> MetricResponse:
        """
        Get a user's progress against a single active metric.

        Parameters
        ----------
        id : str
            ID of the user.

        key : str
            Unique key of the metric.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetricResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.single_metric(
            id="userId",
            key="key",
        )
        """
        _response = self._raw_client.single_metric(id, key, request_options=request_options)
        return _response.data

    def metric_event_summary(
        self,
        id: str,
        key: str,
        *,
        aggregation: UsersMetricEventSummaryRequestAggregation,
        start_date: str,
        end_date: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UsersMetricEventSummaryResponseItem]:
        """
        Get a summary of metric events over time for a user.

        Parameters
        ----------
        id : str
            ID of the user.

        key : str
            Unique key of the metric.

        aggregation : UsersMetricEventSummaryRequestAggregation
            The time period over which to aggregate the event data.

        start_date : str
            The start date for the data range in YYYY-MM-DD format. The startDate must be before the endDate, and the date range must not exceed 400 days.

        end_date : str
            The end date for the data range in YYYY-MM-DD format. The endDate must be after the startDate, and the date range must not exceed 400 days.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UsersMetricEventSummaryResponseItem]
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.metric_event_summary(
            id="userId",
            key="words-written",
            aggregation="daily",
            start_date="2024-01-01",
            end_date="2024-01-31",
        )
        """
        _response = self._raw_client.metric_event_summary(
            id, key, aggregation=aggregation, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    def achievements(
        self,
        id: str,
        *,
        include_incomplete: typing.Optional[typing.Literal["true"]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[CompletedAchievementResponse]:
        """
        Get a user's achievements.

        Parameters
        ----------
        id : str
            ID of the user.

        include_incomplete : typing.Optional[typing.Literal["true"]]
            When set to 'true', returns both completed and incomplete achievements for the user. When omitted or set to any other value, returns only completed achievements.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CompletedAchievementResponse]
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.achievements(
            id="userId",
        )
        """
        _response = self._raw_client.achievements(
            id, include_incomplete=include_incomplete, request_options=request_options
        )
        return _response.data

    def streak(
        self,
        id: str,
        *,
        history_periods: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StreakResponse:
        """
        Get a user's streak data.

        Parameters
        ----------
        id : str
            ID of the user.

        history_periods : typing.Optional[int]
            The number of past streak periods to include in the streakHistory field of the  response.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StreakResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.streak(
            id="userId",
            history_periods=1,
        )
        """
        _response = self._raw_client.streak(id, history_periods=history_periods, request_options=request_options)
        return _response.data

    def points(
        self,
        id: str,
        key: str,
        *,
        awards: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetUserPointsResponse:
        """
        Get a user's points for a specific points system.

        Parameters
        ----------
        id : str
            ID of the user.

        key : str
            Key of the points system.

        awards : typing.Optional[int]
            The number of recent point awards to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserPointsResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.points(
            id="userId",
            key="points-system-key",
            awards=1,
        )
        """
        _response = self._raw_client.points(id, key, awards=awards, request_options=request_options)
        return _response.data

    def points_event_summary(
        self,
        id: str,
        key: str,
        *,
        aggregation: UsersPointsEventSummaryRequestAggregation,
        start_date: str,
        end_date: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UsersPointsEventSummaryResponseItem]:
        """
        Get a summary of points awards over time for a user for a specific points system.

        Parameters
        ----------
        id : str
            ID of the user.

        key : str
            Key of the points system.

        aggregation : UsersPointsEventSummaryRequestAggregation
            The time period over which to aggregate the event data.

        start_date : str
            The start date for the data range in YYYY-MM-DD format. The startDate must be before the endDate, and the date range must not exceed 400 days.

        end_date : str
            The end date for the data range in YYYY-MM-DD format. The endDate must be after the startDate, and the date range must not exceed 400 days.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UsersPointsEventSummaryResponseItem]
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.points_event_summary(
            id="userId",
            key="points-system-key",
            aggregation="daily",
            start_date="2024-01-01",
            end_date="2024-01-31",
        )
        """
        _response = self._raw_client.points_event_summary(
            id, key, aggregation=aggregation, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    def leaderboard(
        self,
        id: str,
        key: str,
        *,
        run: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserLeaderboardResponseWithHistory:
        """
        Get a user's rank, value, and history for a specific leaderboard.

        Parameters
        ----------
        id : str
            The user's ID in your database.

        key : str
            Unique key of the leaderboard as set when created.

        run : typing.Optional[str]
            Specific run date in YYYY-MM-DD format. If not provided, returns the current run.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserLeaderboardResponseWithHistory
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.users.leaderboard(
            id="user-123",
            key="weekly-words",
            run="2025-01-15",
        )
        """
        _response = self._raw_client.leaderboard(id, key, run=run, request_options=request_options)
        return _response.data


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUsersClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        id: str,
        email: str,
        name: str,
        device_tokens: typing.Sequence[str],
        subscribe_to_emails: bool,
        attributes: typing.Dict[str, str],
        tz: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Create a new user.

        Parameters
        ----------
        id : str
            The ID of the user in your database. Must be a string.

        email : str
            The user's email address. Required if subscribeToEmails is true.

        name : str
            The name to refer to the user by in emails.

        device_tokens : typing.Sequence[str]
            The user's device tokens, used for push notifications.

        subscribe_to_emails : bool
            Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.

        attributes : typing.Dict[str, str]
            User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.

        tz : typing.Optional[str]
            The user's timezone (used for email scheduling).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            Identified user

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.create(
                email="user@example.com",
                name="User",
                device_tokens=["token1", "token2"],
                subscribe_to_emails=True,
                attributes={"department": "engineering", "role": "developer"},
                id="user-id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            id=id,
            email=email,
            name=name,
            device_tokens=device_tokens,
            subscribe_to_emails=subscribe_to_emails,
            attributes=attributes,
            tz=tz,
            request_options=request_options,
        )
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> User:
        """
        Get a single user.

        Parameters
        ----------
        id : str
            ID of the user to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            Found user

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.get(
                id="userId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def identify(
        self,
        id: str,
        *,
        email: str,
        name: str,
        device_tokens: typing.Sequence[str],
        subscribe_to_emails: bool,
        attributes: typing.Dict[str, str],
        tz: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Identify a user.

        Parameters
        ----------
        id : str
            ID of the user to identify.

        email : str
            The user's email address. Required if subscribeToEmails is true.

        name : str
            The name to refer to the user by in emails.

        device_tokens : typing.Sequence[str]
            The user's device tokens, used for push notifications.

        subscribe_to_emails : bool
            Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.

        attributes : typing.Dict[str, str]
            User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.

        tz : typing.Optional[str]
            The user's timezone (used for email scheduling).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            Upserted user

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.identify(
                id="id",
                email="user@example.com",
                name="User",
                tz="Europe/London",
                device_tokens=["token1", "token2"],
                subscribe_to_emails=True,
                attributes={"department": "engineering", "role": "developer"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.identify(
            id,
            email=email,
            name=name,
            device_tokens=device_tokens,
            subscribe_to_emails=subscribe_to_emails,
            attributes=attributes,
            tz=tz,
            request_options=request_options,
        )
        return _response.data

    async def update(
        self,
        id: str,
        *,
        email: str,
        name: str,
        device_tokens: typing.Sequence[str],
        subscribe_to_emails: bool,
        attributes: typing.Dict[str, str],
        tz: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Update a user.

        Parameters
        ----------
        id : str
            ID of the user to update.

        email : str
            The user's email address. Required if subscribeToEmails is true.

        name : str
            The name to refer to the user by in emails.

        device_tokens : typing.Sequence[str]
            The user's device tokens, used for push notifications.

        subscribe_to_emails : bool
            Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.

        attributes : typing.Dict[str, str]
            User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.

        tz : typing.Optional[str]
            The user's timezone (used for email scheduling).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            Updated user

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.update(
                id="id",
                email="user@example.com",
                name="User",
                tz="Europe/London",
                device_tokens=["token1", "token2"],
                subscribe_to_emails=True,
                attributes={"department": "engineering", "role": "developer"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id,
            email=email,
            name=name,
            device_tokens=device_tokens,
            subscribe_to_emails=subscribe_to_emails,
            attributes=attributes,
            tz=tz,
            request_options=request_options,
        )
        return _response.data

    async def all_metrics(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[MetricResponse]:
        """
        Get a single user's progress against all active metrics.

        Parameters
        ----------
        id : str
            ID of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[MetricResponse]
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.all_metrics(
                id="userId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.all_metrics(id, request_options=request_options)
        return _response.data

    async def single_metric(
        self, id: str, key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> MetricResponse:
        """
        Get a user's progress against a single active metric.

        Parameters
        ----------
        id : str
            ID of the user.

        key : str
            Unique key of the metric.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetricResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.single_metric(
                id="userId",
                key="key",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.single_metric(id, key, request_options=request_options)
        return _response.data

    async def metric_event_summary(
        self,
        id: str,
        key: str,
        *,
        aggregation: UsersMetricEventSummaryRequestAggregation,
        start_date: str,
        end_date: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UsersMetricEventSummaryResponseItem]:
        """
        Get a summary of metric events over time for a user.

        Parameters
        ----------
        id : str
            ID of the user.

        key : str
            Unique key of the metric.

        aggregation : UsersMetricEventSummaryRequestAggregation
            The time period over which to aggregate the event data.

        start_date : str
            The start date for the data range in YYYY-MM-DD format. The startDate must be before the endDate, and the date range must not exceed 400 days.

        end_date : str
            The end date for the data range in YYYY-MM-DD format. The endDate must be after the startDate, and the date range must not exceed 400 days.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UsersMetricEventSummaryResponseItem]
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.metric_event_summary(
                id="userId",
                key="words-written",
                aggregation="daily",
                start_date="2024-01-01",
                end_date="2024-01-31",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.metric_event_summary(
            id, key, aggregation=aggregation, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    async def achievements(
        self,
        id: str,
        *,
        include_incomplete: typing.Optional[typing.Literal["true"]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[CompletedAchievementResponse]:
        """
        Get a user's achievements.

        Parameters
        ----------
        id : str
            ID of the user.

        include_incomplete : typing.Optional[typing.Literal["true"]]
            When set to 'true', returns both completed and incomplete achievements for the user. When omitted or set to any other value, returns only completed achievements.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CompletedAchievementResponse]
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.achievements(
                id="userId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.achievements(
            id, include_incomplete=include_incomplete, request_options=request_options
        )
        return _response.data

    async def streak(
        self,
        id: str,
        *,
        history_periods: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StreakResponse:
        """
        Get a user's streak data.

        Parameters
        ----------
        id : str
            ID of the user.

        history_periods : typing.Optional[int]
            The number of past streak periods to include in the streakHistory field of the  response.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StreakResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.streak(
                id="userId",
                history_periods=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.streak(id, history_periods=history_periods, request_options=request_options)
        return _response.data

    async def points(
        self,
        id: str,
        key: str,
        *,
        awards: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetUserPointsResponse:
        """
        Get a user's points for a specific points system.

        Parameters
        ----------
        id : str
            ID of the user.

        key : str
            Key of the points system.

        awards : typing.Optional[int]
            The number of recent point awards to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserPointsResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.points(
                id="userId",
                key="points-system-key",
                awards=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.points(id, key, awards=awards, request_options=request_options)
        return _response.data

    async def points_event_summary(
        self,
        id: str,
        key: str,
        *,
        aggregation: UsersPointsEventSummaryRequestAggregation,
        start_date: str,
        end_date: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UsersPointsEventSummaryResponseItem]:
        """
        Get a summary of points awards over time for a user for a specific points system.

        Parameters
        ----------
        id : str
            ID of the user.

        key : str
            Key of the points system.

        aggregation : UsersPointsEventSummaryRequestAggregation
            The time period over which to aggregate the event data.

        start_date : str
            The start date for the data range in YYYY-MM-DD format. The startDate must be before the endDate, and the date range must not exceed 400 days.

        end_date : str
            The end date for the data range in YYYY-MM-DD format. The endDate must be after the startDate, and the date range must not exceed 400 days.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UsersPointsEventSummaryResponseItem]
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.points_event_summary(
                id="userId",
                key="points-system-key",
                aggregation="daily",
                start_date="2024-01-01",
                end_date="2024-01-31",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.points_event_summary(
            id, key, aggregation=aggregation, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    async def leaderboard(
        self,
        id: str,
        key: str,
        *,
        run: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserLeaderboardResponseWithHistory:
        """
        Get a user's rank, value, and history for a specific leaderboard.

        Parameters
        ----------
        id : str
            The user's ID in your database.

        key : str
            Unique key of the leaderboard as set when created.

        run : typing.Optional[str]
            Specific run date in YYYY-MM-DD format. If not provided, returns the current run.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserLeaderboardResponseWithHistory
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.leaderboard(
                id="user-123",
                key="weekly-words",
                run="2025-01-15",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.leaderboard(id, key, run=run, request_options=request_options)
        return _response.data
