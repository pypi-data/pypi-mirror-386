# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.bulk_streak_response import BulkStreakResponse
from ..types.streak_ranking_user import StreakRankingUser
from .raw_client import AsyncRawStreaksClient, RawStreaksClient
from .types.streaks_rankings_request_type import StreaksRankingsRequestType


class StreaksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawStreaksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawStreaksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawStreaksClient
        """
        return self._raw_client

    def list(
        self,
        *,
        user_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkStreakResponse:
        """
        Get the streak lengths of a list of users, ranked by streak length from longest to shortest.

        Parameters
        ----------
        user_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A list of up to 100 user IDs.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkStreakResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.streaks.list()
        """
        _response = self._raw_client.list(user_ids=user_ids, request_options=request_options)
        return _response.data

    def rankings(
        self,
        *,
        limit: typing.Optional[int] = None,
        type: typing.Optional[StreaksRankingsRequestType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[StreakRankingUser]:
        """
        Get the top users by streak length (active or longest).

        Parameters
        ----------
        limit : typing.Optional[int]
            Number of users to return. Must be between 1 and 100.

        type : typing.Optional[StreaksRankingsRequestType]
            Whether to rank users by active streaks or longest streaks ever achieved.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[StreakRankingUser]
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.streaks.rankings(
            limit=1,
            type="active",
        )
        """
        _response = self._raw_client.rankings(limit=limit, type=type, request_options=request_options)
        return _response.data


class AsyncStreaksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawStreaksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawStreaksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawStreaksClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        user_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkStreakResponse:
        """
        Get the streak lengths of a list of users, ranked by streak length from longest to shortest.

        Parameters
        ----------
        user_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A list of up to 100 user IDs.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkStreakResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.streaks.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(user_ids=user_ids, request_options=request_options)
        return _response.data

    async def rankings(
        self,
        *,
        limit: typing.Optional[int] = None,
        type: typing.Optional[StreaksRankingsRequestType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[StreakRankingUser]:
        """
        Get the top users by streak length (active or longest).

        Parameters
        ----------
        limit : typing.Optional[int]
            Number of users to return. Must be between 1 and 100.

        type : typing.Optional[StreaksRankingsRequestType]
            Whether to rank users by active streaks or longest streaks ever achieved.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[StreakRankingUser]
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.streaks.rankings(
                limit=1,
                type="active",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.rankings(limit=limit, type=type, request_options=request_options)
        return _response.data
