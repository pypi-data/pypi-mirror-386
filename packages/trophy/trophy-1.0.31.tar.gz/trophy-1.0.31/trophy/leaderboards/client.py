# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.leaderboard_response_with_rankings import LeaderboardResponseWithRankings
from .raw_client import AsyncRawLeaderboardsClient, RawLeaderboardsClient
from .types.leaderboards_all_response_item import LeaderboardsAllResponseItem


class LeaderboardsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawLeaderboardsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawLeaderboardsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawLeaderboardsClient
        """
        return self._raw_client

    def all_(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[LeaderboardsAllResponseItem]:
        """
        Get all active leaderboards for your organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LeaderboardsAllResponseItem]
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.leaderboards.all_()
        """
        _response = self._raw_client.all_(request_options=request_options)
        return _response.data

    def get(
        self,
        key: str,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        run: typing.Optional[str] = None,
        user_id: typing.Optional[str] = None,
        user_attributes: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LeaderboardResponseWithRankings:
        """
        Get a specific leaderboard by its key.

        Parameters
        ----------
        key : str
            Unique key of the leaderboard as set when created.

        offset : typing.Optional[int]
            Number of rankings to skip for pagination.

        limit : typing.Optional[int]
            Maximum number of rankings to return.

        run : typing.Optional[str]
            Specific run date in YYYY-MM-DD format. If not provided, returns the current run.

        user_id : typing.Optional[str]
            When provided, offset is relative to this user's position on the leaderboard. If the user is not found in the leaderboard, returns empty rankings array.

        user_attributes : typing.Optional[str]
            Attribute key and value to filter the rankings by, separated by a colon. This parameter is required, and only valid for leaderboards with a breakdown attribute.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LeaderboardResponseWithRankings
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.leaderboards.get(
            key="weekly-words",
            offset=1,
            limit=1,
            run="2025-01-15",
            user_id="user-123",
            user_attributes="city:London",
        )
        """
        _response = self._raw_client.get(
            key,
            offset=offset,
            limit=limit,
            run=run,
            user_id=user_id,
            user_attributes=user_attributes,
            request_options=request_options,
        )
        return _response.data


class AsyncLeaderboardsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawLeaderboardsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawLeaderboardsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawLeaderboardsClient
        """
        return self._raw_client

    async def all_(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[LeaderboardsAllResponseItem]:
        """
        Get all active leaderboards for your organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LeaderboardsAllResponseItem]
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.leaderboards.all_()


        asyncio.run(main())
        """
        _response = await self._raw_client.all_(request_options=request_options)
        return _response.data

    async def get(
        self,
        key: str,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        run: typing.Optional[str] = None,
        user_id: typing.Optional[str] = None,
        user_attributes: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LeaderboardResponseWithRankings:
        """
        Get a specific leaderboard by its key.

        Parameters
        ----------
        key : str
            Unique key of the leaderboard as set when created.

        offset : typing.Optional[int]
            Number of rankings to skip for pagination.

        limit : typing.Optional[int]
            Maximum number of rankings to return.

        run : typing.Optional[str]
            Specific run date in YYYY-MM-DD format. If not provided, returns the current run.

        user_id : typing.Optional[str]
            When provided, offset is relative to this user's position on the leaderboard. If the user is not found in the leaderboard, returns empty rankings array.

        user_attributes : typing.Optional[str]
            Attribute key and value to filter the rankings by, separated by a colon. This parameter is required, and only valid for leaderboards with a breakdown attribute.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LeaderboardResponseWithRankings
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.leaderboards.get(
                key="weekly-words",
                offset=1,
                limit=1,
                run="2025-01-15",
                user_id="user-123",
                user_attributes="city:London",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            key,
            offset=offset,
            limit=limit,
            run=run,
            user_id=user_id,
            user_attributes=user_attributes,
            request_options=request_options,
        )
        return _response.data
