# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.points_summary_response import PointsSummaryResponse
from ..types.points_system_response import PointsSystemResponse
from .raw_client import AsyncRawPointsClient, RawPointsClient


class PointsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPointsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPointsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPointsClient
        """
        return self._raw_client

    def summary(
        self,
        key: str,
        *,
        user_attributes: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PointsSummaryResponse:
        """
        Get a breakdown of the number of users with points in each range.

        Parameters
        ----------
        key : str
            Key of the points system.

        user_attributes : typing.Optional[str]
            Optional colon-delimited user attribute filters in the format attribute:value,attribute:value. Only users matching ALL specified attributes will be included in the points breakdown.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PointsSummaryResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.points.summary(
            key="points-system-key",
            user_attributes="plan-type:premium,region:us-east",
        )
        """
        _response = self._raw_client.summary(key, user_attributes=user_attributes, request_options=request_options)
        return _response.data

    def system(self, key: str, *, request_options: typing.Optional[RequestOptions] = None) -> PointsSystemResponse:
        """
        Get a points system with all its triggers.

        Parameters
        ----------
        key : str
            Key of the points system.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PointsSystemResponse
            Successful operation

        Examples
        --------
        from trophy import TrophyApi

        client = TrophyApi(
            api_key="YOUR_API_KEY",
        )
        client.points.system(
            key="points-system-key",
        )
        """
        _response = self._raw_client.system(key, request_options=request_options)
        return _response.data


class AsyncPointsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPointsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPointsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPointsClient
        """
        return self._raw_client

    async def summary(
        self,
        key: str,
        *,
        user_attributes: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PointsSummaryResponse:
        """
        Get a breakdown of the number of users with points in each range.

        Parameters
        ----------
        key : str
            Key of the points system.

        user_attributes : typing.Optional[str]
            Optional colon-delimited user attribute filters in the format attribute:value,attribute:value. Only users matching ALL specified attributes will be included in the points breakdown.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PointsSummaryResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.points.summary(
                key="points-system-key",
                user_attributes="plan-type:premium,region:us-east",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.summary(
            key, user_attributes=user_attributes, request_options=request_options
        )
        return _response.data

    async def system(
        self, key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PointsSystemResponse:
        """
        Get a points system with all its triggers.

        Parameters
        ----------
        key : str
            Key of the points system.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PointsSystemResponse
            Successful operation

        Examples
        --------
        import asyncio

        from trophy import AsyncTrophyApi

        client = AsyncTrophyApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.points.system(
                key="points-system-key",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.system(key, request_options=request_options)
        return _response.data
