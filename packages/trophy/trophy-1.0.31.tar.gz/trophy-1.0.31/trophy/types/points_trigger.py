# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .points_trigger_time_unit import PointsTriggerTimeUnit
from .points_trigger_type import PointsTriggerType


class PointsTrigger(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the trigger
    """

    type: typing.Optional[PointsTriggerType] = pydantic.Field(default=None)
    """
    The type of trigger
    """

    points: typing.Optional[int] = pydantic.Field(default=None)
    """
    The points awarded by this trigger.
    """

    metric_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="metricName")] = pydantic.Field(
        default=None
    )
    """
    If the trigger has type 'metric', the name of the metric
    """

    metric_threshold: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="metricThreshold")] = (
        pydantic.Field(default=None)
    )
    """
    If the trigger has type 'metric', the threshold of the metric that triggers the points
    """

    streak_length_threshold: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="streakLengthThreshold")
    ] = pydantic.Field(default=None)
    """
    If the trigger has type 'streak', the threshold of the streak that triggers the points
    """

    achievement_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="achievementName")] = (
        pydantic.Field(default=None)
    )
    """
    If the trigger has type 'achievement', the name of the achievement
    """

    time_unit: typing_extensions.Annotated[typing.Optional[PointsTriggerTimeUnit], FieldMetadata(alias="timeUnit")] = (
        pydantic.Field(default=None)
    )
    """
    If the trigger has type 'time', the unit of time after which to award points
    """

    time_interval: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="timeInterval")] = (
        pydantic.Field(default=None)
    )
    """
    If the trigger has type 'time', the numer of units of timeUnit after which to award points
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
