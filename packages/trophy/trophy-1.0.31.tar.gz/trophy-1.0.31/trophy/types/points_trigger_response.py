# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .points_trigger_response_event_attribute import PointsTriggerResponseEventAttribute
from .points_trigger_response_status import PointsTriggerResponseStatus
from .points_trigger_response_time_unit import PointsTriggerResponseTimeUnit
from .points_trigger_response_type import PointsTriggerResponseType
from .points_trigger_response_user_attributes_item import PointsTriggerResponseUserAttributesItem


class PointsTriggerResponse(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The unique ID of the trigger.
    """

    type: PointsTriggerResponseType = pydantic.Field()
    """
    The type of trigger.
    """

    points: int = pydantic.Field()
    """
    The points awarded by this trigger.
    """

    status: PointsTriggerResponseStatus = pydantic.Field()
    """
    The status of the trigger.
    """

    achievement_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="achievementId")] = (
        pydantic.Field(default=None)
    )
    """
    The unique ID of the achievement associated with this trigger, if the trigger is an achievement.
    """

    metric_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="metricId")] = pydantic.Field(
        default=None
    )
    """
    The unique ID of the metric associated with this trigger, if the trigger is a metric.
    """

    metric_threshold: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="metricThreshold")] = (
        pydantic.Field(default=None)
    )
    """
    The amount that a user must increase the metric to earn the points, if the trigger is a metric.
    """

    streak_length_threshold: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="streakLengthThreshold")
    ] = pydantic.Field(default=None)
    """
    The number of consecutive streak periods that a user must complete to earn the points, if the trigger is a streak.
    """

    metric_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="metricName")] = pydantic.Field(
        default=None
    )
    """
    The name of the metric associated with this trigger, if the trigger is a metric.
    """

    achievement_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="achievementName")] = (
        pydantic.Field(default=None)
    )
    """
    The name of the achievement associated with this trigger, if the trigger is an achievement.
    """

    time_unit: typing_extensions.Annotated[
        typing.Optional[PointsTriggerResponseTimeUnit], FieldMetadata(alias="timeUnit")
    ] = pydantic.Field(default=None)
    """
    The time unit of the trigger, if the trigger is a time interval.
    """

    time_interval: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="timeInterval")] = (
        pydantic.Field(default=None)
    )
    """
    The interval of the trigger in the time unit, if the trigger is a time interval.
    """

    user_attributes: typing_extensions.Annotated[
        typing.Optional[typing.List[PointsTriggerResponseUserAttributesItem]], FieldMetadata(alias="userAttributes")
    ] = pydantic.Field(default=None)
    """
    User attribute filters that must be met for this trigger to activate. Only present if the trigger has user attribute filters configured.
    """

    event_attribute: typing_extensions.Annotated[
        typing.Optional[PointsTriggerResponseEventAttribute], FieldMetadata(alias="eventAttribute")
    ] = pydantic.Field(default=None)
    """
    Event attribute filter that must be met for this trigger to activate. Only present if the trigger has an event filter configured.
    """

    created: dt.datetime = pydantic.Field()
    """
    The date and time the trigger was created, in ISO 8601 format.
    """

    updated: dt.datetime = pydantic.Field()
    """
    The date and time the trigger was last updated, in ISO 8601 format.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
