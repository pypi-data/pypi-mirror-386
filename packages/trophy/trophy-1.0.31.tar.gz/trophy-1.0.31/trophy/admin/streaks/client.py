# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .raw_client import AsyncRawStreaksClient, RawStreaksClient

if typing.TYPE_CHECKING:
    from .freezes.client import AsyncFreezesClient, FreezesClient


class StreaksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawStreaksClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._freezes: typing.Optional[FreezesClient] = None

    @property
    def with_raw_response(self) -> RawStreaksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawStreaksClient
        """
        return self._raw_client

    @property
    def freezes(self):
        if self._freezes is None:
            from .freezes.client import FreezesClient  # noqa: E402

            self._freezes = FreezesClient(client_wrapper=self._client_wrapper)
        return self._freezes


class AsyncStreaksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawStreaksClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._freezes: typing.Optional[AsyncFreezesClient] = None

    @property
    def with_raw_response(self) -> AsyncRawStreaksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawStreaksClient
        """
        return self._raw_client

    @property
    def freezes(self):
        if self._freezes is None:
            from .freezes.client import AsyncFreezesClient  # noqa: E402

            self._freezes = AsyncFreezesClient(client_wrapper=self._client_wrapper)
        return self._freezes
