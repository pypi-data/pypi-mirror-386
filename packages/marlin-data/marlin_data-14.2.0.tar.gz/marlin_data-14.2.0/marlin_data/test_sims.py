#/usr/bin/python3

# from marlin_utils import *


# from marlin_data.marlin_data import MarlinDerivedData
# from marlin_data.marlin_data import MarlinDataStreamer
# from marlin_data.marlin_data import MarlinData

from marlin_data import *

# data download routine
def download_data(sim_id = ""):
    print (data_adapter.downloaded_snapshots)
    local_sim_ids = []
    local_sim_ids.append(sim_id)
    print (local_sim_ids)
    if sim_id != "":
        data_adapter.download_simulation_snapshots(load_args={'simulation_path':simulation_data_path, 'location':locations, 'ss_ids' : local_sim_ids})
   

# --- Build f profile from marlin_adapter fourier & fast index ---
sim_ids = ["595319575884544847440835", "711602635032502887898504", "983040429874824099068136", "496330765318343040702688", "4510916050868080480725", "791766822611366068898805", "255909560907909230385506", "147806043092917235813293", "78166070127568866942302", "842973085190946012464209", "829104114451608323962914", "98609866005174372621222", "657840894015545578254694", "186889183607954245154458", "122544861653979922814199", "746620378036255544838568", "952470554636204171461253", "84112867121113110266116", "363225061427360721137730", "892132173275665509527852", "318396967157545581971621", "356373695111556704055606", "904312141590731430836451", "48339782993708725612372", "64750676209439611520678", "82000738700746005197334", "702347117716629389321406", "250396319402307579582508", "493774115372907090242973", "194390376877680115920253", "14268458523554600846434", "434956021136141906386898", "69649683436184019747768", "44628814182950235636971", "790960398526743855223705", "13326721885126671142836", "265674761255571576108244", "597681256986802138994218", "236106104873301048552682", "916713239567735225362134", "804031065014437941740813", "291568429359273703023", "36173624202566695107248", "8479382645647189754988", "16232091178931004631151", "458216449030310996755802", "644591713862472180785605", "947001382799689346997018", "392291757657498669254360", "999641986773914295779102", "398566267541751172139272", "612544273941231236030105", "708869496373649469644956", "991813660211675758125747", "839194952404431997544299", "534392719420462600801900", "798953357404557943447630", "15352589773654034702565", "114020915287240939545830", "42437311049457749180813", "958264056823172008798164", "999876447769858733241497", "222916752571191933551256", "830598602900519976859006", "99779383802341290531997", "971461050187740241769345", "59043452008554415790203", "879267595290112763224531", "586498933534706126389302", "803795664365219857193652", "117738438107927203397531", "163763270476903029439970", "969913897751455359101590", "476804513781528081390032", "433963226075916145767156", "740056121451672403310034", "47862379468883676885094", "514225102063689162724848", "294032755178436053305480", "651778536789633693195669", "40046579547921604455802", "628798802997990744708899", "136312491454205275099007", "709207865260520814233226", "145000180513667480099632", "510832648846393214970934", "582108995030482186472738", "706554225032587520657599", "529314699403415358587551", "988833590601751004616652", "702360461766605529779980", "38695127095594210945884", "878503418620574920635757", "114154144321173252847827", "13262856259593747625685", "908316578108607219709580", "843745993758582765671250", "497092387994289494373074", "656129749675914305098841", "132671101468846627275012", "847299202771613303902160", "610548711559501462525762", "474146629440917067077152", "718545950230614644626820", "592734076245535283714875", "747136525400112236209658", "242603515675751708101068", "445273518915185389251326", "191543185535264301199848", "162355660833383811874435", "910163921797217956830050", "635861410812118850899853", "980573457629756755689595", "755360262315634825848479", "959730084381573413810310", "270818464518269327084191", "885338634773134295110446", "620899701130621492046078", "979711317568961153016719", "20668717128253169757893", "697059785829925234778953", "3521956994684221923191", "193953484728420863638689", "337895537307445167179909", "989963294442961198868934", "388589834295466504751373", "789650270822941107972383", "254275593867204538629314", "604986875904141081936198", "336713800390651444816281", "840336184984101926856426", "485285531320791921994363", "2554188435844078833112", "162247758586883721721111", "563641134757783788955547", "505300736835293127862892", "875042516439293597462818", "981289725098112139385775", "141416348861254933531551", "94013335755761153522816", "874639535250105653632302", "218137228881645915449411"]

locations = ['67149847']

# only if you want to save locally
simulation_data_path = "/home/vixen/rs/dev/marlin_data/marlin_data/data"

# create data adapter and download
data_adapter = MarlinData(load_args={'limit' : 10000})
# sim_ids  =data_adapter.download_simulation_snapshots(load_args={'simulation_path':simulation_data_path, 'location':locations,  "time_start" : "140822_145029.000" , "time_end" : "140822_185029.000"}, id_only = True)
# data_adapter.download_simulation_snapshots(load_args={'simulation_path':simulation_data_path, 'location':locations, 'ss_ids' : sim_ids})

for _id in sim_ids:
    download_data(sim_id=_id)


# create iterable datafeed
data_feed = MarlinDataStreamer()

# initialise data feed
data_feed.init_data(data_adapter.simulation_data, data_adapter.simulation_index)

# # define parms for marlin data signal processing
# nfft = 2048 # 65536#2048 #65536
# min_f = 100000
# max_f = 140000

# # indexing parms [splitting fourier data up into a more efficient indexing algorithm for the ML framework]
# delta_t = 0.002
# dd_delta_f = 500

# #Â build marlin-data adapters for data feed
# for snapshot in data_feed:
#     data_adapter.derived_data = None
#     data_adapter.build_derived_data(n_fft=nfft)
    
#     startt(name="build_derived_data")
#     snapshot_derived_data = data_adapter.derived_data.build_derived_data(simulation_data=snapshot, f_min = min_f, f_max = max_f)
#     stopt(desc="build_derived_data", out = 1)
    
#     # nb. time issue 
#     startt(name="index_fourier")
#     data_adapter.derived_data.ft_build_band_energy_profile(sample_delta_t=delta_t, simulation_data=snapshot, discrete_size = 500)
#     stopt(desc="index_fourier")
    

# get snapshots for locaiton and time

       
    



