# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.file import File
from ..types.file_create_permission_info_value import FileCreatePermissionInfoValue
from ..types.file_create_resource_info_value import FileCreateResourceInfoValue
from ..types.file_id_presigned_url import FileIdPresignedUrl
from ..types.page_figure_metadata import PageFigureMetadata
from ..types.page_screenshot_metadata import PageScreenshotMetadata
from ..types.presigned_url import PresignedUrl
from .raw_client import AsyncRawFilesClient, RawFilesClient
from .types.file_create_from_url_resource_info_value import FileCreateFromUrlResourceInfoValue

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFilesClient
        """
        return self._raw_client

    def get(
        self,
        id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> File:
        """
        Read File metadata objects.

        Parameters
        ----------
        id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        File
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.get(
            id="id",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get(
            id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def delete(
        self,
        id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete the file from S3.

        Parameters
        ----------
        id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.delete(
            id="id",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.delete(
            id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[File]:
        """
        Read File metadata objects.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[File]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.list(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def upload(
        self,
        *,
        upload_file: core.File,
        external_file_id: typing.Optional[str] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> File:
        """
        Upload a file to S3.

        Parameters
        ----------
        upload_file : core.File
            See core.File for more documentation

        external_file_id : typing.Optional[str]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        File
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.upload(
            external_file_id="external_file_id",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.upload(
            upload_file=upload_file,
            external_file_id=external_file_id,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    def generate_presigned_url(
        self,
        *,
        name: str,
        expires_at_seconds: typing.Optional[int] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        external_file_id: typing.Optional[str] = OMIT,
        file_size: typing.Optional[int] = OMIT,
        last_modified_at: typing.Optional[dt.datetime] = OMIT,
        resource_info: typing.Optional[typing.Dict[str, typing.Optional[FileCreateResourceInfoValue]]] = OMIT,
        permission_info: typing.Optional[typing.Dict[str, typing.Optional[FileCreatePermissionInfoValue]]] = OMIT,
        data_source_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileIdPresignedUrl:
        """
        Create a presigned url for uploading a file.

        The presigned url is valid for a limited time period, after which it will expire.
        Be careful on accidental exposure of the presigned url, as it may allow unauthorized access to the file before the expiration.

        Parameters
        ----------
        name : str
            Name that will be used for created file. If possible, always include the file extension in the name.

        expires_at_seconds : typing.Optional[int]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        external_file_id : typing.Optional[str]
            The ID of the file in the external system

        file_size : typing.Optional[int]
            Size of the file in bytes

        last_modified_at : typing.Optional[dt.datetime]
            The last modified time of the file

        resource_info : typing.Optional[typing.Dict[str, typing.Optional[FileCreateResourceInfoValue]]]
            Resource information for the file

        permission_info : typing.Optional[typing.Dict[str, typing.Optional[FileCreatePermissionInfoValue]]]
            Permission information for the file

        data_source_id : typing.Optional[str]
            The ID of the data source that the file belongs to

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileIdPresignedUrl
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.generate_presigned_url(
            expires_at_seconds=1,
            project_id="project_id",
            organization_id="organization_id",
            name="name",
        )
        """
        _response = self._raw_client.generate_presigned_url(
            name=name,
            expires_at_seconds=expires_at_seconds,
            project_id=project_id,
            organization_id=organization_id,
            external_file_id=external_file_id,
            file_size=file_size,
            last_modified_at=last_modified_at,
            resource_info=resource_info,
            permission_info=permission_info,
            data_source_id=data_source_id,
            request_options=request_options,
        )
        return _response.data

    def sync(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[File]:
        """
        Sync Files API against file contents uploaded via S3 presigned urls.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[File]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.sync(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.sync(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def upload_from_url(
        self,
        *,
        url: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        proxy_url: typing.Optional[str] = OMIT,
        request_headers: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        verify_ssl: typing.Optional[bool] = OMIT,
        follow_redirects: typing.Optional[bool] = OMIT,
        resource_info: typing.Optional[typing.Dict[str, typing.Optional[FileCreateFromUrlResourceInfoValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> File:
        """
        Upload a file to the project from a URL.

        If name is ommitted in the request payload, the file name will be
        extracted from the response Content-Disposition header if available
        or otherwise it will be derived from the URL path.

        If providing the name in the request payload, always suffix the
        file extension in the name if available.

        Parameters
        ----------
        url : str
            URL of the file to download

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        name : typing.Optional[str]
            Name that will be used for created file. If possible, always include the file extension in the name.

        proxy_url : typing.Optional[str]
            URL of the proxy server to use for downloading the file

        request_headers : typing.Optional[typing.Dict[str, typing.Optional[str]]]
            Headers to include in the request when downloading the file

        verify_ssl : typing.Optional[bool]
            Whether to verify the SSL certificate when downloading the file

        follow_redirects : typing.Optional[bool]
            Whether to follow redirects when downloading the file

        resource_info : typing.Optional[typing.Dict[str, typing.Optional[FileCreateFromUrlResourceInfoValue]]]
            Resource information for the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        File
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.upload_from_url(
            project_id="project_id",
            organization_id="organization_id",
            url="url",
        )
        """
        _response = self._raw_client.upload_from_url(
            url=url,
            project_id=project_id,
            organization_id=organization_id,
            name=name,
            proxy_url=proxy_url,
            request_headers=request_headers,
            verify_ssl=verify_ssl,
            follow_redirects=follow_redirects,
            resource_info=resource_info,
            request_options=request_options,
        )
        return _response.data

    def get_content(
        self,
        id: str,
        *,
        expires_at_seconds: typing.Optional[int] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PresignedUrl:
        """
        Returns a presigned url to read the file content.

        Parameters
        ----------
        id : str

        expires_at_seconds : typing.Optional[int]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PresignedUrl
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.get_content(
            id="id",
            expires_at_seconds=1,
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get_content(
            id,
            expires_at_seconds=expires_at_seconds,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    def list_page_screenshots(
        self,
        id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PageScreenshotMetadata]:
        """
        List metadata for all screenshots of pages from a file.

        Parameters
        ----------
        id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PageScreenshotMetadata]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.list_page_screenshots(
            id="id",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list_page_screenshots(
            id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def get_page_screenshot(
        self,
        id: str,
        page_index: int,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get screenshot of a page from a file.

        Parameters
        ----------
        id : str

        page_index : int

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.get_page_screenshot(
            id="id",
            page_index=1,
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get_page_screenshot(
            id, page_index, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def list_pages_figures(
        self,
        id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PageFigureMetadata]:
        """
        Parameters
        ----------
        id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PageFigureMetadata]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.list_pages_figures(
            id="id",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list_pages_figures(
            id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def list_page_figures(
        self,
        id: str,
        page_index: int,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PageFigureMetadata]:
        """
        Parameters
        ----------
        id : str

        page_index : int

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PageFigureMetadata]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.list_page_figures(
            id="id",
            page_index=1,
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list_page_figures(
            id, page_index, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def get_page_figure(
        self,
        id: str,
        page_index: int,
        figure_name: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        page_index : int

        figure_name : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.get_page_figure(
            id="id",
            page_index=1,
            figure_name="figure_name",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get_page_figure(
            id,
            page_index,
            figure_name,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    def generate_page_screenshot_presigned_url(
        self,
        id: str,
        page_index: int,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PresignedUrl:
        """
        Returns a presigned url to read a page screenshot.

        The presigned url is valid for a limited time period, after which it will expire.
        Be careful on accidental exposure of the presigned url, as it may allow unauthorized access to the file before the expiration.

        Parameters
        ----------
        id : str

        page_index : int

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PresignedUrl
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.generate_page_screenshot_presigned_url(
            id="id",
            page_index=1,
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.generate_page_screenshot_presigned_url(
            id, page_index, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def generate_page_figure_presigned_url(
        self,
        id: str,
        page_index: int,
        figure_name: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PresignedUrl:
        """
        Returns a presigned url to read a page figure.

        The presigned url is valid for a limited time period, after which it will expire.
        Be careful on accidental exposure of the presigned url, as it may allow unauthorized access to the file before the expiration.

        Parameters
        ----------
        id : str

        page_index : int

        figure_name : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PresignedUrl
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.files.generate_page_figure_presigned_url(
            id="id",
            page_index=1,
            figure_name="figure_name",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.generate_page_figure_presigned_url(
            id,
            page_index,
            figure_name,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data


class AsyncFilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFilesClient
        """
        return self._raw_client

    async def get(
        self,
        id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> File:
        """
        Read File metadata objects.

        Parameters
        ----------
        id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        File
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.get(
                id="id",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete the file from S3.

        Parameters
        ----------
        id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.delete(
                id="id",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[File]:
        """
        Read File metadata objects.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[File]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.list(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def upload(
        self,
        *,
        upload_file: core.File,
        external_file_id: typing.Optional[str] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> File:
        """
        Upload a file to S3.

        Parameters
        ----------
        upload_file : core.File
            See core.File for more documentation

        external_file_id : typing.Optional[str]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        File
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.upload(
                external_file_id="external_file_id",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upload(
            upload_file=upload_file,
            external_file_id=external_file_id,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    async def generate_presigned_url(
        self,
        *,
        name: str,
        expires_at_seconds: typing.Optional[int] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        external_file_id: typing.Optional[str] = OMIT,
        file_size: typing.Optional[int] = OMIT,
        last_modified_at: typing.Optional[dt.datetime] = OMIT,
        resource_info: typing.Optional[typing.Dict[str, typing.Optional[FileCreateResourceInfoValue]]] = OMIT,
        permission_info: typing.Optional[typing.Dict[str, typing.Optional[FileCreatePermissionInfoValue]]] = OMIT,
        data_source_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileIdPresignedUrl:
        """
        Create a presigned url for uploading a file.

        The presigned url is valid for a limited time period, after which it will expire.
        Be careful on accidental exposure of the presigned url, as it may allow unauthorized access to the file before the expiration.

        Parameters
        ----------
        name : str
            Name that will be used for created file. If possible, always include the file extension in the name.

        expires_at_seconds : typing.Optional[int]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        external_file_id : typing.Optional[str]
            The ID of the file in the external system

        file_size : typing.Optional[int]
            Size of the file in bytes

        last_modified_at : typing.Optional[dt.datetime]
            The last modified time of the file

        resource_info : typing.Optional[typing.Dict[str, typing.Optional[FileCreateResourceInfoValue]]]
            Resource information for the file

        permission_info : typing.Optional[typing.Dict[str, typing.Optional[FileCreatePermissionInfoValue]]]
            Permission information for the file

        data_source_id : typing.Optional[str]
            The ID of the data source that the file belongs to

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileIdPresignedUrl
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.generate_presigned_url(
                expires_at_seconds=1,
                project_id="project_id",
                organization_id="organization_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_presigned_url(
            name=name,
            expires_at_seconds=expires_at_seconds,
            project_id=project_id,
            organization_id=organization_id,
            external_file_id=external_file_id,
            file_size=file_size,
            last_modified_at=last_modified_at,
            resource_info=resource_info,
            permission_info=permission_info,
            data_source_id=data_source_id,
            request_options=request_options,
        )
        return _response.data

    async def sync(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[File]:
        """
        Sync Files API against file contents uploaded via S3 presigned urls.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[File]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.sync(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.sync(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def upload_from_url(
        self,
        *,
        url: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        proxy_url: typing.Optional[str] = OMIT,
        request_headers: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        verify_ssl: typing.Optional[bool] = OMIT,
        follow_redirects: typing.Optional[bool] = OMIT,
        resource_info: typing.Optional[typing.Dict[str, typing.Optional[FileCreateFromUrlResourceInfoValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> File:
        """
        Upload a file to the project from a URL.

        If name is ommitted in the request payload, the file name will be
        extracted from the response Content-Disposition header if available
        or otherwise it will be derived from the URL path.

        If providing the name in the request payload, always suffix the
        file extension in the name if available.

        Parameters
        ----------
        url : str
            URL of the file to download

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        name : typing.Optional[str]
            Name that will be used for created file. If possible, always include the file extension in the name.

        proxy_url : typing.Optional[str]
            URL of the proxy server to use for downloading the file

        request_headers : typing.Optional[typing.Dict[str, typing.Optional[str]]]
            Headers to include in the request when downloading the file

        verify_ssl : typing.Optional[bool]
            Whether to verify the SSL certificate when downloading the file

        follow_redirects : typing.Optional[bool]
            Whether to follow redirects when downloading the file

        resource_info : typing.Optional[typing.Dict[str, typing.Optional[FileCreateFromUrlResourceInfoValue]]]
            Resource information for the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        File
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.upload_from_url(
                project_id="project_id",
                organization_id="organization_id",
                url="url",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upload_from_url(
            url=url,
            project_id=project_id,
            organization_id=organization_id,
            name=name,
            proxy_url=proxy_url,
            request_headers=request_headers,
            verify_ssl=verify_ssl,
            follow_redirects=follow_redirects,
            resource_info=resource_info,
            request_options=request_options,
        )
        return _response.data

    async def get_content(
        self,
        id: str,
        *,
        expires_at_seconds: typing.Optional[int] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PresignedUrl:
        """
        Returns a presigned url to read the file content.

        Parameters
        ----------
        id : str

        expires_at_seconds : typing.Optional[int]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PresignedUrl
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.get_content(
                id="id",
                expires_at_seconds=1,
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_content(
            id,
            expires_at_seconds=expires_at_seconds,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    async def list_page_screenshots(
        self,
        id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PageScreenshotMetadata]:
        """
        List metadata for all screenshots of pages from a file.

        Parameters
        ----------
        id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PageScreenshotMetadata]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.list_page_screenshots(
                id="id",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_page_screenshots(
            id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def get_page_screenshot(
        self,
        id: str,
        page_index: int,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get screenshot of a page from a file.

        Parameters
        ----------
        id : str

        page_index : int

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.get_page_screenshot(
                id="id",
                page_index=1,
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_page_screenshot(
            id, page_index, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def list_pages_figures(
        self,
        id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PageFigureMetadata]:
        """
        Parameters
        ----------
        id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PageFigureMetadata]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.list_pages_figures(
                id="id",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_pages_figures(
            id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def list_page_figures(
        self,
        id: str,
        page_index: int,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PageFigureMetadata]:
        """
        Parameters
        ----------
        id : str

        page_index : int

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PageFigureMetadata]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.list_page_figures(
                id="id",
                page_index=1,
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_page_figures(
            id, page_index, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def get_page_figure(
        self,
        id: str,
        page_index: int,
        figure_name: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        page_index : int

        figure_name : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.get_page_figure(
                id="id",
                page_index=1,
                figure_name="figure_name",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_page_figure(
            id,
            page_index,
            figure_name,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    async def generate_page_screenshot_presigned_url(
        self,
        id: str,
        page_index: int,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PresignedUrl:
        """
        Returns a presigned url to read a page screenshot.

        The presigned url is valid for a limited time period, after which it will expire.
        Be careful on accidental exposure of the presigned url, as it may allow unauthorized access to the file before the expiration.

        Parameters
        ----------
        id : str

        page_index : int

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PresignedUrl
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.generate_page_screenshot_presigned_url(
                id="id",
                page_index=1,
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_page_screenshot_presigned_url(
            id, page_index, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def generate_page_figure_presigned_url(
        self,
        id: str,
        page_index: int,
        figure_name: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PresignedUrl:
        """
        Returns a presigned url to read a page figure.

        The presigned url is valid for a limited time period, after which it will expire.
        Be careful on accidental exposure of the presigned url, as it may allow unauthorized access to the file before the expiration.

        Parameters
        ----------
        id : str

        page_index : int

        figure_name : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PresignedUrl
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.files.generate_page_figure_presigned_url(
                id="id",
                page_index=1,
                figure_name="figure_name",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_page_figure_presigned_url(
            id,
            page_index,
            figure_name,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data
