# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.configurable_data_sink_names import ConfigurableDataSinkNames
from ..types.data_sink import DataSink
from ..types.data_sink_create_component import DataSinkCreateComponent
from .raw_client import AsyncRawDataSinksClient, RawDataSinksClient
from .types.data_sink_update_component import DataSinkUpdateComponent

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DataSinksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDataSinksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDataSinksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDataSinksClient
        """
        return self._raw_client

    def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DataSink]:
        """
        List data sinks for a given project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DataSink]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sinks.list(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def create(
        self,
        *,
        name: str,
        sink_type: ConfigurableDataSinkNames,
        component: DataSinkCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSink:
        """
        Create a new data sink.

        Parameters
        ----------
        name : str
            The name of the data sink.

        sink_type : ConfigurableDataSinkNames

        component : DataSinkCreateComponent
            Component that implements the data sink

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSink
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sinks.create(
            project_id="project_id",
            organization_id="organization_id",
            name="name",
            sink_type="PINECONE",
            component={"key": "value"},
        )
        """
        _response = self._raw_client.create(
            name=name,
            sink_type=sink_type,
            component=component,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    def upsert(
        self,
        *,
        name: str,
        sink_type: ConfigurableDataSinkNames,
        component: DataSinkCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSink:
        """
        Upserts a data sink.
        Updates if a data sink with the same name and project_id already exists. Otherwise, creates a new data sink.

        Parameters
        ----------
        name : str
            The name of the data sink.

        sink_type : ConfigurableDataSinkNames

        component : DataSinkCreateComponent
            Component that implements the data sink

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSink
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sinks.upsert(
            project_id="project_id",
            organization_id="organization_id",
            name="name",
            sink_type="PINECONE",
            component={"key": "value"},
        )
        """
        _response = self._raw_client.upsert(
            name=name,
            sink_type=sink_type,
            component=component,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    def get(self, data_sink_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> DataSink:
        """
        Get a data sink by ID.

        Parameters
        ----------
        data_sink_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSink
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sinks.get(
            data_sink_id="data_sink_id",
        )
        """
        _response = self._raw_client.get(data_sink_id, request_options=request_options)
        return _response.data

    def update(
        self,
        data_sink_id: str,
        *,
        sink_type: ConfigurableDataSinkNames,
        name: typing.Optional[str] = OMIT,
        component: typing.Optional[DataSinkUpdateComponent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSink:
        """
        Update a data sink by ID.

        Parameters
        ----------
        data_sink_id : str

        sink_type : ConfigurableDataSinkNames

        name : typing.Optional[str]
            The name of the data sink.

        component : typing.Optional[DataSinkUpdateComponent]
            Component that implements the data sink

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSink
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sinks.update(
            data_sink_id="data_sink_id",
            sink_type="PINECONE",
        )
        """
        _response = self._raw_client.update(
            data_sink_id, sink_type=sink_type, name=name, component=component, request_options=request_options
        )
        return _response.data

    def delete(self, data_sink_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a data sink by ID.

        Parameters
        ----------
        data_sink_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sinks.delete(
            data_sink_id="data_sink_id",
        )
        """
        _response = self._raw_client.delete(data_sink_id, request_options=request_options)
        return _response.data


class AsyncDataSinksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDataSinksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDataSinksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDataSinksClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DataSink]:
        """
        List data sinks for a given project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DataSink]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sinks.list(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        *,
        name: str,
        sink_type: ConfigurableDataSinkNames,
        component: DataSinkCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSink:
        """
        Create a new data sink.

        Parameters
        ----------
        name : str
            The name of the data sink.

        sink_type : ConfigurableDataSinkNames

        component : DataSinkCreateComponent
            Component that implements the data sink

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSink
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sinks.create(
                project_id="project_id",
                organization_id="organization_id",
                name="name",
                sink_type="PINECONE",
                component={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            name=name,
            sink_type=sink_type,
            component=component,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    async def upsert(
        self,
        *,
        name: str,
        sink_type: ConfigurableDataSinkNames,
        component: DataSinkCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSink:
        """
        Upserts a data sink.
        Updates if a data sink with the same name and project_id already exists. Otherwise, creates a new data sink.

        Parameters
        ----------
        name : str
            The name of the data sink.

        sink_type : ConfigurableDataSinkNames

        component : DataSinkCreateComponent
            Component that implements the data sink

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSink
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sinks.upsert(
                project_id="project_id",
                organization_id="organization_id",
                name="name",
                sink_type="PINECONE",
                component={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert(
            name=name,
            sink_type=sink_type,
            component=component,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    async def get(self, data_sink_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> DataSink:
        """
        Get a data sink by ID.

        Parameters
        ----------
        data_sink_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSink
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sinks.get(
                data_sink_id="data_sink_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(data_sink_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        data_sink_id: str,
        *,
        sink_type: ConfigurableDataSinkNames,
        name: typing.Optional[str] = OMIT,
        component: typing.Optional[DataSinkUpdateComponent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSink:
        """
        Update a data sink by ID.

        Parameters
        ----------
        data_sink_id : str

        sink_type : ConfigurableDataSinkNames

        name : typing.Optional[str]
            The name of the data sink.

        component : typing.Optional[DataSinkUpdateComponent]
            Component that implements the data sink

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSink
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sinks.update(
                data_sink_id="data_sink_id",
                sink_type="PINECONE",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            data_sink_id, sink_type=sink_type, name=name, component=component, request_options=request_options
        )
        return _response.data

    async def delete(self, data_sink_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a data sink by ID.

        Parameters
        ----------
        data_sink_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sinks.delete(
                data_sink_id="data_sink_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(data_sink_id, request_options=request_options)
        return _response.data
