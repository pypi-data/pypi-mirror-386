# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.data_source_sync_request import DataSourceSyncRequest
from ..types.managed_ingestion_status_response import ManagedIngestionStatusResponse
from ..types.pipeline import Pipeline
from ..types.pipeline_data_source import PipelineDataSource
from ..types.pipeline_data_source_create import PipelineDataSourceCreate
from .raw_client import AsyncRawPipelineDataSourcesClient, RawPipelineDataSourcesClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PipelineDataSourcesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPipelineDataSourcesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPipelineDataSourcesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPipelineDataSourcesClient
        """
        return self._raw_client

    def list(
        self, pipeline_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[PipelineDataSource]:
        """
        Get data sources for a pipeline.

        Parameters
        ----------
        pipeline_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PipelineDataSource]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.pipeline_data_sources.list(
            pipeline_id="pipeline_id",
        )
        """
        _response = self._raw_client.list(pipeline_id, request_options=request_options)
        return _response.data

    def add(
        self,
        pipeline_id: str,
        *,
        request: typing.Sequence[PipelineDataSourceCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PipelineDataSource]:
        """
        Add data sources to a pipeline.

        Parameters
        ----------
        pipeline_id : str

        request : typing.Sequence[PipelineDataSourceCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PipelineDataSource]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud, PipelineDataSourceCreate

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.pipeline_data_sources.add(
            pipeline_id="pipeline_id",
            request=[
                PipelineDataSourceCreate(
                    data_source_id="data_source_id",
                )
            ],
        )
        """
        _response = self._raw_client.add(pipeline_id, request=request, request_options=request_options)
        return _response.data

    def update(
        self,
        pipeline_id: str,
        data_source_id: str,
        *,
        sync_interval: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PipelineDataSource:
        """
        Update the configuration of a data source in a pipeline.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        sync_interval : typing.Optional[float]
            The interval at which the data source should be synced.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PipelineDataSource
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.pipeline_data_sources.update(
            pipeline_id="pipeline_id",
            data_source_id="data_source_id",
        )
        """
        _response = self._raw_client.update(
            pipeline_id, data_source_id, sync_interval=sync_interval, request_options=request_options
        )
        return _response.data

    def sync(
        self,
        pipeline_id: str,
        data_source_id: str,
        *,
        request: typing.Optional[DataSourceSyncRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pipeline:
        """
        Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        request : typing.Optional[DataSourceSyncRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pipeline
            Successful Response

        Examples
        --------
        from llamaindex_test import DataSourceSyncRequest, LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.pipeline_data_sources.sync(
            pipeline_id="pipeline_id",
            data_source_id="data_source_id",
            request=DataSourceSyncRequest(),
        )
        """
        _response = self._raw_client.sync(pipeline_id, data_source_id, request=request, request_options=request_options)
        return _response.data

    def get_status(
        self, pipeline_id: str, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ManagedIngestionStatusResponse:
        """
        Get the status of a data source for a pipeline.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ManagedIngestionStatusResponse
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.pipeline_data_sources.get_status(
            pipeline_id="pipeline_id",
            data_source_id="data_source_id",
        )
        """
        _response = self._raw_client.get_status(pipeline_id, data_source_id, request_options=request_options)
        return _response.data


class AsyncPipelineDataSourcesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPipelineDataSourcesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPipelineDataSourcesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPipelineDataSourcesClient
        """
        return self._raw_client

    async def list(
        self, pipeline_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[PipelineDataSource]:
        """
        Get data sources for a pipeline.

        Parameters
        ----------
        pipeline_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PipelineDataSource]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.pipeline_data_sources.list(
                pipeline_id="pipeline_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(pipeline_id, request_options=request_options)
        return _response.data

    async def add(
        self,
        pipeline_id: str,
        *,
        request: typing.Sequence[PipelineDataSourceCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PipelineDataSource]:
        """
        Add data sources to a pipeline.

        Parameters
        ----------
        pipeline_id : str

        request : typing.Sequence[PipelineDataSourceCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PipelineDataSource]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud, PipelineDataSourceCreate

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.pipeline_data_sources.add(
                pipeline_id="pipeline_id",
                request=[
                    PipelineDataSourceCreate(
                        data_source_id="data_source_id",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add(pipeline_id, request=request, request_options=request_options)
        return _response.data

    async def update(
        self,
        pipeline_id: str,
        data_source_id: str,
        *,
        sync_interval: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PipelineDataSource:
        """
        Update the configuration of a data source in a pipeline.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        sync_interval : typing.Optional[float]
            The interval at which the data source should be synced.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PipelineDataSource
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.pipeline_data_sources.update(
                pipeline_id="pipeline_id",
                data_source_id="data_source_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            pipeline_id, data_source_id, sync_interval=sync_interval, request_options=request_options
        )
        return _response.data

    async def sync(
        self,
        pipeline_id: str,
        data_source_id: str,
        *,
        request: typing.Optional[DataSourceSyncRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pipeline:
        """
        Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        request : typing.Optional[DataSourceSyncRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pipeline
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud, DataSourceSyncRequest

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.pipeline_data_sources.sync(
                pipeline_id="pipeline_id",
                data_source_id="data_source_id",
                request=DataSourceSyncRequest(),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.sync(
            pipeline_id, data_source_id, request=request, request_options=request_options
        )
        return _response.data

    async def get_status(
        self, pipeline_id: str, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ManagedIngestionStatusResponse:
        """
        Get the status of a data source for a pipeline.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ManagedIngestionStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.pipeline_data_sources.get_status(
                pipeline_id="pipeline_id",
                data_source_id="data_source_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_status(pipeline_id, data_source_id, request_options=request_options)
        return _response.data
