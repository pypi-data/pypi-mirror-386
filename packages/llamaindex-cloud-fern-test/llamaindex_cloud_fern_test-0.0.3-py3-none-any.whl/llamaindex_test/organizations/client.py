# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.organization import Organization
from ..types.project import Project
from ..types.role import Role
from ..types.usage_and_plan import UsageAndPlan
from ..types.user_organization_role import UserOrganizationRole
from .raw_client import AsyncRawOrganizationsClient, RawOrganizationsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class OrganizationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawOrganizationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawOrganizationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawOrganizationsClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Organization]:
        """
        List organizations for a user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> Organization:
        """
        Create a new organization.

        Parameters
        ----------
        name : str
            A name for the organization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.create(
            name="name",
        )
        """
        _response = self._raw_client.create(name=name, request_options=request_options)
        return _response.data

    def upsert(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> Organization:
        """
        Upsert a new organization.

        Parameters
        ----------
        name : str
            A name for the organization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.upsert(
            name="name",
        )
        """
        _response = self._raw_client.upsert(name=name, request_options=request_options)
        return _response.data

    def get_default(self, *, request_options: typing.Optional[RequestOptions] = None) -> Organization:
        """
        Get the default organization for the user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.get_default()
        """
        _response = self._raw_client.get_default(request_options=request_options)
        return _response.data

    def get(self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Organization:
        """
        Get an organization by ID.

        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.get(
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get(organization_id, request_options=request_options)
        return _response.data

    def update(
        self,
        organization_id: str,
        *,
        name: str,
        feature_flags: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Organization:
        """
        Update an existing organization.

        Parameters
        ----------
        organization_id : str

        name : str
            A name for the organization.

        feature_flags : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Feature flags for the organization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.update(
            organization_id="organization_id",
            name="name",
        )
        """
        _response = self._raw_client.update(
            organization_id, name=name, feature_flags=feature_flags, request_options=request_options
        )
        return _response.data

    def delete(self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an organization by ID.

        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.delete(
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.delete(organization_id, request_options=request_options)
        return _response.data

    def get_usage(
        self,
        organization_id: str,
        *,
        get_current_invoice_total: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UsageAndPlan:
        """
        Get usage for a specific organization.

        Parameters
        ----------
        organization_id : str

        get_current_invoice_total : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UsageAndPlan
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.get_usage(
            organization_id="organization_id",
            get_current_invoice_total=True,
        )
        """
        _response = self._raw_client.get_usage(
            organization_id, get_current_invoice_total=get_current_invoice_total, request_options=request_options
        )
        return _response.data

    def list_roles(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Role]:
        """
        List all roles in an organization.

        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Role]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.list_roles(
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list_roles(organization_id, request_options=request_options)
        return _response.data

    def get_user_role(
        self,
        organization_id: str,
        *,
        project_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[UserOrganizationRole]:
        """
        Get the role of a user in an organization.

        Parameters
        ----------
        organization_id : str

        project_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[UserOrganizationRole]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.get_user_role(
            organization_id="organization_id",
            project_id="project_id",
        )
        """
        _response = self._raw_client.get_user_role(
            organization_id, project_id=project_id, request_options=request_options
        )
        return _response.data

    def assign_user_role(
        self,
        organization_id: str,
        *,
        user_id: str,
        user_organization_role_create_organization_id: str,
        role_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserOrganizationRole:
        """
        Assign a role to a user in an organization.

        Parameters
        ----------
        organization_id : str

        user_id : str
            The user's ID.

        user_organization_role_create_organization_id : str
            The organization's ID.

        role_id : str
            The role's ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserOrganizationRole
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.assign_user_role(
            organization_id="organization_id",
            user_id="user_id",
            user_organization_role_create_organization_id="organization_id",
            role_id="role_id",
        )
        """
        _response = self._raw_client.assign_user_role(
            organization_id,
            user_id=user_id,
            user_organization_role_create_organization_id=user_organization_role_create_organization_id,
            role_id=role_id,
            request_options=request_options,
        )
        return _response.data

    def list_user_projects(
        self, organization_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Project]:
        """
        List all projects for a user in an organization.

        Parameters
        ----------
        organization_id : str

        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Project]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.list_user_projects(
            organization_id="organization_id",
            user_id="user_id",
        )
        """
        _response = self._raw_client.list_user_projects(organization_id, user_id, request_options=request_options)
        return _response.data

    def add_user_to_project(
        self,
        organization_id: typing.Optional[str],
        user_id: str,
        *,
        project_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Add a user to a project.

        Parameters
        ----------
        organization_id : typing.Optional[str]

        user_id : str

        project_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.add_user_to_project(
            organization_id="organization_id",
            user_id="user_id",
            project_id="project_id",
        )
        """
        _response = self._raw_client.add_user_to_project(
            organization_id, user_id, project_id=project_id, request_options=request_options
        )
        return _response.data

    def remove_user_from_project(
        self,
        organization_id: str,
        user_id: str,
        project_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Remove a user from a project.

        Parameters
        ----------
        organization_id : str

        user_id : str

        project_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.remove_user_from_project(
            organization_id="organization_id",
            user_id="user_id",
            project_id="project_id",
        )
        """
        _response = self._raw_client.remove_user_from_project(
            organization_id, user_id, project_id, request_options=request_options
        )
        return _response.data


class AsyncOrganizationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawOrganizationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawOrganizationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawOrganizationsClient
        """
        return self._raw_client

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Organization]:
        """
        List organizations for a user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> Organization:
        """
        Create a new organization.

        Parameters
        ----------
        name : str
            A name for the organization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.create(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(name=name, request_options=request_options)
        return _response.data

    async def upsert(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> Organization:
        """
        Upsert a new organization.

        Parameters
        ----------
        name : str
            A name for the organization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.upsert(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert(name=name, request_options=request_options)
        return _response.data

    async def get_default(self, *, request_options: typing.Optional[RequestOptions] = None) -> Organization:
        """
        Get the default organization for the user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.get_default()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_default(request_options=request_options)
        return _response.data

    async def get(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Organization:
        """
        Get an organization by ID.

        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.get(
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(organization_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        organization_id: str,
        *,
        name: str,
        feature_flags: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Organization:
        """
        Update an existing organization.

        Parameters
        ----------
        organization_id : str

        name : str
            A name for the organization.

        feature_flags : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Feature flags for the organization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.update(
                organization_id="organization_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            organization_id, name=name, feature_flags=feature_flags, request_options=request_options
        )
        return _response.data

    async def delete(self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an organization by ID.

        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.delete(
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(organization_id, request_options=request_options)
        return _response.data

    async def get_usage(
        self,
        organization_id: str,
        *,
        get_current_invoice_total: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UsageAndPlan:
        """
        Get usage for a specific organization.

        Parameters
        ----------
        organization_id : str

        get_current_invoice_total : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UsageAndPlan
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.get_usage(
                organization_id="organization_id",
                get_current_invoice_total=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_usage(
            organization_id, get_current_invoice_total=get_current_invoice_total, request_options=request_options
        )
        return _response.data

    async def list_roles(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Role]:
        """
        List all roles in an organization.

        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Role]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.list_roles(
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_roles(organization_id, request_options=request_options)
        return _response.data

    async def get_user_role(
        self,
        organization_id: str,
        *,
        project_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[UserOrganizationRole]:
        """
        Get the role of a user in an organization.

        Parameters
        ----------
        organization_id : str

        project_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[UserOrganizationRole]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.get_user_role(
                organization_id="organization_id",
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_user_role(
            organization_id, project_id=project_id, request_options=request_options
        )
        return _response.data

    async def assign_user_role(
        self,
        organization_id: str,
        *,
        user_id: str,
        user_organization_role_create_organization_id: str,
        role_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserOrganizationRole:
        """
        Assign a role to a user in an organization.

        Parameters
        ----------
        organization_id : str

        user_id : str
            The user's ID.

        user_organization_role_create_organization_id : str
            The organization's ID.

        role_id : str
            The role's ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserOrganizationRole
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.assign_user_role(
                organization_id="organization_id",
                user_id="user_id",
                user_organization_role_create_organization_id="organization_id",
                role_id="role_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.assign_user_role(
            organization_id,
            user_id=user_id,
            user_organization_role_create_organization_id=user_organization_role_create_organization_id,
            role_id=role_id,
            request_options=request_options,
        )
        return _response.data

    async def list_user_projects(
        self, organization_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Project]:
        """
        List all projects for a user in an organization.

        Parameters
        ----------
        organization_id : str

        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Project]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.list_user_projects(
                organization_id="organization_id",
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_user_projects(organization_id, user_id, request_options=request_options)
        return _response.data

    async def add_user_to_project(
        self,
        organization_id: typing.Optional[str],
        user_id: str,
        *,
        project_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Add a user to a project.

        Parameters
        ----------
        organization_id : typing.Optional[str]

        user_id : str

        project_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.add_user_to_project(
                organization_id="organization_id",
                user_id="user_id",
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_user_to_project(
            organization_id, user_id, project_id=project_id, request_options=request_options
        )
        return _response.data

    async def remove_user_from_project(
        self,
        organization_id: str,
        user_id: str,
        project_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Remove a user from a project.

        Parameters
        ----------
        organization_id : str

        user_id : str

        project_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.remove_user_from_project(
                organization_id="organization_id",
                user_id="user_id",
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove_user_from_project(
            organization_id, user_id, project_id, request_options=request_options
        )
        return _response.data
