# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .failure_handling_config import FailureHandlingConfig


class CloudConfluenceDataSource(UncheckedBaseModel):
    supports_access_control: typing.Optional[bool] = None
    server_url: str = pydantic.Field()
    """
    The server URL of the Confluence instance.
    """

    authentication_mechanism: str = pydantic.Field()
    """
    Type of Authentication for connecting to Confluence APIs.
    """

    user_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The username to use for authentication.
    """

    api_token: typing.Optional[str] = pydantic.Field(default=None)
    """
    The API token to use for authentication.
    """

    space_key: typing.Optional[str] = pydantic.Field(default=None)
    """
    The space key to read from.
    """

    page_ids: typing.Optional[str] = pydantic.Field(default=None)
    """
    The page IDs of the Confluence to read from.
    """

    cql: typing.Optional[str] = pydantic.Field(default=None)
    """
    The CQL query to use for fetching pages.
    """

    label: typing.Optional[str] = pydantic.Field(default=None)
    """
    The label to use for fetching pages.
    """

    index_restricted_pages: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to index restricted pages.
    """

    keep_markdown_format: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to keep the markdown format.
    """

    failure_handling: typing.Optional[FailureHandlingConfig] = pydantic.Field(default=None)
    """
    Configuration for handling failures during processing. Key-value object controlling failure handling behaviors.
    
    Example:
    {
      "skip_list_failures": true
    }
    
    Currently supports:
    - skip_list_failures: Skip failed batches/lists and continue processing
    """

    class_name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
