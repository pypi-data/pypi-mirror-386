# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class LegacyParseJobConfig(UncheckedBaseModel):
    """
    Configuration for llamaparse job
    """

    custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    The custom metadata to attach to the documents.
    """

    resource_info: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    The resource info about the file
    """

    user_id: typing_extensions.Annotated[str, FieldMetadata(alias="userId")] = pydantic.Field()
    """
    The user ID.
    """

    file_name: typing_extensions.Annotated[str, FieldMetadata(alias="fileName")] = pydantic.Field()
    """
    The file name.
    """

    original_file_name: typing_extensions.Annotated[str, FieldMetadata(alias="originalFileName")] = pydantic.Field()
    """
    The original file name.
    """

    file_key: typing_extensions.Annotated[str, FieldMetadata(alias="fileKey")] = pydantic.Field()
    """
    The file key.
    """

    input_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inputUrl")] = pydantic.Field(
        default=None
    )
    """
    The input URL.
    """

    http_proxy: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="httpProxy")] = pydantic.Field(
        default=None
    )
    """
    The HTTP proxy.
    """

    fast_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="fastMode")] = pydantic.Field(
        default=None
    )
    """
    Whether to use fast mode.
    """

    lang: str = pydantic.Field()
    """
    The language.
    """

    template: typing.Optional[str] = pydantic.Field(default=None)
    """
    The parsing instruction.
    """

    pipeline_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pipelineId")] = pydantic.Field(
        default=None
    )
    """
    The pipeline ID.
    """

    output_bucket: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="outputBucket")] = (
        pydantic.Field(default=None)
    )
    """
    The output bucket.
    """

    file_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="fileId")] = pydantic.Field(
        default=None
    )
    """
    The file ID.
    """

    full_file_path: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="fullFilePath")] = (
        pydantic.Field(default=None)
    )
    """
    The full file path.
    """

    from_l_lama_cloud: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="fromLLamaCloud")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the file is from LLama cloud.
    """

    skip_diagonal_text: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="skipDiagonalText")] = (
        pydantic.Field(default=None)
    )
    """
    Whether to skip diagonal text.
    """

    preserve_layout_alignment_across_pages: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="preserveLayoutAlignmentAcrossPages")
    ] = pydantic.Field(default=None)
    """
    Whether to preserve layout alignment across pages.
    """

    preserve_very_small_text: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="preserveVerySmallText")
    ] = pydantic.Field(default=None)
    """
    Whether to preserve very small text lines.
    """

    invalidate_cache: typing_extensions.Annotated[bool, FieldMetadata(alias="invalidateCache")] = pydantic.Field()
    """
    Whether to invalidate the cache.
    """

    output_pdf_of_document: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="outputPDFOfDocument")
    ] = pydantic.Field(default=None)
    """
    Whether to output PDF of document
    """

    outlined_table_extraction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="outlinedTableExtraction")
    ] = pydantic.Field(default=None)
    """
    Whether to try to extract outlined tables
    """

    merge_tables_across_pages_in_markdown: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="mergeTablesAcrossPagesInMarkdown")
    ] = pydantic.Field(default=None)
    """
    Whether to merge tables across pages in markdown
    """

    save_images: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="saveImages")] = pydantic.Field(
        default=None
    )
    """
    Whether to output images contained in the document
    """

    gpt_4_o: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="gpt4o")] = pydantic.Field(
        default=None
    )
    """
    Whether to use GPT4o.
    """

    open_aiapi_key: typing_extensions.Annotated[str, FieldMetadata(alias="openAIAPIKey")] = pydantic.Field()
    """
    The OpenAI API key.
    """

    do_not_unroll_columns: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="doNotUnrollColumns")
    ] = pydantic.Field(default=None)
    """
    Whether to unroll columns.
    """

    spread_sheet_extract_sub_tables: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="spreadSheetExtractSubTables")
    ] = pydantic.Field(default=None)
    """
    Whether to extract subTables from spreadsheet.
    """

    spread_sheet_force_formula_computation: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="spreadSheetForceFormulaComputation")
    ] = pydantic.Field(default=None)
    """
    Whether to force re-computation of spreadsheet cells containing formulas.
    """

    extract_layout: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="extractLayout")] = (
        pydantic.Field(default=None)
    )
    """
    Whether to perform layout extraction.
    """

    high_res_ocr: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="highResOcr")] = (
        pydantic.Field(default=None)
    )
    """
    Whether to use high resolution OCR (Slow).
    """

    html_make_all_elements_visible: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="htmlMakeAllElementsVisible")
    ] = pydantic.Field(default=None)
    """
    Whether to make all elements visible.
    """

    html_remove_fixed_elements: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="htmlRemoveFixedElements")
    ] = pydantic.Field(default=None)
    """
    Whether to remove fixed elements.
    """

    html_remove_navigation_elements: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="htmlRemoveNavigationElements")
    ] = pydantic.Field(default=None)
    """
    Whether to remove navigation elements.
    """

    guess_xlsx_sheet_name: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="guessXLSXSheetName")
    ] = pydantic.Field(default=None)
    """
    Whether to guess the XLSX sheet name when generation output xlsx.
    """

    do_not_cache: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="doNotCache")] = (
        pydantic.Field(default=None)
    )
    """
    Whether to cache.
    """

    page_separator: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageSeparator")] = (
        pydantic.Field(default=None)
    )
    """
    The page separator.
    """

    bounding_box: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="boundingBox")] = (
        pydantic.Field(default=None)
    )
    """
    A string describing a bounding box to use to parse the document. Contain 4 value between 0 to 1 representing in clock wise order the margin top, right, bottom, left of the selection bounding box in ratio of the document.
    """

    bbox_top: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="bboxTop")] = pydantic.Field(
        default=None
    )
    """
    The top side of the bounding box.
    """

    bbox_right: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="bboxRight")] = pydantic.Field(
        default=None
    )
    """
    The right side of the bounding box.
    """

    bbox_bottom: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="bboxBottom")] = (
        pydantic.Field(default=None)
    )
    """
    The bottom side of the bounding box.
    """

    bbox_left: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="bboxLeft")] = pydantic.Field(
        default=None
    )
    """
    The left side of the bounding box.
    """

    disable_reconstruction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="disableReconstruction")
    ] = pydantic.Field(default=None)
    """
    Whether to disable markdown reconstruction.
    """

    target_pages: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="targetPages")] = (
        pydantic.Field(default=None)
    )
    """
    A string containing a list of comma separated containing the page number to extract. If not specified all pages are extracted from the document. The first page is the page 0.
    """

    multimodal_pipeline: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="multimodalPipeline")
    ] = pydantic.Field(default=None)
    """
    True if parsing happen in multimodal mode.
    """

    multimodal_model: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="multimodalModel")] = (
        pydantic.Field(default=None)
    )
    """
    The multimodal model to use.
    """

    model: typing.Optional[str] = pydantic.Field(default=None)
    """
    The model to use.
    """

    vendor_api_key: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="vendorAPIKey")] = (
        pydantic.Field(default=None)
    )
    """
    The multimodal vendor API key.
    """

    page_prefix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pagePrefix")] = pydantic.Field(
        default=None
    )
    """
    A page prefix to add before each page.
    """

    page_suffix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageSuffix")] = pydantic.Field(
        default=None
    )
    """
    A page suffix to add after each page.
    """

    webhook_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="webhookUrl")] = pydantic.Field(
        default=None
    )
    """
    The URL that needs to be called at the end of the parsing job.
    """

    preset: typing.Optional[str] = pydantic.Field(default=None)
    """
    The preset of options to be used.
    """

    take_screenshot: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="takeScreenshot")] = (
        pydantic.Field(default=None)
    )
    """
    Force to capture an image of each pages
    """

    is_formatting_instruction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="isFormattingInstruction")
    ] = pydantic.Field(default=None)
    """
    Allow the parsing instruction to also format the output.
    """

    premium_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="premiumMode")] = (
        pydantic.Field(default=None)
    )
    """
    Whether to use premiumMode pipeline.
    """

    continuous_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="continuousMode")] = (
        pydantic.Field(default=None)
    )
    """
    Whether to use continuousMode pipeline.
    """

    disable_ocr: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="disableOcr")] = pydantic.Field(
        default=None
    )
    """
    Disable the OCR on the document. LlamaParse will only extract the copyable text from the document
    """

    disable_image_extraction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="disableImageExtraction")
    ] = pydantic.Field(default=None)
    """
    Disable the image extraction from the document. LlamaParse will not extract any image from the document.
    """

    annotate_links: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="annotateLinks")] = (
        pydantic.Field(default=None)
    )
    """
    Annotate links in markdown. LlamaParse will try to add links from document into the markdown.
    """

    adaptive_long_table: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="adaptiveLongTable")
    ] = pydantic.Field(default=None)
    """
    Adaptive long table. LlamaParse will try to detect long table and adapt the output.
    """

    compact_markdown_table: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="compactMarkdownTable")
    ] = pydantic.Field(default=None)
    """
    Compact markdown table. LlamaParse will compact the markdown table to not include too many spaces.
    """

    input_s_3_path: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inputS3Path")] = (
        pydantic.Field(default=None)
    )
    """
    If specified, llamaParse will take the specified file. should be a valid s3:// url
    """

    input_s_3_region: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inputS3Region")] = (
        pydantic.Field(default=None)
    )
    """
    The region for the input S3 bucket.
    """

    output_s_3_path_prefix: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="outputS3PathPrefix")
    ] = pydantic.Field(default=None)
    """
    If specified, llamaParse will save the output to the specified path. All output file will use this 'prefix' should be a valid s3:// url
    """

    output_s_3_region: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="outputS3Region")] = (
        pydantic.Field(default=None)
    )
    """
    The region for the output S3 bucket.
    """

    project_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="projectId")] = pydantic.Field(
        default=None
    )
    """
    The project ID.
    """

    azure_open_ai_deployment_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="azureOpenAiDeploymentName")
    ] = pydantic.Field(default=None)
    """
    Custom azure deployment name.
    """

    azure_open_ai_endpoint: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="azureOpenAiEndpoint")
    ] = pydantic.Field(default=None)
    """
    Custom azure endpoint.
    """

    azure_open_ai_api_version: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="azureOpenAiApiVersion")
    ] = pydantic.Field(default=None)
    """
    Custom azure API version.
    """

    azure_open_ai_key: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="azureOpenAiKey")] = (
        pydantic.Field(default=None)
    )
    """
    Custom azure API key.
    """

    auto_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="autoMode")] = pydantic.Field(
        default=None
    )
    """
    Whether to use auto mode.
    """

    auto_mode_trigger_on_table_in_page: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="autoModeTriggerOnTableInPage")
    ] = pydantic.Field(default=None)
    """
    Whether to trigger on table in page.
    """

    auto_mode_trigger_on_image_in_page: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="autoModeTriggerOnImageInPage")
    ] = pydantic.Field(default=None)
    """
    Whether to trigger on image in page.
    """

    auto_mode_trigger_on_regexp_in_page: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="autoModeTriggerOnRegexpInPage")
    ] = pydantic.Field(default=None)
    """
    The regexp to trigger on.
    """

    auto_mode_trigger_on_text_in_page: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="autoModeTriggerOnTextInPage")
    ] = pydantic.Field(default=None)
    """
    The text to trigger on.
    """

    auto_mode_configuration_json: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="autoModeConfigurationJSON")
    ] = pydantic.Field(default=None)
    """
    The auto mode configuration JSON. This is a JSON string that contains the configuration for the auto mode.
    """

    structured_output: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="structuredOutput")] = (
        pydantic.Field(default=None)
    )
    """
    Whether to use structured output.
    """

    structured_output_json_schema: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="structuredOutputJSONSchema")
    ] = pydantic.Field(default=None)
    """
    The structured output JSON schema.
    """

    structured_output_json_schema_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="structuredOutputJSONSchemaName")
    ] = pydantic.Field(default=None)
    """
    The structured output JSON schema name.
    """

    max_pages: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="maxPages")] = pydantic.Field(
        default=None
    )
    """
    The maximum number of pages to parse.
    """

    extract_charts: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="extractCharts")] = (
        pydantic.Field(default=None)
    )
    """
    Extract charts from the document.
    """

    formatting_instruction: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="formattingInstruction")
    ] = pydantic.Field(default=None)
    """
    A natural language instruction on how to format the result. Override LlamaParse default instruction.
    """

    complemental_formatting_instruction: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="complementalFormattingInstruction")
    ] = pydantic.Field(default=None)
    """
    A natural language instruction on how to format the result that complement LlamaParse default instruction.
    """

    content_guideline_instruction: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="contentGuidelineInstruction")
    ] = pydantic.Field(default=None)
    """
    A natural language instruction on how to transform the content of the result (not the format).
    """

    job_timeout_in_seconds: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="jobTimeoutInSeconds")
    ] = pydantic.Field(default=None)
    """
    Manually set a timeout in second for a job. Minimum is 120
    """

    job_timeout_extra_time_per_page_in_seconds: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="jobTimeoutExtraTimePerPageInSeconds")
    ] = pydantic.Field(default=None)
    """
    Manually set additional time per page for timeout in second for a job.
    """

    strict_mode_image_extraction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="strictModeImageExtraction")
    ] = pydantic.Field(default=None)
    """
    If true, the job will fail when we are not able to extract an image from a document.
    """

    strict_mode_image_ocr: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="strictModeImageOCR")
    ] = pydantic.Field(default=None)
    """
    If true, the job will fail when we are not able to OCR an image from a document.
    """

    strict_mode_reconstruction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="strictModeReconstruction")
    ] = pydantic.Field(default=None)
    """
    If true, the job will fail when we are not able to transform a page to Markdown in a document.
    """

    strict_mode_buggy_font: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="strictModeBuggyFont")
    ] = pydantic.Field(default=None)
    """
    If true, the job will fail when we are not able to extract a glyph from the document due to buggy font.
    """

    ignore_document_elements_for_layout_detection: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="ignoreDocumentElementsForLayoutDetection")
    ] = pydantic.Field(default=None)
    """
    If true, the job will ignore document element for layout detection, and instead just rely on a visual model, only apply to layout detection.
    """

    output_tables_as_html: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="outputTablesAsHTML")
    ] = pydantic.Field(default=None)
    """
    If true, the job will output tables as HTML in the markdown output, useful for merged cells.
    """

    remove_hidden_text: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="removeHiddenText")] = (
        pydantic.Field(default=None)
    )
    """
    If true, hidden (nonvisible) text in the document will be removed from the output.
    """

    parse_mode: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="parseMode")] = pydantic.Field(
        default=None
    )
    """
    The parsing mode.
    """

    system_prompt: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="systemPrompt")] = (
        pydantic.Field(default=None)
    )
    """
    The system prompt.
    """

    system_prompt_append: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="systemPromptAppend")
    ] = pydantic.Field(default=None)
    """
    The append to system prompt.
    """

    user_prompt: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="userPrompt")] = pydantic.Field(
        default=None
    )
    """
    The user prompt.
    """

    page_header_prefix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageHeaderPrefix")] = (
        pydantic.Field(default=None)
    )
    """
    The page header prefix.
    """

    page_header_suffix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageHeaderSuffix")] = (
        pydantic.Field(default=None)
    )
    """
    The page header suffix.
    """

    page_footer_prefix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageFooterPrefix")] = (
        pydantic.Field(default=None)
    )
    """
    The page footer prefix.
    """

    page_footer_suffix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageFooterSuffix")] = (
        pydantic.Field(default=None)
    )
    """
    The page footer suffix.
    """

    hide_headers: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="hideHeaders")] = (
        pydantic.Field(default=None)
    )
    """
    Whether to hide headers in the output.
    """

    hide_footers: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="hideFooters")] = (
        pydantic.Field(default=None)
    )
    """
    Whether to hide footers in the output.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
