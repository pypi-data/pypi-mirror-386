# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel


class CustomClaims(UncheckedBaseModel):
    """
    Custom claims that dictate various limits or allowed behaviors.
    Currently these claims reside at a per user level. Claims may expand to a per organization level or project in the future.
    """

    allowed_org_creation: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the user is allowed to create organizations.
    """

    max_jobs_in_execution_per_job_type: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum number of jobs the user can have in execution per job type.
    """

    max_document_ingestion_jobs_in_execution: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum number of document ingestion jobs the user can have in execution.
    """

    max_metadata_update_jobs_in_execution: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum number of metadata update jobs the user can have in execution.
    """

    extraction_test_user: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the user is a test user for extraction. This will include additional debug metadata and access to test endpoints.
    """

    allowed_report: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the user is allowed to access llama-report generation.
    """

    allowed_app: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the user is allowed to access the app.
    """

    allowed_classify: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the user is allowed to access the classifier feature.
    """

    api_datasource_access: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the user is allowed to access API data sources.
    """

    allow_org_deletion: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the user is allowed to delete organizations.
    """

    allowed_spreadsheet: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the user is allowed to access the spreadsheet feature.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
