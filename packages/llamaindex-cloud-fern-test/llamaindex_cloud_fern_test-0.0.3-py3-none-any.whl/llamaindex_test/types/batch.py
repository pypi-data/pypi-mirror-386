# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .llama_parse_parameters import LlamaParseParameters


class Batch(UncheckedBaseModel):
    tool: str = pydantic.Field()
    """
    The tool to be used for all requests in the batch.
    """

    tool_data: typing.Optional[LlamaParseParameters] = pydantic.Field(default=None)
    """
    The data to be used for the tool.
    """

    input_type: str = pydantic.Field()
    """
    The type of input file. Currently only 'datasource' is supported.
    """

    input_id: str = pydantic.Field()
    """
    The ID of the input file for the batch.
    """

    output_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    The type of output file. Currently only 'datasource' is supported.
    """

    output_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the output file for the batch.
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the batch
    """

    project_id: str = pydantic.Field()
    """
    The ID of the project to which the batch belongs
    """

    organization_id: str = pydantic.Field()
    """
    The ID of the organization to which the batch belongs
    """

    user_id: str = pydantic.Field()
    """
    The ID of the user who created the batch
    """

    external_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    A developer-provided ID for the batch. This ID will be returned in the response.
    """

    completion_window: int = pydantic.Field()
    """
    The time frame within which the batch should be processed
    """

    pipeline_id: str = pydantic.Field()
    """
    The ID of the pipeline to which the batch belongs
    """

    status: str = pydantic.Field()
    """
    The current status of the batch
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The Unix timestamp (in seconds) for when the batch was created
    """

    updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The Unix timestamp (in seconds) for when the batch was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
