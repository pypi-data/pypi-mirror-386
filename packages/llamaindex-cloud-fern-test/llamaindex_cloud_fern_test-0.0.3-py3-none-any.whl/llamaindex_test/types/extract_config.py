# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .document_chunk_mode import DocumentChunkMode
from .extract_config_priority import ExtractConfigPriority
from .extract_mode import ExtractMode
from .extract_models import ExtractModels
from .extract_target import ExtractTarget
from .public_model_name import PublicModelName


class ExtractConfig(UncheckedBaseModel):
    """
    Additional parameters for the extraction agent.
    """

    priority: typing.Optional[ExtractConfigPriority] = pydantic.Field(default=None)
    """
    The priority for the request. This field may be ignored or overwritten depending on the organization tier.
    """

    extraction_target: typing.Optional[ExtractTarget] = pydantic.Field(default=None)
    """
    The extraction target specified.
    """

    extraction_mode: typing.Optional[ExtractMode] = pydantic.Field(default=None)
    """
    The extraction mode specified (FAST, BALANCED, MULTIMODAL, PREMIUM).
    """

    parse_model: typing.Optional[PublicModelName] = pydantic.Field(default=None)
    """
    The parse model to use for document parsing. If not provided, uses the default for the extraction mode.
    """

    extract_model: typing.Optional[ExtractModels] = pydantic.Field(default=None)
    """
    The extract model to use for data extraction. If not provided, uses the default for the extraction mode.
    """

    multimodal_fast_mode: typing.Optional[bool] = pydantic.Field(default=None)
    """
    DEPRECATED: Whether to use fast mode for multimodal extraction.
    """

    system_prompt: typing.Optional[str] = pydantic.Field(default=None)
    """
    The system prompt to use for the extraction.
    """

    use_reasoning: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to use reasoning for the extraction.
    """

    cite_sources: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to cite sources for the extraction.
    """

    confidence_scores: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to fetch confidence scores for the extraction.
    """

    chunk_mode: typing.Optional[DocumentChunkMode] = pydantic.Field(default=None)
    """
    The mode to use for chunking the document.
    """

    high_resolution_mode: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to use high resolution mode for the extraction.
    """

    invalidate_cache: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to invalidate the cache for the extraction.
    """

    num_pages_context: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of pages to pass as context on long document extraction.
    """

    page_range: typing.Optional[str] = pydantic.Field(default=None)
    """
    Comma-separated list of page numbers or ranges to extract from (1-based, e.g., '1,3,5-7,9' or '1-3,8-10').
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
