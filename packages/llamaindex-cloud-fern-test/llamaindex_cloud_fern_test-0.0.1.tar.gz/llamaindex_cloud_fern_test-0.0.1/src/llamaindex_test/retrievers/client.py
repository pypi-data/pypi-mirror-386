# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.composite_retrieval_mode import CompositeRetrievalMode
from ..types.composite_retrieval_result import CompositeRetrievalResult
from ..types.re_rank_config import ReRankConfig
from ..types.retriever import Retriever
from ..types.retriever_pipeline import RetrieverPipeline
from .raw_client import AsyncRawRetrieversClient, RawRetrieversClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RetrieversClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawRetrieversClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawRetrieversClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawRetrieversClient
        """
        return self._raw_client

    def list(
        self,
        *,
        name: typing.Optional[str] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Retriever]:
        """
        List Retrievers for a project.

        Parameters
        ----------
        name : typing.Optional[str]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Retriever]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.retrievers.list(
            name="name",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list(
            name=name, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def create(
        self,
        *,
        name: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Retriever:
        """
        Create a new Retriever.

        Parameters
        ----------
        name : str
            A name for the retriever tool. Will default to the pipeline name if not provided.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Retriever
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.retrievers.create(
            project_id="project_id",
            organization_id="organization_id",
            name="name",
        )
        """
        _response = self._raw_client.create(
            name=name,
            project_id=project_id,
            organization_id=organization_id,
            pipelines=pipelines,
            request_options=request_options,
        )
        return _response.data

    def upsert(
        self,
        *,
        name: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Retriever:
        """
        Upsert a new Retriever.

        Parameters
        ----------
        name : str
            A name for the retriever tool. Will default to the pipeline name if not provided.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Retriever
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.retrievers.upsert(
            project_id="project_id",
            organization_id="organization_id",
            name="name",
        )
        """
        _response = self._raw_client.upsert(
            name=name,
            project_id=project_id,
            organization_id=organization_id,
            pipelines=pipelines,
            request_options=request_options,
        )
        return _response.data

    def get(
        self,
        retriever_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Retriever:
        """
        Get a Retriever by ID.

        Parameters
        ----------
        retriever_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Retriever
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.retrievers.get(
            retriever_id="retriever_id",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get(
            retriever_id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def update(
        self,
        retriever_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Retriever:
        """
        Update an existing Retriever.

        Parameters
        ----------
        retriever_id : str

        name : typing.Optional[str]
            A name for the retriever.

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Retriever
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.retrievers.update(
            retriever_id="retriever_id",
        )
        """
        _response = self._raw_client.update(
            retriever_id, name=name, pipelines=pipelines, request_options=request_options
        )
        return _response.data

    def delete(self, retriever_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a Retriever by ID.

        Parameters
        ----------
        retriever_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.retrievers.delete(
            retriever_id="retriever_id",
        )
        """
        _response = self._raw_client.delete(retriever_id, request_options=request_options)
        return _response.data

    def retrieve(
        self,
        retriever_id: str,
        *,
        query: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        mode: typing.Optional[CompositeRetrievalMode] = OMIT,
        rerank_top_n: typing.Optional[int] = OMIT,
        rerank_config: typing.Optional[ReRankConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompositeRetrievalResult:
        """
        Retrieve data using a Retriever.

        Parameters
        ----------
        retriever_id : str

        query : str
            The query to retrieve against.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        mode : typing.Optional[CompositeRetrievalMode]
            The mode of composite retrieval.

        rerank_top_n : typing.Optional[int]
            (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.

        rerank_config : typing.Optional[ReRankConfig]
            The rerank configuration for composite retrieval.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompositeRetrievalResult
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.retrievers.retrieve(
            retriever_id="retriever_id",
            project_id="project_id",
            organization_id="organization_id",
            query="query",
        )
        """
        _response = self._raw_client.retrieve(
            retriever_id,
            query=query,
            project_id=project_id,
            organization_id=organization_id,
            mode=mode,
            rerank_top_n=rerank_top_n,
            rerank_config=rerank_config,
            request_options=request_options,
        )
        return _response.data

    def retrieve_direct(
        self,
        *,
        query: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        mode: typing.Optional[CompositeRetrievalMode] = OMIT,
        rerank_top_n: typing.Optional[int] = OMIT,
        rerank_config: typing.Optional[ReRankConfig] = OMIT,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompositeRetrievalResult:
        """
        Retrieve data using specified pipelines without creating a persistent retriever.

        Parameters
        ----------
        query : str
            The query to retrieve against.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        mode : typing.Optional[CompositeRetrievalMode]
            The mode of composite retrieval.

        rerank_top_n : typing.Optional[int]
            (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.

        rerank_config : typing.Optional[ReRankConfig]
            The rerank configuration for composite retrieval.

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines to use for retrieval.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompositeRetrievalResult
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.retrievers.retrieve_direct(
            project_id="project_id",
            organization_id="organization_id",
            query="query",
        )
        """
        _response = self._raw_client.retrieve_direct(
            query=query,
            project_id=project_id,
            organization_id=organization_id,
            mode=mode,
            rerank_top_n=rerank_top_n,
            rerank_config=rerank_config,
            pipelines=pipelines,
            request_options=request_options,
        )
        return _response.data


class AsyncRetrieversClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawRetrieversClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawRetrieversClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawRetrieversClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        name: typing.Optional[str] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Retriever]:
        """
        List Retrievers for a project.

        Parameters
        ----------
        name : typing.Optional[str]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Retriever]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.retrievers.list(
                name="name",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            name=name, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        *,
        name: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Retriever:
        """
        Create a new Retriever.

        Parameters
        ----------
        name : str
            A name for the retriever tool. Will default to the pipeline name if not provided.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Retriever
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.retrievers.create(
                project_id="project_id",
                organization_id="organization_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            name=name,
            project_id=project_id,
            organization_id=organization_id,
            pipelines=pipelines,
            request_options=request_options,
        )
        return _response.data

    async def upsert(
        self,
        *,
        name: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Retriever:
        """
        Upsert a new Retriever.

        Parameters
        ----------
        name : str
            A name for the retriever tool. Will default to the pipeline name if not provided.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Retriever
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.retrievers.upsert(
                project_id="project_id",
                organization_id="organization_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert(
            name=name,
            project_id=project_id,
            organization_id=organization_id,
            pipelines=pipelines,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self,
        retriever_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Retriever:
        """
        Get a Retriever by ID.

        Parameters
        ----------
        retriever_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Retriever
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.retrievers.get(
                retriever_id="retriever_id",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            retriever_id, project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def update(
        self,
        retriever_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Retriever:
        """
        Update an existing Retriever.

        Parameters
        ----------
        retriever_id : str

        name : typing.Optional[str]
            A name for the retriever.

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Retriever
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.retrievers.update(
                retriever_id="retriever_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            retriever_id, name=name, pipelines=pipelines, request_options=request_options
        )
        return _response.data

    async def delete(self, retriever_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a Retriever by ID.

        Parameters
        ----------
        retriever_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.retrievers.delete(
                retriever_id="retriever_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(retriever_id, request_options=request_options)
        return _response.data

    async def retrieve(
        self,
        retriever_id: str,
        *,
        query: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        mode: typing.Optional[CompositeRetrievalMode] = OMIT,
        rerank_top_n: typing.Optional[int] = OMIT,
        rerank_config: typing.Optional[ReRankConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompositeRetrievalResult:
        """
        Retrieve data using a Retriever.

        Parameters
        ----------
        retriever_id : str

        query : str
            The query to retrieve against.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        mode : typing.Optional[CompositeRetrievalMode]
            The mode of composite retrieval.

        rerank_top_n : typing.Optional[int]
            (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.

        rerank_config : typing.Optional[ReRankConfig]
            The rerank configuration for composite retrieval.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompositeRetrievalResult
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.retrievers.retrieve(
                retriever_id="retriever_id",
                project_id="project_id",
                organization_id="organization_id",
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.retrieve(
            retriever_id,
            query=query,
            project_id=project_id,
            organization_id=organization_id,
            mode=mode,
            rerank_top_n=rerank_top_n,
            rerank_config=rerank_config,
            request_options=request_options,
        )
        return _response.data

    async def retrieve_direct(
        self,
        *,
        query: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        mode: typing.Optional[CompositeRetrievalMode] = OMIT,
        rerank_top_n: typing.Optional[int] = OMIT,
        rerank_config: typing.Optional[ReRankConfig] = OMIT,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompositeRetrievalResult:
        """
        Retrieve data using specified pipelines without creating a persistent retriever.

        Parameters
        ----------
        query : str
            The query to retrieve against.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        mode : typing.Optional[CompositeRetrievalMode]
            The mode of composite retrieval.

        rerank_top_n : typing.Optional[int]
            (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.

        rerank_config : typing.Optional[ReRankConfig]
            The rerank configuration for composite retrieval.

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines to use for retrieval.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompositeRetrievalResult
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.retrievers.retrieve_direct(
                project_id="project_id",
                organization_id="organization_id",
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.retrieve_direct(
            query=query,
            project_id=project_id,
            organization_id=organization_id,
            mode=mode,
            rerank_top_n=rerank_top_n,
            rerank_config=rerank_config,
            pipelines=pipelines,
            request_options=request_options,
        )
        return _response.data
