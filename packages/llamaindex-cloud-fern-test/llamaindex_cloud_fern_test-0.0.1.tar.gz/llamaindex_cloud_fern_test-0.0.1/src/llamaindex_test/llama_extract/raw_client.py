# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from .. import core
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.extract_agent import ExtractAgent
from ..types.extract_config import ExtractConfig
from ..types.extract_job import ExtractJob
from ..types.extract_resultset import ExtractResultset
from ..types.extract_run import ExtractRun
from ..types.extract_schema_generate_response import ExtractSchemaGenerateResponse
from ..types.extract_schema_validate_response import ExtractSchemaValidateResponse
from ..types.file_data import FileData
from ..types.http_validation_error import HttpValidationError
from ..types.paginated_extract_runs_response import PaginatedExtractRunsResponse
from ..types.webhook_configuration import WebhookConfiguration
from .types.extract_agent_create_data_schema import ExtractAgentCreateDataSchema
from .types.extract_agent_update_data_schema import ExtractAgentUpdateDataSchema
from .types.extract_job_create_batch_data_schema_override import ExtractJobCreateBatchDataSchemaOverride
from .types.extract_job_create_data_schema_override import ExtractJobCreateDataSchemaOverride
from .types.extract_job_create_priority import ExtractJobCreatePriority
from .types.extract_schema_validate_request_data_schema import ExtractSchemaValidateRequestDataSchema
from .types.extract_stateless_request_data_schema import ExtractStatelessRequestDataSchema

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawLlamaExtractClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_jobs(
        self, *, extraction_agent_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[ExtractJob]]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[ExtractJob]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/jobs",
            method="GET",
            params={
                "extraction_agent_id": extraction_agent_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[ExtractJob],
                    construct_type(
                        type_=typing.List[ExtractJob],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def run_job(
        self,
        *,
        extraction_agent_id: str,
        file_id: str,
        from_ui: typing.Optional[bool] = None,
        priority: typing.Optional[ExtractJobCreatePriority] = OMIT,
        webhook_configurations: typing.Optional[typing.Sequence[WebhookConfiguration]] = OMIT,
        data_schema_override: typing.Optional[ExtractJobCreateDataSchemaOverride] = OMIT,
        config_override: typing.Optional[ExtractConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractJob]:
        """
        Parameters
        ----------
        extraction_agent_id : str
            The id of the extraction agent

        file_id : str
            The id of the file

        from_ui : typing.Optional[bool]

        priority : typing.Optional[ExtractJobCreatePriority]
            The priority for the request. This field may be ignored or overwritten depending on the organization tier.

        webhook_configurations : typing.Optional[typing.Sequence[WebhookConfiguration]]
            The outbound webhook configurations

        data_schema_override : typing.Optional[ExtractJobCreateDataSchemaOverride]
            The data schema to override the extraction agent's data schema with

        config_override : typing.Optional[ExtractConfig]
            The config to override the extraction agent's config with

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractJob]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/jobs",
            method="POST",
            params={
                "from_ui": from_ui,
            },
            json={
                "priority": priority,
                "webhook_configurations": convert_and_respect_annotation_metadata(
                    object_=webhook_configurations, annotation=typing.Sequence[WebhookConfiguration], direction="write"
                ),
                "extraction_agent_id": extraction_agent_id,
                "file_id": file_id,
                "data_schema_override": convert_and_respect_annotation_metadata(
                    object_=data_schema_override, annotation=ExtractJobCreateDataSchemaOverride, direction="write"
                ),
                "config_override": convert_and_respect_annotation_metadata(
                    object_=config_override, annotation=ExtractConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractJob,
                    construct_type(
                        type_=ExtractJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_job(
        self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[ExtractJob]:
        """
        Parameters
        ----------
        job_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractJob]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/jobs/{jsonable_encoder(job_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractJob,
                    construct_type(
                        type_=ExtractJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def run_job_on_file(
        self,
        *,
        extraction_agent_id: str,
        file: core.File,
        from_ui: typing.Optional[bool] = None,
        data_schema_override: typing.Optional[str] = OMIT,
        config_override: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractJob]:
        """
        Parameters
        ----------
        extraction_agent_id : str
            The id of the extraction agent

        file : core.File
            See core.File for more documentation

        from_ui : typing.Optional[bool]

        data_schema_override : typing.Optional[str]
            The data schema to override the extraction agent's data schema with as a JSON string

        config_override : typing.Optional[str]
            The config to override the extraction agent's config with as a JSON string

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractJob]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/jobs/file",
            method="POST",
            params={
                "from_ui": from_ui,
            },
            data={
                "extraction_agent_id": extraction_agent_id,
                "data_schema_override": data_schema_override,
                "config_override": config_override,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractJob,
                    construct_type(
                        type_=ExtractJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def run_batch_jobs(
        self,
        *,
        extraction_agent_id: str,
        file_ids: typing.Sequence[str],
        from_ui: typing.Optional[bool] = None,
        webhook_configurations: typing.Optional[typing.Sequence[WebhookConfiguration]] = OMIT,
        data_schema_override: typing.Optional[ExtractJobCreateBatchDataSchemaOverride] = OMIT,
        config_override: typing.Optional[ExtractConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[ExtractJob]]:
        """
        Parameters
        ----------
        extraction_agent_id : str
            The id of the extraction agent

        file_ids : typing.Sequence[str]
            The ids of the files

        from_ui : typing.Optional[bool]

        webhook_configurations : typing.Optional[typing.Sequence[WebhookConfiguration]]
            The outbound webhook configurations

        data_schema_override : typing.Optional[ExtractJobCreateBatchDataSchemaOverride]
            The data schema to override the extraction agent's data schema with

        config_override : typing.Optional[ExtractConfig]
            The config to override the extraction agent's config with

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[ExtractJob]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/jobs/batch",
            method="POST",
            params={
                "from_ui": from_ui,
            },
            json={
                "webhook_configurations": convert_and_respect_annotation_metadata(
                    object_=webhook_configurations, annotation=typing.Sequence[WebhookConfiguration], direction="write"
                ),
                "extraction_agent_id": extraction_agent_id,
                "file_ids": file_ids,
                "data_schema_override": convert_and_respect_annotation_metadata(
                    object_=data_schema_override, annotation=ExtractJobCreateBatchDataSchemaOverride, direction="write"
                ),
                "config_override": convert_and_respect_annotation_metadata(
                    object_=config_override, annotation=ExtractConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[ExtractJob],
                    construct_type(
                        type_=typing.List[ExtractJob],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_job_result(
        self,
        job_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractResultset]:
        """
        Parameters
        ----------
        job_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractResultset]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/jobs/{jsonable_encoder(job_id)}/result",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractResultset,
                    construct_type(
                        type_=ExtractResultset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_runs(
        self,
        *,
        extraction_agent_id: str,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PaginatedExtractRunsResponse]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PaginatedExtractRunsResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/runs",
            method="GET",
            params={
                "extraction_agent_id": extraction_agent_id,
                "skip": skip,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedExtractRunsResponse,
                    construct_type(
                        type_=PaginatedExtractRunsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_latest_ui_run(
        self, *, extraction_agent_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.Optional[ExtractRun]]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[ExtractRun]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/runs/latest-from-ui",
            method="GET",
            params={
                "extraction_agent_id": extraction_agent_id,
            },
            request_options=request_options,
        )
        try:
            if _response is None or not _response.text.strip():
                return HttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[ExtractRun],
                    construct_type(
                        type_=typing.Optional[ExtractRun],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_run_by_job(
        self,
        job_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractRun]:
        """
        Parameters
        ----------
        job_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractRun]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/runs/by-job/{jsonable_encoder(job_id)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractRun,
                    construct_type(
                        type_=ExtractRun,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_run(
        self,
        run_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractRun]:
        """
        Parameters
        ----------
        run_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractRun]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/runs/{jsonable_encoder(run_id)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractRun,
                    construct_type(
                        type_=ExtractRun,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_run(
        self,
        run_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        run_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[typing.Any]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/runs/{jsonable_encoder(run_id)}",
            method="DELETE",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if _response is None or not _response.text.strip():
                return HttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[typing.Any],
                    construct_type(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def extract_stateless(
        self,
        *,
        data_schema: ExtractStatelessRequestDataSchema,
        config: ExtractConfig,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        webhook_configurations: typing.Optional[typing.Sequence[WebhookConfiguration]] = OMIT,
        file_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        file: typing.Optional[FileData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractJob]:
        """
        Stateless extraction endpoint that uses a default extraction agent in the user's default project.
        Requires data_schema, config, and either file_id, text, or base64 encoded file data.

        Parameters
        ----------
        data_schema : ExtractStatelessRequestDataSchema
            The schema of the data to extract

        config : ExtractConfig
            The configuration parameters for the extraction

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        webhook_configurations : typing.Optional[typing.Sequence[WebhookConfiguration]]
            The outbound webhook configurations

        file_id : typing.Optional[str]
            The ID of the file to extract from

        text : typing.Optional[str]
            The text content to extract from

        file : typing.Optional[FileData]
            The file data with base64 content and MIME type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractJob]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/run",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "webhook_configurations": convert_and_respect_annotation_metadata(
                    object_=webhook_configurations, annotation=typing.Sequence[WebhookConfiguration], direction="write"
                ),
                "data_schema": convert_and_respect_annotation_metadata(
                    object_=data_schema, annotation=ExtractStatelessRequestDataSchema, direction="write"
                ),
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ExtractConfig, direction="write"
                ),
                "file_id": file_id,
                "text": text,
                "file": convert_and_respect_annotation_metadata(object_=file, annotation=FileData, direction="write"),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractJob,
                    construct_type(
                        type_=ExtractJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_agents(
        self,
        *,
        include_default: typing.Optional[bool] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[ExtractAgent]]:
        """
        Parameters
        ----------
        include_default : typing.Optional[bool]
            Whether to include default agents in the results

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[ExtractAgent]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents",
            method="GET",
            params={
                "include_default": include_default,
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[ExtractAgent],
                    construct_type(
                        type_=typing.List[ExtractAgent],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_agent(
        self,
        *,
        name: str,
        data_schema: ExtractAgentCreateDataSchema,
        config: ExtractConfig,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractAgent]:
        """
        Parameters
        ----------
        name : str
            The name of the extraction schema

        data_schema : ExtractAgentCreateDataSchema
            The schema of the data.

        config : ExtractConfig
            The configuration parameters for the extraction agent.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractAgent]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "data_schema": convert_and_respect_annotation_metadata(
                    object_=data_schema, annotation=ExtractAgentCreateDataSchema, direction="write"
                ),
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ExtractConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def validate_schema(
        self,
        *,
        data_schema: ExtractSchemaValidateRequestDataSchema,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractSchemaValidateResponse]:
        """
        Validates an extraction agent's schema definition.
        Returns the normalized and validated schema if valid, otherwise raises an HTTP 400.

        Parameters
        ----------
        data_schema : ExtractSchemaValidateRequestDataSchema

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractSchemaValidateResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents/schema/validation",
            method="POST",
            json={
                "data_schema": convert_and_respect_annotation_metadata(
                    object_=data_schema, annotation=ExtractSchemaValidateRequestDataSchema, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractSchemaValidateResponse,
                    construct_type(
                        type_=ExtractSchemaValidateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def generate_schema(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        prompt: typing.Optional[str] = OMIT,
        file_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractSchemaGenerateResponse]:
        """
        Generates an extraction agent's schema definition from a file and/or natural language prompt.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        prompt : typing.Optional[str]
            Natural language description of the data structure to extract

        file_id : typing.Optional[str]
            Optional file ID to analyze for schema generation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractSchemaGenerateResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents/schema/generate",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "prompt": prompt,
                "file_id": file_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractSchemaGenerateResponse,
                    construct_type(
                        type_=ExtractSchemaGenerateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_agent_by_name(
        self,
        name: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractAgent]:
        """
        Parameters
        ----------
        name : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractAgent]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/extraction-agents/by-name/{jsonable_encoder(name)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_or_create_default_agent(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractAgent]:
        """
        Get or create a default extraction agent for the current project.
        The default agent has an empty schema and default configuration.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractAgent]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents/default",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_agent(
        self, extraction_agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[ExtractAgent]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractAgent]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/extraction-agents/{jsonable_encoder(extraction_agent_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_agent(
        self,
        extraction_agent_id: str,
        *,
        data_schema: ExtractAgentUpdateDataSchema,
        config: ExtractConfig,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ExtractAgent]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        data_schema : ExtractAgentUpdateDataSchema
            The schema of the data

        config : ExtractConfig
            The configuration parameters for the extraction agent.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExtractAgent]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/extraction-agents/{jsonable_encoder(extraction_agent_id)}",
            method="PUT",
            json={
                "data_schema": convert_and_respect_annotation_metadata(
                    object_=data_schema, annotation=ExtractAgentUpdateDataSchema, direction="write"
                ),
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ExtractConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_agent(
        self, extraction_agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[typing.Any]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/extraction-agents/{jsonable_encoder(extraction_agent_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if _response is None or not _response.text.strip():
                return HttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[typing.Any],
                    construct_type(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawLlamaExtractClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_jobs(
        self, *, extraction_agent_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[ExtractJob]]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[ExtractJob]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/jobs",
            method="GET",
            params={
                "extraction_agent_id": extraction_agent_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[ExtractJob],
                    construct_type(
                        type_=typing.List[ExtractJob],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def run_job(
        self,
        *,
        extraction_agent_id: str,
        file_id: str,
        from_ui: typing.Optional[bool] = None,
        priority: typing.Optional[ExtractJobCreatePriority] = OMIT,
        webhook_configurations: typing.Optional[typing.Sequence[WebhookConfiguration]] = OMIT,
        data_schema_override: typing.Optional[ExtractJobCreateDataSchemaOverride] = OMIT,
        config_override: typing.Optional[ExtractConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractJob]:
        """
        Parameters
        ----------
        extraction_agent_id : str
            The id of the extraction agent

        file_id : str
            The id of the file

        from_ui : typing.Optional[bool]

        priority : typing.Optional[ExtractJobCreatePriority]
            The priority for the request. This field may be ignored or overwritten depending on the organization tier.

        webhook_configurations : typing.Optional[typing.Sequence[WebhookConfiguration]]
            The outbound webhook configurations

        data_schema_override : typing.Optional[ExtractJobCreateDataSchemaOverride]
            The data schema to override the extraction agent's data schema with

        config_override : typing.Optional[ExtractConfig]
            The config to override the extraction agent's config with

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractJob]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/jobs",
            method="POST",
            params={
                "from_ui": from_ui,
            },
            json={
                "priority": priority,
                "webhook_configurations": convert_and_respect_annotation_metadata(
                    object_=webhook_configurations, annotation=typing.Sequence[WebhookConfiguration], direction="write"
                ),
                "extraction_agent_id": extraction_agent_id,
                "file_id": file_id,
                "data_schema_override": convert_and_respect_annotation_metadata(
                    object_=data_schema_override, annotation=ExtractJobCreateDataSchemaOverride, direction="write"
                ),
                "config_override": convert_and_respect_annotation_metadata(
                    object_=config_override, annotation=ExtractConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractJob,
                    construct_type(
                        type_=ExtractJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_job(
        self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[ExtractJob]:
        """
        Parameters
        ----------
        job_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractJob]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/jobs/{jsonable_encoder(job_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractJob,
                    construct_type(
                        type_=ExtractJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def run_job_on_file(
        self,
        *,
        extraction_agent_id: str,
        file: core.File,
        from_ui: typing.Optional[bool] = None,
        data_schema_override: typing.Optional[str] = OMIT,
        config_override: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractJob]:
        """
        Parameters
        ----------
        extraction_agent_id : str
            The id of the extraction agent

        file : core.File
            See core.File for more documentation

        from_ui : typing.Optional[bool]

        data_schema_override : typing.Optional[str]
            The data schema to override the extraction agent's data schema with as a JSON string

        config_override : typing.Optional[str]
            The config to override the extraction agent's config with as a JSON string

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractJob]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/jobs/file",
            method="POST",
            params={
                "from_ui": from_ui,
            },
            data={
                "extraction_agent_id": extraction_agent_id,
                "data_schema_override": data_schema_override,
                "config_override": config_override,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractJob,
                    construct_type(
                        type_=ExtractJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def run_batch_jobs(
        self,
        *,
        extraction_agent_id: str,
        file_ids: typing.Sequence[str],
        from_ui: typing.Optional[bool] = None,
        webhook_configurations: typing.Optional[typing.Sequence[WebhookConfiguration]] = OMIT,
        data_schema_override: typing.Optional[ExtractJobCreateBatchDataSchemaOverride] = OMIT,
        config_override: typing.Optional[ExtractConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[ExtractJob]]:
        """
        Parameters
        ----------
        extraction_agent_id : str
            The id of the extraction agent

        file_ids : typing.Sequence[str]
            The ids of the files

        from_ui : typing.Optional[bool]

        webhook_configurations : typing.Optional[typing.Sequence[WebhookConfiguration]]
            The outbound webhook configurations

        data_schema_override : typing.Optional[ExtractJobCreateBatchDataSchemaOverride]
            The data schema to override the extraction agent's data schema with

        config_override : typing.Optional[ExtractConfig]
            The config to override the extraction agent's config with

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[ExtractJob]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/jobs/batch",
            method="POST",
            params={
                "from_ui": from_ui,
            },
            json={
                "webhook_configurations": convert_and_respect_annotation_metadata(
                    object_=webhook_configurations, annotation=typing.Sequence[WebhookConfiguration], direction="write"
                ),
                "extraction_agent_id": extraction_agent_id,
                "file_ids": file_ids,
                "data_schema_override": convert_and_respect_annotation_metadata(
                    object_=data_schema_override, annotation=ExtractJobCreateBatchDataSchemaOverride, direction="write"
                ),
                "config_override": convert_and_respect_annotation_metadata(
                    object_=config_override, annotation=ExtractConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[ExtractJob],
                    construct_type(
                        type_=typing.List[ExtractJob],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_job_result(
        self,
        job_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractResultset]:
        """
        Parameters
        ----------
        job_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractResultset]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/jobs/{jsonable_encoder(job_id)}/result",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractResultset,
                    construct_type(
                        type_=ExtractResultset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_runs(
        self,
        *,
        extraction_agent_id: str,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PaginatedExtractRunsResponse]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PaginatedExtractRunsResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/runs",
            method="GET",
            params={
                "extraction_agent_id": extraction_agent_id,
                "skip": skip,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedExtractRunsResponse,
                    construct_type(
                        type_=PaginatedExtractRunsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_latest_ui_run(
        self, *, extraction_agent_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.Optional[ExtractRun]]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[ExtractRun]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/runs/latest-from-ui",
            method="GET",
            params={
                "extraction_agent_id": extraction_agent_id,
            },
            request_options=request_options,
        )
        try:
            if _response is None or not _response.text.strip():
                return AsyncHttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[ExtractRun],
                    construct_type(
                        type_=typing.Optional[ExtractRun],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_run_by_job(
        self,
        job_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractRun]:
        """
        Parameters
        ----------
        job_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractRun]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/runs/by-job/{jsonable_encoder(job_id)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractRun,
                    construct_type(
                        type_=ExtractRun,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_run(
        self,
        run_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractRun]:
        """
        Parameters
        ----------
        run_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractRun]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/runs/{jsonable_encoder(run_id)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractRun,
                    construct_type(
                        type_=ExtractRun,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_run(
        self,
        run_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        run_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[typing.Any]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/runs/{jsonable_encoder(run_id)}",
            method="DELETE",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if _response is None or not _response.text.strip():
                return AsyncHttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[typing.Any],
                    construct_type(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def extract_stateless(
        self,
        *,
        data_schema: ExtractStatelessRequestDataSchema,
        config: ExtractConfig,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        webhook_configurations: typing.Optional[typing.Sequence[WebhookConfiguration]] = OMIT,
        file_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        file: typing.Optional[FileData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractJob]:
        """
        Stateless extraction endpoint that uses a default extraction agent in the user's default project.
        Requires data_schema, config, and either file_id, text, or base64 encoded file data.

        Parameters
        ----------
        data_schema : ExtractStatelessRequestDataSchema
            The schema of the data to extract

        config : ExtractConfig
            The configuration parameters for the extraction

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        webhook_configurations : typing.Optional[typing.Sequence[WebhookConfiguration]]
            The outbound webhook configurations

        file_id : typing.Optional[str]
            The ID of the file to extract from

        text : typing.Optional[str]
            The text content to extract from

        file : typing.Optional[FileData]
            The file data with base64 content and MIME type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractJob]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/run",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "webhook_configurations": convert_and_respect_annotation_metadata(
                    object_=webhook_configurations, annotation=typing.Sequence[WebhookConfiguration], direction="write"
                ),
                "data_schema": convert_and_respect_annotation_metadata(
                    object_=data_schema, annotation=ExtractStatelessRequestDataSchema, direction="write"
                ),
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ExtractConfig, direction="write"
                ),
                "file_id": file_id,
                "text": text,
                "file": convert_and_respect_annotation_metadata(object_=file, annotation=FileData, direction="write"),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractJob,
                    construct_type(
                        type_=ExtractJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_agents(
        self,
        *,
        include_default: typing.Optional[bool] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[ExtractAgent]]:
        """
        Parameters
        ----------
        include_default : typing.Optional[bool]
            Whether to include default agents in the results

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[ExtractAgent]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents",
            method="GET",
            params={
                "include_default": include_default,
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[ExtractAgent],
                    construct_type(
                        type_=typing.List[ExtractAgent],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_agent(
        self,
        *,
        name: str,
        data_schema: ExtractAgentCreateDataSchema,
        config: ExtractConfig,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractAgent]:
        """
        Parameters
        ----------
        name : str
            The name of the extraction schema

        data_schema : ExtractAgentCreateDataSchema
            The schema of the data.

        config : ExtractConfig
            The configuration parameters for the extraction agent.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractAgent]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "data_schema": convert_and_respect_annotation_metadata(
                    object_=data_schema, annotation=ExtractAgentCreateDataSchema, direction="write"
                ),
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ExtractConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def validate_schema(
        self,
        *,
        data_schema: ExtractSchemaValidateRequestDataSchema,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractSchemaValidateResponse]:
        """
        Validates an extraction agent's schema definition.
        Returns the normalized and validated schema if valid, otherwise raises an HTTP 400.

        Parameters
        ----------
        data_schema : ExtractSchemaValidateRequestDataSchema

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractSchemaValidateResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents/schema/validation",
            method="POST",
            json={
                "data_schema": convert_and_respect_annotation_metadata(
                    object_=data_schema, annotation=ExtractSchemaValidateRequestDataSchema, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractSchemaValidateResponse,
                    construct_type(
                        type_=ExtractSchemaValidateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def generate_schema(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        prompt: typing.Optional[str] = OMIT,
        file_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractSchemaGenerateResponse]:
        """
        Generates an extraction agent's schema definition from a file and/or natural language prompt.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        prompt : typing.Optional[str]
            Natural language description of the data structure to extract

        file_id : typing.Optional[str]
            Optional file ID to analyze for schema generation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractSchemaGenerateResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents/schema/generate",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "prompt": prompt,
                "file_id": file_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractSchemaGenerateResponse,
                    construct_type(
                        type_=ExtractSchemaGenerateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_agent_by_name(
        self,
        name: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractAgent]:
        """
        Parameters
        ----------
        name : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractAgent]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/extraction-agents/by-name/{jsonable_encoder(name)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_or_create_default_agent(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractAgent]:
        """
        Get or create a default extraction agent for the current project.
        The default agent has an empty schema and default configuration.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractAgent]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/extraction/extraction-agents/default",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_agent(
        self, extraction_agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[ExtractAgent]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractAgent]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/extraction-agents/{jsonable_encoder(extraction_agent_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_agent(
        self,
        extraction_agent_id: str,
        *,
        data_schema: ExtractAgentUpdateDataSchema,
        config: ExtractConfig,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ExtractAgent]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        data_schema : ExtractAgentUpdateDataSchema
            The schema of the data

        config : ExtractConfig
            The configuration parameters for the extraction agent.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExtractAgent]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/extraction-agents/{jsonable_encoder(extraction_agent_id)}",
            method="PUT",
            json={
                "data_schema": convert_and_respect_annotation_metadata(
                    object_=data_schema, annotation=ExtractAgentUpdateDataSchema, direction="write"
                ),
                "config": convert_and_respect_annotation_metadata(
                    object_=config, annotation=ExtractConfig, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ExtractAgent,
                    construct_type(
                        type_=ExtractAgent,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_agent(
        self, extraction_agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        extraction_agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[typing.Any]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/extraction/extraction-agents/{jsonable_encoder(extraction_agent_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if _response is None or not _response.text.strip():
                return AsyncHttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[typing.Any],
                    construct_type(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
