# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper

if typing.TYPE_CHECKING:
    from .agent_deployments.client import AgentDeploymentsClient, AsyncAgentDeploymentsClient
    from .alpha.client import AlphaClient, AsyncAlphaClient
    from .api_keys.client import ApiKeysClient, AsyncApiKeysClient
    from .auth.client import AsyncAuthClient, AuthClient
    from .beta.client import AsyncBetaClient, BetaClient
    from .billing.client import AsyncBillingClient, BillingClient
    from .classifier.client import AsyncClassifierClient, ClassifierClient
    from .data_sinks.client import AsyncDataSinksClient, DataSinksClient
    from .data_sources.client import AsyncDataSourcesClient, DataSourcesClient
    from .deprecated.client import AsyncDeprecatedClient, DeprecatedClient
    from .embedding_model_configs.client import AsyncEmbeddingModelConfigsClient, EmbeddingModelConfigsClient
    from .evals.client import AsyncEvalsClient, EvalsClient
    from .files.client import AsyncFilesClient, FilesClient
    from .jobs.client import AsyncJobsClient, JobsClient
    from .llama_extract.client import AsyncLlamaExtractClient, LlamaExtractClient
    from .organization_users.client import AsyncOrganizationUsersClient, OrganizationUsersClient
    from .organizations.client import AsyncOrganizationsClient, OrganizationsClient
    from .parsing.client import AsyncParsingClient, ParsingClient
    from .pipeline_data_sources.client import AsyncPipelineDataSourcesClient, PipelineDataSourcesClient
    from .pipeline_files.client import AsyncPipelineFilesClient, PipelineFilesClient
    from .pipelines.client import AsyncPipelinesClient, PipelinesClient
    from .projects.client import AsyncProjectsClient, ProjectsClient
    from .retrievers.client import AsyncRetrieversClient, RetrieversClient
    from .validation.client import AsyncValidationClient, ValidationClient


class LlamaCloud:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from llamaindex_test import LlamaCloud

    client = LlamaCloud(
        token="YOUR_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._agent_deployments: typing.Optional[AgentDeploymentsClient] = None
        self._api_keys: typing.Optional[ApiKeysClient] = None
        self._validation: typing.Optional[ValidationClient] = None
        self._data_sinks: typing.Optional[DataSinksClient] = None
        self._data_sources: typing.Optional[DataSourcesClient] = None
        self._embedding_model_configs: typing.Optional[EmbeddingModelConfigsClient] = None
        self._organizations: typing.Optional[OrganizationsClient] = None
        self._organization_users: typing.Optional[OrganizationUsersClient] = None
        self._projects: typing.Optional[ProjectsClient] = None
        self._files: typing.Optional[FilesClient] = None
        self._pipelines: typing.Optional[PipelinesClient] = None
        self._pipeline_data_sources: typing.Optional[PipelineDataSourcesClient] = None
        self._pipeline_files: typing.Optional[PipelineFilesClient] = None
        self._retrievers: typing.Optional[RetrieversClient] = None
        self._jobs: typing.Optional[JobsClient] = None
        self._evals: typing.Optional[EvalsClient] = None
        self._parsing: typing.Optional[ParsingClient] = None
        self._classifier: typing.Optional[ClassifierClient] = None
        self._auth: typing.Optional[AuthClient] = None
        self._billing: typing.Optional[BillingClient] = None
        self._llama_extract: typing.Optional[LlamaExtractClient] = None
        self._beta: typing.Optional[BetaClient] = None
        self._alpha: typing.Optional[AlphaClient] = None
        self._deprecated: typing.Optional[DeprecatedClient] = None

    @property
    def agent_deployments(self):
        if self._agent_deployments is None:
            from .agent_deployments.client import AgentDeploymentsClient  # noqa: E402

            self._agent_deployments = AgentDeploymentsClient(client_wrapper=self._client_wrapper)
        return self._agent_deployments

    @property
    def api_keys(self):
        if self._api_keys is None:
            from .api_keys.client import ApiKeysClient  # noqa: E402

            self._api_keys = ApiKeysClient(client_wrapper=self._client_wrapper)
        return self._api_keys

    @property
    def validation(self):
        if self._validation is None:
            from .validation.client import ValidationClient  # noqa: E402

            self._validation = ValidationClient(client_wrapper=self._client_wrapper)
        return self._validation

    @property
    def data_sinks(self):
        if self._data_sinks is None:
            from .data_sinks.client import DataSinksClient  # noqa: E402

            self._data_sinks = DataSinksClient(client_wrapper=self._client_wrapper)
        return self._data_sinks

    @property
    def data_sources(self):
        if self._data_sources is None:
            from .data_sources.client import DataSourcesClient  # noqa: E402

            self._data_sources = DataSourcesClient(client_wrapper=self._client_wrapper)
        return self._data_sources

    @property
    def embedding_model_configs(self):
        if self._embedding_model_configs is None:
            from .embedding_model_configs.client import EmbeddingModelConfigsClient  # noqa: E402

            self._embedding_model_configs = EmbeddingModelConfigsClient(client_wrapper=self._client_wrapper)
        return self._embedding_model_configs

    @property
    def organizations(self):
        if self._organizations is None:
            from .organizations.client import OrganizationsClient  # noqa: E402

            self._organizations = OrganizationsClient(client_wrapper=self._client_wrapper)
        return self._organizations

    @property
    def organization_users(self):
        if self._organization_users is None:
            from .organization_users.client import OrganizationUsersClient  # noqa: E402

            self._organization_users = OrganizationUsersClient(client_wrapper=self._client_wrapper)
        return self._organization_users

    @property
    def projects(self):
        if self._projects is None:
            from .projects.client import ProjectsClient  # noqa: E402

            self._projects = ProjectsClient(client_wrapper=self._client_wrapper)
        return self._projects

    @property
    def files(self):
        if self._files is None:
            from .files.client import FilesClient  # noqa: E402

            self._files = FilesClient(client_wrapper=self._client_wrapper)
        return self._files

    @property
    def pipelines(self):
        if self._pipelines is None:
            from .pipelines.client import PipelinesClient  # noqa: E402

            self._pipelines = PipelinesClient(client_wrapper=self._client_wrapper)
        return self._pipelines

    @property
    def pipeline_data_sources(self):
        if self._pipeline_data_sources is None:
            from .pipeline_data_sources.client import PipelineDataSourcesClient  # noqa: E402

            self._pipeline_data_sources = PipelineDataSourcesClient(client_wrapper=self._client_wrapper)
        return self._pipeline_data_sources

    @property
    def pipeline_files(self):
        if self._pipeline_files is None:
            from .pipeline_files.client import PipelineFilesClient  # noqa: E402

            self._pipeline_files = PipelineFilesClient(client_wrapper=self._client_wrapper)
        return self._pipeline_files

    @property
    def retrievers(self):
        if self._retrievers is None:
            from .retrievers.client import RetrieversClient  # noqa: E402

            self._retrievers = RetrieversClient(client_wrapper=self._client_wrapper)
        return self._retrievers

    @property
    def jobs(self):
        if self._jobs is None:
            from .jobs.client import JobsClient  # noqa: E402

            self._jobs = JobsClient(client_wrapper=self._client_wrapper)
        return self._jobs

    @property
    def evals(self):
        if self._evals is None:
            from .evals.client import EvalsClient  # noqa: E402

            self._evals = EvalsClient(client_wrapper=self._client_wrapper)
        return self._evals

    @property
    def parsing(self):
        if self._parsing is None:
            from .parsing.client import ParsingClient  # noqa: E402

            self._parsing = ParsingClient(client_wrapper=self._client_wrapper)
        return self._parsing

    @property
    def classifier(self):
        if self._classifier is None:
            from .classifier.client import ClassifierClient  # noqa: E402

            self._classifier = ClassifierClient(client_wrapper=self._client_wrapper)
        return self._classifier

    @property
    def auth(self):
        if self._auth is None:
            from .auth.client import AuthClient  # noqa: E402

            self._auth = AuthClient(client_wrapper=self._client_wrapper)
        return self._auth

    @property
    def billing(self):
        if self._billing is None:
            from .billing.client import BillingClient  # noqa: E402

            self._billing = BillingClient(client_wrapper=self._client_wrapper)
        return self._billing

    @property
    def llama_extract(self):
        if self._llama_extract is None:
            from .llama_extract.client import LlamaExtractClient  # noqa: E402

            self._llama_extract = LlamaExtractClient(client_wrapper=self._client_wrapper)
        return self._llama_extract

    @property
    def beta(self):
        if self._beta is None:
            from .beta.client import BetaClient  # noqa: E402

            self._beta = BetaClient(client_wrapper=self._client_wrapper)
        return self._beta

    @property
    def alpha(self):
        if self._alpha is None:
            from .alpha.client import AlphaClient  # noqa: E402

            self._alpha = AlphaClient(client_wrapper=self._client_wrapper)
        return self._alpha

    @property
    def deprecated(self):
        if self._deprecated is None:
            from .deprecated.client import DeprecatedClient  # noqa: E402

            self._deprecated = DeprecatedClient(client_wrapper=self._client_wrapper)
        return self._deprecated


class AsyncLlamaCloud:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from llamaindex_test import AsyncLlamaCloud

    client = AsyncLlamaCloud(
        token="YOUR_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._agent_deployments: typing.Optional[AsyncAgentDeploymentsClient] = None
        self._api_keys: typing.Optional[AsyncApiKeysClient] = None
        self._validation: typing.Optional[AsyncValidationClient] = None
        self._data_sinks: typing.Optional[AsyncDataSinksClient] = None
        self._data_sources: typing.Optional[AsyncDataSourcesClient] = None
        self._embedding_model_configs: typing.Optional[AsyncEmbeddingModelConfigsClient] = None
        self._organizations: typing.Optional[AsyncOrganizationsClient] = None
        self._organization_users: typing.Optional[AsyncOrganizationUsersClient] = None
        self._projects: typing.Optional[AsyncProjectsClient] = None
        self._files: typing.Optional[AsyncFilesClient] = None
        self._pipelines: typing.Optional[AsyncPipelinesClient] = None
        self._pipeline_data_sources: typing.Optional[AsyncPipelineDataSourcesClient] = None
        self._pipeline_files: typing.Optional[AsyncPipelineFilesClient] = None
        self._retrievers: typing.Optional[AsyncRetrieversClient] = None
        self._jobs: typing.Optional[AsyncJobsClient] = None
        self._evals: typing.Optional[AsyncEvalsClient] = None
        self._parsing: typing.Optional[AsyncParsingClient] = None
        self._classifier: typing.Optional[AsyncClassifierClient] = None
        self._auth: typing.Optional[AsyncAuthClient] = None
        self._billing: typing.Optional[AsyncBillingClient] = None
        self._llama_extract: typing.Optional[AsyncLlamaExtractClient] = None
        self._beta: typing.Optional[AsyncBetaClient] = None
        self._alpha: typing.Optional[AsyncAlphaClient] = None
        self._deprecated: typing.Optional[AsyncDeprecatedClient] = None

    @property
    def agent_deployments(self):
        if self._agent_deployments is None:
            from .agent_deployments.client import AsyncAgentDeploymentsClient  # noqa: E402

            self._agent_deployments = AsyncAgentDeploymentsClient(client_wrapper=self._client_wrapper)
        return self._agent_deployments

    @property
    def api_keys(self):
        if self._api_keys is None:
            from .api_keys.client import AsyncApiKeysClient  # noqa: E402

            self._api_keys = AsyncApiKeysClient(client_wrapper=self._client_wrapper)
        return self._api_keys

    @property
    def validation(self):
        if self._validation is None:
            from .validation.client import AsyncValidationClient  # noqa: E402

            self._validation = AsyncValidationClient(client_wrapper=self._client_wrapper)
        return self._validation

    @property
    def data_sinks(self):
        if self._data_sinks is None:
            from .data_sinks.client import AsyncDataSinksClient  # noqa: E402

            self._data_sinks = AsyncDataSinksClient(client_wrapper=self._client_wrapper)
        return self._data_sinks

    @property
    def data_sources(self):
        if self._data_sources is None:
            from .data_sources.client import AsyncDataSourcesClient  # noqa: E402

            self._data_sources = AsyncDataSourcesClient(client_wrapper=self._client_wrapper)
        return self._data_sources

    @property
    def embedding_model_configs(self):
        if self._embedding_model_configs is None:
            from .embedding_model_configs.client import AsyncEmbeddingModelConfigsClient  # noqa: E402

            self._embedding_model_configs = AsyncEmbeddingModelConfigsClient(client_wrapper=self._client_wrapper)
        return self._embedding_model_configs

    @property
    def organizations(self):
        if self._organizations is None:
            from .organizations.client import AsyncOrganizationsClient  # noqa: E402

            self._organizations = AsyncOrganizationsClient(client_wrapper=self._client_wrapper)
        return self._organizations

    @property
    def organization_users(self):
        if self._organization_users is None:
            from .organization_users.client import AsyncOrganizationUsersClient  # noqa: E402

            self._organization_users = AsyncOrganizationUsersClient(client_wrapper=self._client_wrapper)
        return self._organization_users

    @property
    def projects(self):
        if self._projects is None:
            from .projects.client import AsyncProjectsClient  # noqa: E402

            self._projects = AsyncProjectsClient(client_wrapper=self._client_wrapper)
        return self._projects

    @property
    def files(self):
        if self._files is None:
            from .files.client import AsyncFilesClient  # noqa: E402

            self._files = AsyncFilesClient(client_wrapper=self._client_wrapper)
        return self._files

    @property
    def pipelines(self):
        if self._pipelines is None:
            from .pipelines.client import AsyncPipelinesClient  # noqa: E402

            self._pipelines = AsyncPipelinesClient(client_wrapper=self._client_wrapper)
        return self._pipelines

    @property
    def pipeline_data_sources(self):
        if self._pipeline_data_sources is None:
            from .pipeline_data_sources.client import AsyncPipelineDataSourcesClient  # noqa: E402

            self._pipeline_data_sources = AsyncPipelineDataSourcesClient(client_wrapper=self._client_wrapper)
        return self._pipeline_data_sources

    @property
    def pipeline_files(self):
        if self._pipeline_files is None:
            from .pipeline_files.client import AsyncPipelineFilesClient  # noqa: E402

            self._pipeline_files = AsyncPipelineFilesClient(client_wrapper=self._client_wrapper)
        return self._pipeline_files

    @property
    def retrievers(self):
        if self._retrievers is None:
            from .retrievers.client import AsyncRetrieversClient  # noqa: E402

            self._retrievers = AsyncRetrieversClient(client_wrapper=self._client_wrapper)
        return self._retrievers

    @property
    def jobs(self):
        if self._jobs is None:
            from .jobs.client import AsyncJobsClient  # noqa: E402

            self._jobs = AsyncJobsClient(client_wrapper=self._client_wrapper)
        return self._jobs

    @property
    def evals(self):
        if self._evals is None:
            from .evals.client import AsyncEvalsClient  # noqa: E402

            self._evals = AsyncEvalsClient(client_wrapper=self._client_wrapper)
        return self._evals

    @property
    def parsing(self):
        if self._parsing is None:
            from .parsing.client import AsyncParsingClient  # noqa: E402

            self._parsing = AsyncParsingClient(client_wrapper=self._client_wrapper)
        return self._parsing

    @property
    def classifier(self):
        if self._classifier is None:
            from .classifier.client import AsyncClassifierClient  # noqa: E402

            self._classifier = AsyncClassifierClient(client_wrapper=self._client_wrapper)
        return self._classifier

    @property
    def auth(self):
        if self._auth is None:
            from .auth.client import AsyncAuthClient  # noqa: E402

            self._auth = AsyncAuthClient(client_wrapper=self._client_wrapper)
        return self._auth

    @property
    def billing(self):
        if self._billing is None:
            from .billing.client import AsyncBillingClient  # noqa: E402

            self._billing = AsyncBillingClient(client_wrapper=self._client_wrapper)
        return self._billing

    @property
    def llama_extract(self):
        if self._llama_extract is None:
            from .llama_extract.client import AsyncLlamaExtractClient  # noqa: E402

            self._llama_extract = AsyncLlamaExtractClient(client_wrapper=self._client_wrapper)
        return self._llama_extract

    @property
    def beta(self):
        if self._beta is None:
            from .beta.client import AsyncBetaClient  # noqa: E402

            self._beta = AsyncBetaClient(client_wrapper=self._client_wrapper)
        return self._beta

    @property
    def alpha(self):
        if self._alpha is None:
            from .alpha.client import AsyncAlphaClient  # noqa: E402

            self._alpha = AsyncAlphaClient(client_wrapper=self._client_wrapper)
        return self._alpha

    @property
    def deprecated(self):
        if self._deprecated is None:
            from .deprecated.client import AsyncDeprecatedClient  # noqa: E402

            self._deprecated = AsyncDeprecatedClient(client_wrapper=self._client_wrapper)
        return self._deprecated
