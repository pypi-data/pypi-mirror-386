# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .cloud_jira_data_source_v_2_api_version import CloudJiraDataSourceV2ApiVersion


class CloudJiraDataSourceV2(UncheckedBaseModel):
    """
    Cloud Jira Data Source integrating JiraReaderV2.
    """

    supports_access_control: typing.Optional[bool] = None
    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    The email address to use for authentication.
    """

    api_token: typing.Optional[str] = pydantic.Field(default=None)
    """
    The API Access Token used for Basic, PAT and OAuth2 authentication.
    """

    server_url: str = pydantic.Field()
    """
    The server url for Jira Cloud.
    """

    cloud_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The cloud ID, used in case of OAuth2.
    """

    authentication_mechanism: str = pydantic.Field()
    """
    Type of Authentication for connecting to Jira APIs.
    """

    api_version: typing.Optional[CloudJiraDataSourceV2ApiVersion] = pydantic.Field(default=None)
    """
    Jira REST API version to use (2 or 3). 3 supports Atlassian Document Format (ADF).
    """

    query: str = pydantic.Field()
    """
    JQL (Jira Query Language) query to search.
    """

    fields: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    List of fields to retrieve from Jira. If None, retrieves all fields.
    """

    expand: typing.Optional[str] = pydantic.Field(default=None)
    """
    Fields to expand in the response.
    """

    requests_per_minute: typing.Optional[int] = pydantic.Field(default=None)
    """
    Rate limit for Jira API requests per minute.
    """

    get_permissions: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to fetch project role permissions and issue-level security
    """

    class_name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
