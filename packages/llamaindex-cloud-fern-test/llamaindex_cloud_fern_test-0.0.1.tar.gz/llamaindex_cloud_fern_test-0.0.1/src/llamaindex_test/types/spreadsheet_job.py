# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .extracted_table_summary import ExtractedTableSummary
from .spreadsheet_parsing_config import SpreadsheetParsingConfig
from .status_enum import StatusEnum


class SpreadsheetJob(UncheckedBaseModel):
    """
    A spreadsheet parsing job
    """

    id: str = pydantic.Field()
    """
    The ID of the job
    """

    user_id: str = pydantic.Field()
    """
    The ID of the user
    """

    project_id: str = pydantic.Field()
    """
    The ID of the project
    """

    file_id: str = pydantic.Field()
    """
    The ID of the file to parse
    """

    config: SpreadsheetParsingConfig = pydantic.Field()
    """
    Configuration for the parsing job
    """

    status: StatusEnum = pydantic.Field()
    """
    The status of the parsing job
    """

    created_at: str = pydantic.Field()
    """
    When the job was created
    """

    updated_at: str = pydantic.Field()
    """
    When the job was last updated
    """

    success: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the job completed successfully
    """

    tables: typing.Optional[typing.List[ExtractedTableSummary]] = pydantic.Field(default=None)
    """
    All extracted tables (populated when job is complete)
    """

    errors: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Any errors encountered
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
