# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .user_organization_role import UserOrganizationRole


class UserOrganization(UncheckedBaseModel):
    """
    Schema for a user's membership to an organization.
    """

    id: str = pydantic.Field()
    """
    Unique identifier
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Creation datetime
    """

    updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Update datetime
    """

    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user's email address.
    """

    user_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user's ID.
    """

    organization_id: str = pydantic.Field()
    """
    The organization's ID.
    """

    pending: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the user's membership is pending account signup.
    """

    invited_by_user_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user ID of the user who added the user to the organization.
    """

    invited_by_user_email: typing.Optional[str] = pydantic.Field(default=None)
    """
    The email address of the user who added the user to the organization.
    """

    roles: typing.List[UserOrganizationRole] = pydantic.Field()
    """
    The roles of the user in the organization.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
