# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from .delete_params import DeleteParams
from .fail_page_mode import FailPageMode
from .parse_job_config_priority import ParseJobConfigPriority
from .parser_languages import ParserLanguages
from .parsing_mode import ParsingMode
from .webhook_configuration import WebhookConfiguration


class JobRecordParameters_DataSourceUpdateDispatcher(UncheckedBaseModel):
    type: typing.Literal["data_source_update_dispatcher"] = "data_source_update_dispatcher"
    should_delete: typing.Optional[bool] = None
    custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    delete_info: typing.Optional[DeleteParams] = None
    pipeline_file_ids: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobRecordParameters_DocumentIngestion(UncheckedBaseModel):
    type: typing.Literal["document_ingestion"] = "document_ingestion"
    custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    resource_info: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    should_delete: typing.Optional[bool] = None
    document_ids: typing.Optional[typing.List[str]] = None
    pipeline_file_id: typing.Optional[str] = None
    delete_info: typing.Optional[DeleteParams] = None
    is_new_file: typing.Optional[bool] = None
    page_count: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobRecordParameters_LegacyParse(UncheckedBaseModel):
    type: typing.Literal["legacy_parse"] = "legacy_parse"
    custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    resource_info: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    user_id: typing_extensions.Annotated[str, FieldMetadata(alias="userId")]
    file_name: typing_extensions.Annotated[str, FieldMetadata(alias="fileName")]
    original_file_name: typing_extensions.Annotated[str, FieldMetadata(alias="originalFileName")]
    file_key: typing_extensions.Annotated[str, FieldMetadata(alias="fileKey")]
    input_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inputUrl")] = None
    http_proxy: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="httpProxy")] = None
    fast_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="fastMode")] = None
    lang: str
    template: typing.Optional[str] = None
    pipeline_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pipelineId")] = None
    output_bucket: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="outputBucket")] = None
    file_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="fileId")] = None
    full_file_path: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="fullFilePath")] = None
    from_l_lama_cloud: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="fromLLamaCloud")] = None
    skip_diagonal_text: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="skipDiagonalText")] = (
        None
    )
    preserve_layout_alignment_across_pages: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="preserveLayoutAlignmentAcrossPages")
    ] = None
    preserve_very_small_text: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="preserveVerySmallText")
    ] = None
    invalidate_cache: typing_extensions.Annotated[bool, FieldMetadata(alias="invalidateCache")]
    output_pdf_of_document: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="outputPDFOfDocument")
    ] = None
    outlined_table_extraction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="outlinedTableExtraction")
    ] = None
    merge_tables_across_pages_in_markdown: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="mergeTablesAcrossPagesInMarkdown")
    ] = None
    save_images: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="saveImages")] = None
    gpt_4_o: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="gpt4o")] = None
    open_aiapi_key: typing_extensions.Annotated[str, FieldMetadata(alias="openAIAPIKey")]
    do_not_unroll_columns: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="doNotUnrollColumns")
    ] = None
    spread_sheet_extract_sub_tables: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="spreadSheetExtractSubTables")
    ] = None
    spread_sheet_force_formula_computation: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="spreadSheetForceFormulaComputation")
    ] = None
    extract_layout: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="extractLayout")] = None
    high_res_ocr: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="highResOcr")] = None
    html_make_all_elements_visible: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="htmlMakeAllElementsVisible")
    ] = None
    html_remove_fixed_elements: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="htmlRemoveFixedElements")
    ] = None
    html_remove_navigation_elements: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="htmlRemoveNavigationElements")
    ] = None
    guess_xlsx_sheet_name: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="guessXLSXSheetName")
    ] = None
    do_not_cache: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="doNotCache")] = None
    page_separator: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageSeparator")] = None
    bounding_box: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="boundingBox")] = None
    bbox_top: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="bboxTop")] = None
    bbox_right: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="bboxRight")] = None
    bbox_bottom: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="bboxBottom")] = None
    bbox_left: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="bboxLeft")] = None
    disable_reconstruction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="disableReconstruction")
    ] = None
    target_pages: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="targetPages")] = None
    multimodal_pipeline: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="multimodalPipeline")
    ] = None
    multimodal_model: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="multimodalModel")] = None
    model: typing.Optional[str] = None
    vendor_api_key: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="vendorAPIKey")] = None
    page_prefix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pagePrefix")] = None
    page_suffix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageSuffix")] = None
    webhook_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="webhookUrl")] = None
    preset: typing.Optional[str] = None
    take_screenshot: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="takeScreenshot")] = None
    is_formatting_instruction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="isFormattingInstruction")
    ] = None
    premium_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="premiumMode")] = None
    continuous_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="continuousMode")] = None
    disable_ocr: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="disableOcr")] = None
    disable_image_extraction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="disableImageExtraction")
    ] = None
    annotate_links: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="annotateLinks")] = None
    adaptive_long_table: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="adaptiveLongTable")
    ] = None
    compact_markdown_table: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="compactMarkdownTable")
    ] = None
    input_s_3_path: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inputS3Path")] = None
    input_s_3_region: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inputS3Region")] = None
    output_s_3_path_prefix: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="outputS3PathPrefix")
    ] = None
    output_s_3_region: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="outputS3Region")] = None
    project_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="projectId")] = None
    azure_open_ai_deployment_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="azureOpenAiDeploymentName")
    ] = None
    azure_open_ai_endpoint: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="azureOpenAiEndpoint")
    ] = None
    azure_open_ai_api_version: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="azureOpenAiApiVersion")
    ] = None
    azure_open_ai_key: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="azureOpenAiKey")] = None
    auto_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="autoMode")] = None
    auto_mode_trigger_on_table_in_page: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="autoModeTriggerOnTableInPage")
    ] = None
    auto_mode_trigger_on_image_in_page: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="autoModeTriggerOnImageInPage")
    ] = None
    auto_mode_trigger_on_regexp_in_page: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="autoModeTriggerOnRegexpInPage")
    ] = None
    auto_mode_trigger_on_text_in_page: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="autoModeTriggerOnTextInPage")
    ] = None
    auto_mode_configuration_json: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="autoModeConfigurationJSON")
    ] = None
    structured_output: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="structuredOutput")] = (
        None
    )
    structured_output_json_schema: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="structuredOutputJSONSchema")
    ] = None
    structured_output_json_schema_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="structuredOutputJSONSchemaName")
    ] = None
    max_pages: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="maxPages")] = None
    extract_charts: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="extractCharts")] = None
    formatting_instruction: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="formattingInstruction")
    ] = None
    complemental_formatting_instruction: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="complementalFormattingInstruction")
    ] = None
    content_guideline_instruction: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="contentGuidelineInstruction")
    ] = None
    job_timeout_in_seconds: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="jobTimeoutInSeconds")
    ] = None
    job_timeout_extra_time_per_page_in_seconds: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="jobTimeoutExtraTimePerPageInSeconds")
    ] = None
    strict_mode_image_extraction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="strictModeImageExtraction")
    ] = None
    strict_mode_image_ocr: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="strictModeImageOCR")
    ] = None
    strict_mode_reconstruction: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="strictModeReconstruction")
    ] = None
    strict_mode_buggy_font: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="strictModeBuggyFont")
    ] = None
    ignore_document_elements_for_layout_detection: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="ignoreDocumentElementsForLayoutDetection")
    ] = None
    output_tables_as_html: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="outputTablesAsHTML")
    ] = None
    remove_hidden_text: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="removeHiddenText")] = (
        None
    )
    parse_mode: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="parseMode")] = None
    system_prompt: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="systemPrompt")] = None
    system_prompt_append: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="systemPromptAppend")
    ] = None
    user_prompt: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="userPrompt")] = None
    page_header_prefix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageHeaderPrefix")] = (
        None
    )
    page_header_suffix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageHeaderSuffix")] = (
        None
    )
    page_footer_prefix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageFooterPrefix")] = (
        None
    )
    page_footer_suffix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageFooterSuffix")] = (
        None
    )
    hide_headers: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="hideHeaders")] = None
    hide_footers: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="hideFooters")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobRecordParameters_LlamaParseTransform(UncheckedBaseModel):
    type: typing.Literal["llama_parse_transform"] = "llama_parse_transform"
    custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    resource_info: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    file_output: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobRecordParameters_LoadFiles(UncheckedBaseModel):
    type: typing.Literal["load_files"] = "load_files"
    file_ids: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobRecordParameters_Parse(UncheckedBaseModel):
    type: typing.Literal["parse"] = "parse"
    webhook_configurations: typing.Optional[typing.List[WebhookConfiguration]] = None
    priority: typing.Optional[ParseJobConfigPriority] = None
    custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    resource_info: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    languages: typing.Optional[typing.List[ParserLanguages]] = None
    parsing_instruction: typing.Optional[str] = None
    disable_ocr: typing.Optional[bool] = None
    annotate_links: typing.Optional[bool] = None
    adaptive_long_table: typing.Optional[bool] = None
    compact_markdown_table: typing.Optional[bool] = None
    disable_reconstruction: typing.Optional[bool] = None
    disable_image_extraction: typing.Optional[bool] = None
    invalidate_cache: typing.Optional[bool] = None
    outlined_table_extraction: typing.Optional[bool] = None
    aggressive_table_extraction: typing.Optional[bool] = None
    merge_tables_across_pages_in_markdown: typing.Optional[bool] = None
    output_pdf_of_document: typing.Optional[bool] = None
    do_not_cache: typing.Optional[bool] = None
    fast_mode: typing.Optional[bool] = None
    skip_diagonal_text: typing.Optional[bool] = None
    preserve_layout_alignment_across_pages: typing.Optional[bool] = None
    preserve_very_small_text: typing.Optional[bool] = None
    gpt_4_o_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="gpt4o_mode")] = None
    gpt_4_o_api_key: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="gpt4o_api_key")] = None
    do_not_unroll_columns: typing.Optional[bool] = None
    extract_layout: typing.Optional[bool] = None
    high_res_ocr: typing.Optional[bool] = None
    html_make_all_elements_visible: typing.Optional[bool] = None
    layout_aware: typing.Optional[bool] = None
    specialized_chart_parsing_agentic: typing.Optional[bool] = None
    specialized_chart_parsing_plus: typing.Optional[bool] = None
    specialized_chart_parsing_efficient: typing.Optional[bool] = None
    specialized_image_parsing: typing.Optional[bool] = None
    precise_bounding_box: typing.Optional[bool] = None
    html_remove_navigation_elements: typing.Optional[bool] = None
    html_remove_fixed_elements: typing.Optional[bool] = None
    guess_xlsx_sheet_name: typing.Optional[bool] = None
    page_separator: typing.Optional[str] = None
    bounding_box: typing.Optional[str] = None
    bbox_top: typing.Optional[float] = None
    bbox_right: typing.Optional[float] = None
    bbox_bottom: typing.Optional[float] = None
    bbox_left: typing.Optional[float] = None
    target_pages: typing.Optional[str] = None
    use_vendor_multimodal_model: typing.Optional[bool] = None
    vendor_multimodal_model_name: typing.Optional[str] = None
    model: typing.Optional[str] = None
    vendor_multimodal_api_key: typing.Optional[str] = None
    page_prefix: typing.Optional[str] = None
    page_suffix: typing.Optional[str] = None
    webhook_url: typing.Optional[str] = None
    preset: typing.Optional[str] = None
    take_screenshot: typing.Optional[bool] = None
    is_formatting_instruction: typing.Optional[bool] = None
    premium_mode: typing.Optional[bool] = None
    continuous_mode: typing.Optional[bool] = None
    input_s_3_path: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="input_s3_path")] = None
    input_s_3_region: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="input_s3_region")] = None
    output_s_3_path_prefix: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="output_s3_path_prefix")
    ] = None
    output_s_3_region: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="output_s3_region")] = None
    project_id: typing.Optional[str] = None
    azure_openai_deployment_name: typing.Optional[str] = None
    azure_openai_endpoint: typing.Optional[str] = None
    azure_openai_api_version: typing.Optional[str] = None
    azure_openai_key: typing.Optional[str] = None
    input_url: typing.Optional[str] = None
    http_proxy: typing.Optional[str] = None
    auto_mode: typing.Optional[bool] = None
    auto_mode_trigger_on_regexp_in_page: typing.Optional[str] = None
    auto_mode_trigger_on_text_in_page: typing.Optional[str] = None
    auto_mode_trigger_on_table_in_page: typing.Optional[bool] = None
    auto_mode_trigger_on_image_in_page: typing.Optional[bool] = None
    auto_mode_configuration_json: typing.Optional[str] = None
    structured_output: typing.Optional[bool] = None
    structured_output_json_schema: typing.Optional[str] = None
    structured_output_json_schema_name: typing.Optional[str] = None
    max_pages: typing.Optional[int] = None
    max_pages_enforced: typing.Optional[int] = None
    extract_charts: typing.Optional[bool] = None
    formatting_instruction: typing.Optional[str] = None
    complemental_formatting_instruction: typing.Optional[str] = None
    content_guideline_instruction: typing.Optional[str] = None
    spreadsheet_extract_sub_tables: typing.Optional[bool] = None
    spreadsheet_force_formula_computation: typing.Optional[bool] = None
    inline_images_in_markdown: typing.Optional[bool] = None
    job_timeout_in_seconds: typing.Optional[float] = None
    job_timeout_extra_time_per_page_in_seconds: typing.Optional[float] = None
    strict_mode_image_extraction: typing.Optional[bool] = None
    strict_mode_image_ocr: typing.Optional[bool] = None
    strict_mode_reconstruction: typing.Optional[bool] = None
    strict_mode_buggy_font: typing.Optional[bool] = None
    save_images: typing.Optional[bool] = None
    hide_headers: typing.Optional[bool] = None
    hide_footers: typing.Optional[bool] = None
    page_header_prefix: typing.Optional[str] = None
    page_header_suffix: typing.Optional[str] = None
    page_footer_prefix: typing.Optional[str] = None
    page_footer_suffix: typing.Optional[str] = None
    remove_hidden_text: typing.Optional[bool] = None
    ignore_document_elements_for_layout_detection: typing.Optional[bool] = None
    output_tables_as_html: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="output_tables_as_HTML")
    ] = None
    internal_is_screenshot_job: typing.Optional[bool] = None
    parse_mode: typing.Optional[ParsingMode] = None
    system_prompt: typing.Optional[str] = None
    system_prompt_append: typing.Optional[str] = None
    user_prompt: typing.Optional[str] = None
    page_error_tolerance: typing.Optional[float] = None
    replace_failed_page_mode: typing.Optional[FailPageMode] = None
    replace_failed_page_with_error_message_prefix: typing.Optional[str] = None
    replace_failed_page_with_error_message_suffix: typing.Optional[str] = None
    markdown_table_multiline_header_separator: typing.Optional[str] = None
    file_name: str
    original_file_name: str
    file_key: str
    lang: str
    output_bucket: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="outputBucket")] = None
    file_id: typing.Optional[str] = None
    pipeline_id: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobRecordParameters_PipelineFileUpdater(UncheckedBaseModel):
    type: typing.Literal["pipeline_file_updater"] = "pipeline_file_updater"
    custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    resource_info: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    should_delete: typing.Optional[bool] = None
    should_parse: typing.Optional[bool] = None
    delete_info: typing.Optional[DeleteParams] = None
    is_new_file: typing.Optional[bool] = None
    data_source_project_file_changed: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobRecordParameters_PipelineManagedIngestion(UncheckedBaseModel):
    type: typing.Literal["pipeline_managed_ingestion"] = "pipeline_managed_ingestion"
    should_delete: typing.Optional[bool] = None
    delete_info: typing.Optional[DeleteParams] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


JobRecordParameters = typing_extensions.Annotated[
    typing.Union[
        JobRecordParameters_DataSourceUpdateDispatcher,
        JobRecordParameters_DocumentIngestion,
        JobRecordParameters_LegacyParse,
        JobRecordParameters_LlamaParseTransform,
        JobRecordParameters_LoadFiles,
        JobRecordParameters_Parse,
        JobRecordParameters_PipelineFileUpdater,
        JobRecordParameters_PipelineManagedIngestion,
    ],
    UnionMetadata(discriminant="type"),
]
