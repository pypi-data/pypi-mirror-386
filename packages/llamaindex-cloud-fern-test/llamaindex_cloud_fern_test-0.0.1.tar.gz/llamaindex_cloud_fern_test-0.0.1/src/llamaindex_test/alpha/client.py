# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.parsing_job import ParsingJob
from .raw_client import AsyncRawAlphaClient, RawAlphaClient


class AlphaClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAlphaClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAlphaClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAlphaClient
        """
        return self._raw_client

    def upload_file_v_2(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ParsingJob:
        """
        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ParsingJob
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.alpha.upload_file_v_2(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.upload_file_v_2(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data


class AsyncAlphaClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAlphaClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAlphaClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAlphaClient
        """
        return self._raw_client

    async def upload_file_v_2(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ParsingJob:
        """
        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ParsingJob
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.alpha.upload_file_v_2(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upload_file_v_2(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data
