# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.base_connection_validation import BaseConnectionValidation
from ..types.configurable_data_sink_names import ConfigurableDataSinkNames
from ..types.configurable_data_source_names import ConfigurableDataSourceNames
from ..types.data_sink_create_component import DataSinkCreateComponent
from ..types.data_source_create_component import DataSourceCreateComponent
from ..types.data_source_create_custom_metadata_value import DataSourceCreateCustomMetadataValue
from .raw_client import AsyncRawValidationClient, RawValidationClient
from .types.validation_embedding_request_body import ValidationEmbeddingRequestBody

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ValidationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawValidationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawValidationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawValidationClient
        """
        return self._raw_client

    def embedding(
        self,
        *,
        request: ValidationEmbeddingRequestBody,
        pipeline_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseConnectionValidation:
        """
        Validate an embedding connection.

        Args:
            embedding_config: The embedding configuration to validate.
            pipeline_id: If provided, the embedding connection will be validated for the pipeline.
            user: The user to validate the embedding connection for.
            db: The database session.

        Returns:
            A BaseConnectionValidation object indicating the result of the validation.

        Parameters
        ----------
        request : ValidationEmbeddingRequestBody

        pipeline_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseConnectionValidation
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud
        from llamaindex_test.validation import (
            ValidationEmbeddingRequestBody_AzureEmbedding,
        )

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.validation.embedding(
            pipeline_id="pipeline_id",
            request=ValidationEmbeddingRequestBody_AzureEmbedding(),
        )
        """
        _response = self._raw_client.embedding(
            request=request, pipeline_id=pipeline_id, request_options=request_options
        )
        return _response.data

    def data_source(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        existing_data_source_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseConnectionValidation:
        """
        Validate a data source connection.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        existing_data_source_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseConnectionValidation
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.validation.data_source(
            existing_data_source_id="existing_data_source_id",
            name="name",
            source_type="S3",
            component={"key": "value"},
        )
        """
        _response = self._raw_client.data_source(
            name=name,
            source_type=source_type,
            component=component,
            existing_data_source_id=existing_data_source_id,
            custom_metadata=custom_metadata,
            request_options=request_options,
        )
        return _response.data

    def data_sink(
        self,
        *,
        name: str,
        sink_type: ConfigurableDataSinkNames,
        component: DataSinkCreateComponent,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseConnectionValidation:
        """
        Validate a data sink connection.

        Parameters
        ----------
        name : str
            The name of the data sink.

        sink_type : ConfigurableDataSinkNames

        component : DataSinkCreateComponent
            Component that implements the data sink

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseConnectionValidation
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.validation.data_sink(
            name="name",
            sink_type="PINECONE",
            component={"key": "value"},
        )
        """
        _response = self._raw_client.data_sink(
            name=name, sink_type=sink_type, component=component, request_options=request_options
        )
        return _response.data


class AsyncValidationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawValidationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawValidationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawValidationClient
        """
        return self._raw_client

    async def embedding(
        self,
        *,
        request: ValidationEmbeddingRequestBody,
        pipeline_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseConnectionValidation:
        """
        Validate an embedding connection.

        Args:
            embedding_config: The embedding configuration to validate.
            pipeline_id: If provided, the embedding connection will be validated for the pipeline.
            user: The user to validate the embedding connection for.
            db: The database session.

        Returns:
            A BaseConnectionValidation object indicating the result of the validation.

        Parameters
        ----------
        request : ValidationEmbeddingRequestBody

        pipeline_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseConnectionValidation
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud
        from llamaindex_test.validation import (
            ValidationEmbeddingRequestBody_AzureEmbedding,
        )

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.validation.embedding(
                pipeline_id="pipeline_id",
                request=ValidationEmbeddingRequestBody_AzureEmbedding(),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.embedding(
            request=request, pipeline_id=pipeline_id, request_options=request_options
        )
        return _response.data

    async def data_source(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        existing_data_source_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseConnectionValidation:
        """
        Validate a data source connection.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        existing_data_source_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseConnectionValidation
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.validation.data_source(
                existing_data_source_id="existing_data_source_id",
                name="name",
                source_type="S3",
                component={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.data_source(
            name=name,
            source_type=source_type,
            component=component,
            existing_data_source_id=existing_data_source_id,
            custom_metadata=custom_metadata,
            request_options=request_options,
        )
        return _response.data

    async def data_sink(
        self,
        *,
        name: str,
        sink_type: ConfigurableDataSinkNames,
        component: DataSinkCreateComponent,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseConnectionValidation:
        """
        Validate a data sink connection.

        Parameters
        ----------
        name : str
            The name of the data sink.

        sink_type : ConfigurableDataSinkNames

        component : DataSinkCreateComponent
            Component that implements the data sink

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseConnectionValidation
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.validation.data_sink(
                name="name",
                sink_type="PINECONE",
                component={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.data_sink(
            name=name, sink_type=sink_type, component=component, request_options=request_options
        )
        return _response.data
