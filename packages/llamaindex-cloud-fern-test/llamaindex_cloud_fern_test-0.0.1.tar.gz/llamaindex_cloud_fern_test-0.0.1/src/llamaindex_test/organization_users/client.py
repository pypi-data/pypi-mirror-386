# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.user_organization import UserOrganization
from ..types.user_organization_create import UserOrganizationCreate
from ..types.user_organization_delete import UserOrganizationDelete
from .raw_client import AsyncRawOrganizationUsersClient, RawOrganizationUsersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class OrganizationUsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawOrganizationUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawOrganizationUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawOrganizationUsersClient
        """
        return self._raw_client

    def list(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[UserOrganization]:
        """
        Get all users in an organization.

        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserOrganization]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organization_users.list(
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list(organization_id, request_options=request_options)
        return _response.data

    def add(
        self,
        organization_id: str,
        *,
        request: typing.Sequence[UserOrganizationCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserOrganization]:
        """
        Add a user to an organization.

        Parameters
        ----------
        organization_id : str

        request : typing.Sequence[UserOrganizationCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserOrganization]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud, UserOrganizationCreate

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organization_users.add(
            organization_id="organization_id",
            request=[UserOrganizationCreate()],
        )
        """
        _response = self._raw_client.add(organization_id, request=request, request_options=request_options)
        return _response.data

    def remove(
        self,
        organization_id: str,
        member_user_id: str,
        *,
        request: typing.Optional[typing.Sequence[str]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Remove users from an organization.

        Parameters
        ----------
        organization_id : str

        member_user_id : str

        request : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organization_users.remove(
            organization_id="organization_id",
            member_user_id="member_user_id",
            request=["string"],
        )
        """
        _response = self._raw_client.remove(
            organization_id, member_user_id, request=request, request_options=request_options
        )
        return _response.data

    def batch_remove(
        self,
        organization_id: str,
        *,
        request: typing.Sequence[UserOrganizationDelete],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Remove a batch of users from an organization.

        Parameters
        ----------
        organization_id : str

        request : typing.Sequence[UserOrganizationDelete]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud, UserOrganizationDelete

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.organization_users.batch_remove(
            organization_id="organization_id",
            request=[UserOrganizationDelete()],
        )
        """
        _response = self._raw_client.batch_remove(organization_id, request=request, request_options=request_options)
        return _response.data


class AsyncOrganizationUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawOrganizationUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawOrganizationUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawOrganizationUsersClient
        """
        return self._raw_client

    async def list(
        self, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[UserOrganization]:
        """
        Get all users in an organization.

        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserOrganization]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organization_users.list(
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(organization_id, request_options=request_options)
        return _response.data

    async def add(
        self,
        organization_id: str,
        *,
        request: typing.Sequence[UserOrganizationCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserOrganization]:
        """
        Add a user to an organization.

        Parameters
        ----------
        organization_id : str

        request : typing.Sequence[UserOrganizationCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserOrganization]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud, UserOrganizationCreate

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organization_users.add(
                organization_id="organization_id",
                request=[UserOrganizationCreate()],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add(organization_id, request=request, request_options=request_options)
        return _response.data

    async def remove(
        self,
        organization_id: str,
        member_user_id: str,
        *,
        request: typing.Optional[typing.Sequence[str]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Remove users from an organization.

        Parameters
        ----------
        organization_id : str

        member_user_id : str

        request : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organization_users.remove(
                organization_id="organization_id",
                member_user_id="member_user_id",
                request=["string"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove(
            organization_id, member_user_id, request=request, request_options=request_options
        )
        return _response.data

    async def batch_remove(
        self,
        organization_id: str,
        *,
        request: typing.Sequence[UserOrganizationDelete],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Remove a batch of users from an organization.

        Parameters
        ----------
        organization_id : str

        request : typing.Sequence[UserOrganizationDelete]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud, UserOrganizationDelete

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organization_users.batch_remove(
                organization_id="organization_id",
                request=[UserOrganizationDelete()],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.batch_remove(
            organization_id, request=request, request_options=request_options
        )
        return _response.data
