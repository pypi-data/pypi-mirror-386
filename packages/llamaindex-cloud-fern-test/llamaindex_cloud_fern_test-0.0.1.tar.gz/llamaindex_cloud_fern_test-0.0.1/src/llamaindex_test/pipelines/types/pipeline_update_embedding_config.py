# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from ...types.azure_open_ai_embedding import AzureOpenAiEmbedding
from ...types.bedrock_embedding import BedrockEmbedding
from ...types.cohere_embedding import CohereEmbedding
from ...types.gemini_embedding import GeminiEmbedding
from ...types.hugging_face_inference_api_embedding import HuggingFaceInferenceApiEmbedding
from ...types.open_ai_embedding import OpenAiEmbedding
from ...types.vertex_text_embedding import VertexTextEmbedding


class PipelineUpdateEmbeddingConfig_AzureEmbedding(UncheckedBaseModel):
    type: typing.Literal["AZURE_EMBEDDING"] = "AZURE_EMBEDDING"
    component: typing.Optional[AzureOpenAiEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineUpdateEmbeddingConfig_BedrockEmbedding(UncheckedBaseModel):
    type: typing.Literal["BEDROCK_EMBEDDING"] = "BEDROCK_EMBEDDING"
    component: typing.Optional[BedrockEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineUpdateEmbeddingConfig_CohereEmbedding(UncheckedBaseModel):
    type: typing.Literal["COHERE_EMBEDDING"] = "COHERE_EMBEDDING"
    component: typing.Optional[CohereEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineUpdateEmbeddingConfig_GeminiEmbedding(UncheckedBaseModel):
    type: typing.Literal["GEMINI_EMBEDDING"] = "GEMINI_EMBEDDING"
    component: typing.Optional[GeminiEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineUpdateEmbeddingConfig_HuggingfaceApiEmbedding(UncheckedBaseModel):
    type: typing.Literal["HUGGINGFACE_API_EMBEDDING"] = "HUGGINGFACE_API_EMBEDDING"
    component: typing.Optional[HuggingFaceInferenceApiEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineUpdateEmbeddingConfig_OpenaiEmbedding(UncheckedBaseModel):
    type: typing.Literal["OPENAI_EMBEDDING"] = "OPENAI_EMBEDDING"
    component: typing.Optional[OpenAiEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineUpdateEmbeddingConfig_VertexaiEmbedding(UncheckedBaseModel):
    type: typing.Literal["VERTEXAI_EMBEDDING"] = "VERTEXAI_EMBEDDING"
    component: typing.Optional[VertexTextEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


PipelineUpdateEmbeddingConfig = typing_extensions.Annotated[
    typing.Union[
        PipelineUpdateEmbeddingConfig_AzureEmbedding,
        PipelineUpdateEmbeddingConfig_BedrockEmbedding,
        PipelineUpdateEmbeddingConfig_CohereEmbedding,
        PipelineUpdateEmbeddingConfig_GeminiEmbedding,
        PipelineUpdateEmbeddingConfig_HuggingfaceApiEmbedding,
        PipelineUpdateEmbeddingConfig_OpenaiEmbedding,
        PipelineUpdateEmbeddingConfig_VertexaiEmbedding,
    ],
    UnionMetadata(discriminant="type"),
]
