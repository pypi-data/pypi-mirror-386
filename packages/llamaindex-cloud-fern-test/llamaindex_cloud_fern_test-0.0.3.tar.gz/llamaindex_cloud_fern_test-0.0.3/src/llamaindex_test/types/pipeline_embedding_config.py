# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from .azure_open_ai_embedding import AzureOpenAiEmbedding
from .bedrock_embedding import BedrockEmbedding
from .cohere_embedding import CohereEmbedding
from .gemini_embedding import GeminiEmbedding
from .hugging_face_inference_api_embedding import HuggingFaceInferenceApiEmbedding
from .managed_open_ai_embedding import ManagedOpenAiEmbedding
from .open_ai_embedding import OpenAiEmbedding
from .vertex_text_embedding import VertexTextEmbedding


class PipelineEmbeddingConfig_AzureEmbedding(UncheckedBaseModel):
    type: typing.Literal["AZURE_EMBEDDING"] = "AZURE_EMBEDDING"
    component: typing.Optional[AzureOpenAiEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineEmbeddingConfig_BedrockEmbedding(UncheckedBaseModel):
    type: typing.Literal["BEDROCK_EMBEDDING"] = "BEDROCK_EMBEDDING"
    component: typing.Optional[BedrockEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineEmbeddingConfig_CohereEmbedding(UncheckedBaseModel):
    type: typing.Literal["COHERE_EMBEDDING"] = "COHERE_EMBEDDING"
    component: typing.Optional[CohereEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineEmbeddingConfig_GeminiEmbedding(UncheckedBaseModel):
    type: typing.Literal["GEMINI_EMBEDDING"] = "GEMINI_EMBEDDING"
    component: typing.Optional[GeminiEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineEmbeddingConfig_HuggingfaceApiEmbedding(UncheckedBaseModel):
    type: typing.Literal["HUGGINGFACE_API_EMBEDDING"] = "HUGGINGFACE_API_EMBEDDING"
    component: typing.Optional[HuggingFaceInferenceApiEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineEmbeddingConfig_ManagedOpenaiEmbedding(UncheckedBaseModel):
    type: typing.Literal["MANAGED_OPENAI_EMBEDDING"] = "MANAGED_OPENAI_EMBEDDING"
    component: typing.Optional[ManagedOpenAiEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineEmbeddingConfig_OpenaiEmbedding(UncheckedBaseModel):
    type: typing.Literal["OPENAI_EMBEDDING"] = "OPENAI_EMBEDDING"
    component: typing.Optional[OpenAiEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PipelineEmbeddingConfig_VertexaiEmbedding(UncheckedBaseModel):
    type: typing.Literal["VERTEXAI_EMBEDDING"] = "VERTEXAI_EMBEDDING"
    component: typing.Optional[VertexTextEmbedding] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


PipelineEmbeddingConfig = typing_extensions.Annotated[
    typing.Union[
        PipelineEmbeddingConfig_AzureEmbedding,
        PipelineEmbeddingConfig_BedrockEmbedding,
        PipelineEmbeddingConfig_CohereEmbedding,
        PipelineEmbeddingConfig_GeminiEmbedding,
        PipelineEmbeddingConfig_HuggingfaceApiEmbedding,
        PipelineEmbeddingConfig_ManagedOpenaiEmbedding,
        PipelineEmbeddingConfig_OpenaiEmbedding,
        PipelineEmbeddingConfig_VertexaiEmbedding,
    ],
    UnionMetadata(discriminant="type"),
]
