# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel


class GeminiEmbedding(UncheckedBaseModel):
    model_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The modelId of the Gemini model to use.
    """

    embed_batch_size: typing.Optional[int] = pydantic.Field(default=None)
    """
    The batch size for embedding calls.
    """

    num_workers: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of workers to use for async embedding calls.
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Title is only applicable for retrieval_document tasks, and is used to represent a document title. For other tasks, title is invalid.
    """

    task_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    The task for embedding model.
    """

    api_key: typing.Optional[str] = pydantic.Field(default=None)
    """
    API key to access the model. Defaults to None.
    """

    api_base: typing.Optional[str] = pydantic.Field(default=None)
    """
    API base to access the model. Defaults to None.
    """

    transport: typing.Optional[str] = pydantic.Field(default=None)
    """
    Transport to access the model. Defaults to None.
    """

    class_name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
