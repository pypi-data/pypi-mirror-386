# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel
from .data_sink_create import DataSinkCreate
from .llama_parse_parameters import LlamaParseParameters
from .pipeline_create_embedding_config import PipelineCreateEmbeddingConfig
from .pipeline_create_transform_config import PipelineCreateTransformConfig
from .pipeline_metadata_config import PipelineMetadataConfig
from .pipeline_type import PipelineType
from .preset_retrieval_params import PresetRetrievalParams
from .sparse_model_config import SparseModelConfig


class PipelineCreate(UncheckedBaseModel):
    """
    Schema for creating a pipeline.
    """

    embedding_config: typing.Optional[PipelineCreateEmbeddingConfig] = None
    transform_config: typing.Optional[PipelineCreateTransformConfig] = pydantic.Field(default=None)
    """
    Configuration for the transformation.
    """

    sparse_model_config: typing.Optional[SparseModelConfig] = pydantic.Field(default=None)
    """
    Configuration for the sparse model used in hybrid search.
    """

    data_sink_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID.
    """

    embedding_model_config_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID.
    """

    data_sink: typing.Optional[DataSinkCreate] = pydantic.Field(default=None)
    """
    Data sink. When provided instead of data_sink_id, the data sink will be created.
    """

    preset_retrieval_parameters: typing.Optional[PresetRetrievalParams] = pydantic.Field(default=None)
    """
    Preset retrieval parameters for the pipeline.
    """

    llama_parse_parameters: typing.Optional[LlamaParseParameters] = None
    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    Status of the pipeline deployment.
    """

    metadata_config: typing.Optional[PipelineMetadataConfig] = pydantic.Field(default=None)
    """
    Metadata configuration for the pipeline.
    """

    name: str
    pipeline_type: typing.Optional[PipelineType] = pydantic.Field(default=None)
    """
    Type of pipeline. Either PLAYGROUND or MANAGED.
    """

    managed_pipeline_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the ManagedPipeline this playground pipeline is linked to.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .metadata_filters import MetadataFilters  # noqa: E402, F401, I001

update_forward_refs(PipelineCreate)
