# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.base_connection_validation import BaseConnectionValidation
from ..types.configurable_data_sink_names import ConfigurableDataSinkNames
from ..types.configurable_data_source_names import ConfigurableDataSourceNames
from ..types.data_sink_create_component import DataSinkCreateComponent
from ..types.data_source_create_component import DataSourceCreateComponent
from ..types.data_source_create_custom_metadata_value import DataSourceCreateCustomMetadataValue
from ..types.http_validation_error import HttpValidationError
from .types.validation_embedding_request_body import ValidationEmbeddingRequestBody

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawValidationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def embedding(
        self,
        *,
        request: ValidationEmbeddingRequestBody,
        pipeline_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BaseConnectionValidation]:
        """
        Validate an embedding connection.

        Args:
            embedding_config: The embedding configuration to validate.
            pipeline_id: If provided, the embedding connection will be validated for the pipeline.
            user: The user to validate the embedding connection for.
            db: The database session.

        Returns:
            A BaseConnectionValidation object indicating the result of the validation.

        Parameters
        ----------
        request : ValidationEmbeddingRequestBody

        pipeline_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BaseConnectionValidation]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/validate-integrations/validate-embedding-connection",
            method="POST",
            params={
                "pipeline_id": pipeline_id,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=ValidationEmbeddingRequestBody, direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BaseConnectionValidation,
                    construct_type(
                        type_=BaseConnectionValidation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def data_source(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        existing_data_source_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BaseConnectionValidation]:
        """
        Validate a data source connection.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        existing_data_source_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BaseConnectionValidation]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/validate-integrations/validate-data-source-connection",
            method="POST",
            params={
                "existing_data_source_id": existing_data_source_id,
            },
            json={
                "name": name,
                "source_type": source_type,
                "custom_metadata": convert_and_respect_annotation_metadata(
                    object_=custom_metadata,
                    annotation=typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]],
                    direction="write",
                ),
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSourceCreateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BaseConnectionValidation,
                    construct_type(
                        type_=BaseConnectionValidation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def data_sink(
        self,
        *,
        name: str,
        sink_type: ConfigurableDataSinkNames,
        component: DataSinkCreateComponent,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BaseConnectionValidation]:
        """
        Validate a data sink connection.

        Parameters
        ----------
        name : str
            The name of the data sink.

        sink_type : ConfigurableDataSinkNames

        component : DataSinkCreateComponent
            Component that implements the data sink

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BaseConnectionValidation]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/validate-integrations/validate-data-sink-connection",
            method="POST",
            json={
                "name": name,
                "sink_type": sink_type,
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSinkCreateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BaseConnectionValidation,
                    construct_type(
                        type_=BaseConnectionValidation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawValidationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def embedding(
        self,
        *,
        request: ValidationEmbeddingRequestBody,
        pipeline_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BaseConnectionValidation]:
        """
        Validate an embedding connection.

        Args:
            embedding_config: The embedding configuration to validate.
            pipeline_id: If provided, the embedding connection will be validated for the pipeline.
            user: The user to validate the embedding connection for.
            db: The database session.

        Returns:
            A BaseConnectionValidation object indicating the result of the validation.

        Parameters
        ----------
        request : ValidationEmbeddingRequestBody

        pipeline_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BaseConnectionValidation]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/validate-integrations/validate-embedding-connection",
            method="POST",
            params={
                "pipeline_id": pipeline_id,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=ValidationEmbeddingRequestBody, direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BaseConnectionValidation,
                    construct_type(
                        type_=BaseConnectionValidation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def data_source(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        existing_data_source_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BaseConnectionValidation]:
        """
        Validate a data source connection.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        existing_data_source_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BaseConnectionValidation]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/validate-integrations/validate-data-source-connection",
            method="POST",
            params={
                "existing_data_source_id": existing_data_source_id,
            },
            json={
                "name": name,
                "source_type": source_type,
                "custom_metadata": convert_and_respect_annotation_metadata(
                    object_=custom_metadata,
                    annotation=typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]],
                    direction="write",
                ),
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSourceCreateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BaseConnectionValidation,
                    construct_type(
                        type_=BaseConnectionValidation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def data_sink(
        self,
        *,
        name: str,
        sink_type: ConfigurableDataSinkNames,
        component: DataSinkCreateComponent,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BaseConnectionValidation]:
        """
        Validate a data sink connection.

        Parameters
        ----------
        name : str
            The name of the data sink.

        sink_type : ConfigurableDataSinkNames

        component : DataSinkCreateComponent
            Component that implements the data sink

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BaseConnectionValidation]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/validate-integrations/validate-data-sink-connection",
            method="POST",
            json={
                "name": name,
                "sink_type": sink_type,
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSinkCreateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BaseConnectionValidation,
                    construct_type(
                        type_=BaseConnectionValidation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
