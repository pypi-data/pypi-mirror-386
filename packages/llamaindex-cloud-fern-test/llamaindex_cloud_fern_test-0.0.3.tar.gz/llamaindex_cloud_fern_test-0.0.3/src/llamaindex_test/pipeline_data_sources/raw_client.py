# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.data_source_sync_request import DataSourceSyncRequest
from ..types.http_validation_error import HttpValidationError
from ..types.managed_ingestion_status_response import ManagedIngestionStatusResponse
from ..types.pipeline import Pipeline
from ..types.pipeline_data_source import PipelineDataSource
from ..types.pipeline_data_source_create import PipelineDataSourceCreate

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawPipelineDataSourcesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, pipeline_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[PipelineDataSource]]:
        """
        Get data sources for a pipeline.

        Parameters
        ----------
        pipeline_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[PipelineDataSource]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[PipelineDataSource],
                    construct_type(
                        type_=typing.List[PipelineDataSource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def add(
        self,
        pipeline_id: str,
        *,
        request: typing.Sequence[PipelineDataSourceCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[PipelineDataSource]]:
        """
        Add data sources to a pipeline.

        Parameters
        ----------
        pipeline_id : str

        request : typing.Sequence[PipelineDataSourceCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[PipelineDataSource]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources",
            method="PUT",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[PipelineDataSourceCreate], direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[PipelineDataSource],
                    construct_type(
                        type_=typing.List[PipelineDataSource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        pipeline_id: str,
        data_source_id: str,
        *,
        sync_interval: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PipelineDataSource]:
        """
        Update the configuration of a data source in a pipeline.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        sync_interval : typing.Optional[float]
            The interval at which the data source should be synced.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PipelineDataSource]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources/{jsonable_encoder(data_source_id)}",
            method="PUT",
            json={
                "sync_interval": sync_interval,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PipelineDataSource,
                    construct_type(
                        type_=PipelineDataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def sync(
        self,
        pipeline_id: str,
        data_source_id: str,
        *,
        request: typing.Optional[DataSourceSyncRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Pipeline]:
        """
        Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        request : typing.Optional[DataSourceSyncRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Pipeline]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources/{jsonable_encoder(data_source_id)}/sync",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=DataSourceSyncRequest, direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Pipeline,
                    construct_type(
                        type_=Pipeline,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_status(
        self, pipeline_id: str, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[ManagedIngestionStatusResponse]:
        """
        Get the status of a data source for a pipeline.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ManagedIngestionStatusResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources/{jsonable_encoder(data_source_id)}/status",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ManagedIngestionStatusResponse,
                    construct_type(
                        type_=ManagedIngestionStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawPipelineDataSourcesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, pipeline_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[PipelineDataSource]]:
        """
        Get data sources for a pipeline.

        Parameters
        ----------
        pipeline_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[PipelineDataSource]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[PipelineDataSource],
                    construct_type(
                        type_=typing.List[PipelineDataSource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def add(
        self,
        pipeline_id: str,
        *,
        request: typing.Sequence[PipelineDataSourceCreate],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[PipelineDataSource]]:
        """
        Add data sources to a pipeline.

        Parameters
        ----------
        pipeline_id : str

        request : typing.Sequence[PipelineDataSourceCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[PipelineDataSource]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources",
            method="PUT",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[PipelineDataSourceCreate], direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[PipelineDataSource],
                    construct_type(
                        type_=typing.List[PipelineDataSource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        pipeline_id: str,
        data_source_id: str,
        *,
        sync_interval: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PipelineDataSource]:
        """
        Update the configuration of a data source in a pipeline.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        sync_interval : typing.Optional[float]
            The interval at which the data source should be synced.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PipelineDataSource]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources/{jsonable_encoder(data_source_id)}",
            method="PUT",
            json={
                "sync_interval": sync_interval,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PipelineDataSource,
                    construct_type(
                        type_=PipelineDataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def sync(
        self,
        pipeline_id: str,
        data_source_id: str,
        *,
        request: typing.Optional[DataSourceSyncRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Pipeline]:
        """
        Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        request : typing.Optional[DataSourceSyncRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Pipeline]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources/{jsonable_encoder(data_source_id)}/sync",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=DataSourceSyncRequest, direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Pipeline,
                    construct_type(
                        type_=Pipeline,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_status(
        self, pipeline_id: str, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[ManagedIngestionStatusResponse]:
        """
        Get the status of a data source for a pipeline.

        Parameters
        ----------
        pipeline_id : str

        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ManagedIngestionStatusResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/pipelines/{jsonable_encoder(pipeline_id)}/data-sources/{jsonable_encoder(data_source_id)}/status",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ManagedIngestionStatusResponse,
                    construct_type(
                        type_=ManagedIngestionStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
