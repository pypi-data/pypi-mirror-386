# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.paginated_jobs_history_with_metrics import PaginatedJobsHistoryWithMetrics
from .raw_client import AsyncRawJobsClient, RawJobsClient


class JobsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawJobsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawJobsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawJobsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        job_name: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        sort: typing.Optional[str] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedJobsHistoryWithMetrics:
        """
        Get jobs for a project.

        Note:
            The include_usage_metrics parameter is deprecated and will be removed in a future version.
            We've moved to usage v2 and this parameter will no longer return meaningful data.

        Parameters
        ----------
        job_name : typing.Optional[str]

        limit : typing.Optional[int]

        offset : typing.Optional[int]

        sort : typing.Optional[str]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedJobsHistoryWithMetrics
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.jobs.list(
            job_name="job_name",
            limit=1,
            offset=1,
            sort="sort",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list(
            job_name=job_name,
            limit=limit,
            offset=offset,
            sort=sort,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data


class AsyncJobsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawJobsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawJobsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawJobsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        job_name: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        sort: typing.Optional[str] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedJobsHistoryWithMetrics:
        """
        Get jobs for a project.

        Note:
            The include_usage_metrics parameter is deprecated and will be removed in a future version.
            We've moved to usage v2 and this parameter will no longer return meaningful data.

        Parameters
        ----------
        job_name : typing.Optional[str]

        limit : typing.Optional[int]

        offset : typing.Optional[int]

        sort : typing.Optional[str]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedJobsHistoryWithMetrics
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.jobs.list(
                job_name="job_name",
                limit=1,
                offset=1,
                sort="sort",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            job_name=job_name,
            limit=limit,
            offset=offset,
            sort=sort,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data
