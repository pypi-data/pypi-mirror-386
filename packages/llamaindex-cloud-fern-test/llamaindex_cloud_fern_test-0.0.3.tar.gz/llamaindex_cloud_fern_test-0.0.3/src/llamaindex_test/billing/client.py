# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.create_intent_and_customer_session_response import CreateIntentAndCustomerSessionResponse
from ..types.metronome_dashboard_response import MetronomeDashboardResponse
from ..types.metronome_dashboard_type import MetronomeDashboardType
from .raw_client import AsyncRawBillingClient, RawBillingClient
from .types.billing_create_intent_and_session_request_plan_name import BillingCreateIntentAndSessionRequestPlanName

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BillingClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBillingClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBillingClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBillingClient
        """
        return self._raw_client

    def create_portal_session(
        self, *, organization_id: str, return_url: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Create a new customer portal session.

        Parameters
        ----------
        organization_id : str

        return_url : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.billing.create_portal_session(
            organization_id="organization_id",
            return_url="return_url",
        )
        """
        _response = self._raw_client.create_portal_session(
            organization_id=organization_id, return_url=return_url, request_options=request_options
        )
        return _response.data

    def downgrade_plan(
        self, *, organization_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Literal["success"]]:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Literal["success"]]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.billing.downgrade_plan(
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.downgrade_plan(organization_id=organization_id, request_options=request_options)
        return _response.data

    def create_intent_and_session(
        self,
        *,
        plan_name: BillingCreateIntentAndSessionRequestPlanName,
        organization_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateIntentAndCustomerSessionResponse:
        """
        Create a new setup intent and and a customer session.

        See https://docs.stripe.com/payments/existing-customers?platform=web&ui=elements

        Parameters
        ----------
        plan_name : BillingCreateIntentAndSessionRequestPlanName

        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateIntentAndCustomerSessionResponse
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.billing.create_intent_and_session(
            plan_name="free",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.create_intent_and_session(
            plan_name=plan_name, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def get_metronome_dashboard(
        self,
        *,
        organization_id: str,
        dashboard_type: typing.Optional[MetronomeDashboardType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MetronomeDashboardResponse:
        """
        Get the invoices for a given organization.

        Parameters
        ----------
        organization_id : str

        dashboard_type : typing.Optional[MetronomeDashboardType]
            The type of dashboard to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetronomeDashboardResponse
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.billing.get_metronome_dashboard(
            dashboard_type="invoices",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get_metronome_dashboard(
            organization_id=organization_id, dashboard_type=dashboard_type, request_options=request_options
        )
        return _response.data


class AsyncBillingClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBillingClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBillingClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBillingClient
        """
        return self._raw_client

    async def create_portal_session(
        self, *, organization_id: str, return_url: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Create a new customer portal session.

        Parameters
        ----------
        organization_id : str

        return_url : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.billing.create_portal_session(
                organization_id="organization_id",
                return_url="return_url",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_portal_session(
            organization_id=organization_id, return_url=return_url, request_options=request_options
        )
        return _response.data

    async def downgrade_plan(
        self, *, organization_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Literal["success"]]:
        """
        Parameters
        ----------
        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Literal["success"]]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.billing.downgrade_plan(
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.downgrade_plan(
            organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def create_intent_and_session(
        self,
        *,
        plan_name: BillingCreateIntentAndSessionRequestPlanName,
        organization_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateIntentAndCustomerSessionResponse:
        """
        Create a new setup intent and and a customer session.

        See https://docs.stripe.com/payments/existing-customers?platform=web&ui=elements

        Parameters
        ----------
        plan_name : BillingCreateIntentAndSessionRequestPlanName

        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateIntentAndCustomerSessionResponse
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.billing.create_intent_and_session(
                plan_name="free",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_intent_and_session(
            plan_name=plan_name, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def get_metronome_dashboard(
        self,
        *,
        organization_id: str,
        dashboard_type: typing.Optional[MetronomeDashboardType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MetronomeDashboardResponse:
        """
        Get the invoices for a given organization.

        Parameters
        ----------
        organization_id : str

        dashboard_type : typing.Optional[MetronomeDashboardType]
            The type of dashboard to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetronomeDashboardResponse
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.billing.get_metronome_dashboard(
                dashboard_type="invoices",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_metronome_dashboard(
            organization_id=organization_id, dashboard_type=dashboard_type, request_options=request_options
        )
        return _response.data
