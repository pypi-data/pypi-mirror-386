# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .file_create_permission_info_value import FileCreatePermissionInfoValue
from .file_create_resource_info_value import FileCreateResourceInfoValue


class FileCreate(UncheckedBaseModel):
    name: str = pydantic.Field()
    """
    Name that will be used for created file. If possible, always include the file extension in the name.
    """

    external_file_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the file in the external system
    """

    file_size: typing.Optional[int] = pydantic.Field(default=None)
    """
    Size of the file in bytes
    """

    last_modified_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The last modified time of the file
    """

    resource_info: typing.Optional[typing.Dict[str, typing.Optional[FileCreateResourceInfoValue]]] = pydantic.Field(
        default=None
    )
    """
    Resource information for the file
    """

    permission_info: typing.Optional[typing.Dict[str, typing.Optional[FileCreatePermissionInfoValue]]] = pydantic.Field(
        default=None
    )
    """
    Permission information for the file
    """

    data_source_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the data source that the file belongs to
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
