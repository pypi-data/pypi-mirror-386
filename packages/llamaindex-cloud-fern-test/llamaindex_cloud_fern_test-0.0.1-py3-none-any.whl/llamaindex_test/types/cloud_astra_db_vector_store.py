# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel


class CloudAstraDbVectorStore(UncheckedBaseModel):
    """
    Cloud AstraDB Vector Store.

    This class is used to store the configuration for an AstraDB vector store, so that it can be
    created and used in LlamaCloud.

    Args:
        token (str): The Astra DB Application Token to use.
        api_endpoint (str): The Astra DB JSON API endpoint for your database.
        collection_name (str): Collection name to use. If not existing, it will be created.
        embedding_dimension (int): Length of the embedding vectors in use.
        keyspace (optional[str]): The keyspace to use. If not provided, 'default_keyspace'
    """

    supports_nested_metadata_filters: typing.Optional[bool] = None
    token: str = pydantic.Field()
    """
    The Astra DB Application Token to use
    """

    api_endpoint: str = pydantic.Field()
    """
    The Astra DB JSON API endpoint for your database
    """

    collection_name: str = pydantic.Field()
    """
    Collection name to use. If not existing, it will be created
    """

    embedding_dimension: int = pydantic.Field()
    """
    Length of the embedding vectors in use
    """

    keyspace: typing.Optional[str] = pydantic.Field(default=None)
    """
    The keyspace to use. If not provided, 'default_keyspace'
    """

    class_name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
