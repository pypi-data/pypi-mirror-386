# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .quota_configuration_configuration_type import QuotaConfigurationConfigurationType
from .quota_configuration_status import QuotaConfigurationStatus
from .quota_rate_limit_configuration_value import QuotaRateLimitConfigurationValue


class QuotaConfiguration(UncheckedBaseModel):
    """
    Full quota configuration model.
    """

    source_type: typing.Literal["organization"] = pydantic.Field(default="organization")
    """
    The source type, e.g. 'organization'
    """

    source_id: str = pydantic.Field()
    """
    The source ID, e.g. the organization ID
    """

    configuration_type: QuotaConfigurationConfigurationType = pydantic.Field()
    """
    The quota configuration type
    """

    configuration_value: QuotaRateLimitConfigurationValue = pydantic.Field()
    """
    The quota configuration value
    """

    configuration_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(
        default=None
    )
    """
    The configuration metadata
    """

    started_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The start date of the quota
    """

    ended_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The end date of the quota
    """

    idempotency_key: typing.Optional[str] = pydantic.Field(default=None)
    """
    The idempotency key
    """

    status: QuotaConfigurationStatus = pydantic.Field()
    """
    The status of the quota, i.e. 'ACTIVE' or 'INACTIVE'
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The system-generated UUID for the quota
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The creation date of the quota configuration in the database
    """

    updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The last updated date of the quota configuration in the database
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
