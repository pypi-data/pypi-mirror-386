# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .file_parse_public import FileParsePublic


class BatchItem(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    Unique identifier for the batch item
    """

    batch_id: str = pydantic.Field()
    """
    The ID of the batch to which the item belongs
    """

    status: str = pydantic.Field()
    """
    The current status of the batch item
    """

    status_updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The Unix timestamp (in seconds) for when the batch item status was last updated
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The Unix timestamp (in seconds) for when the batch item was created
    """

    updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The Unix timestamp (in seconds) for when the batch item was last updated
    """

    input_file: str = pydantic.Field()
    """
    The input file associated with the batch item
    """

    output_file: typing.Optional[str] = pydantic.Field(default=None)
    """
    The output file associated with the batch item
    """

    task: typing.Optional[FileParsePublic] = pydantic.Field(default=None)
    """
    Worker Task for that item
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
