# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .pg_vector_distance_method import PgVectorDistanceMethod
from .pg_vector_vector_type import PgVectorVectorType


class PgVectorHnswSettings(UncheckedBaseModel):
    """
    HNSW settings for PGVector.
    """

    ef_construction: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of edges to use during the construction phase.
    """

    ef_search: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of edges to use during the search phase.
    """

    m: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of bi-directional links created for each new element.
    """

    vector_type: typing.Optional[PgVectorVectorType] = pydantic.Field(default=None)
    """
    The type of vector to use.
    """

    distance_method: typing.Optional[PgVectorDistanceMethod] = pydantic.Field(default=None)
    """
    The distance method to use.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
