# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel
from .page_figure_node_with_score import PageFigureNodeWithScore
from .page_screenshot_node_with_score import PageScreenshotNodeWithScore
from .text_node_with_score import TextNodeWithScore


class RetrieveResults(UncheckedBaseModel):
    """
    Schema for the result of an retrieval execution.
    """

    pipeline_id: str = pydantic.Field()
    """
    The ID of the pipeline that the query was retrieved against.
    """

    retrieval_nodes: typing.List[TextNodeWithScore] = pydantic.Field()
    """
    The nodes retrieved by the pipeline for the given query.
    """

    image_nodes: typing.Optional[typing.List[PageScreenshotNodeWithScore]] = pydantic.Field(default=None)
    """
    The image nodes retrieved by the pipeline for the given query. Deprecated - will soon be replaced with 'page_screenshot_nodes'.
    """

    page_figure_nodes: typing.Optional[typing.List[PageFigureNodeWithScore]] = pydantic.Field(default=None)
    """
    The page figure nodes retrieved by the pipeline for the given query.
    """

    retrieval_latency: typing.Optional[typing.Dict[str, float]] = pydantic.Field(default=None)
    """
    The end-to-end latency for retrieval and reranking.
    """

    metadata: typing.Optional[typing.Dict[str, str]] = pydantic.Field(default=None)
    """
    Metadata associated with the retrieval execution
    """

    inferred_search_filters: typing.Optional["MetadataFilters"] = pydantic.Field(default=None)
    """
    The inferred search filters for the query.
    """

    class_name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .metadata_filters import MetadataFilters  # noqa: E402, F401, I001

update_forward_refs(RetrieveResults)
