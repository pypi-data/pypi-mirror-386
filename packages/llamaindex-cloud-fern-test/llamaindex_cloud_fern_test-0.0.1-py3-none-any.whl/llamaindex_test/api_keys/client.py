# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.api_key import ApiKey
from ..types.api_key_type import ApiKeyType
from .raw_client import AsyncRawApiKeysClient, RawApiKeysClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ApiKeysClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawApiKeysClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawApiKeysClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawApiKeysClient
        """
        return self._raw_client

    def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        key_type: typing.Optional[ApiKeyType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ApiKey]:
        """
        List API Keys for a user, filtered by type.

        Parameters
        ----------
        project_id : typing.Optional[str]

        key_type : typing.Optional[ApiKeyType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiKey]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.list(
            project_id="project_id",
            key_type="user",
        )
        """
        _response = self._raw_client.list(project_id=project_id, key_type=key_type, request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        project_id: typing.Optional[str] = OMIT,
        key_type: typing.Optional[ApiKeyType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiKey:
        """
        Generate a new API Key.

        Parameters
        ----------
        name : typing.Optional[str]

        project_id : typing.Optional[str]
            The project ID to associate with the API key.

        key_type : typing.Optional[ApiKeyType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.create()
        """
        _response = self._raw_client.create(
            name=name, project_id=project_id, key_type=key_type, request_options=request_options
        )
        return _response.data

    def delete(self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an API Key by ID.

        Parameters
        ----------
        api_key_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.api_keys.delete(
            api_key_id="api_key_id",
        )
        """
        _response = self._raw_client.delete(api_key_id, request_options=request_options)
        return _response.data


class AsyncApiKeysClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawApiKeysClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawApiKeysClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawApiKeysClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        key_type: typing.Optional[ApiKeyType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ApiKey]:
        """
        List API Keys for a user, filtered by type.

        Parameters
        ----------
        project_id : typing.Optional[str]

        key_type : typing.Optional[ApiKeyType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiKey]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.list(
                project_id="project_id",
                key_type="user",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            project_id=project_id, key_type=key_type, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        project_id: typing.Optional[str] = OMIT,
        key_type: typing.Optional[ApiKeyType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiKey:
        """
        Generate a new API Key.

        Parameters
        ----------
        name : typing.Optional[str]

        project_id : typing.Optional[str]
            The project ID to associate with the API key.

        key_type : typing.Optional[ApiKeyType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.create()


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            name=name, project_id=project_id, key_type=key_type, request_options=request_options
        )
        return _response.data

    async def delete(self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an API Key by ID.

        Parameters
        ----------
        api_key_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.api_keys.delete(
                api_key_id="api_key_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(api_key_id, request_options=request_options)
        return _response.data
