# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import (
        agent_deployments,
        alpha,
        api_keys,
        auth,
        beta,
        billing,
        classifier,
        data_sinks,
        data_sources,
        deprecated,
        embedding_model_configs,
        evals,
        files,
        jobs,
        llama_extract,
        organization_users,
        organizations,
        parsing,
        pipeline_data_sources,
        pipeline_files,
        pipelines,
        projects,
        retrievers,
        validation,
    )
    from .client import AsyncLlamaCloud, LlamaCloud
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "AsyncLlamaCloud": ".client",
    "LlamaCloud": ".client",
    "__version__": ".version",
    "agent_deployments": ".agent_deployments",
    "alpha": ".alpha",
    "api_keys": ".api_keys",
    "auth": ".auth",
    "beta": ".beta",
    "billing": ".billing",
    "classifier": ".classifier",
    "data_sinks": ".data_sinks",
    "data_sources": ".data_sources",
    "deprecated": ".deprecated",
    "embedding_model_configs": ".embedding_model_configs",
    "evals": ".evals",
    "files": ".files",
    "jobs": ".jobs",
    "llama_extract": ".llama_extract",
    "organization_users": ".organization_users",
    "organizations": ".organizations",
    "parsing": ".parsing",
    "pipeline_data_sources": ".pipeline_data_sources",
    "pipeline_files": ".pipeline_files",
    "pipelines": ".pipelines",
    "projects": ".projects",
    "retrievers": ".retrievers",
    "validation": ".validation",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AsyncLlamaCloud",
    "LlamaCloud",
    "__version__",
    "agent_deployments",
    "alpha",
    "api_keys",
    "auth",
    "beta",
    "billing",
    "classifier",
    "data_sinks",
    "data_sources",
    "deprecated",
    "embedding_model_configs",
    "evals",
    "files",
    "jobs",
    "llama_extract",
    "organization_users",
    "organizations",
    "parsing",
    "pipeline_data_sources",
    "pipeline_files",
    "pipelines",
    "projects",
    "retrievers",
    "validation",
]
