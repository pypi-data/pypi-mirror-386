# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.classifier_rule import ClassifierRule
from ..types.classify_job import ClassifyJob
from ..types.classify_job_results import ClassifyJobResults
from ..types.classify_parsing_configuration import ClassifyParsingConfiguration
from ..types.http_validation_error import HttpValidationError
from ..types.paginated_response_classify_job import PaginatedResponseClassifyJob

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawClassifierClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PaginatedResponseClassifyJob]:
        """
        List classify jobs.
        Experimental: This endpoint is not yet ready for production use and is subject to change at any time.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        page_size : typing.Optional[int]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PaginatedResponseClassifyJob]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/classifier/jobs",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
                "page_size": page_size,
                "page_token": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedResponseClassifyJob,
                    construct_type(
                        type_=PaginatedResponseClassifyJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        *,
        rules: typing.Sequence[ClassifierRule],
        file_ids: typing.Sequence[str],
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        parsing_configuration: typing.Optional[ClassifyParsingConfiguration] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ClassifyJob]:
        """
        Create a classify job.
        Experimental: This endpoint is not yet ready for production use and is subject to change at any time.

        Parameters
        ----------
        rules : typing.Sequence[ClassifierRule]
            The rules to classify the files

        file_ids : typing.Sequence[str]
            The IDs of the files to classify

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        parsing_configuration : typing.Optional[ClassifyParsingConfiguration]
            The configuration for the parsing job

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ClassifyJob]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/classifier/jobs",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "rules": convert_and_respect_annotation_metadata(
                    object_=rules, annotation=typing.Sequence[ClassifierRule], direction="write"
                ),
                "file_ids": file_ids,
                "parsing_configuration": convert_and_respect_annotation_metadata(
                    object_=parsing_configuration, annotation=ClassifyParsingConfiguration, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ClassifyJob,
                    construct_type(
                        type_=ClassifyJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self,
        classify_job_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ClassifyJob]:
        """
        Get a classify job.
        Experimental: This endpoint is not yet ready for production use and is subject to change at any time.

        Parameters
        ----------
        classify_job_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ClassifyJob]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/classifier/jobs/{jsonable_encoder(classify_job_id)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ClassifyJob,
                    construct_type(
                        type_=ClassifyJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_results(
        self,
        classify_job_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ClassifyJobResults]:
        """
        Get the results of a classify job.
        Experimental: This endpoint is not yet ready for production use and is subject to change at any time.

        Parameters
        ----------
        classify_job_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ClassifyJobResults]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/classifier/jobs/{jsonable_encoder(classify_job_id)}/results",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ClassifyJobResults,
                    construct_type(
                        type_=ClassifyJobResults,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawClassifierClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PaginatedResponseClassifyJob]:
        """
        List classify jobs.
        Experimental: This endpoint is not yet ready for production use and is subject to change at any time.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        page_size : typing.Optional[int]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PaginatedResponseClassifyJob]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/classifier/jobs",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
                "page_size": page_size,
                "page_token": page_token,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedResponseClassifyJob,
                    construct_type(
                        type_=PaginatedResponseClassifyJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        *,
        rules: typing.Sequence[ClassifierRule],
        file_ids: typing.Sequence[str],
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        parsing_configuration: typing.Optional[ClassifyParsingConfiguration] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ClassifyJob]:
        """
        Create a classify job.
        Experimental: This endpoint is not yet ready for production use and is subject to change at any time.

        Parameters
        ----------
        rules : typing.Sequence[ClassifierRule]
            The rules to classify the files

        file_ids : typing.Sequence[str]
            The IDs of the files to classify

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        parsing_configuration : typing.Optional[ClassifyParsingConfiguration]
            The configuration for the parsing job

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ClassifyJob]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/classifier/jobs",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "rules": convert_and_respect_annotation_metadata(
                    object_=rules, annotation=typing.Sequence[ClassifierRule], direction="write"
                ),
                "file_ids": file_ids,
                "parsing_configuration": convert_and_respect_annotation_metadata(
                    object_=parsing_configuration, annotation=ClassifyParsingConfiguration, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ClassifyJob,
                    construct_type(
                        type_=ClassifyJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self,
        classify_job_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ClassifyJob]:
        """
        Get a classify job.
        Experimental: This endpoint is not yet ready for production use and is subject to change at any time.

        Parameters
        ----------
        classify_job_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ClassifyJob]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/classifier/jobs/{jsonable_encoder(classify_job_id)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ClassifyJob,
                    construct_type(
                        type_=ClassifyJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_results(
        self,
        classify_job_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ClassifyJobResults]:
        """
        Get the results of a classify job.
        Experimental: This endpoint is not yet ready for production use and is subject to change at any time.

        Parameters
        ----------
        classify_job_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ClassifyJobResults]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/classifier/jobs/{jsonable_encoder(classify_job_id)}/results",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ClassifyJobResults,
                    construct_type(
                        type_=ClassifyJobResults,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
