# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.configurable_data_source_names import ConfigurableDataSourceNames
from ..types.data_source import DataSource
from ..types.data_source_create_component import DataSourceCreateComponent
from ..types.data_source_create_custom_metadata_value import DataSourceCreateCustomMetadataValue
from .raw_client import AsyncRawDataSourcesClient, RawDataSourcesClient
from .types.data_source_update_component import DataSourceUpdateComponent
from .types.data_source_update_custom_metadata_value import DataSourceUpdateCustomMetadataValue

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DataSourcesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDataSourcesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDataSourcesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDataSourcesClient
        """
        return self._raw_client

    def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DataSource]:
        """
        List data sources for a given project.
        If project_id is not provided, uses the default project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DataSource]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sources.list(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def create(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSource:
        """
        Create a new data source.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSource
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sources.create(
            project_id="project_id",
            organization_id="organization_id",
            name="name",
            source_type="S3",
            component={"key": "value"},
        )
        """
        _response = self._raw_client.create(
            name=name,
            source_type=source_type,
            component=component,
            project_id=project_id,
            organization_id=organization_id,
            custom_metadata=custom_metadata,
            request_options=request_options,
        )
        return _response.data

    def upsert(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSource:
        """
        Upserts a data source.
        Updates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSource
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sources.upsert(
            project_id="project_id",
            organization_id="organization_id",
            name="name",
            source_type="S3",
            component={"key": "value"},
        )
        """
        _response = self._raw_client.upsert(
            name=name,
            source_type=source_type,
            component=component,
            project_id=project_id,
            organization_id=organization_id,
            custom_metadata=custom_metadata,
            request_options=request_options,
        )
        return _response.data

    def get(self, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> DataSource:
        """
        Get a data source by ID.

        Parameters
        ----------
        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSource
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sources.get(
            data_source_id="data_source_id",
        )
        """
        _response = self._raw_client.get(data_source_id, request_options=request_options)
        return _response.data

    def update(
        self,
        data_source_id: str,
        *,
        source_type: ConfigurableDataSourceNames,
        name: typing.Optional[str] = OMIT,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]]] = OMIT,
        component: typing.Optional[DataSourceUpdateComponent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSource:
        """
        Update a data source by ID.

        Parameters
        ----------
        data_source_id : str

        source_type : ConfigurableDataSourceNames

        name : typing.Optional[str]
            The name of the data source.

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        component : typing.Optional[DataSourceUpdateComponent]
            Component that implements the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSource
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sources.update(
            data_source_id="data_source_id",
            source_type="S3",
        )
        """
        _response = self._raw_client.update(
            data_source_id,
            source_type=source_type,
            name=name,
            custom_metadata=custom_metadata,
            component=component,
            request_options=request_options,
        )
        return _response.data

    def delete(self, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a data source by ID.

        Parameters
        ----------
        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.data_sources.delete(
            data_source_id="data_source_id",
        )
        """
        _response = self._raw_client.delete(data_source_id, request_options=request_options)
        return _response.data


class AsyncDataSourcesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDataSourcesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDataSourcesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDataSourcesClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DataSource]:
        """
        List data sources for a given project.
        If project_id is not provided, uses the default project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DataSource]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sources.list(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSource:
        """
        Create a new data source.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSource
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sources.create(
                project_id="project_id",
                organization_id="organization_id",
                name="name",
                source_type="S3",
                component={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            name=name,
            source_type=source_type,
            component=component,
            project_id=project_id,
            organization_id=organization_id,
            custom_metadata=custom_metadata,
            request_options=request_options,
        )
        return _response.data

    async def upsert(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSource:
        """
        Upserts a data source.
        Updates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSource
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sources.upsert(
                project_id="project_id",
                organization_id="organization_id",
                name="name",
                source_type="S3",
                component={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert(
            name=name,
            source_type=source_type,
            component=component,
            project_id=project_id,
            organization_id=organization_id,
            custom_metadata=custom_metadata,
            request_options=request_options,
        )
        return _response.data

    async def get(self, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> DataSource:
        """
        Get a data source by ID.

        Parameters
        ----------
        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSource
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sources.get(
                data_source_id="data_source_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(data_source_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        data_source_id: str,
        *,
        source_type: ConfigurableDataSourceNames,
        name: typing.Optional[str] = OMIT,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]]] = OMIT,
        component: typing.Optional[DataSourceUpdateComponent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataSource:
        """
        Update a data source by ID.

        Parameters
        ----------
        data_source_id : str

        source_type : ConfigurableDataSourceNames

        name : typing.Optional[str]
            The name of the data source.

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        component : typing.Optional[DataSourceUpdateComponent]
            Component that implements the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataSource
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sources.update(
                data_source_id="data_source_id",
                source_type="S3",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            data_source_id,
            source_type=source_type,
            name=name,
            custom_metadata=custom_metadata,
            component=component,
            request_options=request_options,
        )
        return _response.data

    async def delete(self, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a data source by ID.

        Parameters
        ----------
        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.data_sources.delete(
                data_source_id="data_source_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(data_source_id, request_options=request_options)
        return _response.data
