# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.configurable_data_source_names import ConfigurableDataSourceNames
from ..types.data_source import DataSource
from ..types.data_source_create_component import DataSourceCreateComponent
from ..types.data_source_create_custom_metadata_value import DataSourceCreateCustomMetadataValue
from ..types.http_validation_error import HttpValidationError
from .types.data_source_update_component import DataSourceUpdateComponent
from .types.data_source_update_custom_metadata_value import DataSourceUpdateCustomMetadataValue

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawDataSourcesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[DataSource]]:
        """
        List data sources for a given project.
        If project_id is not provided, uses the default project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[DataSource]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/data-sources",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[DataSource],
                    construct_type(
                        type_=typing.List[DataSource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DataSource]:
        """
        Create a new data source.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DataSource]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/data-sources",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "source_type": source_type,
                "custom_metadata": convert_and_respect_annotation_metadata(
                    object_=custom_metadata,
                    annotation=typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]],
                    direction="write",
                ),
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSourceCreateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataSource,
                    construct_type(
                        type_=DataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def upsert(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DataSource]:
        """
        Upserts a data source.
        Updates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DataSource]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/data-sources",
            method="PUT",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "source_type": source_type,
                "custom_metadata": convert_and_respect_annotation_metadata(
                    object_=custom_metadata,
                    annotation=typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]],
                    direction="write",
                ),
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSourceCreateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataSource,
                    construct_type(
                        type_=DataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[DataSource]:
        """
        Get a data source by ID.

        Parameters
        ----------
        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DataSource]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/data-sources/{jsonable_encoder(data_source_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataSource,
                    construct_type(
                        type_=DataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        data_source_id: str,
        *,
        source_type: ConfigurableDataSourceNames,
        name: typing.Optional[str] = OMIT,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]]] = OMIT,
        component: typing.Optional[DataSourceUpdateComponent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DataSource]:
        """
        Update a data source by ID.

        Parameters
        ----------
        data_source_id : str

        source_type : ConfigurableDataSourceNames

        name : typing.Optional[str]
            The name of the data source.

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        component : typing.Optional[DataSourceUpdateComponent]
            Component that implements the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DataSource]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/data-sources/{jsonable_encoder(data_source_id)}",
            method="PUT",
            json={
                "name": name,
                "source_type": source_type,
                "custom_metadata": convert_and_respect_annotation_metadata(
                    object_=custom_metadata,
                    annotation=typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]],
                    direction="write",
                ),
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSourceUpdateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataSource,
                    construct_type(
                        type_=DataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(
        self, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Delete a data source by ID.

        Parameters
        ----------
        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/data-sources/{jsonable_encoder(data_source_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawDataSourcesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[DataSource]]:
        """
        List data sources for a given project.
        If project_id is not provided, uses the default project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[DataSource]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/data-sources",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[DataSource],
                    construct_type(
                        type_=typing.List[DataSource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DataSource]:
        """
        Create a new data source.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DataSource]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/data-sources",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "source_type": source_type,
                "custom_metadata": convert_and_respect_annotation_metadata(
                    object_=custom_metadata,
                    annotation=typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]],
                    direction="write",
                ),
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSourceCreateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataSource,
                    construct_type(
                        type_=DataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def upsert(
        self,
        *,
        name: str,
        source_type: ConfigurableDataSourceNames,
        component: DataSourceCreateComponent,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DataSource]:
        """
        Upserts a data source.
        Updates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.

        Parameters
        ----------
        name : str
            The name of the data source.

        source_type : ConfigurableDataSourceNames

        component : DataSourceCreateComponent
            Component that implements the data source

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DataSource]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/data-sources",
            method="PUT",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "source_type": source_type,
                "custom_metadata": convert_and_respect_annotation_metadata(
                    object_=custom_metadata,
                    annotation=typing.Dict[str, typing.Optional[DataSourceCreateCustomMetadataValue]],
                    direction="write",
                ),
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSourceCreateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataSource,
                    construct_type(
                        type_=DataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[DataSource]:
        """
        Get a data source by ID.

        Parameters
        ----------
        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DataSource]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/data-sources/{jsonable_encoder(data_source_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataSource,
                    construct_type(
                        type_=DataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        data_source_id: str,
        *,
        source_type: ConfigurableDataSourceNames,
        name: typing.Optional[str] = OMIT,
        custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]]] = OMIT,
        component: typing.Optional[DataSourceUpdateComponent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DataSource]:
        """
        Update a data source by ID.

        Parameters
        ----------
        data_source_id : str

        source_type : ConfigurableDataSourceNames

        name : typing.Optional[str]
            The name of the data source.

        custom_metadata : typing.Optional[typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]]]
            Custom metadata that will be present on all data loaded from the data source

        component : typing.Optional[DataSourceUpdateComponent]
            Component that implements the data source

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DataSource]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/data-sources/{jsonable_encoder(data_source_id)}",
            method="PUT",
            json={
                "name": name,
                "source_type": source_type,
                "custom_metadata": convert_and_respect_annotation_metadata(
                    object_=custom_metadata,
                    annotation=typing.Dict[str, typing.Optional[DataSourceUpdateCustomMetadataValue]],
                    direction="write",
                ),
                "component": convert_and_respect_annotation_metadata(
                    object_=component, annotation=DataSourceUpdateComponent, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DataSource,
                    construct_type(
                        type_=DataSource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, data_source_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Delete a data source by ID.

        Parameters
        ----------
        data_source_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/data-sources/{jsonable_encoder(data_source_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
