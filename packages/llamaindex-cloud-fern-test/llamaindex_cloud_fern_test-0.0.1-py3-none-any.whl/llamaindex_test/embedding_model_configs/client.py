# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.embedding_model_config import EmbeddingModelConfig
from ..types.embedding_model_config_update_embedding_config import EmbeddingModelConfigUpdateEmbeddingConfig
from .raw_client import AsyncRawEmbeddingModelConfigsClient, RawEmbeddingModelConfigsClient
from .types.embedding_model_config_create_embedding_config import EmbeddingModelConfigCreateEmbeddingConfig

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EmbeddingModelConfigsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEmbeddingModelConfigsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEmbeddingModelConfigsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEmbeddingModelConfigsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EmbeddingModelConfig]:
        """
        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EmbeddingModelConfig]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.embedding_model_configs.list(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.list(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def create(
        self,
        *,
        name: str,
        embedding_config: EmbeddingModelConfigCreateEmbeddingConfig,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingModelConfig:
        """
        Create a new embedding model configuration within a specified project.

        Parameters
        ----------
        name : str
            The name of the embedding model config.

        embedding_config : EmbeddingModelConfigCreateEmbeddingConfig
            The embedding configuration for the embedding model config.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingModelConfig
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud
        from llamaindex_test.embedding_model_configs import (
            EmbeddingModelConfigCreateEmbeddingConfig_AzureEmbedding,
        )

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.embedding_model_configs.create(
            project_id="project_id",
            organization_id="organization_id",
            name="name",
            embedding_config=EmbeddingModelConfigCreateEmbeddingConfig_AzureEmbedding(),
        )
        """
        _response = self._raw_client.create(
            name=name,
            embedding_config=embedding_config,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    def upsert(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        embedding_config: typing.Optional[EmbeddingModelConfigUpdateEmbeddingConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingModelConfig:
        """
        Upserts an embedding model config.
        Updates if an embedding model config with the same name and project_id already exists. Otherwise, creates a new embedding model config.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        name : typing.Optional[str]
            The name of the embedding model config.

        embedding_config : typing.Optional[EmbeddingModelConfigUpdateEmbeddingConfig]
            The embedding configuration for the embedding model config.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingModelConfig
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.embedding_model_configs.upsert(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.upsert(
            project_id=project_id,
            organization_id=organization_id,
            name=name,
            embedding_config=embedding_config,
            request_options=request_options,
        )
        return _response.data

    def update(
        self,
        embedding_model_config_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        embedding_config: typing.Optional[EmbeddingModelConfigUpdateEmbeddingConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingModelConfig:
        """
        Update an embedding model config by ID.

        Parameters
        ----------
        embedding_model_config_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        name : typing.Optional[str]
            The name of the embedding model config.

        embedding_config : typing.Optional[EmbeddingModelConfigUpdateEmbeddingConfig]
            The embedding configuration for the embedding model config.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingModelConfig
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.embedding_model_configs.update(
            embedding_model_config_id="embedding_model_config_id",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.update(
            embedding_model_config_id,
            project_id=project_id,
            organization_id=organization_id,
            name=name,
            embedding_config=embedding_config,
            request_options=request_options,
        )
        return _response.data

    def delete(
        self,
        embedding_model_config_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete an embedding model config by ID.

        Parameters
        ----------
        embedding_model_config_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.embedding_model_configs.delete(
            embedding_model_config_id="embedding_model_config_id",
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.delete(
            embedding_model_config_id,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data


class AsyncEmbeddingModelConfigsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEmbeddingModelConfigsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEmbeddingModelConfigsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEmbeddingModelConfigsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EmbeddingModelConfig]:
        """
        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EmbeddingModelConfig]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.embedding_model_configs.list(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        *,
        name: str,
        embedding_config: EmbeddingModelConfigCreateEmbeddingConfig,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingModelConfig:
        """
        Create a new embedding model configuration within a specified project.

        Parameters
        ----------
        name : str
            The name of the embedding model config.

        embedding_config : EmbeddingModelConfigCreateEmbeddingConfig
            The embedding configuration for the embedding model config.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingModelConfig
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud
        from llamaindex_test.embedding_model_configs import (
            EmbeddingModelConfigCreateEmbeddingConfig_AzureEmbedding,
        )

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.embedding_model_configs.create(
                project_id="project_id",
                organization_id="organization_id",
                name="name",
                embedding_config=EmbeddingModelConfigCreateEmbeddingConfig_AzureEmbedding(),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            name=name,
            embedding_config=embedding_config,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data

    async def upsert(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        embedding_config: typing.Optional[EmbeddingModelConfigUpdateEmbeddingConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingModelConfig:
        """
        Upserts an embedding model config.
        Updates if an embedding model config with the same name and project_id already exists. Otherwise, creates a new embedding model config.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        name : typing.Optional[str]
            The name of the embedding model config.

        embedding_config : typing.Optional[EmbeddingModelConfigUpdateEmbeddingConfig]
            The embedding configuration for the embedding model config.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingModelConfig
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.embedding_model_configs.upsert(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert(
            project_id=project_id,
            organization_id=organization_id,
            name=name,
            embedding_config=embedding_config,
            request_options=request_options,
        )
        return _response.data

    async def update(
        self,
        embedding_model_config_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        embedding_config: typing.Optional[EmbeddingModelConfigUpdateEmbeddingConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingModelConfig:
        """
        Update an embedding model config by ID.

        Parameters
        ----------
        embedding_model_config_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        name : typing.Optional[str]
            The name of the embedding model config.

        embedding_config : typing.Optional[EmbeddingModelConfigUpdateEmbeddingConfig]
            The embedding configuration for the embedding model config.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingModelConfig
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.embedding_model_configs.update(
                embedding_model_config_id="embedding_model_config_id",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            embedding_model_config_id,
            project_id=project_id,
            organization_id=organization_id,
            name=name,
            embedding_config=embedding_config,
            request_options=request_options,
        )
        return _response.data

    async def delete(
        self,
        embedding_model_config_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete an embedding model config by ID.

        Parameters
        ----------
        embedding_model_config_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.embedding_model_configs.delete(
                embedding_model_config_id="embedding_model_config_id",
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            embedding_model_config_id,
            project_id=project_id,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data
