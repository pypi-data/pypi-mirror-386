# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.agent_deployment_list import AgentDeploymentList
from .raw_client import AsyncRawAgentDeploymentsClient, RawAgentDeploymentsClient


class AgentDeploymentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAgentDeploymentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAgentDeploymentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAgentDeploymentsClient
        """
        return self._raw_client

    def list(self, project_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> AgentDeploymentList:
        """
        List all deployments for a project.

        Parameters
        ----------
        project_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentDeploymentList
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.agent_deployments.list(
            project_id="project_id",
        )
        """
        _response = self._raw_client.list(project_id, request_options=request_options)
        return _response.data

    def sync(self, project_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> AgentDeploymentList:
        """
        Sync deployments for a project.

        Parameters
        ----------
        project_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentDeploymentList
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.agent_deployments.sync(
            project_id="project_id",
        )
        """
        _response = self._raw_client.sync(project_id, request_options=request_options)
        return _response.data


class AsyncAgentDeploymentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAgentDeploymentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAgentDeploymentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAgentDeploymentsClient
        """
        return self._raw_client

    async def list(
        self, project_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AgentDeploymentList:
        """
        List all deployments for a project.

        Parameters
        ----------
        project_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentDeploymentList
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.agent_deployments.list(
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(project_id, request_options=request_options)
        return _response.data

    async def sync(
        self, project_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AgentDeploymentList:
        """
        Sync deployments for a project.

        Parameters
        ----------
        project_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentDeploymentList
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.agent_deployments.sync(
                project_id="project_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.sync(project_id, request_options=request_options)
        return _response.data
