# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.project import Project
from ..types.usage_and_plan import UsageAndPlan
from .raw_client import AsyncRawProjectsClient, RawProjectsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProjectsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProjectsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProjectsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProjectsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        project_name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Project]:
        """
        List projects or get one by name

        Parameters
        ----------
        organization_id : typing.Optional[str]

        project_name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Project]
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.list(
            organization_id="organization_id",
            project_name="project_name",
        )
        """
        _response = self._raw_client.list(
            organization_id=organization_id, project_name=project_name, request_options=request_options
        )
        return _response.data

    def create(
        self,
        *,
        name: str,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Create a new project.

        Parameters
        ----------
        name : str

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.create(
            organization_id="organization_id",
            name="name",
        )
        """
        _response = self._raw_client.create(name=name, organization_id=organization_id, request_options=request_options)
        return _response.data

    def upsert(
        self,
        *,
        name: str,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Upsert a project.
        Updates if a project with the same name already exists. Otherwise, creates a new project.

        Parameters
        ----------
        name : str

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.upsert(
            organization_id="organization_id",
            name="name",
        )
        """
        _response = self._raw_client.upsert(name=name, organization_id=organization_id, request_options=request_options)
        return _response.data

    def get(
        self,
        project_id: typing.Optional[str],
        *,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Get a project by ID.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.get(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get(project_id, organization_id=organization_id, request_options=request_options)
        return _response.data

    def update(
        self,
        project_id: typing.Optional[str],
        *,
        name: str,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Update an existing project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        name : str

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.update(
            project_id="project_id",
            organization_id="organization_id",
            name="name",
        )
        """
        _response = self._raw_client.update(
            project_id, name=name, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def delete(
        self,
        project_id: typing.Optional[str],
        *,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a project by ID.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.delete(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.delete(
            project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def get_current(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Get the current project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.get_current(
            project_id="project_id",
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get_current(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    def get_usage(
        self,
        project_id: typing.Optional[str],
        *,
        get_current_invoice_total: typing.Optional[bool] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UsageAndPlan:
        """
        Get usage for a project

        Parameters
        ----------
        project_id : typing.Optional[str]

        get_current_invoice_total : typing.Optional[bool]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UsageAndPlan
            Successful Response

        Examples
        --------
        from llamaindex_test import LlamaCloud

        client = LlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.projects.get_usage(
            project_id="project_id",
            get_current_invoice_total=True,
            organization_id="organization_id",
        )
        """
        _response = self._raw_client.get_usage(
            project_id,
            get_current_invoice_total=get_current_invoice_total,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data


class AsyncProjectsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProjectsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProjectsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProjectsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        project_name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Project]:
        """
        List projects or get one by name

        Parameters
        ----------
        organization_id : typing.Optional[str]

        project_name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Project]
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.list(
                organization_id="organization_id",
                project_name="project_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            organization_id=organization_id, project_name=project_name, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        *,
        name: str,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Create a new project.

        Parameters
        ----------
        name : str

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.create(
                organization_id="organization_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            name=name, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def upsert(
        self,
        *,
        name: str,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Upsert a project.
        Updates if a project with the same name already exists. Otherwise, creates a new project.

        Parameters
        ----------
        name : str

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.upsert(
                organization_id="organization_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert(
            name=name, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def get(
        self,
        project_id: typing.Optional[str],
        *,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Get a project by ID.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.get(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def update(
        self,
        project_id: typing.Optional[str],
        *,
        name: str,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Update an existing project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        name : str

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.update(
                project_id="project_id",
                organization_id="organization_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            project_id, name=name, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        project_id: typing.Optional[str],
        *,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a project by ID.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.delete(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def get_current(
        self,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Project:
        """
        Get the current project.

        Parameters
        ----------
        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Project
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.get_current(
                project_id="project_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_current(
            project_id=project_id, organization_id=organization_id, request_options=request_options
        )
        return _response.data

    async def get_usage(
        self,
        project_id: typing.Optional[str],
        *,
        get_current_invoice_total: typing.Optional[bool] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UsageAndPlan:
        """
        Get usage for a project

        Parameters
        ----------
        project_id : typing.Optional[str]

        get_current_invoice_total : typing.Optional[bool]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UsageAndPlan
            Successful Response

        Examples
        --------
        import asyncio

        from llamaindex_test import AsyncLlamaCloud

        client = AsyncLlamaCloud(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.projects.get_usage(
                project_id="project_id",
                get_current_invoice_total=True,
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_usage(
            project_id,
            get_current_invoice_total=get_current_invoice_total,
            organization_id=organization_id,
            request_options=request_options,
        )
        return _response.data
