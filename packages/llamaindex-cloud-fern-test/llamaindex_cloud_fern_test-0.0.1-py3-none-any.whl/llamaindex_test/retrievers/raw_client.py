# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.composite_retrieval_mode import CompositeRetrievalMode
from ..types.composite_retrieval_result import CompositeRetrievalResult
from ..types.http_validation_error import HttpValidationError
from ..types.re_rank_config import ReRankConfig
from ..types.retriever import Retriever
from ..types.retriever_pipeline import RetrieverPipeline

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawRetrieversClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        name: typing.Optional[str] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[Retriever]]:
        """
        List Retrievers for a project.

        Parameters
        ----------
        name : typing.Optional[str]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Retriever]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/retrievers",
            method="GET",
            params={
                "name": name,
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Retriever],
                    construct_type(
                        type_=typing.List[Retriever],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        *,
        name: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Retriever]:
        """
        Create a new Retriever.

        Parameters
        ----------
        name : str
            A name for the retriever tool. Will default to the pipeline name if not provided.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Retriever]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/retrievers",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "pipelines": convert_and_respect_annotation_metadata(
                    object_=pipelines, annotation=typing.Sequence[RetrieverPipeline], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Retriever,
                    construct_type(
                        type_=Retriever,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def upsert(
        self,
        *,
        name: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Retriever]:
        """
        Upsert a new Retriever.

        Parameters
        ----------
        name : str
            A name for the retriever tool. Will default to the pipeline name if not provided.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Retriever]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/retrievers",
            method="PUT",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "pipelines": convert_and_respect_annotation_metadata(
                    object_=pipelines, annotation=typing.Sequence[RetrieverPipeline], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Retriever,
                    construct_type(
                        type_=Retriever,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self,
        retriever_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Retriever]:
        """
        Get a Retriever by ID.

        Parameters
        ----------
        retriever_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Retriever]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/retrievers/{jsonable_encoder(retriever_id)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Retriever,
                    construct_type(
                        type_=Retriever,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        retriever_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Retriever]:
        """
        Update an existing Retriever.

        Parameters
        ----------
        retriever_id : str

        name : typing.Optional[str]
            A name for the retriever.

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Retriever]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/retrievers/{jsonable_encoder(retriever_id)}",
            method="PUT",
            json={
                "name": name,
                "pipelines": convert_and_respect_annotation_metadata(
                    object_=pipelines, annotation=typing.Sequence[RetrieverPipeline], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Retriever,
                    construct_type(
                        type_=Retriever,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(
        self, retriever_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Delete a Retriever by ID.

        Parameters
        ----------
        retriever_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/retrievers/{jsonable_encoder(retriever_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def retrieve(
        self,
        retriever_id: str,
        *,
        query: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        mode: typing.Optional[CompositeRetrievalMode] = OMIT,
        rerank_top_n: typing.Optional[int] = OMIT,
        rerank_config: typing.Optional[ReRankConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CompositeRetrievalResult]:
        """
        Retrieve data using a Retriever.

        Parameters
        ----------
        retriever_id : str

        query : str
            The query to retrieve against.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        mode : typing.Optional[CompositeRetrievalMode]
            The mode of composite retrieval.

        rerank_top_n : typing.Optional[int]
            (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.

        rerank_config : typing.Optional[ReRankConfig]
            The rerank configuration for composite retrieval.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CompositeRetrievalResult]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/retrievers/{jsonable_encoder(retriever_id)}/retrieve",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "mode": mode,
                "rerank_top_n": rerank_top_n,
                "rerank_config": convert_and_respect_annotation_metadata(
                    object_=rerank_config, annotation=ReRankConfig, direction="write"
                ),
                "query": query,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CompositeRetrievalResult,
                    construct_type(
                        type_=CompositeRetrievalResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def retrieve_direct(
        self,
        *,
        query: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        mode: typing.Optional[CompositeRetrievalMode] = OMIT,
        rerank_top_n: typing.Optional[int] = OMIT,
        rerank_config: typing.Optional[ReRankConfig] = OMIT,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CompositeRetrievalResult]:
        """
        Retrieve data using specified pipelines without creating a persistent retriever.

        Parameters
        ----------
        query : str
            The query to retrieve against.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        mode : typing.Optional[CompositeRetrievalMode]
            The mode of composite retrieval.

        rerank_top_n : typing.Optional[int]
            (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.

        rerank_config : typing.Optional[ReRankConfig]
            The rerank configuration for composite retrieval.

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines to use for retrieval.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CompositeRetrievalResult]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/retrievers/retrieve",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "mode": mode,
                "rerank_top_n": rerank_top_n,
                "rerank_config": convert_and_respect_annotation_metadata(
                    object_=rerank_config, annotation=ReRankConfig, direction="write"
                ),
                "query": query,
                "pipelines": convert_and_respect_annotation_metadata(
                    object_=pipelines, annotation=typing.Sequence[RetrieverPipeline], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CompositeRetrievalResult,
                    construct_type(
                        type_=CompositeRetrievalResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawRetrieversClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        name: typing.Optional[str] = None,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[Retriever]]:
        """
        List Retrievers for a project.

        Parameters
        ----------
        name : typing.Optional[str]

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Retriever]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/retrievers",
            method="GET",
            params={
                "name": name,
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Retriever],
                    construct_type(
                        type_=typing.List[Retriever],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        *,
        name: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Retriever]:
        """
        Create a new Retriever.

        Parameters
        ----------
        name : str
            A name for the retriever tool. Will default to the pipeline name if not provided.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Retriever]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/retrievers",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "pipelines": convert_and_respect_annotation_metadata(
                    object_=pipelines, annotation=typing.Sequence[RetrieverPipeline], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Retriever,
                    construct_type(
                        type_=Retriever,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def upsert(
        self,
        *,
        name: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Retriever]:
        """
        Upsert a new Retriever.

        Parameters
        ----------
        name : str
            A name for the retriever tool. Will default to the pipeline name if not provided.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Retriever]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/retrievers",
            method="PUT",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "name": name,
                "pipelines": convert_and_respect_annotation_metadata(
                    object_=pipelines, annotation=typing.Sequence[RetrieverPipeline], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Retriever,
                    construct_type(
                        type_=Retriever,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self,
        retriever_id: str,
        *,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Retriever]:
        """
        Get a Retriever by ID.

        Parameters
        ----------
        retriever_id : str

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Retriever]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/retrievers/{jsonable_encoder(retriever_id)}",
            method="GET",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Retriever,
                    construct_type(
                        type_=Retriever,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        retriever_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Retriever]:
        """
        Update an existing Retriever.

        Parameters
        ----------
        retriever_id : str

        name : typing.Optional[str]
            A name for the retriever.

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines this retriever uses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Retriever]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/retrievers/{jsonable_encoder(retriever_id)}",
            method="PUT",
            json={
                "name": name,
                "pipelines": convert_and_respect_annotation_metadata(
                    object_=pipelines, annotation=typing.Sequence[RetrieverPipeline], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Retriever,
                    construct_type(
                        type_=Retriever,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, retriever_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Delete a Retriever by ID.

        Parameters
        ----------
        retriever_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/retrievers/{jsonable_encoder(retriever_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def retrieve(
        self,
        retriever_id: str,
        *,
        query: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        mode: typing.Optional[CompositeRetrievalMode] = OMIT,
        rerank_top_n: typing.Optional[int] = OMIT,
        rerank_config: typing.Optional[ReRankConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CompositeRetrievalResult]:
        """
        Retrieve data using a Retriever.

        Parameters
        ----------
        retriever_id : str

        query : str
            The query to retrieve against.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        mode : typing.Optional[CompositeRetrievalMode]
            The mode of composite retrieval.

        rerank_top_n : typing.Optional[int]
            (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.

        rerank_config : typing.Optional[ReRankConfig]
            The rerank configuration for composite retrieval.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CompositeRetrievalResult]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/retrievers/{jsonable_encoder(retriever_id)}/retrieve",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "mode": mode,
                "rerank_top_n": rerank_top_n,
                "rerank_config": convert_and_respect_annotation_metadata(
                    object_=rerank_config, annotation=ReRankConfig, direction="write"
                ),
                "query": query,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CompositeRetrievalResult,
                    construct_type(
                        type_=CompositeRetrievalResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def retrieve_direct(
        self,
        *,
        query: str,
        project_id: typing.Optional[str] = None,
        organization_id: typing.Optional[str] = None,
        mode: typing.Optional[CompositeRetrievalMode] = OMIT,
        rerank_top_n: typing.Optional[int] = OMIT,
        rerank_config: typing.Optional[ReRankConfig] = OMIT,
        pipelines: typing.Optional[typing.Sequence[RetrieverPipeline]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CompositeRetrievalResult]:
        """
        Retrieve data using specified pipelines without creating a persistent retriever.

        Parameters
        ----------
        query : str
            The query to retrieve against.

        project_id : typing.Optional[str]

        organization_id : typing.Optional[str]

        mode : typing.Optional[CompositeRetrievalMode]
            The mode of composite retrieval.

        rerank_top_n : typing.Optional[int]
            (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.

        rerank_config : typing.Optional[ReRankConfig]
            The rerank configuration for composite retrieval.

        pipelines : typing.Optional[typing.Sequence[RetrieverPipeline]]
            The pipelines to use for retrieval.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CompositeRetrievalResult]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/retrievers/retrieve",
            method="POST",
            params={
                "project_id": project_id,
                "organization_id": organization_id,
            },
            json={
                "mode": mode,
                "rerank_top_n": rerank_top_n,
                "rerank_config": convert_and_respect_annotation_metadata(
                    object_=rerank_config, annotation=ReRankConfig, direction="write"
                ),
                "query": query,
                "pipelines": convert_and_respect_annotation_metadata(
                    object_=pipelines, annotation=typing.Sequence[RetrieverPipeline], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CompositeRetrievalResult,
                    construct_type(
                        type_=CompositeRetrievalResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
