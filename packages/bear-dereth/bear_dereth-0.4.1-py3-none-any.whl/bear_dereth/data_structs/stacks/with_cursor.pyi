from collections.abc import Iterator

from bear_dereth.data_structs.cursor import CollectionProtocol
from bear_dereth.data_structs.stacks.simple import SimpleStack as Stack

class SimpleStackCursor[T]:
    duplicates: list[str]  # Technically a classproperty :D haha!
    fields: dict[str, list[str]]  # Technically a classproperty :D Hehehe! Hi Claire! Hi Again Claire! :D
    def __init__[C: Stack](self, data: T | None = None, handler: type[C] = ...) -> None: ...
    def _update(self, collection: CollectionProtocol) -> None: ...
    def push(self, item: T) -> None: ...
    def pop(self) -> T: ...
    def peek(self, offset: int = 1, tail: bool = False, head: bool = False) -> T | None: ...
    def get(self, index: int) -> T: ...
    def has(self, item: T) -> bool: ...
    def copy(self) -> list[T]: ...
    def remove(self, item: T) -> None: ...
    def join(self, d: str = ", ") -> str: ...
    def offset(self, v: int) -> None: ...
    def reset(self) -> None: ...
    def clear(self) -> None: ...
    def head(self) -> None: ...
    def tail(self) -> None: ...
    def tick(self) -> None: ...
    def tock(self) -> None: ...
    @property
    def size(self) -> int: ...
    @property
    def current(self) -> T | None: ...
    @property
    def index(self) -> int: ...
    @index.setter
    def index(self, value: int) -> None: ...
    @property
    def stack(self) -> Stack[T]: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def not_empty(self) -> bool: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __iter__(self) -> Iterator[T]: ...
    def __contains__(self, item: object) -> bool: ...
    def __getitem__(self, index: int) -> T: ...
    def __setitem__(self, index: int, value: T) -> None: ...
    def __slice__(self, start: int | None = None, end: int | None = None, step: int | None = None) -> list[T]: ...
