exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

target-version = "py313"
line-length = 120

[lint]
exclude = [
    "tests/fixtures/*.py",
]
select = [
    "A", "ANN", "ARG",
    "B", "BLE",
    "C", "C4",
    "D", "DTZ",
    "E", "ERA", "EXE",
    "F", "FBT",
    "G",
    "I", "ICN", "INP", "ISC",
    "N",
    "PGH", "PIE", "PL", "PLC", "PLE", "PLR", "PLW", "PT", "PYI",
    "Q",
    "RUF", "RSE", "RET",
    "S", "SIM", "SLF",
    "T", "T10", "T20", "TCH", "TID", "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "A001",  # Variable is shadowing a Python builtin
    "ANN201", # Missing return type annotation for public function (-> None is obvious)
    "ANN204",  # Missing return type annotation for special method __str__
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "ARG005",  # Unused lambda argument
    "C901",    # Too complex
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "D105",  # Missing docstring in magic method
    "D417",  # Missing argument description in the docstring
    "E501",  # Line too long
    "ERA001",  # Commented out code
    "G004",  # Logging statement uses f-string
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments to function call
    "PLR0915",  # Too many statements
    "SLF001", # Private member accessed
    "TRY003",  # Avoid specifying long messages outside the exception class
    "W291",   # Trailing whitespace on blank line
    "W293",   # Blank line contains whitespace,
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "TRY400", # Use `logging.exception` instead of `logging.error`
    "T201",  # Print statement
    "D415",  # First line should end with a period, question mark, or exclamation point
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean positional arg in function call
    "BLE001", # Use of bare except
    "TRY300", # Consider moving this statement to an `else` block
    "PT028", # Default value in test function
]

[lint.per-file-ignores]
"src/**/cli.py" = [
    "T201",  # Print statement
]
"src/*/debug.py" = [
    "T201",  # Print statement
]
"!src/*/*.py" = [
    "D100",  # Missing docstring in public module
]
"!src/**.py" = [
    "D101",  # Missing docstring in public class
    "D103",  # Missing docstring in public function
]
"tests/**.py" = [
    "TC001",
    "TC002",   # Move third party imports to TYPE_CHECKING block
    "ARG005",  # Unused lambda argument
    "FBT001",  # Boolean positional arg in function definition
    "PLR2004", # Magic value used in comparison
    "S101",    # Use of assert detected
    "ANN001",  # Missing type annotation for public function
    "SIM115",  # Use a context manager for opening files
    "ARG001",  # Unused argument
    "F841",    # Local variable is assigned to but never used
]

[lint.flake8-quotes]
docstring-quotes = "double"

[lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[lint.isort]
known-first-party = ["bear_dereth"]
force-sort-within-sections = true
combine-as-imports = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[lint.pydocstyle]
convention = "google"

[format]
exclude = [
    "tests/fixtures/*.py",
]
docstring-code-format = true
docstring-code-line-length = 80
skip-magic-trailing-comma = false
quote-style = "double"
indent-style = "space"
