"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from gr4vy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class GivingBlockOptionsTypedDict(TypedDict):
    default_cryptocurrency: NotRequired[Nullable[str]]
    r"""The default cryptocurrency to present at checkout. This can be used to ensure the user is presented with the same currency in both your checkout and the Giving Block checkout."""


class GivingBlockOptions(BaseModel):
    default_cryptocurrency: Annotated[
        OptionalNullable[str], pydantic.Field(alias="defaultCryptocurrency")
    ] = UNSET
    r"""The default cryptocurrency to present at checkout. This can be used to ensure the user is presented with the same currency in both your checkout and the Giving Block checkout."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["defaultCryptocurrency"]
        nullable_fields = ["defaultCryptocurrency"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
