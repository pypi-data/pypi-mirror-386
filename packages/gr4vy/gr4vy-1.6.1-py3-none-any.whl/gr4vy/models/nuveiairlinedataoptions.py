"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from gr4vy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class NuveiAirlineDataOptionsTypedDict(TypedDict):
    seat_class: NotRequired[Nullable[str]]
    r"""The seat class of the booking"""
    is_cardholder_traveling: NotRequired[Nullable[bool]]
    r"""Indicates whether the cardholder is also a passenger."""


class NuveiAirlineDataOptions(BaseModel):
    seat_class: Annotated[OptionalNullable[str], pydantic.Field(alias="seatClass")] = (
        UNSET
    )
    r"""The seat class of the booking"""

    is_cardholder_traveling: Annotated[
        OptionalNullable[bool], pydantic.Field(alias="isCardholderTraveling")
    ] = UNSET
    r"""Indicates whether the cardholder is also a passenger."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["seatClass", "isCardholderTraveling"]
        nullable_fields = ["seatClass", "isCardholderTraveling"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
