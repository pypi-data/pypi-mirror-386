"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from gr4vy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class DigitalWalletUpdateTypedDict(TypedDict):
    r"""Request body for editing a registered digital wallet"""

    merchant_name: NotRequired[Nullable[str]]
    domain_names: NotRequired[Nullable[List[str]]]
    merchant_display_name: NotRequired[Nullable[str]]
    merchant_url: NotRequired[Nullable[str]]
    merchant_country_code: NotRequired[Nullable[str]]


class DigitalWalletUpdate(BaseModel):
    r"""Request body for editing a registered digital wallet"""

    merchant_name: OptionalNullable[str] = UNSET

    domain_names: OptionalNullable[List[str]] = UNSET

    merchant_display_name: OptionalNullable[str] = UNSET

    merchant_url: OptionalNullable[str] = UNSET

    merchant_country_code: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "merchant_name",
            "domain_names",
            "merchant_display_name",
            "merchant_url",
            "merchant_country_code",
        ]
        nullable_fields = [
            "merchant_name",
            "domain_names",
            "merchant_display_name",
            "merchant_url",
            "merchant_country_code",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
