"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from gr4vy.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
    UnrecognizedStr,
)
from gr4vy.utils import validate_open_enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Literal, Union
from typing_extensions import Annotated, NotRequired, TypedDict


VaultPaymentMethodCriteria = Union[
    Literal[
        "ALWAYS",
        "ON_SUCCESSFUL_TRANSACTION",
    ],
    UnrecognizedStr,
]


class BraintreeDynamicDataFieldsOptionsTypedDict(TypedDict):
    three_ds_auth_status: NotRequired[Nullable[str]]
    r"""Passes the 3DS status to the Braintree API using `customFields` with the key set to the value of `three_ds_auth_status`"""
    purchase_order_number: NotRequired[Nullable[str]]
    r"""Passes the `transaction.purchaseOrderNumber` field when creating a new transaction."""
    vault_payment_method_criteria: NotRequired[Nullable[VaultPaymentMethodCriteria]]
    r"""Passes the `vaultPaymentMethodCriteria` field when creating a new transaction."""


class BraintreeDynamicDataFieldsOptions(BaseModel):
    three_ds_auth_status: OptionalNullable[str] = UNSET
    r"""Passes the 3DS status to the Braintree API using `customFields` with the key set to the value of `three_ds_auth_status`"""

    purchase_order_number: OptionalNullable[str] = UNSET
    r"""Passes the `transaction.purchaseOrderNumber` field when creating a new transaction."""

    vault_payment_method_criteria: Annotated[
        OptionalNullable[VaultPaymentMethodCriteria],
        PlainValidator(validate_open_enum(False)),
    ] = UNSET
    r"""Passes the `vaultPaymentMethodCriteria` field when creating a new transaction."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "three_ds_auth_status",
            "purchase_order_number",
            "vault_payment_method_criteria",
        ]
        nullable_fields = [
            "three_ds_auth_status",
            "purchase_order_number",
            "vault_payment_method_criteria",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
