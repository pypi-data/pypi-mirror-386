"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .paymentoptioncontextapprovalui import (
    PaymentOptionContextApprovalUI,
    PaymentOptionContextApprovalUITypedDict,
)
from gr4vy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, Dict, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


RequiredFields1TypedDict = TypeAliasType("RequiredFields1TypedDict", Union[bool, Any])


RequiredFields1 = TypeAliasType("RequiredFields1", Union[bool, Any])


RequiredFields2TypedDict = TypeAliasType(
    "RequiredFields2TypedDict", Union[bool, Dict[str, RequiredFields1TypedDict]]
)


RequiredFields2 = TypeAliasType(
    "RequiredFields2", Union[bool, Dict[str, RequiredFields1]]
)


class PaymentOptionContextTypedDict(TypedDict):
    redirect_requires_popup: bool
    requires_tokenized_redirect_popup: bool
    approval_ui: NotRequired[Nullable[PaymentOptionContextApprovalUITypedDict]]
    required_fields: NotRequired[Nullable[Dict[str, RequiredFields2TypedDict]]]


class PaymentOptionContext(BaseModel):
    redirect_requires_popup: bool

    requires_tokenized_redirect_popup: bool

    approval_ui: OptionalNullable[PaymentOptionContextApprovalUI] = UNSET

    required_fields: OptionalNullable[Dict[str, RequiredFields2]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["approval_ui", "required_fields"]
        nullable_fields = ["approval_ui", "required_fields"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
