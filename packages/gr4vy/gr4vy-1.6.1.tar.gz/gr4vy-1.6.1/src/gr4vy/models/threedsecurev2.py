"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from gr4vy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ThreeDSecureV2TypedDict(TypedDict):
    version: str
    authentication_response: NotRequired[Nullable[str]]
    directory_response: NotRequired[Nullable[str]]
    directory_transaction_id: NotRequired[Nullable[str]]
    transaction_reason: NotRequired[Nullable[str]]
    cavv: NotRequired[Nullable[str]]
    eci: NotRequired[Nullable[str]]
    cardholder_info: NotRequired[Nullable[str]]


class ThreeDSecureV2(BaseModel):
    version: str

    authentication_response: OptionalNullable[str] = UNSET

    directory_response: OptionalNullable[str] = UNSET

    directory_transaction_id: OptionalNullable[str] = UNSET

    transaction_reason: OptionalNullable[str] = UNSET

    cavv: OptionalNullable[str] = UNSET

    eci: OptionalNullable[str] = UNSET

    cardholder_info: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "authentication_response",
            "directory_response",
            "directory_transaction_id",
            "transaction_reason",
            "cavv",
            "eci",
            "cardholder_info",
        ]
        nullable_fields = [
            "authentication_response",
            "directory_response",
            "directory_transaction_id",
            "transaction_reason",
            "cavv",
            "eci",
            "cardholder_info",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
