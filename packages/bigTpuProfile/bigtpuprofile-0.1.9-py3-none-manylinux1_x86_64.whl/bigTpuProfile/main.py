import os, sys, subprocess
import argparse as arg
from pathlib import Path
from bmprofile_perfAI_2260 import BMProfileParserPerfAI
from perfAI.perfAIDoc.run_doc import run_doc
from perfAI.perfAIWeb.run_web import run_web

# web_path = str(Path(__file__) / "PerfAI" / "PerfAI.web")
# if web_path not in sys.path:
#     sys.path.append(web_path)

def profileArgParser():
    parser = arg.ArgumentParser()
    # yapf: disable
    parser.add_argument("--arch", type=str.upper, default="BM1690", help="chip arch")
    parser.add_argument("input_dir", type=str, help="profile_data dir generated by bmruntime")
    parser.add_argument("output_dir", type=str, help="output dir that contains parsing result", default="profile_out")
    parser.add_argument("--num_core", default=8, type=int, help='The numer of TPU cores used for parallel computation')
    parser.add_argument('--disable_web', action='store_true', help='Disable generate web file')
    parser.add_argument('--disable_doc', action='store_true', help='Disable generate doc file')
    # yapf: enable
    return parser


def main():
    # base_path = os.path.dirname(os.path.abspath(__file__))
    parser = profileArgParser()
    args, unknown = parser.parse_known_args(sys.argv[1:] + ['profile_out'])
    if args.arch != "BM1690":
        raise RuntimeError(f"Not support arch {args.arch}")
    bmProfile = BMProfileParserPerfAI()
    bmProfile.parse(args.input_dir)
    bmProfile.to_txt(args.output_dir)
    target_dir = args.output_dir
    out_name = os.path.split(args.output_dir)[-1]


    if not args.disable_web:
        print("Generate web...")
        run_web(os.path.abspath(target_dir), 'PerfAI_web', '',  False, '', args.input_dir)

    if not args.disable_doc:
        print("Generate doc...")
        run_doc(os.path.abspath(target_dir), args.num_core, f'{out_name}.xlsx', 0, 1, 0, 0, args.input_dir)

if __name__ == "__main__":
    main()
