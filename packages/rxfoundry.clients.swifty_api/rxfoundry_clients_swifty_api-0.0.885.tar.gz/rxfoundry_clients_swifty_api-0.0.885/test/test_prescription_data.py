# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from rxfoundry.clients.swifty_api.models.prescription_data import PrescriptionData

class TestPrescriptionData(unittest.TestCase):
    """PrescriptionData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrescriptionData:
        """Test PrescriptionData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrescriptionData`
        """
        model = PrescriptionData()
        if include_optional:
            return PrescriptionData(
                external_rx_number = '',
                patient = rxfoundry.clients.swifty_api.models.patient.Patient(
                    uuid = '', 
                    last_name = '', 
                    first_name = '', 
                    middle_name = '', 
                    suffix = '', 
                    prefix = '', 
                    gender = rxfoundry.clients.swifty_api.models.code.Code(
                        uuid = '', 
                        code = '', 
                        description = '', ), 
                    date_of_birth = '', 
                    home_address = rxfoundry.clients.swifty_api.models.address.Address(
                        uuid = '', 
                        address_line_one = '', 
                        address_line_two = '', 
                        city = '', 
                        state_province = '', 
                        postal_code = '', 
                        country_code = '', 
                        longitude = 1.337, 
                        latitude = 1.337, 
                        distance = 1.337, ), 
                    primary_phone = '', 
                    alternate_phone = '', 
                    email = '', 
                    external_references = [
                        rxfoundry.clients.swifty_api.models.patient_external_identifier.PatientExternalIdentifier(
                            external_id = '', 
                            external_system_slug = '', 
                            external_email = '', 
                            external_mobile_phone = '', )
                        ], 
                    insurances = [
                        rxfoundry.clients.swifty_api.models.insurance.Insurance(
                            uuid = '', 
                            member_id = '', 
                            rx_bin = '', 
                            rx_pcn = '', 
                            rx_group = '', )
                        ], ),
                pharmacy = rxfoundry.clients.swifty_api.models.pharmacy.Pharmacy(
                    uuid = '', 
                    name = '', 
                    npi = '', 
                    ncpdp_id = '', 
                    other_organization_name = '', 
                    other_organization_name_type = rxfoundry.clients.swifty_api.models.code.Code(
                        uuid = '', 
                        code = '', 
                        description = '', ), 
                    practice_address = rxfoundry.clients.swifty_api.models.address.Address(
                        uuid = '', 
                        address_line_one = '', 
                        address_line_two = '', 
                        city = '', 
                        state_province = '', 
                        postal_code = '', 
                        country_code = '', 
                        longitude = 1.337, 
                        latitude = 1.337, 
                        distance = 1.337, ), 
                    taxonomies = [
                        rxfoundry.clients.swifty_api.models.code.Code(
                            uuid = '', 
                            code = '', 
                            description = '', )
                        ], 
                    networks = [
                        
                        ], 
                    other_identifiers = [
                        rxfoundry.clients.swifty_api.models.pharmacy_other_identifier.PharmacyOtherIdentifier(
                            identifier = '', 
                            identifier_type = , 
                            issuer = '', 
                            state = '', )
                        ], 
                    google_place_id = '', 
                    google_place_data = { }, 
                    pharmacy_chain = rxfoundry.clients.swifty_api.models.pharmacy_chain.PharmacyChain(
                        uuid = '', 
                        name = '', 
                        program_pricing = [
                            rxfoundry.clients.swifty_api.models.pharmacy_program_pricing.PharmacyProgramPricing(
                                pricing_program = rxfoundry.clients.swifty_api.models.pricing_program.PricingProgram(
                                    program_name = '', 
                                    program_description = '', ), 
                                from_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                to_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                dispensing_fee = 1.337, 
                                transaction_fee = 1.337, 
                                ingredient_cost_markup = 1.337, )
                            ], ), 
                    program_pricing = [
                        rxfoundry.clients.swifty_api.models.pharmacy_program_pricing.PharmacyProgramPricing(
                            from_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            to_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            dispensing_fee = 1.337, 
                            transaction_fee = 1.337, 
                            ingredient_cost_markup = 1.337, )
                        ], ),
                prescriber = rxfoundry.clients.swifty_api.models.prescriber.Prescriber(
                    uuid = '', 
                    last_name = '', 
                    first_name = '', 
                    middle_name = '', 
                    credentials_text = '', 
                    npi = '', 
                    dea_number = '', 
                    practice_address = rxfoundry.clients.swifty_api.models.address.Address(
                        uuid = '', 
                        address_line_one = '', 
                        address_line_two = '', 
                        city = '', 
                        state_province = '', 
                        postal_code = '', 
                        country_code = '', 
                        longitude = 1.337, 
                        latitude = 1.337, 
                        distance = 1.337, ), ),
                medication = rxfoundry.clients.swifty_api.models.medication.Medication(
                    uuid = '', 
                    drug_description = '', 
                    drug_strength = '', 
                    drug_strength_form = '', 
                    drug_strength_uom = '', 
                    is_brand = True, 
                    program_pricing = [
                        rxfoundry.clients.swifty_api.models.medication_program_pricing.MedicationProgramPricing(
                            pricing_program = rxfoundry.clients.swifty_api.models.pricing_program.PricingProgram(
                                program_name = '', 
                                program_description = '', ), 
                            from_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            to_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            ingredient_cost = 1.337, )
                        ], 
                    variants = [
                        rxfoundry.clients.swifty_api.models.medication_variant.MedicationVariant(
                            uuid = '', 
                            ndc = '', 
                            manufacturer = '', 
                            packaging = '', 
                            is_brand = True, )
                        ], 
                    medication_product_codes = [
                        rxfoundry.clients.swifty_api.models.code_qualifier_code.CodeQualifierCode(
                            uuid = '', 
                            code_qualifier = rxfoundry.clients.swifty_api.models.code.Code(
                                uuid = '', 
                                code = '', 
                                description = '', ), 
                            code = '', )
                        ], 
                    medication_drug_database_codes = [
                        rxfoundry.clients.swifty_api.models.code_qualifier_code.CodeQualifierCode(
                            uuid = '', 
                            code = '', )
                        ], ),
                number_of_refills = 56,
                quantity_value = 1.337,
                quantity_type = rxfoundry.clients.swifty_api.models.code.Code(
                    uuid = '', 
                    code = '', 
                    description = '', ),
                quantity_uom = rxfoundry.clients.swifty_api.models.code.Code(
                    uuid = '', 
                    code = '', 
                    description = '', ),
                days_supply = 56,
                written_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                substitutions = rxfoundry.clients.swifty_api.models.code.Code(
                    uuid = '', 
                    code = '', 
                    description = '', ),
                sig_text = ''
            )
        else:
            return PrescriptionData(
        )
        """

    def testPrescriptionData(self):
        """Test PrescriptionData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
