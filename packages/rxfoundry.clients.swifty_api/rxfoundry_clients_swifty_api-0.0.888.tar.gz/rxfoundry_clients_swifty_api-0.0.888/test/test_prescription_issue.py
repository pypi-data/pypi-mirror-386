# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from rxfoundry.clients.swifty_api.models.prescription_issue import PrescriptionIssue

class TestPrescriptionIssue(unittest.TestCase):
    """PrescriptionIssue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrescriptionIssue:
        """Test PrescriptionIssue
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrescriptionIssue`
        """
        model = PrescriptionIssue()
        if include_optional:
            return PrescriptionIssue(
                issues = [
                    ''
                    ],
                issue_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                issue_identified_by = '',
                issue_identified_by_user = rxfoundry.clients.swifty_api.models.user.User(
                    username = '', 
                    first_name = '', 
                    last_name = '', 
                    email = '', 
                    is_staff = True, 
                    is_superuser = True, ),
                issue_closed_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                issue_close_type = 'RxCancelled',
                issue_closed_by = '',
                issue_closed_by_user = rxfoundry.clients.swifty_api.models.user.User(
                    username = '', 
                    first_name = '', 
                    last_name = '', 
                    email = '', 
                    is_staff = True, 
                    is_superuser = True, )
            )
        else:
            return PrescriptionIssue(
        )
        """

    def testPrescriptionIssue(self):
        """Test PrescriptionIssue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
