# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from rxfoundry.clients.swifty_api.models.prescription_patch import PrescriptionPatch

class TestPrescriptionPatch(unittest.TestCase):
    """PrescriptionPatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrescriptionPatch:
        """Test PrescriptionPatch
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrescriptionPatch`
        """
        model = PrescriptionPatch()
        if include_optional:
            return PrescriptionPatch(
                sig_text = '',
                days_supply = 56,
                quantity_value = 1.337,
                number_of_fills = 56,
                original_sig_text = '',
                original_days_supply = 56,
                original_quantity_value = 1.337,
                original_number_of_fills = 56,
                patched_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                ignore_open_issues = True,
                patched_by = rxfoundry.clients.swifty_api.models.user.User(
                    username = '', 
                    first_name = '', 
                    last_name = '', 
                    email = '', 
                    is_staff = True, 
                    is_superuser = True, )
            )
        else:
            return PrescriptionPatch(
        )
        """

    def testPrescriptionPatch(self):
        """Test PrescriptionPatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
