# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.prescription_message_type import PrescriptionMessageType
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionMessage(BaseModel):
    """
    PrescriptionMessage
    """ # noqa: E501
    uuid: Optional[StrictStr] = Field(default=None, description="The internal uuid for this message")
    created_on: Optional[datetime] = Field(default=None, description="The date and time this message was created")
    message_id: Optional[StrictStr] = Field(default=None, description="The external message id for this message")
    message_type: Optional[PrescriptionMessageType] = None
    is_completed: Optional[StrictBool] = Field(default=None, description="Whether or not this message has been completed")
    message_json: Optional[Dict[str, Any]] = Field(default=None, description="The original message payload")
    __properties: ClassVar[List[str]] = ["uuid", "created_on", "message_id", "message_type", "is_completed", "message_json"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "created_on": obj.get("created_on"),
            "message_id": obj.get("message_id"),
            "message_type": obj.get("message_type"),
            "is_completed": obj.get("is_completed"),
            "message_json": obj.get("message_json")
        })
        return _obj


