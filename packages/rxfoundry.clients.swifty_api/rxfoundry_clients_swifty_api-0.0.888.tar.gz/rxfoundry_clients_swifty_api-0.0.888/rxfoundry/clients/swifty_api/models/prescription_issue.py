# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionIssue(BaseModel):
    """
    PrescriptionIssue
    """ # noqa: E501
    issues: Optional[List[StrictStr]] = None
    issue_date: Optional[datetime] = None
    issue_identified_by: Optional[StrictStr] = None
    issue_identified_by_user: Optional[User] = None
    issue_closed_on: Optional[datetime] = None
    issue_close_type: Optional[StrictStr] = None
    issue_closed_by: Optional[StrictStr] = None
    issue_closed_by_user: Optional[User] = None
    __properties: ClassVar[List[str]] = ["issues", "issue_date", "issue_identified_by", "issue_identified_by_user", "issue_closed_on", "issue_close_type", "issue_closed_by", "issue_closed_by_user"]

    @field_validator('issue_close_type')
    def issue_close_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RxCancelled', 'RxUpdated', 'RxRechecked', 'Ignored']):
            raise ValueError("must be one of enum values ('RxCancelled', 'RxUpdated', 'RxRechecked', 'Ignored')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of issue_identified_by_user
        if self.issue_identified_by_user:
            _dict['issue_identified_by_user'] = self.issue_identified_by_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issue_closed_by_user
        if self.issue_closed_by_user:
            _dict['issue_closed_by_user'] = self.issue_closed_by_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issues": obj.get("issues"),
            "issue_date": obj.get("issue_date"),
            "issue_identified_by": obj.get("issue_identified_by"),
            "issue_identified_by_user": User.from_dict(obj["issue_identified_by_user"]) if obj.get("issue_identified_by_user") is not None else None,
            "issue_closed_on": obj.get("issue_closed_on"),
            "issue_close_type": obj.get("issue_close_type"),
            "issue_closed_by": obj.get("issue_closed_by"),
            "issue_closed_by_user": User.from_dict(obj["issue_closed_by_user"]) if obj.get("issue_closed_by_user") is not None else None
        })
        return _obj


