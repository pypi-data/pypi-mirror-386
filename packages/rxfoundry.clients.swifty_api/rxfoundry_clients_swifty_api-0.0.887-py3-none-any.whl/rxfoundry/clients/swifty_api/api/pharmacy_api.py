# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from rxfoundry.clients.swifty_api.models.pharmacy import Pharmacy

from rxfoundry.clients.swifty_api.api_client import ApiClient, RequestSerialized
from rxfoundry.clients.swifty_api.api_response import ApiResponse
from rxfoundry.clients.swifty_api.rest import RESTResponseType


class PharmacyApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_pharmacies(
        self,
        q: Annotated[Optional[StrictStr], Field(description="Filter medications by query.  Searches on NPI, first name, last name, practice address street one,  practice address city, practice address state, pharmacy networks and taxonomy codes.  Takes precedence  over other filters if set to anything other that '*' ")] = None,
        networks: Annotated[Optional[List[StrictStr]], Field(description="Filter pharmacies by network(s) using the network names. q has to be set to '*' for this to work.")] = None,
        near: Annotated[Optional[StrictStr], Field(description="The lat,lon to search near.  q has to be set to '*' for this to work and distance has to be set.")] = None,
        distance: Annotated[Optional[StrictInt], Field(description="The distance to search, in miles from the lat,lon location.  q has to be set to '*' for this to work.")] = None,
        pricing_program: Annotated[Optional[StrictStr], Field(description="The pricing program to return pricing program data for.  Only one pricing program can be passed in at a time.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number to return.  Defaults to 1.")] = None,
        results_per_page: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.  Defaults to 10.")] = None,
        deep: Annotated[Optional[StrictBool], Field(description="Returned contained objects for the pharmacy or just minimal information.  Defaults to false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Pharmacy]:
        """Get all pharmacies


        :param q: Filter medications by query.  Searches on NPI, first name, last name, practice address street one,  practice address city, practice address state, pharmacy networks and taxonomy codes.  Takes precedence  over other filters if set to anything other that '*' 
        :type q: str
        :param networks: Filter pharmacies by network(s) using the network names. q has to be set to '*' for this to work.
        :type networks: List[str]
        :param near: The lat,lon to search near.  q has to be set to '*' for this to work and distance has to be set.
        :type near: str
        :param distance: The distance to search, in miles from the lat,lon location.  q has to be set to '*' for this to work.
        :type distance: int
        :param pricing_program: The pricing program to return pricing program data for.  Only one pricing program can be passed in at a time.
        :type pricing_program: str
        :param page: Page number to return.  Defaults to 1.
        :type page: int
        :param results_per_page: Number of results to return per page.  Defaults to 10.
        :type results_per_page: int
        :param deep: Returned contained objects for the pharmacy or just minimal information.  Defaults to false.
        :type deep: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pharmacies_serialize(
            q=q,
            networks=networks,
            near=near,
            distance=distance,
            pricing_program=pricing_program,
            page=page,
            results_per_page=results_per_page,
            deep=deep,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Pharmacy]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pharmacies_with_http_info(
        self,
        q: Annotated[Optional[StrictStr], Field(description="Filter medications by query.  Searches on NPI, first name, last name, practice address street one,  practice address city, practice address state, pharmacy networks and taxonomy codes.  Takes precedence  over other filters if set to anything other that '*' ")] = None,
        networks: Annotated[Optional[List[StrictStr]], Field(description="Filter pharmacies by network(s) using the network names. q has to be set to '*' for this to work.")] = None,
        near: Annotated[Optional[StrictStr], Field(description="The lat,lon to search near.  q has to be set to '*' for this to work and distance has to be set.")] = None,
        distance: Annotated[Optional[StrictInt], Field(description="The distance to search, in miles from the lat,lon location.  q has to be set to '*' for this to work.")] = None,
        pricing_program: Annotated[Optional[StrictStr], Field(description="The pricing program to return pricing program data for.  Only one pricing program can be passed in at a time.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number to return.  Defaults to 1.")] = None,
        results_per_page: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.  Defaults to 10.")] = None,
        deep: Annotated[Optional[StrictBool], Field(description="Returned contained objects for the pharmacy or just minimal information.  Defaults to false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Pharmacy]]:
        """Get all pharmacies


        :param q: Filter medications by query.  Searches on NPI, first name, last name, practice address street one,  practice address city, practice address state, pharmacy networks and taxonomy codes.  Takes precedence  over other filters if set to anything other that '*' 
        :type q: str
        :param networks: Filter pharmacies by network(s) using the network names. q has to be set to '*' for this to work.
        :type networks: List[str]
        :param near: The lat,lon to search near.  q has to be set to '*' for this to work and distance has to be set.
        :type near: str
        :param distance: The distance to search, in miles from the lat,lon location.  q has to be set to '*' for this to work.
        :type distance: int
        :param pricing_program: The pricing program to return pricing program data for.  Only one pricing program can be passed in at a time.
        :type pricing_program: str
        :param page: Page number to return.  Defaults to 1.
        :type page: int
        :param results_per_page: Number of results to return per page.  Defaults to 10.
        :type results_per_page: int
        :param deep: Returned contained objects for the pharmacy or just minimal information.  Defaults to false.
        :type deep: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pharmacies_serialize(
            q=q,
            networks=networks,
            near=near,
            distance=distance,
            pricing_program=pricing_program,
            page=page,
            results_per_page=results_per_page,
            deep=deep,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Pharmacy]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pharmacies_without_preload_content(
        self,
        q: Annotated[Optional[StrictStr], Field(description="Filter medications by query.  Searches on NPI, first name, last name, practice address street one,  practice address city, practice address state, pharmacy networks and taxonomy codes.  Takes precedence  over other filters if set to anything other that '*' ")] = None,
        networks: Annotated[Optional[List[StrictStr]], Field(description="Filter pharmacies by network(s) using the network names. q has to be set to '*' for this to work.")] = None,
        near: Annotated[Optional[StrictStr], Field(description="The lat,lon to search near.  q has to be set to '*' for this to work and distance has to be set.")] = None,
        distance: Annotated[Optional[StrictInt], Field(description="The distance to search, in miles from the lat,lon location.  q has to be set to '*' for this to work.")] = None,
        pricing_program: Annotated[Optional[StrictStr], Field(description="The pricing program to return pricing program data for.  Only one pricing program can be passed in at a time.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number to return.  Defaults to 1.")] = None,
        results_per_page: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.  Defaults to 10.")] = None,
        deep: Annotated[Optional[StrictBool], Field(description="Returned contained objects for the pharmacy or just minimal information.  Defaults to false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pharmacies


        :param q: Filter medications by query.  Searches on NPI, first name, last name, practice address street one,  practice address city, practice address state, pharmacy networks and taxonomy codes.  Takes precedence  over other filters if set to anything other that '*' 
        :type q: str
        :param networks: Filter pharmacies by network(s) using the network names. q has to be set to '*' for this to work.
        :type networks: List[str]
        :param near: The lat,lon to search near.  q has to be set to '*' for this to work and distance has to be set.
        :type near: str
        :param distance: The distance to search, in miles from the lat,lon location.  q has to be set to '*' for this to work.
        :type distance: int
        :param pricing_program: The pricing program to return pricing program data for.  Only one pricing program can be passed in at a time.
        :type pricing_program: str
        :param page: Page number to return.  Defaults to 1.
        :type page: int
        :param results_per_page: Number of results to return per page.  Defaults to 10.
        :type results_per_page: int
        :param deep: Returned contained objects for the pharmacy or just minimal information.  Defaults to false.
        :type deep: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pharmacies_serialize(
            q=q,
            networks=networks,
            near=near,
            distance=distance,
            pricing_program=pricing_program,
            page=page,
            results_per_page=results_per_page,
            deep=deep,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Pharmacy]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pharmacies_serialize(
        self,
        q,
        networks,
        near,
        distance,
        pricing_program,
        page,
        results_per_page,
        deep,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'networks': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if networks is not None:
            
            _query_params.append(('networks', networks))
            
        if near is not None:
            
            _query_params.append(('near', near))
            
        if distance is not None:
            
            _query_params.append(('distance', distance))
            
        if pricing_program is not None:
            
            _query_params.append(('pricing_program', pricing_program))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if results_per_page is not None:
            
            _query_params.append(('results_per_page', results_per_page))
            
        if deep is not None:
            
            _query_params.append(('deep', deep))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'opaque_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/swifty/1/pharmacies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_pharmacy(
        self,
        pharmacy_id: Annotated[StrictStr, Field(description="Either UUID or NPI of the pharmacy")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Pharmacy:
        """Get a pharmacy by UUID or NPI


        :param pharmacy_id: Either UUID or NPI of the pharmacy (required)
        :type pharmacy_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pharmacy_serialize(
            pharmacy_id=pharmacy_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Pharmacy",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pharmacy_with_http_info(
        self,
        pharmacy_id: Annotated[StrictStr, Field(description="Either UUID or NPI of the pharmacy")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Pharmacy]:
        """Get a pharmacy by UUID or NPI


        :param pharmacy_id: Either UUID or NPI of the pharmacy (required)
        :type pharmacy_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pharmacy_serialize(
            pharmacy_id=pharmacy_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Pharmacy",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pharmacy_without_preload_content(
        self,
        pharmacy_id: Annotated[StrictStr, Field(description="Either UUID or NPI of the pharmacy")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a pharmacy by UUID or NPI


        :param pharmacy_id: Either UUID or NPI of the pharmacy (required)
        :type pharmacy_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pharmacy_serialize(
            pharmacy_id=pharmacy_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Pharmacy",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pharmacy_serialize(
        self,
        pharmacy_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if pharmacy_id is not None:
            _path_params['pharmacy_id'] = pharmacy_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'opaque_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/swifty/1/pharmacies/{pharmacy_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


