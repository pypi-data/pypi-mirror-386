# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.code_qualifier_code import CodeQualifierCode
from rxfoundry.clients.swifty_api.models.medication_program_pricing import MedicationProgramPricing
from rxfoundry.clients.swifty_api.models.medication_variant import MedicationVariant
from typing import Optional, Set
from typing_extensions import Self

class Medication(BaseModel):
    """
    Medication
    """ # noqa: E501
    uuid: Optional[StrictStr] = None
    drug_description: Optional[StrictStr] = None
    drug_strength: Optional[StrictStr] = None
    drug_strength_form: Optional[StrictStr] = None
    drug_strength_uom: Optional[StrictStr] = None
    is_brand: Optional[StrictBool] = None
    program_pricing: Optional[List[MedicationProgramPricing]] = None
    variants: Optional[List[MedicationVariant]] = None
    medication_product_codes: Optional[List[CodeQualifierCode]] = None
    medication_drug_database_codes: Optional[List[CodeQualifierCode]] = None
    __properties: ClassVar[List[str]] = ["uuid", "drug_description", "drug_strength", "drug_strength_form", "drug_strength_uom", "is_brand", "program_pricing", "variants", "medication_product_codes", "medication_drug_database_codes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Medication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in program_pricing (list)
        _items = []
        if self.program_pricing:
            for _item_program_pricing in self.program_pricing:
                if _item_program_pricing:
                    _items.append(_item_program_pricing.to_dict())
            _dict['program_pricing'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item_variants in self.variants:
                if _item_variants:
                    _items.append(_item_variants.to_dict())
            _dict['variants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in medication_product_codes (list)
        _items = []
        if self.medication_product_codes:
            for _item_medication_product_codes in self.medication_product_codes:
                if _item_medication_product_codes:
                    _items.append(_item_medication_product_codes.to_dict())
            _dict['medication_product_codes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in medication_drug_database_codes (list)
        _items = []
        if self.medication_drug_database_codes:
            for _item_medication_drug_database_codes in self.medication_drug_database_codes:
                if _item_medication_drug_database_codes:
                    _items.append(_item_medication_drug_database_codes.to_dict())
            _dict['medication_drug_database_codes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Medication from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "drug_description": obj.get("drug_description"),
            "drug_strength": obj.get("drug_strength"),
            "drug_strength_form": obj.get("drug_strength_form"),
            "drug_strength_uom": obj.get("drug_strength_uom"),
            "is_brand": obj.get("is_brand"),
            "program_pricing": [MedicationProgramPricing.from_dict(_item) for _item in obj["program_pricing"]] if obj.get("program_pricing") is not None else None,
            "variants": [MedicationVariant.from_dict(_item) for _item in obj["variants"]] if obj.get("variants") is not None else None,
            "medication_product_codes": [CodeQualifierCode.from_dict(_item) for _item in obj["medication_product_codes"]] if obj.get("medication_product_codes") is not None else None,
            "medication_drug_database_codes": [CodeQualifierCode.from_dict(_item) for _item in obj["medication_drug_database_codes"]] if obj.get("medication_drug_database_codes") is not None else None
        })
        return _obj


