# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionData(BaseModel):
    """
    PrescriptionData
    """ # noqa: E501
    source: StrictStr = Field(description="The source of this prescription data.")
    external_rx_number: Optional[StrictStr] = Field(default=None, description="The prescription number as it appears in the system sending this prescription.")
    external_system_slug: Optional[StrictStr] = Field(default=None, description="The slug of the system sending this prescription.")
    patient_ref: StrictStr = Field(description="The identifier for the patient.  It can be the patient uuid or the patient external identifier in the form slug:identifier")
    prescriber_ref: StrictStr = Field(description="The identifier for the prescriber.  It can be the prescriber uuid or the prescriber's npi.")
    medication_ref: StrictStr = Field(description="The identifier for the medication.  It can be the medication uuid or an ndc for a medication variant of the medication.")
    number_of_refills: StrictInt = Field(description="The number of refills for the prescription.  This is the total fills - 1.")
    quantity_value: Union[StrictFloat, StrictInt] = Field(description="The total quantity prescribed for the prescription.  It should be equal to Days_Supply * (number_of_refills + 1)")
    days_supply: StrictInt = Field(description="The number of days a fill will last when taken as prescribed.")
    written_date: date
    substitutions_code: Optional[StrictStr] = Field(default=None, description="The code for the substitutions.  It should be one of the values in the list TherapeuticSubstitutionIndicatorType")
    sig_text: StrictStr = Field(description="The instructions on how to take the prescription.")
    __properties: ClassVar[List[str]] = ["source", "external_rx_number", "external_system_slug", "patient_ref", "prescriber_ref", "medication_ref", "number_of_refills", "quantity_value", "days_supply", "written_date", "substitutions_code", "sig_text"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['TransferInDirect', 'NewRxSwiftyDirect']):
            raise ValueError("must be one of enum values ('TransferInDirect', 'NewRxSwiftyDirect')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": obj.get("source"),
            "external_rx_number": obj.get("external_rx_number"),
            "external_system_slug": obj.get("external_system_slug"),
            "patient_ref": obj.get("patient_ref"),
            "prescriber_ref": obj.get("prescriber_ref"),
            "medication_ref": obj.get("medication_ref"),
            "number_of_refills": obj.get("number_of_refills"),
            "quantity_value": obj.get("quantity_value"),
            "days_supply": obj.get("days_supply"),
            "written_date": obj.get("written_date"),
            "substitutions_code": obj.get("substitutions_code"),
            "sig_text": obj.get("sig_text")
        })
        return _obj


