# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.code import Code
from rxfoundry.clients.swifty_api.models.prescription_message_task import PrescriptionMessageTask
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionChangeRequest(BaseModel):
    """
    PrescriptionChangeRequest
    """ # noqa: E501
    message_id: Optional[StrictStr] = Field(default=None, description="The message id for this change request")
    prescription_number: Optional[StrictStr] = Field(default=None, description="The Swifty prescription number to request a change for")
    change_request_code: Optional[Code] = None
    change_request_sub_code: Optional[Code] = None
    change_request_text: Optional[StrictStr] = Field(default=None, description="What specifically is being requested to be changed")
    urgency: Optional[Code] = None
    requested_on: Optional[datetime] = None
    tasks: Optional[List[PrescriptionMessageTask]] = None
    __properties: ClassVar[List[str]] = ["message_id", "prescription_number", "change_request_code", "change_request_sub_code", "change_request_text", "urgency", "requested_on", "tasks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionChangeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of change_request_code
        if self.change_request_code:
            _dict['change_request_code'] = self.change_request_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of change_request_sub_code
        if self.change_request_sub_code:
            _dict['change_request_sub_code'] = self.change_request_sub_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of urgency
        if self.urgency:
            _dict['urgency'] = self.urgency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item_tasks in self.tasks:
                if _item_tasks:
                    _items.append(_item_tasks.to_dict())
            _dict['tasks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionChangeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message_id": obj.get("message_id"),
            "prescription_number": obj.get("prescription_number"),
            "change_request_code": Code.from_dict(obj["change_request_code"]) if obj.get("change_request_code") is not None else None,
            "change_request_sub_code": Code.from_dict(obj["change_request_sub_code"]) if obj.get("change_request_sub_code") is not None else None,
            "change_request_text": obj.get("change_request_text"),
            "urgency": Code.from_dict(obj["urgency"]) if obj.get("urgency") is not None else None,
            "requested_on": obj.get("requested_on"),
            "tasks": [PrescriptionMessageTask.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None
        })
        return _obj


