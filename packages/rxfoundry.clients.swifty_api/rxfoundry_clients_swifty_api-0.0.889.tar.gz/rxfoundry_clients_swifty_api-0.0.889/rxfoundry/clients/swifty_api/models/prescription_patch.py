# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from rxfoundry.clients.swifty_api.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionPatch(BaseModel):
    """
    PrescriptionPatch
    """ # noqa: E501
    sig_text: Optional[StrictStr] = None
    days_supply: Optional[StrictInt] = None
    quantity_value: Optional[Union[StrictFloat, StrictInt]] = None
    number_of_fills: Optional[StrictInt] = None
    original_sig_text: Optional[StrictStr] = None
    original_days_supply: Optional[StrictInt] = None
    original_quantity_value: Optional[Union[StrictFloat, StrictInt]] = None
    original_number_of_fills: Optional[StrictInt] = None
    patched_on: Optional[datetime] = None
    ignore_open_issues: Optional[StrictBool] = None
    patched_by: Optional[User] = None
    __properties: ClassVar[List[str]] = ["sig_text", "days_supply", "quantity_value", "number_of_fills", "original_sig_text", "original_days_supply", "original_quantity_value", "original_number_of_fills", "patched_on", "ignore_open_issues", "patched_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of patched_by
        if self.patched_by:
            _dict['patched_by'] = self.patched_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sig_text": obj.get("sig_text"),
            "days_supply": obj.get("days_supply"),
            "quantity_value": obj.get("quantity_value"),
            "number_of_fills": obj.get("number_of_fills"),
            "original_sig_text": obj.get("original_sig_text"),
            "original_days_supply": obj.get("original_days_supply"),
            "original_quantity_value": obj.get("original_quantity_value"),
            "original_number_of_fills": obj.get("original_number_of_fills"),
            "patched_on": obj.get("patched_on"),
            "ignore_open_issues": obj.get("ignore_open_issues"),
            "patched_by": User.from_dict(obj["patched_by"]) if obj.get("patched_by") is not None else None
        })
        return _obj


