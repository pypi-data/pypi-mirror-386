# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.address import Address
from rxfoundry.clients.swifty_api.models.code import Code
from rxfoundry.clients.swifty_api.models.pharmacy_chain import PharmacyChain
from rxfoundry.clients.swifty_api.models.pharmacy_other_identifier import PharmacyOtherIdentifier
from rxfoundry.clients.swifty_api.models.pharmacy_program_pricing import PharmacyProgramPricing
from typing import Optional, Set
from typing_extensions import Self

class Pharmacy(BaseModel):
    """
    Pharmacy
    """ # noqa: E501
    uuid: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    npi: Optional[StrictStr] = None
    ncpdp_id: Optional[StrictStr] = None
    other_organization_name: Optional[StrictStr] = None
    other_organization_name_type: Optional[Code] = None
    practice_address: Optional[Address] = None
    taxonomies: Optional[List[Code]] = None
    networks: Optional[List[Code]] = None
    other_identifiers: Optional[List[PharmacyOtherIdentifier]] = None
    google_place_id: Optional[StrictStr] = None
    google_place_data: Optional[Dict[str, Any]] = None
    pharmacy_chain: Optional[PharmacyChain] = None
    program_pricing: Optional[List[PharmacyProgramPricing]] = None
    __properties: ClassVar[List[str]] = ["uuid", "name", "npi", "ncpdp_id", "other_organization_name", "other_organization_name_type", "practice_address", "taxonomies", "networks", "other_identifiers", "google_place_id", "google_place_data", "pharmacy_chain", "program_pricing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pharmacy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of other_organization_name_type
        if self.other_organization_name_type:
            _dict['other_organization_name_type'] = self.other_organization_name_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of practice_address
        if self.practice_address:
            _dict['practice_address'] = self.practice_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taxonomies (list)
        _items = []
        if self.taxonomies:
            for _item_taxonomies in self.taxonomies:
                if _item_taxonomies:
                    _items.append(_item_taxonomies.to_dict())
            _dict['taxonomies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item_networks in self.networks:
                if _item_networks:
                    _items.append(_item_networks.to_dict())
            _dict['networks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in other_identifiers (list)
        _items = []
        if self.other_identifiers:
            for _item_other_identifiers in self.other_identifiers:
                if _item_other_identifiers:
                    _items.append(_item_other_identifiers.to_dict())
            _dict['other_identifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of pharmacy_chain
        if self.pharmacy_chain:
            _dict['pharmacy_chain'] = self.pharmacy_chain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in program_pricing (list)
        _items = []
        if self.program_pricing:
            for _item_program_pricing in self.program_pricing:
                if _item_program_pricing:
                    _items.append(_item_program_pricing.to_dict())
            _dict['program_pricing'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pharmacy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "npi": obj.get("npi"),
            "ncpdp_id": obj.get("ncpdp_id"),
            "other_organization_name": obj.get("other_organization_name"),
            "other_organization_name_type": Code.from_dict(obj["other_organization_name_type"]) if obj.get("other_organization_name_type") is not None else None,
            "practice_address": Address.from_dict(obj["practice_address"]) if obj.get("practice_address") is not None else None,
            "taxonomies": [Code.from_dict(_item) for _item in obj["taxonomies"]] if obj.get("taxonomies") is not None else None,
            "networks": [Code.from_dict(_item) for _item in obj["networks"]] if obj.get("networks") is not None else None,
            "other_identifiers": [PharmacyOtherIdentifier.from_dict(_item) for _item in obj["other_identifiers"]] if obj.get("other_identifiers") is not None else None,
            "google_place_id": obj.get("google_place_id"),
            "google_place_data": obj.get("google_place_data"),
            "pharmacy_chain": PharmacyChain.from_dict(obj["pharmacy_chain"]) if obj.get("pharmacy_chain") is not None else None,
            "program_pricing": [PharmacyProgramPricing.from_dict(_item) for _item in obj["program_pricing"]] if obj.get("program_pricing") is not None else None
        })
        return _obj


