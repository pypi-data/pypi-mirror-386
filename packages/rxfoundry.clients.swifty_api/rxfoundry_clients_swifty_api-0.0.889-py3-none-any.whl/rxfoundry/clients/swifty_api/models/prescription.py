# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from rxfoundry.clients.swifty_api.models.code import Code
from rxfoundry.clients.swifty_api.models.medication import Medication
from rxfoundry.clients.swifty_api.models.patient import Patient
from rxfoundry.clients.swifty_api.models.pharmacy import Pharmacy
from rxfoundry.clients.swifty_api.models.prescriber import Prescriber
from rxfoundry.clients.swifty_api.models.prescription_change_request import PrescriptionChangeRequest
from rxfoundry.clients.swifty_api.models.prescription_issue import PrescriptionIssue
from rxfoundry.clients.swifty_api.models.prescription_message import PrescriptionMessage
from rxfoundry.clients.swifty_api.models.prescription_patch import PrescriptionPatch
from rxfoundry.clients.swifty_api.models.prescription_task import PrescriptionTask
from rxfoundry.clients.swifty_api.models.prescription_verification import PrescriptionVerification
from rxfoundry.clients.swifty_api.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Prescription(BaseModel):
    """
    Prescription
    """ # noqa: E501
    uuid: Optional[StrictStr] = None
    rx_number: Optional[StrictStr] = None
    prescriber_order_number: Optional[StrictStr] = None
    patient: Optional[Patient] = None
    pharmacy: Optional[Pharmacy] = None
    prescriber: Optional[Prescriber] = None
    drug_description: Optional[StrictStr] = None
    prescribed_ndc: Optional[StrictStr] = None
    medication: Optional[Medication] = None
    number_of_fills: Optional[StrictInt] = None
    quantity_value: Optional[Union[StrictFloat, StrictInt]] = None
    quantity_type: Optional[Code] = None
    quantity_uom: Optional[Code] = None
    days_supply: Optional[StrictInt] = None
    written_date: Optional[date] = None
    substitutions: Optional[Code] = None
    sig_text: Optional[StrictStr] = None
    structured_sig_snomed_verson: Optional[StrictStr] = None
    structured_sig_fmt_version: Optional[StrictStr] = None
    structured_sig_instructions: Optional[Dict[str, Any]] = None
    structured_sig_indications: Optional[Dict[str, Any]] = None
    structured_sig_max_does_restrictions: Optional[Dict[str, Any]] = None
    structured_sig_clarifying_free_text: Optional[StrictStr] = None
    rx_fill_indicators: Optional[List[Code]] = None
    pv0: Optional[PrescriptionVerification] = None
    pv1: Optional[PrescriptionVerification] = None
    is_on_formulary: Optional[StrictBool] = None
    has_open_issues: Optional[StrictBool] = None
    ignore_open_issues: Optional[StrictBool] = None
    has_running_workflow: Optional[StrictBool] = None
    notified_on: Optional[datetime] = None
    prescription_issues: Optional[List[PrescriptionIssue]] = None
    prescription_messages: Optional[List[PrescriptionMessage]] = None
    prescription_tasks: Optional[List[PrescriptionTask]] = None
    prescription_edits: Optional[List[PrescriptionPatch]] = None
    prescription_change_requests: Optional[List[PrescriptionChangeRequest]] = None
    transfer_requested_on: Optional[datetime] = None
    transfer_requested_to: Optional[Pharmacy] = None
    transferred_on: Optional[datetime] = None
    transfer_type: Optional[StrictStr] = None
    transferred_by: Optional[User] = None
    change_requested_on: Optional[datetime] = None
    change_request_closed_on: Optional[datetime] = None
    change_request_approved: Optional[StrictBool] = None
    original_image_pdf: Optional[StrictStr] = None
    original_image_png: Optional[StrictStr] = None
    image_pdf: Optional[StrictStr] = None
    image_png: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["uuid", "rx_number", "prescriber_order_number", "patient", "pharmacy", "prescriber", "drug_description", "prescribed_ndc", "medication", "number_of_fills", "quantity_value", "quantity_type", "quantity_uom", "days_supply", "written_date", "substitutions", "sig_text", "structured_sig_snomed_verson", "structured_sig_fmt_version", "structured_sig_instructions", "structured_sig_indications", "structured_sig_max_does_restrictions", "structured_sig_clarifying_free_text", "rx_fill_indicators", "pv0", "pv1", "is_on_formulary", "has_open_issues", "ignore_open_issues", "has_running_workflow", "notified_on", "prescription_issues", "prescription_messages", "prescription_tasks", "prescription_edits", "prescription_change_requests", "transfer_requested_on", "transfer_requested_to", "transferred_on", "transfer_type", "transferred_by", "change_requested_on", "change_request_closed_on", "change_request_approved", "original_image_pdf", "original_image_png", "image_pdf", "image_png"]

    @field_validator('transfer_type')
    def transfer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['API', 'MANUAL', 'SURESCRIPTS', 'FAX']):
            raise ValueError("must be one of enum values ('API', 'MANUAL', 'SURESCRIPTS', 'FAX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Prescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of patient
        if self.patient:
            _dict['patient'] = self.patient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pharmacy
        if self.pharmacy:
            _dict['pharmacy'] = self.pharmacy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prescriber
        if self.prescriber:
            _dict['prescriber'] = self.prescriber.to_dict()
        # override the default output from pydantic by calling `to_dict()` of medication
        if self.medication:
            _dict['medication'] = self.medication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quantity_type
        if self.quantity_type:
            _dict['quantity_type'] = self.quantity_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quantity_uom
        if self.quantity_uom:
            _dict['quantity_uom'] = self.quantity_uom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of substitutions
        if self.substitutions:
            _dict['substitutions'] = self.substitutions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rx_fill_indicators (list)
        _items = []
        if self.rx_fill_indicators:
            for _item_rx_fill_indicators in self.rx_fill_indicators:
                if _item_rx_fill_indicators:
                    _items.append(_item_rx_fill_indicators.to_dict())
            _dict['rx_fill_indicators'] = _items
        # override the default output from pydantic by calling `to_dict()` of pv0
        if self.pv0:
            _dict['pv0'] = self.pv0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pv1
        if self.pv1:
            _dict['pv1'] = self.pv1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in prescription_issues (list)
        _items = []
        if self.prescription_issues:
            for _item_prescription_issues in self.prescription_issues:
                if _item_prescription_issues:
                    _items.append(_item_prescription_issues.to_dict())
            _dict['prescription_issues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prescription_messages (list)
        _items = []
        if self.prescription_messages:
            for _item_prescription_messages in self.prescription_messages:
                if _item_prescription_messages:
                    _items.append(_item_prescription_messages.to_dict())
            _dict['prescription_messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prescription_tasks (list)
        _items = []
        if self.prescription_tasks:
            for _item_prescription_tasks in self.prescription_tasks:
                if _item_prescription_tasks:
                    _items.append(_item_prescription_tasks.to_dict())
            _dict['prescription_tasks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prescription_edits (list)
        _items = []
        if self.prescription_edits:
            for _item_prescription_edits in self.prescription_edits:
                if _item_prescription_edits:
                    _items.append(_item_prescription_edits.to_dict())
            _dict['prescription_edits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prescription_change_requests (list)
        _items = []
        if self.prescription_change_requests:
            for _item_prescription_change_requests in self.prescription_change_requests:
                if _item_prescription_change_requests:
                    _items.append(_item_prescription_change_requests.to_dict())
            _dict['prescription_change_requests'] = _items
        # override the default output from pydantic by calling `to_dict()` of transfer_requested_to
        if self.transfer_requested_to:
            _dict['transfer_requested_to'] = self.transfer_requested_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transferred_by
        if self.transferred_by:
            _dict['transferred_by'] = self.transferred_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Prescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "rx_number": obj.get("rx_number"),
            "prescriber_order_number": obj.get("prescriber_order_number"),
            "patient": Patient.from_dict(obj["patient"]) if obj.get("patient") is not None else None,
            "pharmacy": Pharmacy.from_dict(obj["pharmacy"]) if obj.get("pharmacy") is not None else None,
            "prescriber": Prescriber.from_dict(obj["prescriber"]) if obj.get("prescriber") is not None else None,
            "drug_description": obj.get("drug_description"),
            "prescribed_ndc": obj.get("prescribed_ndc"),
            "medication": Medication.from_dict(obj["medication"]) if obj.get("medication") is not None else None,
            "number_of_fills": obj.get("number_of_fills"),
            "quantity_value": obj.get("quantity_value"),
            "quantity_type": Code.from_dict(obj["quantity_type"]) if obj.get("quantity_type") is not None else None,
            "quantity_uom": Code.from_dict(obj["quantity_uom"]) if obj.get("quantity_uom") is not None else None,
            "days_supply": obj.get("days_supply"),
            "written_date": obj.get("written_date"),
            "substitutions": Code.from_dict(obj["substitutions"]) if obj.get("substitutions") is not None else None,
            "sig_text": obj.get("sig_text"),
            "structured_sig_snomed_verson": obj.get("structured_sig_snomed_verson"),
            "structured_sig_fmt_version": obj.get("structured_sig_fmt_version"),
            "structured_sig_instructions": obj.get("structured_sig_instructions"),
            "structured_sig_indications": obj.get("structured_sig_indications"),
            "structured_sig_max_does_restrictions": obj.get("structured_sig_max_does_restrictions"),
            "structured_sig_clarifying_free_text": obj.get("structured_sig_clarifying_free_text"),
            "rx_fill_indicators": [Code.from_dict(_item) for _item in obj["rx_fill_indicators"]] if obj.get("rx_fill_indicators") is not None else None,
            "pv0": PrescriptionVerification.from_dict(obj["pv0"]) if obj.get("pv0") is not None else None,
            "pv1": PrescriptionVerification.from_dict(obj["pv1"]) if obj.get("pv1") is not None else None,
            "is_on_formulary": obj.get("is_on_formulary"),
            "has_open_issues": obj.get("has_open_issues"),
            "ignore_open_issues": obj.get("ignore_open_issues"),
            "has_running_workflow": obj.get("has_running_workflow"),
            "notified_on": obj.get("notified_on"),
            "prescription_issues": [PrescriptionIssue.from_dict(_item) for _item in obj["prescription_issues"]] if obj.get("prescription_issues") is not None else None,
            "prescription_messages": [PrescriptionMessage.from_dict(_item) for _item in obj["prescription_messages"]] if obj.get("prescription_messages") is not None else None,
            "prescription_tasks": [PrescriptionTask.from_dict(_item) for _item in obj["prescription_tasks"]] if obj.get("prescription_tasks") is not None else None,
            "prescription_edits": [PrescriptionPatch.from_dict(_item) for _item in obj["prescription_edits"]] if obj.get("prescription_edits") is not None else None,
            "prescription_change_requests": [PrescriptionChangeRequest.from_dict(_item) for _item in obj["prescription_change_requests"]] if obj.get("prescription_change_requests") is not None else None,
            "transfer_requested_on": obj.get("transfer_requested_on"),
            "transfer_requested_to": Pharmacy.from_dict(obj["transfer_requested_to"]) if obj.get("transfer_requested_to") is not None else None,
            "transferred_on": obj.get("transferred_on"),
            "transfer_type": obj.get("transfer_type"),
            "transferred_by": User.from_dict(obj["transferred_by"]) if obj.get("transferred_by") is not None else None,
            "change_requested_on": obj.get("change_requested_on"),
            "change_request_closed_on": obj.get("change_request_closed_on"),
            "change_request_approved": obj.get("change_request_approved"),
            "original_image_pdf": obj.get("original_image_pdf"),
            "original_image_png": obj.get("original_image_png"),
            "image_pdf": obj.get("image_pdf"),
            "image_png": obj.get("image_png")
        })
        return _obj


