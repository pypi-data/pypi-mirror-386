# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.pharmacy import Pharmacy
from rxfoundry.clients.swifty_api.models.prescription_task_status import PrescriptionTaskStatus
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionTask(BaseModel):
    """
    PrescriptionTask
    """ # noqa: E501
    uuid: Optional[StrictStr] = None
    created_on: Optional[datetime] = None
    task_type: Optional[StrictStr] = None
    manual_review_required: Optional[StrictBool] = None
    is_completed: Optional[StrictBool] = None
    from_pharmacy: Optional[Pharmacy] = None
    to_pharmacy: Optional[Pharmacy] = None
    transfer_type: Optional[StrictStr] = None
    statuses: Optional[List[PrescriptionTaskStatus]] = None
    __properties: ClassVar[List[str]] = ["uuid", "created_on", "task_type", "manual_review_required", "is_completed", "from_pharmacy", "to_pharmacy", "transfer_type", "statuses"]

    @field_validator('transfer_type')
    def transfer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['API', 'RX_TRANSFER', 'MANUAL']):
            raise ValueError("must be one of enum values ('API', 'RX_TRANSFER', 'MANUAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of from_pharmacy
        if self.from_pharmacy:
            _dict['from_pharmacy'] = self.from_pharmacy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_pharmacy
        if self.to_pharmacy:
            _dict['to_pharmacy'] = self.to_pharmacy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in statuses (list)
        _items = []
        if self.statuses:
            for _item_statuses in self.statuses:
                if _item_statuses:
                    _items.append(_item_statuses.to_dict())
            _dict['statuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "created_on": obj.get("created_on"),
            "task_type": obj.get("task_type"),
            "manual_review_required": obj.get("manual_review_required"),
            "is_completed": obj.get("is_completed"),
            "from_pharmacy": Pharmacy.from_dict(obj["from_pharmacy"]) if obj.get("from_pharmacy") is not None else None,
            "to_pharmacy": Pharmacy.from_dict(obj["to_pharmacy"]) if obj.get("to_pharmacy") is not None else None,
            "transfer_type": obj.get("transfer_type"),
            "statuses": [PrescriptionTaskStatus.from_dict(_item) for _item in obj["statuses"]] if obj.get("statuses") is not None else None
        })
        return _obj


