# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.code import Code
from rxfoundry.clients.swifty_api.models.prescription_data import PrescriptionData
from rxfoundry.clients.swifty_api.models.prescription_message_task import PrescriptionMessageTask
from typing import Optional, Set
from typing_extensions import Self

class PrescriptionChangeRequestResponse(BaseModel):
    """
    PrescriptionChangeRequestResponse
    """ # noqa: E501
    message_id: Optional[StrictStr] = Field(default=None, description="The message id for this change request")
    request_message_id: Optional[StrictStr] = Field(default=None, description="The message id for the original change request")
    approval_type: Optional[StrictStr] = None
    changed_prescription_data: Optional[PrescriptionData] = None
    denial_codes: Optional[List[Code]] = None
    approval_text: Optional[StrictStr] = Field(default=None, description="Any additional information about the approval.")
    denial_text: Optional[StrictStr] = Field(default=None, description="Any additional information about the denial.")
    pending_text: Optional[StrictStr] = Field(default=None, description="Any additional information about the pending request.")
    tasks: Optional[List[PrescriptionMessageTask]] = None
    __properties: ClassVar[List[str]] = ["message_id", "request_message_id", "approval_type", "changed_prescription_data", "denial_codes", "approval_text", "denial_text", "pending_text", "tasks"]

    @field_validator('approval_type')
    def approval_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['approved', 'approved_with_changes', 'denied', 'pending']):
            raise ValueError("must be one of enum values ('approved', 'approved_with_changes', 'denied', 'pending')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrescriptionChangeRequestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of changed_prescription_data
        if self.changed_prescription_data:
            _dict['changed_prescription_data'] = self.changed_prescription_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in denial_codes (list)
        _items = []
        if self.denial_codes:
            for _item_denial_codes in self.denial_codes:
                if _item_denial_codes:
                    _items.append(_item_denial_codes.to_dict())
            _dict['denial_codes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item_tasks in self.tasks:
                if _item_tasks:
                    _items.append(_item_tasks.to_dict())
            _dict['tasks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrescriptionChangeRequestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message_id": obj.get("message_id"),
            "request_message_id": obj.get("request_message_id"),
            "approval_type": obj.get("approval_type"),
            "changed_prescription_data": PrescriptionData.from_dict(obj["changed_prescription_data"]) if obj.get("changed_prescription_data") is not None else None,
            "denial_codes": [Code.from_dict(_item) for _item in obj["denial_codes"]] if obj.get("denial_codes") is not None else None,
            "approval_text": obj.get("approval_text"),
            "denial_text": obj.get("denial_text"),
            "pending_text": obj.get("pending_text"),
            "tasks": [PrescriptionMessageTask.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None
        })
        return _obj


