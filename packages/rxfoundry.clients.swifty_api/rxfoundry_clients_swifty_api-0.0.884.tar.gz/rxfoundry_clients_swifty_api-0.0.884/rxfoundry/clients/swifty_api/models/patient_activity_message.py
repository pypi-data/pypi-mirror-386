# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.patient_task import PatientTask
from typing import Optional, Set
from typing_extensions import Self

class PatientActivityMessage(BaseModel):
    """
    PatientActivityMessage
    """ # noqa: E501
    message_id: Optional[StrictStr] = Field(default=None, description="The id of the message created during the inbound activity notification")
    message_type: Optional[StrictStr] = Field(default=None, description="The type of the message created during the inbound activity notification")
    is_completed: Optional[StrictBool] = Field(default=None, description="Whether the message has been processed")
    activity_tasks: Optional[List[PatientTask]] = None
    __properties: ClassVar[List[str]] = ["message_id", "message_type", "is_completed", "activity_tasks"]

    @field_validator('message_type')
    def message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['created', 'updated', 'deleted']):
            raise ValueError("must be one of enum values ('created', 'updated', 'deleted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatientActivityMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in activity_tasks (list)
        _items = []
        if self.activity_tasks:
            for _item_activity_tasks in self.activity_tasks:
                if _item_activity_tasks:
                    _items.append(_item_activity_tasks.to_dict())
            _dict['activity_tasks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatientActivityMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message_id": obj.get("message_id"),
            "message_type": obj.get("message_type"),
            "is_completed": obj.get("is_completed"),
            "activity_tasks": [PatientTask.from_dict(_item) for _item in obj["activity_tasks"]] if obj.get("activity_tasks") is not None else None
        })
        return _obj


