# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from rxfoundry.clients.swifty_api.models.patient import Patient
from rxfoundry.clients.swifty_api.models.pharmacy import Pharmacy

from rxfoundry.clients.swifty_api.api_client import ApiClient, RequestSerialized
from rxfoundry.clients.swifty_api.api_response import ApiResponse
from rxfoundry.clients.swifty_api.rest import RESTResponseType


class PatientApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_patient(
        self,
        patient_uuid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Patient:
        """Get patient by uuid


        :param patient_uuid: (required)
        :type patient_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_patient_serialize(
            patient_uuid=patient_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Patient",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_patient_with_http_info(
        self,
        patient_uuid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Patient]:
        """Get patient by uuid


        :param patient_uuid: (required)
        :type patient_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_patient_serialize(
            patient_uuid=patient_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Patient",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_patient_without_preload_content(
        self,
        patient_uuid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get patient by uuid


        :param patient_uuid: (required)
        :type patient_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_patient_serialize(
            patient_uuid=patient_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Patient",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_patient_serialize(
        self,
        patient_uuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if patient_uuid is not None:
            _path_params['patient_uuid'] = patient_uuid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'opaque_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/swifty/1/patients/{patient_uuid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_patient_pharmacies(
        self,
        patient_uuid: StrictStr,
        distance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Distance in miles to search for pharmacies")] = None,
        networks: Annotated[Optional[List[StrictStr]], Field(description="Filter pharmacies by network(s) using the codes")] = None,
        page: Optional[StrictInt] = None,
        results_per_page: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Pharmacy]:
        """Get pharmacies near a patient


        :param patient_uuid: (required)
        :type patient_uuid: str
        :param distance: Distance in miles to search for pharmacies
        :type distance: float
        :param networks: Filter pharmacies by network(s) using the codes
        :type networks: List[str]
        :param page:
        :type page: int
        :param results_per_page:
        :type results_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_patient_pharmacies_serialize(
            patient_uuid=patient_uuid,
            distance=distance,
            networks=networks,
            page=page,
            results_per_page=results_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Pharmacy]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_patient_pharmacies_with_http_info(
        self,
        patient_uuid: StrictStr,
        distance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Distance in miles to search for pharmacies")] = None,
        networks: Annotated[Optional[List[StrictStr]], Field(description="Filter pharmacies by network(s) using the codes")] = None,
        page: Optional[StrictInt] = None,
        results_per_page: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Pharmacy]]:
        """Get pharmacies near a patient


        :param patient_uuid: (required)
        :type patient_uuid: str
        :param distance: Distance in miles to search for pharmacies
        :type distance: float
        :param networks: Filter pharmacies by network(s) using the codes
        :type networks: List[str]
        :param page:
        :type page: int
        :param results_per_page:
        :type results_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_patient_pharmacies_serialize(
            patient_uuid=patient_uuid,
            distance=distance,
            networks=networks,
            page=page,
            results_per_page=results_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Pharmacy]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_patient_pharmacies_without_preload_content(
        self,
        patient_uuid: StrictStr,
        distance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Distance in miles to search for pharmacies")] = None,
        networks: Annotated[Optional[List[StrictStr]], Field(description="Filter pharmacies by network(s) using the codes")] = None,
        page: Optional[StrictInt] = None,
        results_per_page: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pharmacies near a patient


        :param patient_uuid: (required)
        :type patient_uuid: str
        :param distance: Distance in miles to search for pharmacies
        :type distance: float
        :param networks: Filter pharmacies by network(s) using the codes
        :type networks: List[str]
        :param page:
        :type page: int
        :param results_per_page:
        :type results_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_patient_pharmacies_serialize(
            patient_uuid=patient_uuid,
            distance=distance,
            networks=networks,
            page=page,
            results_per_page=results_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Pharmacy]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_patient_pharmacies_serialize(
        self,
        patient_uuid,
        distance,
        networks,
        page,
        results_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'networks': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if patient_uuid is not None:
            _path_params['patient_uuid'] = patient_uuid
        # process the query parameters
        if distance is not None:
            
            _query_params.append(('distance', distance))
            
        if networks is not None:
            
            _query_params.append(('networks', networks))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if results_per_page is not None:
            
            _query_params.append(('results_per_page', results_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'opaque_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/swifty/1/patients/{patient_uuid}/pharmacies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_patients(
        self,
        q: Annotated[Optional[StrictStr], Field(description="Filter patients by query.  This takes precedence if set over remaining filters.  Searches on first name, last name, date of birth (yyyy-mm-dd), home address and phone numbers in (555) 555-5555 format.")] = None,
        external_id: Annotated[Optional[StrictStr], Field(description="An external id to find the patient by.  Format is {slug}:{external_id}.  This takes precedence if set over remaining filters, but not used if q is set.")] = None,
        uuid_list: Annotated[Optional[List[StrictStr]], Field(description="A list of uuid strings to filter by.  Only used if q and external_id are not set.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number to return.  Defaults to 1.")] = None,
        results_per_page: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.  Defaults to 10.")] = None,
        deep: Annotated[Optional[StrictBool], Field(description="If true, returns contained objects for the patient.  If false, returns only the minimum fields.  Defaults to false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Patient]:
        """Get all patients


        :param q: Filter patients by query.  This takes precedence if set over remaining filters.  Searches on first name, last name, date of birth (yyyy-mm-dd), home address and phone numbers in (555) 555-5555 format.
        :type q: str
        :param external_id: An external id to find the patient by.  Format is {slug}:{external_id}.  This takes precedence if set over remaining filters, but not used if q is set.
        :type external_id: str
        :param uuid_list: A list of uuid strings to filter by.  Only used if q and external_id are not set.
        :type uuid_list: List[str]
        :param page: Page number to return.  Defaults to 1.
        :type page: int
        :param results_per_page: Number of results to return per page.  Defaults to 10.
        :type results_per_page: int
        :param deep: If true, returns contained objects for the patient.  If false, returns only the minimum fields.  Defaults to false.
        :type deep: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_patients_serialize(
            q=q,
            external_id=external_id,
            uuid_list=uuid_list,
            page=page,
            results_per_page=results_per_page,
            deep=deep,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Patient]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_patients_with_http_info(
        self,
        q: Annotated[Optional[StrictStr], Field(description="Filter patients by query.  This takes precedence if set over remaining filters.  Searches on first name, last name, date of birth (yyyy-mm-dd), home address and phone numbers in (555) 555-5555 format.")] = None,
        external_id: Annotated[Optional[StrictStr], Field(description="An external id to find the patient by.  Format is {slug}:{external_id}.  This takes precedence if set over remaining filters, but not used if q is set.")] = None,
        uuid_list: Annotated[Optional[List[StrictStr]], Field(description="A list of uuid strings to filter by.  Only used if q and external_id are not set.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number to return.  Defaults to 1.")] = None,
        results_per_page: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.  Defaults to 10.")] = None,
        deep: Annotated[Optional[StrictBool], Field(description="If true, returns contained objects for the patient.  If false, returns only the minimum fields.  Defaults to false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Patient]]:
        """Get all patients


        :param q: Filter patients by query.  This takes precedence if set over remaining filters.  Searches on first name, last name, date of birth (yyyy-mm-dd), home address and phone numbers in (555) 555-5555 format.
        :type q: str
        :param external_id: An external id to find the patient by.  Format is {slug}:{external_id}.  This takes precedence if set over remaining filters, but not used if q is set.
        :type external_id: str
        :param uuid_list: A list of uuid strings to filter by.  Only used if q and external_id are not set.
        :type uuid_list: List[str]
        :param page: Page number to return.  Defaults to 1.
        :type page: int
        :param results_per_page: Number of results to return per page.  Defaults to 10.
        :type results_per_page: int
        :param deep: If true, returns contained objects for the patient.  If false, returns only the minimum fields.  Defaults to false.
        :type deep: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_patients_serialize(
            q=q,
            external_id=external_id,
            uuid_list=uuid_list,
            page=page,
            results_per_page=results_per_page,
            deep=deep,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Patient]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_patients_without_preload_content(
        self,
        q: Annotated[Optional[StrictStr], Field(description="Filter patients by query.  This takes precedence if set over remaining filters.  Searches on first name, last name, date of birth (yyyy-mm-dd), home address and phone numbers in (555) 555-5555 format.")] = None,
        external_id: Annotated[Optional[StrictStr], Field(description="An external id to find the patient by.  Format is {slug}:{external_id}.  This takes precedence if set over remaining filters, but not used if q is set.")] = None,
        uuid_list: Annotated[Optional[List[StrictStr]], Field(description="A list of uuid strings to filter by.  Only used if q and external_id are not set.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number to return.  Defaults to 1.")] = None,
        results_per_page: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.  Defaults to 10.")] = None,
        deep: Annotated[Optional[StrictBool], Field(description="If true, returns contained objects for the patient.  If false, returns only the minimum fields.  Defaults to false.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all patients


        :param q: Filter patients by query.  This takes precedence if set over remaining filters.  Searches on first name, last name, date of birth (yyyy-mm-dd), home address and phone numbers in (555) 555-5555 format.
        :type q: str
        :param external_id: An external id to find the patient by.  Format is {slug}:{external_id}.  This takes precedence if set over remaining filters, but not used if q is set.
        :type external_id: str
        :param uuid_list: A list of uuid strings to filter by.  Only used if q and external_id are not set.
        :type uuid_list: List[str]
        :param page: Page number to return.  Defaults to 1.
        :type page: int
        :param results_per_page: Number of results to return per page.  Defaults to 10.
        :type results_per_page: int
        :param deep: If true, returns contained objects for the patient.  If false, returns only the minimum fields.  Defaults to false.
        :type deep: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_patients_serialize(
            q=q,
            external_id=external_id,
            uuid_list=uuid_list,
            page=page,
            results_per_page=results_per_page,
            deep=deep,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Patient]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_patients_serialize(
        self,
        q,
        external_id,
        uuid_list,
        page,
        results_per_page,
        deep,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'uuid_list': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if external_id is not None:
            
            _query_params.append(('external_id', external_id))
            
        if uuid_list is not None:
            
            _query_params.append(('uuid_list', uuid_list))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if results_per_page is not None:
            
            _query_params.append(('results_per_page', results_per_page))
            
        if deep is not None:
            
            _query_params.append(('deep', deep))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'opaque_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/swifty/1/patients',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


