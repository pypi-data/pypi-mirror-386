# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from rxfoundry.clients.swifty_api.models.medication import Medication
from rxfoundry.clients.swifty_api.models.patient import Patient
from rxfoundry.clients.swifty_api.models.prescriber import Prescriber
from rxfoundry.clients.swifty_api.models.virtual_pharmacy import VirtualPharmacy
from typing import Optional, Set
from typing_extensions import Self

class Fax(BaseModel):
    """
    Fax
    """ # noqa: E501
    uuid: Optional[StrictStr] = None
    fax_id: Optional[StrictStr] = None
    fax_date: Optional[datetime] = None
    to_fax_number: Optional[StrictStr] = None
    from_fax_number: Optional[StrictStr] = None
    filename: Optional[StrictStr] = None
    fax_image: Optional[StrictStr] = None
    fax_page_count: Optional[StrictInt] = None
    virtual_pharmacy: Optional[VirtualPharmacy] = None
    patient: Optional[Patient] = None
    prescriber: Optional[Prescriber] = None
    medication: Optional[Medication] = None
    ndc: Optional[StrictStr] = None
    days_supply: Optional[StrictInt] = None
    quantity_value: Optional[Union[StrictFloat, StrictInt]] = None
    number_of_fills: Optional[StrictInt] = None
    sig_text: Optional[StrictStr] = None
    is_completed: Optional[StrictBool] = None
    has_running_workflow: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["uuid", "fax_id", "fax_date", "to_fax_number", "from_fax_number", "filename", "fax_image", "fax_page_count", "virtual_pharmacy", "patient", "prescriber", "medication", "ndc", "days_supply", "quantity_value", "number_of_fills", "sig_text", "is_completed", "has_running_workflow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Fax from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of virtual_pharmacy
        if self.virtual_pharmacy:
            _dict['virtual_pharmacy'] = self.virtual_pharmacy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of patient
        if self.patient:
            _dict['patient'] = self.patient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prescriber
        if self.prescriber:
            _dict['prescriber'] = self.prescriber.to_dict()
        # override the default output from pydantic by calling `to_dict()` of medication
        if self.medication:
            _dict['medication'] = self.medication.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Fax from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "fax_id": obj.get("fax_id"),
            "fax_date": obj.get("fax_date"),
            "to_fax_number": obj.get("to_fax_number"),
            "from_fax_number": obj.get("from_fax_number"),
            "filename": obj.get("filename"),
            "fax_image": obj.get("fax_image"),
            "fax_page_count": obj.get("fax_page_count"),
            "virtual_pharmacy": VirtualPharmacy.from_dict(obj["virtual_pharmacy"]) if obj.get("virtual_pharmacy") is not None else None,
            "patient": Patient.from_dict(obj["patient"]) if obj.get("patient") is not None else None,
            "prescriber": Prescriber.from_dict(obj["prescriber"]) if obj.get("prescriber") is not None else None,
            "medication": Medication.from_dict(obj["medication"]) if obj.get("medication") is not None else None,
            "ndc": obj.get("ndc"),
            "days_supply": obj.get("days_supply"),
            "quantity_value": obj.get("quantity_value"),
            "number_of_fills": obj.get("number_of_fills"),
            "sig_text": obj.get("sig_text"),
            "is_completed": obj.get("is_completed"),
            "has_running_workflow": obj.get("has_running_workflow")
        })
        return _obj


