# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rxfoundry.clients.swifty_api.models.address import Address
from typing import Optional, Set
from typing_extensions import Self

class Prescriber(BaseModel):
    """
    Prescriber
    """ # noqa: E501
    uuid: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    middle_name: Optional[StrictStr] = None
    credentials_text: Optional[StrictStr] = None
    npi: Optional[StrictStr] = None
    dea_number: Optional[StrictStr] = None
    practice_address: Optional[Address] = None
    __properties: ClassVar[List[str]] = ["uuid", "last_name", "first_name", "middle_name", "credentials_text", "npi", "dea_number", "practice_address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Prescriber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of practice_address
        if self.practice_address:
            _dict['practice_address'] = self.practice_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Prescriber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "last_name": obj.get("last_name"),
            "first_name": obj.get("first_name"),
            "middle_name": obj.get("middle_name"),
            "credentials_text": obj.get("credentials_text"),
            "npi": obj.get("npi"),
            "dea_number": obj.get("dea_number"),
            "practice_address": Address.from_dict(obj["practice_address"]) if obj.get("practice_address") is not None else None
        })
        return _obj


