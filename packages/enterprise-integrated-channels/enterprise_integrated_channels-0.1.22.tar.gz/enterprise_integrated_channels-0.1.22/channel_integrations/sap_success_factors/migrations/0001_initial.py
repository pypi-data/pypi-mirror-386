# Generated by Django 4.2.18 on 2025-02-10 15:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import fernet_fields.fields
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('channel_integration', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SapSuccessFactorsLearnerDataTransmissionAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('enterprise_customer_uuid', models.UUIDField(blank=True, null=True)),
                ('user_email', models.CharField(blank=True, max_length=255, null=True)),
                ('course_id', models.CharField(max_length=255)),
                ('content_title', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('course_completed', models.BooleanField(default=True)),
                ('progress_status', models.CharField(blank=True, max_length=255)),
                ('completed_timestamp', models.DateTimeField(blank=True, null=True)),
                ('instructor_name', models.CharField(blank=True, max_length=255)),
                ('total_hours', models.FloatField(blank=True, null=True)),
                ('subsection_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('subsection_name', models.CharField(max_length=255, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('is_transmitted', models.BooleanField(default=False)),
                ('friendly_status_message', models.CharField(blank=True, default=None, help_text='A user-friendly API response status message.', max_length=255, null=True)),
                ('sapsf_user_id', models.CharField(max_length=255)),
                ('grade', models.CharField(max_length=100)),
                ('credit_hours', models.FloatField(blank=True, null=True)),
                ('sap_completed_timestamp', models.BigIntegerField(blank=True, null=True)),
                ('plugin_configuration_id', models.IntegerField(blank=True, null=True)),
                ('enterprise_course_enrollment_id', models.IntegerField(blank=True, db_index=True, null=True)),
                ('api_record', models.OneToOneField(blank=True, help_text='Data pertaining to the transmissions API request response.', null=True, on_delete=django.db.models.deletion.CASCADE, to='channel_integration.apiresponserecord')),
            ],
        ),
        migrations.CreateModel(
            name='SAPSuccessFactorsGlobalConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_date', models.DateTimeField(auto_now_add=True, verbose_name='Change date')),
                ('enabled', models.BooleanField(default=False, verbose_name='Enabled')),
                ('completion_status_api_path', models.CharField(max_length=255)),
                ('course_api_path', models.CharField(max_length=255)),
                ('oauth_api_path', models.CharField(max_length=255)),
                ('search_student_api_path', models.CharField(max_length=255)),
                ('provider_id', models.CharField(default='EDX', max_length=100)),
                ('changed_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sapsf_global_configuration_changed_by', to=settings.AUTH_USER_MODEL, verbose_name='Changed by')),
            ],
        ),
        migrations.CreateModel(
            name='SAPSuccessFactorsEnterpriseCustomerConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('display_name', models.CharField(blank=True, default='', help_text='A configuration nickname.', max_length=255)),
                ('idp_id', models.CharField(blank=True, default='', help_text='If provided, will be used as IDP slug to locate remote id for learners', max_length=255)),
                ('active', models.BooleanField(help_text='Is this configuration active?')),
                ('dry_run_mode_enabled', models.BooleanField(default=False, help_text='Is this configuration in dry-run mode? (experimental)')),
                ('show_course_price', models.BooleanField(default=False, help_text='Displays course price')),
                ('channel_worker_username', models.CharField(blank=True, default='', help_text='Enterprise channel worker username to get JWT tokens for authenticating LMS APIs.', max_length=255)),
                ('catalogs_to_transmit', models.TextField(blank=True, default='', help_text='A comma-separated list of catalog UUIDs to transmit. If blank, all customer catalogs will be transmitted. If there are overlapping courses in the customer catalogs, the overlapping course metadata will be selected from the newest catalog.')),
                ('disable_learner_data_transmissions', models.BooleanField(default=False, help_text='When set to True, the configured customer will no longer receive learner data transmissions, both scheduled and signal based', verbose_name='Disable Learner Data Transmission')),
                ('last_sync_attempted_at', models.DateTimeField(blank=True, help_text='The DateTime of the most recent Content or Learner data record sync attempt', null=True)),
                ('last_content_sync_attempted_at', models.DateTimeField(blank=True, help_text='The DateTime of the most recent Content data record sync attempt', null=True)),
                ('last_learner_sync_attempted_at', models.DateTimeField(blank=True, help_text='The DateTime of the most recent Learner data record sync attempt', null=True)),
                ('last_sync_errored_at', models.DateTimeField(blank=True, help_text='The DateTime of the most recent failure of a Content or Learner data record sync attempt', null=True)),
                ('last_content_sync_errored_at', models.DateTimeField(blank=True, help_text='The DateTime of the most recent failure of a Content data record sync attempt', null=True)),
                ('last_learner_sync_errored_at', models.DateTimeField(blank=True, help_text='The DateTime of the most recent failure of a Learner data record sync attempt', null=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True, help_text='The DateTime of the last change made to this configuration.', null=True)),
                ('decrypted_key', fernet_fields.fields.EncryptedCharField(blank=True, default='', help_text='The encrypted OAuth client identifier. It will be encrypted when stored in the database.', max_length=255, null=True, verbose_name='Encrypted Client ID')),
                ('sapsf_base_url', models.CharField(blank=True, default='', help_text='Base URL of success factors API.', max_length=255, verbose_name='SAP Base URL')),
                ('sapsf_company_id', models.CharField(blank=True, default='', help_text='Success factors company identifier.', max_length=255, verbose_name='SAP Company ID')),
                ('sapsf_user_id', models.CharField(blank=True, default='', help_text='Success factors user identifier.', max_length=255, verbose_name='SAP User ID')),
                ('decrypted_secret', fernet_fields.fields.EncryptedCharField(blank=True, default='', help_text='The encrypted OAuth client secret. It will be encrypted when stored in the database.', max_length=255, null=True, verbose_name='Encrypted Client Secret')),
                ('user_type', models.CharField(choices=[('user', 'User'), ('admin', 'Admin')], default='user', help_text='Type of SAP User (admin or user).', max_length=20, verbose_name='SAP User Type')),
                ('additional_locales', models.TextField(blank=True, default='', help_text='A comma-separated list of additional locales.', verbose_name='Additional Locales')),
                ('transmit_total_hours', models.BooleanField(default=False, help_text='Include totalHours in the transmitted completion data', verbose_name='Transmit Total Hours')),
                ('prevent_self_submit_grades', models.BooleanField(default=False, help_text="When set to True, the integration will use the generic edX service user ('sapsf_user_id') defined in the SAP Customer Configuration for course completion.", verbose_name='Prevent Learner From Self-Submitting Grades')),
                ('transmission_chunk_size', models.IntegerField(default=1, help_text='The maximum number of data items to transmit to the integrated channel with each request.')),
                ('enterprise_customer', models.ForeignKey(help_text='Enterprise Customer associated with the configuration.', on_delete=django.db.models.deletion.CASCADE, related_name='sapsf_enterprisecustomerpluginconfiguration', to='enterprise.enterprisecustomer')),
            ],
        ),
        migrations.AddConstraint(
            model_name='sapsuccessfactorslearnerdatatransmissionaudit',
            constraint=models.UniqueConstraint(fields=('enterprise_course_enrollment_id', 'course_id'), name='sap_ch_unique_enrollment_course_id'),
        ),
        migrations.AlterIndexTogether(
            name='sapsuccessfactorslearnerdatatransmissionaudit',
            index_together={('enterprise_customer_uuid', 'plugin_configuration_id')},
        ),
    ]
