syntax = "proto3";

package strique.model.db.magento;

import "db/magento/line_item.proto";
import "google/protobuf/timestamp.proto";
import "constants/datetime/hour.proto";

option java_outer_classname = "OrdersProto";
option java_package = "com.strique.model.db.magento";

// Next Id: 2
// Proto definition of Order List.
message OrdersList {
  repeated Orders orders_response = 1;
}

// Next Id : 32
// Aprotocol buffer for storing data of magento orders.
message Orders {
  // id of order
  uint64 order_id = 2;

  // increment id
  string increment_id = 3;

  // city
  string city = 4;

  // region
  string region = 5;

  // id of the country
  string country_id = 6;

  // currency code of the order
  string order_currency_code = 7;

  // payment method name
  string payment_method = 8;

  // order update date
  optional google.protobuf.Timestamp updated_at = 9;

  // discount amount
  double discount_amount = 10;

  // total amount including tax
  double grand_total = 11;

  // shipping amount
  double shipping_amount = 12;

  // discount on shipping amount
  double shipping_discount_amount = 13;

  // tax on shipping
  double shipping_tax_amount = 14;

  // order state
  string state = 15;

  // order status
  string status = 16;

  // price of order without tax
  double subtotal = 17;

  // tax amount
  double tax_amount = 18;

  // ip address
  string remote_ip = 19;

  // total no. of items in order
  uint64 total_item_count = 20;

  // total no. of quantity in order
  uint64 total_qty_ordered = 21;

  // refunded discount
  double discount_refunded = 22;

  // shipping refund amount
  double shipping_refunded = 23;

  // shipping tax refund amount
  double shipping_tax_refunded = 24;

  // refunded subtotal
  double subtotal_refunded = 25;

  // refunded tax
  double tax_refunded = 26;

  // total refunded amount in order
  double total_refunded = 27;

  // total qty refunded in this order
  uint64 qty_refunded = 28;

  // items in this order
  repeated LineItem line_items = 29;

  // platform id
  string platform_id = 30;

  // date value in epoch
  google.protobuf.Timestamp date = 31;

  reserved 1;
}

// Next Id : 3
// protocol buffer for storing data of sales by payment method.
message SalesByPaymentMethod {
  // Payment method of order
  string payment_method = 1;

  // Total revenue of orders
  double revenue = 2;
}

// Next Id: 5
// Proto definition for SingleTime-wise Bifurcation.
message TimeWiseBifurcation {
  // Time in hours
  constants.Hour hour = 1;

  // Number of total orders placed.
  uint64 total_orders = 2;

  // Total Quantity Ordered
  uint64 total_qty_ordered = 3;

  // Grand Total of the orders
  double grand_total = 4;
}

// Next Id: 7
// Proto definition for Top performing City.
message TopPerformingCity {
  // City name.
  string city = 1;

  // Number of total orders placed per city.
  uint64 total_orders = 2;

  // total revenue in city
  double total_revenue = 3;

  // total units ordered
  uint64 total_units_ordered = 4;

  // Number of units returned per city.
  uint64 total_units_returned = 5;

  // Revenue accounting to number of returned orders.
  double return_unit_amount = 6;
}

// Next Id: 9
// Proto definition of Top performing Products.
message TopPerformingProducts {
  // Product name.
  string product = 1;

  // variant name
  string variant = 2;

  // sku of variant
  string sku = 3;

  // Number of total orders placed per products.
  uint64 total_orders = 4;

  // total revenue in products
  double total_revenue = 5;

  // total units ordered
  uint64 total_units_ordered = 6;

  // Number of units returned per products.
  uint64 total_units_returned = 7;

  // Revenue accounting to number of returned orders.
  double return_unit_amount = 8;
}

// Next Id: 7
// Proto definition of Top performing Regions.
message TopPerformingRegions {
  // Region name.
  string region = 1;

  // Number of total orders placed per region.
  uint64 total_orders = 2;

  // total revenue in region
  double total_revenue = 3;

  // total units ordered
  uint64 total_units_ordered = 4;

  // Number of units returned per region.
  uint64 total_units_returned = 5;

  // Revenue accounting to number of returned orders.
  double return_unit_amount = 6;
}