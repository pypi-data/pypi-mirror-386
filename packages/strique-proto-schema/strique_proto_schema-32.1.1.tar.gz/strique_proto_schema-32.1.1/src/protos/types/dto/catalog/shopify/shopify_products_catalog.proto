syntax = "proto3";

package strique.types.dto.catalog.shopify;

option java_outer_classname = "ShopifyProductsProto";
option java_package = "com.strique.types.dto.catalog.shopify";

// Next Id: 2
// Root wrapper for the products data
message ShopifyProductsData {
  // Data of products
  ProductsDataForCatalogueResponse data = 1 [json_name = "data"];
}

// Next Id: 2
// Root response for the ProductsDataForCatalogue GraphQL query
message ProductsDataForCatalogueResponse {
  // Products node
  ProductsConnection products = 1 [json_name = "products"];
}

// Next Id: 3
// Connection wrapper for products list with pagination info
message ProductsConnection {
  // Pagination info
  PageInfo page_info = 1 [json_name = "pageInfo"];

  // List of product edges
  repeated ProductEdge edges = 2 [json_name = "edges"];
}

// Next Id: 3
// Information about pagination state
message PageInfo {
  // Cursor pointing to the end of current page
  string end_cursor = 1 [json_name = "endCursor"];

  // Whether another page exists
  bool has_next_page = 2 [json_name = "hasNextPage"];
}

// Next Id: 3
// Edge wrapper around a product node
message ProductEdge {
  // The product node
  Product node = 1 [json_name = "node"];

  // Cursor pointing to this product edge
  string cursor = 2 [json_name = "cursor"];
}

// Next Id: 15
// Represents a Shopify product
message Product {
  // Product ID
  string id = 1 [json_name = "id"];

  // Product title
  string title = 2 [json_name = "title"];

  // Product description in HTML format
  string description_html = 3 [json_name = "descriptionHtml"];

  // URL of product on online store
  string online_store_url = 4 [json_name = "onlineStoreUrl"];

  // Tags associated with product
  repeated string tags = 5 [json_name = "tags"];

  // Product type
  string product_type = 6 [json_name = "productType"];

  // Product vendor
  string vendor = 7 [json_name = "vendor"];

  // Product status (e.g., active)
  string status = 8 [json_name = "status"];

  // Search engine optimization info
  SEO seo = 9 [json_name = "seo"];

  // Media attached to product
  MediaConnection media = 10 [json_name = "media"];

  // Variants of the product
  VariantConnection variants = 11 [json_name = "variants"];

  // Collections the product belongs to
  CollectionConnection collections = 12 [json_name = "collections"];

  // Publications (markets) where the product is available
  ResourcePublicationConnection resource_publications = 13 [json_name = "resourcePublications"];

  string created_at = 14 [json_name = "createdAt"];
}

// Next Id: 3
// Search engine optimization fields
message SEO {
  // SEO description
  string description = 1 [json_name = "description"];

  // SEO title
  string title = 2 [json_name = "title"];
}

// Next Id: 2
// Connection wrapper for media list
message MediaConnection {
  // List of media edges
  repeated MediaEdge edges = 1 [json_name = "edges"];
}

// Next Id: 2
// Edge wrapper around a media node
message MediaEdge {
  // Media node (image, video, etc.)
  Media node = 1 [json_name = "node"];
}

// Next Id: 5
// Represents a media item (image, video, 3D model)
message Media {
  // Media ID
  string id = 1 [json_name = "id"];

  // Preview content of the media
  MediaPreview preview = 2 [json_name = "preview"];

  // Video sources (only populated if media is a video)
  repeated VideoSource video_sources = 3 [json_name = "sources"];

  // Media content type (e.g., IMAGE, VIDEO, MODEL_3D)
  string media_content_type = 4 [json_name = "mediaContentType"];
}

// Next Id: 2
// Wrapper for image preview
message MediaPreview {
  // Preview image
  Image image = 1 [json_name = "image"];
}

// Next Id: 3
// Image content with URL
message Image {
  // Image ID
  string id = 1 [json_name = "id"];

  // Image URL
  string url = 2 [json_name = "url"];
}

// Next Id: 2
// Video source URL
message VideoSource {
  // Video source URL
  string url = 1 [json_name = "url"];
}

// Next Id: 2
// Connection wrapper for variant list
message VariantConnection {
  // List of variant edges
  repeated VariantEdge edges = 1 [json_name = "edges"];
}

// Next Id: 3
// Edge wrapper around a variant node
message VariantEdge {
  // Variant node
  Variant node = 1 [json_name = "node"];

  // Cursor for pagination
  string cursor = 2 [json_name = "cursor"];
}

// Next Id: 17
// Represents a product variant
message Variant {
  // Variant ID
  string id = 1 [json_name = "id"];

  // Variant title
  string title = 2 [json_name = "title"];

  // Availability of the variant
  bool available_for_sale = 3 [json_name = "availableForSale"];

  // Inventory policy for the variant
  string inventory_policy = 4 [json_name = "inventoryPolicy"];

  // Price of the variant
  double price = 5 [json_name = "price"];

  // Original price before comparison
  double compare_at_price = 6 [json_name = "compareAtPrice"];

  // Quantity of inventory available
  int32 inventory_quantity = 16 [json_name = "inventoryQuantity"];

  // Barcode of the variant
  string barcode = 8 [json_name = "barcode"];

  // Sku of the variant.
  string sku = 9 [json_name = "sku"];

  // Inventory item details
  InventoryItem inventory_item = 10 [json_name = "inventoryItem"];

  // Media preview of the variant
  MediaConnection media = 11 [json_name = "media"];

  // Selected Options for variant.
  repeated SelectedOptions selected_options = 12 [json_name = "selectedOptions"];

  // Created at for variant.
  string created_at = 13 [json_name = "createdAt"];

  // Position of a variant.
  int64 position = 14 [json_name = "position"];

  reserved 7, 15;
}

// Next Id: 5
// Details of the inventory item linked to a variant
message InventoryItem {
  // Harmonized System Code for customs
  string harmonized_system_code = 1 [json_name = "harmonizedSystemCode"];

  // Whether the item is tracked
  bool tracked = 2 [json_name = "tracked"];

  // Whether the item requires shipping
  bool requires_shipping = 3 [json_name = "requiresShipping"];

  // Measurement of shipping item.
  Measurement measurement = 4[json_name = "measurement"];
}

// Next Id: 3
// Connection wrapper for collections list
message CollectionConnection {
  PageInfo page_info = 1 [json_name = "pageInfo"];
  repeated CollectionEdge edges = 2 [json_name = "edges"];
}

// Next Id: 2
// Edge wrapper around a collection node
message CollectionEdge {
  Collection node = 1 [json_name = "node"];
}

// Next Id: 3
// Represents a collection
message Collection {
  string id = 1 [json_name = "id"];
  string title = 2 [json_name = "title"];
}

// Next Id: 3
message SelectedOptions {
  string name = 1 [json_name = "name"];
  string value = 2 [json_name = "value"];
}

// Next Id: 2
// Connection wrapper for resource publications
message ResourcePublicationConnection {
  repeated ResourcePublicationEdge edges = 1 [json_name = "edges"];
}

// Next Id: 2
// Edge wrapper around a resource publication node
message ResourcePublicationEdge {
  ResourcePublication node = 1 [json_name = "node"];
}

// Next Id: 2
// Resource publication node linking product to a publication
message ResourcePublication {
  Publication publication = 1 [json_name = "publication"];
}

// Next Id: 3
// Details about the publication (market)
message Publication {
  string id = 1 [json_name = "id"];
  string name = 2 [json_name = "name"];
}

// Next Id: 2
// Measurement of shipping variant.
message Measurement {
  Weight weight = 1 [json_name = "weight"];
}

// Next Id: 3
// Weight of variant.
message Weight {
  string unit = 1 [json_name = "unit"];
  double value = 2 [json_name = "value"];
}