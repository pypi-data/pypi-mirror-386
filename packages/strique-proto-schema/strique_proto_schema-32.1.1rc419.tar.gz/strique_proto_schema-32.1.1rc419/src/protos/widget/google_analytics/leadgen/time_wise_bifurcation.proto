syntax = "proto3";

package strique.model.widget.google_analytics.leadgen;

import "constants/datetime/hour.proto";
import "constants/ui/render_type.proto";
import "constants/ui/sorting_direction.proto";
import "options/strique_enum_options.proto";
import "types/filter_predicate/filters.proto";

option java_outer_classname = "LeadGenTimeWiseBifurcationProto";
option java_package = "com.strique.model.widget.googleanalytics.leadgen";

// Next Id: 5
// Proto definition for Time-wise Bifurcation Data.
message LeadGenTimeWiseBifurcationData {
  // Title for this widget.
  string widget_title = 1;

  // List of records for this widget.
  repeated LeadGenTimeWiseBifurcationRecord records = 2;

  // Total record.
  optional LeadGenTimeWiseBifurcationRecord total = 3;

  // Summary data for a subset of records.
  optional LeadGenTimeWiseBifurcationRecord subtotal = 4;
}

// Next Id: 7
// Proto definition for a single record of Time-wise Bifurcation.
message LeadGenTimeWiseBifurcationRecord {
  // Time in hours
  constants.Hour hour = 1 [json_name = "hour"];

  // Number of session created for a paticular hour
  uint64 sessions = 2 [json_name = "sessions"];

  float engagement_rate = 3 [json_name = "engagementRate"];

  float bounce_rate = 4 [json_name = "bounceRate"];

  double average_sessions_duration  = 5 [json_name = "averageSessionsDuration"];

  uint64 active_user = 6 [json_name = "activeUser"];
}

// Next Id: 4
// Proto definition for Time-wise Bifurcation Data Configuration.
message LeadGenTimeWiseBifurcationConfig {
  // Next Id: 7
  // Enumeration of possible columns in the Time-wise Bifurcation Data table.
  enum Column {
    COLUMN_UNKNOWN = 0 [
      (options.label) = 'Unknown',
      (options.accessor_key) = '',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_HOUR = 1 [
      (options.label) = 'Hour',
      (options.accessor_key) = 'hour',
      (options.is_sortable) = true,
      (options.is_filterable) = true
    ];
    COLUMN_SESSIONS = 2 [
      (options.label) = 'Sessions',
      (options.accessor_key) = 'sessions',
      (options.is_sortable) = true,
      (options.is_filterable) = true
    ];
    COLUMN_ENGAGEMENT_RATE = 3 [
      (options.label) = 'Engagement rate',
      (options.accessor_key) = 'engagementRate',
      (options.is_sortable) = true,
      (options.is_filterable) = true,
      (options.suffix) = '%'
    ];
    COLUMN_BOUNCE_RATE = 4 [
      (options.label) = 'Bounce rate',
      (options.accessor_key) = 'bounceRate',
      (options.is_sortable) = true,
      (options.is_filterable) = true,
      (options.suffix) = '%'
    ];
    COLUMN_AVARAGE_SESSIONS_DURATION = 5 [
      (options.label) = 'Average sessions duration',
      (options.accessor_key) = 'averageSessionsDuration',
      (options.is_sortable) = true,
      (options.is_filterable) = true
    ];
    COLUMN_ACTIVE_USER = 6 [
      (options.label) = 'Active users',
      (options.accessor_key) = 'activeUser',
      (options.is_sortable) = true,
      (options.is_filterable) = true
    ];
  }

  // Next Id: 8
  // Configuration for the table displayed in the Time-wise Bifurcation Data.
  message TableConfig {
    // Specifies the order of columns in the table.
    repeated Column column_order = 1;

    // Specifies columns to be hidden in the table.
    repeated Column column_hidden = 2;

    // Specifies the default column used for sorting.
    Column default_sorted_column = 3;

    // Specifies the sorting direction.
    constants.ui.SortingDirection sorting_direction = 4;

    // Indicates whether to display the total row in the table.
    bool show_total = 5;

    // Indicates whether to display the subtotal row in the table.
    bool show_subtotal = 6;

    types.Expression filter_expression = 7;
  }

  // Next Id: 3
  // Configuration for the area chart displayed in the Time-wise Bifurcation Data.
  message AreaChartConfig {
    // Specifies the dimension for the area chart.
    Column dimension = 1;

    // Specifies the areas for the area chart.
    repeated Column areas = 2;
  }

  // Specifies the type of rendering for the widget.
  constants.ui.RenderType render_type = 1;

  // Configuration for the table displayed in the widget.
  TableConfig table_config = 2;

  // Configuration for the area chart displayed in the widget.
  AreaChartConfig area_chart_config = 3;
}
