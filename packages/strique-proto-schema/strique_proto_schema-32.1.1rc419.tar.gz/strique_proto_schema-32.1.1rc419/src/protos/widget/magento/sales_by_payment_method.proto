syntax = "proto3";

package strique.model.widget.magento;

import "constants/ui/render_type.proto";
import "options/strique_enum_options.proto";
import "types/currency/currency.proto";

option java_outer_classname = "SalesByPaymentMethodProto";
option java_package = "com.strique.model.widget.magento";

// Next Id: 5
// Proto definition for Sales By Payment Method Data.
message SalesByPaymentMethodData {
  // Title for this widget.
  string widget_title = 1;

  // List of records for this widget.
  repeated SalesByPaymentMethodRecord records = 2;

  // Total record.
  optional SalesByPaymentMethodRecord total = 3;

  // Summary data for a subset of records.
  optional SalesByPaymentMethodRecord subtotal = 4;
}

// Next Id: 3
// Proto definition for a single record of Sales By Payment Method.
message SalesByPaymentMethodRecord {
  // Payment method of order
  string payment_method = 1 [json_name = "paymentMethod"];

  // Total revenue of orders
  types.Currency revenue = 2 [json_name = "revenue"];
}

// Next Id: 3
// Proto definition for Sales By Payment Method Data Configuration.
message SalesByPaymentMethodConfig {
  // Next Id: 4
  // Enumeration of possible columns in the Sales By Payment Method Data.
  enum Column {
    COLUMN_UNKNOWN = 0 [
      (options.label) = 'Unknown',
      (options.accessor_key) = '',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_PAYMENT_METHOD = 1 [
      (options.label) = 'Payment method',
      (options.accessor_key) = 'paymentMethod',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_REVENUE = 3 [
      (options.label) = 'Revenue',
      (options.accessor_key) = 'revenue',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    reserved 2;
  }

  // Next Id: 3
  // Configuration for the donut chart displayed in the Sales By Payment Method Data.
  message DonutChartConfig {
    // Specifies the dimension for the donut chart.
    Column dimension = 1;

    // Specifies the metric for the donut chart.
    Column metric = 2;
  }

  // Specifies the type of rendering for the widget.
  constants.ui.RenderType render_type = 1;

  // Configuration for the donut chart displayed in the widget.
  DonutChartConfig donut_chart_config = 2;
}
