syntax = "proto3";

package strique.model.widget.shopify;

import "constants/ui/render_type.proto";
import "constants/ui/sorting_direction.proto";
import "options/strique_enum_options.proto";
import "types/currency/currency.proto";
import "types/filter_predicate/filters.proto";

option java_outer_classname = "ShopifyOverviewProto";
option java_package = "com.strique.model.widget.shopify";

// Next Id: 6
// Proto definition for Overview Data.
message ShopifyOverviewData {
  // Title for this widget.
  string widget_title = 1;

  // List of records for this widget.
  repeated ShopifyOverviewRecord records = 2;

  // Total record.
  optional ShopifyOverviewRecord total = 3;

  // Summary data for a subset of records.
  optional ShopifyOverviewRecord subtotal = 4;

  //overview message if widget has different currencies.
  optional string overview_message = 5;
}

// Next Id: 9
// Proto definition for a single record of Overview.
message ShopifyOverviewRecord {
  string shopify_store_name = 1 [json_name = "shopifyStoreName"];

  types.Currency gross_sales = 2 [json_name = "grossSales"];

  types.Currency total_sales = 3 [json_name = "totalSales"];

  types.Currency net_sales = 4 [json_name = "netSales"];

  types.Currency average_order_value = 5 [json_name = "averageOrderValue"];

  uint64 total_orders = 6 [json_name = "totalOrders"];

  types.Currency net_return_value = 7 [json_name = "netReturnValue"];

  types.Currency discount = 8 [json_name = "discount"];
}

// Next Id: 4
// Proto definition for a config of Overview.
message ShopifyOverviewConfig {
  // Next Id: 9
  // Enumeration of possible metrics in the Overview Data table.
  enum Column {
    COLUMN_UNKNOWN = 0 [
      (options.label) = 'Unknown',
      (options.accessor_key) = '',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_SHOPIFY_STORE_NAME = 1 [
      (options.label) = 'Store name',
      (options.accessor_key) = 'shopifyStoreName',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_GROSS_SALES = 2 [
      (options.label) = 'Gross sales',
      (options.accessor_key) = 'grossSales',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_TOTAL_SALES = 3 [
      (options.label) = 'Total sales',
      (options.accessor_key) = 'totalSales',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_NET_SALES = 4 [
      (options.label) = 'Net sales',
      (options.accessor_key) = 'netSales',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_AVERAGE_ORDER_VALUE = 5 [
      (options.label) = 'Average order value',
      (options.accessor_key) = 'averageOrderValue',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_TOTAL_ORDERS = 6 [
      (options.label) = 'Total orders',
      (options.accessor_key) = 'totalOrders',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_NET_RETURN_VALUE = 7 [
      (options.label) = 'Net return value',
      (options.accessor_key) = 'netReturnValue',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
    COLUMN_DISCOUNT = 8 [
      (options.label) = 'Discount',
      (options.accessor_key) = 'discount',
      (options.is_sortable) = false,
      (options.is_filterable) = false
    ];
  }

  // Next Id: 8
  // Configuration for the table displayed.
  message TableConfig {
    // Specifies the order of columns in the table.
    repeated Column column_order = 1;

    // Specifies columns to be hidden in the table.
    repeated Column column_hidden = 2;

    // Specifies the default column used for sorting.
    Column default_sorted_column = 3;

    // Specifies the sorting direction.
    constants.ui.SortingDirection sorting_direction = 4;

    // Indicates whether to display the total row in the table.
    bool show_total = 5;

    // Indicates whether to display the subtotal row in the table.
    bool show_subtotal = 6;

    types.Expression filter_expression = 7;
  }

  // Specifies the type of rendering for the widget.
  constants.ui.RenderType render_type = 1;

  // Configuration for the table displayed in the widget.
  TableConfig table_config = 2;
}