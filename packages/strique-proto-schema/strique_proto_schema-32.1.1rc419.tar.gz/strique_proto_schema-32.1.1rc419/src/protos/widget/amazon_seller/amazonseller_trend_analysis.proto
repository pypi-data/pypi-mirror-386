syntax = "proto3";

package strique.model.widget.amazon_seller;

import "constants/ui/render_type.proto";
import "constants/ui/sorting_direction.proto";
import "options/strique_enum_options.proto";
import "types/filter_predicate/filters.proto";
import "types/currency/currency.proto";

option java_outer_classname = "AmazonSellerTrendAnalysisProto";
option java_package = "com.strique.model.widget.amazonseller";

// Next Id: 5
// Proto definition for Trend Analysis Data.
message AmazonSellerTrendAnalysisData {
  // Title for this widget.
  string widget_title = 1;

  // List of records for this widget.
  repeated AmazonSellerTrendAnalysisRecord records = 2;

  // Total record.
  optional AmazonSellerTrendAnalysisRecord total = 3;

  // Summary data for a subset of records.
  optional AmazonSellerTrendAnalysisRecord subtotal = 4;
}

// Next Id: 9
// Proto definition for a single record of Trend analysis.
message AmazonSellerTrendAnalysisRecord {
  // date for this record
  string formatted_date = 1 [json_name = "formattedDate"];

  uint64 total_orders = 2 [json_name = "totalOrders"];

  uint64 units_ordered = 3 [json_name = "unitsOrdered"];

  double ordered_product_sales = 4 [json_name = "orderedProductSales"];

  float avg_unit_per_order_item = 5 [json_name = "avgUnitPerOrderItem"];

  types.Currency avg_sales_per_order_item = 8 [json_name = "avgSalesPerOrderItem"];

  float conversion_rate = 7 [json_name = "conversionRate"];

  reserved 6;
}

// Next Id: 4
// Proto definition for a config of Trend analysis.
message AmazonSellerTrendAnalysisConfig {
  // Next Id: 8
  // Enumeration of possible metrics in the Trend analysis Data table.
  enum Column {
    COLUMN_UNKNOWN = 0 [
      (options.label) = 'Unknown',
      (options.accessor_key) = '',
      (options.is_sortable) = false,
      (options.is_filterable) = false,
      (options.is_dropdown_not_support) = true
    ];
    COLUMN_TOTAL_ORDERS = 1 [
      (options.label) = 'Total Orders',
      (options.accessor_key) = 'totalOrders',
      (options.is_sortable) = true,
      (options.is_filterable) = true
    ];
    COLUMN_UNITS_ORDERED = 2 [
      (options.label) = 'Units ordered',
      (options.accessor_key) = 'unitsOrdered',
      (options.is_sortable) = true,
      (options.is_filterable) = true
    ];
    COLUMN_ORDERED_PRODUCT_SALES = 3 [
      (options.label) = 'Ordered product sales',
      (options.accessor_key) = 'orderedProductSales',
      (options.is_sortable) = true,
      (options.is_filterable) = true
    ];
    COLUMN_AVG_UNIT_PER_ORDER_ITEM= 4 [
      (options.label) = 'Avg. unit / order item',
      (options.accessor_key) = 'avgUnitPerOrderItem',
      (options.is_sortable) = true,
      (options.is_filterable) = true
    ];
    COLUMN_AVG_SALES_PER_ORDER_ITEM = 5 [
      (options.label) = 'Avg. sales / order item',
      (options.accessor_key) = 'avgSalesPerOrderItem',
      (options.is_sortable) = true,
      (options.is_filterable) = true
    ];
    COLUMN_CONVERSION_RATE = 6 [
      (options.label) = 'Conversion rate',
      (options.accessor_key) = 'conversionRate',
      (options.is_sortable) = true,
      (options.is_filterable) = true,
      (options.suffix) = '%'
    ];
    COLUMN_DATE = 7 [
      (options.label) = 'Date',
      (options.accessor_key) = 'formattedDate',
      (options.is_sortable) = true,
      (options.is_filterable) = false,
      (options.is_dropdown_not_support) = true
    ];
  }

  // Next Id: 8
  // Configuration for the table displayed.
  message TableConfig {
    // Specifies the order of columns in the table.
    repeated Column column_order = 1;

    // Specifies columns to be hidden in the table.
    repeated Column column_hidden = 2;

    // Specifies the default column used for sorting.
    Column default_sorted_column = 3;

    // Specifies the sorting direction.
    constants.ui.SortingDirection sorting_direction = 4;

    // Indicates whether to display the total row in the table.
    bool show_total = 5;

    // Indicates whether to display the subtotal row in the table.
    bool show_subtotal = 6;

    types.Expression filter_expression = 7;
  }

  // Next Id: 3
  // Configuration for the area chart displayed.
  message AreaChartConfig {
    // Specifies the dimension for the area chart.
    Column dimension = 1;

    // Specifies the areas for the area chart.
    repeated Column areas = 2;
  }

  // Specifies the type of rendering for the widget.
  constants.ui.RenderType render_type = 1;

  // Configuration for the table displayed in the widget.
  TableConfig table_config = 2;

  // Configuration for the area chart displayed in the widget.
  AreaChartConfig area_chart_config = 3;
}