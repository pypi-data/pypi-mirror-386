"""Utilities for exporting widgets to standalone HTML files."""

from pathlib import Path
from typing import TYPE_CHECKING, Union

if TYPE_CHECKING:
    from ..ir import IntermediateRepresentation
    from ..structured_prompt import StructuredPrompt

HTML_TEMPLATE = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    {js_prelude}
    <style>
        body {{
            margin: 0;
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #f5f5f5;
        }}
        .page-header {{
            max-width: 1600px;
            margin: 0 auto 20px;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }}
        .page-header h1 {{
            margin: 0;
            font-size: 24px;
            color: #333;
        }}
        .page-header p {{
            margin: 8px 0 0;
            color: #666;
            font-size: 14px;
        }}
        .widget-wrapper {{
            max-width: 1600px;
            margin: 0 auto;
        }}
    </style>
</head>
<body>
    <div class="page-header">
        <h1>{title}</h1>
        <p>Generated by t-prompts widget export</p>
    </div>
    <div class="widget-wrapper">
        {widget_html}
    </div>
</body>
</html>
"""

GALLERY_TEMPLATE = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    {js_prelude}
    <style>
        body {{
            margin: 0;
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #f5f5f5;
        }}
        .page-header {{
            max-width: 1800px;
            margin: 0 auto 20px;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }}
        .page-header h1 {{
            margin: 0;
            font-size: 24px;
            color: #333;
        }}
        .page-header p {{
            margin: 8px 0 0;
            color: #666;
            font-size: 14px;
        }}
        .gallery-container {{
            max-width: 1800px;
            margin: 0 auto;
        }}
        .gallery-item {{
            margin-bottom: 40px;
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }}
        .gallery-item-header {{
            margin: 0 0 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e0e0e0;
        }}
        .gallery-item-header h2 {{
            margin: 0;
            font-size: 18px;
            color: #333;
        }}
        .gallery-item-header p {{
            margin: 4px 0 0;
            color: #666;
            font-size: 13px;
        }}
    </style>
</head>
<body>
    <div class="page-header">
        <h1>{title}</h1>
        <p>Widget Gallery - {count} items</p>
    </div>
    <div class="gallery-container">
        {gallery_items}
    </div>
</body>
</html>
"""


def save_widget_html(
    obj: Union["StructuredPrompt", "IntermediateRepresentation"],
    path: Union[str, Path],
    title: str = "T-Prompts Widget",
) -> Path:
    """
    Save a widget to a standalone HTML file.

    Parameters
    ----------
    obj : StructuredPrompt | IntermediateRepresentation
        The object to render as a widget.
    path : str | Path
        Output file path.
    title : str, optional
        Page title, default "T-Prompts Widget".

    Returns
    -------
    Path
        The path to the created file.

    Examples
    --------
    >>> task = "translate"
    >>> p = prompt(t"Task: {task:t}")
    >>> save_widget_html(p, "output/widget.html", "Simple Prompt")
    PosixPath('output/widget.html')
    """
    from .renderer import js_prelude

    path = Path(path)
    path.parent.mkdir(parents=True, exist_ok=True)

    # Get widget HTML and JavaScript prelude
    widget_html = obj._repr_html_()
    js_prelude_html = js_prelude()

    # Wrap in full HTML document
    html = HTML_TEMPLATE.format(title=title, js_prelude=js_prelude_html, widget_html=widget_html)

    # Write to file
    path.write_text(html, encoding="utf-8")

    return path


def create_widget_gallery(
    widgets: dict[str, Union["StructuredPrompt", "IntermediateRepresentation"]],
    path: Union[str, Path],
    title: str = "T-Prompts Widget Gallery",
) -> Path:
    """
    Create a gallery page with multiple widgets.

    Parameters
    ----------
    widgets : dict[str, StructuredPrompt | IntermediateRepresentation]
        Dictionary mapping labels to widget objects.
    path : str | Path
        Output file path.
    title : str, optional
        Page title, default "T-Prompts Widget Gallery".

    Returns
    -------
    Path
        The path to the created file.

    Examples
    --------
    >>> widgets = {
    ...     "Simple": prompt(t"Task: translate"),
    ...     "Nested": prompt(t"Outer: {inner:i}"),
    ... }
    >>> create_widget_gallery(widgets, "output/gallery.html")
    PosixPath('output/gallery.html')
    """
    from .renderer import js_prelude

    path = Path(path)
    path.parent.mkdir(parents=True, exist_ok=True)

    # Get JavaScript prelude once for all widgets
    js_prelude_html = js_prelude()

    # Render each widget
    gallery_items = []
    for label, obj in widgets.items():
        widget_html = obj._repr_html_()

        # Add description if available
        description = ""
        if hasattr(obj, "__class__"):
            description = f"Type: {obj.__class__.__name__}"

        item_html = f"""
        <div class="gallery-item">
            <div class="gallery-item-header">
                <h2>{label}</h2>
                <p>{description}</p>
            </div>
            {widget_html}
        </div>
        """
        gallery_items.append(item_html)

    # Combine all items
    gallery_html = "".join(gallery_items)

    # Wrap in full HTML document
    html = GALLERY_TEMPLATE.format(
        title=title, js_prelude=js_prelude_html, count=len(widgets), gallery_items=gallery_html
    )

    # Write to file
    path.write_text(html, encoding="utf-8")

    return path
