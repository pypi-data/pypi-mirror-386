name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  actions: read
  repository-projects: read

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
      # Additional permissions needed for coverage action
      actions: read
      repository-projects: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true  # Ensure token persists for coverage action's git operations

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Setup
        run: ./scripts/setup.sh

      - name: Run linting
        run: pnpm lint

      - name: Build Widgets
        run: pnpm --filter @t-prompts/widgets build:python

      - name: Run tests with coverage
        run: pnpm --filter @t-prompts/widgets test:coverage

      - name: Generate TypeScript Coverage Badge
        if: github.ref == 'refs/heads/main'
        working-directory: widgets
        run: |
          # Extract coverage percentage from coverage-summary.json
          COVERAGE=$(node -p "
            const summary = require('./coverage/coverage-summary.json');
            const total = summary.total;
            const statements = total.statements.pct;
            const branches = total.branches.pct;
            const functions = total.functions.pct;
            const lines = total.lines.pct;
            Math.round((statements + branches + functions + lines) / 4);
          ")

          echo "TypeScript Coverage: ${COVERAGE}%"

          # Determine badge color
          if [ "$COVERAGE" -ge 80 ]; then
            COLOR="brightgreen"
          elif [ "$COVERAGE" -ge 70 ]; then
            COLOR="orange"
          else
            COLOR="red"
          fi

          # Create badge directory
          mkdir -p ../badges

          # Generate badge SVG using shields.io
          curl -o ../badges/typescript-coverage.svg \
            "https://img.shields.io/badge/TypeScript_Coverage-${COVERAGE}%25-${COLOR}"

          echo "Generated badge with coverage ${COVERAGE}% and color ${COLOR}"

      - name: Deploy TypeScript Coverage Badge
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./badges
          publish_branch: typescript-coverage-badge
          keep_files: false

      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: uv run playwright install --with-deps chromium

      - name: Install Playwright System Dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: uv run playwright install-deps chromium

      - name: Run Linting
        run: uv run ruff check .

      - name: Run All Tests with Coverage (including visual tests)
        run: uv run pytest --cov=src/t_prompts --cov-report=xml --cov-report=term

      - name: Build Documentation
        run: uv run mkdocs build

      - name: Temporarily disable git hooks for coverage action
        run: |
          # The coverage action runs in a container without pre-commit installed
          # Temporarily rename hooks to prevent "pre-commit not found" errors
          if [ -f .git/hooks/pre-commit ]; then
            mv .git/hooks/pre-commit .git/hooks/pre-commit.disabled
          fi

      - name: Coverage Comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 80
          MINIMUM_ORANGE: 70

      - name: Re-enable git hooks
        if: always()
        run: |
          # Restore the pre-commit hook
          if [ -f .git/hooks/pre-commit.disabled ]; then
            mv .git/hooks/pre-commit.disabled .git/hooks/pre-commit
          fi

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v4
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt
