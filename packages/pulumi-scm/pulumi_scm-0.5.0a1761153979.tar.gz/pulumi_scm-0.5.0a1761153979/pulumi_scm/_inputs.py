# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AddressGroupDynamicValueArgs',
    'AddressGroupDynamicValueArgsDict',
    'AntiSpywareProfileMicaEngineSpywareEnabledListArgs',
    'AntiSpywareProfileMicaEngineSpywareEnabledListArgsDict',
    'AntiSpywareProfileRuleArgs',
    'AntiSpywareProfileRuleArgsDict',
    'AntiSpywareProfileRuleActionArgs',
    'AntiSpywareProfileRuleActionArgsDict',
    'AntiSpywareProfileRuleActionBlockIpArgs',
    'AntiSpywareProfileRuleActionBlockIpArgsDict',
    'AntiSpywareProfileThreatExceptionArgs',
    'AntiSpywareProfileThreatExceptionArgsDict',
    'AntiSpywareProfileThreatExceptionActionArgs',
    'AntiSpywareProfileThreatExceptionActionArgsDict',
    'AntiSpywareProfileThreatExceptionActionBlockIpArgs',
    'AntiSpywareProfileThreatExceptionActionBlockIpArgsDict',
    'AntiSpywareProfileThreatExceptionExemptIpArgs',
    'AntiSpywareProfileThreatExceptionExemptIpArgsDict',
    'AntiSpywareSignatureDefaultActionArgs',
    'AntiSpywareSignatureDefaultActionArgsDict',
    'AntiSpywareSignatureDefaultActionBlockIpArgs',
    'AntiSpywareSignatureDefaultActionBlockIpArgsDict',
    'AntiSpywareSignatureSignatureArgs',
    'AntiSpywareSignatureSignatureArgsDict',
    'AntiSpywareSignatureSignatureCombinationArgs',
    'AntiSpywareSignatureSignatureCombinationArgsDict',
    'AntiSpywareSignatureSignatureCombinationAndConditionArgs',
    'AntiSpywareSignatureSignatureCombinationAndConditionArgsDict',
    'AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgs',
    'AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgsDict',
    'AntiSpywareSignatureSignatureCombinationTimeAttributeArgs',
    'AntiSpywareSignatureSignatureCombinationTimeAttributeArgsDict',
    'AntiSpywareSignatureSignatureStandardArgs',
    'AntiSpywareSignatureSignatureStandardArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgsDict',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs',
    'AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgsDict',
    'ApplicationDefaultArgs',
    'ApplicationDefaultArgsDict',
    'ApplicationDefaultIdentByIcmp6TypeArgs',
    'ApplicationDefaultIdentByIcmp6TypeArgsDict',
    'ApplicationDefaultIdentByIcmpTypeArgs',
    'ApplicationDefaultIdentByIcmpTypeArgsDict',
    'ApplicationFilterTaggingArgs',
    'ApplicationFilterTaggingArgsDict',
    'ApplicationSignatureArgs',
    'ApplicationSignatureArgsDict',
    'ApplicationSignatureAndConditionArgs',
    'ApplicationSignatureAndConditionArgsDict',
    'ApplicationSignatureAndConditionOrConditionArgs',
    'ApplicationSignatureAndConditionOrConditionArgsDict',
    'ApplicationSignatureAndConditionOrConditionOperatorArgs',
    'ApplicationSignatureAndConditionOrConditionOperatorArgsDict',
    'ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs',
    'ApplicationSignatureAndConditionOrConditionOperatorEqualToArgsDict',
    'ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgs',
    'ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgsDict',
    'ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgs',
    'ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgsDict',
    'ApplicationSignatureAndConditionOrConditionOperatorLessThanArgs',
    'ApplicationSignatureAndConditionOrConditionOperatorLessThanArgsDict',
    'ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgs',
    'ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgsDict',
    'ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs',
    'ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgsDict',
    'ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs',
    'ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgsDict',
    'AuthenticationProfileLockoutArgs',
    'AuthenticationProfileLockoutArgsDict',
    'AuthenticationProfileMethodArgs',
    'AuthenticationProfileMethodArgsDict',
    'AuthenticationProfileMethodCloudArgs',
    'AuthenticationProfileMethodCloudArgsDict',
    'AuthenticationProfileMethodKerberosArgs',
    'AuthenticationProfileMethodKerberosArgsDict',
    'AuthenticationProfileMethodLdapArgs',
    'AuthenticationProfileMethodLdapArgsDict',
    'AuthenticationProfileMethodRadiusArgs',
    'AuthenticationProfileMethodRadiusArgsDict',
    'AuthenticationProfileMethodSamlIdpArgs',
    'AuthenticationProfileMethodSamlIdpArgsDict',
    'AuthenticationProfileMethodTacplusArgs',
    'AuthenticationProfileMethodTacplusArgsDict',
    'AuthenticationProfileMultiFactorAuthArgs',
    'AuthenticationProfileMultiFactorAuthArgsDict',
    'AuthenticationProfileSingleSignOnArgs',
    'AuthenticationProfileSingleSignOnArgsDict',
    'CertificateProfileCaCertificateArgs',
    'CertificateProfileCaCertificateArgsDict',
    'CertificateProfileUsernameFieldArgs',
    'CertificateProfileUsernameFieldArgsDict',
    'DecryptionProfileSslForwardProxyArgs',
    'DecryptionProfileSslForwardProxyArgsDict',
    'DecryptionProfileSslInboundProxyArgs',
    'DecryptionProfileSslInboundProxyArgsDict',
    'DecryptionProfileSslNoProxyArgs',
    'DecryptionProfileSslNoProxyArgsDict',
    'DecryptionProfileSslProtocolSettingsArgs',
    'DecryptionProfileSslProtocolSettingsArgsDict',
    'DecryptionRuleTypeArgs',
    'DecryptionRuleTypeArgsDict',
    'DnsSecurityProfileBotnetDomainsArgs',
    'DnsSecurityProfileBotnetDomainsArgsDict',
    'DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgs',
    'DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgsDict',
    'DnsSecurityProfileBotnetDomainsListArgs',
    'DnsSecurityProfileBotnetDomainsListArgsDict',
    'DnsSecurityProfileBotnetDomainsListActionArgs',
    'DnsSecurityProfileBotnetDomainsListActionArgsDict',
    'DnsSecurityProfileBotnetDomainsSinkholeArgs',
    'DnsSecurityProfileBotnetDomainsSinkholeArgsDict',
    'DnsSecurityProfileBotnetDomainsWhitelistArgs',
    'DnsSecurityProfileBotnetDomainsWhitelistArgsDict',
    'ExternalDynamicListTypeArgs',
    'ExternalDynamicListTypeArgsDict',
    'ExternalDynamicListTypeDomainArgs',
    'ExternalDynamicListTypeDomainArgsDict',
    'ExternalDynamicListTypeDomainDomainAuthArgs',
    'ExternalDynamicListTypeDomainDomainAuthArgsDict',
    'ExternalDynamicListTypeDomainRecurringArgs',
    'ExternalDynamicListTypeDomainRecurringArgsDict',
    'ExternalDynamicListTypeDomainRecurringDailyArgs',
    'ExternalDynamicListTypeDomainRecurringDailyArgsDict',
    'ExternalDynamicListTypeDomainRecurringMonthlyArgs',
    'ExternalDynamicListTypeDomainRecurringMonthlyArgsDict',
    'ExternalDynamicListTypeDomainRecurringWeeklyArgs',
    'ExternalDynamicListTypeDomainRecurringWeeklyArgsDict',
    'ExternalDynamicListTypeImeiArgs',
    'ExternalDynamicListTypeImeiArgsDict',
    'ExternalDynamicListTypeImeiImeiAuthArgs',
    'ExternalDynamicListTypeImeiImeiAuthArgsDict',
    'ExternalDynamicListTypeImeiRecurringArgs',
    'ExternalDynamicListTypeImeiRecurringArgsDict',
    'ExternalDynamicListTypeImeiRecurringDailyArgs',
    'ExternalDynamicListTypeImeiRecurringDailyArgsDict',
    'ExternalDynamicListTypeImeiRecurringMonthlyArgs',
    'ExternalDynamicListTypeImeiRecurringMonthlyArgsDict',
    'ExternalDynamicListTypeImeiRecurringWeeklyArgs',
    'ExternalDynamicListTypeImeiRecurringWeeklyArgsDict',
    'ExternalDynamicListTypeImsiArgs',
    'ExternalDynamicListTypeImsiArgsDict',
    'ExternalDynamicListTypeImsiImsiAuthArgs',
    'ExternalDynamicListTypeImsiImsiAuthArgsDict',
    'ExternalDynamicListTypeImsiRecurringArgs',
    'ExternalDynamicListTypeImsiRecurringArgsDict',
    'ExternalDynamicListTypeImsiRecurringDailyArgs',
    'ExternalDynamicListTypeImsiRecurringDailyArgsDict',
    'ExternalDynamicListTypeImsiRecurringMonthlyArgs',
    'ExternalDynamicListTypeImsiRecurringMonthlyArgsDict',
    'ExternalDynamicListTypeImsiRecurringWeeklyArgs',
    'ExternalDynamicListTypeImsiRecurringWeeklyArgsDict',
    'ExternalDynamicListTypeIpArgs',
    'ExternalDynamicListTypeIpArgsDict',
    'ExternalDynamicListTypeIpIpAuthArgs',
    'ExternalDynamicListTypeIpIpAuthArgsDict',
    'ExternalDynamicListTypeIpRecurringArgs',
    'ExternalDynamicListTypeIpRecurringArgsDict',
    'ExternalDynamicListTypeIpRecurringDailyArgs',
    'ExternalDynamicListTypeIpRecurringDailyArgsDict',
    'ExternalDynamicListTypeIpRecurringMonthlyArgs',
    'ExternalDynamicListTypeIpRecurringMonthlyArgsDict',
    'ExternalDynamicListTypeIpRecurringWeeklyArgs',
    'ExternalDynamicListTypeIpRecurringWeeklyArgsDict',
    'ExternalDynamicListTypePredefinedIpArgs',
    'ExternalDynamicListTypePredefinedIpArgsDict',
    'ExternalDynamicListTypePredefinedUrlArgs',
    'ExternalDynamicListTypePredefinedUrlArgsDict',
    'ExternalDynamicListTypeUrlArgs',
    'ExternalDynamicListTypeUrlArgsDict',
    'ExternalDynamicListTypeUrlRecurringArgs',
    'ExternalDynamicListTypeUrlRecurringArgsDict',
    'ExternalDynamicListTypeUrlRecurringDailyArgs',
    'ExternalDynamicListTypeUrlRecurringDailyArgsDict',
    'ExternalDynamicListTypeUrlRecurringMonthlyArgs',
    'ExternalDynamicListTypeUrlRecurringMonthlyArgsDict',
    'ExternalDynamicListTypeUrlRecurringWeeklyArgs',
    'ExternalDynamicListTypeUrlRecurringWeeklyArgsDict',
    'ExternalDynamicListTypeUrlUrlAuthArgs',
    'ExternalDynamicListTypeUrlUrlAuthArgsDict',
    'FileBlockingProfileRuleArgs',
    'FileBlockingProfileRuleArgsDict',
    'HipObjectAntiMalwareArgs',
    'HipObjectAntiMalwareArgsDict',
    'HipObjectAntiMalwareCriteriaArgs',
    'HipObjectAntiMalwareCriteriaArgsDict',
    'HipObjectAntiMalwareCriteriaLastScanTimeArgs',
    'HipObjectAntiMalwareCriteriaLastScanTimeArgsDict',
    'HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgs',
    'HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgsDict',
    'HipObjectAntiMalwareCriteriaLastScanTimeWithinArgs',
    'HipObjectAntiMalwareCriteriaLastScanTimeWithinArgsDict',
    'HipObjectAntiMalwareCriteriaProductVersionArgs',
    'HipObjectAntiMalwareCriteriaProductVersionArgsDict',
    'HipObjectAntiMalwareCriteriaProductVersionNotWithinArgs',
    'HipObjectAntiMalwareCriteriaProductVersionNotWithinArgsDict',
    'HipObjectAntiMalwareCriteriaProductVersionWithinArgs',
    'HipObjectAntiMalwareCriteriaProductVersionWithinArgsDict',
    'HipObjectAntiMalwareCriteriaVirdefVersionArgs',
    'HipObjectAntiMalwareCriteriaVirdefVersionArgsDict',
    'HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgs',
    'HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgsDict',
    'HipObjectAntiMalwareCriteriaVirdefVersionWithinArgs',
    'HipObjectAntiMalwareCriteriaVirdefVersionWithinArgsDict',
    'HipObjectAntiMalwareVendorArgs',
    'HipObjectAntiMalwareVendorArgsDict',
    'HipObjectCertificateArgs',
    'HipObjectCertificateArgsDict',
    'HipObjectCertificateCriteriaArgs',
    'HipObjectCertificateCriteriaArgsDict',
    'HipObjectCertificateCriteriaCertificateAttributeArgs',
    'HipObjectCertificateCriteriaCertificateAttributeArgsDict',
    'HipObjectCustomChecksArgs',
    'HipObjectCustomChecksArgsDict',
    'HipObjectCustomChecksCriteriaArgs',
    'HipObjectCustomChecksCriteriaArgsDict',
    'HipObjectCustomChecksCriteriaPlistArgs',
    'HipObjectCustomChecksCriteriaPlistArgsDict',
    'HipObjectCustomChecksCriteriaPlistKeyArgs',
    'HipObjectCustomChecksCriteriaPlistKeyArgsDict',
    'HipObjectCustomChecksCriteriaProcessListArgs',
    'HipObjectCustomChecksCriteriaProcessListArgsDict',
    'HipObjectCustomChecksCriteriaRegistryKeyArgs',
    'HipObjectCustomChecksCriteriaRegistryKeyArgsDict',
    'HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgs',
    'HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgsDict',
    'HipObjectDataLossPreventionArgs',
    'HipObjectDataLossPreventionArgsDict',
    'HipObjectDataLossPreventionCriteriaArgs',
    'HipObjectDataLossPreventionCriteriaArgsDict',
    'HipObjectDataLossPreventionVendorArgs',
    'HipObjectDataLossPreventionVendorArgsDict',
    'HipObjectDiskBackupArgs',
    'HipObjectDiskBackupArgsDict',
    'HipObjectDiskBackupCriteriaArgs',
    'HipObjectDiskBackupCriteriaArgsDict',
    'HipObjectDiskBackupCriteriaLastBackupTimeArgs',
    'HipObjectDiskBackupCriteriaLastBackupTimeArgsDict',
    'HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgs',
    'HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgsDict',
    'HipObjectDiskBackupCriteriaLastBackupTimeWithinArgs',
    'HipObjectDiskBackupCriteriaLastBackupTimeWithinArgsDict',
    'HipObjectDiskBackupVendorArgs',
    'HipObjectDiskBackupVendorArgsDict',
    'HipObjectDiskEncryptionArgs',
    'HipObjectDiskEncryptionArgsDict',
    'HipObjectDiskEncryptionCriteriaArgs',
    'HipObjectDiskEncryptionCriteriaArgsDict',
    'HipObjectDiskEncryptionCriteriaEncryptedLocationArgs',
    'HipObjectDiskEncryptionCriteriaEncryptedLocationArgsDict',
    'HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs',
    'HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgsDict',
    'HipObjectDiskEncryptionVendorArgs',
    'HipObjectDiskEncryptionVendorArgsDict',
    'HipObjectFirewallArgs',
    'HipObjectFirewallArgsDict',
    'HipObjectFirewallCriteriaArgs',
    'HipObjectFirewallCriteriaArgsDict',
    'HipObjectFirewallVendorArgs',
    'HipObjectFirewallVendorArgsDict',
    'HipObjectHostInfoArgs',
    'HipObjectHostInfoArgsDict',
    'HipObjectHostInfoCriteriaArgs',
    'HipObjectHostInfoCriteriaArgsDict',
    'HipObjectHostInfoCriteriaClientVersionArgs',
    'HipObjectHostInfoCriteriaClientVersionArgsDict',
    'HipObjectHostInfoCriteriaDomainArgs',
    'HipObjectHostInfoCriteriaDomainArgsDict',
    'HipObjectHostInfoCriteriaHostIdArgs',
    'HipObjectHostInfoCriteriaHostIdArgsDict',
    'HipObjectHostInfoCriteriaHostNameArgs',
    'HipObjectHostInfoCriteriaHostNameArgsDict',
    'HipObjectHostInfoCriteriaOsArgs',
    'HipObjectHostInfoCriteriaOsArgsDict',
    'HipObjectHostInfoCriteriaOsContainsArgs',
    'HipObjectHostInfoCriteriaOsContainsArgsDict',
    'HipObjectHostInfoCriteriaSerialNumberArgs',
    'HipObjectHostInfoCriteriaSerialNumberArgsDict',
    'HipObjectMobileDeviceArgs',
    'HipObjectMobileDeviceArgsDict',
    'HipObjectMobileDeviceCriteriaArgs',
    'HipObjectMobileDeviceCriteriaArgsDict',
    'HipObjectMobileDeviceCriteriaApplicationsArgs',
    'HipObjectMobileDeviceCriteriaApplicationsArgsDict',
    'HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgs',
    'HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgsDict',
    'HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgs',
    'HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgsDict',
    'HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgs',
    'HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgsDict',
    'HipObjectMobileDeviceCriteriaApplicationsIncludeArgs',
    'HipObjectMobileDeviceCriteriaApplicationsIncludeArgsDict',
    'HipObjectMobileDeviceCriteriaImeiArgs',
    'HipObjectMobileDeviceCriteriaImeiArgsDict',
    'HipObjectMobileDeviceCriteriaLastCheckinTimeArgs',
    'HipObjectMobileDeviceCriteriaLastCheckinTimeArgsDict',
    'HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgs',
    'HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgsDict',
    'HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgs',
    'HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgsDict',
    'HipObjectMobileDeviceCriteriaModelArgs',
    'HipObjectMobileDeviceCriteriaModelArgsDict',
    'HipObjectMobileDeviceCriteriaPhoneNumberArgs',
    'HipObjectMobileDeviceCriteriaPhoneNumberArgsDict',
    'HipObjectMobileDeviceCriteriaTagArgs',
    'HipObjectMobileDeviceCriteriaTagArgsDict',
    'HipObjectNetworkInfoArgs',
    'HipObjectNetworkInfoArgsDict',
    'HipObjectNetworkInfoCriteriaArgs',
    'HipObjectNetworkInfoCriteriaArgsDict',
    'HipObjectNetworkInfoCriteriaNetworkArgs',
    'HipObjectNetworkInfoCriteriaNetworkArgsDict',
    'HipObjectNetworkInfoCriteriaNetworkIsArgs',
    'HipObjectNetworkInfoCriteriaNetworkIsArgsDict',
    'HipObjectNetworkInfoCriteriaNetworkIsMobileArgs',
    'HipObjectNetworkInfoCriteriaNetworkIsMobileArgsDict',
    'HipObjectNetworkInfoCriteriaNetworkIsNotArgs',
    'HipObjectNetworkInfoCriteriaNetworkIsNotArgsDict',
    'HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgs',
    'HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgsDict',
    'HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgs',
    'HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgsDict',
    'HipObjectNetworkInfoCriteriaNetworkIsWifiArgs',
    'HipObjectNetworkInfoCriteriaNetworkIsWifiArgsDict',
    'HipObjectPatchManagementArgs',
    'HipObjectPatchManagementArgsDict',
    'HipObjectPatchManagementCriteriaArgs',
    'HipObjectPatchManagementCriteriaArgsDict',
    'HipObjectPatchManagementCriteriaMissingPatchesArgs',
    'HipObjectPatchManagementCriteriaMissingPatchesArgsDict',
    'HipObjectPatchManagementCriteriaMissingPatchesSeverityArgs',
    'HipObjectPatchManagementCriteriaMissingPatchesSeverityArgsDict',
    'HipObjectPatchManagementVendorArgs',
    'HipObjectPatchManagementVendorArgsDict',
    'HttpHeaderProfileHttpHeaderInsertionArgs',
    'HttpHeaderProfileHttpHeaderInsertionArgsDict',
    'HttpHeaderProfileHttpHeaderInsertionTypeArgs',
    'HttpHeaderProfileHttpHeaderInsertionTypeArgsDict',
    'HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgs',
    'HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgsDict',
    'IkeCryptoProfileLifetimeArgs',
    'IkeCryptoProfileLifetimeArgsDict',
    'IkeGatewayAuthenticationArgs',
    'IkeGatewayAuthenticationArgsDict',
    'IkeGatewayAuthenticationCertificateArgs',
    'IkeGatewayAuthenticationCertificateArgsDict',
    'IkeGatewayAuthenticationCertificateLocalCertificateArgs',
    'IkeGatewayAuthenticationCertificateLocalCertificateArgsDict',
    'IkeGatewayAuthenticationPreSharedKeyArgs',
    'IkeGatewayAuthenticationPreSharedKeyArgsDict',
    'IkeGatewayLocalIdArgs',
    'IkeGatewayLocalIdArgsDict',
    'IkeGatewayPeerAddressArgs',
    'IkeGatewayPeerAddressArgsDict',
    'IkeGatewayPeerIdArgs',
    'IkeGatewayPeerIdArgsDict',
    'IkeGatewayProtocolArgs',
    'IkeGatewayProtocolArgsDict',
    'IkeGatewayProtocolCommonArgs',
    'IkeGatewayProtocolCommonArgsDict',
    'IkeGatewayProtocolCommonFragmentationArgs',
    'IkeGatewayProtocolCommonFragmentationArgsDict',
    'IkeGatewayProtocolCommonNatTraversalArgs',
    'IkeGatewayProtocolCommonNatTraversalArgsDict',
    'IkeGatewayProtocolIkev1Args',
    'IkeGatewayProtocolIkev1ArgsDict',
    'IkeGatewayProtocolIkev1DpdArgs',
    'IkeGatewayProtocolIkev1DpdArgsDict',
    'IkeGatewayProtocolIkev2Args',
    'IkeGatewayProtocolIkev2ArgsDict',
    'IkeGatewayProtocolIkev2DpdArgs',
    'IkeGatewayProtocolIkev2DpdArgsDict',
    'IpsecCryptoProfileAhArgs',
    'IpsecCryptoProfileAhArgsDict',
    'IpsecCryptoProfileEspArgs',
    'IpsecCryptoProfileEspArgsDict',
    'IpsecCryptoProfileLifesizeArgs',
    'IpsecCryptoProfileLifesizeArgsDict',
    'IpsecCryptoProfileLifetimeArgs',
    'IpsecCryptoProfileLifetimeArgsDict',
    'IpsecTunnelAutoKeyArgs',
    'IpsecTunnelAutoKeyArgsDict',
    'IpsecTunnelAutoKeyIkeGatewayArgs',
    'IpsecTunnelAutoKeyIkeGatewayArgsDict',
    'IpsecTunnelAutoKeyProxyIdArgs',
    'IpsecTunnelAutoKeyProxyIdArgsDict',
    'IpsecTunnelAutoKeyProxyIdProtocolArgs',
    'IpsecTunnelAutoKeyProxyIdProtocolArgsDict',
    'IpsecTunnelAutoKeyProxyIdProtocolTcpArgs',
    'IpsecTunnelAutoKeyProxyIdProtocolTcpArgsDict',
    'IpsecTunnelAutoKeyProxyIdProtocolUdpArgs',
    'IpsecTunnelAutoKeyProxyIdProtocolUdpArgsDict',
    'IpsecTunnelAutoKeyProxyIdV6Args',
    'IpsecTunnelAutoKeyProxyIdV6ArgsDict',
    'IpsecTunnelAutoKeyProxyIdV6ProtocolArgs',
    'IpsecTunnelAutoKeyProxyIdV6ProtocolArgsDict',
    'IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgs',
    'IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgsDict',
    'IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgs',
    'IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgsDict',
    'IpsecTunnelTunnelMonitorArgs',
    'IpsecTunnelTunnelMonitorArgsDict',
    'KerberosServerProfileServerArgs',
    'KerberosServerProfileServerArgsDict',
    'LdapServerProfileServerArgs',
    'LdapServerProfileServerArgsDict',
    'MfaServerMfaVendorTypeArgs',
    'MfaServerMfaVendorTypeArgsDict',
    'MfaServerMfaVendorTypeDuoSecurityV2Args',
    'MfaServerMfaVendorTypeDuoSecurityV2ArgsDict',
    'MfaServerMfaVendorTypeOktaAdaptiveV1Args',
    'MfaServerMfaVendorTypeOktaAdaptiveV1ArgsDict',
    'MfaServerMfaVendorTypePingIdentityV1Args',
    'MfaServerMfaVendorTypePingIdentityV1ArgsDict',
    'MfaServerMfaVendorTypeRsaSecuridAccessV1Args',
    'MfaServerMfaVendorTypeRsaSecuridAccessV1ArgsDict',
    'NatRuleDestinationTranslationArgs',
    'NatRuleDestinationTranslationArgsDict',
    'NatRuleDestinationTranslationDnsRewriteArgs',
    'NatRuleDestinationTranslationDnsRewriteArgsDict',
    'NatRuleDynamicDestinationTranslationArgs',
    'NatRuleDynamicDestinationTranslationArgsDict',
    'NatRuleSourceTranslationArgs',
    'NatRuleSourceTranslationArgsDict',
    'NatRuleSourceTranslationFallbackArgs',
    'NatRuleSourceTranslationFallbackArgsDict',
    'NatRuleTargetArgs',
    'NatRuleTargetArgsDict',
    'NatRuleTargetDeviceArgs',
    'NatRuleTargetDeviceArgsDict',
    'QosPolicyRuleActionArgs',
    'QosPolicyRuleActionArgsDict',
    'QosPolicyRuleDscpTosArgs',
    'QosPolicyRuleDscpTosArgsDict',
    'QosPolicyRuleDscpTosCodepointArgs',
    'QosPolicyRuleDscpTosCodepointArgsDict',
    'QosPolicyRuleDscpTosCodepointTypeArgs',
    'QosPolicyRuleDscpTosCodepointTypeArgsDict',
    'QosPolicyRuleDscpTosCodepointTypeAfArgs',
    'QosPolicyRuleDscpTosCodepointTypeAfArgsDict',
    'QosPolicyRuleDscpTosCodepointTypeCsArgs',
    'QosPolicyRuleDscpTosCodepointTypeCsArgsDict',
    'QosPolicyRuleDscpTosCodepointTypeCustomArgs',
    'QosPolicyRuleDscpTosCodepointTypeCustomArgsDict',
    'QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgs',
    'QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgsDict',
    'QosPolicyRuleDscpTosCodepointTypeTosArgs',
    'QosPolicyRuleDscpTosCodepointTypeTosArgsDict',
    'QosProfileAggregateBandwidthArgs',
    'QosProfileAggregateBandwidthArgsDict',
    'QosProfileClassBandwidthTypeArgs',
    'QosProfileClassBandwidthTypeArgsDict',
    'QosProfileClassBandwidthTypeMbpsArgs',
    'QosProfileClassBandwidthTypeMbpsArgsDict',
    'QosProfileClassBandwidthTypeMbpsClassArgs',
    'QosProfileClassBandwidthTypeMbpsClassArgsDict',
    'QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgs',
    'QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgsDict',
    'QosProfileClassBandwidthTypePercentageArgs',
    'QosProfileClassBandwidthTypePercentageArgsDict',
    'QosProfileClassBandwidthTypePercentageClassArgs',
    'QosProfileClassBandwidthTypePercentageClassArgsDict',
    'QosProfileClassBandwidthTypePercentageClassClassBandwidthArgs',
    'QosProfileClassBandwidthTypePercentageClassClassBandwidthArgsDict',
    'RadiusServerProfileProtocolArgs',
    'RadiusServerProfileProtocolArgsDict',
    'RadiusServerProfileProtocolEapTtlsWithPapArgs',
    'RadiusServerProfileProtocolEapTtlsWithPapArgsDict',
    'RadiusServerProfileProtocolPeapMschapV2Args',
    'RadiusServerProfileProtocolPeapMschapV2ArgsDict',
    'RadiusServerProfileProtocolPeapWithGtcArgs',
    'RadiusServerProfileProtocolPeapWithGtcArgsDict',
    'RadiusServerProfileServerArgs',
    'RadiusServerProfileServerArgsDict',
    'RegionGeoLocationArgs',
    'RegionGeoLocationArgsDict',
    'RemoteNetworkEcmpTunnelArgs',
    'RemoteNetworkEcmpTunnelArgsDict',
    'RemoteNetworkEcmpTunnelProtocolArgs',
    'RemoteNetworkEcmpTunnelProtocolArgsDict',
    'RemoteNetworkEcmpTunnelProtocolBgpArgs',
    'RemoteNetworkEcmpTunnelProtocolBgpArgsDict',
    'RemoteNetworkProtocolArgs',
    'RemoteNetworkProtocolArgsDict',
    'RemoteNetworkProtocolBgpArgs',
    'RemoteNetworkProtocolBgpArgsDict',
    'RemoteNetworkProtocolBgpPeerArgs',
    'RemoteNetworkProtocolBgpPeerArgsDict',
    'ScepProfileAlgorithmArgs',
    'ScepProfileAlgorithmArgsDict',
    'ScepProfileAlgorithmRsaArgs',
    'ScepProfileAlgorithmRsaArgsDict',
    'ScepProfileCertificateAttributesArgs',
    'ScepProfileCertificateAttributesArgsDict',
    'ScepProfileScepChallengeArgs',
    'ScepProfileScepChallengeArgsDict',
    'ScepProfileScepChallengeDynamicChallengeArgs',
    'ScepProfileScepChallengeDynamicChallengeArgsDict',
    'ScheduleScheduleTypeArgs',
    'ScheduleScheduleTypeArgsDict',
    'ScheduleScheduleTypeRecurringArgs',
    'ScheduleScheduleTypeRecurringArgsDict',
    'ScheduleScheduleTypeRecurringWeeklyArgs',
    'ScheduleScheduleTypeRecurringWeeklyArgsDict',
    'SecurityRuleProfileSettingArgs',
    'SecurityRuleProfileSettingArgsDict',
    'ServiceConnectionBgpPeerArgs',
    'ServiceConnectionBgpPeerArgsDict',
    'ServiceConnectionProtocolArgs',
    'ServiceConnectionProtocolArgsDict',
    'ServiceConnectionProtocolBgpArgs',
    'ServiceConnectionProtocolBgpArgsDict',
    'ServiceConnectionQosArgs',
    'ServiceConnectionQosArgsDict',
    'ServiceProtocolArgs',
    'ServiceProtocolArgsDict',
    'ServiceProtocolTcpArgs',
    'ServiceProtocolTcpArgsDict',
    'ServiceProtocolTcpOverrideArgs',
    'ServiceProtocolTcpOverrideArgsDict',
    'ServiceProtocolUdpArgs',
    'ServiceProtocolUdpArgsDict',
    'ServiceProtocolUdpOverrideArgs',
    'ServiceProtocolUdpOverrideArgsDict',
    'TacacsServerProfileServerArgs',
    'TacacsServerProfileServerArgsDict',
    'TlsServiceProfileProtocolSettingsArgs',
    'TlsServiceProfileProtocolSettingsArgsDict',
    'TrafficSteeringRuleActionArgs',
    'TrafficSteeringRuleActionArgsDict',
    'TrafficSteeringRuleActionForwardArgs',
    'TrafficSteeringRuleActionForwardArgsDict',
    'UrlAccessProfileCredentialEnforcementArgs',
    'UrlAccessProfileCredentialEnforcementArgsDict',
    'UrlAccessProfileCredentialEnforcementModeArgs',
    'UrlAccessProfileCredentialEnforcementModeArgsDict',
    'VulnerabilityProtectionProfileRuleArgs',
    'VulnerabilityProtectionProfileRuleArgsDict',
    'VulnerabilityProtectionProfileRuleActionArgs',
    'VulnerabilityProtectionProfileRuleActionArgsDict',
    'VulnerabilityProtectionProfileRuleActionBlockIpArgs',
    'VulnerabilityProtectionProfileRuleActionBlockIpArgsDict',
    'VulnerabilityProtectionProfileThreatExceptionArgs',
    'VulnerabilityProtectionProfileThreatExceptionArgsDict',
    'VulnerabilityProtectionProfileThreatExceptionActionArgs',
    'VulnerabilityProtectionProfileThreatExceptionActionArgsDict',
    'VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgs',
    'VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgsDict',
    'VulnerabilityProtectionProfileThreatExceptionExemptIpArgs',
    'VulnerabilityProtectionProfileThreatExceptionExemptIpArgsDict',
    'VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgs',
    'VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgsDict',
    'VulnerabilityProtectionSignaturesAffectedHostArgs',
    'VulnerabilityProtectionSignaturesAffectedHostArgsDict',
    'VulnerabilityProtectionSignaturesDefaultActionArgs',
    'VulnerabilityProtectionSignaturesDefaultActionArgsDict',
    'VulnerabilityProtectionSignaturesDefaultActionBlockIpArgs',
    'VulnerabilityProtectionSignaturesDefaultActionBlockIpArgsDict',
    'VulnerabilityProtectionSignaturesSignatureArgs',
    'VulnerabilityProtectionSignaturesSignatureArgsDict',
    'VulnerabilityProtectionSignaturesSignatureCombinationArgs',
    'VulnerabilityProtectionSignaturesSignatureCombinationArgsDict',
    'VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgs',
    'VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgsDict',
    'VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgs',
    'VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgsDict',
    'VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgs',
    'VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgsDict',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs',
    'VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgsDict',
    'WildfireAntiVirusProfileMlavExceptionArgs',
    'WildfireAntiVirusProfileMlavExceptionArgsDict',
    'WildfireAntiVirusProfileRuleArgs',
    'WildfireAntiVirusProfileRuleArgsDict',
    'WildfireAntiVirusProfileThreatExceptionArgs',
    'WildfireAntiVirusProfileThreatExceptionArgsDict',
]

MYPY = False

if not MYPY:
    class AddressGroupDynamicValueArgsDict(TypedDict):
        filter: pulumi.Input[_builtins.str]
        """
        Tag based filter defining group membership e.g. `tag1 AND tag2 OR tag3`. String length must not exceed 2047 characters.
        """
elif False:
    AddressGroupDynamicValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddressGroupDynamicValueArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] filter: Tag based filter defining group membership e.g. `tag1 AND tag2 OR tag3`. String length must not exceed 2047 characters.
        """
        pulumi.set(__self__, "filter", filter)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> pulumi.Input[_builtins.str]:
        """
        Tag based filter defining group membership e.g. `tag1 AND tag2 OR tag3`. String length must not exceed 2047 characters.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "filter", value)


if not MYPY:
    class AntiSpywareProfileMicaEngineSpywareEnabledListArgsDict(TypedDict):
        inline_policy_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        The InlinePolicyAction param. String must be one of these: `"alert"`, `"allow"`, `"drop"`, `"reset-both"`, `"reset-client"`, `"reset-server"`. Default: `"alert"`.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
elif False:
    AntiSpywareProfileMicaEngineSpywareEnabledListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareProfileMicaEngineSpywareEnabledListArgs:
    def __init__(__self__, *,
                 inline_policy_action: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] inline_policy_action: The InlinePolicyAction param. String must be one of these: `"alert"`, `"allow"`, `"drop"`, `"reset-both"`, `"reset-client"`, `"reset-server"`. Default: `"alert"`.
        :param pulumi.Input[_builtins.str] name: The Name param.
        """
        if inline_policy_action is not None:
            pulumi.set(__self__, "inline_policy_action", inline_policy_action)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="inlinePolicyAction")
    def inline_policy_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The InlinePolicyAction param. String must be one of these: `"alert"`, `"allow"`, `"drop"`, `"reset-both"`, `"reset-client"`, `"reset-server"`. Default: `"alert"`.
        """
        return pulumi.get(self, "inline_policy_action")

    @inline_policy_action.setter
    def inline_policy_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "inline_policy_action", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AntiSpywareProfileRuleArgsDict(TypedDict):
        action: NotRequired[pulumi.Input['AntiSpywareProfileRuleActionArgsDict']]
        """
        The Action param.
        """
        category: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Category param. String must be one of these: `"dns-proxy"`, `"backdoor"`, `"data-theft"`, `"autogen"`, `"spyware"`, `"dns-security"`, `"downloader"`, `"dns-phishing"`, `"phishing-kit"`, `"cryptominer"`, `"hacktool"`, `"dns-benign"`, `"dns-wildfire"`, `"botnet"`, `"dns-grayware"`, `"inline-cloud-c2"`, `"keylogger"`, `"p2p-communication"`, `"domain-edl"`, `"webshell"`, `"command-and-control"`, `"dns-ddns"`, `"net-worm"`, `"any"`, `"tls-fingerprint"`, `"dns-new-domain"`, `"dns"`, `"fraud"`, `"dns-c2"`, `"adware"`, `"post-exploitation"`, `"dns-malware"`, `"browser-hijack"`, `"dns-parked"`.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        packet_capture: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        severities: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Severities param.
        """
        threat_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ThreatName param. String length must exceed 4 characters.
        """
elif False:
    AntiSpywareProfileRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareProfileRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['AntiSpywareProfileRuleActionArgs']] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 packet_capture: Optional[pulumi.Input[_builtins.str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 threat_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['AntiSpywareProfileRuleActionArgs'] action: The Action param.
        :param pulumi.Input[_builtins.str] category: The Category param. String must be one of these: `"dns-proxy"`, `"backdoor"`, `"data-theft"`, `"autogen"`, `"spyware"`, `"dns-security"`, `"downloader"`, `"dns-phishing"`, `"phishing-kit"`, `"cryptominer"`, `"hacktool"`, `"dns-benign"`, `"dns-wildfire"`, `"botnet"`, `"dns-grayware"`, `"inline-cloud-c2"`, `"keylogger"`, `"p2p-communication"`, `"domain-edl"`, `"webshell"`, `"command-and-control"`, `"dns-ddns"`, `"net-worm"`, `"any"`, `"tls-fingerprint"`, `"dns-new-domain"`, `"dns"`, `"fraud"`, `"dns-c2"`, `"adware"`, `"post-exploitation"`, `"dns-malware"`, `"browser-hijack"`, `"dns-parked"`.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] packet_capture: The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] severities: The Severities param.
        :param pulumi.Input[_builtins.str] threat_name: The ThreatName param. String length must exceed 4 characters.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)
        if threat_name is not None:
            pulumi.set(__self__, "threat_name", threat_name)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['AntiSpywareProfileRuleActionArgs']]:
        """
        The Action param.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['AntiSpywareProfileRuleActionArgs']]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Category param. String must be one of these: `"dns-proxy"`, `"backdoor"`, `"data-theft"`, `"autogen"`, `"spyware"`, `"dns-security"`, `"downloader"`, `"dns-phishing"`, `"phishing-kit"`, `"cryptominer"`, `"hacktool"`, `"dns-benign"`, `"dns-wildfire"`, `"botnet"`, `"dns-grayware"`, `"inline-cloud-c2"`, `"keylogger"`, `"p2p-communication"`, `"domain-edl"`, `"webshell"`, `"command-and-control"`, `"dns-ddns"`, `"net-worm"`, `"any"`, `"tls-fingerprint"`, `"dns-new-domain"`, `"dns"`, `"fraud"`, `"dns-c2"`, `"adware"`, `"post-exploitation"`, `"dns-malware"`, `"browser-hijack"`, `"dns-parked"`.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        return pulumi.get(self, "packet_capture")

    @packet_capture.setter
    def packet_capture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_capture", value)

    @_builtins.property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Severities param.
        """
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "severities", value)

    @_builtins.property
    @pulumi.getter(name="threatName")
    def threat_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ThreatName param. String length must exceed 4 characters.
        """
        return pulumi.get(self, "threat_name")

    @threat_name.setter
    def threat_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "threat_name", value)


if not MYPY:
    class AntiSpywareProfileRuleActionArgsDict(TypedDict):
        alert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        allow: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        block_ip: NotRequired[pulumi.Input['AntiSpywareProfileRuleActionBlockIpArgsDict']]
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        drop: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_both: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_client: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_server: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
elif False:
    AntiSpywareProfileRuleActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareProfileRuleActionArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_ip: Optional[pulumi.Input['AntiSpywareProfileRuleActionBlockIpArgs']] = None,
                 drop: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_both: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_client: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_server: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] alert: The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] allow: The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input['AntiSpywareProfileRuleActionBlockIpArgs'] block_ip: The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] drop: The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_both: The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_client: The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_server: The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if block_ip is not None:
            pulumi.set(__self__, "block_ip", block_ip)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if reset_both is not None:
            pulumi.set(__self__, "reset_both", reset_both)
        if reset_client is not None:
            pulumi.set(__self__, "reset_client", reset_client)
        if reset_server is not None:
            pulumi.set(__self__, "reset_server", reset_server)

    @_builtins.property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alert", value)

    @_builtins.property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow", value)

    @_builtins.property
    @pulumi.getter(name="blockIp")
    def block_ip(self) -> Optional[pulumi.Input['AntiSpywareProfileRuleActionBlockIpArgs']]:
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "block_ip")

    @block_ip.setter
    def block_ip(self, value: Optional[pulumi.Input['AntiSpywareProfileRuleActionBlockIpArgs']]):
        pulumi.set(self, "block_ip", value)

    @_builtins.property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop", value)

    @_builtins.property
    @pulumi.getter(name="resetBoth")
    def reset_both(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_both")

    @reset_both.setter
    def reset_both(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_both", value)

    @_builtins.property
    @pulumi.getter(name="resetClient")
    def reset_client(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_client")

    @reset_client.setter
    def reset_client(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_client", value)

    @_builtins.property
    @pulumi.getter(name="resetServer")
    def reset_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_server")

    @reset_server.setter
    def reset_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_server", value)


if not MYPY:
    class AntiSpywareProfileRuleActionBlockIpArgsDict(TypedDict):
        duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Duration param. Value must be between 1 and 3600.
        """
        track_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
elif False:
    AntiSpywareProfileRuleActionBlockIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareProfileRuleActionBlockIpArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 track_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] duration: The Duration param. Value must be between 1 and 3600.
        :param pulumi.Input[_builtins.str] track_by: The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if track_by is not None:
            pulumi.set(__self__, "track_by", track_by)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Duration param. Value must be between 1 and 3600.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="trackBy")
    def track_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        return pulumi.get(self, "track_by")

    @track_by.setter
    def track_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_by", value)


if not MYPY:
    class AntiSpywareProfileThreatExceptionArgsDict(TypedDict):
        action: NotRequired[pulumi.Input['AntiSpywareProfileThreatExceptionActionArgsDict']]
        """
        The Action param.
        """
        exempt_ips: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareProfileThreatExceptionExemptIpArgsDict']]]]
        """
        The ExemptIps param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        notes: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Notes param.
        """
        packet_capture: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
elif False:
    AntiSpywareProfileThreatExceptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareProfileThreatExceptionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['AntiSpywareProfileThreatExceptionActionArgs']] = None,
                 exempt_ips: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareProfileThreatExceptionExemptIpArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 packet_capture: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['AntiSpywareProfileThreatExceptionActionArgs'] action: The Action param.
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareProfileThreatExceptionExemptIpArgs']]] exempt_ips: The ExemptIps param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] notes: The Notes param.
        :param pulumi.Input[_builtins.str] packet_capture: The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['AntiSpywareProfileThreatExceptionActionArgs']]:
        """
        The Action param.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['AntiSpywareProfileThreatExceptionActionArgs']]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareProfileThreatExceptionExemptIpArgs']]]]:
        """
        The ExemptIps param.
        """
        return pulumi.get(self, "exempt_ips")

    @exempt_ips.setter
    def exempt_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareProfileThreatExceptionExemptIpArgs']]]]):
        pulumi.set(self, "exempt_ips", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Notes param.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        return pulumi.get(self, "packet_capture")

    @packet_capture.setter
    def packet_capture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_capture", value)


if not MYPY:
    class AntiSpywareProfileThreatExceptionActionArgsDict(TypedDict):
        alert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        allow: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        block_ip: NotRequired[pulumi.Input['AntiSpywareProfileThreatExceptionActionBlockIpArgsDict']]
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Default param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        drop: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_both: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_client: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_server: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
elif False:
    AntiSpywareProfileThreatExceptionActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareProfileThreatExceptionActionArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_ip: Optional[pulumi.Input['AntiSpywareProfileThreatExceptionActionBlockIpArgs']] = None,
                 default: Optional[pulumi.Input[_builtins.bool]] = None,
                 drop: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_both: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_client: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_server: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] alert: The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] allow: The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input['AntiSpywareProfileThreatExceptionActionBlockIpArgs'] block_ip: The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] default: The Default param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] drop: The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_both: The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_client: The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_server: The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if block_ip is not None:
            pulumi.set(__self__, "block_ip", block_ip)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if reset_both is not None:
            pulumi.set(__self__, "reset_both", reset_both)
        if reset_client is not None:
            pulumi.set(__self__, "reset_client", reset_client)
        if reset_server is not None:
            pulumi.set(__self__, "reset_server", reset_server)

    @_builtins.property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alert", value)

    @_builtins.property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow", value)

    @_builtins.property
    @pulumi.getter(name="blockIp")
    def block_ip(self) -> Optional[pulumi.Input['AntiSpywareProfileThreatExceptionActionBlockIpArgs']]:
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "block_ip")

    @block_ip.setter
    def block_ip(self, value: Optional[pulumi.Input['AntiSpywareProfileThreatExceptionActionBlockIpArgs']]):
        pulumi.set(self, "block_ip", value)

    @_builtins.property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Default param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default", value)

    @_builtins.property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop", value)

    @_builtins.property
    @pulumi.getter(name="resetBoth")
    def reset_both(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_both")

    @reset_both.setter
    def reset_both(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_both", value)

    @_builtins.property
    @pulumi.getter(name="resetClient")
    def reset_client(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_client")

    @reset_client.setter
    def reset_client(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_client", value)

    @_builtins.property
    @pulumi.getter(name="resetServer")
    def reset_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_server")

    @reset_server.setter
    def reset_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_server", value)


if not MYPY:
    class AntiSpywareProfileThreatExceptionActionBlockIpArgsDict(TypedDict):
        duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Duration param. Value must be between 1 and 3600.
        """
        track_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
elif False:
    AntiSpywareProfileThreatExceptionActionBlockIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareProfileThreatExceptionActionBlockIpArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 track_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] duration: The Duration param. Value must be between 1 and 3600.
        :param pulumi.Input[_builtins.str] track_by: The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if track_by is not None:
            pulumi.set(__self__, "track_by", track_by)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Duration param. Value must be between 1 and 3600.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="trackBy")
    def track_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        return pulumi.get(self, "track_by")

    @track_by.setter
    def track_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_by", value)


if not MYPY:
    class AntiSpywareProfileThreatExceptionExemptIpArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
elif False:
    AntiSpywareProfileThreatExceptionExemptIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareProfileThreatExceptionExemptIpArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AntiSpywareSignatureDefaultActionArgsDict(TypedDict):
        alert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        allow: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        block_ip: NotRequired[pulumi.Input['AntiSpywareSignatureDefaultActionBlockIpArgsDict']]
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        drop: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_both: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_client: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_server: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
elif False:
    AntiSpywareSignatureDefaultActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureDefaultActionArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_ip: Optional[pulumi.Input['AntiSpywareSignatureDefaultActionBlockIpArgs']] = None,
                 drop: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_both: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_client: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_server: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] alert: The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] allow: The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input['AntiSpywareSignatureDefaultActionBlockIpArgs'] block_ip: The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] drop: The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_both: The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_client: The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_server: The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if block_ip is not None:
            pulumi.set(__self__, "block_ip", block_ip)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if reset_both is not None:
            pulumi.set(__self__, "reset_both", reset_both)
        if reset_client is not None:
            pulumi.set(__self__, "reset_client", reset_client)
        if reset_server is not None:
            pulumi.set(__self__, "reset_server", reset_server)

    @_builtins.property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alert", value)

    @_builtins.property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow", value)

    @_builtins.property
    @pulumi.getter(name="blockIp")
    def block_ip(self) -> Optional[pulumi.Input['AntiSpywareSignatureDefaultActionBlockIpArgs']]:
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "block_ip")

    @block_ip.setter
    def block_ip(self, value: Optional[pulumi.Input['AntiSpywareSignatureDefaultActionBlockIpArgs']]):
        pulumi.set(self, "block_ip", value)

    @_builtins.property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop", value)

    @_builtins.property
    @pulumi.getter(name="resetBoth")
    def reset_both(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_both")

    @reset_both.setter
    def reset_both(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_both", value)

    @_builtins.property
    @pulumi.getter(name="resetClient")
    def reset_client(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_client")

    @reset_client.setter
    def reset_client(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_client", value)

    @_builtins.property
    @pulumi.getter(name="resetServer")
    def reset_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_server")

    @reset_server.setter
    def reset_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_server", value)


if not MYPY:
    class AntiSpywareSignatureDefaultActionBlockIpArgsDict(TypedDict):
        duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Duration param. Value must be between 1 and 3600.
        """
        track_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
elif False:
    AntiSpywareSignatureDefaultActionBlockIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureDefaultActionBlockIpArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 track_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] duration: The Duration param. Value must be between 1 and 3600.
        :param pulumi.Input[_builtins.str] track_by: The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if track_by is not None:
            pulumi.set(__self__, "track_by", track_by)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Duration param. Value must be between 1 and 3600.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="trackBy")
    def track_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        return pulumi.get(self, "track_by")

    @track_by.setter
    def track_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_by", value)


if not MYPY:
    class AntiSpywareSignatureSignatureArgsDict(TypedDict):
        combination: NotRequired[pulumi.Input['AntiSpywareSignatureSignatureCombinationArgsDict']]
        """
        The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
        """
        standards: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardArgsDict']]]]
        """
        The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
        """
elif False:
    AntiSpywareSignatureSignatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureArgs:
    def __init__(__self__, *,
                 combination: Optional[pulumi.Input['AntiSpywareSignatureSignatureCombinationArgs']] = None,
                 standards: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardArgs']]]] = None):
        """
        :param pulumi.Input['AntiSpywareSignatureSignatureCombinationArgs'] combination: The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardArgs']]] standards: The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
        """
        if combination is not None:
            pulumi.set(__self__, "combination", combination)
        if standards is not None:
            pulumi.set(__self__, "standards", standards)

    @_builtins.property
    @pulumi.getter
    def combination(self) -> Optional[pulumi.Input['AntiSpywareSignatureSignatureCombinationArgs']]:
        """
        The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
        """
        return pulumi.get(self, "combination")

    @combination.setter
    def combination(self, value: Optional[pulumi.Input['AntiSpywareSignatureSignatureCombinationArgs']]):
        pulumi.set(self, "combination", value)

    @_builtins.property
    @pulumi.getter
    def standards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardArgs']]]]:
        """
        The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
        """
        return pulumi.get(self, "standards")

    @standards.setter
    def standards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardArgs']]]]):
        pulumi.set(self, "standards", value)


if not MYPY:
    class AntiSpywareSignatureSignatureCombinationArgsDict(TypedDict):
        and_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionArgsDict']]]]
        """
        The AndConditions param.
        """
        order_free: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The OrderFree param. Default: `false`.
        """
        time_attribute: NotRequired[pulumi.Input['AntiSpywareSignatureSignatureCombinationTimeAttributeArgsDict']]
        """
        The TimeAttribute param.
        """
elif False:
    AntiSpywareSignatureSignatureCombinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureCombinationArgs:
    def __init__(__self__, *,
                 and_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionArgs']]]] = None,
                 order_free: Optional[pulumi.Input[_builtins.bool]] = None,
                 time_attribute: Optional[pulumi.Input['AntiSpywareSignatureSignatureCombinationTimeAttributeArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionArgs']]] and_conditions: The AndConditions param.
        :param pulumi.Input[_builtins.bool] order_free: The OrderFree param. Default: `false`.
        :param pulumi.Input['AntiSpywareSignatureSignatureCombinationTimeAttributeArgs'] time_attribute: The TimeAttribute param.
        """
        if and_conditions is not None:
            pulumi.set(__self__, "and_conditions", and_conditions)
        if order_free is not None:
            pulumi.set(__self__, "order_free", order_free)
        if time_attribute is not None:
            pulumi.set(__self__, "time_attribute", time_attribute)

    @_builtins.property
    @pulumi.getter(name="andConditions")
    def and_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionArgs']]]]:
        """
        The AndConditions param.
        """
        return pulumi.get(self, "and_conditions")

    @and_conditions.setter
    def and_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionArgs']]]]):
        pulumi.set(self, "and_conditions", value)

    @_builtins.property
    @pulumi.getter(name="orderFree")
    def order_free(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The OrderFree param. Default: `false`.
        """
        return pulumi.get(self, "order_free")

    @order_free.setter
    def order_free(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "order_free", value)

    @_builtins.property
    @pulumi.getter(name="timeAttribute")
    def time_attribute(self) -> Optional[pulumi.Input['AntiSpywareSignatureSignatureCombinationTimeAttributeArgs']]:
        """
        The TimeAttribute param.
        """
        return pulumi.get(self, "time_attribute")

    @time_attribute.setter
    def time_attribute(self, value: Optional[pulumi.Input['AntiSpywareSignatureSignatureCombinationTimeAttributeArgs']]):
        pulumi.set(self, "time_attribute", value)


if not MYPY:
    class AntiSpywareSignatureSignatureCombinationAndConditionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        or_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgsDict']]]]
        """
        The OrConditions param.
        """
elif False:
    AntiSpywareSignatureSignatureCombinationAndConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureCombinationAndConditionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 or_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgs']]] or_conditions: The OrConditions param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if or_conditions is not None:
            pulumi.set(__self__, "or_conditions", or_conditions)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orConditions")
    def or_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgs']]]]:
        """
        The OrConditions param.
        """
        return pulumi.get(self, "or_conditions")

    @or_conditions.setter
    def or_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgs']]]]):
        pulumi.set(self, "or_conditions", value)


if not MYPY:
    class AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        threat_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ThreatId param.
        """
elif False:
    AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureCombinationAndConditionOrConditionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 threat_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] threat_id: The ThreatId param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if threat_id is not None:
            pulumi.set(__self__, "threat_id", threat_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="threatId")
    def threat_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ThreatId param.
        """
        return pulumi.get(self, "threat_id")

    @threat_id.setter
    def threat_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "threat_id", value)


if not MYPY:
    class AntiSpywareSignatureSignatureCombinationTimeAttributeArgsDict(TypedDict):
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Interval param. Value must be between 1 and 3600.
        """
        threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Threshold param. Value must be between 1 and 255.
        """
        track_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`, `"destination"`.
        """
elif False:
    AntiSpywareSignatureSignatureCombinationTimeAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureCombinationTimeAttributeArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 track_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] interval: The Interval param. Value must be between 1 and 3600.
        :param pulumi.Input[_builtins.int] threshold: The Threshold param. Value must be between 1 and 255.
        :param pulumi.Input[_builtins.str] track_by: The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`, `"destination"`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if track_by is not None:
            pulumi.set(__self__, "track_by", track_by)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Interval param. Value must be between 1 and 3600.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Threshold param. Value must be between 1 and 255.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter(name="trackBy")
    def track_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`, `"destination"`.
        """
        return pulumi.get(self, "track_by")

    @track_by.setter
    def track_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_by", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        and_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionArgsDict']]]]
        """
        The AndConditions param.
        """
        comment: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Comment param. String length must not exceed 256 characters.
        """
        order_free: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The OrderFree param. Default: `false`.
        """
        scope: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Scope param. String must be one of these: `"protocol-data-unit"`, `"session"`.
        """
elif False:
    AntiSpywareSignatureSignatureStandardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 and_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionArgs']]]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 order_free: Optional[pulumi.Input[_builtins.bool]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionArgs']]] and_conditions: The AndConditions param.
        :param pulumi.Input[_builtins.str] comment: The Comment param. String length must not exceed 256 characters.
        :param pulumi.Input[_builtins.bool] order_free: The OrderFree param. Default: `false`.
        :param pulumi.Input[_builtins.str] scope: The Scope param. String must be one of these: `"protocol-data-unit"`, `"session"`.
        """
        pulumi.set(__self__, "name", name)
        if and_conditions is not None:
            pulumi.set(__self__, "and_conditions", and_conditions)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if order_free is not None:
            pulumi.set(__self__, "order_free", order_free)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="andConditions")
    def and_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionArgs']]]]:
        """
        The AndConditions param.
        """
        return pulumi.get(self, "and_conditions")

    @and_conditions.setter
    def and_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionArgs']]]]):
        pulumi.set(self, "and_conditions", value)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Comment param. String length must not exceed 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comment", value)

    @_builtins.property
    @pulumi.getter(name="orderFree")
    def order_free(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The OrderFree param. Default: `false`.
        """
        return pulumi.get(self, "order_free")

    @order_free.setter
    def order_free(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "order_free", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Scope param. String must be one of these: `"protocol-data-unit"`, `"session"`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        or_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgsDict']]]]
        """
        The OrConditions param.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 or_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgs']]] or_conditions: The OrConditions param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if or_conditions is not None:
            pulumi.set(__self__, "or_conditions", or_conditions)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orConditions")
    def or_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgs']]]]:
        """
        The OrConditions param.
        """
        return pulumi.get(self, "or_conditions")

    @or_conditions.setter
    def or_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgs']]]]):
        pulumi.set(self, "or_conditions", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        operator: NotRequired[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgsDict']]
        """
        The Operator param.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operator: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgs'] operator: The Operator param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgs']]:
        """
        The Operator param.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgs']]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgsDict(TypedDict):
        equal_to: NotRequired[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgsDict']]
        """
        The EqualTo param.
        """
        greater_than: NotRequired[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgsDict']]
        """
        The GreaterThan param.
        """
        less_than: NotRequired[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgsDict']]
        """
        The LessThan param.
        """
        pattern_match: NotRequired[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgsDict']]
        """
        The PatternMatch param.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorArgs:
    def __init__(__self__, *,
                 equal_to: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgs']] = None,
                 greater_than: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs']] = None,
                 less_than: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgs']] = None,
                 pattern_match: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs']] = None):
        """
        :param pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgs'] equal_to: The EqualTo param.
        :param pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs'] greater_than: The GreaterThan param.
        :param pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgs'] less_than: The LessThan param.
        :param pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs'] pattern_match: The PatternMatch param.
        """
        if equal_to is not None:
            pulumi.set(__self__, "equal_to", equal_to)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if pattern_match is not None:
            pulumi.set(__self__, "pattern_match", pattern_match)

    @_builtins.property
    @pulumi.getter(name="equalTo")
    def equal_to(self) -> Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgs']]:
        """
        The EqualTo param.
        """
        return pulumi.get(self, "equal_to")

    @equal_to.setter
    def equal_to(self, value: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgs']]):
        pulumi.set(self, "equal_to", value)

    @_builtins.property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs']]:
        """
        The GreaterThan param.
        """
        return pulumi.get(self, "greater_than")

    @greater_than.setter
    def greater_than(self, value: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs']]):
        pulumi.set(self, "greater_than", value)

    @_builtins.property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgs']]:
        """
        The LessThan param.
        """
        return pulumi.get(self, "less_than")

    @less_than.setter
    def less_than(self, value: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgs']]):
        pulumi.set(self, "less_than", value)

    @_builtins.property
    @pulumi.getter(name="patternMatch")
    def pattern_match(self) -> Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs']]:
        """
        The PatternMatch param.
        """
        return pulumi.get(self, "pattern_match")

    @pattern_match.setter
    def pattern_match(self, value: Optional[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs']]):
        pulumi.set(self, "pattern_match", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgsDict(TypedDict):
        context: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Context param.
        """
        negate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Negate param. Default: `false`.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
        value: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Value param. Value must be between 0 and 4294967295.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[_builtins.str]] = None,
                 negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs']]]] = None,
                 value: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param.
        :param pulumi.Input[_builtins.bool] negate: The Negate param. Default: `false`.
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs']]] qualifiers: The Qualifiers param.
        :param pulumi.Input[_builtins.int] value: The Value param. Value must be between 0 and 4294967295.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Context param.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Negate param. Default: `false`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "negate", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Value param.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgsDict(TypedDict):
        context: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Context param.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
        value: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Value param. Value must be between 0 and 4294967295.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[_builtins.str]] = None,
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs']]]] = None,
                 value: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param.
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs']]] qualifiers: The Qualifiers param.
        :param pulumi.Input[_builtins.int] value: The Value param. Value must be between 0 and 4294967295.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Context param.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Value param.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgsDict(TypedDict):
        context: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Context param.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
        value: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Value param. Value must be between 0 and 4294967295.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[_builtins.str]] = None,
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs']]]] = None,
                 value: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param.
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs']]] qualifiers: The Qualifiers param.
        :param pulumi.Input[_builtins.int] value: The Value param. Value must be between 0 and 4294967295.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Context param.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Value param.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgsDict(TypedDict):
        context: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Context param.
        """
        negate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Negate param. Default: `false`.
        """
        pattern: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Pattern param.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[_builtins.str]] = None,
                 negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param.
        :param pulumi.Input[_builtins.bool] negate: The Negate param. Default: `false`.
        :param pulumi.Input[_builtins.str] pattern: The Pattern param.
        :param pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs']]] qualifiers: The Qualifiers param.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)

    @_builtins.property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Context param.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Negate param. Default: `false`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "negate", value)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Pattern param.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pattern", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)


if not MYPY:
    class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Value param.
        """
elif False:
    AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApplicationDefaultArgsDict(TypedDict):
        ident_by_icmp6_type: NotRequired[pulumi.Input['ApplicationDefaultIdentByIcmp6TypeArgsDict']]
        """
        The IdentByIcmp6Type param. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        """
        ident_by_icmp_type: NotRequired[pulumi.Input['ApplicationDefaultIdentByIcmpTypeArgsDict']]
        """
        The IdentByIcmpType param. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        """
        ident_by_ip_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IdentByIpProtocol param. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Ports param. Individual elements in this list are subject to additional validation. String length must not exceed 63 characters. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        """
elif False:
    ApplicationDefaultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationDefaultArgs:
    def __init__(__self__, *,
                 ident_by_icmp6_type: Optional[pulumi.Input['ApplicationDefaultIdentByIcmp6TypeArgs']] = None,
                 ident_by_icmp_type: Optional[pulumi.Input['ApplicationDefaultIdentByIcmpTypeArgs']] = None,
                 ident_by_ip_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input['ApplicationDefaultIdentByIcmp6TypeArgs'] ident_by_icmp6_type: The IdentByIcmp6Type param. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        :param pulumi.Input['ApplicationDefaultIdentByIcmpTypeArgs'] ident_by_icmp_type: The IdentByIcmpType param. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        :param pulumi.Input[_builtins.str] ident_by_ip_protocol: The IdentByIpProtocol param. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ports: The Ports param. Individual elements in this list are subject to additional validation. String length must not exceed 63 characters. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        """
        if ident_by_icmp6_type is not None:
            pulumi.set(__self__, "ident_by_icmp6_type", ident_by_icmp6_type)
        if ident_by_icmp_type is not None:
            pulumi.set(__self__, "ident_by_icmp_type", ident_by_icmp_type)
        if ident_by_ip_protocol is not None:
            pulumi.set(__self__, "ident_by_ip_protocol", ident_by_ip_protocol)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @_builtins.property
    @pulumi.getter(name="identByIcmp6Type")
    def ident_by_icmp6_type(self) -> Optional[pulumi.Input['ApplicationDefaultIdentByIcmp6TypeArgs']]:
        """
        The IdentByIcmp6Type param. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        """
        return pulumi.get(self, "ident_by_icmp6_type")

    @ident_by_icmp6_type.setter
    def ident_by_icmp6_type(self, value: Optional[pulumi.Input['ApplicationDefaultIdentByIcmp6TypeArgs']]):
        pulumi.set(self, "ident_by_icmp6_type", value)

    @_builtins.property
    @pulumi.getter(name="identByIcmpType")
    def ident_by_icmp_type(self) -> Optional[pulumi.Input['ApplicationDefaultIdentByIcmpTypeArgs']]:
        """
        The IdentByIcmpType param. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        """
        return pulumi.get(self, "ident_by_icmp_type")

    @ident_by_icmp_type.setter
    def ident_by_icmp_type(self, value: Optional[pulumi.Input['ApplicationDefaultIdentByIcmpTypeArgs']]):
        pulumi.set(self, "ident_by_icmp_type", value)

    @_builtins.property
    @pulumi.getter(name="identByIpProtocol")
    def ident_by_ip_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IdentByIpProtocol param. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        """
        return pulumi.get(self, "ident_by_ip_protocol")

    @ident_by_ip_protocol.setter
    def ident_by_ip_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ident_by_ip_protocol", value)

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Ports param. Individual elements in this list are subject to additional validation. String length must not exceed 63 characters. Ensure that only one of the following is specified: `ident_by_icmp6_type`, `ident_by_icmp_type`, `ident_by_ip_protocol`, `port`
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ports", value)


if not MYPY:
    class ApplicationDefaultIdentByIcmp6TypeArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        The Type param.
        """
        code: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Code param.
        """
elif False:
    ApplicationDefaultIdentByIcmp6TypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationDefaultIdentByIcmp6TypeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 code: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: The Type param.
        :param pulumi.Input[_builtins.str] code: The Code param.
        """
        pulumi.set(__self__, "type", type)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The Type param.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Code param.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)


if not MYPY:
    class ApplicationDefaultIdentByIcmpTypeArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        The Type param.
        """
        code: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Code param.
        """
elif False:
    ApplicationDefaultIdentByIcmpTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationDefaultIdentByIcmpTypeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 code: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: The Type param.
        :param pulumi.Input[_builtins.str] code: The Code param.
        """
        pulumi.set(__self__, "type", type)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The Type param.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Code param.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code", value)


if not MYPY:
    class ApplicationFilterTaggingArgsDict(TypedDict):
        no_tag: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The NoTag param. Ensure that only one of the following is specified: `no_tag`, `tag`
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters. Ensure that only one of the following is specified: `no_tag`, `tag`
        """
elif False:
    ApplicationFilterTaggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationFilterTaggingArgs:
    def __init__(__self__, *,
                 no_tag: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.bool] no_tag: The NoTag param. Ensure that only one of the following is specified: `no_tag`, `tag`
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters. Ensure that only one of the following is specified: `no_tag`, `tag`
        """
        if no_tag is not None:
            pulumi.set(__self__, "no_tag", no_tag)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="noTag")
    def no_tag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The NoTag param. Ensure that only one of the following is specified: `no_tag`, `tag`
        """
        return pulumi.get(self, "no_tag")

    @no_tag.setter
    def no_tag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_tag", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters. Ensure that only one of the following is specified: `no_tag`, `tag`
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class ApplicationSignatureArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        and_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionArgsDict']]]]
        """
        The AndConditions param.
        """
        comment: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Comment param. String length must not exceed 256 characters.
        """
        order_free: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The OrderFree param. Default: `false`.
        """
        scope: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Scope param. String must be one of these: `"protocol-data-unit"`, `"session"`. Default: `"protocol-data-unit"`.
        """
elif False:
    ApplicationSignatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 and_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionArgs']]]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 order_free: Optional[pulumi.Input[_builtins.bool]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionArgs']]] and_conditions: The AndConditions param.
        :param pulumi.Input[_builtins.str] comment: The Comment param. String length must not exceed 256 characters.
        :param pulumi.Input[_builtins.bool] order_free: The OrderFree param. Default: `false`.
        :param pulumi.Input[_builtins.str] scope: The Scope param. String must be one of these: `"protocol-data-unit"`, `"session"`. Default: `"protocol-data-unit"`.
        """
        pulumi.set(__self__, "name", name)
        if and_conditions is not None:
            pulumi.set(__self__, "and_conditions", and_conditions)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if order_free is not None:
            pulumi.set(__self__, "order_free", order_free)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="andConditions")
    def and_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionArgs']]]]:
        """
        The AndConditions param.
        """
        return pulumi.get(self, "and_conditions")

    @and_conditions.setter
    def and_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionArgs']]]]):
        pulumi.set(self, "and_conditions", value)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Comment param. String length must not exceed 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comment", value)

    @_builtins.property
    @pulumi.getter(name="orderFree")
    def order_free(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The OrderFree param. Default: `false`.
        """
        return pulumi.get(self, "order_free")

    @order_free.setter
    def order_free(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "order_free", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Scope param. String must be one of these: `"protocol-data-unit"`, `"session"`. Default: `"protocol-data-unit"`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)


if not MYPY:
    class ApplicationSignatureAndConditionArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        or_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionArgsDict']]]]
        """
        The OrConditions param.
        """
elif False:
    ApplicationSignatureAndConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 or_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionArgs']]] or_conditions: The OrConditions param.
        """
        pulumi.set(__self__, "name", name)
        if or_conditions is not None:
            pulumi.set(__self__, "or_conditions", or_conditions)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orConditions")
    def or_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionArgs']]]]:
        """
        The OrConditions param.
        """
        return pulumi.get(self, "or_conditions")

    @or_conditions.setter
    def or_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionArgs']]]]):
        pulumi.set(self, "or_conditions", value)


if not MYPY:
    class ApplicationSignatureAndConditionOrConditionArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        operator: pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorArgsDict']
        """
        The Operator param.
        """
elif False:
    ApplicationSignatureAndConditionOrConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionOrConditionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 operator: pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorArgs']):
        """
        :param pulumi.Input[_builtins.str] name: Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        :param pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorArgs'] operator: The Operator param.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operator", operator)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorArgs']:
        """
        The Operator param.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorArgs']):
        pulumi.set(self, "operator", value)


if not MYPY:
    class ApplicationSignatureAndConditionOrConditionOperatorArgsDict(TypedDict):
        equal_to: NotRequired[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorEqualToArgsDict']]
        """
        The EqualTo param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        """
        greater_than: NotRequired[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgsDict']]
        """
        The GreaterThan param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        """
        less_than: NotRequired[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanArgsDict']]
        """
        The LessThan param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        """
        pattern_match: NotRequired[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgsDict']]
        """
        The PatternMatch param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        """
elif False:
    ApplicationSignatureAndConditionOrConditionOperatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionOrConditionOperatorArgs:
    def __init__(__self__, *,
                 equal_to: Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs']] = None,
                 greater_than: Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgs']] = None,
                 less_than: Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanArgs']] = None,
                 pattern_match: Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs']] = None):
        """
        :param pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs'] equal_to: The EqualTo param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        :param pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgs'] greater_than: The GreaterThan param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        :param pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanArgs'] less_than: The LessThan param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        :param pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs'] pattern_match: The PatternMatch param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        """
        if equal_to is not None:
            pulumi.set(__self__, "equal_to", equal_to)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if pattern_match is not None:
            pulumi.set(__self__, "pattern_match", pattern_match)

    @_builtins.property
    @pulumi.getter(name="equalTo")
    def equal_to(self) -> Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs']]:
        """
        The EqualTo param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        """
        return pulumi.get(self, "equal_to")

    @equal_to.setter
    def equal_to(self, value: Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs']]):
        pulumi.set(self, "equal_to", value)

    @_builtins.property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgs']]:
        """
        The GreaterThan param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        """
        return pulumi.get(self, "greater_than")

    @greater_than.setter
    def greater_than(self, value: Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgs']]):
        pulumi.set(self, "greater_than", value)

    @_builtins.property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanArgs']]:
        """
        The LessThan param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        """
        return pulumi.get(self, "less_than")

    @less_than.setter
    def less_than(self, value: Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanArgs']]):
        pulumi.set(self, "less_than", value)

    @_builtins.property
    @pulumi.getter(name="patternMatch")
    def pattern_match(self) -> Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs']]:
        """
        The PatternMatch param. Ensure that only one of the following is specified: `equal_to`, `greater_than`, `less_than`, `pattern_match`
        """
        return pulumi.get(self, "pattern_match")

    @pattern_match.setter
    def pattern_match(self, value: Optional[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs']]):
        pulumi.set(self, "pattern_match", value)


if not MYPY:
    class ApplicationSignatureAndConditionOrConditionOperatorEqualToArgsDict(TypedDict):
        context: pulumi.Input[_builtins.str]
        """
        The Context param.
        """
        value: pulumi.Input[_builtins.str]
        """
        The Value param. String length must not exceed 10 characters.
        """
        mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.
        """
        position: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Position param. String length must not exceed 127 characters.
        """
elif False:
    ApplicationSignatureAndConditionOrConditionOperatorEqualToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 mask: Optional[pulumi.Input[_builtins.str]] = None,
                 position: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param.
        :param pulumi.Input[_builtins.str] value: The Value param. String length must not exceed 10 characters.
        :param pulumi.Input[_builtins.str] mask: 4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.
        :param pulumi.Input[_builtins.str] position: The Position param. String length must not exceed 127 characters.
        """
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "value", value)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @_builtins.property
    @pulumi.getter
    def context(self) -> pulumi.Input[_builtins.str]:
        """
        The Context param.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The Value param. String length must not exceed 10 characters.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.
        """
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask", value)

    @_builtins.property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Position param. String length must not exceed 127 characters.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "position", value)


if not MYPY:
    class ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgsDict(TypedDict):
        context: pulumi.Input[_builtins.str]
        """
        The Context param. String length must not exceed 127 characters.
        """
        value: pulumi.Input[_builtins.int]
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
elif False:
    ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionOrConditionOperatorGreaterThanArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.int],
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param. String length must not exceed 127 characters.
        :param pulumi.Input[_builtins.int] value: The Value param. Value must be between 0 and 4294967295.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgs']]] qualifiers: The Qualifiers param.
        """
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "value", value)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)

    @_builtins.property
    @pulumi.getter
    def context(self) -> pulumi.Input[_builtins.str]:
        """
        The Context param. String length must not exceed 127 characters.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.int]:
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)


if not MYPY:
    class ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        value: pulumi.Input[_builtins.str]
        """
        The Value param.
        """
elif False:
    ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionOrConditionOperatorGreaterThanQualifierArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApplicationSignatureAndConditionOrConditionOperatorLessThanArgsDict(TypedDict):
        context: pulumi.Input[_builtins.str]
        """
        The Context param. String length must not exceed 127 characters.
        """
        value: pulumi.Input[_builtins.int]
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
elif False:
    ApplicationSignatureAndConditionOrConditionOperatorLessThanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionOrConditionOperatorLessThanArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.int],
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param. String length must not exceed 127 characters.
        :param pulumi.Input[_builtins.int] value: The Value param. Value must be between 0 and 4294967295.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgs']]] qualifiers: The Qualifiers param.
        """
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "value", value)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)

    @_builtins.property
    @pulumi.getter
    def context(self) -> pulumi.Input[_builtins.str]:
        """
        The Context param. String length must not exceed 127 characters.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.int]:
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)


if not MYPY:
    class ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        value: pulumi.Input[_builtins.str]
        """
        The Value param.
        """
elif False:
    ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionOrConditionOperatorLessThanQualifierArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgsDict(TypedDict):
        context: pulumi.Input[_builtins.str]
        """
        The Context param. String length must not exceed 127 characters.
        """
        pattern: pulumi.Input[_builtins.str]
        """
        The Pattern param. String length must not exceed 127 characters.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
elif False:
    ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[_builtins.str],
                 pattern: pulumi.Input[_builtins.str],
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param. String length must not exceed 127 characters.
        :param pulumi.Input[_builtins.str] pattern: The Pattern param. String length must not exceed 127 characters.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs']]] qualifiers: The Qualifiers param.
        """
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "pattern", pattern)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)

    @_builtins.property
    @pulumi.getter
    def context(self) -> pulumi.Input[_builtins.str]:
        """
        The Context param. String length must not exceed 127 characters.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[_builtins.str]:
        """
        The Pattern param. String length must not exceed 127 characters.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pattern", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)


if not MYPY:
    class ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        value: pulumi.Input[_builtins.str]
        """
        The Value param.
        """
elif False:
    ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AuthenticationProfileLockoutArgsDict(TypedDict):
        failed_attempts: NotRequired[pulumi.Input[_builtins.int]]
        """
        The FailedAttempts param. Value must be between 0 and 10.
        """
        lockout_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        The LockoutTime param. Value must be between 0 and 60.
        """
elif False:
    AuthenticationProfileLockoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileLockoutArgs:
    def __init__(__self__, *,
                 failed_attempts: Optional[pulumi.Input[_builtins.int]] = None,
                 lockout_time: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] failed_attempts: The FailedAttempts param. Value must be between 0 and 10.
        :param pulumi.Input[_builtins.int] lockout_time: The LockoutTime param. Value must be between 0 and 60.
        """
        if failed_attempts is not None:
            pulumi.set(__self__, "failed_attempts", failed_attempts)
        if lockout_time is not None:
            pulumi.set(__self__, "lockout_time", lockout_time)

    @_builtins.property
    @pulumi.getter(name="failedAttempts")
    def failed_attempts(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The FailedAttempts param. Value must be between 0 and 10.
        """
        return pulumi.get(self, "failed_attempts")

    @failed_attempts.setter
    def failed_attempts(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "failed_attempts", value)

    @_builtins.property
    @pulumi.getter(name="lockoutTime")
    def lockout_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The LockoutTime param. Value must be between 0 and 60.
        """
        return pulumi.get(self, "lockout_time")

    @lockout_time.setter
    def lockout_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lockout_time", value)


if not MYPY:
    class AuthenticationProfileMethodArgsDict(TypedDict):
        cloud: NotRequired[pulumi.Input['AuthenticationProfileMethodCloudArgsDict']]
        """
        The Cloud param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        kerberos: NotRequired[pulumi.Input['AuthenticationProfileMethodKerberosArgsDict']]
        """
        The Kerberos param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        ldap: NotRequired[pulumi.Input['AuthenticationProfileMethodLdapArgsDict']]
        """
        The Ldap param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        local_database: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The LocalDatabase param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        radius: NotRequired[pulumi.Input['AuthenticationProfileMethodRadiusArgsDict']]
        """
        The Radius param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        saml_idp: NotRequired[pulumi.Input['AuthenticationProfileMethodSamlIdpArgsDict']]
        """
        The SamlIdp param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        tacplus: NotRequired[pulumi.Input['AuthenticationProfileMethodTacplusArgsDict']]
        """
        The Tacplus param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
elif False:
    AuthenticationProfileMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileMethodArgs:
    def __init__(__self__, *,
                 cloud: Optional[pulumi.Input['AuthenticationProfileMethodCloudArgs']] = None,
                 kerberos: Optional[pulumi.Input['AuthenticationProfileMethodKerberosArgs']] = None,
                 ldap: Optional[pulumi.Input['AuthenticationProfileMethodLdapArgs']] = None,
                 local_database: Optional[pulumi.Input[_builtins.bool]] = None,
                 radius: Optional[pulumi.Input['AuthenticationProfileMethodRadiusArgs']] = None,
                 saml_idp: Optional[pulumi.Input['AuthenticationProfileMethodSamlIdpArgs']] = None,
                 tacplus: Optional[pulumi.Input['AuthenticationProfileMethodTacplusArgs']] = None):
        """
        :param pulumi.Input['AuthenticationProfileMethodCloudArgs'] cloud: The Cloud param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        :param pulumi.Input['AuthenticationProfileMethodKerberosArgs'] kerberos: The Kerberos param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        :param pulumi.Input['AuthenticationProfileMethodLdapArgs'] ldap: The Ldap param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        :param pulumi.Input[_builtins.bool] local_database: The LocalDatabase param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        :param pulumi.Input['AuthenticationProfileMethodRadiusArgs'] radius: The Radius param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        :param pulumi.Input['AuthenticationProfileMethodSamlIdpArgs'] saml_idp: The SamlIdp param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        :param pulumi.Input['AuthenticationProfileMethodTacplusArgs'] tacplus: The Tacplus param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if kerberos is not None:
            pulumi.set(__self__, "kerberos", kerberos)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if local_database is not None:
            pulumi.set(__self__, "local_database", local_database)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if saml_idp is not None:
            pulumi.set(__self__, "saml_idp", saml_idp)
        if tacplus is not None:
            pulumi.set(__self__, "tacplus", tacplus)

    @_builtins.property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input['AuthenticationProfileMethodCloudArgs']]:
        """
        The Cloud param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input['AuthenticationProfileMethodCloudArgs']]):
        pulumi.set(self, "cloud", value)

    @_builtins.property
    @pulumi.getter
    def kerberos(self) -> Optional[pulumi.Input['AuthenticationProfileMethodKerberosArgs']]:
        """
        The Kerberos param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        return pulumi.get(self, "kerberos")

    @kerberos.setter
    def kerberos(self, value: Optional[pulumi.Input['AuthenticationProfileMethodKerberosArgs']]):
        pulumi.set(self, "kerberos", value)

    @_builtins.property
    @pulumi.getter
    def ldap(self) -> Optional[pulumi.Input['AuthenticationProfileMethodLdapArgs']]:
        """
        The Ldap param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        return pulumi.get(self, "ldap")

    @ldap.setter
    def ldap(self, value: Optional[pulumi.Input['AuthenticationProfileMethodLdapArgs']]):
        pulumi.set(self, "ldap", value)

    @_builtins.property
    @pulumi.getter(name="localDatabase")
    def local_database(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The LocalDatabase param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        return pulumi.get(self, "local_database")

    @local_database.setter
    def local_database(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "local_database", value)

    @_builtins.property
    @pulumi.getter
    def radius(self) -> Optional[pulumi.Input['AuthenticationProfileMethodRadiusArgs']]:
        """
        The Radius param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        return pulumi.get(self, "radius")

    @radius.setter
    def radius(self, value: Optional[pulumi.Input['AuthenticationProfileMethodRadiusArgs']]):
        pulumi.set(self, "radius", value)

    @_builtins.property
    @pulumi.getter(name="samlIdp")
    def saml_idp(self) -> Optional[pulumi.Input['AuthenticationProfileMethodSamlIdpArgs']]:
        """
        The SamlIdp param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        return pulumi.get(self, "saml_idp")

    @saml_idp.setter
    def saml_idp(self, value: Optional[pulumi.Input['AuthenticationProfileMethodSamlIdpArgs']]):
        pulumi.set(self, "saml_idp", value)

    @_builtins.property
    @pulumi.getter
    def tacplus(self) -> Optional[pulumi.Input['AuthenticationProfileMethodTacplusArgs']]:
        """
        The Tacplus param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`
        """
        return pulumi.get(self, "tacplus")

    @tacplus.setter
    def tacplus(self, value: Optional[pulumi.Input['AuthenticationProfileMethodTacplusArgs']]):
        pulumi.set(self, "tacplus", value)


if not MYPY:
    class AuthenticationProfileMethodCloudArgsDict(TypedDict):
        profile_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The tenant profile name.
        """
elif False:
    AuthenticationProfileMethodCloudArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileMethodCloudArgs:
    def __init__(__self__, *,
                 profile_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] profile_name: The tenant profile name.
        """
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)

    @_builtins.property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The tenant profile name.
        """
        return pulumi.get(self, "profile_name")

    @profile_name.setter
    def profile_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_name", value)


if not MYPY:
    class AuthenticationProfileMethodKerberosArgsDict(TypedDict):
        realm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Realm param.
        """
        server_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ServerProfile param.
        """
elif False:
    AuthenticationProfileMethodKerberosArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileMethodKerberosArgs:
    def __init__(__self__, *,
                 realm: Optional[pulumi.Input[_builtins.str]] = None,
                 server_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] realm: The Realm param.
        :param pulumi.Input[_builtins.str] server_profile: The ServerProfile param.
        """
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if server_profile is not None:
            pulumi.set(__self__, "server_profile", server_profile)

    @_builtins.property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Realm param.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "realm", value)

    @_builtins.property
    @pulumi.getter(name="serverProfile")
    def server_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ServerProfile param.
        """
        return pulumi.get(self, "server_profile")

    @server_profile.setter
    def server_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_profile", value)


if not MYPY:
    class AuthenticationProfileMethodLdapArgsDict(TypedDict):
        login_attribute: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LoginAttribute param.
        """
        passwd_exp_days: NotRequired[pulumi.Input[_builtins.int]]
        """
        The PasswdExpDays param.
        """
        server_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ServerProfile param.
        """
elif False:
    AuthenticationProfileMethodLdapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileMethodLdapArgs:
    def __init__(__self__, *,
                 login_attribute: Optional[pulumi.Input[_builtins.str]] = None,
                 passwd_exp_days: Optional[pulumi.Input[_builtins.int]] = None,
                 server_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] login_attribute: The LoginAttribute param.
        :param pulumi.Input[_builtins.int] passwd_exp_days: The PasswdExpDays param.
        :param pulumi.Input[_builtins.str] server_profile: The ServerProfile param.
        """
        if login_attribute is not None:
            pulumi.set(__self__, "login_attribute", login_attribute)
        if passwd_exp_days is not None:
            pulumi.set(__self__, "passwd_exp_days", passwd_exp_days)
        if server_profile is not None:
            pulumi.set(__self__, "server_profile", server_profile)

    @_builtins.property
    @pulumi.getter(name="loginAttribute")
    def login_attribute(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LoginAttribute param.
        """
        return pulumi.get(self, "login_attribute")

    @login_attribute.setter
    def login_attribute(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "login_attribute", value)

    @_builtins.property
    @pulumi.getter(name="passwdExpDays")
    def passwd_exp_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The PasswdExpDays param.
        """
        return pulumi.get(self, "passwd_exp_days")

    @passwd_exp_days.setter
    def passwd_exp_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "passwd_exp_days", value)

    @_builtins.property
    @pulumi.getter(name="serverProfile")
    def server_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ServerProfile param.
        """
        return pulumi.get(self, "server_profile")

    @server_profile.setter
    def server_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_profile", value)


if not MYPY:
    class AuthenticationProfileMethodRadiusArgsDict(TypedDict):
        checkgroup: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Checkgroup param.
        """
        server_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ServerProfile param.
        """
elif False:
    AuthenticationProfileMethodRadiusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileMethodRadiusArgs:
    def __init__(__self__, *,
                 checkgroup: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] checkgroup: The Checkgroup param.
        :param pulumi.Input[_builtins.str] server_profile: The ServerProfile param.
        """
        if checkgroup is not None:
            pulumi.set(__self__, "checkgroup", checkgroup)
        if server_profile is not None:
            pulumi.set(__self__, "server_profile", server_profile)

    @_builtins.property
    @pulumi.getter
    def checkgroup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Checkgroup param.
        """
        return pulumi.get(self, "checkgroup")

    @checkgroup.setter
    def checkgroup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "checkgroup", value)

    @_builtins.property
    @pulumi.getter(name="serverProfile")
    def server_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ServerProfile param.
        """
        return pulumi.get(self, "server_profile")

    @server_profile.setter
    def server_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_profile", value)


if not MYPY:
    class AuthenticationProfileMethodSamlIdpArgsDict(TypedDict):
        attribute_name_usergroup: NotRequired[pulumi.Input[_builtins.str]]
        """
        The AttributeNameUsergroup param. String length must be between 1 and 63 characters.
        """
        attribute_name_username: NotRequired[pulumi.Input[_builtins.str]]
        """
        The AttributeNameUsername param. String length must be between 1 and 63 characters.
        """
        certificate_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The CertificateProfile param. String length must not exceed 31 characters.
        """
        enable_single_logout: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The EnableSingleLogout param.
        """
        request_signing_certificate: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RequestSigningCertificate param. String length must not exceed 64 characters.
        """
        server_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ServerProfile param. String length must not exceed 63 characters.
        """
elif False:
    AuthenticationProfileMethodSamlIdpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileMethodSamlIdpArgs:
    def __init__(__self__, *,
                 attribute_name_usergroup: Optional[pulumi.Input[_builtins.str]] = None,
                 attribute_name_username: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_single_logout: Optional[pulumi.Input[_builtins.bool]] = None,
                 request_signing_certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 server_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] attribute_name_usergroup: The AttributeNameUsergroup param. String length must be between 1 and 63 characters.
        :param pulumi.Input[_builtins.str] attribute_name_username: The AttributeNameUsername param. String length must be between 1 and 63 characters.
        :param pulumi.Input[_builtins.str] certificate_profile: The CertificateProfile param. String length must not exceed 31 characters.
        :param pulumi.Input[_builtins.bool] enable_single_logout: The EnableSingleLogout param.
        :param pulumi.Input[_builtins.str] request_signing_certificate: The RequestSigningCertificate param. String length must not exceed 64 characters.
        :param pulumi.Input[_builtins.str] server_profile: The ServerProfile param. String length must not exceed 63 characters.
        """
        if attribute_name_usergroup is not None:
            pulumi.set(__self__, "attribute_name_usergroup", attribute_name_usergroup)
        if attribute_name_username is not None:
            pulumi.set(__self__, "attribute_name_username", attribute_name_username)
        if certificate_profile is not None:
            pulumi.set(__self__, "certificate_profile", certificate_profile)
        if enable_single_logout is not None:
            pulumi.set(__self__, "enable_single_logout", enable_single_logout)
        if request_signing_certificate is not None:
            pulumi.set(__self__, "request_signing_certificate", request_signing_certificate)
        if server_profile is not None:
            pulumi.set(__self__, "server_profile", server_profile)

    @_builtins.property
    @pulumi.getter(name="attributeNameUsergroup")
    def attribute_name_usergroup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AttributeNameUsergroup param. String length must be between 1 and 63 characters.
        """
        return pulumi.get(self, "attribute_name_usergroup")

    @attribute_name_usergroup.setter
    def attribute_name_usergroup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attribute_name_usergroup", value)

    @_builtins.property
    @pulumi.getter(name="attributeNameUsername")
    def attribute_name_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AttributeNameUsername param. String length must be between 1 and 63 characters.
        """
        return pulumi.get(self, "attribute_name_username")

    @attribute_name_username.setter
    def attribute_name_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attribute_name_username", value)

    @_builtins.property
    @pulumi.getter(name="certificateProfile")
    def certificate_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CertificateProfile param. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "certificate_profile")

    @certificate_profile.setter
    def certificate_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_profile", value)

    @_builtins.property
    @pulumi.getter(name="enableSingleLogout")
    def enable_single_logout(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The EnableSingleLogout param.
        """
        return pulumi.get(self, "enable_single_logout")

    @enable_single_logout.setter
    def enable_single_logout(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_single_logout", value)

    @_builtins.property
    @pulumi.getter(name="requestSigningCertificate")
    def request_signing_certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RequestSigningCertificate param. String length must not exceed 64 characters.
        """
        return pulumi.get(self, "request_signing_certificate")

    @request_signing_certificate.setter
    def request_signing_certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_signing_certificate", value)

    @_builtins.property
    @pulumi.getter(name="serverProfile")
    def server_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ServerProfile param. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "server_profile")

    @server_profile.setter
    def server_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_profile", value)


if not MYPY:
    class AuthenticationProfileMethodTacplusArgsDict(TypedDict):
        checkgroup: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Checkgroup param.
        """
        server_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ServerProfile param.
        """
elif False:
    AuthenticationProfileMethodTacplusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileMethodTacplusArgs:
    def __init__(__self__, *,
                 checkgroup: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] checkgroup: The Checkgroup param.
        :param pulumi.Input[_builtins.str] server_profile: The ServerProfile param.
        """
        if checkgroup is not None:
            pulumi.set(__self__, "checkgroup", checkgroup)
        if server_profile is not None:
            pulumi.set(__self__, "server_profile", server_profile)

    @_builtins.property
    @pulumi.getter
    def checkgroup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Checkgroup param.
        """
        return pulumi.get(self, "checkgroup")

    @checkgroup.setter
    def checkgroup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "checkgroup", value)

    @_builtins.property
    @pulumi.getter(name="serverProfile")
    def server_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ServerProfile param.
        """
        return pulumi.get(self, "server_profile")

    @server_profile.setter
    def server_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_profile", value)


if not MYPY:
    class AuthenticationProfileMultiFactorAuthArgsDict(TypedDict):
        factors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Factors param.
        """
        mfa_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The MfaEnable param.
        """
elif False:
    AuthenticationProfileMultiFactorAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileMultiFactorAuthArgs:
    def __init__(__self__, *,
                 factors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 mfa_enable: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] factors: The Factors param.
        :param pulumi.Input[_builtins.bool] mfa_enable: The MfaEnable param.
        """
        if factors is not None:
            pulumi.set(__self__, "factors", factors)
        if mfa_enable is not None:
            pulumi.set(__self__, "mfa_enable", mfa_enable)

    @_builtins.property
    @pulumi.getter
    def factors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Factors param.
        """
        return pulumi.get(self, "factors")

    @factors.setter
    def factors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "factors", value)

    @_builtins.property
    @pulumi.getter(name="mfaEnable")
    def mfa_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The MfaEnable param.
        """
        return pulumi.get(self, "mfa_enable")

    @mfa_enable.setter
    def mfa_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mfa_enable", value)


if not MYPY:
    class AuthenticationProfileSingleSignOnArgsDict(TypedDict):
        kerberos_keytab: NotRequired[pulumi.Input[_builtins.str]]
        """
        The KerberosKeytab param. String length must not exceed 8192 characters.
        """
        realm: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Realm param. String length must not exceed 127 characters.
        """
elif False:
    AuthenticationProfileSingleSignOnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthenticationProfileSingleSignOnArgs:
    def __init__(__self__, *,
                 kerberos_keytab: Optional[pulumi.Input[_builtins.str]] = None,
                 realm: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] kerberos_keytab: The KerberosKeytab param. String length must not exceed 8192 characters.
        :param pulumi.Input[_builtins.str] realm: The Realm param. String length must not exceed 127 characters.
        """
        if kerberos_keytab is not None:
            pulumi.set(__self__, "kerberos_keytab", kerberos_keytab)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)

    @_builtins.property
    @pulumi.getter(name="kerberosKeytab")
    def kerberos_keytab(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The KerberosKeytab param. String length must not exceed 8192 characters.
        """
        return pulumi.get(self, "kerberos_keytab")

    @kerberos_keytab.setter
    def kerberos_keytab(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kerberos_keytab", value)

    @_builtins.property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Realm param. String length must not exceed 127 characters.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "realm", value)


if not MYPY:
    class CertificateProfileCaCertificateArgsDict(TypedDict):
        default_ocsp_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DefaultOcspUrl param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        ocsp_verify_cert: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OcspVerifyCert param.
        """
        template_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TemplateName param.
        """
elif False:
    CertificateProfileCaCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CertificateProfileCaCertificateArgs:
    def __init__(__self__, *,
                 default_ocsp_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ocsp_verify_cert: Optional[pulumi.Input[_builtins.str]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] default_ocsp_url: The DefaultOcspUrl param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] ocsp_verify_cert: The OcspVerifyCert param.
        :param pulumi.Input[_builtins.str] template_name: The TemplateName param.
        """
        if default_ocsp_url is not None:
            pulumi.set(__self__, "default_ocsp_url", default_ocsp_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocsp_verify_cert is not None:
            pulumi.set(__self__, "ocsp_verify_cert", ocsp_verify_cert)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @_builtins.property
    @pulumi.getter(name="defaultOcspUrl")
    def default_ocsp_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DefaultOcspUrl param.
        """
        return pulumi.get(self, "default_ocsp_url")

    @default_ocsp_url.setter
    def default_ocsp_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_ocsp_url", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ocspVerifyCert")
    def ocsp_verify_cert(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OcspVerifyCert param.
        """
        return pulumi.get(self, "ocsp_verify_cert")

    @ocsp_verify_cert.setter
    def ocsp_verify_cert(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ocsp_verify_cert", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TemplateName param.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_name", value)


if not MYPY:
    class CertificateProfileUsernameFieldArgsDict(TypedDict):
        subject: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Subject param. String must be one of these: `"common-name"`.
        """
        subject_alt: NotRequired[pulumi.Input[_builtins.str]]
        """
        The SubjectAlt param. String must be one of these: `"email"`.
        """
elif False:
    CertificateProfileUsernameFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CertificateProfileUsernameFieldArgs:
    def __init__(__self__, *,
                 subject: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_alt: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] subject: The Subject param. String must be one of these: `"common-name"`.
        :param pulumi.Input[_builtins.str] subject_alt: The SubjectAlt param. String must be one of these: `"email"`.
        """
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if subject_alt is not None:
            pulumi.set(__self__, "subject_alt", subject_alt)

    @_builtins.property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Subject param. String must be one of these: `"common-name"`.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject", value)

    @_builtins.property
    @pulumi.getter(name="subjectAlt")
    def subject_alt(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SubjectAlt param. String must be one of these: `"email"`.
        """
        return pulumi.get(self, "subject_alt")

    @subject_alt.setter
    def subject_alt(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subject_alt", value)


if not MYPY:
    class DecryptionProfileSslForwardProxyArgsDict(TypedDict):
        auto_include_altname: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AutoIncludeAltname param. Default: `false`.
        """
        block_client_cert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockClientCert param. Default: `false`.
        """
        block_expired_certificate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockExpiredCertificate param. Default: `false`.
        """
        block_timeout_cert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockTimeoutCert param. Default: `false`.
        """
        block_tls13_downgrade_no_resource: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockTls13DowngradeNoResource param. Default: `false`.
        """
        block_unknown_cert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockUnknownCert param. Default: `false`.
        """
        block_unsupported_cipher: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockUnsupportedCipher param. Default: `false`.
        """
        block_unsupported_version: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockUnsupportedVersion param. Default: `false`.
        """
        block_untrusted_issuer: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockUntrustedIssuer param. Default: `false`.
        """
        restrict_cert_exts: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The RestrictCertExts param. Default: `false`.
        """
        strip_alpn: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The StripAlpn param. Default: `false`.
        """
elif False:
    DecryptionProfileSslForwardProxyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecryptionProfileSslForwardProxyArgs:
    def __init__(__self__, *,
                 auto_include_altname: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_client_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_expired_certificate: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_timeout_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_tls13_downgrade_no_resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_unknown_cert: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_unsupported_cipher: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_unsupported_version: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_untrusted_issuer: Optional[pulumi.Input[_builtins.bool]] = None,
                 restrict_cert_exts: Optional[pulumi.Input[_builtins.bool]] = None,
                 strip_alpn: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] auto_include_altname: The AutoIncludeAltname param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_client_cert: The BlockClientCert param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_expired_certificate: The BlockExpiredCertificate param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_timeout_cert: The BlockTimeoutCert param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_tls13_downgrade_no_resource: The BlockTls13DowngradeNoResource param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_unknown_cert: The BlockUnknownCert param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_unsupported_cipher: The BlockUnsupportedCipher param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_unsupported_version: The BlockUnsupportedVersion param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_untrusted_issuer: The BlockUntrustedIssuer param. Default: `false`.
        :param pulumi.Input[_builtins.bool] restrict_cert_exts: The RestrictCertExts param. Default: `false`.
        :param pulumi.Input[_builtins.bool] strip_alpn: The StripAlpn param. Default: `false`.
        """
        if auto_include_altname is not None:
            pulumi.set(__self__, "auto_include_altname", auto_include_altname)
        if block_client_cert is not None:
            pulumi.set(__self__, "block_client_cert", block_client_cert)
        if block_expired_certificate is not None:
            pulumi.set(__self__, "block_expired_certificate", block_expired_certificate)
        if block_timeout_cert is not None:
            pulumi.set(__self__, "block_timeout_cert", block_timeout_cert)
        if block_tls13_downgrade_no_resource is not None:
            pulumi.set(__self__, "block_tls13_downgrade_no_resource", block_tls13_downgrade_no_resource)
        if block_unknown_cert is not None:
            pulumi.set(__self__, "block_unknown_cert", block_unknown_cert)
        if block_unsupported_cipher is not None:
            pulumi.set(__self__, "block_unsupported_cipher", block_unsupported_cipher)
        if block_unsupported_version is not None:
            pulumi.set(__self__, "block_unsupported_version", block_unsupported_version)
        if block_untrusted_issuer is not None:
            pulumi.set(__self__, "block_untrusted_issuer", block_untrusted_issuer)
        if restrict_cert_exts is not None:
            pulumi.set(__self__, "restrict_cert_exts", restrict_cert_exts)
        if strip_alpn is not None:
            pulumi.set(__self__, "strip_alpn", strip_alpn)

    @_builtins.property
    @pulumi.getter(name="autoIncludeAltname")
    def auto_include_altname(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AutoIncludeAltname param. Default: `false`.
        """
        return pulumi.get(self, "auto_include_altname")

    @auto_include_altname.setter
    def auto_include_altname(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_include_altname", value)

    @_builtins.property
    @pulumi.getter(name="blockClientCert")
    def block_client_cert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockClientCert param. Default: `false`.
        """
        return pulumi.get(self, "block_client_cert")

    @block_client_cert.setter
    def block_client_cert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_client_cert", value)

    @_builtins.property
    @pulumi.getter(name="blockExpiredCertificate")
    def block_expired_certificate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockExpiredCertificate param. Default: `false`.
        """
        return pulumi.get(self, "block_expired_certificate")

    @block_expired_certificate.setter
    def block_expired_certificate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_expired_certificate", value)

    @_builtins.property
    @pulumi.getter(name="blockTimeoutCert")
    def block_timeout_cert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockTimeoutCert param. Default: `false`.
        """
        return pulumi.get(self, "block_timeout_cert")

    @block_timeout_cert.setter
    def block_timeout_cert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_timeout_cert", value)

    @_builtins.property
    @pulumi.getter(name="blockTls13DowngradeNoResource")
    def block_tls13_downgrade_no_resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockTls13DowngradeNoResource param. Default: `false`.
        """
        return pulumi.get(self, "block_tls13_downgrade_no_resource")

    @block_tls13_downgrade_no_resource.setter
    def block_tls13_downgrade_no_resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_tls13_downgrade_no_resource", value)

    @_builtins.property
    @pulumi.getter(name="blockUnknownCert")
    def block_unknown_cert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockUnknownCert param. Default: `false`.
        """
        return pulumi.get(self, "block_unknown_cert")

    @block_unknown_cert.setter
    def block_unknown_cert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_unknown_cert", value)

    @_builtins.property
    @pulumi.getter(name="blockUnsupportedCipher")
    def block_unsupported_cipher(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockUnsupportedCipher param. Default: `false`.
        """
        return pulumi.get(self, "block_unsupported_cipher")

    @block_unsupported_cipher.setter
    def block_unsupported_cipher(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_unsupported_cipher", value)

    @_builtins.property
    @pulumi.getter(name="blockUnsupportedVersion")
    def block_unsupported_version(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockUnsupportedVersion param. Default: `false`.
        """
        return pulumi.get(self, "block_unsupported_version")

    @block_unsupported_version.setter
    def block_unsupported_version(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_unsupported_version", value)

    @_builtins.property
    @pulumi.getter(name="blockUntrustedIssuer")
    def block_untrusted_issuer(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockUntrustedIssuer param. Default: `false`.
        """
        return pulumi.get(self, "block_untrusted_issuer")

    @block_untrusted_issuer.setter
    def block_untrusted_issuer(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_untrusted_issuer", value)

    @_builtins.property
    @pulumi.getter(name="restrictCertExts")
    def restrict_cert_exts(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The RestrictCertExts param. Default: `false`.
        """
        return pulumi.get(self, "restrict_cert_exts")

    @restrict_cert_exts.setter
    def restrict_cert_exts(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "restrict_cert_exts", value)

    @_builtins.property
    @pulumi.getter(name="stripAlpn")
    def strip_alpn(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The StripAlpn param. Default: `false`.
        """
        return pulumi.get(self, "strip_alpn")

    @strip_alpn.setter
    def strip_alpn(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "strip_alpn", value)


if not MYPY:
    class DecryptionProfileSslInboundProxyArgsDict(TypedDict):
        block_if_hsm_unavailable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockIfHsmUnavailable param. Default: `false`.
        """
        block_if_no_resource: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockIfNoResource param. Default: `false`.
        """
        block_unsupported_cipher: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockUnsupportedCipher param. Default: `false`.
        """
        block_unsupported_version: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockUnsupportedVersion param. Default: `false`.
        """
elif False:
    DecryptionProfileSslInboundProxyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecryptionProfileSslInboundProxyArgs:
    def __init__(__self__, *,
                 block_if_hsm_unavailable: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_if_no_resource: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_unsupported_cipher: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_unsupported_version: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] block_if_hsm_unavailable: The BlockIfHsmUnavailable param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_if_no_resource: The BlockIfNoResource param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_unsupported_cipher: The BlockUnsupportedCipher param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_unsupported_version: The BlockUnsupportedVersion param. Default: `false`.
        """
        if block_if_hsm_unavailable is not None:
            pulumi.set(__self__, "block_if_hsm_unavailable", block_if_hsm_unavailable)
        if block_if_no_resource is not None:
            pulumi.set(__self__, "block_if_no_resource", block_if_no_resource)
        if block_unsupported_cipher is not None:
            pulumi.set(__self__, "block_unsupported_cipher", block_unsupported_cipher)
        if block_unsupported_version is not None:
            pulumi.set(__self__, "block_unsupported_version", block_unsupported_version)

    @_builtins.property
    @pulumi.getter(name="blockIfHsmUnavailable")
    def block_if_hsm_unavailable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockIfHsmUnavailable param. Default: `false`.
        """
        return pulumi.get(self, "block_if_hsm_unavailable")

    @block_if_hsm_unavailable.setter
    def block_if_hsm_unavailable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_if_hsm_unavailable", value)

    @_builtins.property
    @pulumi.getter(name="blockIfNoResource")
    def block_if_no_resource(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockIfNoResource param. Default: `false`.
        """
        return pulumi.get(self, "block_if_no_resource")

    @block_if_no_resource.setter
    def block_if_no_resource(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_if_no_resource", value)

    @_builtins.property
    @pulumi.getter(name="blockUnsupportedCipher")
    def block_unsupported_cipher(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockUnsupportedCipher param. Default: `false`.
        """
        return pulumi.get(self, "block_unsupported_cipher")

    @block_unsupported_cipher.setter
    def block_unsupported_cipher(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_unsupported_cipher", value)

    @_builtins.property
    @pulumi.getter(name="blockUnsupportedVersion")
    def block_unsupported_version(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockUnsupportedVersion param. Default: `false`.
        """
        return pulumi.get(self, "block_unsupported_version")

    @block_unsupported_version.setter
    def block_unsupported_version(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_unsupported_version", value)


if not MYPY:
    class DecryptionProfileSslNoProxyArgsDict(TypedDict):
        block_expired_certificate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockExpiredCertificate param. Default: `false`.
        """
        block_untrusted_issuer: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The BlockUntrustedIssuer param. Default: `false`.
        """
elif False:
    DecryptionProfileSslNoProxyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecryptionProfileSslNoProxyArgs:
    def __init__(__self__, *,
                 block_expired_certificate: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_untrusted_issuer: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] block_expired_certificate: The BlockExpiredCertificate param. Default: `false`.
        :param pulumi.Input[_builtins.bool] block_untrusted_issuer: The BlockUntrustedIssuer param. Default: `false`.
        """
        if block_expired_certificate is not None:
            pulumi.set(__self__, "block_expired_certificate", block_expired_certificate)
        if block_untrusted_issuer is not None:
            pulumi.set(__self__, "block_untrusted_issuer", block_untrusted_issuer)

    @_builtins.property
    @pulumi.getter(name="blockExpiredCertificate")
    def block_expired_certificate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockExpiredCertificate param. Default: `false`.
        """
        return pulumi.get(self, "block_expired_certificate")

    @block_expired_certificate.setter
    def block_expired_certificate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_expired_certificate", value)

    @_builtins.property
    @pulumi.getter(name="blockUntrustedIssuer")
    def block_untrusted_issuer(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The BlockUntrustedIssuer param. Default: `false`.
        """
        return pulumi.get(self, "block_untrusted_issuer")

    @block_untrusted_issuer.setter
    def block_untrusted_issuer(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_untrusted_issuer", value)


if not MYPY:
    class DecryptionProfileSslProtocolSettingsArgsDict(TypedDict):
        auth_algo_md5: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AuthAlgoMd5 param. Default: `true`.
        """
        auth_algo_sha1: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AuthAlgoSha1 param. Default: `true`.
        """
        auth_algo_sha256: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AuthAlgoSha256 param. Default: `true`.
        """
        auth_algo_sha384: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AuthAlgoSha384 param. Default: `true`.
        """
        enc_algo3des: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The EncAlgo3des param. Default: `true`.
        """
        enc_algo_aes128_cbc: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The EncAlgoAes128Cbc param. Default: `true`.
        """
        enc_algo_aes128_gcm: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The EncAlgoAes128Gcm param. Default: `true`.
        """
        enc_algo_aes256_cbc: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The EncAlgoAes256Cbc param. Default: `true`.
        """
        enc_algo_aes256_gcm: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The EncAlgoAes256Gcm param. Default: `true`.
        """
        enc_algo_chacha20_poly1305: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The EncAlgoChacha20Poly1305 param. Default: `true`.
        """
        enc_algo_rc4: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The EncAlgoRc4 param. Default: `true`.
        """
        keyxchg_algo_dhe: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The KeyxchgAlgoDhe param. Default: `true`.
        """
        keyxchg_algo_ecdhe: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The KeyxchgAlgoEcdhe param. Default: `true`.
        """
        keyxchg_algo_rsa: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The KeyxchgAlgoRsa param. Default: `true`.
        """
        max_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The MaxVersion param. String must be one of these: `"sslv3"`, `"tls1-0"`, `"tls1-1"`, `"tls1-2"`, `"tls1-3"`, `"max"`. Default: `"tls1-2"`.
        """
        min_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The MinVersion param. String must be one of these: `"sslv3"`, `"tls1-0"`, `"tls1-1"`, `"tls1-2"`, `"tls1-3"`. Default: `"tls1-0"`.
        """
elif False:
    DecryptionProfileSslProtocolSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecryptionProfileSslProtocolSettingsArgs:
    def __init__(__self__, *,
                 auth_algo_md5: Optional[pulumi.Input[_builtins.bool]] = None,
                 auth_algo_sha1: Optional[pulumi.Input[_builtins.bool]] = None,
                 auth_algo_sha256: Optional[pulumi.Input[_builtins.bool]] = None,
                 auth_algo_sha384: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo3des: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_aes128_cbc: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_aes128_gcm: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_aes256_cbc: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_aes256_gcm: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_chacha20_poly1305: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_rc4: Optional[pulumi.Input[_builtins.bool]] = None,
                 keyxchg_algo_dhe: Optional[pulumi.Input[_builtins.bool]] = None,
                 keyxchg_algo_ecdhe: Optional[pulumi.Input[_builtins.bool]] = None,
                 keyxchg_algo_rsa: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_version: Optional[pulumi.Input[_builtins.str]] = None,
                 min_version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] auth_algo_md5: The AuthAlgoMd5 param. Default: `true`.
        :param pulumi.Input[_builtins.bool] auth_algo_sha1: The AuthAlgoSha1 param. Default: `true`.
        :param pulumi.Input[_builtins.bool] auth_algo_sha256: The AuthAlgoSha256 param. Default: `true`.
        :param pulumi.Input[_builtins.bool] auth_algo_sha384: The AuthAlgoSha384 param. Default: `true`.
        :param pulumi.Input[_builtins.bool] enc_algo3des: The EncAlgo3des param. Default: `true`.
        :param pulumi.Input[_builtins.bool] enc_algo_aes128_cbc: The EncAlgoAes128Cbc param. Default: `true`.
        :param pulumi.Input[_builtins.bool] enc_algo_aes128_gcm: The EncAlgoAes128Gcm param. Default: `true`.
        :param pulumi.Input[_builtins.bool] enc_algo_aes256_cbc: The EncAlgoAes256Cbc param. Default: `true`.
        :param pulumi.Input[_builtins.bool] enc_algo_aes256_gcm: The EncAlgoAes256Gcm param. Default: `true`.
        :param pulumi.Input[_builtins.bool] enc_algo_chacha20_poly1305: The EncAlgoChacha20Poly1305 param. Default: `true`.
        :param pulumi.Input[_builtins.bool] enc_algo_rc4: The EncAlgoRc4 param. Default: `true`.
        :param pulumi.Input[_builtins.bool] keyxchg_algo_dhe: The KeyxchgAlgoDhe param. Default: `true`.
        :param pulumi.Input[_builtins.bool] keyxchg_algo_ecdhe: The KeyxchgAlgoEcdhe param. Default: `true`.
        :param pulumi.Input[_builtins.bool] keyxchg_algo_rsa: The KeyxchgAlgoRsa param. Default: `true`.
        :param pulumi.Input[_builtins.str] max_version: The MaxVersion param. String must be one of these: `"sslv3"`, `"tls1-0"`, `"tls1-1"`, `"tls1-2"`, `"tls1-3"`, `"max"`. Default: `"tls1-2"`.
        :param pulumi.Input[_builtins.str] min_version: The MinVersion param. String must be one of these: `"sslv3"`, `"tls1-0"`, `"tls1-1"`, `"tls1-2"`, `"tls1-3"`. Default: `"tls1-0"`.
        """
        if auth_algo_md5 is not None:
            pulumi.set(__self__, "auth_algo_md5", auth_algo_md5)
        if auth_algo_sha1 is not None:
            pulumi.set(__self__, "auth_algo_sha1", auth_algo_sha1)
        if auth_algo_sha256 is not None:
            pulumi.set(__self__, "auth_algo_sha256", auth_algo_sha256)
        if auth_algo_sha384 is not None:
            pulumi.set(__self__, "auth_algo_sha384", auth_algo_sha384)
        if enc_algo3des is not None:
            pulumi.set(__self__, "enc_algo3des", enc_algo3des)
        if enc_algo_aes128_cbc is not None:
            pulumi.set(__self__, "enc_algo_aes128_cbc", enc_algo_aes128_cbc)
        if enc_algo_aes128_gcm is not None:
            pulumi.set(__self__, "enc_algo_aes128_gcm", enc_algo_aes128_gcm)
        if enc_algo_aes256_cbc is not None:
            pulumi.set(__self__, "enc_algo_aes256_cbc", enc_algo_aes256_cbc)
        if enc_algo_aes256_gcm is not None:
            pulumi.set(__self__, "enc_algo_aes256_gcm", enc_algo_aes256_gcm)
        if enc_algo_chacha20_poly1305 is not None:
            pulumi.set(__self__, "enc_algo_chacha20_poly1305", enc_algo_chacha20_poly1305)
        if enc_algo_rc4 is not None:
            pulumi.set(__self__, "enc_algo_rc4", enc_algo_rc4)
        if keyxchg_algo_dhe is not None:
            pulumi.set(__self__, "keyxchg_algo_dhe", keyxchg_algo_dhe)
        if keyxchg_algo_ecdhe is not None:
            pulumi.set(__self__, "keyxchg_algo_ecdhe", keyxchg_algo_ecdhe)
        if keyxchg_algo_rsa is not None:
            pulumi.set(__self__, "keyxchg_algo_rsa", keyxchg_algo_rsa)
        if max_version is not None:
            pulumi.set(__self__, "max_version", max_version)
        if min_version is not None:
            pulumi.set(__self__, "min_version", min_version)

    @_builtins.property
    @pulumi.getter(name="authAlgoMd5")
    def auth_algo_md5(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AuthAlgoMd5 param. Default: `true`.
        """
        return pulumi.get(self, "auth_algo_md5")

    @auth_algo_md5.setter
    def auth_algo_md5(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auth_algo_md5", value)

    @_builtins.property
    @pulumi.getter(name="authAlgoSha1")
    def auth_algo_sha1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AuthAlgoSha1 param. Default: `true`.
        """
        return pulumi.get(self, "auth_algo_sha1")

    @auth_algo_sha1.setter
    def auth_algo_sha1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auth_algo_sha1", value)

    @_builtins.property
    @pulumi.getter(name="authAlgoSha256")
    def auth_algo_sha256(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AuthAlgoSha256 param. Default: `true`.
        """
        return pulumi.get(self, "auth_algo_sha256")

    @auth_algo_sha256.setter
    def auth_algo_sha256(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auth_algo_sha256", value)

    @_builtins.property
    @pulumi.getter(name="authAlgoSha384")
    def auth_algo_sha384(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AuthAlgoSha384 param. Default: `true`.
        """
        return pulumi.get(self, "auth_algo_sha384")

    @auth_algo_sha384.setter
    def auth_algo_sha384(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auth_algo_sha384", value)

    @_builtins.property
    @pulumi.getter(name="encAlgo3des")
    def enc_algo3des(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The EncAlgo3des param. Default: `true`.
        """
        return pulumi.get(self, "enc_algo3des")

    @enc_algo3des.setter
    def enc_algo3des(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo3des", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoAes128Cbc")
    def enc_algo_aes128_cbc(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The EncAlgoAes128Cbc param. Default: `true`.
        """
        return pulumi.get(self, "enc_algo_aes128_cbc")

    @enc_algo_aes128_cbc.setter
    def enc_algo_aes128_cbc(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_aes128_cbc", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoAes128Gcm")
    def enc_algo_aes128_gcm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The EncAlgoAes128Gcm param. Default: `true`.
        """
        return pulumi.get(self, "enc_algo_aes128_gcm")

    @enc_algo_aes128_gcm.setter
    def enc_algo_aes128_gcm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_aes128_gcm", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoAes256Cbc")
    def enc_algo_aes256_cbc(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The EncAlgoAes256Cbc param. Default: `true`.
        """
        return pulumi.get(self, "enc_algo_aes256_cbc")

    @enc_algo_aes256_cbc.setter
    def enc_algo_aes256_cbc(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_aes256_cbc", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoAes256Gcm")
    def enc_algo_aes256_gcm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The EncAlgoAes256Gcm param. Default: `true`.
        """
        return pulumi.get(self, "enc_algo_aes256_gcm")

    @enc_algo_aes256_gcm.setter
    def enc_algo_aes256_gcm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_aes256_gcm", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoChacha20Poly1305")
    def enc_algo_chacha20_poly1305(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The EncAlgoChacha20Poly1305 param. Default: `true`.
        """
        return pulumi.get(self, "enc_algo_chacha20_poly1305")

    @enc_algo_chacha20_poly1305.setter
    def enc_algo_chacha20_poly1305(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_chacha20_poly1305", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoRc4")
    def enc_algo_rc4(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The EncAlgoRc4 param. Default: `true`.
        """
        return pulumi.get(self, "enc_algo_rc4")

    @enc_algo_rc4.setter
    def enc_algo_rc4(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_rc4", value)

    @_builtins.property
    @pulumi.getter(name="keyxchgAlgoDhe")
    def keyxchg_algo_dhe(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The KeyxchgAlgoDhe param. Default: `true`.
        """
        return pulumi.get(self, "keyxchg_algo_dhe")

    @keyxchg_algo_dhe.setter
    def keyxchg_algo_dhe(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keyxchg_algo_dhe", value)

    @_builtins.property
    @pulumi.getter(name="keyxchgAlgoEcdhe")
    def keyxchg_algo_ecdhe(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The KeyxchgAlgoEcdhe param. Default: `true`.
        """
        return pulumi.get(self, "keyxchg_algo_ecdhe")

    @keyxchg_algo_ecdhe.setter
    def keyxchg_algo_ecdhe(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keyxchg_algo_ecdhe", value)

    @_builtins.property
    @pulumi.getter(name="keyxchgAlgoRsa")
    def keyxchg_algo_rsa(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The KeyxchgAlgoRsa param. Default: `true`.
        """
        return pulumi.get(self, "keyxchg_algo_rsa")

    @keyxchg_algo_rsa.setter
    def keyxchg_algo_rsa(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keyxchg_algo_rsa", value)

    @_builtins.property
    @pulumi.getter(name="maxVersion")
    def max_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MaxVersion param. String must be one of these: `"sslv3"`, `"tls1-0"`, `"tls1-1"`, `"tls1-2"`, `"tls1-3"`, `"max"`. Default: `"tls1-2"`.
        """
        return pulumi.get(self, "max_version")

    @max_version.setter
    def max_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_version", value)

    @_builtins.property
    @pulumi.getter(name="minVersion")
    def min_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MinVersion param. String must be one of these: `"sslv3"`, `"tls1-0"`, `"tls1-1"`, `"tls1-2"`, `"tls1-3"`. Default: `"tls1-0"`.
        """
        return pulumi.get(self, "min_version")

    @min_version.setter
    def min_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "min_version", value)


if not MYPY:
    class DecryptionRuleTypeArgsDict(TypedDict):
        ssl_forward_proxy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The SslForwardProxy param. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
        """
        ssl_inbound_inspection: NotRequired[pulumi.Input[_builtins.str]]
        """
        add the certificate name for SSL inbound inspection. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
        """
elif False:
    DecryptionRuleTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecryptionRuleTypeArgs:
    def __init__(__self__, *,
                 ssl_forward_proxy: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssl_inbound_inspection: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] ssl_forward_proxy: The SslForwardProxy param. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
        :param pulumi.Input[_builtins.str] ssl_inbound_inspection: add the certificate name for SSL inbound inspection. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
        """
        if ssl_forward_proxy is not None:
            pulumi.set(__self__, "ssl_forward_proxy", ssl_forward_proxy)
        if ssl_inbound_inspection is not None:
            pulumi.set(__self__, "ssl_inbound_inspection", ssl_inbound_inspection)

    @_builtins.property
    @pulumi.getter(name="sslForwardProxy")
    def ssl_forward_proxy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The SslForwardProxy param. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
        """
        return pulumi.get(self, "ssl_forward_proxy")

    @ssl_forward_proxy.setter
    def ssl_forward_proxy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssl_forward_proxy", value)

    @_builtins.property
    @pulumi.getter(name="sslInboundInspection")
    def ssl_inbound_inspection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        add the certificate name for SSL inbound inspection. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
        """
        return pulumi.get(self, "ssl_inbound_inspection")

    @ssl_inbound_inspection.setter
    def ssl_inbound_inspection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_inbound_inspection", value)


if not MYPY:
    class DnsSecurityProfileBotnetDomainsArgsDict(TypedDict):
        dns_security_categories: NotRequired[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgsDict']]]]
        """
        The DnsSecurityCategories param.
        """
        lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsListArgsDict']]]]
        """
        The Lists param.
        """
        sinkhole: NotRequired[pulumi.Input['DnsSecurityProfileBotnetDomainsSinkholeArgsDict']]
        """
        The Sinkhole param.
        """
        whitelists: NotRequired[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsWhitelistArgsDict']]]]
        """
        The Whitelists param.
        """
elif False:
    DnsSecurityProfileBotnetDomainsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsSecurityProfileBotnetDomainsArgs:
    def __init__(__self__, *,
                 dns_security_categories: Optional[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgs']]]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsListArgs']]]] = None,
                 sinkhole: Optional[pulumi.Input['DnsSecurityProfileBotnetDomainsSinkholeArgs']] = None,
                 whitelists: Optional[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsWhitelistArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgs']]] dns_security_categories: The DnsSecurityCategories param.
        :param pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsListArgs']]] lists: The Lists param.
        :param pulumi.Input['DnsSecurityProfileBotnetDomainsSinkholeArgs'] sinkhole: The Sinkhole param.
        :param pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsWhitelistArgs']]] whitelists: The Whitelists param.
        """
        if dns_security_categories is not None:
            pulumi.set(__self__, "dns_security_categories", dns_security_categories)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if sinkhole is not None:
            pulumi.set(__self__, "sinkhole", sinkhole)
        if whitelists is not None:
            pulumi.set(__self__, "whitelists", whitelists)

    @_builtins.property
    @pulumi.getter(name="dnsSecurityCategories")
    def dns_security_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgs']]]]:
        """
        The DnsSecurityCategories param.
        """
        return pulumi.get(self, "dns_security_categories")

    @dns_security_categories.setter
    def dns_security_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgs']]]]):
        pulumi.set(self, "dns_security_categories", value)

    @_builtins.property
    @pulumi.getter
    def lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsListArgs']]]]:
        """
        The Lists param.
        """
        return pulumi.get(self, "lists")

    @lists.setter
    def lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsListArgs']]]]):
        pulumi.set(self, "lists", value)

    @_builtins.property
    @pulumi.getter
    def sinkhole(self) -> Optional[pulumi.Input['DnsSecurityProfileBotnetDomainsSinkholeArgs']]:
        """
        The Sinkhole param.
        """
        return pulumi.get(self, "sinkhole")

    @sinkhole.setter
    def sinkhole(self, value: Optional[pulumi.Input['DnsSecurityProfileBotnetDomainsSinkholeArgs']]):
        pulumi.set(self, "sinkhole", value)

    @_builtins.property
    @pulumi.getter
    def whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsWhitelistArgs']]]]:
        """
        The Whitelists param.
        """
        return pulumi.get(self, "whitelists")

    @whitelists.setter
    def whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsSecurityProfileBotnetDomainsWhitelistArgs']]]]):
        pulumi.set(self, "whitelists", value)


if not MYPY:
    class DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Action param. String must be one of these: `"default"`, `"allow"`, `"block"`, `"sinkhole"`. Default: `"default"`.
        """
        log_level: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LogLevel param. String must be one of these: `"default"`, `"none"`, `"low"`, `"informational"`, `"medium"`, `"high"`, `"critical"`. Default: `"default"`.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        packet_capture: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
elif False:
    DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsSecurityProfileBotnetDomainsDnsSecurityCategoryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 log_level: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 packet_capture: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] action: The Action param. String must be one of these: `"default"`, `"allow"`, `"block"`, `"sinkhole"`. Default: `"default"`.
        :param pulumi.Input[_builtins.str] log_level: The LogLevel param. String must be one of these: `"default"`, `"none"`, `"low"`, `"informational"`, `"medium"`, `"high"`, `"critical"`. Default: `"default"`.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] packet_capture: The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Action param. String must be one of these: `"default"`, `"allow"`, `"block"`, `"sinkhole"`. Default: `"default"`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LogLevel param. String must be one of these: `"default"`, `"none"`, `"low"`, `"informational"`, `"medium"`, `"high"`, `"critical"`. Default: `"default"`.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_level", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        return pulumi.get(self, "packet_capture")

    @packet_capture.setter
    def packet_capture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_capture", value)


if not MYPY:
    class DnsSecurityProfileBotnetDomainsListArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        action: NotRequired[pulumi.Input['DnsSecurityProfileBotnetDomainsListActionArgsDict']]
        """
        The Action param.
        """
        packet_capture: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
elif False:
    DnsSecurityProfileBotnetDomainsListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsSecurityProfileBotnetDomainsListArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input['DnsSecurityProfileBotnetDomainsListActionArgs']] = None,
                 packet_capture: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input['DnsSecurityProfileBotnetDomainsListActionArgs'] action: The Action param.
        :param pulumi.Input[_builtins.str] packet_capture: The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        pulumi.set(__self__, "name", name)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['DnsSecurityProfileBotnetDomainsListActionArgs']]:
        """
        The Action param.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['DnsSecurityProfileBotnetDomainsListActionArgs']]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        return pulumi.get(self, "packet_capture")

    @packet_capture.setter
    def packet_capture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_capture", value)


if not MYPY:
    class DnsSecurityProfileBotnetDomainsListActionArgsDict(TypedDict):
        alert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        """
        allow: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        """
        block: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Block param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        """
        sinkhole: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Sinkhole param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        """
elif False:
    DnsSecurityProfileBotnetDomainsListActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsSecurityProfileBotnetDomainsListActionArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow: Optional[pulumi.Input[_builtins.bool]] = None,
                 block: Optional[pulumi.Input[_builtins.bool]] = None,
                 sinkhole: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] alert: The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        :param pulumi.Input[_builtins.bool] allow: The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        :param pulumi.Input[_builtins.bool] block: The Block param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        :param pulumi.Input[_builtins.bool] sinkhole: The Sinkhole param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if block is not None:
            pulumi.set(__self__, "block", block)
        if sinkhole is not None:
            pulumi.set(__self__, "sinkhole", sinkhole)

    @_builtins.property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alert", value)

    @_builtins.property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow", value)

    @_builtins.property
    @pulumi.getter
    def block(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Block param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        """
        return pulumi.get(self, "block")

    @block.setter
    def block(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block", value)

    @_builtins.property
    @pulumi.getter
    def sinkhole(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Sinkhole param. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`
        """
        return pulumi.get(self, "sinkhole")

    @sinkhole.setter
    def sinkhole(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sinkhole", value)


if not MYPY:
    class DnsSecurityProfileBotnetDomainsSinkholeArgsDict(TypedDict):
        ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Ipv4Address param. String must be one of these: `"127.0.0.1"`, `"pan-sinkhole-default-ip"`.
        """
        ipv6_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Ipv6Address param. String must be one of these: `"::1"`.
        """
elif False:
    DnsSecurityProfileBotnetDomainsSinkholeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsSecurityProfileBotnetDomainsSinkholeArgs:
    def __init__(__self__, *,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ipv4_address: The Ipv4Address param. String must be one of these: `"127.0.0.1"`, `"pan-sinkhole-default-ip"`.
        :param pulumi.Input[_builtins.str] ipv6_address: The Ipv6Address param. String must be one of these: `"::1"`.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Ipv4Address param. String must be one of these: `"127.0.0.1"`, `"pan-sinkhole-default-ip"`.
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Ipv6Address param. String must be one of these: `"::1"`.
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)


if not MYPY:
    class DnsSecurityProfileBotnetDomainsWhitelistArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Description param.
        """
elif False:
    DnsSecurityProfileBotnetDomainsWhitelistArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsSecurityProfileBotnetDomainsWhitelistArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] description: The Description param.
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Description param.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class ExternalDynamicListTypeArgsDict(TypedDict):
        domain: NotRequired[pulumi.Input['ExternalDynamicListTypeDomainArgsDict']]
        """
        The Domain param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        imei: NotRequired[pulumi.Input['ExternalDynamicListTypeImeiArgsDict']]
        """
        The Imei param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        imsi: NotRequired[pulumi.Input['ExternalDynamicListTypeImsiArgsDict']]
        """
        The Imsi param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        ip: NotRequired[pulumi.Input['ExternalDynamicListTypeIpArgsDict']]
        """
        The Ip param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        predefined_ip: NotRequired[pulumi.Input['ExternalDynamicListTypePredefinedIpArgsDict']]
        """
        The PredefinedIp param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        predefined_url: NotRequired[pulumi.Input['ExternalDynamicListTypePredefinedUrlArgsDict']]
        """
        The PredefinedUrl param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        url: NotRequired[pulumi.Input['ExternalDynamicListTypeUrlArgsDict']]
        """
        The Url param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
elif False:
    ExternalDynamicListTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input['ExternalDynamicListTypeDomainArgs']] = None,
                 imei: Optional[pulumi.Input['ExternalDynamicListTypeImeiArgs']] = None,
                 imsi: Optional[pulumi.Input['ExternalDynamicListTypeImsiArgs']] = None,
                 ip: Optional[pulumi.Input['ExternalDynamicListTypeIpArgs']] = None,
                 predefined_ip: Optional[pulumi.Input['ExternalDynamicListTypePredefinedIpArgs']] = None,
                 predefined_url: Optional[pulumi.Input['ExternalDynamicListTypePredefinedUrlArgs']] = None,
                 url: Optional[pulumi.Input['ExternalDynamicListTypeUrlArgs']] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeDomainArgs'] domain: The Domain param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        :param pulumi.Input['ExternalDynamicListTypeImeiArgs'] imei: The Imei param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        :param pulumi.Input['ExternalDynamicListTypeImsiArgs'] imsi: The Imsi param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        :param pulumi.Input['ExternalDynamicListTypeIpArgs'] ip: The Ip param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        :param pulumi.Input['ExternalDynamicListTypePredefinedIpArgs'] predefined_ip: The PredefinedIp param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        :param pulumi.Input['ExternalDynamicListTypePredefinedUrlArgs'] predefined_url: The PredefinedUrl param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        :param pulumi.Input['ExternalDynamicListTypeUrlArgs'] url: The Url param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if imei is not None:
            pulumi.set(__self__, "imei", imei)
        if imsi is not None:
            pulumi.set(__self__, "imsi", imsi)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if predefined_ip is not None:
            pulumi.set(__self__, "predefined_ip", predefined_ip)
        if predefined_url is not None:
            pulumi.set(__self__, "predefined_url", predefined_url)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input['ExternalDynamicListTypeDomainArgs']]:
        """
        The Domain param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input['ExternalDynamicListTypeDomainArgs']]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def imei(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImeiArgs']]:
        """
        The Imei param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        return pulumi.get(self, "imei")

    @imei.setter
    def imei(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImeiArgs']]):
        pulumi.set(self, "imei", value)

    @_builtins.property
    @pulumi.getter
    def imsi(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImsiArgs']]:
        """
        The Imsi param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        return pulumi.get(self, "imsi")

    @imsi.setter
    def imsi(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImsiArgs']]):
        pulumi.set(self, "imsi", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input['ExternalDynamicListTypeIpArgs']]:
        """
        The Ip param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input['ExternalDynamicListTypeIpArgs']]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="predefinedIp")
    def predefined_ip(self) -> Optional[pulumi.Input['ExternalDynamicListTypePredefinedIpArgs']]:
        """
        The PredefinedIp param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        return pulumi.get(self, "predefined_ip")

    @predefined_ip.setter
    def predefined_ip(self, value: Optional[pulumi.Input['ExternalDynamicListTypePredefinedIpArgs']]):
        pulumi.set(self, "predefined_ip", value)

    @_builtins.property
    @pulumi.getter(name="predefinedUrl")
    def predefined_url(self) -> Optional[pulumi.Input['ExternalDynamicListTypePredefinedUrlArgs']]:
        """
        The PredefinedUrl param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        return pulumi.get(self, "predefined_url")

    @predefined_url.setter
    def predefined_url(self, value: Optional[pulumi.Input['ExternalDynamicListTypePredefinedUrlArgs']]):
        pulumi.set(self, "predefined_url", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input['ExternalDynamicListTypeUrlArgs']]:
        """
        The Url param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input['ExternalDynamicListTypeUrlArgs']]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ExternalDynamicListTypeDomainArgsDict(TypedDict):
        recurring: pulumi.Input['ExternalDynamicListTypeDomainRecurringArgsDict']
        """
        The Recurring param.
        """
        certificate_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Description param. String length must not exceed 255 characters.
        """
        domain_auth: NotRequired[pulumi.Input['ExternalDynamicListTypeDomainDomainAuthArgsDict']]
        """
        The DomainAuth param.
        """
        exception_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        expand_domain: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable/Disable expand domain. Default: `false`.
        """
        url: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
elif False:
    ExternalDynamicListTypeDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeDomainArgs:
    def __init__(__self__, *,
                 recurring: pulumi.Input['ExternalDynamicListTypeDomainRecurringArgs'],
                 certificate_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_auth: Optional[pulumi.Input['ExternalDynamicListTypeDomainDomainAuthArgs']] = None,
                 exception_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 expand_domain: Optional[pulumi.Input[_builtins.bool]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeDomainRecurringArgs'] recurring: The Recurring param.
        :param pulumi.Input[_builtins.str] certificate_profile: Profile for authenticating client certificates. Default: `"None"`.
        :param pulumi.Input[_builtins.str] description: The Description param. String length must not exceed 255 characters.
        :param pulumi.Input['ExternalDynamicListTypeDomainDomainAuthArgs'] domain_auth: The DomainAuth param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exception_lists: The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        :param pulumi.Input[_builtins.bool] expand_domain: Enable/Disable expand domain. Default: `false`.
        :param pulumi.Input[_builtins.str] url: The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        pulumi.set(__self__, "recurring", recurring)
        if certificate_profile is not None:
            pulumi.set(__self__, "certificate_profile", certificate_profile)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_auth is not None:
            pulumi.set(__self__, "domain_auth", domain_auth)
        if exception_lists is not None:
            pulumi.set(__self__, "exception_lists", exception_lists)
        if expand_domain is not None:
            pulumi.set(__self__, "expand_domain", expand_domain)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def recurring(self) -> pulumi.Input['ExternalDynamicListTypeDomainRecurringArgs']:
        """
        The Recurring param.
        """
        return pulumi.get(self, "recurring")

    @recurring.setter
    def recurring(self, value: pulumi.Input['ExternalDynamicListTypeDomainRecurringArgs']):
        pulumi.set(self, "recurring", value)

    @_builtins.property
    @pulumi.getter(name="certificateProfile")
    def certificate_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        return pulumi.get(self, "certificate_profile")

    @certificate_profile.setter
    def certificate_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_profile", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Description param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="domainAuth")
    def domain_auth(self) -> Optional[pulumi.Input['ExternalDynamicListTypeDomainDomainAuthArgs']]:
        """
        The DomainAuth param.
        """
        return pulumi.get(self, "domain_auth")

    @domain_auth.setter
    def domain_auth(self, value: Optional[pulumi.Input['ExternalDynamicListTypeDomainDomainAuthArgs']]):
        pulumi.set(self, "domain_auth", value)

    @_builtins.property
    @pulumi.getter(name="exceptionLists")
    def exception_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "exception_lists")

    @exception_lists.setter
    def exception_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exception_lists", value)

    @_builtins.property
    @pulumi.getter(name="expandDomain")
    def expand_domain(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable/Disable expand domain. Default: `false`.
        """
        return pulumi.get(self, "expand_domain")

    @expand_domain.setter
    def expand_domain(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "expand_domain", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ExternalDynamicListTypeDomainDomainAuthArgsDict(TypedDict):
        password: pulumi.Input[_builtins.str]
        """
        The Password param. String length must not exceed 255 characters.
        """
        username: pulumi.Input[_builtins.str]
        """
        The Username param. String length must be between 1 and 255 characters.
        """
elif False:
    ExternalDynamicListTypeDomainDomainAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeDomainDomainAuthArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[_builtins.str],
                 username: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] password: The Password param. String length must not exceed 255 characters.
        :param pulumi.Input[_builtins.str] username: The Username param. String length must be between 1 and 255 characters.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        The Password param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str]:
        """
        The Username param. String length must be between 1 and 255 characters.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ExternalDynamicListTypeDomainRecurringArgsDict(TypedDict):
        daily: NotRequired[pulumi.Input['ExternalDynamicListTypeDomainRecurringDailyArgsDict']]
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        five_minute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        hourly: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        monthly: NotRequired[pulumi.Input['ExternalDynamicListTypeDomainRecurringMonthlyArgsDict']]
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        weekly: NotRequired[pulumi.Input['ExternalDynamicListTypeDomainRecurringWeeklyArgsDict']]
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
elif False:
    ExternalDynamicListTypeDomainRecurringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeDomainRecurringArgs:
    def __init__(__self__, *,
                 daily: Optional[pulumi.Input['ExternalDynamicListTypeDomainRecurringDailyArgs']] = None,
                 five_minute: Optional[pulumi.Input[_builtins.bool]] = None,
                 hourly: Optional[pulumi.Input[_builtins.bool]] = None,
                 monthly: Optional[pulumi.Input['ExternalDynamicListTypeDomainRecurringMonthlyArgs']] = None,
                 weekly: Optional[pulumi.Input['ExternalDynamicListTypeDomainRecurringWeeklyArgs']] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeDomainRecurringDailyArgs'] daily: The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] five_minute: The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] hourly: The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeDomainRecurringMonthlyArgs'] monthly: The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeDomainRecurringWeeklyArgs'] weekly: The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if five_minute is not None:
            pulumi.set(__self__, "five_minute", five_minute)
        if hourly is not None:
            pulumi.set(__self__, "hourly", hourly)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)

    @_builtins.property
    @pulumi.getter
    def daily(self) -> Optional[pulumi.Input['ExternalDynamicListTypeDomainRecurringDailyArgs']]:
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "daily")

    @daily.setter
    def daily(self, value: Optional[pulumi.Input['ExternalDynamicListTypeDomainRecurringDailyArgs']]):
        pulumi.set(self, "daily", value)

    @_builtins.property
    @pulumi.getter(name="fiveMinute")
    def five_minute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "five_minute")

    @five_minute.setter
    def five_minute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "five_minute", value)

    @_builtins.property
    @pulumi.getter
    def hourly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "hourly")

    @hourly.setter
    def hourly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly", value)

    @_builtins.property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeDomainRecurringMonthlyArgs']]:
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeDomainRecurringMonthlyArgs']]):
        pulumi.set(self, "monthly", value)

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeDomainRecurringWeeklyArgs']]:
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "weekly")

    @weekly.setter
    def weekly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeDomainRecurringWeeklyArgs']]):
        pulumi.set(self, "weekly", value)


if not MYPY:
    class ExternalDynamicListTypeDomainRecurringDailyArgsDict(TypedDict):
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeDomainRecurringDailyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeDomainRecurringDailyArgs:
    def __init__(__self__, *,
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeDomainRecurringMonthlyArgsDict(TypedDict):
        day_of_month: pulumi.Input[_builtins.int]
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeDomainRecurringMonthlyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeDomainRecurringMonthlyArgs:
    def __init__(__self__, *,
                 day_of_month: pulumi.Input[_builtins.int],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] day_of_month: The DayOfMonth param. Value must be between 1 and 31.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_month", day_of_month)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> pulumi.Input[_builtins.int]:
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "day_of_month", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeDomainRecurringWeeklyArgsDict(TypedDict):
        day_of_week: pulumi.Input[_builtins.str]
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeDomainRecurringWeeklyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeDomainRecurringWeeklyArgs:
    def __init__(__self__, *,
                 day_of_week: pulumi.Input[_builtins.str],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] day_of_week: The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> pulumi.Input[_builtins.str]:
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "day_of_week", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeImeiArgsDict(TypedDict):
        recurring: pulumi.Input['ExternalDynamicListTypeImeiRecurringArgsDict']
        """
        The Recurring param.
        """
        certificate_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Description param. String length must not exceed 255 characters.
        """
        exception_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.
        """
        imei_auth: NotRequired[pulumi.Input['ExternalDynamicListTypeImeiImeiAuthArgsDict']]
        """
        The ImeiAuth param.
        """
        url: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
elif False:
    ExternalDynamicListTypeImeiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImeiArgs:
    def __init__(__self__, *,
                 recurring: pulumi.Input['ExternalDynamicListTypeImeiRecurringArgs'],
                 certificate_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 imei_auth: Optional[pulumi.Input['ExternalDynamicListTypeImeiImeiAuthArgs']] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeImeiRecurringArgs'] recurring: The Recurring param.
        :param pulumi.Input[_builtins.str] certificate_profile: Profile for authenticating client certificates. Default: `"None"`.
        :param pulumi.Input[_builtins.str] description: The Description param. String length must not exceed 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exception_lists: The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.
        :param pulumi.Input['ExternalDynamicListTypeImeiImeiAuthArgs'] imei_auth: The ImeiAuth param.
        :param pulumi.Input[_builtins.str] url: The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        pulumi.set(__self__, "recurring", recurring)
        if certificate_profile is not None:
            pulumi.set(__self__, "certificate_profile", certificate_profile)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exception_lists is not None:
            pulumi.set(__self__, "exception_lists", exception_lists)
        if imei_auth is not None:
            pulumi.set(__self__, "imei_auth", imei_auth)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def recurring(self) -> pulumi.Input['ExternalDynamicListTypeImeiRecurringArgs']:
        """
        The Recurring param.
        """
        return pulumi.get(self, "recurring")

    @recurring.setter
    def recurring(self, value: pulumi.Input['ExternalDynamicListTypeImeiRecurringArgs']):
        pulumi.set(self, "recurring", value)

    @_builtins.property
    @pulumi.getter(name="certificateProfile")
    def certificate_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        return pulumi.get(self, "certificate_profile")

    @certificate_profile.setter
    def certificate_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_profile", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Description param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="exceptionLists")
    def exception_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.
        """
        return pulumi.get(self, "exception_lists")

    @exception_lists.setter
    def exception_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exception_lists", value)

    @_builtins.property
    @pulumi.getter(name="imeiAuth")
    def imei_auth(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImeiImeiAuthArgs']]:
        """
        The ImeiAuth param.
        """
        return pulumi.get(self, "imei_auth")

    @imei_auth.setter
    def imei_auth(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImeiImeiAuthArgs']]):
        pulumi.set(self, "imei_auth", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ExternalDynamicListTypeImeiImeiAuthArgsDict(TypedDict):
        password: pulumi.Input[_builtins.str]
        """
        The Password param. String length must not exceed 255 characters.
        """
        username: pulumi.Input[_builtins.str]
        """
        The Username param. String length must be between 1 and 255 characters.
        """
elif False:
    ExternalDynamicListTypeImeiImeiAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImeiImeiAuthArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[_builtins.str],
                 username: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] password: The Password param. String length must not exceed 255 characters.
        :param pulumi.Input[_builtins.str] username: The Username param. String length must be between 1 and 255 characters.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        The Password param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str]:
        """
        The Username param. String length must be between 1 and 255 characters.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ExternalDynamicListTypeImeiRecurringArgsDict(TypedDict):
        daily: NotRequired[pulumi.Input['ExternalDynamicListTypeImeiRecurringDailyArgsDict']]
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        five_minute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        hourly: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        monthly: NotRequired[pulumi.Input['ExternalDynamicListTypeImeiRecurringMonthlyArgsDict']]
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        weekly: NotRequired[pulumi.Input['ExternalDynamicListTypeImeiRecurringWeeklyArgsDict']]
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
elif False:
    ExternalDynamicListTypeImeiRecurringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImeiRecurringArgs:
    def __init__(__self__, *,
                 daily: Optional[pulumi.Input['ExternalDynamicListTypeImeiRecurringDailyArgs']] = None,
                 five_minute: Optional[pulumi.Input[_builtins.bool]] = None,
                 hourly: Optional[pulumi.Input[_builtins.bool]] = None,
                 monthly: Optional[pulumi.Input['ExternalDynamicListTypeImeiRecurringMonthlyArgs']] = None,
                 weekly: Optional[pulumi.Input['ExternalDynamicListTypeImeiRecurringWeeklyArgs']] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeImeiRecurringDailyArgs'] daily: The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] five_minute: The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] hourly: The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeImeiRecurringMonthlyArgs'] monthly: The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeImeiRecurringWeeklyArgs'] weekly: The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if five_minute is not None:
            pulumi.set(__self__, "five_minute", five_minute)
        if hourly is not None:
            pulumi.set(__self__, "hourly", hourly)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)

    @_builtins.property
    @pulumi.getter
    def daily(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImeiRecurringDailyArgs']]:
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "daily")

    @daily.setter
    def daily(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImeiRecurringDailyArgs']]):
        pulumi.set(self, "daily", value)

    @_builtins.property
    @pulumi.getter(name="fiveMinute")
    def five_minute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "five_minute")

    @five_minute.setter
    def five_minute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "five_minute", value)

    @_builtins.property
    @pulumi.getter
    def hourly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "hourly")

    @hourly.setter
    def hourly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly", value)

    @_builtins.property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImeiRecurringMonthlyArgs']]:
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImeiRecurringMonthlyArgs']]):
        pulumi.set(self, "monthly", value)

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImeiRecurringWeeklyArgs']]:
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "weekly")

    @weekly.setter
    def weekly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImeiRecurringWeeklyArgs']]):
        pulumi.set(self, "weekly", value)


if not MYPY:
    class ExternalDynamicListTypeImeiRecurringDailyArgsDict(TypedDict):
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeImeiRecurringDailyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImeiRecurringDailyArgs:
    def __init__(__self__, *,
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeImeiRecurringMonthlyArgsDict(TypedDict):
        day_of_month: pulumi.Input[_builtins.int]
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeImeiRecurringMonthlyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImeiRecurringMonthlyArgs:
    def __init__(__self__, *,
                 day_of_month: pulumi.Input[_builtins.int],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] day_of_month: The DayOfMonth param. Value must be between 1 and 31.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_month", day_of_month)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> pulumi.Input[_builtins.int]:
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "day_of_month", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeImeiRecurringWeeklyArgsDict(TypedDict):
        day_of_week: pulumi.Input[_builtins.str]
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeImeiRecurringWeeklyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImeiRecurringWeeklyArgs:
    def __init__(__self__, *,
                 day_of_week: pulumi.Input[_builtins.str],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] day_of_week: The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> pulumi.Input[_builtins.str]:
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "day_of_week", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeImsiArgsDict(TypedDict):
        recurring: pulumi.Input['ExternalDynamicListTypeImsiRecurringArgsDict']
        """
        The Recurring param.
        """
        certificate_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Description param. String length must not exceed 255 characters.
        """
        exception_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 34 characters.
        """
        imsi_auth: NotRequired[pulumi.Input['ExternalDynamicListTypeImsiImsiAuthArgsDict']]
        """
        The ImsiAuth param.
        """
        url: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
elif False:
    ExternalDynamicListTypeImsiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImsiArgs:
    def __init__(__self__, *,
                 recurring: pulumi.Input['ExternalDynamicListTypeImsiRecurringArgs'],
                 certificate_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 imsi_auth: Optional[pulumi.Input['ExternalDynamicListTypeImsiImsiAuthArgs']] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeImsiRecurringArgs'] recurring: The Recurring param.
        :param pulumi.Input[_builtins.str] certificate_profile: Profile for authenticating client certificates. Default: `"None"`.
        :param pulumi.Input[_builtins.str] description: The Description param. String length must not exceed 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exception_lists: The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 34 characters.
        :param pulumi.Input['ExternalDynamicListTypeImsiImsiAuthArgs'] imsi_auth: The ImsiAuth param.
        :param pulumi.Input[_builtins.str] url: The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        pulumi.set(__self__, "recurring", recurring)
        if certificate_profile is not None:
            pulumi.set(__self__, "certificate_profile", certificate_profile)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exception_lists is not None:
            pulumi.set(__self__, "exception_lists", exception_lists)
        if imsi_auth is not None:
            pulumi.set(__self__, "imsi_auth", imsi_auth)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def recurring(self) -> pulumi.Input['ExternalDynamicListTypeImsiRecurringArgs']:
        """
        The Recurring param.
        """
        return pulumi.get(self, "recurring")

    @recurring.setter
    def recurring(self, value: pulumi.Input['ExternalDynamicListTypeImsiRecurringArgs']):
        pulumi.set(self, "recurring", value)

    @_builtins.property
    @pulumi.getter(name="certificateProfile")
    def certificate_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        return pulumi.get(self, "certificate_profile")

    @certificate_profile.setter
    def certificate_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_profile", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Description param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="exceptionLists")
    def exception_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 34 characters.
        """
        return pulumi.get(self, "exception_lists")

    @exception_lists.setter
    def exception_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exception_lists", value)

    @_builtins.property
    @pulumi.getter(name="imsiAuth")
    def imsi_auth(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImsiImsiAuthArgs']]:
        """
        The ImsiAuth param.
        """
        return pulumi.get(self, "imsi_auth")

    @imsi_auth.setter
    def imsi_auth(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImsiImsiAuthArgs']]):
        pulumi.set(self, "imsi_auth", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ExternalDynamicListTypeImsiImsiAuthArgsDict(TypedDict):
        password: pulumi.Input[_builtins.str]
        """
        The Password param. String length must not exceed 255 characters.
        """
        username: pulumi.Input[_builtins.str]
        """
        The Username param. String length must be between 1 and 255 characters.
        """
elif False:
    ExternalDynamicListTypeImsiImsiAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImsiImsiAuthArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[_builtins.str],
                 username: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] password: The Password param. String length must not exceed 255 characters.
        :param pulumi.Input[_builtins.str] username: The Username param. String length must be between 1 and 255 characters.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        The Password param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str]:
        """
        The Username param. String length must be between 1 and 255 characters.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ExternalDynamicListTypeImsiRecurringArgsDict(TypedDict):
        daily: NotRequired[pulumi.Input['ExternalDynamicListTypeImsiRecurringDailyArgsDict']]
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        five_minute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        hourly: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        monthly: NotRequired[pulumi.Input['ExternalDynamicListTypeImsiRecurringMonthlyArgsDict']]
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        weekly: NotRequired[pulumi.Input['ExternalDynamicListTypeImsiRecurringWeeklyArgsDict']]
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
elif False:
    ExternalDynamicListTypeImsiRecurringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImsiRecurringArgs:
    def __init__(__self__, *,
                 daily: Optional[pulumi.Input['ExternalDynamicListTypeImsiRecurringDailyArgs']] = None,
                 five_minute: Optional[pulumi.Input[_builtins.bool]] = None,
                 hourly: Optional[pulumi.Input[_builtins.bool]] = None,
                 monthly: Optional[pulumi.Input['ExternalDynamicListTypeImsiRecurringMonthlyArgs']] = None,
                 weekly: Optional[pulumi.Input['ExternalDynamicListTypeImsiRecurringWeeklyArgs']] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeImsiRecurringDailyArgs'] daily: The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] five_minute: The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] hourly: The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeImsiRecurringMonthlyArgs'] monthly: The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeImsiRecurringWeeklyArgs'] weekly: The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if five_minute is not None:
            pulumi.set(__self__, "five_minute", five_minute)
        if hourly is not None:
            pulumi.set(__self__, "hourly", hourly)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)

    @_builtins.property
    @pulumi.getter
    def daily(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImsiRecurringDailyArgs']]:
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "daily")

    @daily.setter
    def daily(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImsiRecurringDailyArgs']]):
        pulumi.set(self, "daily", value)

    @_builtins.property
    @pulumi.getter(name="fiveMinute")
    def five_minute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "five_minute")

    @five_minute.setter
    def five_minute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "five_minute", value)

    @_builtins.property
    @pulumi.getter
    def hourly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "hourly")

    @hourly.setter
    def hourly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly", value)

    @_builtins.property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImsiRecurringMonthlyArgs']]:
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImsiRecurringMonthlyArgs']]):
        pulumi.set(self, "monthly", value)

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeImsiRecurringWeeklyArgs']]:
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "weekly")

    @weekly.setter
    def weekly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeImsiRecurringWeeklyArgs']]):
        pulumi.set(self, "weekly", value)


if not MYPY:
    class ExternalDynamicListTypeImsiRecurringDailyArgsDict(TypedDict):
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeImsiRecurringDailyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImsiRecurringDailyArgs:
    def __init__(__self__, *,
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeImsiRecurringMonthlyArgsDict(TypedDict):
        day_of_month: pulumi.Input[_builtins.int]
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeImsiRecurringMonthlyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImsiRecurringMonthlyArgs:
    def __init__(__self__, *,
                 day_of_month: pulumi.Input[_builtins.int],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] day_of_month: The DayOfMonth param. Value must be between 1 and 31.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_month", day_of_month)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> pulumi.Input[_builtins.int]:
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "day_of_month", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeImsiRecurringWeeklyArgsDict(TypedDict):
        day_of_week: pulumi.Input[_builtins.str]
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeImsiRecurringWeeklyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeImsiRecurringWeeklyArgs:
    def __init__(__self__, *,
                 day_of_week: pulumi.Input[_builtins.str],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] day_of_week: The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> pulumi.Input[_builtins.str]:
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "day_of_week", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeIpArgsDict(TypedDict):
        recurring: pulumi.Input['ExternalDynamicListTypeIpRecurringArgsDict']
        """
        The Recurring param.
        """
        certificate_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Description param. String length must not exceed 255 characters.
        """
        exception_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        ip_auth: NotRequired[pulumi.Input['ExternalDynamicListTypeIpIpAuthArgsDict']]
        """
        The IpAuth param.
        """
        url: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
elif False:
    ExternalDynamicListTypeIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeIpArgs:
    def __init__(__self__, *,
                 recurring: pulumi.Input['ExternalDynamicListTypeIpRecurringArgs'],
                 certificate_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ip_auth: Optional[pulumi.Input['ExternalDynamicListTypeIpIpAuthArgs']] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeIpRecurringArgs'] recurring: The Recurring param.
        :param pulumi.Input[_builtins.str] certificate_profile: Profile for authenticating client certificates. Default: `"None"`.
        :param pulumi.Input[_builtins.str] description: The Description param. String length must not exceed 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exception_lists: The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        :param pulumi.Input['ExternalDynamicListTypeIpIpAuthArgs'] ip_auth: The IpAuth param.
        :param pulumi.Input[_builtins.str] url: The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        pulumi.set(__self__, "recurring", recurring)
        if certificate_profile is not None:
            pulumi.set(__self__, "certificate_profile", certificate_profile)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exception_lists is not None:
            pulumi.set(__self__, "exception_lists", exception_lists)
        if ip_auth is not None:
            pulumi.set(__self__, "ip_auth", ip_auth)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def recurring(self) -> pulumi.Input['ExternalDynamicListTypeIpRecurringArgs']:
        """
        The Recurring param.
        """
        return pulumi.get(self, "recurring")

    @recurring.setter
    def recurring(self, value: pulumi.Input['ExternalDynamicListTypeIpRecurringArgs']):
        pulumi.set(self, "recurring", value)

    @_builtins.property
    @pulumi.getter(name="certificateProfile")
    def certificate_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        return pulumi.get(self, "certificate_profile")

    @certificate_profile.setter
    def certificate_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_profile", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Description param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="exceptionLists")
    def exception_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "exception_lists")

    @exception_lists.setter
    def exception_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exception_lists", value)

    @_builtins.property
    @pulumi.getter(name="ipAuth")
    def ip_auth(self) -> Optional[pulumi.Input['ExternalDynamicListTypeIpIpAuthArgs']]:
        """
        The IpAuth param.
        """
        return pulumi.get(self, "ip_auth")

    @ip_auth.setter
    def ip_auth(self, value: Optional[pulumi.Input['ExternalDynamicListTypeIpIpAuthArgs']]):
        pulumi.set(self, "ip_auth", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ExternalDynamicListTypeIpIpAuthArgsDict(TypedDict):
        password: pulumi.Input[_builtins.str]
        """
        The Password param. String length must not exceed 255 characters.
        """
        username: pulumi.Input[_builtins.str]
        """
        The Username param. String length must be between 1 and 255 characters.
        """
elif False:
    ExternalDynamicListTypeIpIpAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeIpIpAuthArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[_builtins.str],
                 username: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] password: The Password param. String length must not exceed 255 characters.
        :param pulumi.Input[_builtins.str] username: The Username param. String length must be between 1 and 255 characters.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        The Password param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str]:
        """
        The Username param. String length must be between 1 and 255 characters.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ExternalDynamicListTypeIpRecurringArgsDict(TypedDict):
        daily: NotRequired[pulumi.Input['ExternalDynamicListTypeIpRecurringDailyArgsDict']]
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        five_minute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        hourly: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        monthly: NotRequired[pulumi.Input['ExternalDynamicListTypeIpRecurringMonthlyArgsDict']]
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        weekly: NotRequired[pulumi.Input['ExternalDynamicListTypeIpRecurringWeeklyArgsDict']]
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
elif False:
    ExternalDynamicListTypeIpRecurringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeIpRecurringArgs:
    def __init__(__self__, *,
                 daily: Optional[pulumi.Input['ExternalDynamicListTypeIpRecurringDailyArgs']] = None,
                 five_minute: Optional[pulumi.Input[_builtins.bool]] = None,
                 hourly: Optional[pulumi.Input[_builtins.bool]] = None,
                 monthly: Optional[pulumi.Input['ExternalDynamicListTypeIpRecurringMonthlyArgs']] = None,
                 weekly: Optional[pulumi.Input['ExternalDynamicListTypeIpRecurringWeeklyArgs']] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeIpRecurringDailyArgs'] daily: The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] five_minute: The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] hourly: The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeIpRecurringMonthlyArgs'] monthly: The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeIpRecurringWeeklyArgs'] weekly: The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if five_minute is not None:
            pulumi.set(__self__, "five_minute", five_minute)
        if hourly is not None:
            pulumi.set(__self__, "hourly", hourly)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)

    @_builtins.property
    @pulumi.getter
    def daily(self) -> Optional[pulumi.Input['ExternalDynamicListTypeIpRecurringDailyArgs']]:
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "daily")

    @daily.setter
    def daily(self, value: Optional[pulumi.Input['ExternalDynamicListTypeIpRecurringDailyArgs']]):
        pulumi.set(self, "daily", value)

    @_builtins.property
    @pulumi.getter(name="fiveMinute")
    def five_minute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "five_minute")

    @five_minute.setter
    def five_minute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "five_minute", value)

    @_builtins.property
    @pulumi.getter
    def hourly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "hourly")

    @hourly.setter
    def hourly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly", value)

    @_builtins.property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeIpRecurringMonthlyArgs']]:
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeIpRecurringMonthlyArgs']]):
        pulumi.set(self, "monthly", value)

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeIpRecurringWeeklyArgs']]:
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "weekly")

    @weekly.setter
    def weekly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeIpRecurringWeeklyArgs']]):
        pulumi.set(self, "weekly", value)


if not MYPY:
    class ExternalDynamicListTypeIpRecurringDailyArgsDict(TypedDict):
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeIpRecurringDailyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeIpRecurringDailyArgs:
    def __init__(__self__, *,
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeIpRecurringMonthlyArgsDict(TypedDict):
        day_of_month: pulumi.Input[_builtins.int]
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeIpRecurringMonthlyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeIpRecurringMonthlyArgs:
    def __init__(__self__, *,
                 day_of_month: pulumi.Input[_builtins.int],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] day_of_month: The DayOfMonth param. Value must be between 1 and 31.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_month", day_of_month)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> pulumi.Input[_builtins.int]:
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "day_of_month", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeIpRecurringWeeklyArgsDict(TypedDict):
        day_of_week: pulumi.Input[_builtins.str]
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeIpRecurringWeeklyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeIpRecurringWeeklyArgs:
    def __init__(__self__, *,
                 day_of_week: pulumi.Input[_builtins.str],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] day_of_week: The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> pulumi.Input[_builtins.str]:
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "day_of_week", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypePredefinedIpArgsDict(TypedDict):
        url: pulumi.Input[_builtins.str]
        """
        The Url param.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Description param. String length must not exceed 255 characters.
        """
        exception_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
elif False:
    ExternalDynamicListTypePredefinedIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypePredefinedIpArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] url: The Url param.
        :param pulumi.Input[_builtins.str] description: The Description param. String length must not exceed 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exception_lists: The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        pulumi.set(__self__, "url", url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exception_lists is not None:
            pulumi.set(__self__, "exception_lists", exception_lists)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        The Url param.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Description param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="exceptionLists")
    def exception_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "exception_lists")

    @exception_lists.setter
    def exception_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exception_lists", value)


if not MYPY:
    class ExternalDynamicListTypePredefinedUrlArgsDict(TypedDict):
        url: pulumi.Input[_builtins.str]
        """
        The Url param.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Description param. String length must not exceed 255 characters.
        """
        exception_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
elif False:
    ExternalDynamicListTypePredefinedUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypePredefinedUrlArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] url: The Url param.
        :param pulumi.Input[_builtins.str] description: The Description param. String length must not exceed 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exception_lists: The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        pulumi.set(__self__, "url", url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exception_lists is not None:
            pulumi.set(__self__, "exception_lists", exception_lists)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        The Url param.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Description param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="exceptionLists")
    def exception_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "exception_lists")

    @exception_lists.setter
    def exception_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exception_lists", value)


if not MYPY:
    class ExternalDynamicListTypeUrlArgsDict(TypedDict):
        recurring: pulumi.Input['ExternalDynamicListTypeUrlRecurringArgsDict']
        """
        The Recurring param.
        """
        certificate_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Description param. String length must not exceed 255 characters.
        """
        exception_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        url: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        url_auth: NotRequired[pulumi.Input['ExternalDynamicListTypeUrlUrlAuthArgsDict']]
        """
        The UrlAuth param.
        """
elif False:
    ExternalDynamicListTypeUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeUrlArgs:
    def __init__(__self__, *,
                 recurring: pulumi.Input['ExternalDynamicListTypeUrlRecurringArgs'],
                 certificate_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 exception_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 url_auth: Optional[pulumi.Input['ExternalDynamicListTypeUrlUrlAuthArgs']] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeUrlRecurringArgs'] recurring: The Recurring param.
        :param pulumi.Input[_builtins.str] certificate_profile: Profile for authenticating client certificates. Default: `"None"`.
        :param pulumi.Input[_builtins.str] description: The Description param. String length must not exceed 255 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exception_lists: The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        :param pulumi.Input[_builtins.str] url: The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        :param pulumi.Input['ExternalDynamicListTypeUrlUrlAuthArgs'] url_auth: The UrlAuth param.
        """
        pulumi.set(__self__, "recurring", recurring)
        if certificate_profile is not None:
            pulumi.set(__self__, "certificate_profile", certificate_profile)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exception_lists is not None:
            pulumi.set(__self__, "exception_lists", exception_lists)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_auth is not None:
            pulumi.set(__self__, "url_auth", url_auth)

    @_builtins.property
    @pulumi.getter
    def recurring(self) -> pulumi.Input['ExternalDynamicListTypeUrlRecurringArgs']:
        """
        The Recurring param.
        """
        return pulumi.get(self, "recurring")

    @recurring.setter
    def recurring(self, value: pulumi.Input['ExternalDynamicListTypeUrlRecurringArgs']):
        pulumi.set(self, "recurring", value)

    @_builtins.property
    @pulumi.getter(name="certificateProfile")
    def certificate_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile for authenticating client certificates. Default: `"None"`.
        """
        return pulumi.get(self, "certificate_profile")

    @certificate_profile.setter
    def certificate_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_profile", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Description param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="exceptionLists")
    def exception_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "exception_lists")

    @exception_lists.setter
    def exception_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exception_lists", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Url param. String length must not exceed 255 characters. Default: `"http://"`.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter(name="urlAuth")
    def url_auth(self) -> Optional[pulumi.Input['ExternalDynamicListTypeUrlUrlAuthArgs']]:
        """
        The UrlAuth param.
        """
        return pulumi.get(self, "url_auth")

    @url_auth.setter
    def url_auth(self, value: Optional[pulumi.Input['ExternalDynamicListTypeUrlUrlAuthArgs']]):
        pulumi.set(self, "url_auth", value)


if not MYPY:
    class ExternalDynamicListTypeUrlRecurringArgsDict(TypedDict):
        daily: NotRequired[pulumi.Input['ExternalDynamicListTypeUrlRecurringDailyArgsDict']]
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        five_minute: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        hourly: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        monthly: NotRequired[pulumi.Input['ExternalDynamicListTypeUrlRecurringMonthlyArgsDict']]
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        weekly: NotRequired[pulumi.Input['ExternalDynamicListTypeUrlRecurringWeeklyArgsDict']]
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
elif False:
    ExternalDynamicListTypeUrlRecurringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeUrlRecurringArgs:
    def __init__(__self__, *,
                 daily: Optional[pulumi.Input['ExternalDynamicListTypeUrlRecurringDailyArgs']] = None,
                 five_minute: Optional[pulumi.Input[_builtins.bool]] = None,
                 hourly: Optional[pulumi.Input[_builtins.bool]] = None,
                 monthly: Optional[pulumi.Input['ExternalDynamicListTypeUrlRecurringMonthlyArgs']] = None,
                 weekly: Optional[pulumi.Input['ExternalDynamicListTypeUrlRecurringWeeklyArgs']] = None):
        """
        :param pulumi.Input['ExternalDynamicListTypeUrlRecurringDailyArgs'] daily: The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] five_minute: The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input[_builtins.bool] hourly: The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeUrlRecurringMonthlyArgs'] monthly: The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        :param pulumi.Input['ExternalDynamicListTypeUrlRecurringWeeklyArgs'] weekly: The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if five_minute is not None:
            pulumi.set(__self__, "five_minute", five_minute)
        if hourly is not None:
            pulumi.set(__self__, "hourly", hourly)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)

    @_builtins.property
    @pulumi.getter
    def daily(self) -> Optional[pulumi.Input['ExternalDynamicListTypeUrlRecurringDailyArgs']]:
        """
        The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "daily")

    @daily.setter
    def daily(self, value: Optional[pulumi.Input['ExternalDynamicListTypeUrlRecurringDailyArgs']]):
        pulumi.set(self, "daily", value)

    @_builtins.property
    @pulumi.getter(name="fiveMinute")
    def five_minute(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The FiveMinute param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "five_minute")

    @five_minute.setter
    def five_minute(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "five_minute", value)

    @_builtins.property
    @pulumi.getter
    def hourly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Hourly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "hourly")

    @hourly.setter
    def hourly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly", value)

    @_builtins.property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeUrlRecurringMonthlyArgs']]:
        """
        The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeUrlRecurringMonthlyArgs']]):
        pulumi.set(self, "monthly", value)

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> Optional[pulumi.Input['ExternalDynamicListTypeUrlRecurringWeeklyArgs']]:
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`
        """
        return pulumi.get(self, "weekly")

    @weekly.setter
    def weekly(self, value: Optional[pulumi.Input['ExternalDynamicListTypeUrlRecurringWeeklyArgs']]):
        pulumi.set(self, "weekly", value)


if not MYPY:
    class ExternalDynamicListTypeUrlRecurringDailyArgsDict(TypedDict):
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeUrlRecurringDailyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeUrlRecurringDailyArgs:
    def __init__(__self__, *,
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeUrlRecurringMonthlyArgsDict(TypedDict):
        day_of_month: pulumi.Input[_builtins.int]
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeUrlRecurringMonthlyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeUrlRecurringMonthlyArgs:
    def __init__(__self__, *,
                 day_of_month: pulumi.Input[_builtins.int],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] day_of_month: The DayOfMonth param. Value must be between 1 and 31.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_month", day_of_month)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> pulumi.Input[_builtins.int]:
        """
        The DayOfMonth param. Value must be between 1 and 31.
        """
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "day_of_month", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeUrlRecurringWeeklyArgsDict(TypedDict):
        day_of_week: pulumi.Input[_builtins.str]
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
elif False:
    ExternalDynamicListTypeUrlRecurringWeeklyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeUrlRecurringWeeklyArgs:
    def __init__(__self__, *,
                 day_of_week: pulumi.Input[_builtins.str],
                 at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] day_of_week: The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        :param pulumi.Input[_builtins.str] at: Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        if at is not None:
            pulumi.set(__self__, "at", at)

    @_builtins.property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> pulumi.Input[_builtins.str]:
        """
        The DayOfWeek param. String must be one of these: `"sunday"`, `"monday"`, `"tuesday"`, `"wednesday"`, `"thursday"`, `"friday"`, `"saturday"`.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "day_of_week", value)

    @_builtins.property
    @pulumi.getter
    def at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `"00"`.
        """
        return pulumi.get(self, "at")

    @at.setter
    def at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "at", value)


if not MYPY:
    class ExternalDynamicListTypeUrlUrlAuthArgsDict(TypedDict):
        password: pulumi.Input[_builtins.str]
        """
        The Password param. String length must not exceed 255 characters.
        """
        username: pulumi.Input[_builtins.str]
        """
        The Username param. String length must be between 1 and 255 characters.
        """
elif False:
    ExternalDynamicListTypeUrlUrlAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalDynamicListTypeUrlUrlAuthArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[_builtins.str],
                 username: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] password: The Password param. String length must not exceed 255 characters.
        :param pulumi.Input[_builtins.str] username: The Username param. String length must be between 1 and 255 characters.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        The Password param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str]:
        """
        The Username param. String length must be between 1 and 255 characters.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "username", value)


if not MYPY:
    class FileBlockingProfileRuleArgsDict(TypedDict):
        applications: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        The Applications param. List must contain at least 1 elements.
        """
        file_types: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        The FileTypes param. List must contain at least 1 elements.
        """
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        action: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Action param. String must be one of these: `"alert"`, `"block"`, `"continue"`. Default: `"alert"`.
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Direction param. String must be one of these: `"download"`, `"upload"`, `"both"`. Default: `"both"`.
        """
elif False:
    FileBlockingProfileRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FileBlockingProfileRuleArgs:
    def __init__(__self__, *,
                 applications: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 file_types: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 name: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] applications: The Applications param. List must contain at least 1 elements.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] file_types: The FileTypes param. List must contain at least 1 elements.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] action: The Action param. String must be one of these: `"alert"`, `"block"`, `"continue"`. Default: `"alert"`.
        :param pulumi.Input[_builtins.str] direction: The Direction param. String must be one of these: `"download"`, `"upload"`, `"both"`. Default: `"both"`.
        """
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "file_types", file_types)
        pulumi.set(__self__, "name", name)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The Applications param. List must contain at least 1 elements.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "applications", value)

    @_builtins.property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The FileTypes param. List must contain at least 1 elements.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "file_types", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Action param. String must be one of these: `"alert"`, `"block"`, `"continue"`. Default: `"alert"`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Direction param. String must be one of these: `"download"`, `"upload"`, `"both"`. Default: `"both"`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)


if not MYPY:
    class HipObjectAntiMalwareArgsDict(TypedDict):
        criteria: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaArgsDict']]
        """
        The Criteria param.
        """
        exclude_vendor: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ExcludeVendor param. Default: `false`.
        """
        vendors: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectAntiMalwareVendorArgsDict']]]]
        """
        Vendor name.
        """
elif False:
    HipObjectAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareArgs:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaArgs']] = None,
                 exclude_vendor: Optional[pulumi.Input[_builtins.bool]] = None,
                 vendors: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectAntiMalwareVendorArgs']]]] = None):
        """
        :param pulumi.Input['HipObjectAntiMalwareCriteriaArgs'] criteria: The Criteria param.
        :param pulumi.Input[_builtins.bool] exclude_vendor: The ExcludeVendor param. Default: `false`.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectAntiMalwareVendorArgs']]] vendors: Vendor name.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if exclude_vendor is not None:
            pulumi.set(__self__, "exclude_vendor", exclude_vendor)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaArgs']]:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaArgs']]):
        pulumi.set(self, "criteria", value)

    @_builtins.property
    @pulumi.getter(name="excludeVendor")
    def exclude_vendor(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ExcludeVendor param. Default: `false`.
        """
        return pulumi.get(self, "exclude_vendor")

    @exclude_vendor.setter
    def exclude_vendor(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_vendor", value)

    @_builtins.property
    @pulumi.getter
    def vendors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectAntiMalwareVendorArgs']]]]:
        """
        Vendor name.
        """
        return pulumi.get(self, "vendors")

    @vendors.setter
    def vendors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectAntiMalwareVendorArgs']]]]):
        pulumi.set(self, "vendors", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaArgsDict(TypedDict):
        is_installed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Is Installed. Default: `true`.
        """
        last_scan_time: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeArgsDict']]
        """
        The LastScanTime param.
        """
        product_version: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionArgsDict']]
        """
        The ProductVersion param.
        """
        real_time_protection: NotRequired[pulumi.Input[_builtins.str]]
        """
        real time protection. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        """
        virdef_version: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionArgsDict']]
        """
        The VirdefVersion param.
        """
elif False:
    HipObjectAntiMalwareCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaArgs:
    def __init__(__self__, *,
                 is_installed: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_scan_time: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeArgs']] = None,
                 product_version: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionArgs']] = None,
                 real_time_protection: Optional[pulumi.Input[_builtins.str]] = None,
                 virdef_version: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionArgs']] = None):
        """
        :param pulumi.Input[_builtins.bool] is_installed: Is Installed. Default: `true`.
        :param pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeArgs'] last_scan_time: The LastScanTime param.
        :param pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionArgs'] product_version: The ProductVersion param.
        :param pulumi.Input[_builtins.str] real_time_protection: real time protection. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        :param pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionArgs'] virdef_version: The VirdefVersion param.
        """
        if is_installed is not None:
            pulumi.set(__self__, "is_installed", is_installed)
        if last_scan_time is not None:
            pulumi.set(__self__, "last_scan_time", last_scan_time)
        if product_version is not None:
            pulumi.set(__self__, "product_version", product_version)
        if real_time_protection is not None:
            pulumi.set(__self__, "real_time_protection", real_time_protection)
        if virdef_version is not None:
            pulumi.set(__self__, "virdef_version", virdef_version)

    @_builtins.property
    @pulumi.getter(name="isInstalled")
    def is_installed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Is Installed. Default: `true`.
        """
        return pulumi.get(self, "is_installed")

    @is_installed.setter
    def is_installed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_installed", value)

    @_builtins.property
    @pulumi.getter(name="lastScanTime")
    def last_scan_time(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeArgs']]:
        """
        The LastScanTime param.
        """
        return pulumi.get(self, "last_scan_time")

    @last_scan_time.setter
    def last_scan_time(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeArgs']]):
        pulumi.set(self, "last_scan_time", value)

    @_builtins.property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionArgs']]:
        """
        The ProductVersion param.
        """
        return pulumi.get(self, "product_version")

    @product_version.setter
    def product_version(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionArgs']]):
        pulumi.set(self, "product_version", value)

    @_builtins.property
    @pulumi.getter(name="realTimeProtection")
    def real_time_protection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        real time protection. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        """
        return pulumi.get(self, "real_time_protection")

    @real_time_protection.setter
    def real_time_protection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "real_time_protection", value)

    @_builtins.property
    @pulumi.getter(name="virdefVersion")
    def virdef_version(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionArgs']]:
        """
        The VirdefVersion param.
        """
        return pulumi.get(self, "virdef_version")

    @virdef_version.setter
    def virdef_version(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionArgs']]):
        pulumi.set(self, "virdef_version", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaLastScanTimeArgsDict(TypedDict):
        not_available: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The NotAvailable param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        not_within: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgsDict']]
        """
        The NotWithin param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        within: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeWithinArgsDict']]
        """
        The Within param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
elif False:
    HipObjectAntiMalwareCriteriaLastScanTimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaLastScanTimeArgs:
    def __init__(__self__, *,
                 not_available: Optional[pulumi.Input[_builtins.bool]] = None,
                 not_within: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgs']] = None,
                 within: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeWithinArgs']] = None):
        """
        :param pulumi.Input[_builtins.bool] not_available: The NotAvailable param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        :param pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgs'] not_within: The NotWithin param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        :param pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeWithinArgs'] within: The Within param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        if not_available is not None:
            pulumi.set(__self__, "not_available", not_available)
        if not_within is not None:
            pulumi.set(__self__, "not_within", not_within)
        if within is not None:
            pulumi.set(__self__, "within", within)

    @_builtins.property
    @pulumi.getter(name="notAvailable")
    def not_available(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The NotAvailable param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        return pulumi.get(self, "not_available")

    @not_available.setter
    def not_available(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "not_available", value)

    @_builtins.property
    @pulumi.getter(name="notWithin")
    def not_within(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgs']]:
        """
        The NotWithin param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        return pulumi.get(self, "not_within")

    @not_within.setter
    def not_within(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgs']]):
        pulumi.set(self, "not_within", value)

    @_builtins.property
    @pulumi.getter
    def within(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeWithinArgs']]:
        """
        The Within param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        return pulumi.get(self, "within")

    @within.setter
    def within(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaLastScanTimeWithinArgs']]):
        pulumi.set(self, "within", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        hours: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
elif False:
    HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaLastScanTimeNotWithinArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None,
                 hours: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        :param pulumi.Input[_builtins.int] hours: specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)

    @_builtins.property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hours", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaLastScanTimeWithinArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        hours: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
elif False:
    HipObjectAntiMalwareCriteriaLastScanTimeWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaLastScanTimeWithinArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None,
                 hours: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        :param pulumi.Input[_builtins.int] hours: specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)

    @_builtins.property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hours", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaProductVersionArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        greater_equal: NotRequired[pulumi.Input[_builtins.str]]
        """
        The GreaterEqual param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        greater_than: NotRequired[pulumi.Input[_builtins.str]]
        """
        The GreaterThan param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        less_equal: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LessEqual param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        less_than: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LessThan param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        not_within: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionNotWithinArgsDict']]
        """
        The NotWithin param. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        within: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionWithinArgsDict']]
        """
        The Within param. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
elif False:
    HipObjectAntiMalwareCriteriaProductVersionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaProductVersionArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 greater_equal: Optional[pulumi.Input[_builtins.str]] = None,
                 greater_than: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None,
                 less_equal: Optional[pulumi.Input[_builtins.str]] = None,
                 less_than: Optional[pulumi.Input[_builtins.str]] = None,
                 not_within: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionNotWithinArgs']] = None,
                 within: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionWithinArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        :param pulumi.Input[_builtins.str] greater_equal: The GreaterEqual param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        :param pulumi.Input[_builtins.str] greater_than: The GreaterThan param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        :param pulumi.Input[_builtins.str] less_equal: The LessEqual param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        :param pulumi.Input[_builtins.str] less_than: The LessThan param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        :param pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionNotWithinArgs'] not_within: The NotWithin param. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        :param pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionWithinArgs'] within: The Within param. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if greater_equal is not None:
            pulumi.set(__self__, "greater_equal", greater_equal)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)
        if less_equal is not None:
            pulumi.set(__self__, "less_equal", less_equal)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if not_within is not None:
            pulumi.set(__self__, "not_within", not_within)
        if within is not None:
            pulumi.set(__self__, "within", within)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="greaterEqual")
    def greater_equal(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GreaterEqual param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        return pulumi.get(self, "greater_equal")

    @greater_equal.setter
    def greater_equal(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "greater_equal", value)

    @_builtins.property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GreaterThan param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        return pulumi.get(self, "greater_than")

    @greater_than.setter
    def greater_than(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "greater_than", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)

    @_builtins.property
    @pulumi.getter(name="lessEqual")
    def less_equal(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LessEqual param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        return pulumi.get(self, "less_equal")

    @less_equal.setter
    def less_equal(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "less_equal", value)

    @_builtins.property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LessThan param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        return pulumi.get(self, "less_than")

    @less_than.setter
    def less_than(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "less_than", value)

    @_builtins.property
    @pulumi.getter(name="notWithin")
    def not_within(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionNotWithinArgs']]:
        """
        The NotWithin param. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        return pulumi.get(self, "not_within")

    @not_within.setter
    def not_within(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionNotWithinArgs']]):
        pulumi.set(self, "not_within", value)

    @_builtins.property
    @pulumi.getter
    def within(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionWithinArgs']]:
        """
        The Within param. Ensure that only one of the following is specified: `contains`, `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`, `not_within`, `within`
        """
        return pulumi.get(self, "within")

    @within.setter
    def within(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaProductVersionWithinArgs']]):
        pulumi.set(self, "within", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaProductVersionNotWithinArgsDict(TypedDict):
        versions: NotRequired[pulumi.Input[_builtins.int]]
        """
        versions range. Value must be between 1 and 65535. Default: `1`.
        """
elif False:
    HipObjectAntiMalwareCriteriaProductVersionNotWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaProductVersionNotWithinArgs:
    def __init__(__self__, *,
                 versions: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] versions: versions range. Value must be between 1 and 65535. Default: `1`.
        """
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        versions range. Value must be between 1 and 65535. Default: `1`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "versions", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaProductVersionWithinArgsDict(TypedDict):
        versions: NotRequired[pulumi.Input[_builtins.int]]
        """
        versions range. Value must be between 1 and 65535. Default: `1`.
        """
elif False:
    HipObjectAntiMalwareCriteriaProductVersionWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaProductVersionWithinArgs:
    def __init__(__self__, *,
                 versions: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] versions: versions range. Value must be between 1 and 65535. Default: `1`.
        """
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        versions range. Value must be between 1 and 65535. Default: `1`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "versions", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaVirdefVersionArgsDict(TypedDict):
        not_within: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgsDict']]
        """
        The NotWithin param. Ensure that only one of the following is specified: `not_within`, `within`
        """
        within: NotRequired[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionWithinArgsDict']]
        """
        The Within param. Ensure that only one of the following is specified: `not_within`, `within`
        """
elif False:
    HipObjectAntiMalwareCriteriaVirdefVersionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaVirdefVersionArgs:
    def __init__(__self__, *,
                 not_within: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgs']] = None,
                 within: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionWithinArgs']] = None):
        """
        :param pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgs'] not_within: The NotWithin param. Ensure that only one of the following is specified: `not_within`, `within`
        :param pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionWithinArgs'] within: The Within param. Ensure that only one of the following is specified: `not_within`, `within`
        """
        if not_within is not None:
            pulumi.set(__self__, "not_within", not_within)
        if within is not None:
            pulumi.set(__self__, "within", within)

    @_builtins.property
    @pulumi.getter(name="notWithin")
    def not_within(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgs']]:
        """
        The NotWithin param. Ensure that only one of the following is specified: `not_within`, `within`
        """
        return pulumi.get(self, "not_within")

    @not_within.setter
    def not_within(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgs']]):
        pulumi.set(self, "not_within", value)

    @_builtins.property
    @pulumi.getter
    def within(self) -> Optional[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionWithinArgs']]:
        """
        The Within param. Ensure that only one of the following is specified: `not_within`, `within`
        """
        return pulumi.get(self, "within")

    @within.setter
    def within(self, value: Optional[pulumi.Input['HipObjectAntiMalwareCriteriaVirdefVersionWithinArgs']]):
        pulumi.set(self, "within", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
        versions: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify versions range. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
elif False:
    HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaVirdefVersionNotWithinArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None,
                 versions: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        :param pulumi.Input[_builtins.int] versions: specify versions range. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify versions range. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "versions", value)


if not MYPY:
    class HipObjectAntiMalwareCriteriaVirdefVersionWithinArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
        versions: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify versions range. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
elif False:
    HipObjectAntiMalwareCriteriaVirdefVersionWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareCriteriaVirdefVersionWithinArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None,
                 versions: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        :param pulumi.Input[_builtins.int] versions: specify versions range. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify versions range. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `versions`
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "versions", value)


if not MYPY:
    class HipObjectAntiMalwareVendorArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param. String length must not exceed 103 characters.
        """
        products: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectAntiMalwareVendorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectAntiMalwareVendorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 products: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param. String length must not exceed 103 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] products: The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param. String length must not exceed 103 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "products", value)


if not MYPY:
    class HipObjectCertificateArgsDict(TypedDict):
        criteria: NotRequired[pulumi.Input['HipObjectCertificateCriteriaArgsDict']]
        """
        The Criteria param.
        """
elif False:
    HipObjectCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCertificateArgs:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input['HipObjectCertificateCriteriaArgs']] = None):
        """
        :param pulumi.Input['HipObjectCertificateCriteriaArgs'] criteria: The Criteria param.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input['HipObjectCertificateCriteriaArgs']]:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input['HipObjectCertificateCriteriaArgs']]):
        pulumi.set(self, "criteria", value)


if not MYPY:
    class HipObjectCertificateCriteriaArgsDict(TypedDict):
        certificate_attributes: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectCertificateCriteriaCertificateAttributeArgsDict']]]]
        """
        The CertificateAttributes param.
        """
        certificate_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Profile for authenticating client certificates.
        """
elif False:
    HipObjectCertificateCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCertificateCriteriaArgs:
    def __init__(__self__, *,
                 certificate_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCertificateCriteriaCertificateAttributeArgs']]]] = None,
                 certificate_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectCertificateCriteriaCertificateAttributeArgs']]] certificate_attributes: The CertificateAttributes param.
        :param pulumi.Input[_builtins.str] certificate_profile: Profile for authenticating client certificates.
        """
        if certificate_attributes is not None:
            pulumi.set(__self__, "certificate_attributes", certificate_attributes)
        if certificate_profile is not None:
            pulumi.set(__self__, "certificate_profile", certificate_profile)

    @_builtins.property
    @pulumi.getter(name="certificateAttributes")
    def certificate_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCertificateCriteriaCertificateAttributeArgs']]]]:
        """
        The CertificateAttributes param.
        """
        return pulumi.get(self, "certificate_attributes")

    @certificate_attributes.setter
    def certificate_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCertificateCriteriaCertificateAttributeArgs']]]]):
        pulumi.set(self, "certificate_attributes", value)

    @_builtins.property
    @pulumi.getter(name="certificateProfile")
    def certificate_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile for authenticating client certificates.
        """
        return pulumi.get(self, "certificate_profile")

    @certificate_profile.setter
    def certificate_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_profile", value)


if not MYPY:
    class HipObjectCertificateCriteriaCertificateAttributeArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Attribute Name.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Key value. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectCertificateCriteriaCertificateAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCertificateCriteriaCertificateAttributeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Attribute Name.
        :param pulumi.Input[_builtins.str] value: Key value. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Attribute Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key value. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class HipObjectCustomChecksArgsDict(TypedDict):
        criteria: pulumi.Input['HipObjectCustomChecksCriteriaArgsDict']
        """
        The Criteria param.
        """
elif False:
    HipObjectCustomChecksArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCustomChecksArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input['HipObjectCustomChecksCriteriaArgs']):
        """
        :param pulumi.Input['HipObjectCustomChecksCriteriaArgs'] criteria: The Criteria param.
        """
        pulumi.set(__self__, "criteria", criteria)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> pulumi.Input['HipObjectCustomChecksCriteriaArgs']:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input['HipObjectCustomChecksCriteriaArgs']):
        pulumi.set(self, "criteria", value)


if not MYPY:
    class HipObjectCustomChecksCriteriaArgsDict(TypedDict):
        plists: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistArgsDict']]]]
        """
        The Plist param.
        """
        process_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaProcessListArgsDict']]]]
        """
        The ProcessList param.
        """
        registry_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyArgsDict']]]]
        """
        The RegistryKeys param.
        """
elif False:
    HipObjectCustomChecksCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCustomChecksCriteriaArgs:
    def __init__(__self__, *,
                 plists: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistArgs']]]] = None,
                 process_lists: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaProcessListArgs']]]] = None,
                 registry_keys: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistArgs']]] plists: The Plist param.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaProcessListArgs']]] process_lists: The ProcessList param.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyArgs']]] registry_keys: The RegistryKeys param.
        """
        if plists is not None:
            pulumi.set(__self__, "plists", plists)
        if process_lists is not None:
            pulumi.set(__self__, "process_lists", process_lists)
        if registry_keys is not None:
            pulumi.set(__self__, "registry_keys", registry_keys)

    @_builtins.property
    @pulumi.getter
    def plists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistArgs']]]]:
        """
        The Plist param.
        """
        return pulumi.get(self, "plists")

    @plists.setter
    def plists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistArgs']]]]):
        pulumi.set(self, "plists", value)

    @_builtins.property
    @pulumi.getter(name="processLists")
    def process_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaProcessListArgs']]]]:
        """
        The ProcessList param.
        """
        return pulumi.get(self, "process_lists")

    @process_lists.setter
    def process_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaProcessListArgs']]]]):
        pulumi.set(self, "process_lists", value)

    @_builtins.property
    @pulumi.getter(name="registryKeys")
    def registry_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyArgs']]]]:
        """
        The RegistryKeys param.
        """
        return pulumi.get(self, "registry_keys")

    @registry_keys.setter
    def registry_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyArgs']]]]):
        pulumi.set(self, "registry_keys", value)


if not MYPY:
    class HipObjectCustomChecksCriteriaPlistArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Preference list. String length must not exceed 1023 characters.
        """
        keys: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistKeyArgsDict']]]]
        """
        The Keys param.
        """
        negate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Plist does not exist. Default: `false`.
        """
elif False:
    HipObjectCustomChecksCriteriaPlistArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCustomChecksCriteriaPlistArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistKeyArgs']]]] = None,
                 negate: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Preference list. String length must not exceed 1023 characters.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistKeyArgs']]] keys: The Keys param.
        :param pulumi.Input[_builtins.bool] negate: Plist does not exist. Default: `false`.
        """
        pulumi.set(__self__, "name", name)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Preference list. String length must not exceed 1023 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistKeyArgs']]]]:
        """
        The Keys param.
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaPlistKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Plist does not exist. Default: `false`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "negate", value)


if not MYPY:
    class HipObjectCustomChecksCriteriaPlistKeyArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        negate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Value does not exist or match specified value data. Default: `false`.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Key value. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectCustomChecksCriteriaPlistKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCustomChecksCriteriaPlistKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        :param pulumi.Input[_builtins.bool] negate: Value does not exist or match specified value data. Default: `false`.
        :param pulumi.Input[_builtins.str] value: Key value. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Value does not exist or match specified value data. Default: `false`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "negate", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key value. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class HipObjectCustomChecksCriteriaProcessListArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Process Name. String length must not exceed 1023 characters.
        """
        running: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Running param. Default: `true`.
        """
elif False:
    HipObjectCustomChecksCriteriaProcessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCustomChecksCriteriaProcessListArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 running: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Process Name. String length must not exceed 1023 characters.
        :param pulumi.Input[_builtins.bool] running: The Running param. Default: `true`.
        """
        pulumi.set(__self__, "name", name)
        if running is not None:
            pulumi.set(__self__, "running", running)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Process Name. String length must not exceed 1023 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Running param. Default: `true`.
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "running", value)


if not MYPY:
    class HipObjectCustomChecksCriteriaRegistryKeyArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Registry key. String length must not exceed 1023 characters.
        """
        default_value_data: NotRequired[pulumi.Input[_builtins.str]]
        """
        Registry key default value data. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        negate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Key does not exist or match specified value data. Default: `false`.
        """
        registry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgsDict']]]]
        """
        The RegistryValues param.
        """
elif False:
    HipObjectCustomChecksCriteriaRegistryKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCustomChecksCriteriaRegistryKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 default_value_data: Optional[pulumi.Input[_builtins.str]] = None,
                 negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 registry_values: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Registry key. String length must not exceed 1023 characters.
        :param pulumi.Input[_builtins.str] default_value_data: Registry key default value data. String length must not exceed 1024 characters. String validation regex: `.*`.
        :param pulumi.Input[_builtins.bool] negate: Key does not exist or match specified value data. Default: `false`.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgs']]] registry_values: The RegistryValues param.
        """
        pulumi.set(__self__, "name", name)
        if default_value_data is not None:
            pulumi.set(__self__, "default_value_data", default_value_data)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if registry_values is not None:
            pulumi.set(__self__, "registry_values", registry_values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Registry key. String length must not exceed 1023 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="defaultValueData")
    def default_value_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Registry key default value data. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "default_value_data")

    @default_value_data.setter
    def default_value_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_value_data", value)

    @_builtins.property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Key does not exist or match specified value data. Default: `false`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "negate", value)

    @_builtins.property
    @pulumi.getter(name="registryValues")
    def registry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgs']]]]:
        """
        The RegistryValues param.
        """
        return pulumi.get(self, "registry_values")

    @registry_values.setter
    def registry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgs']]]]):
        pulumi.set(self, "registry_values", value)


if not MYPY:
    class HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Registry value name. String length must not exceed 1023 characters.
        """
        negate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Value does not exist or match specified value data. Default: `false`.
        """
        value_data: NotRequired[pulumi.Input[_builtins.str]]
        """
        Registry value data. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectCustomChecksCriteriaRegistryKeyRegistryValueArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 value_data: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Registry value name. String length must not exceed 1023 characters.
        :param pulumi.Input[_builtins.bool] negate: Value does not exist or match specified value data. Default: `false`.
        :param pulumi.Input[_builtins.str] value_data: Registry value data. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if value_data is not None:
            pulumi.set(__self__, "value_data", value_data)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Registry value name. String length must not exceed 1023 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Value does not exist or match specified value data. Default: `false`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "negate", value)

    @_builtins.property
    @pulumi.getter(name="valueData")
    def value_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Registry value data. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "value_data")

    @value_data.setter
    def value_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value_data", value)


if not MYPY:
    class HipObjectDataLossPreventionArgsDict(TypedDict):
        criteria: NotRequired[pulumi.Input['HipObjectDataLossPreventionCriteriaArgsDict']]
        """
        The Criteria param.
        """
        exclude_vendor: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ExcludeVendor param. Default: `false`.
        """
        vendors: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectDataLossPreventionVendorArgsDict']]]]
        """
        Vendor name.
        """
elif False:
    HipObjectDataLossPreventionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDataLossPreventionArgs:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input['HipObjectDataLossPreventionCriteriaArgs']] = None,
                 exclude_vendor: Optional[pulumi.Input[_builtins.bool]] = None,
                 vendors: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDataLossPreventionVendorArgs']]]] = None):
        """
        :param pulumi.Input['HipObjectDataLossPreventionCriteriaArgs'] criteria: The Criteria param.
        :param pulumi.Input[_builtins.bool] exclude_vendor: The ExcludeVendor param. Default: `false`.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectDataLossPreventionVendorArgs']]] vendors: Vendor name.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if exclude_vendor is not None:
            pulumi.set(__self__, "exclude_vendor", exclude_vendor)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input['HipObjectDataLossPreventionCriteriaArgs']]:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input['HipObjectDataLossPreventionCriteriaArgs']]):
        pulumi.set(self, "criteria", value)

    @_builtins.property
    @pulumi.getter(name="excludeVendor")
    def exclude_vendor(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ExcludeVendor param. Default: `false`.
        """
        return pulumi.get(self, "exclude_vendor")

    @exclude_vendor.setter
    def exclude_vendor(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_vendor", value)

    @_builtins.property
    @pulumi.getter
    def vendors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDataLossPreventionVendorArgs']]]]:
        """
        Vendor name.
        """
        return pulumi.get(self, "vendors")

    @vendors.setter
    def vendors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDataLossPreventionVendorArgs']]]]):
        pulumi.set(self, "vendors", value)


if not MYPY:
    class HipObjectDataLossPreventionCriteriaArgsDict(TypedDict):
        is_enabled: NotRequired[pulumi.Input[_builtins.str]]
        """
        is enabled. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        """
        is_installed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Is Installed. Default: `true`.
        """
elif False:
    HipObjectDataLossPreventionCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDataLossPreventionCriteriaArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 is_installed: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] is_enabled: is enabled. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        :param pulumi.Input[_builtins.bool] is_installed: Is Installed. Default: `true`.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_installed is not None:
            pulumi.set(__self__, "is_installed", is_installed)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        is enabled. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isInstalled")
    def is_installed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Is Installed. Default: `true`.
        """
        return pulumi.get(self, "is_installed")

    @is_installed.setter
    def is_installed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_installed", value)


if not MYPY:
    class HipObjectDataLossPreventionVendorArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param. String length must not exceed 103 characters.
        """
        products: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Product name. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectDataLossPreventionVendorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDataLossPreventionVendorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 products: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param. String length must not exceed 103 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] products: Product name. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param. String length must not exceed 103 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Product name. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "products", value)


if not MYPY:
    class HipObjectDiskBackupArgsDict(TypedDict):
        criteria: NotRequired[pulumi.Input['HipObjectDiskBackupCriteriaArgsDict']]
        """
        The Criteria param.
        """
        exclude_vendor: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ExcludeVendor param. Default: `false`.
        """
        vendors: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskBackupVendorArgsDict']]]]
        """
        Vendor name.
        """
elif False:
    HipObjectDiskBackupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskBackupArgs:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input['HipObjectDiskBackupCriteriaArgs']] = None,
                 exclude_vendor: Optional[pulumi.Input[_builtins.bool]] = None,
                 vendors: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskBackupVendorArgs']]]] = None):
        """
        :param pulumi.Input['HipObjectDiskBackupCriteriaArgs'] criteria: The Criteria param.
        :param pulumi.Input[_builtins.bool] exclude_vendor: The ExcludeVendor param. Default: `false`.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectDiskBackupVendorArgs']]] vendors: Vendor name.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if exclude_vendor is not None:
            pulumi.set(__self__, "exclude_vendor", exclude_vendor)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input['HipObjectDiskBackupCriteriaArgs']]:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input['HipObjectDiskBackupCriteriaArgs']]):
        pulumi.set(self, "criteria", value)

    @_builtins.property
    @pulumi.getter(name="excludeVendor")
    def exclude_vendor(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ExcludeVendor param. Default: `false`.
        """
        return pulumi.get(self, "exclude_vendor")

    @exclude_vendor.setter
    def exclude_vendor(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_vendor", value)

    @_builtins.property
    @pulumi.getter
    def vendors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskBackupVendorArgs']]]]:
        """
        Vendor name.
        """
        return pulumi.get(self, "vendors")

    @vendors.setter
    def vendors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskBackupVendorArgs']]]]):
        pulumi.set(self, "vendors", value)


if not MYPY:
    class HipObjectDiskBackupCriteriaArgsDict(TypedDict):
        is_installed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Is Installed. Default: `true`.
        """
        last_backup_time: NotRequired[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeArgsDict']]
        """
        The LastBackupTime param.
        """
elif False:
    HipObjectDiskBackupCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskBackupCriteriaArgs:
    def __init__(__self__, *,
                 is_installed: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_backup_time: Optional[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeArgs']] = None):
        """
        :param pulumi.Input[_builtins.bool] is_installed: Is Installed. Default: `true`.
        :param pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeArgs'] last_backup_time: The LastBackupTime param.
        """
        if is_installed is not None:
            pulumi.set(__self__, "is_installed", is_installed)
        if last_backup_time is not None:
            pulumi.set(__self__, "last_backup_time", last_backup_time)

    @_builtins.property
    @pulumi.getter(name="isInstalled")
    def is_installed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Is Installed. Default: `true`.
        """
        return pulumi.get(self, "is_installed")

    @is_installed.setter
    def is_installed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_installed", value)

    @_builtins.property
    @pulumi.getter(name="lastBackupTime")
    def last_backup_time(self) -> Optional[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeArgs']]:
        """
        The LastBackupTime param.
        """
        return pulumi.get(self, "last_backup_time")

    @last_backup_time.setter
    def last_backup_time(self, value: Optional[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeArgs']]):
        pulumi.set(self, "last_backup_time", value)


if not MYPY:
    class HipObjectDiskBackupCriteriaLastBackupTimeArgsDict(TypedDict):
        not_available: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The NotAvailable param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        not_within: NotRequired[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgsDict']]
        """
        The NotWithin param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        within: NotRequired[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeWithinArgsDict']]
        """
        The Within param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
elif False:
    HipObjectDiskBackupCriteriaLastBackupTimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskBackupCriteriaLastBackupTimeArgs:
    def __init__(__self__, *,
                 not_available: Optional[pulumi.Input[_builtins.bool]] = None,
                 not_within: Optional[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgs']] = None,
                 within: Optional[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeWithinArgs']] = None):
        """
        :param pulumi.Input[_builtins.bool] not_available: The NotAvailable param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        :param pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgs'] not_within: The NotWithin param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        :param pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeWithinArgs'] within: The Within param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        if not_available is not None:
            pulumi.set(__self__, "not_available", not_available)
        if not_within is not None:
            pulumi.set(__self__, "not_within", not_within)
        if within is not None:
            pulumi.set(__self__, "within", within)

    @_builtins.property
    @pulumi.getter(name="notAvailable")
    def not_available(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The NotAvailable param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        return pulumi.get(self, "not_available")

    @not_available.setter
    def not_available(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "not_available", value)

    @_builtins.property
    @pulumi.getter(name="notWithin")
    def not_within(self) -> Optional[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgs']]:
        """
        The NotWithin param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        return pulumi.get(self, "not_within")

    @not_within.setter
    def not_within(self, value: Optional[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgs']]):
        pulumi.set(self, "not_within", value)

    @_builtins.property
    @pulumi.getter
    def within(self) -> Optional[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeWithinArgs']]:
        """
        The Within param. Ensure that only one of the following is specified: `not_available`, `not_within`, `within`
        """
        return pulumi.get(self, "within")

    @within.setter
    def within(self, value: Optional[pulumi.Input['HipObjectDiskBackupCriteriaLastBackupTimeWithinArgs']]):
        pulumi.set(self, "within", value)


if not MYPY:
    class HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        hours: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
elif False:
    HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskBackupCriteriaLastBackupTimeNotWithinArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None,
                 hours: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        :param pulumi.Input[_builtins.int] hours: specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)

    @_builtins.property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hours", value)


if not MYPY:
    class HipObjectDiskBackupCriteriaLastBackupTimeWithinArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        hours: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
elif False:
    HipObjectDiskBackupCriteriaLastBackupTimeWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskBackupCriteriaLastBackupTimeWithinArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None,
                 hours: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        :param pulumi.Input[_builtins.int] hours: specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in days. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)

    @_builtins.property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hours", value)


if not MYPY:
    class HipObjectDiskBackupVendorArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param. String length must not exceed 103 characters.
        """
        products: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectDiskBackupVendorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskBackupVendorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 products: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param. String length must not exceed 103 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] products: The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param. String length must not exceed 103 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "products", value)


if not MYPY:
    class HipObjectDiskEncryptionArgsDict(TypedDict):
        criteria: NotRequired[pulumi.Input['HipObjectDiskEncryptionCriteriaArgsDict']]
        """
        Encryption locations.
        """
        exclude_vendor: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ExcludeVendor param. Default: `false`.
        """
        vendors: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionVendorArgsDict']]]]
        """
        Vendor name.
        """
elif False:
    HipObjectDiskEncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskEncryptionArgs:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input['HipObjectDiskEncryptionCriteriaArgs']] = None,
                 exclude_vendor: Optional[pulumi.Input[_builtins.bool]] = None,
                 vendors: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionVendorArgs']]]] = None):
        """
        :param pulumi.Input['HipObjectDiskEncryptionCriteriaArgs'] criteria: Encryption locations.
        :param pulumi.Input[_builtins.bool] exclude_vendor: The ExcludeVendor param. Default: `false`.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionVendorArgs']]] vendors: Vendor name.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if exclude_vendor is not None:
            pulumi.set(__self__, "exclude_vendor", exclude_vendor)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input['HipObjectDiskEncryptionCriteriaArgs']]:
        """
        Encryption locations.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input['HipObjectDiskEncryptionCriteriaArgs']]):
        pulumi.set(self, "criteria", value)

    @_builtins.property
    @pulumi.getter(name="excludeVendor")
    def exclude_vendor(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ExcludeVendor param. Default: `false`.
        """
        return pulumi.get(self, "exclude_vendor")

    @exclude_vendor.setter
    def exclude_vendor(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_vendor", value)

    @_builtins.property
    @pulumi.getter
    def vendors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionVendorArgs']]]]:
        """
        Vendor name.
        """
        return pulumi.get(self, "vendors")

    @vendors.setter
    def vendors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionVendorArgs']]]]):
        pulumi.set(self, "vendors", value)


if not MYPY:
    class HipObjectDiskEncryptionCriteriaArgsDict(TypedDict):
        encrypted_locations: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationArgsDict']]]]
        """
        The EncryptedLocations param.
        """
        is_installed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Is Installed. Default: `true`.
        """
elif False:
    HipObjectDiskEncryptionCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskEncryptionCriteriaArgs:
    def __init__(__self__, *,
                 encrypted_locations: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationArgs']]]] = None,
                 is_installed: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationArgs']]] encrypted_locations: The EncryptedLocations param.
        :param pulumi.Input[_builtins.bool] is_installed: Is Installed. Default: `true`.
        """
        if encrypted_locations is not None:
            pulumi.set(__self__, "encrypted_locations", encrypted_locations)
        if is_installed is not None:
            pulumi.set(__self__, "is_installed", is_installed)

    @_builtins.property
    @pulumi.getter(name="encryptedLocations")
    def encrypted_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationArgs']]]]:
        """
        The EncryptedLocations param.
        """
        return pulumi.get(self, "encrypted_locations")

    @encrypted_locations.setter
    def encrypted_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationArgs']]]]):
        pulumi.set(self, "encrypted_locations", value)

    @_builtins.property
    @pulumi.getter(name="isInstalled")
    def is_installed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Is Installed. Default: `true`.
        """
        return pulumi.get(self, "is_installed")

    @is_installed.setter
    def is_installed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_installed", value)


if not MYPY:
    class HipObjectDiskEncryptionCriteriaEncryptedLocationArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Encryption location. String length must not exceed 1023 characters.
        """
        encryption_state: NotRequired[pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgsDict']]
        """
        The EncryptionState param.
        """
elif False:
    HipObjectDiskEncryptionCriteriaEncryptedLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskEncryptionCriteriaEncryptedLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 encryption_state: Optional[pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] name: Encryption location. String length must not exceed 1023 characters.
        :param pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs'] encryption_state: The EncryptionState param.
        """
        pulumi.set(__self__, "name", name)
        if encryption_state is not None:
            pulumi.set(__self__, "encryption_state", encryption_state)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Encryption location. String length must not exceed 1023 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="encryptionState")
    def encryption_state(self) -> Optional[pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs']]:
        """
        The EncryptionState param.
        """
        return pulumi.get(self, "encryption_state")

    @encryption_state.setter
    def encryption_state(self, value: Optional[pulumi.Input['HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs']]):
        pulumi.set(self, "encryption_state", value)


if not MYPY:
    class HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgsDict(TypedDict):
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String must be one of these: `"encrypted"`, `"unencrypted"`, `"partial"`, `"unknown"`. Ensure that only one of the following is specified: `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String must be one of these: `"encrypted"`, `"unencrypted"`, `"partial"`, `"unknown"`. Ensure that only one of the following is specified: `is`, `is_not`
        """
elif False:
    HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs:
    def __init__(__self__, *,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] is_: The Is param. String must be one of these: `"encrypted"`, `"unencrypted"`, `"partial"`, `"unknown"`. Ensure that only one of the following is specified: `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String must be one of these: `"encrypted"`, `"unencrypted"`, `"partial"`, `"unknown"`. Ensure that only one of the following is specified: `is`, `is_not`
        """
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String must be one of these: `"encrypted"`, `"unencrypted"`, `"partial"`, `"unknown"`. Ensure that only one of the following is specified: `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String must be one of these: `"encrypted"`, `"unencrypted"`, `"partial"`, `"unknown"`. Ensure that only one of the following is specified: `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectDiskEncryptionVendorArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param. String length must not exceed 103 characters.
        """
        products: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectDiskEncryptionVendorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectDiskEncryptionVendorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 products: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param. String length must not exceed 103 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] products: The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param. String length must not exceed 103 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "products", value)


if not MYPY:
    class HipObjectFirewallArgsDict(TypedDict):
        criteria: NotRequired[pulumi.Input['HipObjectFirewallCriteriaArgsDict']]
        """
        The Criteria param.
        """
        exclude_vendor: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ExcludeVendor param. Default: `false`.
        """
        vendors: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectFirewallVendorArgsDict']]]]
        """
        Vendor name.
        """
elif False:
    HipObjectFirewallArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectFirewallArgs:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input['HipObjectFirewallCriteriaArgs']] = None,
                 exclude_vendor: Optional[pulumi.Input[_builtins.bool]] = None,
                 vendors: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectFirewallVendorArgs']]]] = None):
        """
        :param pulumi.Input['HipObjectFirewallCriteriaArgs'] criteria: The Criteria param.
        :param pulumi.Input[_builtins.bool] exclude_vendor: The ExcludeVendor param. Default: `false`.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectFirewallVendorArgs']]] vendors: Vendor name.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if exclude_vendor is not None:
            pulumi.set(__self__, "exclude_vendor", exclude_vendor)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input['HipObjectFirewallCriteriaArgs']]:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input['HipObjectFirewallCriteriaArgs']]):
        pulumi.set(self, "criteria", value)

    @_builtins.property
    @pulumi.getter(name="excludeVendor")
    def exclude_vendor(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ExcludeVendor param. Default: `false`.
        """
        return pulumi.get(self, "exclude_vendor")

    @exclude_vendor.setter
    def exclude_vendor(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_vendor", value)

    @_builtins.property
    @pulumi.getter
    def vendors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectFirewallVendorArgs']]]]:
        """
        Vendor name.
        """
        return pulumi.get(self, "vendors")

    @vendors.setter
    def vendors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectFirewallVendorArgs']]]]):
        pulumi.set(self, "vendors", value)


if not MYPY:
    class HipObjectFirewallCriteriaArgsDict(TypedDict):
        is_enabled: NotRequired[pulumi.Input[_builtins.str]]
        """
        is enabled. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        """
        is_installed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Is Installed. Default: `true`.
        """
elif False:
    HipObjectFirewallCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectFirewallCriteriaArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 is_installed: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] is_enabled: is enabled. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        :param pulumi.Input[_builtins.bool] is_installed: Is Installed. Default: `true`.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_installed is not None:
            pulumi.set(__self__, "is_installed", is_installed)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        is enabled. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isInstalled")
    def is_installed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Is Installed. Default: `true`.
        """
        return pulumi.get(self, "is_installed")

    @is_installed.setter
    def is_installed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_installed", value)


if not MYPY:
    class HipObjectFirewallVendorArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param. String length must not exceed 103 characters.
        """
        products: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectFirewallVendorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectFirewallVendorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 products: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param. String length must not exceed 103 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] products: The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param. String length must not exceed 103 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Products param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "products", value)


if not MYPY:
    class HipObjectHostInfoArgsDict(TypedDict):
        criteria: pulumi.Input['HipObjectHostInfoCriteriaArgsDict']
        """
        The Criteria param.
        """
elif False:
    HipObjectHostInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectHostInfoArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input['HipObjectHostInfoCriteriaArgs']):
        """
        :param pulumi.Input['HipObjectHostInfoCriteriaArgs'] criteria: The Criteria param.
        """
        pulumi.set(__self__, "criteria", criteria)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> pulumi.Input['HipObjectHostInfoCriteriaArgs']:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input['HipObjectHostInfoCriteriaArgs']):
        pulumi.set(self, "criteria", value)


if not MYPY:
    class HipObjectHostInfoCriteriaArgsDict(TypedDict):
        client_version: NotRequired[pulumi.Input['HipObjectHostInfoCriteriaClientVersionArgsDict']]
        """
        The ClientVersion param.
        """
        domain: NotRequired[pulumi.Input['HipObjectHostInfoCriteriaDomainArgsDict']]
        """
        The Domain param.
        """
        host_id: NotRequired[pulumi.Input['HipObjectHostInfoCriteriaHostIdArgsDict']]
        """
        The HostId param.
        """
        host_name: NotRequired[pulumi.Input['HipObjectHostInfoCriteriaHostNameArgsDict']]
        """
        The HostName param.
        """
        managed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If device is managed.
        """
        os: NotRequired[pulumi.Input['HipObjectHostInfoCriteriaOsArgsDict']]
        """
        The Os param.
        """
        serial_number: NotRequired[pulumi.Input['HipObjectHostInfoCriteriaSerialNumberArgsDict']]
        """
        The SerialNumber param.
        """
elif False:
    HipObjectHostInfoCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectHostInfoCriteriaArgs:
    def __init__(__self__, *,
                 client_version: Optional[pulumi.Input['HipObjectHostInfoCriteriaClientVersionArgs']] = None,
                 domain: Optional[pulumi.Input['HipObjectHostInfoCriteriaDomainArgs']] = None,
                 host_id: Optional[pulumi.Input['HipObjectHostInfoCriteriaHostIdArgs']] = None,
                 host_name: Optional[pulumi.Input['HipObjectHostInfoCriteriaHostNameArgs']] = None,
                 managed: Optional[pulumi.Input[_builtins.bool]] = None,
                 os: Optional[pulumi.Input['HipObjectHostInfoCriteriaOsArgs']] = None,
                 serial_number: Optional[pulumi.Input['HipObjectHostInfoCriteriaSerialNumberArgs']] = None):
        """
        :param pulumi.Input['HipObjectHostInfoCriteriaClientVersionArgs'] client_version: The ClientVersion param.
        :param pulumi.Input['HipObjectHostInfoCriteriaDomainArgs'] domain: The Domain param.
        :param pulumi.Input['HipObjectHostInfoCriteriaHostIdArgs'] host_id: The HostId param.
        :param pulumi.Input['HipObjectHostInfoCriteriaHostNameArgs'] host_name: The HostName param.
        :param pulumi.Input[_builtins.bool] managed: If device is managed.
        :param pulumi.Input['HipObjectHostInfoCriteriaOsArgs'] os: The Os param.
        :param pulumi.Input['HipObjectHostInfoCriteriaSerialNumberArgs'] serial_number: The SerialNumber param.
        """
        if client_version is not None:
            pulumi.set(__self__, "client_version", client_version)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)

    @_builtins.property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> Optional[pulumi.Input['HipObjectHostInfoCriteriaClientVersionArgs']]:
        """
        The ClientVersion param.
        """
        return pulumi.get(self, "client_version")

    @client_version.setter
    def client_version(self, value: Optional[pulumi.Input['HipObjectHostInfoCriteriaClientVersionArgs']]):
        pulumi.set(self, "client_version", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input['HipObjectHostInfoCriteriaDomainArgs']]:
        """
        The Domain param.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input['HipObjectHostInfoCriteriaDomainArgs']]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input['HipObjectHostInfoCriteriaHostIdArgs']]:
        """
        The HostId param.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input['HipObjectHostInfoCriteriaHostIdArgs']]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input['HipObjectHostInfoCriteriaHostNameArgs']]:
        """
        The HostName param.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input['HipObjectHostInfoCriteriaHostNameArgs']]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If device is managed.
        """
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "managed", value)

    @_builtins.property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input['HipObjectHostInfoCriteriaOsArgs']]:
        """
        The Os param.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input['HipObjectHostInfoCriteriaOsArgs']]):
        pulumi.set(self, "os", value)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input['HipObjectHostInfoCriteriaSerialNumberArgs']]:
        """
        The SerialNumber param.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input['HipObjectHostInfoCriteriaSerialNumberArgs']]):
        pulumi.set(self, "serial_number", value)


if not MYPY:
    class HipObjectHostInfoCriteriaClientVersionArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
elif False:
    HipObjectHostInfoCriteriaClientVersionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectHostInfoCriteriaClientVersionArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectHostInfoCriteriaDomainArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
elif False:
    HipObjectHostInfoCriteriaDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectHostInfoCriteriaDomainArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectHostInfoCriteriaHostIdArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
elif False:
    HipObjectHostInfoCriteriaHostIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectHostInfoCriteriaHostIdArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectHostInfoCriteriaHostNameArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
elif False:
    HipObjectHostInfoCriteriaHostNameArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectHostInfoCriteriaHostNameArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectHostInfoCriteriaOsArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input['HipObjectHostInfoCriteriaOsContainsArgsDict']]
        """
        The Contains param. Ensure that only one of the following is specified: `contains`
        """
elif False:
    HipObjectHostInfoCriteriaOsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectHostInfoCriteriaOsArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input['HipObjectHostInfoCriteriaOsContainsArgs']] = None):
        """
        :param pulumi.Input['HipObjectHostInfoCriteriaOsContainsArgs'] contains: The Contains param. Ensure that only one of the following is specified: `contains`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input['HipObjectHostInfoCriteriaOsContainsArgs']]:
        """
        The Contains param. Ensure that only one of the following is specified: `contains`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input['HipObjectHostInfoCriteriaOsContainsArgs']]):
        pulumi.set(self, "contains", value)


if not MYPY:
    class HipObjectHostInfoCriteriaOsContainsArgsDict(TypedDict):
        apple: NotRequired[pulumi.Input[_builtins.str]]
        """
        Apple vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        google: NotRequired[pulumi.Input[_builtins.str]]
        """
        Google vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        linux: NotRequired[pulumi.Input[_builtins.str]]
        """
        Linux vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        microsoft: NotRequired[pulumi.Input[_builtins.str]]
        """
        Microsoft vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        other: NotRequired[pulumi.Input[_builtins.str]]
        """
        Other vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
elif False:
    HipObjectHostInfoCriteriaOsContainsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectHostInfoCriteriaOsContainsArgs:
    def __init__(__self__, *,
                 apple: Optional[pulumi.Input[_builtins.str]] = None,
                 google: Optional[pulumi.Input[_builtins.str]] = None,
                 linux: Optional[pulumi.Input[_builtins.str]] = None,
                 microsoft: Optional[pulumi.Input[_builtins.str]] = None,
                 other: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] apple: Apple vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        :param pulumi.Input[_builtins.str] google: Google vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        :param pulumi.Input[_builtins.str] linux: Linux vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        :param pulumi.Input[_builtins.str] microsoft: Microsoft vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        :param pulumi.Input[_builtins.str] other: Other vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        if apple is not None:
            pulumi.set(__self__, "apple", apple)
        if google is not None:
            pulumi.set(__self__, "google", google)
        if linux is not None:
            pulumi.set(__self__, "linux", linux)
        if microsoft is not None:
            pulumi.set(__self__, "microsoft", microsoft)
        if other is not None:
            pulumi.set(__self__, "other", other)

    @_builtins.property
    @pulumi.getter
    def apple(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Apple vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        return pulumi.get(self, "apple")

    @apple.setter
    def apple(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apple", value)

    @_builtins.property
    @pulumi.getter
    def google(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Google vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        return pulumi.get(self, "google")

    @google.setter
    def google(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google", value)

    @_builtins.property
    @pulumi.getter
    def linux(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Linux vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        return pulumi.get(self, "linux")

    @linux.setter
    def linux(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "linux", value)

    @_builtins.property
    @pulumi.getter
    def microsoft(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Microsoft vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        return pulumi.get(self, "microsoft")

    @microsoft.setter
    def microsoft(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "microsoft", value)

    @_builtins.property
    @pulumi.getter
    def other(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Other vendor. String length must not exceed 255 characters. Ensure that only one of the following is specified: `Apple`, `Google`, `Linux`, `Microsoft`, `Other`
        """
        return pulumi.get(self, "other")

    @other.setter
    def other(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "other", value)


if not MYPY:
    class HipObjectHostInfoCriteriaSerialNumberArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
elif False:
    HipObjectHostInfoCriteriaSerialNumberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectHostInfoCriteriaSerialNumberArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectMobileDeviceArgsDict(TypedDict):
        criteria: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaArgsDict']]
        """
        The Criteria param.
        """
elif False:
    HipObjectMobileDeviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceArgs:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaArgs']] = None):
        """
        :param pulumi.Input['HipObjectMobileDeviceCriteriaArgs'] criteria: The Criteria param.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaArgs']]:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaArgs']]):
        pulumi.set(self, "criteria", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaArgsDict(TypedDict):
        applications: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsArgsDict']]
        """
        The Applications param.
        """
        disk_encrypted: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If device's disk is encrypted.
        """
        imei: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaImeiArgsDict']]
        """
        The Imei param.
        """
        jailbroken: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If device is by rooted/jailbroken.
        """
        last_checkin_time: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeArgsDict']]
        """
        The LastCheckinTime param.
        """
        model: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaModelArgsDict']]
        """
        The Model param.
        """
        passcode_set: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If device's passcode is present.
        """
        phone_number: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaPhoneNumberArgsDict']]
        """
        The PhoneNumber param.
        """
        tag: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaTagArgsDict']]
        """
        The Tag param.
        """
elif False:
    HipObjectMobileDeviceCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsArgs']] = None,
                 disk_encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
                 imei: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaImeiArgs']] = None,
                 jailbroken: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_checkin_time: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeArgs']] = None,
                 model: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaModelArgs']] = None,
                 passcode_set: Optional[pulumi.Input[_builtins.bool]] = None,
                 phone_number: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaPhoneNumberArgs']] = None,
                 tag: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaTagArgs']] = None):
        """
        :param pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsArgs'] applications: The Applications param.
        :param pulumi.Input[_builtins.bool] disk_encrypted: If device's disk is encrypted.
        :param pulumi.Input['HipObjectMobileDeviceCriteriaImeiArgs'] imei: The Imei param.
        :param pulumi.Input[_builtins.bool] jailbroken: If device is by rooted/jailbroken.
        :param pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeArgs'] last_checkin_time: The LastCheckinTime param.
        :param pulumi.Input['HipObjectMobileDeviceCriteriaModelArgs'] model: The Model param.
        :param pulumi.Input[_builtins.bool] passcode_set: If device's passcode is present.
        :param pulumi.Input['HipObjectMobileDeviceCriteriaPhoneNumberArgs'] phone_number: The PhoneNumber param.
        :param pulumi.Input['HipObjectMobileDeviceCriteriaTagArgs'] tag: The Tag param.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if disk_encrypted is not None:
            pulumi.set(__self__, "disk_encrypted", disk_encrypted)
        if imei is not None:
            pulumi.set(__self__, "imei", imei)
        if jailbroken is not None:
            pulumi.set(__self__, "jailbroken", jailbroken)
        if last_checkin_time is not None:
            pulumi.set(__self__, "last_checkin_time", last_checkin_time)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if passcode_set is not None:
            pulumi.set(__self__, "passcode_set", passcode_set)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsArgs']]:
        """
        The Applications param.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsArgs']]):
        pulumi.set(self, "applications", value)

    @_builtins.property
    @pulumi.getter(name="diskEncrypted")
    def disk_encrypted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If device's disk is encrypted.
        """
        return pulumi.get(self, "disk_encrypted")

    @disk_encrypted.setter
    def disk_encrypted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disk_encrypted", value)

    @_builtins.property
    @pulumi.getter
    def imei(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaImeiArgs']]:
        """
        The Imei param.
        """
        return pulumi.get(self, "imei")

    @imei.setter
    def imei(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaImeiArgs']]):
        pulumi.set(self, "imei", value)

    @_builtins.property
    @pulumi.getter
    def jailbroken(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If device is by rooted/jailbroken.
        """
        return pulumi.get(self, "jailbroken")

    @jailbroken.setter
    def jailbroken(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "jailbroken", value)

    @_builtins.property
    @pulumi.getter(name="lastCheckinTime")
    def last_checkin_time(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeArgs']]:
        """
        The LastCheckinTime param.
        """
        return pulumi.get(self, "last_checkin_time")

    @last_checkin_time.setter
    def last_checkin_time(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeArgs']]):
        pulumi.set(self, "last_checkin_time", value)

    @_builtins.property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaModelArgs']]:
        """
        The Model param.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaModelArgs']]):
        pulumi.set(self, "model", value)

    @_builtins.property
    @pulumi.getter(name="passcodeSet")
    def passcode_set(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If device's passcode is present.
        """
        return pulumi.get(self, "passcode_set")

    @passcode_set.setter
    def passcode_set(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passcode_set", value)

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaPhoneNumberArgs']]:
        """
        The PhoneNumber param.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaPhoneNumberArgs']]):
        pulumi.set(self, "phone_number", value)

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaTagArgs']]:
        """
        The Tag param.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaTagArgs']]):
        pulumi.set(self, "tag", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaApplicationsArgsDict(TypedDict):
        has_malware: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgsDict']]
        """
        The HasMalware param.
        """
        has_unmanaged_app: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Has apps that are not managed.
        """
        includes: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsIncludeArgsDict']]]]
        """
        The Includes param.
        """
elif False:
    HipObjectMobileDeviceCriteriaApplicationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaApplicationsArgs:
    def __init__(__self__, *,
                 has_malware: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgs']] = None,
                 has_unmanaged_app: Optional[pulumi.Input[_builtins.bool]] = None,
                 includes: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsIncludeArgs']]]] = None):
        """
        :param pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgs'] has_malware: The HasMalware param.
        :param pulumi.Input[_builtins.bool] has_unmanaged_app: Has apps that are not managed.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsIncludeArgs']]] includes: The Includes param.
        """
        if has_malware is not None:
            pulumi.set(__self__, "has_malware", has_malware)
        if has_unmanaged_app is not None:
            pulumi.set(__self__, "has_unmanaged_app", has_unmanaged_app)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)

    @_builtins.property
    @pulumi.getter(name="hasMalware")
    def has_malware(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgs']]:
        """
        The HasMalware param.
        """
        return pulumi.get(self, "has_malware")

    @has_malware.setter
    def has_malware(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgs']]):
        pulumi.set(self, "has_malware", value)

    @_builtins.property
    @pulumi.getter(name="hasUnmanagedApp")
    def has_unmanaged_app(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Has apps that are not managed.
        """
        return pulumi.get(self, "has_unmanaged_app")

    @has_unmanaged_app.setter
    def has_unmanaged_app(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "has_unmanaged_app", value)

    @_builtins.property
    @pulumi.getter
    def includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsIncludeArgs']]]]:
        """
        The Includes param.
        """
        return pulumi.get(self, "includes")

    @includes.setter
    def includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsIncludeArgs']]]]):
        pulumi.set(self, "includes", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgsDict(TypedDict):
        no: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The No param. Ensure that only one of the following is specified: `no`, `yes`
        """
        yes: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgsDict']]
        """
        The Yes param. Ensure that only one of the following is specified: `no`, `yes`
        """
elif False:
    HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaApplicationsHasMalwareArgs:
    def __init__(__self__, *,
                 no: Optional[pulumi.Input[_builtins.bool]] = None,
                 yes: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgs']] = None):
        """
        :param pulumi.Input[_builtins.bool] no: The No param. Ensure that only one of the following is specified: `no`, `yes`
        :param pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgs'] yes: The Yes param. Ensure that only one of the following is specified: `no`, `yes`
        """
        if no is not None:
            pulumi.set(__self__, "no", no)
        if yes is not None:
            pulumi.set(__self__, "yes", yes)

    @_builtins.property
    @pulumi.getter
    def no(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The No param. Ensure that only one of the following is specified: `no`, `yes`
        """
        return pulumi.get(self, "no")

    @no.setter
    def no(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no", value)

    @_builtins.property
    @pulumi.getter
    def yes(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgs']]:
        """
        The Yes param. Ensure that only one of the following is specified: `no`, `yes`
        """
        return pulumi.get(self, "yes")

    @yes.setter
    def yes(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgs']]):
        pulumi.set(self, "yes", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgsDict(TypedDict):
        excludes: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgsDict']]]]
        """
        The Excludes param.
        """
elif False:
    HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesArgs:
    def __init__(__self__, *,
                 excludes: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgs']]] excludes: The Excludes param.
        """
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)

    @_builtins.property
    @pulumi.getter
    def excludes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgs']]]]:
        """
        The Excludes param.
        """
        return pulumi.get(self, "excludes")

    @excludes.setter
    def excludes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgs']]]]):
        pulumi.set(self, "excludes", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        hash: NotRequired[pulumi.Input[_builtins.str]]
        """
        application hash. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        package: NotRequired[pulumi.Input[_builtins.str]]
        """
        application package name. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaApplicationsHasMalwareYesExcludeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 hash: Optional[pulumi.Input[_builtins.str]] = None,
                 package: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        :param pulumi.Input[_builtins.str] hash: application hash. String length must not exceed 1024 characters. String validation regex: `.*`.
        :param pulumi.Input[_builtins.str] package: application package name. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if hash is not None:
            pulumi.set(__self__, "hash", hash)
        if package is not None:
            pulumi.set(__self__, "package", package)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def hash(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        application hash. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hash", value)

    @_builtins.property
    @pulumi.getter
    def package(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        application package name. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "package")

    @package.setter
    def package(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "package", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaApplicationsIncludeArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param. String length must not exceed 31 characters.
        """
        hash: NotRequired[pulumi.Input[_builtins.str]]
        """
        application hash. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        package: NotRequired[pulumi.Input[_builtins.str]]
        """
        application package name. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectMobileDeviceCriteriaApplicationsIncludeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaApplicationsIncludeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 hash: Optional[pulumi.Input[_builtins.str]] = None,
                 package: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param. String length must not exceed 31 characters.
        :param pulumi.Input[_builtins.str] hash: application hash. String length must not exceed 1024 characters. String validation regex: `.*`.
        :param pulumi.Input[_builtins.str] package: application package name. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if hash is not None:
            pulumi.set(__self__, "hash", hash)
        if package is not None:
            pulumi.set(__self__, "package", package)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def hash(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        application hash. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hash", value)

    @_builtins.property
    @pulumi.getter
    def package(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        application package name. String length must not exceed 1024 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "package")

    @package.setter
    def package(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "package", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaImeiArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
elif False:
    HipObjectMobileDeviceCriteriaImeiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaImeiArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaLastCheckinTimeArgsDict(TypedDict):
        not_within: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgsDict']]
        """
        The NotWithin param. Ensure that only one of the following is specified: `not_within`, `within`
        """
        within: NotRequired[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgsDict']]
        """
        The Within param. Ensure that only one of the following is specified: `not_within`, `within`
        """
elif False:
    HipObjectMobileDeviceCriteriaLastCheckinTimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaLastCheckinTimeArgs:
    def __init__(__self__, *,
                 not_within: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgs']] = None,
                 within: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgs']] = None):
        """
        :param pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgs'] not_within: The NotWithin param. Ensure that only one of the following is specified: `not_within`, `within`
        :param pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgs'] within: The Within param. Ensure that only one of the following is specified: `not_within`, `within`
        """
        if not_within is not None:
            pulumi.set(__self__, "not_within", not_within)
        if within is not None:
            pulumi.set(__self__, "within", within)

    @_builtins.property
    @pulumi.getter(name="notWithin")
    def not_within(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgs']]:
        """
        The NotWithin param. Ensure that only one of the following is specified: `not_within`, `within`
        """
        return pulumi.get(self, "not_within")

    @not_within.setter
    def not_within(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgs']]):
        pulumi.set(self, "not_within", value)

    @_builtins.property
    @pulumi.getter
    def within(self) -> Optional[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgs']]:
        """
        The Within param. Ensure that only one of the following is specified: `not_within`, `within`
        """
        return pulumi.get(self, "within")

    @within.setter
    def within(self, value: Optional[pulumi.Input['HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgs']]):
        pulumi.set(self, "within", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in days. Value must be between 1 and 365. Default: `30`.
        """
elif False:
    HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaLastCheckinTimeNotWithinArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify time in days. Value must be between 1 and 365. Default: `30`.
        """
        if days is not None:
            pulumi.set(__self__, "days", days)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in days. Value must be between 1 and 365. Default: `30`.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify time in days. Value must be between 1 and 365. Default: `30`.
        """
elif False:
    HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaLastCheckinTimeWithinArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify time in days. Value must be between 1 and 365. Default: `30`.
        """
        if days is not None:
            pulumi.set(__self__, "days", days)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify time in days. Value must be between 1 and 365. Default: `30`.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaModelArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
elif False:
    HipObjectMobileDeviceCriteriaModelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaModelArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaPhoneNumberArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
elif False:
    HipObjectMobileDeviceCriteriaPhoneNumberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaPhoneNumberArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectMobileDeviceCriteriaTagArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
elif False:
    HipObjectMobileDeviceCriteriaTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectMobileDeviceCriteriaTagArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[_builtins.str]] = None,
                 is_: Optional[pulumi.Input[_builtins.str]] = None,
                 is_not: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] contains: The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_: The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        :param pulumi.Input[_builtins.str] is_not: The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Contains param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contains", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Is param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IsNot param. String length must not exceed 255 characters. Ensure that only one of the following is specified: `contains`, `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectNetworkInfoArgsDict(TypedDict):
        criteria: NotRequired[pulumi.Input['HipObjectNetworkInfoCriteriaArgsDict']]
        """
        The Criteria param.
        """
elif False:
    HipObjectNetworkInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectNetworkInfoArgs:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaArgs']] = None):
        """
        :param pulumi.Input['HipObjectNetworkInfoCriteriaArgs'] criteria: The Criteria param.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input['HipObjectNetworkInfoCriteriaArgs']]:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaArgs']]):
        pulumi.set(self, "criteria", value)


if not MYPY:
    class HipObjectNetworkInfoCriteriaArgsDict(TypedDict):
        network: NotRequired[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkArgsDict']]
        """
        The Network param.
        """
elif False:
    HipObjectNetworkInfoCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectNetworkInfoCriteriaArgs:
    def __init__(__self__, *,
                 network: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkArgs']] = None):
        """
        :param pulumi.Input['HipObjectNetworkInfoCriteriaNetworkArgs'] network: The Network param.
        """
        if network is not None:
            pulumi.set(__self__, "network", network)

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkArgs']]:
        """
        The Network param.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkArgs']]):
        pulumi.set(self, "network", value)


if not MYPY:
    class HipObjectNetworkInfoCriteriaNetworkArgsDict(TypedDict):
        is_: NotRequired[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsArgsDict']]
        """
        The Is param. Ensure that only one of the following is specified: `is`, `is_not`
        """
        is_not: NotRequired[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotArgsDict']]
        """
        The IsNot param. Ensure that only one of the following is specified: `is`, `is_not`
        """
elif False:
    HipObjectNetworkInfoCriteriaNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectNetworkInfoCriteriaNetworkArgs:
    def __init__(__self__, *,
                 is_: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsArgs']] = None,
                 is_not: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotArgs']] = None):
        """
        :param pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsArgs'] is_: The Is param. Ensure that only one of the following is specified: `is`, `is_not`
        :param pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotArgs'] is_not: The IsNot param. Ensure that only one of the following is specified: `is`, `is_not`
        """
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsArgs']]:
        """
        The Is param. Ensure that only one of the following is specified: `is`, `is_not`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsArgs']]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotArgs']]:
        """
        The IsNot param. Ensure that only one of the following is specified: `is`, `is_not`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotArgs']]):
        pulumi.set(self, "is_not", value)


if not MYPY:
    class HipObjectNetworkInfoCriteriaNetworkIsArgsDict(TypedDict):
        mobile: NotRequired[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsMobileArgsDict']]
        """
        The Mobile param. Ensure that only one of the following is specified: `mobile`, `unknown`, `wifi`
        """
        unknown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Unknown param. Ensure that only one of the following is specified: `mobile`, `unknown`, `wifi`
        """
        wifi: NotRequired[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsWifiArgsDict']]
        """
        The Wifi param. Ensure that only one of the following is specified: `mobile`, `unknown`, `wifi`
        """
elif False:
    HipObjectNetworkInfoCriteriaNetworkIsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectNetworkInfoCriteriaNetworkIsArgs:
    def __init__(__self__, *,
                 mobile: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsMobileArgs']] = None,
                 unknown: Optional[pulumi.Input[_builtins.bool]] = None,
                 wifi: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsWifiArgs']] = None):
        """
        :param pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsMobileArgs'] mobile: The Mobile param. Ensure that only one of the following is specified: `mobile`, `unknown`, `wifi`
        :param pulumi.Input[_builtins.bool] unknown: The Unknown param. Ensure that only one of the following is specified: `mobile`, `unknown`, `wifi`
        :param pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsWifiArgs'] wifi: The Wifi param. Ensure that only one of the following is specified: `mobile`, `unknown`, `wifi`
        """
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if unknown is not None:
            pulumi.set(__self__, "unknown", unknown)
        if wifi is not None:
            pulumi.set(__self__, "wifi", wifi)

    @_builtins.property
    @pulumi.getter
    def mobile(self) -> Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsMobileArgs']]:
        """
        The Mobile param. Ensure that only one of the following is specified: `mobile`, `unknown`, `wifi`
        """
        return pulumi.get(self, "mobile")

    @mobile.setter
    def mobile(self, value: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsMobileArgs']]):
        pulumi.set(self, "mobile", value)

    @_builtins.property
    @pulumi.getter
    def unknown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Unknown param. Ensure that only one of the following is specified: `mobile`, `unknown`, `wifi`
        """
        return pulumi.get(self, "unknown")

    @unknown.setter
    def unknown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "unknown", value)

    @_builtins.property
    @pulumi.getter
    def wifi(self) -> Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsWifiArgs']]:
        """
        The Wifi param. Ensure that only one of the following is specified: `mobile`, `unknown`, `wifi`
        """
        return pulumi.get(self, "wifi")

    @wifi.setter
    def wifi(self, value: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsWifiArgs']]):
        pulumi.set(self, "wifi", value)


if not MYPY:
    class HipObjectNetworkInfoCriteriaNetworkIsMobileArgsDict(TypedDict):
        carrier: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Carrier param. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectNetworkInfoCriteriaNetworkIsMobileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectNetworkInfoCriteriaNetworkIsMobileArgs:
    def __init__(__self__, *,
                 carrier: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] carrier: The Carrier param. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        if carrier is not None:
            pulumi.set(__self__, "carrier", carrier)

    @_builtins.property
    @pulumi.getter
    def carrier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Carrier param. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "carrier")

    @carrier.setter
    def carrier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "carrier", value)


if not MYPY:
    class HipObjectNetworkInfoCriteriaNetworkIsNotArgsDict(TypedDict):
        ethernet: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Ethernet param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        """
        mobile: NotRequired[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgsDict']]
        """
        The Mobile param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        """
        unknown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Unknown param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        """
        wifi: NotRequired[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgsDict']]
        """
        The Wifi param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        """
elif False:
    HipObjectNetworkInfoCriteriaNetworkIsNotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectNetworkInfoCriteriaNetworkIsNotArgs:
    def __init__(__self__, *,
                 ethernet: Optional[pulumi.Input[_builtins.bool]] = None,
                 mobile: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgs']] = None,
                 unknown: Optional[pulumi.Input[_builtins.bool]] = None,
                 wifi: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgs']] = None):
        """
        :param pulumi.Input[_builtins.bool] ethernet: The Ethernet param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        :param pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgs'] mobile: The Mobile param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        :param pulumi.Input[_builtins.bool] unknown: The Unknown param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        :param pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgs'] wifi: The Wifi param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        """
        if ethernet is not None:
            pulumi.set(__self__, "ethernet", ethernet)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if unknown is not None:
            pulumi.set(__self__, "unknown", unknown)
        if wifi is not None:
            pulumi.set(__self__, "wifi", wifi)

    @_builtins.property
    @pulumi.getter
    def ethernet(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Ethernet param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        """
        return pulumi.get(self, "ethernet")

    @ethernet.setter
    def ethernet(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ethernet", value)

    @_builtins.property
    @pulumi.getter
    def mobile(self) -> Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgs']]:
        """
        The Mobile param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        """
        return pulumi.get(self, "mobile")

    @mobile.setter
    def mobile(self, value: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgs']]):
        pulumi.set(self, "mobile", value)

    @_builtins.property
    @pulumi.getter
    def unknown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Unknown param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        """
        return pulumi.get(self, "unknown")

    @unknown.setter
    def unknown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "unknown", value)

    @_builtins.property
    @pulumi.getter
    def wifi(self) -> Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgs']]:
        """
        The Wifi param. Ensure that only one of the following is specified: `ethernet`, `mobile`, `unknown`, `wifi`
        """
        return pulumi.get(self, "wifi")

    @wifi.setter
    def wifi(self, value: Optional[pulumi.Input['HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgs']]):
        pulumi.set(self, "wifi", value)


if not MYPY:
    class HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgsDict(TypedDict):
        carrier: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Carrier param. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectNetworkInfoCriteriaNetworkIsNotMobileArgs:
    def __init__(__self__, *,
                 carrier: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] carrier: The Carrier param. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        if carrier is not None:
            pulumi.set(__self__, "carrier", carrier)

    @_builtins.property
    @pulumi.getter
    def carrier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Carrier param. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "carrier")

    @carrier.setter
    def carrier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "carrier", value)


if not MYPY:
    class HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgsDict(TypedDict):
        ssid: NotRequired[pulumi.Input[_builtins.str]]
        """
        SSID. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectNetworkInfoCriteriaNetworkIsNotWifiArgs:
    def __init__(__self__, *,
                 ssid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ssid: SSID. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)

    @_builtins.property
    @pulumi.getter
    def ssid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSID. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssid", value)


if not MYPY:
    class HipObjectNetworkInfoCriteriaNetworkIsWifiArgsDict(TypedDict):
        ssid: NotRequired[pulumi.Input[_builtins.str]]
        """
        SSID. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectNetworkInfoCriteriaNetworkIsWifiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectNetworkInfoCriteriaNetworkIsWifiArgs:
    def __init__(__self__, *,
                 ssid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ssid: SSID. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)

    @_builtins.property
    @pulumi.getter
    def ssid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSID. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssid", value)


if not MYPY:
    class HipObjectPatchManagementArgsDict(TypedDict):
        criteria: NotRequired[pulumi.Input['HipObjectPatchManagementCriteriaArgsDict']]
        """
        The Criteria param.
        """
        exclude_vendor: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ExcludeVendor param. Default: `false`.
        """
        vendors: NotRequired[pulumi.Input[Sequence[pulumi.Input['HipObjectPatchManagementVendorArgsDict']]]]
        """
        Vendor name.
        """
elif False:
    HipObjectPatchManagementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectPatchManagementArgs:
    def __init__(__self__, *,
                 criteria: Optional[pulumi.Input['HipObjectPatchManagementCriteriaArgs']] = None,
                 exclude_vendor: Optional[pulumi.Input[_builtins.bool]] = None,
                 vendors: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectPatchManagementVendorArgs']]]] = None):
        """
        :param pulumi.Input['HipObjectPatchManagementCriteriaArgs'] criteria: The Criteria param.
        :param pulumi.Input[_builtins.bool] exclude_vendor: The ExcludeVendor param. Default: `false`.
        :param pulumi.Input[Sequence[pulumi.Input['HipObjectPatchManagementVendorArgs']]] vendors: Vendor name.
        """
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if exclude_vendor is not None:
            pulumi.set(__self__, "exclude_vendor", exclude_vendor)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[pulumi.Input['HipObjectPatchManagementCriteriaArgs']]:
        """
        The Criteria param.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: Optional[pulumi.Input['HipObjectPatchManagementCriteriaArgs']]):
        pulumi.set(self, "criteria", value)

    @_builtins.property
    @pulumi.getter(name="excludeVendor")
    def exclude_vendor(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ExcludeVendor param. Default: `false`.
        """
        return pulumi.get(self, "exclude_vendor")

    @exclude_vendor.setter
    def exclude_vendor(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_vendor", value)

    @_builtins.property
    @pulumi.getter
    def vendors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectPatchManagementVendorArgs']]]]:
        """
        Vendor name.
        """
        return pulumi.get(self, "vendors")

    @vendors.setter
    def vendors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HipObjectPatchManagementVendorArgs']]]]):
        pulumi.set(self, "vendors", value)


if not MYPY:
    class HipObjectPatchManagementCriteriaArgsDict(TypedDict):
        is_enabled: NotRequired[pulumi.Input[_builtins.str]]
        """
        is enabled. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        """
        is_installed: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Is Installed. Default: `true`.
        """
        missing_patches: NotRequired[pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesArgsDict']]
        """
        The MissingPatches param.
        """
elif False:
    HipObjectPatchManagementCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectPatchManagementCriteriaArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[_builtins.str]] = None,
                 is_installed: Optional[pulumi.Input[_builtins.bool]] = None,
                 missing_patches: Optional[pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] is_enabled: is enabled. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        :param pulumi.Input[_builtins.bool] is_installed: Is Installed. Default: `true`.
        :param pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesArgs'] missing_patches: The MissingPatches param.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_installed is not None:
            pulumi.set(__self__, "is_installed", is_installed)
        if missing_patches is not None:
            pulumi.set(__self__, "missing_patches", missing_patches)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        is enabled. String must be one of these: `"no"`, `"yes"`, `"not-available"`.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isInstalled")
    def is_installed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Is Installed. Default: `true`.
        """
        return pulumi.get(self, "is_installed")

    @is_installed.setter
    def is_installed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_installed", value)

    @_builtins.property
    @pulumi.getter(name="missingPatches")
    def missing_patches(self) -> Optional[pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesArgs']]:
        """
        The MissingPatches param.
        """
        return pulumi.get(self, "missing_patches")

    @missing_patches.setter
    def missing_patches(self, value: Optional[pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesArgs']]):
        pulumi.set(self, "missing_patches", value)


if not MYPY:
    class HipObjectPatchManagementCriteriaMissingPatchesArgsDict(TypedDict):
        check: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Check param. String must be one of these: `"has-any"`, `"has-none"`, `"has-all"`. Default: `"has-any"`.
        """
        patches: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Patches param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        severity: NotRequired[pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesSeverityArgsDict']]
        """
        The Severity param.
        """
elif False:
    HipObjectPatchManagementCriteriaMissingPatchesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectPatchManagementCriteriaMissingPatchesArgs:
    def __init__(__self__, *,
                 check: Optional[pulumi.Input[_builtins.str]] = None,
                 patches: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 severity: Optional[pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesSeverityArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] check: The Check param. String must be one of these: `"has-any"`, `"has-none"`, `"has-all"`. Default: `"has-any"`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] patches: The Patches param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        :param pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesSeverityArgs'] severity: The Severity param.
        """
        if check is not None:
            pulumi.set(__self__, "check", check)
        if patches is not None:
            pulumi.set(__self__, "patches", patches)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter
    def check(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Check param. String must be one of these: `"has-any"`, `"has-none"`, `"has-all"`. Default: `"has-any"`.
        """
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "check", value)

    @_builtins.property
    @pulumi.getter
    def patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Patches param. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "patches")

    @patches.setter
    def patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "patches", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesSeverityArgs']]:
        """
        The Severity param.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input['HipObjectPatchManagementCriteriaMissingPatchesSeverityArgs']]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class HipObjectPatchManagementCriteriaMissingPatchesSeverityArgsDict(TypedDict):
        greater_equal: NotRequired[pulumi.Input[_builtins.int]]
        """
        The GreaterEqual param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        greater_than: NotRequired[pulumi.Input[_builtins.int]]
        """
        The GreaterThan param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        is_: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Is param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        is_not: NotRequired[pulumi.Input[_builtins.int]]
        """
        The IsNot param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        less_equal: NotRequired[pulumi.Input[_builtins.int]]
        """
        The LessEqual param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        less_than: NotRequired[pulumi.Input[_builtins.int]]
        """
        The LessThan param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
elif False:
    HipObjectPatchManagementCriteriaMissingPatchesSeverityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectPatchManagementCriteriaMissingPatchesSeverityArgs:
    def __init__(__self__, *,
                 greater_equal: Optional[pulumi.Input[_builtins.int]] = None,
                 greater_than: Optional[pulumi.Input[_builtins.int]] = None,
                 is_: Optional[pulumi.Input[_builtins.int]] = None,
                 is_not: Optional[pulumi.Input[_builtins.int]] = None,
                 less_equal: Optional[pulumi.Input[_builtins.int]] = None,
                 less_than: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] greater_equal: The GreaterEqual param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        :param pulumi.Input[_builtins.int] greater_than: The GreaterThan param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        :param pulumi.Input[_builtins.int] is_: The Is param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        :param pulumi.Input[_builtins.int] is_not: The IsNot param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        :param pulumi.Input[_builtins.int] less_equal: The LessEqual param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        :param pulumi.Input[_builtins.int] less_than: The LessThan param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        if greater_equal is not None:
            pulumi.set(__self__, "greater_equal", greater_equal)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if is_ is not None:
            pulumi.set(__self__, "is_", is_)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)
        if less_equal is not None:
            pulumi.set(__self__, "less_equal", less_equal)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)

    @_builtins.property
    @pulumi.getter(name="greaterEqual")
    def greater_equal(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The GreaterEqual param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        return pulumi.get(self, "greater_equal")

    @greater_equal.setter
    def greater_equal(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "greater_equal", value)

    @_builtins.property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The GreaterThan param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        return pulumi.get(self, "greater_than")

    @greater_than.setter
    def greater_than(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "greater_than", value)

    @_builtins.property
    @pulumi.getter(name="is")
    def is_(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Is param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        return pulumi.get(self, "is_")

    @is_.setter
    def is_(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "is_", value)

    @_builtins.property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The IsNot param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "is_not", value)

    @_builtins.property
    @pulumi.getter(name="lessEqual")
    def less_equal(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The LessEqual param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        return pulumi.get(self, "less_equal")

    @less_equal.setter
    def less_equal(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "less_equal", value)

    @_builtins.property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The LessThan param. Value must be between 0 and 100000. Ensure that only one of the following is specified: `greater_equal`, `greater_than`, `is`, `is_not`, `less_equal`, `less_than`
        """
        return pulumi.get(self, "less_than")

    @less_than.setter
    def less_than(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "less_than", value)


if not MYPY:
    class HipObjectPatchManagementVendorArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param. String length must not exceed 103 characters.
        """
        products: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Product name. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
elif False:
    HipObjectPatchManagementVendorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HipObjectPatchManagementVendorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 products: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param. String length must not exceed 103 characters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] products: Product name. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param. String length must not exceed 103 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Product name. Individual elements in this list are subject to additional validation. String length must not exceed 1023 characters. String validation regex: `.*`.
        """
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "products", value)


if not MYPY:
    class HttpHeaderProfileHttpHeaderInsertionArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        types: pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeArgsDict']]]
        """
        The Types param.
        """
elif False:
    HttpHeaderProfileHttpHeaderInsertionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HttpHeaderProfileHttpHeaderInsertionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 types: pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeArgs']]]):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeArgs']]] types: The Types param.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "types", types)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def types(self) -> pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeArgs']]]:
        """
        The Types param.
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeArgs']]]):
        pulumi.set(self, "types", value)


if not MYPY:
    class HttpHeaderProfileHttpHeaderInsertionTypeArgsDict(TypedDict):
        domains: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        The Domains param.
        """
        headers: pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgsDict']]]
        """
        The Headers param.
        """
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
elif False:
    HttpHeaderProfileHttpHeaderInsertionTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HttpHeaderProfileHttpHeaderInsertionTypeArgs:
    def __init__(__self__, *,
                 domains: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 headers: pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgs']]],
                 name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] domains: The Domains param.
        :param pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgs']]] headers: The Headers param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        """
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def domains(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The Domains param.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "domains", value)

    @_builtins.property
    @pulumi.getter
    def headers(self) -> pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgs']]]:
        """
        The Headers param.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: pulumi.Input[Sequence[pulumi.Input['HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgs']]]):
        pulumi.set(self, "headers", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgsDict(TypedDict):
        header: pulumi.Input[_builtins.str]
        """
        The Header param.
        """
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        value: pulumi.Input[_builtins.str]
        """
        The Value param.
        """
        log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Log param. Default: `false`.
        """
elif False:
    HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HttpHeaderProfileHttpHeaderInsertionTypeHeaderArgs:
    def __init__(__self__, *,
                 header: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 log: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] header: The Header param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] value: The Value param.
        :param pulumi.Input[_builtins.bool] log: The Log param. Default: `false`.
        """
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @_builtins.property
    @pulumi.getter
    def header(self) -> pulumi.Input[_builtins.str]:
        """
        The Header param.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "header", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Log param. Default: `false`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log", value)


if not MYPY:
    class IkeCryptoProfileLifetimeArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifetime in days. Value must be between 1 and 365. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        hours: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifetime in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        minutes: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifetime in minutes. Value must be between 3 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifetime in seconds. Value must be between 180 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
elif False:
    IkeCryptoProfileLifetimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeCryptoProfileLifetimeArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None,
                 hours: Optional[pulumi.Input[_builtins.int]] = None,
                 minutes: Optional[pulumi.Input[_builtins.int]] = None,
                 seconds: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify lifetime in days. Value must be between 1 and 365. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        :param pulumi.Input[_builtins.int] hours: specify lifetime in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        :param pulumi.Input[_builtins.int] minutes: specify lifetime in minutes. Value must be between 3 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        :param pulumi.Input[_builtins.int] seconds: specify lifetime in seconds. Value must be between 180 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifetime in days. Value must be between 1 and 365. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)

    @_builtins.property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifetime in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hours", value)

    @_builtins.property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifetime in minutes. Value must be between 3 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "minutes", value)

    @_builtins.property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifetime in seconds. Value must be between 180 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class IkeGatewayAuthenticationArgsDict(TypedDict):
        certificate: NotRequired[pulumi.Input['IkeGatewayAuthenticationCertificateArgsDict']]
        """
        The Certificate param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
        """
        pre_shared_key: NotRequired[pulumi.Input['IkeGatewayAuthenticationPreSharedKeyArgsDict']]
        """
        The PreSharedKey param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
        """
elif False:
    IkeGatewayAuthenticationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayAuthenticationArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input['IkeGatewayAuthenticationCertificateArgs']] = None,
                 pre_shared_key: Optional[pulumi.Input['IkeGatewayAuthenticationPreSharedKeyArgs']] = None):
        """
        :param pulumi.Input['IkeGatewayAuthenticationCertificateArgs'] certificate: The Certificate param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
        :param pulumi.Input['IkeGatewayAuthenticationPreSharedKeyArgs'] pre_shared_key: The PreSharedKey param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input['IkeGatewayAuthenticationCertificateArgs']]:
        """
        The Certificate param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input['IkeGatewayAuthenticationCertificateArgs']]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[pulumi.Input['IkeGatewayAuthenticationPreSharedKeyArgs']]:
        """
        The PreSharedKey param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
        """
        return pulumi.get(self, "pre_shared_key")

    @pre_shared_key.setter
    def pre_shared_key(self, value: Optional[pulumi.Input['IkeGatewayAuthenticationPreSharedKeyArgs']]):
        pulumi.set(self, "pre_shared_key", value)


if not MYPY:
    class IkeGatewayAuthenticationCertificateArgsDict(TypedDict):
        allow_id_payload_mismatch: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AllowIdPayloadMismatch param.
        """
        certificate_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The CertificateProfile param.
        """
        local_certificate: NotRequired[pulumi.Input['IkeGatewayAuthenticationCertificateLocalCertificateArgsDict']]
        """
        The LocalCertificate param.
        """
        strict_validation_revocation: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The StrictValidationRevocation param.
        """
        use_management_as_source: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The UseManagementAsSource param.
        """
elif False:
    IkeGatewayAuthenticationCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayAuthenticationCertificateArgs:
    def __init__(__self__, *,
                 allow_id_payload_mismatch: Optional[pulumi.Input[_builtins.bool]] = None,
                 certificate_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 local_certificate: Optional[pulumi.Input['IkeGatewayAuthenticationCertificateLocalCertificateArgs']] = None,
                 strict_validation_revocation: Optional[pulumi.Input[_builtins.bool]] = None,
                 use_management_as_source: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] allow_id_payload_mismatch: The AllowIdPayloadMismatch param.
        :param pulumi.Input[_builtins.str] certificate_profile: The CertificateProfile param.
        :param pulumi.Input['IkeGatewayAuthenticationCertificateLocalCertificateArgs'] local_certificate: The LocalCertificate param.
        :param pulumi.Input[_builtins.bool] strict_validation_revocation: The StrictValidationRevocation param.
        :param pulumi.Input[_builtins.bool] use_management_as_source: The UseManagementAsSource param.
        """
        if allow_id_payload_mismatch is not None:
            pulumi.set(__self__, "allow_id_payload_mismatch", allow_id_payload_mismatch)
        if certificate_profile is not None:
            pulumi.set(__self__, "certificate_profile", certificate_profile)
        if local_certificate is not None:
            pulumi.set(__self__, "local_certificate", local_certificate)
        if strict_validation_revocation is not None:
            pulumi.set(__self__, "strict_validation_revocation", strict_validation_revocation)
        if use_management_as_source is not None:
            pulumi.set(__self__, "use_management_as_source", use_management_as_source)

    @_builtins.property
    @pulumi.getter(name="allowIdPayloadMismatch")
    def allow_id_payload_mismatch(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AllowIdPayloadMismatch param.
        """
        return pulumi.get(self, "allow_id_payload_mismatch")

    @allow_id_payload_mismatch.setter
    def allow_id_payload_mismatch(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_id_payload_mismatch", value)

    @_builtins.property
    @pulumi.getter(name="certificateProfile")
    def certificate_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CertificateProfile param.
        """
        return pulumi.get(self, "certificate_profile")

    @certificate_profile.setter
    def certificate_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_profile", value)

    @_builtins.property
    @pulumi.getter(name="localCertificate")
    def local_certificate(self) -> Optional[pulumi.Input['IkeGatewayAuthenticationCertificateLocalCertificateArgs']]:
        """
        The LocalCertificate param.
        """
        return pulumi.get(self, "local_certificate")

    @local_certificate.setter
    def local_certificate(self, value: Optional[pulumi.Input['IkeGatewayAuthenticationCertificateLocalCertificateArgs']]):
        pulumi.set(self, "local_certificate", value)

    @_builtins.property
    @pulumi.getter(name="strictValidationRevocation")
    def strict_validation_revocation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The StrictValidationRevocation param.
        """
        return pulumi.get(self, "strict_validation_revocation")

    @strict_validation_revocation.setter
    def strict_validation_revocation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "strict_validation_revocation", value)

    @_builtins.property
    @pulumi.getter(name="useManagementAsSource")
    def use_management_as_source(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The UseManagementAsSource param.
        """
        return pulumi.get(self, "use_management_as_source")

    @use_management_as_source.setter
    def use_management_as_source(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_management_as_source", value)


if not MYPY:
    class IkeGatewayAuthenticationCertificateLocalCertificateArgsDict(TypedDict):
        local_certificate_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LocalCertificateName param.
        """
elif False:
    IkeGatewayAuthenticationCertificateLocalCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayAuthenticationCertificateLocalCertificateArgs:
    def __init__(__self__, *,
                 local_certificate_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] local_certificate_name: The LocalCertificateName param.
        """
        if local_certificate_name is not None:
            pulumi.set(__self__, "local_certificate_name", local_certificate_name)

    @_builtins.property
    @pulumi.getter(name="localCertificateName")
    def local_certificate_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LocalCertificateName param.
        """
        return pulumi.get(self, "local_certificate_name")

    @local_certificate_name.setter
    def local_certificate_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_certificate_name", value)


if not MYPY:
    class IkeGatewayAuthenticationPreSharedKeyArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Key param.
        """
elif False:
    IkeGatewayAuthenticationPreSharedKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayAuthenticationPreSharedKeyArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key: The Key param.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Key param.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)


if not MYPY:
    class IkeGatewayLocalIdArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Local ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[a-zA-Z0-9.-]+)$|^([$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Type param.
        """
elif False:
    IkeGatewayLocalIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayLocalIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Local ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[a-zA-Z0-9.-]+)$|^([$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.
        :param pulumi.Input[_builtins.str] type: The Type param.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Local ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[a-zA-Z0-9.-]+)$|^([$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Type param.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class IkeGatewayPeerAddressArgsDict(TypedDict):
        dynamic_address: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The DynamicAddress param. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`
        """
        fqdn: NotRequired[pulumi.Input[_builtins.str]]
        """
        peer gateway FQDN name. String length must not exceed 255 characters. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`
        """
        ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        peer gateway has static IP address. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`
        """
elif False:
    IkeGatewayPeerAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayPeerAddressArgs:
    def __init__(__self__, *,
                 dynamic_address: Optional[pulumi.Input[_builtins.bool]] = None,
                 fqdn: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] dynamic_address: The DynamicAddress param. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`
        :param pulumi.Input[_builtins.str] fqdn: peer gateway FQDN name. String length must not exceed 255 characters. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`
        :param pulumi.Input[_builtins.str] ip: peer gateway has static IP address. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`
        """
        if dynamic_address is not None:
            pulumi.set(__self__, "dynamic_address", dynamic_address)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @_builtins.property
    @pulumi.getter(name="dynamicAddress")
    def dynamic_address(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The DynamicAddress param. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`
        """
        return pulumi.get(self, "dynamic_address")

    @dynamic_address.setter
    def dynamic_address(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dynamic_address", value)

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        peer gateway FQDN name. String length must not exceed 255 characters. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fqdn", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        peer gateway has static IP address. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)


if not MYPY:
    class IkeGatewayPeerIdArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Peer ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[\\*a-zA-Z0-9.-]+)$|^([\\*$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Type param. String must be one of these: `"ipaddr"`, `"keyid"`, `"fqdn"`, `"ufqdn"`.
        """
elif False:
    IkeGatewayPeerIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayPeerIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Peer ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[\\*a-zA-Z0-9.-]+)$|^([\\*$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.
        :param pulumi.Input[_builtins.str] type: The Type param. String must be one of these: `"ipaddr"`, `"keyid"`, `"fqdn"`, `"ufqdn"`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Peer ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[\\*a-zA-Z0-9.-]+)$|^([\\*$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Type param. String must be one of these: `"ipaddr"`, `"keyid"`, `"fqdn"`, `"ufqdn"`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class IkeGatewayProtocolArgsDict(TypedDict):
        ikev1: NotRequired[pulumi.Input['IkeGatewayProtocolIkev1ArgsDict']]
        """
        The Ikev1 param.
        """
        ikev2: NotRequired[pulumi.Input['IkeGatewayProtocolIkev2ArgsDict']]
        """
        The Ikev2 param.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Version param. String must be one of these: `"ikev2-preferred"`, `"ikev1"`, `"ikev2"`. Default: `"ikev2-preferred"`.
        """
elif False:
    IkeGatewayProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayProtocolArgs:
    def __init__(__self__, *,
                 ikev1: Optional[pulumi.Input['IkeGatewayProtocolIkev1Args']] = None,
                 ikev2: Optional[pulumi.Input['IkeGatewayProtocolIkev2Args']] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['IkeGatewayProtocolIkev1Args'] ikev1: The Ikev1 param.
        :param pulumi.Input['IkeGatewayProtocolIkev2Args'] ikev2: The Ikev2 param.
        :param pulumi.Input[_builtins.str] version: The Version param. String must be one of these: `"ikev2-preferred"`, `"ikev1"`, `"ikev2"`. Default: `"ikev2-preferred"`.
        """
        if ikev1 is not None:
            pulumi.set(__self__, "ikev1", ikev1)
        if ikev2 is not None:
            pulumi.set(__self__, "ikev2", ikev2)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def ikev1(self) -> Optional[pulumi.Input['IkeGatewayProtocolIkev1Args']]:
        """
        The Ikev1 param.
        """
        return pulumi.get(self, "ikev1")

    @ikev1.setter
    def ikev1(self, value: Optional[pulumi.Input['IkeGatewayProtocolIkev1Args']]):
        pulumi.set(self, "ikev1", value)

    @_builtins.property
    @pulumi.getter
    def ikev2(self) -> Optional[pulumi.Input['IkeGatewayProtocolIkev2Args']]:
        """
        The Ikev2 param.
        """
        return pulumi.get(self, "ikev2")

    @ikev2.setter
    def ikev2(self, value: Optional[pulumi.Input['IkeGatewayProtocolIkev2Args']]):
        pulumi.set(self, "ikev2", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Version param. String must be one of these: `"ikev2-preferred"`, `"ikev1"`, `"ikev2"`. Default: `"ikev2-preferred"`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class IkeGatewayProtocolCommonArgsDict(TypedDict):
        fragmentation: NotRequired[pulumi.Input['IkeGatewayProtocolCommonFragmentationArgsDict']]
        """
        The Fragmentation param.
        """
        nat_traversal: NotRequired[pulumi.Input['IkeGatewayProtocolCommonNatTraversalArgsDict']]
        """
        The NatTraversal param.
        """
        passive_mode: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The PassiveMode param.
        """
elif False:
    IkeGatewayProtocolCommonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayProtocolCommonArgs:
    def __init__(__self__, *,
                 fragmentation: Optional[pulumi.Input['IkeGatewayProtocolCommonFragmentationArgs']] = None,
                 nat_traversal: Optional[pulumi.Input['IkeGatewayProtocolCommonNatTraversalArgs']] = None,
                 passive_mode: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input['IkeGatewayProtocolCommonFragmentationArgs'] fragmentation: The Fragmentation param.
        :param pulumi.Input['IkeGatewayProtocolCommonNatTraversalArgs'] nat_traversal: The NatTraversal param.
        :param pulumi.Input[_builtins.bool] passive_mode: The PassiveMode param.
        """
        if fragmentation is not None:
            pulumi.set(__self__, "fragmentation", fragmentation)
        if nat_traversal is not None:
            pulumi.set(__self__, "nat_traversal", nat_traversal)
        if passive_mode is not None:
            pulumi.set(__self__, "passive_mode", passive_mode)

    @_builtins.property
    @pulumi.getter
    def fragmentation(self) -> Optional[pulumi.Input['IkeGatewayProtocolCommonFragmentationArgs']]:
        """
        The Fragmentation param.
        """
        return pulumi.get(self, "fragmentation")

    @fragmentation.setter
    def fragmentation(self, value: Optional[pulumi.Input['IkeGatewayProtocolCommonFragmentationArgs']]):
        pulumi.set(self, "fragmentation", value)

    @_builtins.property
    @pulumi.getter(name="natTraversal")
    def nat_traversal(self) -> Optional[pulumi.Input['IkeGatewayProtocolCommonNatTraversalArgs']]:
        """
        The NatTraversal param.
        """
        return pulumi.get(self, "nat_traversal")

    @nat_traversal.setter
    def nat_traversal(self, value: Optional[pulumi.Input['IkeGatewayProtocolCommonNatTraversalArgs']]):
        pulumi.set(self, "nat_traversal", value)

    @_builtins.property
    @pulumi.getter(name="passiveMode")
    def passive_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The PassiveMode param.
        """
        return pulumi.get(self, "passive_mode")

    @passive_mode.setter
    def passive_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_mode", value)


if not MYPY:
    class IkeGatewayProtocolCommonFragmentationArgsDict(TypedDict):
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Enable param. Default: `false`.
        """
elif False:
    IkeGatewayProtocolCommonFragmentationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayProtocolCommonFragmentationArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable: The Enable param. Default: `false`.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Enable param. Default: `false`.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)


if not MYPY:
    class IkeGatewayProtocolCommonNatTraversalArgsDict(TypedDict):
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Enable param.
        """
elif False:
    IkeGatewayProtocolCommonNatTraversalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayProtocolCommonNatTraversalArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable: The Enable param.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Enable param.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)


if not MYPY:
    class IkeGatewayProtocolIkev1ArgsDict(TypedDict):
        dpd: NotRequired[pulumi.Input['IkeGatewayProtocolIkev1DpdArgsDict']]
        """
        The Dpd param.
        """
        ike_crypto_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IkeCryptoProfile param.
        """
elif False:
    IkeGatewayProtocolIkev1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayProtocolIkev1Args:
    def __init__(__self__, *,
                 dpd: Optional[pulumi.Input['IkeGatewayProtocolIkev1DpdArgs']] = None,
                 ike_crypto_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['IkeGatewayProtocolIkev1DpdArgs'] dpd: The Dpd param.
        :param pulumi.Input[_builtins.str] ike_crypto_profile: The IkeCryptoProfile param.
        """
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if ike_crypto_profile is not None:
            pulumi.set(__self__, "ike_crypto_profile", ike_crypto_profile)

    @_builtins.property
    @pulumi.getter
    def dpd(self) -> Optional[pulumi.Input['IkeGatewayProtocolIkev1DpdArgs']]:
        """
        The Dpd param.
        """
        return pulumi.get(self, "dpd")

    @dpd.setter
    def dpd(self, value: Optional[pulumi.Input['IkeGatewayProtocolIkev1DpdArgs']]):
        pulumi.set(self, "dpd", value)

    @_builtins.property
    @pulumi.getter(name="ikeCryptoProfile")
    def ike_crypto_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IkeCryptoProfile param.
        """
        return pulumi.get(self, "ike_crypto_profile")

    @ike_crypto_profile.setter
    def ike_crypto_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_crypto_profile", value)


if not MYPY:
    class IkeGatewayProtocolIkev1DpdArgsDict(TypedDict):
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Enable param.
        """
elif False:
    IkeGatewayProtocolIkev1DpdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayProtocolIkev1DpdArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable: The Enable param.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Enable param.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)


if not MYPY:
    class IkeGatewayProtocolIkev2ArgsDict(TypedDict):
        dpd: NotRequired[pulumi.Input['IkeGatewayProtocolIkev2DpdArgsDict']]
        """
        The Dpd param.
        """
        ike_crypto_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IkeCryptoProfile param.
        """
elif False:
    IkeGatewayProtocolIkev2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayProtocolIkev2Args:
    def __init__(__self__, *,
                 dpd: Optional[pulumi.Input['IkeGatewayProtocolIkev2DpdArgs']] = None,
                 ike_crypto_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['IkeGatewayProtocolIkev2DpdArgs'] dpd: The Dpd param.
        :param pulumi.Input[_builtins.str] ike_crypto_profile: The IkeCryptoProfile param.
        """
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if ike_crypto_profile is not None:
            pulumi.set(__self__, "ike_crypto_profile", ike_crypto_profile)

    @_builtins.property
    @pulumi.getter
    def dpd(self) -> Optional[pulumi.Input['IkeGatewayProtocolIkev2DpdArgs']]:
        """
        The Dpd param.
        """
        return pulumi.get(self, "dpd")

    @dpd.setter
    def dpd(self, value: Optional[pulumi.Input['IkeGatewayProtocolIkev2DpdArgs']]):
        pulumi.set(self, "dpd", value)

    @_builtins.property
    @pulumi.getter(name="ikeCryptoProfile")
    def ike_crypto_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IkeCryptoProfile param.
        """
        return pulumi.get(self, "ike_crypto_profile")

    @ike_crypto_profile.setter
    def ike_crypto_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_crypto_profile", value)


if not MYPY:
    class IkeGatewayProtocolIkev2DpdArgsDict(TypedDict):
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Enable param.
        """
elif False:
    IkeGatewayProtocolIkev2DpdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IkeGatewayProtocolIkev2DpdArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable: The Enable param.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Enable param.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)


if not MYPY:
    class IpsecCryptoProfileAhArgsDict(TypedDict):
        authentications: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        The Authentications param. Individual elements in this list are subject to additional validation. String must be one of these: `"md5"`, `"sha1"`, `"sha256"`, `"sha384"`, `"sha512"`.
        """
elif False:
    IpsecCryptoProfileAhArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecCryptoProfileAhArgs:
    def __init__(__self__, *,
                 authentications: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] authentications: The Authentications param. Individual elements in this list are subject to additional validation. String must be one of these: `"md5"`, `"sha1"`, `"sha256"`, `"sha384"`, `"sha512"`.
        """
        pulumi.set(__self__, "authentications", authentications)

    @_builtins.property
    @pulumi.getter
    def authentications(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The Authentications param. Individual elements in this list are subject to additional validation. String must be one of these: `"md5"`, `"sha1"`, `"sha256"`, `"sha384"`, `"sha512"`.
        """
        return pulumi.get(self, "authentications")

    @authentications.setter
    def authentications(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "authentications", value)


if not MYPY:
    class IpsecCryptoProfileEspArgsDict(TypedDict):
        authentications: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Authentication algorithm.
        """
        encryptions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Encryption algorithm. Individual elements in this list are subject to additional validation. String must be one of these: `"des"`, `"3des"`, `"aes-128-cbc"`, `"aes-192-cbc"`, `"aes-256-cbc"`, `"aes-128-gcm"`, `"aes-256-gcm"`, `"null"`.
        """
elif False:
    IpsecCryptoProfileEspArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecCryptoProfileEspArgs:
    def __init__(__self__, *,
                 authentications: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 encryptions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] authentications: Authentication algorithm.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] encryptions: Encryption algorithm. Individual elements in this list are subject to additional validation. String must be one of these: `"des"`, `"3des"`, `"aes-128-cbc"`, `"aes-192-cbc"`, `"aes-256-cbc"`, `"aes-128-gcm"`, `"aes-256-gcm"`, `"null"`.
        """
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "encryptions", encryptions)

    @_builtins.property
    @pulumi.getter
    def authentications(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Authentication algorithm.
        """
        return pulumi.get(self, "authentications")

    @authentications.setter
    def authentications(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "authentications", value)

    @_builtins.property
    @pulumi.getter
    def encryptions(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Encryption algorithm. Individual elements in this list are subject to additional validation. String must be one of these: `"des"`, `"3des"`, `"aes-128-cbc"`, `"aes-192-cbc"`, `"aes-256-cbc"`, `"aes-128-gcm"`, `"aes-256-gcm"`, `"null"`.
        """
        return pulumi.get(self, "encryptions")

    @encryptions.setter
    def encryptions(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "encryptions", value)


if not MYPY:
    class IpsecCryptoProfileLifesizeArgsDict(TypedDict):
        gb: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifesize in gigabytes(GB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        """
        kb: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifesize in kilobytes(KB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        """
        mb: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifesize in megabytes(MB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        """
        tb: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifesize in terabytes(TB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        """
elif False:
    IpsecCryptoProfileLifesizeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecCryptoProfileLifesizeArgs:
    def __init__(__self__, *,
                 gb: Optional[pulumi.Input[_builtins.int]] = None,
                 kb: Optional[pulumi.Input[_builtins.int]] = None,
                 mb: Optional[pulumi.Input[_builtins.int]] = None,
                 tb: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] gb: specify lifesize in gigabytes(GB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        :param pulumi.Input[_builtins.int] kb: specify lifesize in kilobytes(KB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        :param pulumi.Input[_builtins.int] mb: specify lifesize in megabytes(MB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        :param pulumi.Input[_builtins.int] tb: specify lifesize in terabytes(TB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        """
        if gb is not None:
            pulumi.set(__self__, "gb", gb)
        if kb is not None:
            pulumi.set(__self__, "kb", kb)
        if mb is not None:
            pulumi.set(__self__, "mb", mb)
        if tb is not None:
            pulumi.set(__self__, "tb", tb)

    @_builtins.property
    @pulumi.getter
    def gb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifesize in gigabytes(GB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        """
        return pulumi.get(self, "gb")

    @gb.setter
    def gb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "gb", value)

    @_builtins.property
    @pulumi.getter
    def kb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifesize in kilobytes(KB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        """
        return pulumi.get(self, "kb")

    @kb.setter
    def kb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "kb", value)

    @_builtins.property
    @pulumi.getter
    def mb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifesize in megabytes(MB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        """
        return pulumi.get(self, "mb")

    @mb.setter
    def mb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mb", value)

    @_builtins.property
    @pulumi.getter
    def tb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifesize in terabytes(TB). Value must be between 1 and 65535. Ensure that only one of the following is specified: `gb`, `kb`, `mb`, `tb`
        """
        return pulumi.get(self, "tb")

    @tb.setter
    def tb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tb", value)


if not MYPY:
    class IpsecCryptoProfileLifetimeArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifetime in days. Value must be between 1 and 365. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        hours: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifetime in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        minutes: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifetime in minutes. Value must be between 3 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        specify lifetime in seconds. Value must be between 180 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
elif False:
    IpsecCryptoProfileLifetimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecCryptoProfileLifetimeArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[_builtins.int]] = None,
                 hours: Optional[pulumi.Input[_builtins.int]] = None,
                 minutes: Optional[pulumi.Input[_builtins.int]] = None,
                 seconds: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] days: specify lifetime in days. Value must be between 1 and 365. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        :param pulumi.Input[_builtins.int] hours: specify lifetime in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        :param pulumi.Input[_builtins.int] minutes: specify lifetime in minutes. Value must be between 3 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        :param pulumi.Input[_builtins.int] seconds: specify lifetime in seconds. Value must be between 180 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @_builtins.property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifetime in days. Value must be between 1 and 365. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "days", value)

    @_builtins.property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifetime in hours. Value must be between 1 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hours", value)

    @_builtins.property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifetime in minutes. Value must be between 3 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "minutes", value)

    @_builtins.property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        specify lifetime in seconds. Value must be between 180 and 65535. Ensure that only one of the following is specified: `days`, `hours`, `minutes`, `seconds`
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class IpsecTunnelAutoKeyArgsDict(TypedDict):
        ike_gateways: pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyIkeGatewayArgsDict']]]
        """
        The IkeGateways param.
        """
        ipsec_crypto_profile: pulumi.Input[_builtins.str]
        """
        The IpsecCryptoProfile param.
        """
        proxy_id_v6s: NotRequired[pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ArgsDict']]]]
        """
        IPv6 type of proxy*id values.
        """
        proxy_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdArgsDict']]]]
        """
        IPv4 type of proxy*id values.
        """
elif False:
    IpsecTunnelAutoKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyArgs:
    def __init__(__self__, *,
                 ike_gateways: pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyIkeGatewayArgs']]],
                 ipsec_crypto_profile: pulumi.Input[_builtins.str],
                 proxy_id_v6s: Optional[pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6Args']]]] = None,
                 proxy_ids: Optional[pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyIkeGatewayArgs']]] ike_gateways: The IkeGateways param.
        :param pulumi.Input[_builtins.str] ipsec_crypto_profile: The IpsecCryptoProfile param.
        :param pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6Args']]] proxy_id_v6s: IPv6 type of proxy*id values.
        :param pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdArgs']]] proxy_ids: IPv4 type of proxy*id values.
        """
        pulumi.set(__self__, "ike_gateways", ike_gateways)
        pulumi.set(__self__, "ipsec_crypto_profile", ipsec_crypto_profile)
        if proxy_id_v6s is not None:
            pulumi.set(__self__, "proxy_id_v6s", proxy_id_v6s)
        if proxy_ids is not None:
            pulumi.set(__self__, "proxy_ids", proxy_ids)

    @_builtins.property
    @pulumi.getter(name="ikeGateways")
    def ike_gateways(self) -> pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyIkeGatewayArgs']]]:
        """
        The IkeGateways param.
        """
        return pulumi.get(self, "ike_gateways")

    @ike_gateways.setter
    def ike_gateways(self, value: pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyIkeGatewayArgs']]]):
        pulumi.set(self, "ike_gateways", value)

    @_builtins.property
    @pulumi.getter(name="ipsecCryptoProfile")
    def ipsec_crypto_profile(self) -> pulumi.Input[_builtins.str]:
        """
        The IpsecCryptoProfile param.
        """
        return pulumi.get(self, "ipsec_crypto_profile")

    @ipsec_crypto_profile.setter
    def ipsec_crypto_profile(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ipsec_crypto_profile", value)

    @_builtins.property
    @pulumi.getter(name="proxyIdV6s")
    def proxy_id_v6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6Args']]]]:
        """
        IPv6 type of proxy*id values.
        """
        return pulumi.get(self, "proxy_id_v6s")

    @proxy_id_v6s.setter
    def proxy_id_v6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6Args']]]]):
        pulumi.set(self, "proxy_id_v6s", value)

    @_builtins.property
    @pulumi.getter(name="proxyIds")
    def proxy_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdArgs']]]]:
        """
        IPv4 type of proxy*id values.
        """
        return pulumi.get(self, "proxy_ids")

    @proxy_ids.setter
    def proxy_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsecTunnelAutoKeyProxyIdArgs']]]]):
        pulumi.set(self, "proxy_ids", value)


if not MYPY:
    class IpsecTunnelAutoKeyIkeGatewayArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
elif False:
    IpsecTunnelAutoKeyIkeGatewayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyIkeGatewayArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class IpsecTunnelAutoKeyProxyIdArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        local: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Local param.
        """
        protocol: NotRequired[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolArgsDict']]
        """
        The Protocol param.
        """
        remote: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Remote param.
        """
elif False:
    IpsecTunnelAutoKeyProxyIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyProxyIdArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 local: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolArgs']] = None,
                 remote: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] local: The Local param.
        :param pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolArgs'] protocol: The Protocol param.
        :param pulumi.Input[_builtins.str] remote: The Remote param.
        """
        pulumi.set(__self__, "name", name)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Local param.
        """
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolArgs']]:
        """
        The Protocol param.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolArgs']]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Remote param.
        """
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote", value)


if not MYPY:
    class IpsecTunnelAutoKeyProxyIdProtocolArgsDict(TypedDict):
        number: NotRequired[pulumi.Input[_builtins.int]]
        """
        IP protocol number. Value must be between 1 and 254. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        tcp: NotRequired[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolTcpArgsDict']]
        """
        The Tcp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        udp: NotRequired[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolUdpArgsDict']]
        """
        The Udp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
elif False:
    IpsecTunnelAutoKeyProxyIdProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyProxyIdProtocolArgs:
    def __init__(__self__, *,
                 number: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolTcpArgs']] = None,
                 udp: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolUdpArgs']] = None):
        """
        :param pulumi.Input[_builtins.int] number: IP protocol number. Value must be between 1 and 254. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        :param pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolTcpArgs'] tcp: The Tcp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        :param pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolUdpArgs'] udp: The Udp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @_builtins.property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IP protocol number. Value must be between 1 and 254. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "number", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolTcpArgs']]:
        """
        The Tcp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolUdpArgs']]:
        """
        The Udp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdProtocolUdpArgs']]):
        pulumi.set(self, "udp", value)


if not MYPY:
    class IpsecTunnelAutoKeyProxyIdProtocolTcpArgsDict(TypedDict):
        local_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        """
        remote_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
elif False:
    IpsecTunnelAutoKeyProxyIdProtocolTcpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyProxyIdProtocolTcpArgs:
    def __init__(__self__, *,
                 local_port: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] local_port: The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        :param pulumi.Input[_builtins.int] remote_port: The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
        if local_port is not None:
            pulumi.set(__self__, "local_port", local_port)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)

    @_builtins.property
    @pulumi.getter(name="localPort")
    def local_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        """
        return pulumi.get(self, "local_port")

    @local_port.setter
    def local_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_port", value)

    @_builtins.property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_port", value)


if not MYPY:
    class IpsecTunnelAutoKeyProxyIdProtocolUdpArgsDict(TypedDict):
        local_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        """
        remote_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
elif False:
    IpsecTunnelAutoKeyProxyIdProtocolUdpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyProxyIdProtocolUdpArgs:
    def __init__(__self__, *,
                 local_port: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] local_port: The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        :param pulumi.Input[_builtins.int] remote_port: The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
        if local_port is not None:
            pulumi.set(__self__, "local_port", local_port)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)

    @_builtins.property
    @pulumi.getter(name="localPort")
    def local_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        """
        return pulumi.get(self, "local_port")

    @local_port.setter
    def local_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_port", value)

    @_builtins.property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_port", value)


if not MYPY:
    class IpsecTunnelAutoKeyProxyIdV6ArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        local: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Local param.
        """
        protocol: NotRequired[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolArgsDict']]
        """
        The Protocol param.
        """
        remote: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Remote param.
        """
elif False:
    IpsecTunnelAutoKeyProxyIdV6ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyProxyIdV6Args:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 local: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolArgs']] = None,
                 remote: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] local: The Local param.
        :param pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolArgs'] protocol: The Protocol param.
        :param pulumi.Input[_builtins.str] remote: The Remote param.
        """
        pulumi.set(__self__, "name", name)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Local param.
        """
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolArgs']]:
        """
        The Protocol param.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolArgs']]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Remote param.
        """
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote", value)


if not MYPY:
    class IpsecTunnelAutoKeyProxyIdV6ProtocolArgsDict(TypedDict):
        number: NotRequired[pulumi.Input[_builtins.int]]
        """
        IP protocol number. Value must be between 1 and 254. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        tcp: NotRequired[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgsDict']]
        """
        The Tcp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        udp: NotRequired[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgsDict']]
        """
        The Udp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
elif False:
    IpsecTunnelAutoKeyProxyIdV6ProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyProxyIdV6ProtocolArgs:
    def __init__(__self__, *,
                 number: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgs']] = None,
                 udp: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgs']] = None):
        """
        :param pulumi.Input[_builtins.int] number: IP protocol number. Value must be between 1 and 254. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        :param pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgs'] tcp: The Tcp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        :param pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgs'] udp: The Udp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @_builtins.property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IP protocol number. Value must be between 1 and 254. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "number", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgs']]:
        """
        The Tcp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgs']]:
        """
        The Udp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`
        """
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgs']]):
        pulumi.set(self, "udp", value)


if not MYPY:
    class IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgsDict(TypedDict):
        local_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        """
        remote_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
elif False:
    IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyProxyIdV6ProtocolTcpArgs:
    def __init__(__self__, *,
                 local_port: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] local_port: The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        :param pulumi.Input[_builtins.int] remote_port: The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
        if local_port is not None:
            pulumi.set(__self__, "local_port", local_port)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)

    @_builtins.property
    @pulumi.getter(name="localPort")
    def local_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        """
        return pulumi.get(self, "local_port")

    @local_port.setter
    def local_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_port", value)

    @_builtins.property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_port", value)


if not MYPY:
    class IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgsDict(TypedDict):
        local_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        """
        remote_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
elif False:
    IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAutoKeyProxyIdV6ProtocolUdpArgs:
    def __init__(__self__, *,
                 local_port: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] local_port: The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        :param pulumi.Input[_builtins.int] remote_port: The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
        if local_port is not None:
            pulumi.set(__self__, "local_port", local_port)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)

    @_builtins.property
    @pulumi.getter(name="localPort")
    def local_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The LocalPort param. Value must be between 0 and 65535. Default: `0`.
        """
        return pulumi.get(self, "local_port")

    @local_port.setter
    def local_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_port", value)

    @_builtins.property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The RemotePort param. Value must be between 0 and 65535. Default: `0`.
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_port", value)


if not MYPY:
    class IpsecTunnelTunnelMonitorArgsDict(TypedDict):
        destination_ip: pulumi.Input[_builtins.str]
        """
        Destination IP to send ICMP probe.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable tunnel monitoring on this tunnel. Default: `true`.
        """
        proxy_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Which proxy-id (or proxy-id-v6) the monitoring traffic will use.
        """
elif False:
    IpsecTunnelTunnelMonitorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelTunnelMonitorArgs:
    def __init__(__self__, *,
                 destination_ip: pulumi.Input[_builtins.str],
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 proxy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] destination_ip: Destination IP to send ICMP probe.
        :param pulumi.Input[_builtins.bool] enable: Enable tunnel monitoring on this tunnel. Default: `true`.
        :param pulumi.Input[_builtins.str] proxy_id: Which proxy-id (or proxy-id-v6) the monitoring traffic will use.
        """
        pulumi.set(__self__, "destination_ip", destination_ip)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> pulumi.Input[_builtins.str]:
        """
        Destination IP to send ICMP probe.
        """
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_ip", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable tunnel monitoring on this tunnel. Default: `true`.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Which proxy-id (or proxy-id-v6) the monitoring traffic will use.
        """
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_id", value)


if not MYPY:
    class KerberosServerProfileServerArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Host param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Port param. Value must be between 1 and 65535.
        """
elif False:
    KerberosServerProfileServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KerberosServerProfileServerArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] host: The Host param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.int] port: The Port param. Value must be between 1 and 65535.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Host param.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Port param. Value must be between 1 and 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class LdapServerProfileServerArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Address param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Port param. Value must be between 1 and 65535.
        """
elif False:
    LdapServerProfileServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LdapServerProfileServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] address: The Address param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.int] port: The Port param. Value must be between 1 and 65535.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Address param.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Port param. Value must be between 1 and 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class MfaServerMfaVendorTypeArgsDict(TypedDict):
        duo_security_v2: NotRequired[pulumi.Input['MfaServerMfaVendorTypeDuoSecurityV2ArgsDict']]
        """
        The DuoSecurityV2 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        """
        okta_adaptive_v1: NotRequired[pulumi.Input['MfaServerMfaVendorTypeOktaAdaptiveV1ArgsDict']]
        """
        The OktaAdaptiveV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        """
        ping_identity_v1: NotRequired[pulumi.Input['MfaServerMfaVendorTypePingIdentityV1ArgsDict']]
        """
        The PingIdentityV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        """
        rsa_securid_access_v1: NotRequired[pulumi.Input['MfaServerMfaVendorTypeRsaSecuridAccessV1ArgsDict']]
        """
        The RsaSecuridAccessV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        """
elif False:
    MfaServerMfaVendorTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MfaServerMfaVendorTypeArgs:
    def __init__(__self__, *,
                 duo_security_v2: Optional[pulumi.Input['MfaServerMfaVendorTypeDuoSecurityV2Args']] = None,
                 okta_adaptive_v1: Optional[pulumi.Input['MfaServerMfaVendorTypeOktaAdaptiveV1Args']] = None,
                 ping_identity_v1: Optional[pulumi.Input['MfaServerMfaVendorTypePingIdentityV1Args']] = None,
                 rsa_securid_access_v1: Optional[pulumi.Input['MfaServerMfaVendorTypeRsaSecuridAccessV1Args']] = None):
        """
        :param pulumi.Input['MfaServerMfaVendorTypeDuoSecurityV2Args'] duo_security_v2: The DuoSecurityV2 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        :param pulumi.Input['MfaServerMfaVendorTypeOktaAdaptiveV1Args'] okta_adaptive_v1: The OktaAdaptiveV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        :param pulumi.Input['MfaServerMfaVendorTypePingIdentityV1Args'] ping_identity_v1: The PingIdentityV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        :param pulumi.Input['MfaServerMfaVendorTypeRsaSecuridAccessV1Args'] rsa_securid_access_v1: The RsaSecuridAccessV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        """
        if duo_security_v2 is not None:
            pulumi.set(__self__, "duo_security_v2", duo_security_v2)
        if okta_adaptive_v1 is not None:
            pulumi.set(__self__, "okta_adaptive_v1", okta_adaptive_v1)
        if ping_identity_v1 is not None:
            pulumi.set(__self__, "ping_identity_v1", ping_identity_v1)
        if rsa_securid_access_v1 is not None:
            pulumi.set(__self__, "rsa_securid_access_v1", rsa_securid_access_v1)

    @_builtins.property
    @pulumi.getter(name="duoSecurityV2")
    def duo_security_v2(self) -> Optional[pulumi.Input['MfaServerMfaVendorTypeDuoSecurityV2Args']]:
        """
        The DuoSecurityV2 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        """
        return pulumi.get(self, "duo_security_v2")

    @duo_security_v2.setter
    def duo_security_v2(self, value: Optional[pulumi.Input['MfaServerMfaVendorTypeDuoSecurityV2Args']]):
        pulumi.set(self, "duo_security_v2", value)

    @_builtins.property
    @pulumi.getter(name="oktaAdaptiveV1")
    def okta_adaptive_v1(self) -> Optional[pulumi.Input['MfaServerMfaVendorTypeOktaAdaptiveV1Args']]:
        """
        The OktaAdaptiveV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        """
        return pulumi.get(self, "okta_adaptive_v1")

    @okta_adaptive_v1.setter
    def okta_adaptive_v1(self, value: Optional[pulumi.Input['MfaServerMfaVendorTypeOktaAdaptiveV1Args']]):
        pulumi.set(self, "okta_adaptive_v1", value)

    @_builtins.property
    @pulumi.getter(name="pingIdentityV1")
    def ping_identity_v1(self) -> Optional[pulumi.Input['MfaServerMfaVendorTypePingIdentityV1Args']]:
        """
        The PingIdentityV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        """
        return pulumi.get(self, "ping_identity_v1")

    @ping_identity_v1.setter
    def ping_identity_v1(self, value: Optional[pulumi.Input['MfaServerMfaVendorTypePingIdentityV1Args']]):
        pulumi.set(self, "ping_identity_v1", value)

    @_builtins.property
    @pulumi.getter(name="rsaSecuridAccessV1")
    def rsa_securid_access_v1(self) -> Optional[pulumi.Input['MfaServerMfaVendorTypeRsaSecuridAccessV1Args']]:
        """
        The RsaSecuridAccessV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`
        """
        return pulumi.get(self, "rsa_securid_access_v1")

    @rsa_securid_access_v1.setter
    def rsa_securid_access_v1(self, value: Optional[pulumi.Input['MfaServerMfaVendorTypeRsaSecuridAccessV1Args']]):
        pulumi.set(self, "rsa_securid_access_v1", value)


if not MYPY:
    class MfaServerMfaVendorTypeDuoSecurityV2ArgsDict(TypedDict):
        duo_api_host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DuoApiHost param.
        """
        duo_baseuri: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DuoBaseuri param.
        """
        duo_integration_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DuoIntegrationKey param.
        """
        duo_secret_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DuoSecretKey param.
        """
        duo_timeout: NotRequired[pulumi.Input[_builtins.str]]
        """
        The DuoTimeout param.
        """
elif False:
    MfaServerMfaVendorTypeDuoSecurityV2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MfaServerMfaVendorTypeDuoSecurityV2Args:
    def __init__(__self__, *,
                 duo_api_host: Optional[pulumi.Input[_builtins.str]] = None,
                 duo_baseuri: Optional[pulumi.Input[_builtins.str]] = None,
                 duo_integration_key: Optional[pulumi.Input[_builtins.str]] = None,
                 duo_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 duo_timeout: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] duo_api_host: The DuoApiHost param.
        :param pulumi.Input[_builtins.str] duo_baseuri: The DuoBaseuri param.
        :param pulumi.Input[_builtins.str] duo_integration_key: The DuoIntegrationKey param.
        :param pulumi.Input[_builtins.str] duo_secret_key: The DuoSecretKey param.
        :param pulumi.Input[_builtins.str] duo_timeout: The DuoTimeout param.
        """
        if duo_api_host is not None:
            pulumi.set(__self__, "duo_api_host", duo_api_host)
        if duo_baseuri is not None:
            pulumi.set(__self__, "duo_baseuri", duo_baseuri)
        if duo_integration_key is not None:
            pulumi.set(__self__, "duo_integration_key", duo_integration_key)
        if duo_secret_key is not None:
            pulumi.set(__self__, "duo_secret_key", duo_secret_key)
        if duo_timeout is not None:
            pulumi.set(__self__, "duo_timeout", duo_timeout)

    @_builtins.property
    @pulumi.getter(name="duoApiHost")
    def duo_api_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DuoApiHost param.
        """
        return pulumi.get(self, "duo_api_host")

    @duo_api_host.setter
    def duo_api_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duo_api_host", value)

    @_builtins.property
    @pulumi.getter(name="duoBaseuri")
    def duo_baseuri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DuoBaseuri param.
        """
        return pulumi.get(self, "duo_baseuri")

    @duo_baseuri.setter
    def duo_baseuri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duo_baseuri", value)

    @_builtins.property
    @pulumi.getter(name="duoIntegrationKey")
    def duo_integration_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DuoIntegrationKey param.
        """
        return pulumi.get(self, "duo_integration_key")

    @duo_integration_key.setter
    def duo_integration_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duo_integration_key", value)

    @_builtins.property
    @pulumi.getter(name="duoSecretKey")
    def duo_secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DuoSecretKey param.
        """
        return pulumi.get(self, "duo_secret_key")

    @duo_secret_key.setter
    def duo_secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duo_secret_key", value)

    @_builtins.property
    @pulumi.getter(name="duoTimeout")
    def duo_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DuoTimeout param.
        """
        return pulumi.get(self, "duo_timeout")

    @duo_timeout.setter
    def duo_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duo_timeout", value)


if not MYPY:
    class MfaServerMfaVendorTypeOktaAdaptiveV1ArgsDict(TypedDict):
        okta_api_host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OktaApiHost param.
        """
        okta_baseuri: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OktaBaseuri param.
        """
        okta_org: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OktaOrg param.
        """
        okta_timeout: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OktaTimeout param.
        """
        okta_token: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OktaToken param.
        """
elif False:
    MfaServerMfaVendorTypeOktaAdaptiveV1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MfaServerMfaVendorTypeOktaAdaptiveV1Args:
    def __init__(__self__, *,
                 okta_api_host: Optional[pulumi.Input[_builtins.str]] = None,
                 okta_baseuri: Optional[pulumi.Input[_builtins.str]] = None,
                 okta_org: Optional[pulumi.Input[_builtins.str]] = None,
                 okta_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 okta_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] okta_api_host: The OktaApiHost param.
        :param pulumi.Input[_builtins.str] okta_baseuri: The OktaBaseuri param.
        :param pulumi.Input[_builtins.str] okta_org: The OktaOrg param.
        :param pulumi.Input[_builtins.str] okta_timeout: The OktaTimeout param.
        :param pulumi.Input[_builtins.str] okta_token: The OktaToken param.
        """
        if okta_api_host is not None:
            pulumi.set(__self__, "okta_api_host", okta_api_host)
        if okta_baseuri is not None:
            pulumi.set(__self__, "okta_baseuri", okta_baseuri)
        if okta_org is not None:
            pulumi.set(__self__, "okta_org", okta_org)
        if okta_timeout is not None:
            pulumi.set(__self__, "okta_timeout", okta_timeout)
        if okta_token is not None:
            pulumi.set(__self__, "okta_token", okta_token)

    @_builtins.property
    @pulumi.getter(name="oktaApiHost")
    def okta_api_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OktaApiHost param.
        """
        return pulumi.get(self, "okta_api_host")

    @okta_api_host.setter
    def okta_api_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "okta_api_host", value)

    @_builtins.property
    @pulumi.getter(name="oktaBaseuri")
    def okta_baseuri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OktaBaseuri param.
        """
        return pulumi.get(self, "okta_baseuri")

    @okta_baseuri.setter
    def okta_baseuri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "okta_baseuri", value)

    @_builtins.property
    @pulumi.getter(name="oktaOrg")
    def okta_org(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OktaOrg param.
        """
        return pulumi.get(self, "okta_org")

    @okta_org.setter
    def okta_org(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "okta_org", value)

    @_builtins.property
    @pulumi.getter(name="oktaTimeout")
    def okta_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OktaTimeout param.
        """
        return pulumi.get(self, "okta_timeout")

    @okta_timeout.setter
    def okta_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "okta_timeout", value)

    @_builtins.property
    @pulumi.getter(name="oktaToken")
    def okta_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OktaToken param.
        """
        return pulumi.get(self, "okta_token")

    @okta_token.setter
    def okta_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "okta_token", value)


if not MYPY:
    class MfaServerMfaVendorTypePingIdentityV1ArgsDict(TypedDict):
        ping_api_host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PingApiHost param.
        """
        ping_baseuri: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PingBaseuri param.
        """
        ping_org: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PingOrg param.
        """
        ping_org_alias: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PingOrgAlias param.
        """
        ping_timeout: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PingTimeout param.
        """
        ping_token: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PingToken param.
        """
elif False:
    MfaServerMfaVendorTypePingIdentityV1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MfaServerMfaVendorTypePingIdentityV1Args:
    def __init__(__self__, *,
                 ping_api_host: Optional[pulumi.Input[_builtins.str]] = None,
                 ping_baseuri: Optional[pulumi.Input[_builtins.str]] = None,
                 ping_org: Optional[pulumi.Input[_builtins.str]] = None,
                 ping_org_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 ping_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 ping_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ping_api_host: The PingApiHost param.
        :param pulumi.Input[_builtins.str] ping_baseuri: The PingBaseuri param.
        :param pulumi.Input[_builtins.str] ping_org: The PingOrg param.
        :param pulumi.Input[_builtins.str] ping_org_alias: The PingOrgAlias param.
        :param pulumi.Input[_builtins.str] ping_timeout: The PingTimeout param.
        :param pulumi.Input[_builtins.str] ping_token: The PingToken param.
        """
        if ping_api_host is not None:
            pulumi.set(__self__, "ping_api_host", ping_api_host)
        if ping_baseuri is not None:
            pulumi.set(__self__, "ping_baseuri", ping_baseuri)
        if ping_org is not None:
            pulumi.set(__self__, "ping_org", ping_org)
        if ping_org_alias is not None:
            pulumi.set(__self__, "ping_org_alias", ping_org_alias)
        if ping_timeout is not None:
            pulumi.set(__self__, "ping_timeout", ping_timeout)
        if ping_token is not None:
            pulumi.set(__self__, "ping_token", ping_token)

    @_builtins.property
    @pulumi.getter(name="pingApiHost")
    def ping_api_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PingApiHost param.
        """
        return pulumi.get(self, "ping_api_host")

    @ping_api_host.setter
    def ping_api_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ping_api_host", value)

    @_builtins.property
    @pulumi.getter(name="pingBaseuri")
    def ping_baseuri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PingBaseuri param.
        """
        return pulumi.get(self, "ping_baseuri")

    @ping_baseuri.setter
    def ping_baseuri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ping_baseuri", value)

    @_builtins.property
    @pulumi.getter(name="pingOrg")
    def ping_org(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PingOrg param.
        """
        return pulumi.get(self, "ping_org")

    @ping_org.setter
    def ping_org(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ping_org", value)

    @_builtins.property
    @pulumi.getter(name="pingOrgAlias")
    def ping_org_alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PingOrgAlias param.
        """
        return pulumi.get(self, "ping_org_alias")

    @ping_org_alias.setter
    def ping_org_alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ping_org_alias", value)

    @_builtins.property
    @pulumi.getter(name="pingTimeout")
    def ping_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PingTimeout param.
        """
        return pulumi.get(self, "ping_timeout")

    @ping_timeout.setter
    def ping_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ping_timeout", value)

    @_builtins.property
    @pulumi.getter(name="pingToken")
    def ping_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PingToken param.
        """
        return pulumi.get(self, "ping_token")

    @ping_token.setter
    def ping_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ping_token", value)


if not MYPY:
    class MfaServerMfaVendorTypeRsaSecuridAccessV1ArgsDict(TypedDict):
        rsa_accessid: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RsaAccessid param.
        """
        rsa_accesskey: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RsaAccesskey param.
        """
        rsa_api_host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RsaApiHost param.
        """
        rsa_assurancepolicyid: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RsaAssurancepolicyid param.
        """
        rsa_baseuri: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RsaBaseuri param.
        """
        rsa_timeout: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RsaTimeout param.
        """
elif False:
    MfaServerMfaVendorTypeRsaSecuridAccessV1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MfaServerMfaVendorTypeRsaSecuridAccessV1Args:
    def __init__(__self__, *,
                 rsa_accessid: Optional[pulumi.Input[_builtins.str]] = None,
                 rsa_accesskey: Optional[pulumi.Input[_builtins.str]] = None,
                 rsa_api_host: Optional[pulumi.Input[_builtins.str]] = None,
                 rsa_assurancepolicyid: Optional[pulumi.Input[_builtins.str]] = None,
                 rsa_baseuri: Optional[pulumi.Input[_builtins.str]] = None,
                 rsa_timeout: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] rsa_accessid: The RsaAccessid param.
        :param pulumi.Input[_builtins.str] rsa_accesskey: The RsaAccesskey param.
        :param pulumi.Input[_builtins.str] rsa_api_host: The RsaApiHost param.
        :param pulumi.Input[_builtins.str] rsa_assurancepolicyid: The RsaAssurancepolicyid param.
        :param pulumi.Input[_builtins.str] rsa_baseuri: The RsaBaseuri param.
        :param pulumi.Input[_builtins.str] rsa_timeout: The RsaTimeout param.
        """
        if rsa_accessid is not None:
            pulumi.set(__self__, "rsa_accessid", rsa_accessid)
        if rsa_accesskey is not None:
            pulumi.set(__self__, "rsa_accesskey", rsa_accesskey)
        if rsa_api_host is not None:
            pulumi.set(__self__, "rsa_api_host", rsa_api_host)
        if rsa_assurancepolicyid is not None:
            pulumi.set(__self__, "rsa_assurancepolicyid", rsa_assurancepolicyid)
        if rsa_baseuri is not None:
            pulumi.set(__self__, "rsa_baseuri", rsa_baseuri)
        if rsa_timeout is not None:
            pulumi.set(__self__, "rsa_timeout", rsa_timeout)

    @_builtins.property
    @pulumi.getter(name="rsaAccessid")
    def rsa_accessid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RsaAccessid param.
        """
        return pulumi.get(self, "rsa_accessid")

    @rsa_accessid.setter
    def rsa_accessid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rsa_accessid", value)

    @_builtins.property
    @pulumi.getter(name="rsaAccesskey")
    def rsa_accesskey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RsaAccesskey param.
        """
        return pulumi.get(self, "rsa_accesskey")

    @rsa_accesskey.setter
    def rsa_accesskey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rsa_accesskey", value)

    @_builtins.property
    @pulumi.getter(name="rsaApiHost")
    def rsa_api_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RsaApiHost param.
        """
        return pulumi.get(self, "rsa_api_host")

    @rsa_api_host.setter
    def rsa_api_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rsa_api_host", value)

    @_builtins.property
    @pulumi.getter(name="rsaAssurancepolicyid")
    def rsa_assurancepolicyid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RsaAssurancepolicyid param.
        """
        return pulumi.get(self, "rsa_assurancepolicyid")

    @rsa_assurancepolicyid.setter
    def rsa_assurancepolicyid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rsa_assurancepolicyid", value)

    @_builtins.property
    @pulumi.getter(name="rsaBaseuri")
    def rsa_baseuri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RsaBaseuri param.
        """
        return pulumi.get(self, "rsa_baseuri")

    @rsa_baseuri.setter
    def rsa_baseuri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rsa_baseuri", value)

    @_builtins.property
    @pulumi.getter(name="rsaTimeout")
    def rsa_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RsaTimeout param.
        """
        return pulumi.get(self, "rsa_timeout")

    @rsa_timeout.setter
    def rsa_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rsa_timeout", value)


if not MYPY:
    class NatRuleDestinationTranslationArgsDict(TypedDict):
        translated_address_single: pulumi.Input[_builtins.str]
        """
        The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.
        """
        dns_rewrite: NotRequired[pulumi.Input['NatRuleDestinationTranslationDnsRewriteArgsDict']]
        """
        The DnsRewrite param.
        """
        translated_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The TranslatedPort param.
        """
elif False:
    NatRuleDestinationTranslationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NatRuleDestinationTranslationArgs:
    def __init__(__self__, *,
                 translated_address_single: pulumi.Input[_builtins.str],
                 dns_rewrite: Optional[pulumi.Input['NatRuleDestinationTranslationDnsRewriteArgs']] = None,
                 translated_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] translated_address_single: The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.
        :param pulumi.Input['NatRuleDestinationTranslationDnsRewriteArgs'] dns_rewrite: The DnsRewrite param.
        :param pulumi.Input[_builtins.int] translated_port: The TranslatedPort param.
        """
        pulumi.set(__self__, "translated_address_single", translated_address_single)
        if dns_rewrite is not None:
            pulumi.set(__self__, "dns_rewrite", dns_rewrite)
        if translated_port is not None:
            pulumi.set(__self__, "translated_port", translated_port)

    @_builtins.property
    @pulumi.getter(name="translatedAddressSingle")
    def translated_address_single(self) -> pulumi.Input[_builtins.str]:
        """
        The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.
        """
        return pulumi.get(self, "translated_address_single")

    @translated_address_single.setter
    def translated_address_single(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "translated_address_single", value)

    @_builtins.property
    @pulumi.getter(name="dnsRewrite")
    def dns_rewrite(self) -> Optional[pulumi.Input['NatRuleDestinationTranslationDnsRewriteArgs']]:
        """
        The DnsRewrite param.
        """
        return pulumi.get(self, "dns_rewrite")

    @dns_rewrite.setter
    def dns_rewrite(self, value: Optional[pulumi.Input['NatRuleDestinationTranslationDnsRewriteArgs']]):
        pulumi.set(self, "dns_rewrite", value)

    @_builtins.property
    @pulumi.getter(name="translatedPort")
    def translated_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The TranslatedPort param.
        """
        return pulumi.get(self, "translated_port")

    @translated_port.setter
    def translated_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "translated_port", value)


if not MYPY:
    class NatRuleDestinationTranslationDnsRewriteArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Direction param. String must be one of these: `"reverse"`, `"forward"`. Default: `"reverse"`.
        """
elif False:
    NatRuleDestinationTranslationDnsRewriteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NatRuleDestinationTranslationDnsRewriteArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: The Direction param. String must be one of these: `"reverse"`, `"forward"`. Default: `"reverse"`.
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Direction param. String must be one of these: `"reverse"`, `"forward"`. Default: `"reverse"`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)


if not MYPY:
    class NatRuleDynamicDestinationTranslationArgsDict(TypedDict):
        translated_address_single: pulumi.Input[_builtins.str]
        """
        The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.
        """
        distribution: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Distribution param. String must be one of these: `"round-robin"`, `"source-ip-hash"`, `"ip-modulo"`, `"ip-hash"`, `"least-sessions"`. Default: `"round-robin"`.
        """
        translated_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The TranslatedPort param.
        """
elif False:
    NatRuleDynamicDestinationTranslationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NatRuleDynamicDestinationTranslationArgs:
    def __init__(__self__, *,
                 translated_address_single: pulumi.Input[_builtins.str],
                 distribution: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] translated_address_single: The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.
        :param pulumi.Input[_builtins.str] distribution: The Distribution param. String must be one of these: `"round-robin"`, `"source-ip-hash"`, `"ip-modulo"`, `"ip-hash"`, `"least-sessions"`. Default: `"round-robin"`.
        :param pulumi.Input[_builtins.int] translated_port: The TranslatedPort param.
        """
        pulumi.set(__self__, "translated_address_single", translated_address_single)
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if translated_port is not None:
            pulumi.set(__self__, "translated_port", translated_port)

    @_builtins.property
    @pulumi.getter(name="translatedAddressSingle")
    def translated_address_single(self) -> pulumi.Input[_builtins.str]:
        """
        The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.
        """
        return pulumi.get(self, "translated_address_single")

    @translated_address_single.setter
    def translated_address_single(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "translated_address_single", value)

    @_builtins.property
    @pulumi.getter
    def distribution(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Distribution param. String must be one of these: `"round-robin"`, `"source-ip-hash"`, `"ip-modulo"`, `"ip-hash"`, `"least-sessions"`. Default: `"round-robin"`.
        """
        return pulumi.get(self, "distribution")

    @distribution.setter
    def distribution(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distribution", value)

    @_builtins.property
    @pulumi.getter(name="translatedPort")
    def translated_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The TranslatedPort param.
        """
        return pulumi.get(self, "translated_port")

    @translated_port.setter
    def translated_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "translated_port", value)


if not MYPY:
    class NatRuleSourceTranslationArgsDict(TypedDict):
        bi_directional: NotRequired[pulumi.Input[_builtins.str]]
        """
        The BiDirectional param. String must be one of these: `"yes"`, `"no"`.
        """
        fallback: NotRequired[pulumi.Input['NatRuleSourceTranslationFallbackArgsDict']]
        """
        The Fallback param.
        """
        translated_address_arrays: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The TranslatedAddressArray param. Ensure that only one of the following is specified: `translated_address_array`, `translated_address_single`
        """
        translated_address_single: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TranslatedAddressSingle param. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`. Ensure that only one of the following is specified: `translated_address_array`, `translated_address_single`
        """
elif False:
    NatRuleSourceTranslationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NatRuleSourceTranslationArgs:
    def __init__(__self__, *,
                 bi_directional: Optional[pulumi.Input[_builtins.str]] = None,
                 fallback: Optional[pulumi.Input['NatRuleSourceTranslationFallbackArgs']] = None,
                 translated_address_arrays: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 translated_address_single: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bi_directional: The BiDirectional param. String must be one of these: `"yes"`, `"no"`.
        :param pulumi.Input['NatRuleSourceTranslationFallbackArgs'] fallback: The Fallback param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] translated_address_arrays: The TranslatedAddressArray param. Ensure that only one of the following is specified: `translated_address_array`, `translated_address_single`
        :param pulumi.Input[_builtins.str] translated_address_single: The TranslatedAddressSingle param. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`. Ensure that only one of the following is specified: `translated_address_array`, `translated_address_single`
        """
        if bi_directional is not None:
            pulumi.set(__self__, "bi_directional", bi_directional)
        if fallback is not None:
            pulumi.set(__self__, "fallback", fallback)
        if translated_address_arrays is not None:
            pulumi.set(__self__, "translated_address_arrays", translated_address_arrays)
        if translated_address_single is not None:
            pulumi.set(__self__, "translated_address_single", translated_address_single)

    @_builtins.property
    @pulumi.getter(name="biDirectional")
    def bi_directional(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The BiDirectional param. String must be one of these: `"yes"`, `"no"`.
        """
        return pulumi.get(self, "bi_directional")

    @bi_directional.setter
    def bi_directional(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bi_directional", value)

    @_builtins.property
    @pulumi.getter
    def fallback(self) -> Optional[pulumi.Input['NatRuleSourceTranslationFallbackArgs']]:
        """
        The Fallback param.
        """
        return pulumi.get(self, "fallback")

    @fallback.setter
    def fallback(self, value: Optional[pulumi.Input['NatRuleSourceTranslationFallbackArgs']]):
        pulumi.set(self, "fallback", value)

    @_builtins.property
    @pulumi.getter(name="translatedAddressArrays")
    def translated_address_arrays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The TranslatedAddressArray param. Ensure that only one of the following is specified: `translated_address_array`, `translated_address_single`
        """
        return pulumi.get(self, "translated_address_arrays")

    @translated_address_arrays.setter
    def translated_address_arrays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "translated_address_arrays", value)

    @_builtins.property
    @pulumi.getter(name="translatedAddressSingle")
    def translated_address_single(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TranslatedAddressSingle param. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`. Ensure that only one of the following is specified: `translated_address_array`, `translated_address_single`
        """
        return pulumi.get(self, "translated_address_single")

    @translated_address_single.setter
    def translated_address_single(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_address_single", value)


if not MYPY:
    class NatRuleSourceTranslationFallbackArgsDict(TypedDict):
        interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Interface param. Ensure that only one of the following is specified: `interface`
        """
elif False:
    NatRuleSourceTranslationFallbackArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NatRuleSourceTranslationFallbackArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface: The Interface param. Ensure that only one of the following is specified: `interface`
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)

    @_builtins.property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Interface param. Ensure that only one of the following is specified: `interface`
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface", value)


if not MYPY:
    class NatRuleTargetArgsDict(TypedDict):
        devices: NotRequired[pulumi.Input[Sequence[pulumi.Input['NatRuleTargetDeviceArgsDict']]]]
        """
        The Devices param.
        """
        negate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Negate param.
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Tags param.
        """
elif False:
    NatRuleTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NatRuleTargetArgs:
    def __init__(__self__, *,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['NatRuleTargetDeviceArgs']]]] = None,
                 negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NatRuleTargetDeviceArgs']]] devices: The Devices param.
        :param pulumi.Input[_builtins.bool] negate: The Negate param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The Tags param.
        """
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NatRuleTargetDeviceArgs']]]]:
        """
        The Devices param.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NatRuleTargetDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @_builtins.property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Negate param.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "negate", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Tags param.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class NatRuleTargetDeviceArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
elif False:
    NatRuleTargetDeviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NatRuleTargetDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class QosPolicyRuleActionArgsDict(TypedDict):
        class_: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Class param.
        """
elif False:
    QosPolicyRuleActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosPolicyRuleActionArgs:
    def __init__(__self__, *,
                 class_: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] class_: The Class param.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)

    @_builtins.property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Class param.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "class_", value)


if not MYPY:
    class QosPolicyRuleDscpTosArgsDict(TypedDict):
        codepoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['QosPolicyRuleDscpTosCodepointArgsDict']]]]
        """
        The Codepoints param.
        """
elif False:
    QosPolicyRuleDscpTosArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosPolicyRuleDscpTosArgs:
    def __init__(__self__, *,
                 codepoints: Optional[pulumi.Input[Sequence[pulumi.Input['QosPolicyRuleDscpTosCodepointArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['QosPolicyRuleDscpTosCodepointArgs']]] codepoints: The Codepoints param.
        """
        if codepoints is not None:
            pulumi.set(__self__, "codepoints", codepoints)

    @_builtins.property
    @pulumi.getter
    def codepoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosPolicyRuleDscpTosCodepointArgs']]]]:
        """
        The Codepoints param.
        """
        return pulumi.get(self, "codepoints")

    @codepoints.setter
    def codepoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosPolicyRuleDscpTosCodepointArgs']]]]):
        pulumi.set(self, "codepoints", value)


if not MYPY:
    class QosPolicyRuleDscpTosCodepointArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        type: NotRequired[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeArgsDict']]
        """
        The Type param.
        """
elif False:
    QosPolicyRuleDscpTosCodepointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosPolicyRuleDscpTosCodepointArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input['QosPolicyRuleDscpTosCodepointTypeArgs'] type: The Type param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeArgs']]:
        """
        The Type param.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeArgs']]):
        pulumi.set(self, "type", value)


if not MYPY:
    class QosPolicyRuleDscpTosCodepointTypeArgsDict(TypedDict):
        af: NotRequired[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeAfArgsDict']]
        """
        The Af param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        cs: NotRequired[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCsArgsDict']]
        """
        The Cs param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        custom: NotRequired[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomArgsDict']]
        """
        The Custom param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        ef: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Ef param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        tos: NotRequired[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeTosArgsDict']]
        """
        The Tos param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
elif False:
    QosPolicyRuleDscpTosCodepointTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosPolicyRuleDscpTosCodepointTypeArgs:
    def __init__(__self__, *,
                 af: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeAfArgs']] = None,
                 cs: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCsArgs']] = None,
                 custom: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomArgs']] = None,
                 ef: Optional[pulumi.Input[_builtins.bool]] = None,
                 tos: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeTosArgs']] = None):
        """
        :param pulumi.Input['QosPolicyRuleDscpTosCodepointTypeAfArgs'] af: The Af param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        :param pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCsArgs'] cs: The Cs param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        :param pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomArgs'] custom: The Custom param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        :param pulumi.Input[_builtins.bool] ef: The Ef param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        :param pulumi.Input['QosPolicyRuleDscpTosCodepointTypeTosArgs'] tos: The Tos param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        if af is not None:
            pulumi.set(__self__, "af", af)
        if cs is not None:
            pulumi.set(__self__, "cs", cs)
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if ef is not None:
            pulumi.set(__self__, "ef", ef)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)

    @_builtins.property
    @pulumi.getter
    def af(self) -> Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeAfArgs']]:
        """
        The Af param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        return pulumi.get(self, "af")

    @af.setter
    def af(self, value: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeAfArgs']]):
        pulumi.set(self, "af", value)

    @_builtins.property
    @pulumi.getter
    def cs(self) -> Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCsArgs']]:
        """
        The Cs param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        return pulumi.get(self, "cs")

    @cs.setter
    def cs(self, value: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCsArgs']]):
        pulumi.set(self, "cs", value)

    @_builtins.property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomArgs']]:
        """
        The Custom param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomArgs']]):
        pulumi.set(self, "custom", value)

    @_builtins.property
    @pulumi.getter
    def ef(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Ef param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        return pulumi.get(self, "ef")

    @ef.setter
    def ef(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ef", value)

    @_builtins.property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeTosArgs']]:
        """
        The Tos param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeTosArgs']]):
        pulumi.set(self, "tos", value)


if not MYPY:
    class QosPolicyRuleDscpTosCodepointTypeAfArgsDict(TypedDict):
        codepoint: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Codepoint param.
        """
elif False:
    QosPolicyRuleDscpTosCodepointTypeAfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosPolicyRuleDscpTosCodepointTypeAfArgs:
    def __init__(__self__, *,
                 codepoint: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] codepoint: The Codepoint param.
        """
        if codepoint is not None:
            pulumi.set(__self__, "codepoint", codepoint)

    @_builtins.property
    @pulumi.getter
    def codepoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Codepoint param.
        """
        return pulumi.get(self, "codepoint")

    @codepoint.setter
    def codepoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "codepoint", value)


if not MYPY:
    class QosPolicyRuleDscpTosCodepointTypeCsArgsDict(TypedDict):
        codepoint: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Codepoint param.
        """
elif False:
    QosPolicyRuleDscpTosCodepointTypeCsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosPolicyRuleDscpTosCodepointTypeCsArgs:
    def __init__(__self__, *,
                 codepoint: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] codepoint: The Codepoint param.
        """
        if codepoint is not None:
            pulumi.set(__self__, "codepoint", codepoint)

    @_builtins.property
    @pulumi.getter
    def codepoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Codepoint param.
        """
        return pulumi.get(self, "codepoint")

    @codepoint.setter
    def codepoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "codepoint", value)


if not MYPY:
    class QosPolicyRuleDscpTosCodepointTypeCustomArgsDict(TypedDict):
        codepoint: NotRequired[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgsDict']]
        """
        The Codepoint param.
        """
elif False:
    QosPolicyRuleDscpTosCodepointTypeCustomArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosPolicyRuleDscpTosCodepointTypeCustomArgs:
    def __init__(__self__, *,
                 codepoint: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgs']] = None):
        """
        :param pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgs'] codepoint: The Codepoint param.
        """
        if codepoint is not None:
            pulumi.set(__self__, "codepoint", codepoint)

    @_builtins.property
    @pulumi.getter
    def codepoint(self) -> Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgs']]:
        """
        The Codepoint param.
        """
        return pulumi.get(self, "codepoint")

    @codepoint.setter
    def codepoint(self, value: Optional[pulumi.Input['QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgs']]):
        pulumi.set(self, "codepoint", value)


if not MYPY:
    class QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgsDict(TypedDict):
        binary_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The BinaryValue param.
        """
        codepoint_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The CodepointName param.
        """
elif False:
    QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosPolicyRuleDscpTosCodepointTypeCustomCodepointArgs:
    def __init__(__self__, *,
                 binary_value: Optional[pulumi.Input[_builtins.str]] = None,
                 codepoint_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] binary_value: The BinaryValue param.
        :param pulumi.Input[_builtins.str] codepoint_name: The CodepointName param.
        """
        if binary_value is not None:
            pulumi.set(__self__, "binary_value", binary_value)
        if codepoint_name is not None:
            pulumi.set(__self__, "codepoint_name", codepoint_name)

    @_builtins.property
    @pulumi.getter(name="binaryValue")
    def binary_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The BinaryValue param.
        """
        return pulumi.get(self, "binary_value")

    @binary_value.setter
    def binary_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "binary_value", value)

    @_builtins.property
    @pulumi.getter(name="codepointName")
    def codepoint_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CodepointName param.
        """
        return pulumi.get(self, "codepoint_name")

    @codepoint_name.setter
    def codepoint_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "codepoint_name", value)


if not MYPY:
    class QosPolicyRuleDscpTosCodepointTypeTosArgsDict(TypedDict):
        codepoint: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Codepoint param.
        """
elif False:
    QosPolicyRuleDscpTosCodepointTypeTosArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosPolicyRuleDscpTosCodepointTypeTosArgs:
    def __init__(__self__, *,
                 codepoint: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] codepoint: The Codepoint param.
        """
        if codepoint is not None:
            pulumi.set(__self__, "codepoint", codepoint)

    @_builtins.property
    @pulumi.getter
    def codepoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Codepoint param.
        """
        return pulumi.get(self, "codepoint")

    @codepoint.setter
    def codepoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "codepoint", value)


if not MYPY:
    class QosProfileAggregateBandwidthArgsDict(TypedDict):
        egress_guaranteed: NotRequired[pulumi.Input[_builtins.int]]
        """
        guaranteed sending bandwidth in mbps. Value must be between 0 and 16000.
        """
        egress_max: NotRequired[pulumi.Input[_builtins.int]]
        """
        max sending bandwidth in mbps. Value must be between 0 and 60000.
        """
elif False:
    QosProfileAggregateBandwidthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosProfileAggregateBandwidthArgs:
    def __init__(__self__, *,
                 egress_guaranteed: Optional[pulumi.Input[_builtins.int]] = None,
                 egress_max: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] egress_guaranteed: guaranteed sending bandwidth in mbps. Value must be between 0 and 16000.
        :param pulumi.Input[_builtins.int] egress_max: max sending bandwidth in mbps. Value must be between 0 and 60000.
        """
        if egress_guaranteed is not None:
            pulumi.set(__self__, "egress_guaranteed", egress_guaranteed)
        if egress_max is not None:
            pulumi.set(__self__, "egress_max", egress_max)

    @_builtins.property
    @pulumi.getter(name="egressGuaranteed")
    def egress_guaranteed(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        guaranteed sending bandwidth in mbps. Value must be between 0 and 16000.
        """
        return pulumi.get(self, "egress_guaranteed")

    @egress_guaranteed.setter
    def egress_guaranteed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "egress_guaranteed", value)

    @_builtins.property
    @pulumi.getter(name="egressMax")
    def egress_max(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        max sending bandwidth in mbps. Value must be between 0 and 60000.
        """
        return pulumi.get(self, "egress_max")

    @egress_max.setter
    def egress_max(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "egress_max", value)


if not MYPY:
    class QosProfileClassBandwidthTypeArgsDict(TypedDict):
        mbps: NotRequired[pulumi.Input['QosProfileClassBandwidthTypeMbpsArgsDict']]
        """
        The Mbps param. Ensure that only one of the following is specified: `mbps`, `percentage`
        """
        percentage: NotRequired[pulumi.Input['QosProfileClassBandwidthTypePercentageArgsDict']]
        """
        The Percentage param. Ensure that only one of the following is specified: `mbps`, `percentage`
        """
elif False:
    QosProfileClassBandwidthTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosProfileClassBandwidthTypeArgs:
    def __init__(__self__, *,
                 mbps: Optional[pulumi.Input['QosProfileClassBandwidthTypeMbpsArgs']] = None,
                 percentage: Optional[pulumi.Input['QosProfileClassBandwidthTypePercentageArgs']] = None):
        """
        :param pulumi.Input['QosProfileClassBandwidthTypeMbpsArgs'] mbps: The Mbps param. Ensure that only one of the following is specified: `mbps`, `percentage`
        :param pulumi.Input['QosProfileClassBandwidthTypePercentageArgs'] percentage: The Percentage param. Ensure that only one of the following is specified: `mbps`, `percentage`
        """
        if mbps is not None:
            pulumi.set(__self__, "mbps", mbps)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @_builtins.property
    @pulumi.getter
    def mbps(self) -> Optional[pulumi.Input['QosProfileClassBandwidthTypeMbpsArgs']]:
        """
        The Mbps param. Ensure that only one of the following is specified: `mbps`, `percentage`
        """
        return pulumi.get(self, "mbps")

    @mbps.setter
    def mbps(self, value: Optional[pulumi.Input['QosProfileClassBandwidthTypeMbpsArgs']]):
        pulumi.set(self, "mbps", value)

    @_builtins.property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input['QosProfileClassBandwidthTypePercentageArgs']]:
        """
        The Percentage param. Ensure that only one of the following is specified: `mbps`, `percentage`
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input['QosProfileClassBandwidthTypePercentageArgs']]):
        pulumi.set(self, "percentage", value)


if not MYPY:
    class QosProfileClassBandwidthTypeMbpsArgsDict(TypedDict):
        classes: NotRequired[pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypeMbpsClassArgsDict']]]]
        """
        QoS setting for traffic classes.
        """
elif False:
    QosProfileClassBandwidthTypeMbpsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosProfileClassBandwidthTypeMbpsArgs:
    def __init__(__self__, *,
                 classes: Optional[pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypeMbpsClassArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypeMbpsClassArgs']]] classes: QoS setting for traffic classes.
        """
        if classes is not None:
            pulumi.set(__self__, "classes", classes)

    @_builtins.property
    @pulumi.getter
    def classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypeMbpsClassArgs']]]]:
        """
        QoS setting for traffic classes.
        """
        return pulumi.get(self, "classes")

    @classes.setter
    def classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypeMbpsClassArgs']]]]):
        pulumi.set(self, "classes", value)


if not MYPY:
    class QosProfileClassBandwidthTypeMbpsClassArgsDict(TypedDict):
        class_bandwidth: NotRequired[pulumi.Input['QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgsDict']]
        """
        The ClassBandwidth param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Traffic class. String length must not exceed 31 characters.
        """
        priority: NotRequired[pulumi.Input[_builtins.str]]
        """
        traffic class priority. String must be one of these: `"real-time"`, `"high"`, `"medium"`, `"low"`. Default: `"medium"`.
        """
elif False:
    QosProfileClassBandwidthTypeMbpsClassArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosProfileClassBandwidthTypeMbpsClassArgs:
    def __init__(__self__, *,
                 class_bandwidth: Optional[pulumi.Input['QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgs'] class_bandwidth: The ClassBandwidth param.
        :param pulumi.Input[_builtins.str] name: Traffic class. String length must not exceed 31 characters.
        :param pulumi.Input[_builtins.str] priority: traffic class priority. String must be one of these: `"real-time"`, `"high"`, `"medium"`, `"low"`. Default: `"medium"`.
        """
        if class_bandwidth is not None:
            pulumi.set(__self__, "class_bandwidth", class_bandwidth)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter(name="classBandwidth")
    def class_bandwidth(self) -> Optional[pulumi.Input['QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgs']]:
        """
        The ClassBandwidth param.
        """
        return pulumi.get(self, "class_bandwidth")

    @class_bandwidth.setter
    def class_bandwidth(self, value: Optional[pulumi.Input['QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgs']]):
        pulumi.set(self, "class_bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Traffic class. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        traffic class priority. String must be one of these: `"real-time"`, `"high"`, `"medium"`, `"low"`. Default: `"medium"`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)


if not MYPY:
    class QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgsDict(TypedDict):
        egress_guaranteed: NotRequired[pulumi.Input[_builtins.int]]
        """
        guaranteed sending bandwidth in mbps. Value must be between 0 and 60000.
        """
        egress_max: NotRequired[pulumi.Input[_builtins.int]]
        """
        max sending bandwidth in mbps. Value must be between 0 and 60000.
        """
elif False:
    QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosProfileClassBandwidthTypeMbpsClassClassBandwidthArgs:
    def __init__(__self__, *,
                 egress_guaranteed: Optional[pulumi.Input[_builtins.int]] = None,
                 egress_max: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] egress_guaranteed: guaranteed sending bandwidth in mbps. Value must be between 0 and 60000.
        :param pulumi.Input[_builtins.int] egress_max: max sending bandwidth in mbps. Value must be between 0 and 60000.
        """
        if egress_guaranteed is not None:
            pulumi.set(__self__, "egress_guaranteed", egress_guaranteed)
        if egress_max is not None:
            pulumi.set(__self__, "egress_max", egress_max)

    @_builtins.property
    @pulumi.getter(name="egressGuaranteed")
    def egress_guaranteed(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        guaranteed sending bandwidth in mbps. Value must be between 0 and 60000.
        """
        return pulumi.get(self, "egress_guaranteed")

    @egress_guaranteed.setter
    def egress_guaranteed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "egress_guaranteed", value)

    @_builtins.property
    @pulumi.getter(name="egressMax")
    def egress_max(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        max sending bandwidth in mbps. Value must be between 0 and 60000.
        """
        return pulumi.get(self, "egress_max")

    @egress_max.setter
    def egress_max(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "egress_max", value)


if not MYPY:
    class QosProfileClassBandwidthTypePercentageArgsDict(TypedDict):
        classes: NotRequired[pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypePercentageClassArgsDict']]]]
        """
        QoS setting for traffic classes.
        """
elif False:
    QosProfileClassBandwidthTypePercentageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosProfileClassBandwidthTypePercentageArgs:
    def __init__(__self__, *,
                 classes: Optional[pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypePercentageClassArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypePercentageClassArgs']]] classes: QoS setting for traffic classes.
        """
        if classes is not None:
            pulumi.set(__self__, "classes", classes)

    @_builtins.property
    @pulumi.getter
    def classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypePercentageClassArgs']]]]:
        """
        QoS setting for traffic classes.
        """
        return pulumi.get(self, "classes")

    @classes.setter
    def classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QosProfileClassBandwidthTypePercentageClassArgs']]]]):
        pulumi.set(self, "classes", value)


if not MYPY:
    class QosProfileClassBandwidthTypePercentageClassArgsDict(TypedDict):
        class_bandwidth: NotRequired[pulumi.Input['QosProfileClassBandwidthTypePercentageClassClassBandwidthArgsDict']]
        """
        The ClassBandwidth param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Traffic class. String length must not exceed 31 characters.
        """
        priority: NotRequired[pulumi.Input[_builtins.str]]
        """
        traffic class priority. String must be one of these: `"real-time"`, `"high"`, `"medium"`, `"low"`. Default: `"medium"`.
        """
elif False:
    QosProfileClassBandwidthTypePercentageClassArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosProfileClassBandwidthTypePercentageClassArgs:
    def __init__(__self__, *,
                 class_bandwidth: Optional[pulumi.Input['QosProfileClassBandwidthTypePercentageClassClassBandwidthArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['QosProfileClassBandwidthTypePercentageClassClassBandwidthArgs'] class_bandwidth: The ClassBandwidth param.
        :param pulumi.Input[_builtins.str] name: Traffic class. String length must not exceed 31 characters.
        :param pulumi.Input[_builtins.str] priority: traffic class priority. String must be one of these: `"real-time"`, `"high"`, `"medium"`, `"low"`. Default: `"medium"`.
        """
        if class_bandwidth is not None:
            pulumi.set(__self__, "class_bandwidth", class_bandwidth)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter(name="classBandwidth")
    def class_bandwidth(self) -> Optional[pulumi.Input['QosProfileClassBandwidthTypePercentageClassClassBandwidthArgs']]:
        """
        The ClassBandwidth param.
        """
        return pulumi.get(self, "class_bandwidth")

    @class_bandwidth.setter
    def class_bandwidth(self, value: Optional[pulumi.Input['QosProfileClassBandwidthTypePercentageClassClassBandwidthArgs']]):
        pulumi.set(self, "class_bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Traffic class. String length must not exceed 31 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        traffic class priority. String must be one of these: `"real-time"`, `"high"`, `"medium"`, `"low"`. Default: `"medium"`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)


if not MYPY:
    class QosProfileClassBandwidthTypePercentageClassClassBandwidthArgsDict(TypedDict):
        egress_guaranteed: NotRequired[pulumi.Input[_builtins.int]]
        """
        guaranteed sending bandwidth in percentage. Value must be between 0 and 100.
        """
        egress_max: NotRequired[pulumi.Input[_builtins.int]]
        """
        max sending bandwidth in percentage. Value must be between 0 and 100.
        """
elif False:
    QosProfileClassBandwidthTypePercentageClassClassBandwidthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosProfileClassBandwidthTypePercentageClassClassBandwidthArgs:
    def __init__(__self__, *,
                 egress_guaranteed: Optional[pulumi.Input[_builtins.int]] = None,
                 egress_max: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] egress_guaranteed: guaranteed sending bandwidth in percentage. Value must be between 0 and 100.
        :param pulumi.Input[_builtins.int] egress_max: max sending bandwidth in percentage. Value must be between 0 and 100.
        """
        if egress_guaranteed is not None:
            pulumi.set(__self__, "egress_guaranteed", egress_guaranteed)
        if egress_max is not None:
            pulumi.set(__self__, "egress_max", egress_max)

    @_builtins.property
    @pulumi.getter(name="egressGuaranteed")
    def egress_guaranteed(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        guaranteed sending bandwidth in percentage. Value must be between 0 and 100.
        """
        return pulumi.get(self, "egress_guaranteed")

    @egress_guaranteed.setter
    def egress_guaranteed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "egress_guaranteed", value)

    @_builtins.property
    @pulumi.getter(name="egressMax")
    def egress_max(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        max sending bandwidth in percentage. Value must be between 0 and 100.
        """
        return pulumi.get(self, "egress_max")

    @egress_max.setter
    def egress_max(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "egress_max", value)


if not MYPY:
    class RadiusServerProfileProtocolArgsDict(TypedDict):
        chap: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Chap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        eap_ttls_with_pap: NotRequired[pulumi.Input['RadiusServerProfileProtocolEapTtlsWithPapArgsDict']]
        """
        The EapTtlsWithPap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        pap: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Pap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        peap_mschap_v2: NotRequired[pulumi.Input['RadiusServerProfileProtocolPeapMschapV2ArgsDict']]
        """
        The PeapMschapV2 param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        peap_with_gtc: NotRequired[pulumi.Input['RadiusServerProfileProtocolPeapWithGtcArgsDict']]
        """
        The PeapWithGtc param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
elif False:
    RadiusServerProfileProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RadiusServerProfileProtocolArgs:
    def __init__(__self__, *,
                 chap: Optional[pulumi.Input[_builtins.bool]] = None,
                 eap_ttls_with_pap: Optional[pulumi.Input['RadiusServerProfileProtocolEapTtlsWithPapArgs']] = None,
                 pap: Optional[pulumi.Input[_builtins.bool]] = None,
                 peap_mschap_v2: Optional[pulumi.Input['RadiusServerProfileProtocolPeapMschapV2Args']] = None,
                 peap_with_gtc: Optional[pulumi.Input['RadiusServerProfileProtocolPeapWithGtcArgs']] = None):
        """
        :param pulumi.Input[_builtins.bool] chap: The Chap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        :param pulumi.Input['RadiusServerProfileProtocolEapTtlsWithPapArgs'] eap_ttls_with_pap: The EapTtlsWithPap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        :param pulumi.Input[_builtins.bool] pap: The Pap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        :param pulumi.Input['RadiusServerProfileProtocolPeapMschapV2Args'] peap_mschap_v2: The PeapMschapV2 param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        :param pulumi.Input['RadiusServerProfileProtocolPeapWithGtcArgs'] peap_with_gtc: The PeapWithGtc param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        if chap is not None:
            pulumi.set(__self__, "chap", chap)
        if eap_ttls_with_pap is not None:
            pulumi.set(__self__, "eap_ttls_with_pap", eap_ttls_with_pap)
        if pap is not None:
            pulumi.set(__self__, "pap", pap)
        if peap_mschap_v2 is not None:
            pulumi.set(__self__, "peap_mschap_v2", peap_mschap_v2)
        if peap_with_gtc is not None:
            pulumi.set(__self__, "peap_with_gtc", peap_with_gtc)

    @_builtins.property
    @pulumi.getter
    def chap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Chap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        return pulumi.get(self, "chap")

    @chap.setter
    def chap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "chap", value)

    @_builtins.property
    @pulumi.getter(name="eapTtlsWithPap")
    def eap_ttls_with_pap(self) -> Optional[pulumi.Input['RadiusServerProfileProtocolEapTtlsWithPapArgs']]:
        """
        The EapTtlsWithPap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        return pulumi.get(self, "eap_ttls_with_pap")

    @eap_ttls_with_pap.setter
    def eap_ttls_with_pap(self, value: Optional[pulumi.Input['RadiusServerProfileProtocolEapTtlsWithPapArgs']]):
        pulumi.set(self, "eap_ttls_with_pap", value)

    @_builtins.property
    @pulumi.getter
    def pap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Pap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        return pulumi.get(self, "pap")

    @pap.setter
    def pap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pap", value)

    @_builtins.property
    @pulumi.getter(name="peapMschapV2")
    def peap_mschap_v2(self) -> Optional[pulumi.Input['RadiusServerProfileProtocolPeapMschapV2Args']]:
        """
        The PeapMschapV2 param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        return pulumi.get(self, "peap_mschap_v2")

    @peap_mschap_v2.setter
    def peap_mschap_v2(self, value: Optional[pulumi.Input['RadiusServerProfileProtocolPeapMschapV2Args']]):
        pulumi.set(self, "peap_mschap_v2", value)

    @_builtins.property
    @pulumi.getter(name="peapWithGtc")
    def peap_with_gtc(self) -> Optional[pulumi.Input['RadiusServerProfileProtocolPeapWithGtcArgs']]:
        """
        The PeapWithGtc param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`
        """
        return pulumi.get(self, "peap_with_gtc")

    @peap_with_gtc.setter
    def peap_with_gtc(self, value: Optional[pulumi.Input['RadiusServerProfileProtocolPeapWithGtcArgs']]):
        pulumi.set(self, "peap_with_gtc", value)


if not MYPY:
    class RadiusServerProfileProtocolEapTtlsWithPapArgsDict(TypedDict):
        anon_outer_id: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AnonOuterId param.
        """
        radius_cert_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RadiusCertProfile param.
        """
elif False:
    RadiusServerProfileProtocolEapTtlsWithPapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RadiusServerProfileProtocolEapTtlsWithPapArgs:
    def __init__(__self__, *,
                 anon_outer_id: Optional[pulumi.Input[_builtins.bool]] = None,
                 radius_cert_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] anon_outer_id: The AnonOuterId param.
        :param pulumi.Input[_builtins.str] radius_cert_profile: The RadiusCertProfile param.
        """
        if anon_outer_id is not None:
            pulumi.set(__self__, "anon_outer_id", anon_outer_id)
        if radius_cert_profile is not None:
            pulumi.set(__self__, "radius_cert_profile", radius_cert_profile)

    @_builtins.property
    @pulumi.getter(name="anonOuterId")
    def anon_outer_id(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AnonOuterId param.
        """
        return pulumi.get(self, "anon_outer_id")

    @anon_outer_id.setter
    def anon_outer_id(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "anon_outer_id", value)

    @_builtins.property
    @pulumi.getter(name="radiusCertProfile")
    def radius_cert_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RadiusCertProfile param.
        """
        return pulumi.get(self, "radius_cert_profile")

    @radius_cert_profile.setter
    def radius_cert_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_cert_profile", value)


if not MYPY:
    class RadiusServerProfileProtocolPeapMschapV2ArgsDict(TypedDict):
        allow_pwd_change: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AllowPwdChange param.
        """
        anon_outer_id: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AnonOuterId param.
        """
        radius_cert_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RadiusCertProfile param.
        """
elif False:
    RadiusServerProfileProtocolPeapMschapV2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RadiusServerProfileProtocolPeapMschapV2Args:
    def __init__(__self__, *,
                 allow_pwd_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 anon_outer_id: Optional[pulumi.Input[_builtins.bool]] = None,
                 radius_cert_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] allow_pwd_change: The AllowPwdChange param.
        :param pulumi.Input[_builtins.bool] anon_outer_id: The AnonOuterId param.
        :param pulumi.Input[_builtins.str] radius_cert_profile: The RadiusCertProfile param.
        """
        if allow_pwd_change is not None:
            pulumi.set(__self__, "allow_pwd_change", allow_pwd_change)
        if anon_outer_id is not None:
            pulumi.set(__self__, "anon_outer_id", anon_outer_id)
        if radius_cert_profile is not None:
            pulumi.set(__self__, "radius_cert_profile", radius_cert_profile)

    @_builtins.property
    @pulumi.getter(name="allowPwdChange")
    def allow_pwd_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AllowPwdChange param.
        """
        return pulumi.get(self, "allow_pwd_change")

    @allow_pwd_change.setter
    def allow_pwd_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_pwd_change", value)

    @_builtins.property
    @pulumi.getter(name="anonOuterId")
    def anon_outer_id(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AnonOuterId param.
        """
        return pulumi.get(self, "anon_outer_id")

    @anon_outer_id.setter
    def anon_outer_id(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "anon_outer_id", value)

    @_builtins.property
    @pulumi.getter(name="radiusCertProfile")
    def radius_cert_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RadiusCertProfile param.
        """
        return pulumi.get(self, "radius_cert_profile")

    @radius_cert_profile.setter
    def radius_cert_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_cert_profile", value)


if not MYPY:
    class RadiusServerProfileProtocolPeapWithGtcArgsDict(TypedDict):
        anon_outer_id: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The AnonOuterId param.
        """
        radius_cert_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RadiusCertProfile param.
        """
elif False:
    RadiusServerProfileProtocolPeapWithGtcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RadiusServerProfileProtocolPeapWithGtcArgs:
    def __init__(__self__, *,
                 anon_outer_id: Optional[pulumi.Input[_builtins.bool]] = None,
                 radius_cert_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] anon_outer_id: The AnonOuterId param.
        :param pulumi.Input[_builtins.str] radius_cert_profile: The RadiusCertProfile param.
        """
        if anon_outer_id is not None:
            pulumi.set(__self__, "anon_outer_id", anon_outer_id)
        if radius_cert_profile is not None:
            pulumi.set(__self__, "radius_cert_profile", radius_cert_profile)

    @_builtins.property
    @pulumi.getter(name="anonOuterId")
    def anon_outer_id(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The AnonOuterId param.
        """
        return pulumi.get(self, "anon_outer_id")

    @anon_outer_id.setter
    def anon_outer_id(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "anon_outer_id", value)

    @_builtins.property
    @pulumi.getter(name="radiusCertProfile")
    def radius_cert_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RadiusCertProfile param.
        """
        return pulumi.get(self, "radius_cert_profile")

    @radius_cert_profile.setter
    def radius_cert_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_cert_profile", value)


if not MYPY:
    class RadiusServerProfileServerArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The IpAddress param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Port param. Value must be between 1 and 65535.
        """
        secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Secret param. String length must not exceed 64 characters.
        """
elif False:
    RadiusServerProfileServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RadiusServerProfileServerArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: The IpAddress param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.int] port: The Port param. Value must be between 1 and 65535.
        :param pulumi.Input[_builtins.str] secret: The Secret param. String length must not exceed 64 characters.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IpAddress param.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Port param. Value must be between 1 and 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Secret param. String length must not exceed 64 characters.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class RegionGeoLocationArgsDict(TypedDict):
        latitude: pulumi.Input[_builtins.float]
        """
        latitude coordinate. Value must be between -90 and 90.
        """
        longitude: pulumi.Input[_builtins.float]
        """
        longitude coordinate. Value must be between -180 and 180.
        """
elif False:
    RegionGeoLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegionGeoLocationArgs:
    def __init__(__self__, *,
                 latitude: pulumi.Input[_builtins.float],
                 longitude: pulumi.Input[_builtins.float]):
        """
        :param pulumi.Input[_builtins.float] latitude: latitude coordinate. Value must be between -90 and 90.
        :param pulumi.Input[_builtins.float] longitude: longitude coordinate. Value must be between -180 and 180.
        """
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)

    @_builtins.property
    @pulumi.getter
    def latitude(self) -> pulumi.Input[_builtins.float]:
        """
        latitude coordinate. Value must be between -90 and 90.
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "latitude", value)

    @_builtins.property
    @pulumi.getter
    def longitude(self) -> pulumi.Input[_builtins.float]:
        """
        longitude coordinate. Value must be between -180 and 180.
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "longitude", value)


if not MYPY:
    class RemoteNetworkEcmpTunnelArgsDict(TypedDict):
        ipsec_tunnel: pulumi.Input[_builtins.str]
        """
        The IpsecTunnel param.
        """
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        protocol: pulumi.Input['RemoteNetworkEcmpTunnelProtocolArgsDict']
        """
        The Protocol param.
        """
elif False:
    RemoteNetworkEcmpTunnelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemoteNetworkEcmpTunnelArgs:
    def __init__(__self__, *,
                 ipsec_tunnel: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input['RemoteNetworkEcmpTunnelProtocolArgs']):
        """
        :param pulumi.Input[_builtins.str] ipsec_tunnel: The IpsecTunnel param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input['RemoteNetworkEcmpTunnelProtocolArgs'] protocol: The Protocol param.
        """
        pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> pulumi.Input[_builtins.str]:
        """
        The IpsecTunnel param.
        """
        return pulumi.get(self, "ipsec_tunnel")

    @ipsec_tunnel.setter
    def ipsec_tunnel(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ipsec_tunnel", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input['RemoteNetworkEcmpTunnelProtocolArgs']:
        """
        The Protocol param.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input['RemoteNetworkEcmpTunnelProtocolArgs']):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class RemoteNetworkEcmpTunnelProtocolArgsDict(TypedDict):
        bgp: NotRequired[pulumi.Input['RemoteNetworkEcmpTunnelProtocolBgpArgsDict']]
        """
        The Bgp param.
        """
elif False:
    RemoteNetworkEcmpTunnelProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemoteNetworkEcmpTunnelProtocolArgs:
    def __init__(__self__, *,
                 bgp: Optional[pulumi.Input['RemoteNetworkEcmpTunnelProtocolBgpArgs']] = None):
        """
        :param pulumi.Input['RemoteNetworkEcmpTunnelProtocolBgpArgs'] bgp: The Bgp param.
        """
        if bgp is not None:
            pulumi.set(__self__, "bgp", bgp)

    @_builtins.property
    @pulumi.getter
    def bgp(self) -> Optional[pulumi.Input['RemoteNetworkEcmpTunnelProtocolBgpArgs']]:
        """
        The Bgp param.
        """
        return pulumi.get(self, "bgp")

    @bgp.setter
    def bgp(self, value: Optional[pulumi.Input['RemoteNetworkEcmpTunnelProtocolBgpArgs']]):
        pulumi.set(self, "bgp", value)


if not MYPY:
    class RemoteNetworkEcmpTunnelProtocolBgpArgsDict(TypedDict):
        do_not_export_routes: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The DoNotExportRoutes param.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        to setup bgp protocol, enable need to set as true.
        """
        local_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LocalIpAddress param.
        """
        originate_default_route: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The OriginateDefaultRoute param.
        """
        peer_as: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PeerAs param.
        """
        peer_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PeerIpAddress param.
        """
        peering_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `"exchange-v4-over-v4"`, `"exchange-v4-v6-over-v4"`, `"exchange-v4-over-v4-v6-over-v6"`, `"exchange-v6-over-v6"`.
        """
        secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Secret param.
        """
        summarize_mobile_user_routes: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The SummarizeMobileUserRoutes param.
        """
elif False:
    RemoteNetworkEcmpTunnelProtocolBgpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemoteNetworkEcmpTunnelProtocolBgpArgs:
    def __init__(__self__, *,
                 do_not_export_routes: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 local_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 originate_default_route: Optional[pulumi.Input[_builtins.bool]] = None,
                 peer_as: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peering_type: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None,
                 summarize_mobile_user_routes: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] do_not_export_routes: The DoNotExportRoutes param.
        :param pulumi.Input[_builtins.bool] enable: to setup bgp protocol, enable need to set as true.
        :param pulumi.Input[_builtins.str] local_ip_address: The LocalIpAddress param.
        :param pulumi.Input[_builtins.bool] originate_default_route: The OriginateDefaultRoute param.
        :param pulumi.Input[_builtins.str] peer_as: The PeerAs param.
        :param pulumi.Input[_builtins.str] peer_ip_address: The PeerIpAddress param.
        :param pulumi.Input[_builtins.str] peering_type: Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `"exchange-v4-over-v4"`, `"exchange-v4-v6-over-v4"`, `"exchange-v4-over-v4-v6-over-v6"`, `"exchange-v6-over-v6"`.
        :param pulumi.Input[_builtins.str] secret: The Secret param.
        :param pulumi.Input[_builtins.bool] summarize_mobile_user_routes: The SummarizeMobileUserRoutes param.
        """
        if do_not_export_routes is not None:
            pulumi.set(__self__, "do_not_export_routes", do_not_export_routes)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if local_ip_address is not None:
            pulumi.set(__self__, "local_ip_address", local_ip_address)
        if originate_default_route is not None:
            pulumi.set(__self__, "originate_default_route", originate_default_route)
        if peer_as is not None:
            pulumi.set(__self__, "peer_as", peer_as)
        if peer_ip_address is not None:
            pulumi.set(__self__, "peer_ip_address", peer_ip_address)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if summarize_mobile_user_routes is not None:
            pulumi.set(__self__, "summarize_mobile_user_routes", summarize_mobile_user_routes)

    @_builtins.property
    @pulumi.getter(name="doNotExportRoutes")
    def do_not_export_routes(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The DoNotExportRoutes param.
        """
        return pulumi.get(self, "do_not_export_routes")

    @do_not_export_routes.setter
    def do_not_export_routes(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "do_not_export_routes", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        to setup bgp protocol, enable need to set as true.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LocalIpAddress param.
        """
        return pulumi.get(self, "local_ip_address")

    @local_ip_address.setter
    def local_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="originateDefaultRoute")
    def originate_default_route(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The OriginateDefaultRoute param.
        """
        return pulumi.get(self, "originate_default_route")

    @originate_default_route.setter
    def originate_default_route(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "originate_default_route", value)

    @_builtins.property
    @pulumi.getter(name="peerAs")
    def peer_as(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PeerAs param.
        """
        return pulumi.get(self, "peer_as")

    @peer_as.setter
    def peer_as(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_as", value)

    @_builtins.property
    @pulumi.getter(name="peerIpAddress")
    def peer_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PeerIpAddress param.
        """
        return pulumi.get(self, "peer_ip_address")

    @peer_ip_address.setter
    def peer_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `"exchange-v4-over-v4"`, `"exchange-v4-v6-over-v4"`, `"exchange-v4-over-v4-v6-over-v6"`, `"exchange-v6-over-v6"`.
        """
        return pulumi.get(self, "peering_type")

    @peering_type.setter
    def peering_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peering_type", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Secret param.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)

    @_builtins.property
    @pulumi.getter(name="summarizeMobileUserRoutes")
    def summarize_mobile_user_routes(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The SummarizeMobileUserRoutes param.
        """
        return pulumi.get(self, "summarize_mobile_user_routes")

    @summarize_mobile_user_routes.setter
    def summarize_mobile_user_routes(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "summarize_mobile_user_routes", value)


if not MYPY:
    class RemoteNetworkProtocolArgsDict(TypedDict):
        bgp: NotRequired[pulumi.Input['RemoteNetworkProtocolBgpArgsDict']]
        """
        The Bgp param.
        """
        bgp_peer: NotRequired[pulumi.Input['RemoteNetworkProtocolBgpPeerArgsDict']]
        """
        secondary bgp routing as bgp*peer.
        """
elif False:
    RemoteNetworkProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemoteNetworkProtocolArgs:
    def __init__(__self__, *,
                 bgp: Optional[pulumi.Input['RemoteNetworkProtocolBgpArgs']] = None,
                 bgp_peer: Optional[pulumi.Input['RemoteNetworkProtocolBgpPeerArgs']] = None):
        """
        :param pulumi.Input['RemoteNetworkProtocolBgpArgs'] bgp: The Bgp param.
        :param pulumi.Input['RemoteNetworkProtocolBgpPeerArgs'] bgp_peer: secondary bgp routing as bgp*peer.
        """
        if bgp is not None:
            pulumi.set(__self__, "bgp", bgp)
        if bgp_peer is not None:
            pulumi.set(__self__, "bgp_peer", bgp_peer)

    @_builtins.property
    @pulumi.getter
    def bgp(self) -> Optional[pulumi.Input['RemoteNetworkProtocolBgpArgs']]:
        """
        The Bgp param.
        """
        return pulumi.get(self, "bgp")

    @bgp.setter
    def bgp(self, value: Optional[pulumi.Input['RemoteNetworkProtocolBgpArgs']]):
        pulumi.set(self, "bgp", value)

    @_builtins.property
    @pulumi.getter(name="bgpPeer")
    def bgp_peer(self) -> Optional[pulumi.Input['RemoteNetworkProtocolBgpPeerArgs']]:
        """
        secondary bgp routing as bgp*peer.
        """
        return pulumi.get(self, "bgp_peer")

    @bgp_peer.setter
    def bgp_peer(self, value: Optional[pulumi.Input['RemoteNetworkProtocolBgpPeerArgs']]):
        pulumi.set(self, "bgp_peer", value)


if not MYPY:
    class RemoteNetworkProtocolBgpArgsDict(TypedDict):
        do_not_export_routes: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The DoNotExportRoutes param.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        to setup bgp protocol, enable need to set as true.
        """
        local_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LocalIpAddress param.
        """
        originate_default_route: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The OriginateDefaultRoute param.
        """
        peer_as: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PeerAs param.
        """
        peer_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PeerIpAddress param.
        """
        peering_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `"exchange-v4-over-v4"`, `"exchange-v4-v6-over-v4"`, `"exchange-v4-over-v4-v6-over-v6"`, `"exchange-v6-over-v6"`.
        """
        secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Secret param.
        """
        summarize_mobile_user_routes: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The SummarizeMobileUserRoutes param.
        """
elif False:
    RemoteNetworkProtocolBgpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemoteNetworkProtocolBgpArgs:
    def __init__(__self__, *,
                 do_not_export_routes: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 local_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 originate_default_route: Optional[pulumi.Input[_builtins.bool]] = None,
                 peer_as: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peering_type: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None,
                 summarize_mobile_user_routes: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] do_not_export_routes: The DoNotExportRoutes param.
        :param pulumi.Input[_builtins.bool] enable: to setup bgp protocol, enable need to set as true.
        :param pulumi.Input[_builtins.str] local_ip_address: The LocalIpAddress param.
        :param pulumi.Input[_builtins.bool] originate_default_route: The OriginateDefaultRoute param.
        :param pulumi.Input[_builtins.str] peer_as: The PeerAs param.
        :param pulumi.Input[_builtins.str] peer_ip_address: The PeerIpAddress param.
        :param pulumi.Input[_builtins.str] peering_type: Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `"exchange-v4-over-v4"`, `"exchange-v4-v6-over-v4"`, `"exchange-v4-over-v4-v6-over-v6"`, `"exchange-v6-over-v6"`.
        :param pulumi.Input[_builtins.str] secret: The Secret param.
        :param pulumi.Input[_builtins.bool] summarize_mobile_user_routes: The SummarizeMobileUserRoutes param.
        """
        if do_not_export_routes is not None:
            pulumi.set(__self__, "do_not_export_routes", do_not_export_routes)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if local_ip_address is not None:
            pulumi.set(__self__, "local_ip_address", local_ip_address)
        if originate_default_route is not None:
            pulumi.set(__self__, "originate_default_route", originate_default_route)
        if peer_as is not None:
            pulumi.set(__self__, "peer_as", peer_as)
        if peer_ip_address is not None:
            pulumi.set(__self__, "peer_ip_address", peer_ip_address)
        if peering_type is not None:
            pulumi.set(__self__, "peering_type", peering_type)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if summarize_mobile_user_routes is not None:
            pulumi.set(__self__, "summarize_mobile_user_routes", summarize_mobile_user_routes)

    @_builtins.property
    @pulumi.getter(name="doNotExportRoutes")
    def do_not_export_routes(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The DoNotExportRoutes param.
        """
        return pulumi.get(self, "do_not_export_routes")

    @do_not_export_routes.setter
    def do_not_export_routes(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "do_not_export_routes", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        to setup bgp protocol, enable need to set as true.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LocalIpAddress param.
        """
        return pulumi.get(self, "local_ip_address")

    @local_ip_address.setter
    def local_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="originateDefaultRoute")
    def originate_default_route(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The OriginateDefaultRoute param.
        """
        return pulumi.get(self, "originate_default_route")

    @originate_default_route.setter
    def originate_default_route(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "originate_default_route", value)

    @_builtins.property
    @pulumi.getter(name="peerAs")
    def peer_as(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PeerAs param.
        """
        return pulumi.get(self, "peer_as")

    @peer_as.setter
    def peer_as(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_as", value)

    @_builtins.property
    @pulumi.getter(name="peerIpAddress")
    def peer_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PeerIpAddress param.
        """
        return pulumi.get(self, "peer_ip_address")

    @peer_ip_address.setter
    def peer_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="peeringType")
    def peering_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `"exchange-v4-over-v4"`, `"exchange-v4-v6-over-v4"`, `"exchange-v4-over-v4-v6-over-v6"`, `"exchange-v6-over-v6"`.
        """
        return pulumi.get(self, "peering_type")

    @peering_type.setter
    def peering_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peering_type", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Secret param.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)

    @_builtins.property
    @pulumi.getter(name="summarizeMobileUserRoutes")
    def summarize_mobile_user_routes(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The SummarizeMobileUserRoutes param.
        """
        return pulumi.get(self, "summarize_mobile_user_routes")

    @summarize_mobile_user_routes.setter
    def summarize_mobile_user_routes(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "summarize_mobile_user_routes", value)


if not MYPY:
    class RemoteNetworkProtocolBgpPeerArgsDict(TypedDict):
        local_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LocalIpAddress param.
        """
        peer_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PeerIpAddress param.
        """
        same_as_primary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If true, the secondary BGP peer configuration will be the same as the primary BGP peer. Default: `true`.
        """
        secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Secret param.
        """
elif False:
    RemoteNetworkProtocolBgpPeerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RemoteNetworkProtocolBgpPeerArgs:
    def __init__(__self__, *,
                 local_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 same_as_primary: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] local_ip_address: The LocalIpAddress param.
        :param pulumi.Input[_builtins.str] peer_ip_address: The PeerIpAddress param.
        :param pulumi.Input[_builtins.bool] same_as_primary: If true, the secondary BGP peer configuration will be the same as the primary BGP peer. Default: `true`.
        :param pulumi.Input[_builtins.str] secret: The Secret param.
        """
        if local_ip_address is not None:
            pulumi.set(__self__, "local_ip_address", local_ip_address)
        if peer_ip_address is not None:
            pulumi.set(__self__, "peer_ip_address", peer_ip_address)
        if same_as_primary is not None:
            pulumi.set(__self__, "same_as_primary", same_as_primary)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @_builtins.property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LocalIpAddress param.
        """
        return pulumi.get(self, "local_ip_address")

    @local_ip_address.setter
    def local_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="peerIpAddress")
    def peer_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PeerIpAddress param.
        """
        return pulumi.get(self, "peer_ip_address")

    @peer_ip_address.setter
    def peer_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="sameAsPrimary")
    def same_as_primary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, the secondary BGP peer configuration will be the same as the primary BGP peer. Default: `true`.
        """
        return pulumi.get(self, "same_as_primary")

    @same_as_primary.setter
    def same_as_primary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "same_as_primary", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Secret param.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class ScepProfileAlgorithmArgsDict(TypedDict):
        rsa: NotRequired[pulumi.Input['ScepProfileAlgorithmRsaArgsDict']]
        """
        The Rsa param.
        """
elif False:
    ScepProfileAlgorithmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScepProfileAlgorithmArgs:
    def __init__(__self__, *,
                 rsa: Optional[pulumi.Input['ScepProfileAlgorithmRsaArgs']] = None):
        """
        :param pulumi.Input['ScepProfileAlgorithmRsaArgs'] rsa: The Rsa param.
        """
        if rsa is not None:
            pulumi.set(__self__, "rsa", rsa)

    @_builtins.property
    @pulumi.getter
    def rsa(self) -> Optional[pulumi.Input['ScepProfileAlgorithmRsaArgs']]:
        """
        The Rsa param.
        """
        return pulumi.get(self, "rsa")

    @rsa.setter
    def rsa(self, value: Optional[pulumi.Input['ScepProfileAlgorithmRsaArgs']]):
        pulumi.set(self, "rsa", value)


if not MYPY:
    class ScepProfileAlgorithmRsaArgsDict(TypedDict):
        rsa_nbits: NotRequired[pulumi.Input[_builtins.str]]
        """
        The RsaNbits param.
        """
elif False:
    ScepProfileAlgorithmRsaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScepProfileAlgorithmRsaArgs:
    def __init__(__self__, *,
                 rsa_nbits: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] rsa_nbits: The RsaNbits param.
        """
        if rsa_nbits is not None:
            pulumi.set(__self__, "rsa_nbits", rsa_nbits)

    @_builtins.property
    @pulumi.getter(name="rsaNbits")
    def rsa_nbits(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The RsaNbits param.
        """
        return pulumi.get(self, "rsa_nbits")

    @rsa_nbits.setter
    def rsa_nbits(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rsa_nbits", value)


if not MYPY:
    class ScepProfileCertificateAttributesArgsDict(TypedDict):
        dnsname: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Dnsname param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`
        """
        rfc822name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Rfc822name param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`
        """
        uniform_resource_identifier: NotRequired[pulumi.Input[_builtins.str]]
        """
        The UniformResourceIdentifier param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`
        """
elif False:
    ScepProfileCertificateAttributesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScepProfileCertificateAttributesArgs:
    def __init__(__self__, *,
                 dnsname: Optional[pulumi.Input[_builtins.str]] = None,
                 rfc822name: Optional[pulumi.Input[_builtins.str]] = None,
                 uniform_resource_identifier: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] dnsname: The Dnsname param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`
        :param pulumi.Input[_builtins.str] rfc822name: The Rfc822name param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`
        :param pulumi.Input[_builtins.str] uniform_resource_identifier: The UniformResourceIdentifier param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`
        """
        if dnsname is not None:
            pulumi.set(__self__, "dnsname", dnsname)
        if rfc822name is not None:
            pulumi.set(__self__, "rfc822name", rfc822name)
        if uniform_resource_identifier is not None:
            pulumi.set(__self__, "uniform_resource_identifier", uniform_resource_identifier)

    @_builtins.property
    @pulumi.getter
    def dnsname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Dnsname param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`
        """
        return pulumi.get(self, "dnsname")

    @dnsname.setter
    def dnsname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dnsname", value)

    @_builtins.property
    @pulumi.getter
    def rfc822name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Rfc822name param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`
        """
        return pulumi.get(self, "rfc822name")

    @rfc822name.setter
    def rfc822name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rfc822name", value)

    @_builtins.property
    @pulumi.getter(name="uniformResourceIdentifier")
    def uniform_resource_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UniformResourceIdentifier param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`
        """
        return pulumi.get(self, "uniform_resource_identifier")

    @uniform_resource_identifier.setter
    def uniform_resource_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uniform_resource_identifier", value)


if not MYPY:
    class ScepProfileScepChallengeArgsDict(TypedDict):
        dynamic_challenge: NotRequired[pulumi.Input['ScepProfileScepChallengeDynamicChallengeArgsDict']]
        """
        The DynamicChallenge param. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`
        """
        fixed: NotRequired[pulumi.Input[_builtins.str]]
        """
        Challenge to use for SCEP server on mobile clients. String length must not exceed 1024 characters. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`
        """
        none: NotRequired[pulumi.Input[_builtins.str]]
        """
        The None param. String must be one of these: `""`. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`
        """
elif False:
    ScepProfileScepChallengeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScepProfileScepChallengeArgs:
    def __init__(__self__, *,
                 dynamic_challenge: Optional[pulumi.Input['ScepProfileScepChallengeDynamicChallengeArgs']] = None,
                 fixed: Optional[pulumi.Input[_builtins.str]] = None,
                 none: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['ScepProfileScepChallengeDynamicChallengeArgs'] dynamic_challenge: The DynamicChallenge param. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`
        :param pulumi.Input[_builtins.str] fixed: Challenge to use for SCEP server on mobile clients. String length must not exceed 1024 characters. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`
        :param pulumi.Input[_builtins.str] none: The None param. String must be one of these: `""`. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`
        """
        if dynamic_challenge is not None:
            pulumi.set(__self__, "dynamic_challenge", dynamic_challenge)
        if fixed is not None:
            pulumi.set(__self__, "fixed", fixed)
        if none is not None:
            pulumi.set(__self__, "none", none)

    @_builtins.property
    @pulumi.getter(name="dynamicChallenge")
    def dynamic_challenge(self) -> Optional[pulumi.Input['ScepProfileScepChallengeDynamicChallengeArgs']]:
        """
        The DynamicChallenge param. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`
        """
        return pulumi.get(self, "dynamic_challenge")

    @dynamic_challenge.setter
    def dynamic_challenge(self, value: Optional[pulumi.Input['ScepProfileScepChallengeDynamicChallengeArgs']]):
        pulumi.set(self, "dynamic_challenge", value)

    @_builtins.property
    @pulumi.getter
    def fixed(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Challenge to use for SCEP server on mobile clients. String length must not exceed 1024 characters. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`
        """
        return pulumi.get(self, "fixed")

    @fixed.setter
    def fixed(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fixed", value)

    @_builtins.property
    @pulumi.getter
    def none(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The None param. String must be one of these: `""`. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`
        """
        return pulumi.get(self, "none")

    @none.setter
    def none(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "none", value)


if not MYPY:
    class ScepProfileScepChallengeDynamicChallengeArgsDict(TypedDict):
        otp_server_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OtpServerUrl param. String length must not exceed 255 characters.
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Password param. String length must not exceed 255 characters.
        """
        username: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Username param. String length must not exceed 255 characters.
        """
elif False:
    ScepProfileScepChallengeDynamicChallengeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScepProfileScepChallengeDynamicChallengeArgs:
    def __init__(__self__, *,
                 otp_server_url: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] otp_server_url: The OtpServerUrl param. String length must not exceed 255 characters.
        :param pulumi.Input[_builtins.str] password: The Password param. String length must not exceed 255 characters.
        :param pulumi.Input[_builtins.str] username: The Username param. String length must not exceed 255 characters.
        """
        if otp_server_url is not None:
            pulumi.set(__self__, "otp_server_url", otp_server_url)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="otpServerUrl")
    def otp_server_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OtpServerUrl param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "otp_server_url")

    @otp_server_url.setter
    def otp_server_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "otp_server_url", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Password param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Username param. String length must not exceed 255 characters.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ScheduleScheduleTypeArgsDict(TypedDict):
        non_recurring_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `non_recurring`, `recurring`
        """
        recurring: NotRequired[pulumi.Input['ScheduleScheduleTypeRecurringArgsDict']]
        """
        The Recurring param. Ensure that only one of the following is specified: `non_recurring`, `recurring`
        """
elif False:
    ScheduleScheduleTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleScheduleTypeArgs:
    def __init__(__self__, *,
                 non_recurring_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 recurring: Optional[pulumi.Input['ScheduleScheduleTypeRecurringArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] non_recurring_lists: The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `non_recurring`, `recurring`
        :param pulumi.Input['ScheduleScheduleTypeRecurringArgs'] recurring: The Recurring param. Ensure that only one of the following is specified: `non_recurring`, `recurring`
        """
        if non_recurring_lists is not None:
            pulumi.set(__self__, "non_recurring_lists", non_recurring_lists)
        if recurring is not None:
            pulumi.set(__self__, "recurring", recurring)

    @_builtins.property
    @pulumi.getter(name="nonRecurringLists")
    def non_recurring_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `non_recurring`, `recurring`
        """
        return pulumi.get(self, "non_recurring_lists")

    @non_recurring_lists.setter
    def non_recurring_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "non_recurring_lists", value)

    @_builtins.property
    @pulumi.getter
    def recurring(self) -> Optional[pulumi.Input['ScheduleScheduleTypeRecurringArgs']]:
        """
        The Recurring param. Ensure that only one of the following is specified: `non_recurring`, `recurring`
        """
        return pulumi.get(self, "recurring")

    @recurring.setter
    def recurring(self, value: Optional[pulumi.Input['ScheduleScheduleTypeRecurringArgs']]):
        pulumi.set(self, "recurring", value)


if not MYPY:
    class ScheduleScheduleTypeRecurringArgsDict(TypedDict):
        daily_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The DailyList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `daily`, `weekly`
        """
        weekly: NotRequired[pulumi.Input['ScheduleScheduleTypeRecurringWeeklyArgsDict']]
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `weekly`
        """
elif False:
    ScheduleScheduleTypeRecurringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleScheduleTypeRecurringArgs:
    def __init__(__self__, *,
                 daily_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 weekly: Optional[pulumi.Input['ScheduleScheduleTypeRecurringWeeklyArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] daily_lists: The DailyList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `daily`, `weekly`
        :param pulumi.Input['ScheduleScheduleTypeRecurringWeeklyArgs'] weekly: The Weekly param. Ensure that only one of the following is specified: `daily`, `weekly`
        """
        if daily_lists is not None:
            pulumi.set(__self__, "daily_lists", daily_lists)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)

    @_builtins.property
    @pulumi.getter(name="dailyLists")
    def daily_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The DailyList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `daily`, `weekly`
        """
        return pulumi.get(self, "daily_lists")

    @daily_lists.setter
    def daily_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "daily_lists", value)

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> Optional[pulumi.Input['ScheduleScheduleTypeRecurringWeeklyArgs']]:
        """
        The Weekly param. Ensure that only one of the following is specified: `daily`, `weekly`
        """
        return pulumi.get(self, "weekly")

    @weekly.setter
    def weekly(self, value: Optional[pulumi.Input['ScheduleScheduleTypeRecurringWeeklyArgs']]):
        pulumi.set(self, "weekly", value)


if not MYPY:
    class ScheduleScheduleTypeRecurringWeeklyArgsDict(TypedDict):
        friday_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The FridayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        monday_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The MondayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        saturday_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The SaturdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        sunday_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The SundayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        thursday_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The ThursdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        tuesday_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The TuesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        wednesday_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The WednesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
elif False:
    ScheduleScheduleTypeRecurringWeeklyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleScheduleTypeRecurringWeeklyArgs:
    def __init__(__self__, *,
                 friday_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 monday_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 saturday_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 sunday_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 thursday_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tuesday_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wednesday_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] friday_lists: The FridayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] monday_lists: The MondayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] saturday_lists: The SaturdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] sunday_lists: The SundayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] thursday_lists: The ThursdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tuesday_lists: The TuesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] wednesday_lists: The WednesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        if friday_lists is not None:
            pulumi.set(__self__, "friday_lists", friday_lists)
        if monday_lists is not None:
            pulumi.set(__self__, "monday_lists", monday_lists)
        if saturday_lists is not None:
            pulumi.set(__self__, "saturday_lists", saturday_lists)
        if sunday_lists is not None:
            pulumi.set(__self__, "sunday_lists", sunday_lists)
        if thursday_lists is not None:
            pulumi.set(__self__, "thursday_lists", thursday_lists)
        if tuesday_lists is not None:
            pulumi.set(__self__, "tuesday_lists", tuesday_lists)
        if wednesday_lists is not None:
            pulumi.set(__self__, "wednesday_lists", wednesday_lists)

    @_builtins.property
    @pulumi.getter(name="fridayLists")
    def friday_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The FridayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        return pulumi.get(self, "friday_lists")

    @friday_lists.setter
    def friday_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "friday_lists", value)

    @_builtins.property
    @pulumi.getter(name="mondayLists")
    def monday_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The MondayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        return pulumi.get(self, "monday_lists")

    @monday_lists.setter
    def monday_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "monday_lists", value)

    @_builtins.property
    @pulumi.getter(name="saturdayLists")
    def saturday_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The SaturdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        return pulumi.get(self, "saturday_lists")

    @saturday_lists.setter
    def saturday_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "saturday_lists", value)

    @_builtins.property
    @pulumi.getter(name="sundayLists")
    def sunday_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The SundayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        return pulumi.get(self, "sunday_lists")

    @sunday_lists.setter
    def sunday_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "sunday_lists", value)

    @_builtins.property
    @pulumi.getter(name="thursdayLists")
    def thursday_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The ThursdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        return pulumi.get(self, "thursday_lists")

    @thursday_lists.setter
    def thursday_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "thursday_lists", value)

    @_builtins.property
    @pulumi.getter(name="tuesdayLists")
    def tuesday_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The TuesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        return pulumi.get(self, "tuesday_lists")

    @tuesday_lists.setter
    def tuesday_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tuesday_lists", value)

    @_builtins.property
    @pulumi.getter(name="wednesdayLists")
    def wednesday_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The WednesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.
        """
        return pulumi.get(self, "wednesday_lists")

    @wednesday_lists.setter
    def wednesday_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "wednesday_lists", value)


if not MYPY:
    class SecurityRuleProfileSettingArgsDict(TypedDict):
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The security profile group.
        """
elif False:
    SecurityRuleProfileSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityRuleProfileSettingArgs:
    def __init__(__self__, *,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: The security profile group.
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The security profile group.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "groups", value)


if not MYPY:
    class ServiceConnectionBgpPeerArgsDict(TypedDict):
        local_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LocalIpAddress param.
        """
        local_ipv6_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LocalIpv6Address param.
        """
        peer_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PeerIpAddress param.
        """
        peer_ipv6_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PeerIpv6Address param.
        """
        same_as_primary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The SameAsPrimary param.
        """
        secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Secret param.
        """
elif False:
    ServiceConnectionBgpPeerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceConnectionBgpPeerArgs:
    def __init__(__self__, *,
                 local_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 local_ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 same_as_primary: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] local_ip_address: The LocalIpAddress param.
        :param pulumi.Input[_builtins.str] local_ipv6_address: The LocalIpv6Address param.
        :param pulumi.Input[_builtins.str] peer_ip_address: The PeerIpAddress param.
        :param pulumi.Input[_builtins.str] peer_ipv6_address: The PeerIpv6Address param.
        :param pulumi.Input[_builtins.bool] same_as_primary: The SameAsPrimary param.
        :param pulumi.Input[_builtins.str] secret: The Secret param.
        """
        if local_ip_address is not None:
            pulumi.set(__self__, "local_ip_address", local_ip_address)
        if local_ipv6_address is not None:
            pulumi.set(__self__, "local_ipv6_address", local_ipv6_address)
        if peer_ip_address is not None:
            pulumi.set(__self__, "peer_ip_address", peer_ip_address)
        if peer_ipv6_address is not None:
            pulumi.set(__self__, "peer_ipv6_address", peer_ipv6_address)
        if same_as_primary is not None:
            pulumi.set(__self__, "same_as_primary", same_as_primary)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @_builtins.property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LocalIpAddress param.
        """
        return pulumi.get(self, "local_ip_address")

    @local_ip_address.setter
    def local_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="localIpv6Address")
    def local_ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LocalIpv6Address param.
        """
        return pulumi.get(self, "local_ipv6_address")

    @local_ipv6_address.setter
    def local_ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="peerIpAddress")
    def peer_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PeerIpAddress param.
        """
        return pulumi.get(self, "peer_ip_address")

    @peer_ip_address.setter
    def peer_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="peerIpv6Address")
    def peer_ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PeerIpv6Address param.
        """
        return pulumi.get(self, "peer_ipv6_address")

    @peer_ipv6_address.setter
    def peer_ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="sameAsPrimary")
    def same_as_primary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The SameAsPrimary param.
        """
        return pulumi.get(self, "same_as_primary")

    @same_as_primary.setter
    def same_as_primary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "same_as_primary", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Secret param.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class ServiceConnectionProtocolArgsDict(TypedDict):
        bgp: NotRequired[pulumi.Input['ServiceConnectionProtocolBgpArgsDict']]
        """
        The Bgp param.
        """
elif False:
    ServiceConnectionProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceConnectionProtocolArgs:
    def __init__(__self__, *,
                 bgp: Optional[pulumi.Input['ServiceConnectionProtocolBgpArgs']] = None):
        """
        :param pulumi.Input['ServiceConnectionProtocolBgpArgs'] bgp: The Bgp param.
        """
        if bgp is not None:
            pulumi.set(__self__, "bgp", bgp)

    @_builtins.property
    @pulumi.getter
    def bgp(self) -> Optional[pulumi.Input['ServiceConnectionProtocolBgpArgs']]:
        """
        The Bgp param.
        """
        return pulumi.get(self, "bgp")

    @bgp.setter
    def bgp(self, value: Optional[pulumi.Input['ServiceConnectionProtocolBgpArgs']]):
        pulumi.set(self, "bgp", value)


if not MYPY:
    class ServiceConnectionProtocolBgpArgsDict(TypedDict):
        do_not_export_routes: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The DoNotExportRoutes param.
        """
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Enable param.
        """
        fast_failover: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The FastFailover param.
        """
        local_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LocalIpAddress param.
        """
        originate_default_route: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The OriginateDefaultRoute param.
        """
        peer_as: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PeerAs param.
        """
        peer_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PeerIpAddress param.
        """
        secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Secret param.
        """
        summarize_mobile_user_routes: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The SummarizeMobileUserRoutes param.
        """
elif False:
    ServiceConnectionProtocolBgpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceConnectionProtocolBgpArgs:
    def __init__(__self__, *,
                 do_not_export_routes: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 fast_failover: Optional[pulumi.Input[_builtins.bool]] = None,
                 local_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 originate_default_route: Optional[pulumi.Input[_builtins.bool]] = None,
                 peer_as: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None,
                 summarize_mobile_user_routes: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] do_not_export_routes: The DoNotExportRoutes param.
        :param pulumi.Input[_builtins.bool] enable: The Enable param.
        :param pulumi.Input[_builtins.bool] fast_failover: The FastFailover param.
        :param pulumi.Input[_builtins.str] local_ip_address: The LocalIpAddress param.
        :param pulumi.Input[_builtins.bool] originate_default_route: The OriginateDefaultRoute param.
        :param pulumi.Input[_builtins.str] peer_as: The PeerAs param.
        :param pulumi.Input[_builtins.str] peer_ip_address: The PeerIpAddress param.
        :param pulumi.Input[_builtins.str] secret: The Secret param.
        :param pulumi.Input[_builtins.bool] summarize_mobile_user_routes: The SummarizeMobileUserRoutes param.
        """
        if do_not_export_routes is not None:
            pulumi.set(__self__, "do_not_export_routes", do_not_export_routes)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if fast_failover is not None:
            pulumi.set(__self__, "fast_failover", fast_failover)
        if local_ip_address is not None:
            pulumi.set(__self__, "local_ip_address", local_ip_address)
        if originate_default_route is not None:
            pulumi.set(__self__, "originate_default_route", originate_default_route)
        if peer_as is not None:
            pulumi.set(__self__, "peer_as", peer_as)
        if peer_ip_address is not None:
            pulumi.set(__self__, "peer_ip_address", peer_ip_address)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if summarize_mobile_user_routes is not None:
            pulumi.set(__self__, "summarize_mobile_user_routes", summarize_mobile_user_routes)

    @_builtins.property
    @pulumi.getter(name="doNotExportRoutes")
    def do_not_export_routes(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The DoNotExportRoutes param.
        """
        return pulumi.get(self, "do_not_export_routes")

    @do_not_export_routes.setter
    def do_not_export_routes(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "do_not_export_routes", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Enable param.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="fastFailover")
    def fast_failover(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The FastFailover param.
        """
        return pulumi.get(self, "fast_failover")

    @fast_failover.setter
    def fast_failover(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fast_failover", value)

    @_builtins.property
    @pulumi.getter(name="localIpAddress")
    def local_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LocalIpAddress param.
        """
        return pulumi.get(self, "local_ip_address")

    @local_ip_address.setter
    def local_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="originateDefaultRoute")
    def originate_default_route(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The OriginateDefaultRoute param.
        """
        return pulumi.get(self, "originate_default_route")

    @originate_default_route.setter
    def originate_default_route(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "originate_default_route", value)

    @_builtins.property
    @pulumi.getter(name="peerAs")
    def peer_as(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PeerAs param.
        """
        return pulumi.get(self, "peer_as")

    @peer_as.setter
    def peer_as(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_as", value)

    @_builtins.property
    @pulumi.getter(name="peerIpAddress")
    def peer_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PeerIpAddress param.
        """
        return pulumi.get(self, "peer_ip_address")

    @peer_ip_address.setter
    def peer_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ip_address", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Secret param.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)

    @_builtins.property
    @pulumi.getter(name="summarizeMobileUserRoutes")
    def summarize_mobile_user_routes(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The SummarizeMobileUserRoutes param.
        """
        return pulumi.get(self, "summarize_mobile_user_routes")

    @summarize_mobile_user_routes.setter
    def summarize_mobile_user_routes(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "summarize_mobile_user_routes", value)


if not MYPY:
    class ServiceConnectionQosArgsDict(TypedDict):
        enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Enable param.
        """
        qos_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        The QosProfile param.
        """
elif False:
    ServiceConnectionQosArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceConnectionQosArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 qos_profile: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable: The Enable param.
        :param pulumi.Input[_builtins.str] qos_profile: The QosProfile param.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Enable param.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The QosProfile param.
        """
        return pulumi.get(self, "qos_profile")

    @qos_profile.setter
    def qos_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_profile", value)


if not MYPY:
    class ServiceProtocolArgsDict(TypedDict):
        tcp: NotRequired[pulumi.Input['ServiceProtocolTcpArgsDict']]
        """
        The Tcp param. Ensure that only one of the following is specified: `tcp`, `udp`
        """
        udp: NotRequired[pulumi.Input['ServiceProtocolUdpArgsDict']]
        """
        The Udp param. Ensure that only one of the following is specified: `tcp`, `udp`
        """
elif False:
    ServiceProtocolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceProtocolArgs:
    def __init__(__self__, *,
                 tcp: Optional[pulumi.Input['ServiceProtocolTcpArgs']] = None,
                 udp: Optional[pulumi.Input['ServiceProtocolUdpArgs']] = None):
        """
        :param pulumi.Input['ServiceProtocolTcpArgs'] tcp: The Tcp param. Ensure that only one of the following is specified: `tcp`, `udp`
        :param pulumi.Input['ServiceProtocolUdpArgs'] udp: The Udp param. Ensure that only one of the following is specified: `tcp`, `udp`
        """
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['ServiceProtocolTcpArgs']]:
        """
        The Tcp param. Ensure that only one of the following is specified: `tcp`, `udp`
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['ServiceProtocolTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['ServiceProtocolUdpArgs']]:
        """
        The Udp param. Ensure that only one of the following is specified: `tcp`, `udp`
        """
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['ServiceProtocolUdpArgs']]):
        pulumi.set(self, "udp", value)


if not MYPY:
    class ServiceProtocolTcpArgsDict(TypedDict):
        port: pulumi.Input[_builtins.str]
        """
        The Port param. String length must be between 1 and 1023 characters.
        """
        override: NotRequired[pulumi.Input['ServiceProtocolTcpOverrideArgsDict']]
        """
        The Override param.
        """
        source_port: NotRequired[pulumi.Input[_builtins.str]]
        """
        The SourcePort param. String length must be between 1 and 1023 characters.
        """
elif False:
    ServiceProtocolTcpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceProtocolTcpArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[_builtins.str],
                 override: Optional[pulumi.Input['ServiceProtocolTcpOverrideArgs']] = None,
                 source_port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: The Port param. String length must be between 1 and 1023 characters.
        :param pulumi.Input['ServiceProtocolTcpOverrideArgs'] override: The Override param.
        :param pulumi.Input[_builtins.str] source_port: The SourcePort param. String length must be between 1 and 1023 characters.
        """
        pulumi.set(__self__, "port", port)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.str]:
        """
        The Port param. String length must be between 1 and 1023 characters.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input['ServiceProtocolTcpOverrideArgs']]:
        """
        The Override param.
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input['ServiceProtocolTcpOverrideArgs']]):
        pulumi.set(self, "override", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SourcePort param. String length must be between 1 and 1023 characters.
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_port", value)


if not MYPY:
    class ServiceProtocolTcpOverrideArgsDict(TypedDict):
        halfclose_timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        tcp session half-close timeout value (in second). Value must be between 1 and 604800. Default: `120`.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        tcp session timeout value (in second). Value must be between 1 and 604800. Default: `3600`.
        """
        timewait_timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        tcp session time-wait timeout value (in second). Value must be between 1 and 600. Default: `15`.
        """
elif False:
    ServiceProtocolTcpOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceProtocolTcpOverrideArgs:
    def __init__(__self__, *,
                 halfclose_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 timewait_timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] halfclose_timeout: tcp session half-close timeout value (in second). Value must be between 1 and 604800. Default: `120`.
        :param pulumi.Input[_builtins.int] timeout: tcp session timeout value (in second). Value must be between 1 and 604800. Default: `3600`.
        :param pulumi.Input[_builtins.int] timewait_timeout: tcp session time-wait timeout value (in second). Value must be between 1 and 600. Default: `15`.
        """
        if halfclose_timeout is not None:
            pulumi.set(__self__, "halfclose_timeout", halfclose_timeout)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timewait_timeout is not None:
            pulumi.set(__self__, "timewait_timeout", timewait_timeout)

    @_builtins.property
    @pulumi.getter(name="halfcloseTimeout")
    def halfclose_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        tcp session half-close timeout value (in second). Value must be between 1 and 604800. Default: `120`.
        """
        return pulumi.get(self, "halfclose_timeout")

    @halfclose_timeout.setter
    def halfclose_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "halfclose_timeout", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        tcp session timeout value (in second). Value must be between 1 and 604800. Default: `3600`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="timewaitTimeout")
    def timewait_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        tcp session time-wait timeout value (in second). Value must be between 1 and 600. Default: `15`.
        """
        return pulumi.get(self, "timewait_timeout")

    @timewait_timeout.setter
    def timewait_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timewait_timeout", value)


if not MYPY:
    class ServiceProtocolUdpArgsDict(TypedDict):
        port: pulumi.Input[_builtins.str]
        """
        The Port param. String length must be between 1 and 1023 characters.
        """
        override: NotRequired[pulumi.Input['ServiceProtocolUdpOverrideArgsDict']]
        """
        The Override param.
        """
        source_port: NotRequired[pulumi.Input[_builtins.str]]
        """
        The SourcePort param. String length must be between 1 and 1023 characters.
        """
elif False:
    ServiceProtocolUdpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceProtocolUdpArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[_builtins.str],
                 override: Optional[pulumi.Input['ServiceProtocolUdpOverrideArgs']] = None,
                 source_port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: The Port param. String length must be between 1 and 1023 characters.
        :param pulumi.Input['ServiceProtocolUdpOverrideArgs'] override: The Override param.
        :param pulumi.Input[_builtins.str] source_port: The SourcePort param. String length must be between 1 and 1023 characters.
        """
        pulumi.set(__self__, "port", port)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.str]:
        """
        The Port param. String length must be between 1 and 1023 characters.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input['ServiceProtocolUdpOverrideArgs']]:
        """
        The Override param.
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input['ServiceProtocolUdpOverrideArgs']]):
        pulumi.set(self, "override", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SourcePort param. String length must be between 1 and 1023 characters.
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_port", value)


if not MYPY:
    class ServiceProtocolUdpOverrideArgsDict(TypedDict):
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        udp session timeout value (in second). Value must be between 1 and 604800. Default: `30`.
        """
elif False:
    ServiceProtocolUdpOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceProtocolUdpOverrideArgs:
    def __init__(__self__, *,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] timeout: udp session timeout value (in second). Value must be between 1 and 604800. Default: `30`.
        """
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        udp session timeout value (in second). Value must be between 1 and 604800. Default: `30`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class TacacsServerProfileServerArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Address param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Port param. Value must be between 1 and 65535.
        """
        secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Secret param. String length must not exceed 64 characters.
        """
elif False:
    TacacsServerProfileServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TacacsServerProfileServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: The Address param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.int] port: The Port param. Value must be between 1 and 65535.
        :param pulumi.Input[_builtins.str] secret: The Secret param. String length must not exceed 64 characters.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Address param.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Port param. Value must be between 1 and 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Secret param. String length must not exceed 64 characters.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class TlsServiceProfileProtocolSettingsArgsDict(TypedDict):
        auth_algo_sha1: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow authentication SHA1.
        """
        auth_algo_sha256: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow authentication SHA256.
        """
        auth_algo_sha384: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow authentication SHA384.
        """
        enc_algo3des: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow algorithm 3DES.
        """
        enc_algo_aes128_cbc: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow algorithm AES-128-CBC.
        """
        enc_algo_aes128_gcm: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow algorithm AES-128-GCM.
        """
        enc_algo_aes256_cbc: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow algorithm AES-256-CBC.
        """
        enc_algo_aes256_gcm: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow algorithm AES-256-GCM.
        """
        enc_algo_rc4: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow algorithm RC4.
        """
        keyxchg_algo_dhe: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow algorithm DHE.
        """
        keyxchg_algo_ecdhe: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow algorithm ECDHE.
        """
        keyxchg_algo_rsa: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allow algorithm RSA.
        """
        max_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The MaxVersion param. String must be one of these: `"tls1-0"`, `"tls1-1"`, `"tls1-2"`, `"tls1-3"`, `"max"`. Default: `"max"`.
        """
        min_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The MinVersion param. String must be one of these: `"tls1-0"`, `"tls1-1"`, `"tls1-2"`. Default: `"tls1-0"`.
        """
elif False:
    TlsServiceProfileProtocolSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TlsServiceProfileProtocolSettingsArgs:
    def __init__(__self__, *,
                 auth_algo_sha1: Optional[pulumi.Input[_builtins.bool]] = None,
                 auth_algo_sha256: Optional[pulumi.Input[_builtins.bool]] = None,
                 auth_algo_sha384: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo3des: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_aes128_cbc: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_aes128_gcm: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_aes256_cbc: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_aes256_gcm: Optional[pulumi.Input[_builtins.bool]] = None,
                 enc_algo_rc4: Optional[pulumi.Input[_builtins.bool]] = None,
                 keyxchg_algo_dhe: Optional[pulumi.Input[_builtins.bool]] = None,
                 keyxchg_algo_ecdhe: Optional[pulumi.Input[_builtins.bool]] = None,
                 keyxchg_algo_rsa: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_version: Optional[pulumi.Input[_builtins.str]] = None,
                 min_version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] auth_algo_sha1: Allow authentication SHA1.
        :param pulumi.Input[_builtins.bool] auth_algo_sha256: Allow authentication SHA256.
        :param pulumi.Input[_builtins.bool] auth_algo_sha384: Allow authentication SHA384.
        :param pulumi.Input[_builtins.bool] enc_algo3des: Allow algorithm 3DES.
        :param pulumi.Input[_builtins.bool] enc_algo_aes128_cbc: Allow algorithm AES-128-CBC.
        :param pulumi.Input[_builtins.bool] enc_algo_aes128_gcm: Allow algorithm AES-128-GCM.
        :param pulumi.Input[_builtins.bool] enc_algo_aes256_cbc: Allow algorithm AES-256-CBC.
        :param pulumi.Input[_builtins.bool] enc_algo_aes256_gcm: Allow algorithm AES-256-GCM.
        :param pulumi.Input[_builtins.bool] enc_algo_rc4: Allow algorithm RC4.
        :param pulumi.Input[_builtins.bool] keyxchg_algo_dhe: Allow algorithm DHE.
        :param pulumi.Input[_builtins.bool] keyxchg_algo_ecdhe: Allow algorithm ECDHE.
        :param pulumi.Input[_builtins.bool] keyxchg_algo_rsa: Allow algorithm RSA.
        :param pulumi.Input[_builtins.str] max_version: The MaxVersion param. String must be one of these: `"tls1-0"`, `"tls1-1"`, `"tls1-2"`, `"tls1-3"`, `"max"`. Default: `"max"`.
        :param pulumi.Input[_builtins.str] min_version: The MinVersion param. String must be one of these: `"tls1-0"`, `"tls1-1"`, `"tls1-2"`. Default: `"tls1-0"`.
        """
        if auth_algo_sha1 is not None:
            pulumi.set(__self__, "auth_algo_sha1", auth_algo_sha1)
        if auth_algo_sha256 is not None:
            pulumi.set(__self__, "auth_algo_sha256", auth_algo_sha256)
        if auth_algo_sha384 is not None:
            pulumi.set(__self__, "auth_algo_sha384", auth_algo_sha384)
        if enc_algo3des is not None:
            pulumi.set(__self__, "enc_algo3des", enc_algo3des)
        if enc_algo_aes128_cbc is not None:
            pulumi.set(__self__, "enc_algo_aes128_cbc", enc_algo_aes128_cbc)
        if enc_algo_aes128_gcm is not None:
            pulumi.set(__self__, "enc_algo_aes128_gcm", enc_algo_aes128_gcm)
        if enc_algo_aes256_cbc is not None:
            pulumi.set(__self__, "enc_algo_aes256_cbc", enc_algo_aes256_cbc)
        if enc_algo_aes256_gcm is not None:
            pulumi.set(__self__, "enc_algo_aes256_gcm", enc_algo_aes256_gcm)
        if enc_algo_rc4 is not None:
            pulumi.set(__self__, "enc_algo_rc4", enc_algo_rc4)
        if keyxchg_algo_dhe is not None:
            pulumi.set(__self__, "keyxchg_algo_dhe", keyxchg_algo_dhe)
        if keyxchg_algo_ecdhe is not None:
            pulumi.set(__self__, "keyxchg_algo_ecdhe", keyxchg_algo_ecdhe)
        if keyxchg_algo_rsa is not None:
            pulumi.set(__self__, "keyxchg_algo_rsa", keyxchg_algo_rsa)
        if max_version is not None:
            pulumi.set(__self__, "max_version", max_version)
        if min_version is not None:
            pulumi.set(__self__, "min_version", min_version)

    @_builtins.property
    @pulumi.getter(name="authAlgoSha1")
    def auth_algo_sha1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow authentication SHA1.
        """
        return pulumi.get(self, "auth_algo_sha1")

    @auth_algo_sha1.setter
    def auth_algo_sha1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auth_algo_sha1", value)

    @_builtins.property
    @pulumi.getter(name="authAlgoSha256")
    def auth_algo_sha256(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow authentication SHA256.
        """
        return pulumi.get(self, "auth_algo_sha256")

    @auth_algo_sha256.setter
    def auth_algo_sha256(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auth_algo_sha256", value)

    @_builtins.property
    @pulumi.getter(name="authAlgoSha384")
    def auth_algo_sha384(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow authentication SHA384.
        """
        return pulumi.get(self, "auth_algo_sha384")

    @auth_algo_sha384.setter
    def auth_algo_sha384(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auth_algo_sha384", value)

    @_builtins.property
    @pulumi.getter(name="encAlgo3des")
    def enc_algo3des(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow algorithm 3DES.
        """
        return pulumi.get(self, "enc_algo3des")

    @enc_algo3des.setter
    def enc_algo3des(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo3des", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoAes128Cbc")
    def enc_algo_aes128_cbc(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow algorithm AES-128-CBC.
        """
        return pulumi.get(self, "enc_algo_aes128_cbc")

    @enc_algo_aes128_cbc.setter
    def enc_algo_aes128_cbc(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_aes128_cbc", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoAes128Gcm")
    def enc_algo_aes128_gcm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow algorithm AES-128-GCM.
        """
        return pulumi.get(self, "enc_algo_aes128_gcm")

    @enc_algo_aes128_gcm.setter
    def enc_algo_aes128_gcm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_aes128_gcm", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoAes256Cbc")
    def enc_algo_aes256_cbc(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow algorithm AES-256-CBC.
        """
        return pulumi.get(self, "enc_algo_aes256_cbc")

    @enc_algo_aes256_cbc.setter
    def enc_algo_aes256_cbc(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_aes256_cbc", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoAes256Gcm")
    def enc_algo_aes256_gcm(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow algorithm AES-256-GCM.
        """
        return pulumi.get(self, "enc_algo_aes256_gcm")

    @enc_algo_aes256_gcm.setter
    def enc_algo_aes256_gcm(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_aes256_gcm", value)

    @_builtins.property
    @pulumi.getter(name="encAlgoRc4")
    def enc_algo_rc4(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow algorithm RC4.
        """
        return pulumi.get(self, "enc_algo_rc4")

    @enc_algo_rc4.setter
    def enc_algo_rc4(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enc_algo_rc4", value)

    @_builtins.property
    @pulumi.getter(name="keyxchgAlgoDhe")
    def keyxchg_algo_dhe(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow algorithm DHE.
        """
        return pulumi.get(self, "keyxchg_algo_dhe")

    @keyxchg_algo_dhe.setter
    def keyxchg_algo_dhe(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keyxchg_algo_dhe", value)

    @_builtins.property
    @pulumi.getter(name="keyxchgAlgoEcdhe")
    def keyxchg_algo_ecdhe(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow algorithm ECDHE.
        """
        return pulumi.get(self, "keyxchg_algo_ecdhe")

    @keyxchg_algo_ecdhe.setter
    def keyxchg_algo_ecdhe(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keyxchg_algo_ecdhe", value)

    @_builtins.property
    @pulumi.getter(name="keyxchgAlgoRsa")
    def keyxchg_algo_rsa(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow algorithm RSA.
        """
        return pulumi.get(self, "keyxchg_algo_rsa")

    @keyxchg_algo_rsa.setter
    def keyxchg_algo_rsa(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keyxchg_algo_rsa", value)

    @_builtins.property
    @pulumi.getter(name="maxVersion")
    def max_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MaxVersion param. String must be one of these: `"tls1-0"`, `"tls1-1"`, `"tls1-2"`, `"tls1-3"`, `"max"`. Default: `"max"`.
        """
        return pulumi.get(self, "max_version")

    @max_version.setter
    def max_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_version", value)

    @_builtins.property
    @pulumi.getter(name="minVersion")
    def min_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MinVersion param. String must be one of these: `"tls1-0"`, `"tls1-1"`, `"tls1-2"`. Default: `"tls1-0"`.
        """
        return pulumi.get(self, "min_version")

    @min_version.setter
    def min_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "min_version", value)


if not MYPY:
    class TrafficSteeringRuleActionArgsDict(TypedDict):
        forward: NotRequired[pulumi.Input['TrafficSteeringRuleActionForwardArgsDict']]
        """
        The Forward param. Ensure that only one of the following is specified: `forward`, `no-pbf`
        """
        no_pbf: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The NoPbf param. Ensure that only one of the following is specified: `forward`, `no-pbf`
        """
elif False:
    TrafficSteeringRuleActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrafficSteeringRuleActionArgs:
    def __init__(__self__, *,
                 forward: Optional[pulumi.Input['TrafficSteeringRuleActionForwardArgs']] = None,
                 no_pbf: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input['TrafficSteeringRuleActionForwardArgs'] forward: The Forward param. Ensure that only one of the following is specified: `forward`, `no-pbf`
        :param pulumi.Input[_builtins.bool] no_pbf: The NoPbf param. Ensure that only one of the following is specified: `forward`, `no-pbf`
        """
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if no_pbf is not None:
            pulumi.set(__self__, "no_pbf", no_pbf)

    @_builtins.property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input['TrafficSteeringRuleActionForwardArgs']]:
        """
        The Forward param. Ensure that only one of the following is specified: `forward`, `no-pbf`
        """
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input['TrafficSteeringRuleActionForwardArgs']]):
        pulumi.set(self, "forward", value)

    @_builtins.property
    @pulumi.getter(name="noPbf")
    def no_pbf(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The NoPbf param. Ensure that only one of the following is specified: `forward`, `no-pbf`
        """
        return pulumi.get(self, "no_pbf")

    @no_pbf.setter
    def no_pbf(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_pbf", value)


if not MYPY:
    class TrafficSteeringRuleActionForwardArgsDict(TypedDict):
        target: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Target param.
        """
elif False:
    TrafficSteeringRuleActionForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrafficSteeringRuleActionForwardArgs:
    def __init__(__self__, *,
                 target: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] target: The Target param.
        """
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Target param.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class UrlAccessProfileCredentialEnforcementArgsDict(TypedDict):
        alerts: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Alerts param.
        """
        allows: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Allows param.
        """
        blocks: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Blocks param.
        """
        continues: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Continues param.
        """
        log_severity: NotRequired[pulumi.Input[_builtins.str]]
        """
        The LogSeverity param. Default: `"medium"`.
        """
        mode: NotRequired[pulumi.Input['UrlAccessProfileCredentialEnforcementModeArgsDict']]
        """
        The Mode param.
        """
elif False:
    UrlAccessProfileCredentialEnforcementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UrlAccessProfileCredentialEnforcementArgs:
    def __init__(__self__, *,
                 alerts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allows: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 blocks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 continues: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 log_severity: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input['UrlAccessProfileCredentialEnforcementModeArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alerts: The Alerts param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allows: The Allows param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] blocks: The Blocks param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] continues: The Continues param.
        :param pulumi.Input[_builtins.str] log_severity: The LogSeverity param. Default: `"medium"`.
        :param pulumi.Input['UrlAccessProfileCredentialEnforcementModeArgs'] mode: The Mode param.
        """
        if alerts is not None:
            pulumi.set(__self__, "alerts", alerts)
        if allows is not None:
            pulumi.set(__self__, "allows", allows)
        if blocks is not None:
            pulumi.set(__self__, "blocks", blocks)
        if continues is not None:
            pulumi.set(__self__, "continues", continues)
        if log_severity is not None:
            pulumi.set(__self__, "log_severity", log_severity)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def alerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Alerts param.
        """
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "alerts", value)

    @_builtins.property
    @pulumi.getter
    def allows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Allows param.
        """
        return pulumi.get(self, "allows")

    @allows.setter
    def allows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allows", value)

    @_builtins.property
    @pulumi.getter
    def blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Blocks param.
        """
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "blocks", value)

    @_builtins.property
    @pulumi.getter
    def continues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Continues param.
        """
        return pulumi.get(self, "continues")

    @continues.setter
    def continues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "continues", value)

    @_builtins.property
    @pulumi.getter(name="logSeverity")
    def log_severity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LogSeverity param. Default: `"medium"`.
        """
        return pulumi.get(self, "log_severity")

    @log_severity.setter
    def log_severity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_severity", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input['UrlAccessProfileCredentialEnforcementModeArgs']]:
        """
        The Mode param.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input['UrlAccessProfileCredentialEnforcementModeArgs']]):
        pulumi.set(self, "mode", value)


if not MYPY:
    class UrlAccessProfileCredentialEnforcementModeArgsDict(TypedDict):
        disabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Disabled param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        """
        domain_credentials: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The DomainCredentials param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        """
        group_mapping: NotRequired[pulumi.Input[_builtins.str]]
        """
        The GroupMapping param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        """
        ip_user: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The IpUser param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        """
elif False:
    UrlAccessProfileCredentialEnforcementModeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UrlAccessProfileCredentialEnforcementModeArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 domain_credentials: Optional[pulumi.Input[_builtins.bool]] = None,
                 group_mapping: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_user: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] disabled: The Disabled param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        :param pulumi.Input[_builtins.bool] domain_credentials: The DomainCredentials param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        :param pulumi.Input[_builtins.str] group_mapping: The GroupMapping param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        :param pulumi.Input[_builtins.bool] ip_user: The IpUser param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if domain_credentials is not None:
            pulumi.set(__self__, "domain_credentials", domain_credentials)
        if group_mapping is not None:
            pulumi.set(__self__, "group_mapping", group_mapping)
        if ip_user is not None:
            pulumi.set(__self__, "ip_user", ip_user)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Disabled param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter(name="domainCredentials")
    def domain_credentials(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The DomainCredentials param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        """
        return pulumi.get(self, "domain_credentials")

    @domain_credentials.setter
    def domain_credentials(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "domain_credentials", value)

    @_builtins.property
    @pulumi.getter(name="groupMapping")
    def group_mapping(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GroupMapping param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        """
        return pulumi.get(self, "group_mapping")

    @group_mapping.setter
    def group_mapping(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_mapping", value)

    @_builtins.property
    @pulumi.getter(name="ipUser")
    def ip_user(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The IpUser param. Ensure that only one of the following is specified: `disabled`, `domain_credentials`, `group_mapping`, `ip_user`
        """
        return pulumi.get(self, "ip_user")

    @ip_user.setter
    def ip_user(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_user", value)


if not MYPY:
    class VulnerabilityProtectionProfileRuleArgsDict(TypedDict):
        action: NotRequired[pulumi.Input['VulnerabilityProtectionProfileRuleActionArgsDict']]
        """
        The Action param.
        """
        category: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Category param. String must be one of these: `"any"`, `"brute-force"`, `"code-execution"`, `"code-obfuscation"`, `"command-execution"`, `"dos"`, `"exploit-kit"`, `"info-leak"`, `"insecure-credentials"`, `"overflow"`, `"phishing"`, `"protocol-anomaly"`, `"scan"`, `"sql-injection"`.
        """
        cves: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Cves param.
        """
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Host param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        packet_capture: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        severities: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Severities param.
        """
        threat_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ThreatName param.
        """
        vendor_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The VendorIds param.
        """
elif False:
    VulnerabilityProtectionProfileRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionProfileRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VulnerabilityProtectionProfileRuleActionArgs']] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 cves: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 packet_capture: Optional[pulumi.Input[_builtins.str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 threat_name: Optional[pulumi.Input[_builtins.str]] = None,
                 vendor_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input['VulnerabilityProtectionProfileRuleActionArgs'] action: The Action param.
        :param pulumi.Input[_builtins.str] category: The Category param. String must be one of these: `"any"`, `"brute-force"`, `"code-execution"`, `"code-obfuscation"`, `"command-execution"`, `"dos"`, `"exploit-kit"`, `"info-leak"`, `"insecure-credentials"`, `"overflow"`, `"phishing"`, `"protocol-anomaly"`, `"scan"`, `"sql-injection"`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cves: The Cves param.
        :param pulumi.Input[_builtins.str] host: The Host param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] packet_capture: The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] severities: The Severities param.
        :param pulumi.Input[_builtins.str] threat_name: The ThreatName param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vendor_ids: The VendorIds param.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if cves is not None:
            pulumi.set(__self__, "cves", cves)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)
        if threat_name is not None:
            pulumi.set(__self__, "threat_name", threat_name)
        if vendor_ids is not None:
            pulumi.set(__self__, "vendor_ids", vendor_ids)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VulnerabilityProtectionProfileRuleActionArgs']]:
        """
        The Action param.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VulnerabilityProtectionProfileRuleActionArgs']]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Category param. String must be one of these: `"any"`, `"brute-force"`, `"code-execution"`, `"code-obfuscation"`, `"command-execution"`, `"dos"`, `"exploit-kit"`, `"info-leak"`, `"insecure-credentials"`, `"overflow"`, `"phishing"`, `"protocol-anomaly"`, `"scan"`, `"sql-injection"`.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter
    def cves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Cves param.
        """
        return pulumi.get(self, "cves")

    @cves.setter
    def cves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cves", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Host param.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        return pulumi.get(self, "packet_capture")

    @packet_capture.setter
    def packet_capture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_capture", value)

    @_builtins.property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Severities param.
        """
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "severities", value)

    @_builtins.property
    @pulumi.getter(name="threatName")
    def threat_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ThreatName param.
        """
        return pulumi.get(self, "threat_name")

    @threat_name.setter
    def threat_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "threat_name", value)

    @_builtins.property
    @pulumi.getter(name="vendorIds")
    def vendor_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The VendorIds param.
        """
        return pulumi.get(self, "vendor_ids")

    @vendor_ids.setter
    def vendor_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vendor_ids", value)


if not MYPY:
    class VulnerabilityProtectionProfileRuleActionArgsDict(TypedDict):
        alert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        allow: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        block_ip: NotRequired[pulumi.Input['VulnerabilityProtectionProfileRuleActionBlockIpArgsDict']]
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Default param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        drop: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_both: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_client: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_server: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
elif False:
    VulnerabilityProtectionProfileRuleActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionProfileRuleActionArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_ip: Optional[pulumi.Input['VulnerabilityProtectionProfileRuleActionBlockIpArgs']] = None,
                 default: Optional[pulumi.Input[_builtins.bool]] = None,
                 drop: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_both: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_client: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_server: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] alert: The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] allow: The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input['VulnerabilityProtectionProfileRuleActionBlockIpArgs'] block_ip: The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] default: The Default param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] drop: The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_both: The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_client: The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_server: The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if block_ip is not None:
            pulumi.set(__self__, "block_ip", block_ip)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if reset_both is not None:
            pulumi.set(__self__, "reset_both", reset_both)
        if reset_client is not None:
            pulumi.set(__self__, "reset_client", reset_client)
        if reset_server is not None:
            pulumi.set(__self__, "reset_server", reset_server)

    @_builtins.property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alert", value)

    @_builtins.property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow", value)

    @_builtins.property
    @pulumi.getter(name="blockIp")
    def block_ip(self) -> Optional[pulumi.Input['VulnerabilityProtectionProfileRuleActionBlockIpArgs']]:
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "block_ip")

    @block_ip.setter
    def block_ip(self, value: Optional[pulumi.Input['VulnerabilityProtectionProfileRuleActionBlockIpArgs']]):
        pulumi.set(self, "block_ip", value)

    @_builtins.property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Default param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default", value)

    @_builtins.property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop", value)

    @_builtins.property
    @pulumi.getter(name="resetBoth")
    def reset_both(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_both")

    @reset_both.setter
    def reset_both(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_both", value)

    @_builtins.property
    @pulumi.getter(name="resetClient")
    def reset_client(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_client")

    @reset_client.setter
    def reset_client(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_client", value)

    @_builtins.property
    @pulumi.getter(name="resetServer")
    def reset_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_server")

    @reset_server.setter
    def reset_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_server", value)


if not MYPY:
    class VulnerabilityProtectionProfileRuleActionBlockIpArgsDict(TypedDict):
        duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Duration param. Value must be between 1 and 3600.
        """
        track_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
elif False:
    VulnerabilityProtectionProfileRuleActionBlockIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionProfileRuleActionBlockIpArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 track_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] duration: The Duration param. Value must be between 1 and 3600.
        :param pulumi.Input[_builtins.str] track_by: The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if track_by is not None:
            pulumi.set(__self__, "track_by", track_by)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Duration param. Value must be between 1 and 3600.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="trackBy")
    def track_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        return pulumi.get(self, "track_by")

    @track_by.setter
    def track_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_by", value)


if not MYPY:
    class VulnerabilityProtectionProfileThreatExceptionArgsDict(TypedDict):
        action: NotRequired[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionArgsDict']]
        """
        The Action param.
        """
        exempt_ips: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionExemptIpArgsDict']]]]
        """
        The ExemptIps param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        notes: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Notes param.
        """
        packet_capture: NotRequired[pulumi.Input[_builtins.str]]
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        time_attribute: NotRequired[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgsDict']]
        """
        The TimeAttribute param.
        """
elif False:
    VulnerabilityProtectionProfileThreatExceptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionProfileThreatExceptionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionArgs']] = None,
                 exempt_ips: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionExemptIpArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 packet_capture: Optional[pulumi.Input[_builtins.str]] = None,
                 time_attribute: Optional[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgs']] = None):
        """
        :param pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionArgs'] action: The Action param.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionExemptIpArgs']]] exempt_ips: The ExemptIps param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] notes: The Notes param.
        :param pulumi.Input[_builtins.str] packet_capture: The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        :param pulumi.Input['VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgs'] time_attribute: The TimeAttribute param.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)
        if time_attribute is not None:
            pulumi.set(__self__, "time_attribute", time_attribute)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionArgs']]:
        """
        The Action param.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionArgs']]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionExemptIpArgs']]]]:
        """
        The ExemptIps param.
        """
        return pulumi.get(self, "exempt_ips")

    @exempt_ips.setter
    def exempt_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionExemptIpArgs']]]]):
        pulumi.set(self, "exempt_ips", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Notes param.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PacketCapture param. String must be one of these: `"disable"`, `"single-packet"`, `"extended-capture"`.
        """
        return pulumi.get(self, "packet_capture")

    @packet_capture.setter
    def packet_capture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_capture", value)

    @_builtins.property
    @pulumi.getter(name="timeAttribute")
    def time_attribute(self) -> Optional[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgs']]:
        """
        The TimeAttribute param.
        """
        return pulumi.get(self, "time_attribute")

    @time_attribute.setter
    def time_attribute(self, value: Optional[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgs']]):
        pulumi.set(self, "time_attribute", value)


if not MYPY:
    class VulnerabilityProtectionProfileThreatExceptionActionArgsDict(TypedDict):
        alert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        allow: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        block_ip: NotRequired[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgsDict']]
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Default param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        drop: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_both: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_client: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_server: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
elif False:
    VulnerabilityProtectionProfileThreatExceptionActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionProfileThreatExceptionActionArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_ip: Optional[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgs']] = None,
                 default: Optional[pulumi.Input[_builtins.bool]] = None,
                 drop: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_both: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_client: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_server: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] alert: The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] allow: The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgs'] block_ip: The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] default: The Default param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] drop: The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_both: The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_client: The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_server: The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if block_ip is not None:
            pulumi.set(__self__, "block_ip", block_ip)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if reset_both is not None:
            pulumi.set(__self__, "reset_both", reset_both)
        if reset_client is not None:
            pulumi.set(__self__, "reset_client", reset_client)
        if reset_server is not None:
            pulumi.set(__self__, "reset_server", reset_server)

    @_builtins.property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alert", value)

    @_builtins.property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow", value)

    @_builtins.property
    @pulumi.getter(name="blockIp")
    def block_ip(self) -> Optional[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgs']]:
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "block_ip")

    @block_ip.setter
    def block_ip(self, value: Optional[pulumi.Input['VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgs']]):
        pulumi.set(self, "block_ip", value)

    @_builtins.property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Default param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default", value)

    @_builtins.property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop", value)

    @_builtins.property
    @pulumi.getter(name="resetBoth")
    def reset_both(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_both")

    @reset_both.setter
    def reset_both(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_both", value)

    @_builtins.property
    @pulumi.getter(name="resetClient")
    def reset_client(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_client")

    @reset_client.setter
    def reset_client(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_client", value)

    @_builtins.property
    @pulumi.getter(name="resetServer")
    def reset_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `default`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_server")

    @reset_server.setter
    def reset_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_server", value)


if not MYPY:
    class VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgsDict(TypedDict):
        duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Duration param. Value must be between 1 and 3600.
        """
        track_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
elif False:
    VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionProfileThreatExceptionActionBlockIpArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 track_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] duration: The Duration param. Value must be between 1 and 3600.
        :param pulumi.Input[_builtins.str] track_by: The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if track_by is not None:
            pulumi.set(__self__, "track_by", track_by)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Duration param. Value must be between 1 and 3600.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="trackBy")
    def track_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        return pulumi.get(self, "track_by")

    @track_by.setter
    def track_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_by", value)


if not MYPY:
    class VulnerabilityProtectionProfileThreatExceptionExemptIpArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
elif False:
    VulnerabilityProtectionProfileThreatExceptionExemptIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionProfileThreatExceptionExemptIpArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgsDict(TypedDict):
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Interval param. Value must be between 1 and 3600.
        """
        threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Threshold param. Value must be between 1 and 65535.
        """
        track_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TrackBy param. String must be one of these: `"source"`, `"destination"`, `"source-and-destination"`.
        """
elif False:
    VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionProfileThreatExceptionTimeAttributeArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 track_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] interval: The Interval param. Value must be between 1 and 3600.
        :param pulumi.Input[_builtins.int] threshold: The Threshold param. Value must be between 1 and 65535.
        :param pulumi.Input[_builtins.str] track_by: The TrackBy param. String must be one of these: `"source"`, `"destination"`, `"source-and-destination"`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if track_by is not None:
            pulumi.set(__self__, "track_by", track_by)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Interval param. Value must be between 1 and 3600.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Threshold param. Value must be between 1 and 65535.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter(name="trackBy")
    def track_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TrackBy param. String must be one of these: `"source"`, `"destination"`, `"source-and-destination"`.
        """
        return pulumi.get(self, "track_by")

    @track_by.setter
    def track_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_by", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesAffectedHostArgsDict(TypedDict):
        client: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Client param. Ensure that only one of the following is specified: `client`, `server`
        """
        server: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Server param. Ensure that only one of the following is specified: `client`, `server`
        """
elif False:
    VulnerabilityProtectionSignaturesAffectedHostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesAffectedHostArgs:
    def __init__(__self__, *,
                 client: Optional[pulumi.Input[_builtins.bool]] = None,
                 server: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] client: The Client param. Ensure that only one of the following is specified: `client`, `server`
        :param pulumi.Input[_builtins.bool] server: The Server param. Ensure that only one of the following is specified: `client`, `server`
        """
        if client is not None:
            pulumi.set(__self__, "client", client)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @_builtins.property
    @pulumi.getter
    def client(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Client param. Ensure that only one of the following is specified: `client`, `server`
        """
        return pulumi.get(self, "client")

    @client.setter
    def client(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "client", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Server param. Ensure that only one of the following is specified: `client`, `server`
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "server", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesDefaultActionArgsDict(TypedDict):
        alert: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        allow: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        block_ip: NotRequired[pulumi.Input['VulnerabilityProtectionSignaturesDefaultActionBlockIpArgsDict']]
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        drop: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_both: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_client: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        reset_server: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
elif False:
    VulnerabilityProtectionSignaturesDefaultActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesDefaultActionArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[_builtins.bool]] = None,
                 allow: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_ip: Optional[pulumi.Input['VulnerabilityProtectionSignaturesDefaultActionBlockIpArgs']] = None,
                 drop: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_both: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_client: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_server: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] alert: The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] allow: The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input['VulnerabilityProtectionSignaturesDefaultActionBlockIpArgs'] block_ip: The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] drop: The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_both: The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_client: The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        :param pulumi.Input[_builtins.bool] reset_server: The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if block_ip is not None:
            pulumi.set(__self__, "block_ip", block_ip)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if reset_both is not None:
            pulumi.set(__self__, "reset_both", reset_both)
        if reset_client is not None:
            pulumi.set(__self__, "reset_client", reset_client)
        if reset_server is not None:
            pulumi.set(__self__, "reset_server", reset_server)

    @_builtins.property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Alert param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "alert", value)

    @_builtins.property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Allow param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow", value)

    @_builtins.property
    @pulumi.getter(name="blockIp")
    def block_ip(self) -> Optional[pulumi.Input['VulnerabilityProtectionSignaturesDefaultActionBlockIpArgs']]:
        """
        The BlockIp param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "block_ip")

    @block_ip.setter
    def block_ip(self, value: Optional[pulumi.Input['VulnerabilityProtectionSignaturesDefaultActionBlockIpArgs']]):
        pulumi.set(self, "block_ip", value)

    @_builtins.property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Drop param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop", value)

    @_builtins.property
    @pulumi.getter(name="resetBoth")
    def reset_both(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetBoth param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_both")

    @reset_both.setter
    def reset_both(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_both", value)

    @_builtins.property
    @pulumi.getter(name="resetClient")
    def reset_client(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetClient param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_client")

    @reset_client.setter
    def reset_client(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_client", value)

    @_builtins.property
    @pulumi.getter(name="resetServer")
    def reset_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The ResetServer param. Ensure that only one of the following is specified: `alert`, `allow`, `block_ip`, `drop`, `reset_both`, `reset_client`, `reset_server`
        """
        return pulumi.get(self, "reset_server")

    @reset_server.setter
    def reset_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_server", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesDefaultActionBlockIpArgsDict(TypedDict):
        duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Duration param. Value must be between 1 and 3600.
        """
        track_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
elif False:
    VulnerabilityProtectionSignaturesDefaultActionBlockIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesDefaultActionBlockIpArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[_builtins.int]] = None,
                 track_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] duration: The Duration param. Value must be between 1 and 3600.
        :param pulumi.Input[_builtins.str] track_by: The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if track_by is not None:
            pulumi.set(__self__, "track_by", track_by)

    @_builtins.property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Duration param. Value must be between 1 and 3600.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "duration", value)

    @_builtins.property
    @pulumi.getter(name="trackBy")
    def track_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`.
        """
        return pulumi.get(self, "track_by")

    @track_by.setter
    def track_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_by", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureArgsDict(TypedDict):
        combination: NotRequired[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationArgsDict']]
        """
        The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
        """
        standards: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardArgsDict']]]]
        """
        The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureArgs:
    def __init__(__self__, *,
                 combination: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationArgs']] = None,
                 standards: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardArgs']]]] = None):
        """
        :param pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationArgs'] combination: The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardArgs']]] standards: The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
        """
        if combination is not None:
            pulumi.set(__self__, "combination", combination)
        if standards is not None:
            pulumi.set(__self__, "standards", standards)

    @_builtins.property
    @pulumi.getter
    def combination(self) -> Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationArgs']]:
        """
        The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
        """
        return pulumi.get(self, "combination")

    @combination.setter
    def combination(self, value: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationArgs']]):
        pulumi.set(self, "combination", value)

    @_builtins.property
    @pulumi.getter
    def standards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardArgs']]]]:
        """
        The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
        """
        return pulumi.get(self, "standards")

    @standards.setter
    def standards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardArgs']]]]):
        pulumi.set(self, "standards", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureCombinationArgsDict(TypedDict):
        and_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgsDict']]]]
        """
        The AndConditions param.
        """
        order_free: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The OrderFree param. Default: `false`.
        """
        time_attribute: NotRequired[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgsDict']]
        """
        The TimeAttribute param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureCombinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureCombinationArgs:
    def __init__(__self__, *,
                 and_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgs']]]] = None,
                 order_free: Optional[pulumi.Input[_builtins.bool]] = None,
                 time_attribute: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgs']]] and_conditions: The AndConditions param.
        :param pulumi.Input[_builtins.bool] order_free: The OrderFree param. Default: `false`.
        :param pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgs'] time_attribute: The TimeAttribute param.
        """
        if and_conditions is not None:
            pulumi.set(__self__, "and_conditions", and_conditions)
        if order_free is not None:
            pulumi.set(__self__, "order_free", order_free)
        if time_attribute is not None:
            pulumi.set(__self__, "time_attribute", time_attribute)

    @_builtins.property
    @pulumi.getter(name="andConditions")
    def and_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgs']]]]:
        """
        The AndConditions param.
        """
        return pulumi.get(self, "and_conditions")

    @and_conditions.setter
    def and_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgs']]]]):
        pulumi.set(self, "and_conditions", value)

    @_builtins.property
    @pulumi.getter(name="orderFree")
    def order_free(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The OrderFree param. Default: `false`.
        """
        return pulumi.get(self, "order_free")

    @order_free.setter
    def order_free(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "order_free", value)

    @_builtins.property
    @pulumi.getter(name="timeAttribute")
    def time_attribute(self) -> Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgs']]:
        """
        The TimeAttribute param.
        """
        return pulumi.get(self, "time_attribute")

    @time_attribute.setter
    def time_attribute(self, value: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgs']]):
        pulumi.set(self, "time_attribute", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        or_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgsDict']]]]
        """
        The OrConditions param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureCombinationAndConditionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 or_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgs']]] or_conditions: The OrConditions param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if or_conditions is not None:
            pulumi.set(__self__, "or_conditions", or_conditions)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orConditions")
    def or_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgs']]]]:
        """
        The OrConditions param.
        """
        return pulumi.get(self, "or_conditions")

    @or_conditions.setter
    def or_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgs']]]]):
        pulumi.set(self, "or_conditions", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        threat_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ThreatId param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureCombinationAndConditionOrConditionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 threat_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] threat_id: The ThreatId param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if threat_id is not None:
            pulumi.set(__self__, "threat_id", threat_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="threatId")
    def threat_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ThreatId param.
        """
        return pulumi.get(self, "threat_id")

    @threat_id.setter
    def threat_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "threat_id", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgsDict(TypedDict):
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Interval param. Value must be between 1 and 3600.
        """
        threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Threshold param. Value must be between 1 and 255.
        """
        track_by: NotRequired[pulumi.Input[_builtins.str]]
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`, `"destination"`.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureCombinationTimeAttributeArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 track_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] interval: The Interval param. Value must be between 1 and 3600.
        :param pulumi.Input[_builtins.int] threshold: The Threshold param. Value must be between 1 and 255.
        :param pulumi.Input[_builtins.str] track_by: The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`, `"destination"`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if track_by is not None:
            pulumi.set(__self__, "track_by", track_by)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Interval param. Value must be between 1 and 3600.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Threshold param. Value must be between 1 and 255.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter(name="trackBy")
    def track_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The TrackBy param. String must be one of these: `"source-and-destination"`, `"source"`, `"destination"`.
        """
        return pulumi.get(self, "track_by")

    @track_by.setter
    def track_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_by", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The Name param.
        """
        and_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgsDict']]]]
        """
        The AndConditions param.
        """
        comment: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Comment param. String length must not exceed 256 characters.
        """
        order_free: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The OrderFree param. Default: `false`.
        """
        scope: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Scope param. String must be one of these: `"protocol-data-unit"`, `"session"`.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 and_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgs']]]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 order_free: Optional[pulumi.Input[_builtins.bool]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgs']]] and_conditions: The AndConditions param.
        :param pulumi.Input[_builtins.str] comment: The Comment param. String length must not exceed 256 characters.
        :param pulumi.Input[_builtins.bool] order_free: The OrderFree param. Default: `false`.
        :param pulumi.Input[_builtins.str] scope: The Scope param. String must be one of these: `"protocol-data-unit"`, `"session"`.
        """
        pulumi.set(__self__, "name", name)
        if and_conditions is not None:
            pulumi.set(__self__, "and_conditions", and_conditions)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if order_free is not None:
            pulumi.set(__self__, "order_free", order_free)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="andConditions")
    def and_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgs']]]]:
        """
        The AndConditions param.
        """
        return pulumi.get(self, "and_conditions")

    @and_conditions.setter
    def and_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgs']]]]):
        pulumi.set(self, "and_conditions", value)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Comment param. String length must not exceed 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comment", value)

    @_builtins.property
    @pulumi.getter(name="orderFree")
    def order_free(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The OrderFree param. Default: `false`.
        """
        return pulumi.get(self, "order_free")

    @order_free.setter
    def order_free(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "order_free", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Scope param. String must be one of these: `"protocol-data-unit"`, `"session"`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        or_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgsDict']]]]
        """
        The OrConditions param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 or_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgs']]] or_conditions: The OrConditions param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if or_conditions is not None:
            pulumi.set(__self__, "or_conditions", or_conditions)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orConditions")
    def or_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgs']]]]:
        """
        The OrConditions param.
        """
        return pulumi.get(self, "or_conditions")

    @or_conditions.setter
    def or_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgs']]]]):
        pulumi.set(self, "or_conditions", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        operator: NotRequired[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgsDict']]
        """
        The Operator param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operator: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgs'] operator: The Operator param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgs']]:
        """
        The Operator param.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgs']]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgsDict(TypedDict):
        equal_to: NotRequired[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgsDict']]
        """
        The EqualTo param.
        """
        greater_than: NotRequired[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgsDict']]
        """
        The GreaterThan param.
        """
        less_than: NotRequired[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgsDict']]
        """
        The LessThan param.
        """
        pattern_match: NotRequired[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgsDict']]
        """
        The PatternMatch param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorArgs:
    def __init__(__self__, *,
                 equal_to: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgs']] = None,
                 greater_than: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs']] = None,
                 less_than: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgs']] = None,
                 pattern_match: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs']] = None):
        """
        :param pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgs'] equal_to: The EqualTo param.
        :param pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs'] greater_than: The GreaterThan param.
        :param pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgs'] less_than: The LessThan param.
        :param pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs'] pattern_match: The PatternMatch param.
        """
        if equal_to is not None:
            pulumi.set(__self__, "equal_to", equal_to)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if pattern_match is not None:
            pulumi.set(__self__, "pattern_match", pattern_match)

    @_builtins.property
    @pulumi.getter(name="equalTo")
    def equal_to(self) -> Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgs']]:
        """
        The EqualTo param.
        """
        return pulumi.get(self, "equal_to")

    @equal_to.setter
    def equal_to(self, value: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgs']]):
        pulumi.set(self, "equal_to", value)

    @_builtins.property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs']]:
        """
        The GreaterThan param.
        """
        return pulumi.get(self, "greater_than")

    @greater_than.setter
    def greater_than(self, value: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs']]):
        pulumi.set(self, "greater_than", value)

    @_builtins.property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgs']]:
        """
        The LessThan param.
        """
        return pulumi.get(self, "less_than")

    @less_than.setter
    def less_than(self, value: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgs']]):
        pulumi.set(self, "less_than", value)

    @_builtins.property
    @pulumi.getter(name="patternMatch")
    def pattern_match(self) -> Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs']]:
        """
        The PatternMatch param.
        """
        return pulumi.get(self, "pattern_match")

    @pattern_match.setter
    def pattern_match(self, value: Optional[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs']]):
        pulumi.set(self, "pattern_match", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgsDict(TypedDict):
        context: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Context param.
        """
        negate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Negate param. Default: `false`.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
        value: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Value param. Value must be between 0 and 4294967295.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[_builtins.str]] = None,
                 negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs']]]] = None,
                 value: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param.
        :param pulumi.Input[_builtins.bool] negate: The Negate param. Default: `false`.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs']]] qualifiers: The Qualifiers param.
        :param pulumi.Input[_builtins.int] value: The Value param. Value must be between 0 and 4294967295.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Context param.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Negate param. Default: `false`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "negate", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Value param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorEqualToQualifierArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgsDict(TypedDict):
        context: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Context param.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
        value: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Value param. Value must be between 0 and 4294967295.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[_builtins.str]] = None,
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs']]]] = None,
                 value: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs']]] qualifiers: The Qualifiers param.
        :param pulumi.Input[_builtins.int] value: The Value param. Value must be between 0 and 4294967295.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Context param.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Value param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorGreaterThanQualifierArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgsDict(TypedDict):
        context: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Context param.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
        value: NotRequired[pulumi.Input[_builtins.int]]
        """
        The Value param. Value must be between 0 and 4294967295.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[_builtins.str]] = None,
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs']]]] = None,
                 value: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs']]] qualifiers: The Qualifiers param.
        :param pulumi.Input[_builtins.int] value: The Value param. Value must be between 0 and 4294967295.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Context param.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The Value param. Value must be between 0 and 4294967295.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Value param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorLessThanQualifierArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgsDict(TypedDict):
        context: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Context param.
        """
        negate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The Negate param. Default: `false`.
        """
        pattern: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Pattern param.
        """
        qualifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgsDict']]]]
        """
        The Qualifiers param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[_builtins.str]] = None,
                 negate: Optional[pulumi.Input[_builtins.bool]] = None,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 qualifiers: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] context: The Context param.
        :param pulumi.Input[_builtins.bool] negate: The Negate param. Default: `false`.
        :param pulumi.Input[_builtins.str] pattern: The Pattern param.
        :param pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs']]] qualifiers: The Qualifiers param.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)

    @_builtins.property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Context param.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "context", value)

    @_builtins.property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The Negate param. Default: `false`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "negate", value)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Pattern param.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pattern", value)

    @_builtins.property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs']]]]:
        """
        The Qualifiers param.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs']]]]):
        pulumi.set(self, "qualifiers", value)


if not MYPY:
    class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Value param.
        """
elif False:
    VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VulnerabilityProtectionSignaturesSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] value: The Value param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Value param.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class WildfireAntiVirusProfileMlavExceptionArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Description param.
        """
        filename: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Filename param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
elif False:
    WildfireAntiVirusProfileMlavExceptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WildfireAntiVirusProfileMlavExceptionArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 filename: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] description: The Description param.
        :param pulumi.Input[_builtins.str] filename: The Filename param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Description param.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Filename param.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filename", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WildfireAntiVirusProfileRuleArgsDict(TypedDict):
        analysis: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Analysis param. String must be one of these: `"public-cloud"`, `"private-cloud"`.
        """
        applications: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The Applications param.
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Direction param. String must be one of these: `"download"`, `"upload"`, `"both"`.
        """
        file_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The FileTypes param.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
elif False:
    WildfireAntiVirusProfileRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WildfireAntiVirusProfileRuleArgs:
    def __init__(__self__, *,
                 analysis: Optional[pulumi.Input[_builtins.str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] analysis: The Analysis param. String must be one of these: `"public-cloud"`, `"private-cloud"`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] applications: The Applications param.
        :param pulumi.Input[_builtins.str] direction: The Direction param. String must be one of these: `"download"`, `"upload"`, `"both"`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] file_types: The FileTypes param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        """
        if analysis is not None:
            pulumi.set(__self__, "analysis", analysis)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def analysis(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Analysis param. String must be one of these: `"public-cloud"`, `"private-cloud"`.
        """
        return pulumi.get(self, "analysis")

    @analysis.setter
    def analysis(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "analysis", value)

    @_builtins.property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Applications param.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "applications", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Direction param. String must be one of these: `"download"`, `"upload"`, `"both"`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The FileTypes param.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "file_types", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WildfireAntiVirusProfileThreatExceptionArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Name param.
        """
        notes: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Notes param.
        """
elif False:
    WildfireAntiVirusProfileThreatExceptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WildfireAntiVirusProfileThreatExceptionArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.str] notes: The Notes param.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Notes param.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)


