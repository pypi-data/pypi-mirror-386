# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetInternalDnsServerResult',
    'AwaitableGetInternalDnsServerResult',
    'get_internal_dns_server',
    'get_internal_dns_server_output',
]

@pulumi.output_type
class GetInternalDnsServerResult:
    """
    A collection of values returned by getInternalDnsServer.
    """
    def __init__(__self__, domain_names=None, id=None, name=None, primary=None, secondary=None, tfid=None):
        if domain_names and not isinstance(domain_names, list):
            raise TypeError("Expected argument 'domain_names' to be a list")
        pulumi.set(__self__, "domain_names", domain_names)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary and not isinstance(primary, str):
            raise TypeError("Expected argument 'primary' to be a str")
        pulumi.set(__self__, "primary", primary)
        if secondary and not isinstance(secondary, str):
            raise TypeError("Expected argument 'secondary' to be a str")
        pulumi.set(__self__, "secondary", secondary)
        if tfid and not isinstance(tfid, str):
            raise TypeError("Expected argument 'tfid' to be a str")
        pulumi.set(__self__, "tfid", tfid)

    @_builtins.property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Sequence[_builtins.str]:
        """
        The DomainNames param.
        """
        return pulumi.get(self, "domain_names")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The Id param.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def primary(self) -> _builtins.str:
        """
        The Primary param.
        """
        return pulumi.get(self, "primary")

    @_builtins.property
    @pulumi.getter
    def secondary(self) -> _builtins.str:
        """
        The Secondary param.
        """
        return pulumi.get(self, "secondary")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> _builtins.str:
        return pulumi.get(self, "tfid")


class AwaitableGetInternalDnsServerResult(GetInternalDnsServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInternalDnsServerResult(
            domain_names=self.domain_names,
            id=self.id,
            name=self.name,
            primary=self.primary,
            secondary=self.secondary,
            tfid=self.tfid)


def get_internal_dns_server(id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInternalDnsServerResult:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_internal_dns_server(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('scm:index/getInternalDnsServer:getInternalDnsServer', __args__, opts=opts, typ=GetInternalDnsServerResult).value

    return AwaitableGetInternalDnsServerResult(
        domain_names=pulumi.get(__ret__, 'domain_names'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        primary=pulumi.get(__ret__, 'primary'),
        secondary=pulumi.get(__ret__, 'secondary'),
        tfid=pulumi.get(__ret__, 'tfid'))
def get_internal_dns_server_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInternalDnsServerResult]:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_internal_dns_server(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('scm:index/getInternalDnsServer:getInternalDnsServer', __args__, opts=opts, typ=GetInternalDnsServerResult)
    return __ret__.apply(lambda __response__: GetInternalDnsServerResult(
        domain_names=pulumi.get(__response__, 'domain_names'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        primary=pulumi.get(__response__, 'primary'),
        secondary=pulumi.get(__response__, 'secondary'),
        tfid=pulumi.get(__response__, 'tfid')))
