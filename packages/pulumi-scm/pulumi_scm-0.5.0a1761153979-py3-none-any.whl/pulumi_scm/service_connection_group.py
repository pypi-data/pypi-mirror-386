# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ServiceConnectionGroupArgs', 'ServiceConnectionGroup']

@pulumi.input_type
class ServiceConnectionGroupArgs:
    def __init__(__self__, *,
                 targets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 disable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pbf_only: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a ServiceConnectionGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] targets: The Targets param.
        :param pulumi.Input[_builtins.bool] disable_snat: The DisableSnat param.
        :param pulumi.Input[_builtins.str] folder: The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `"Service Connections"`.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.bool] pbf_only: The PbfOnly param.
        """
        pulumi.set(__self__, "targets", targets)
        if disable_snat is not None:
            pulumi.set(__self__, "disable_snat", disable_snat)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pbf_only is not None:
            pulumi.set(__self__, "pbf_only", pbf_only)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The Targets param.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter(name="disableSnat")
    def disable_snat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The DisableSnat param.
        """
        return pulumi.get(self, "disable_snat")

    @disable_snat.setter
    def disable_snat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_snat", value)

    @_builtins.property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `"Service Connections"`.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="pbfOnly")
    def pbf_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The PbfOnly param.
        """
        return pulumi.get(self, "pbf_only")

    @pbf_only.setter
    def pbf_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pbf_only", value)


@pulumi.input_type
class _ServiceConnectionGroupState:
    def __init__(__self__, *,
                 disable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pbf_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tfid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ServiceConnectionGroup resources.
        :param pulumi.Input[_builtins.bool] disable_snat: The DisableSnat param.
        :param pulumi.Input[_builtins.str] folder: The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `"Service Connections"`.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.bool] pbf_only: The PbfOnly param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] targets: The Targets param.
        """
        if disable_snat is not None:
            pulumi.set(__self__, "disable_snat", disable_snat)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pbf_only is not None:
            pulumi.set(__self__, "pbf_only", pbf_only)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if tfid is not None:
            pulumi.set(__self__, "tfid", tfid)

    @_builtins.property
    @pulumi.getter(name="disableSnat")
    def disable_snat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The DisableSnat param.
        """
        return pulumi.get(self, "disable_snat")

    @disable_snat.setter
    def disable_snat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_snat", value)

    @_builtins.property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `"Service Connections"`.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="pbfOnly")
    def pbf_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The PbfOnly param.
        """
        return pulumi.get(self, "pbf_only")

    @pbf_only.setter
    def pbf_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pbf_only", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Targets param.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tfid")

    @tfid.setter
    def tfid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tfid", value)


@pulumi.type_token("scm:index/serviceConnectionGroup:ServiceConnectionGroup")
class ServiceConnectionGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pbf_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.ServiceConnectionGroup("example")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] disable_snat: The DisableSnat param.
        :param pulumi.Input[_builtins.str] folder: The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `"Service Connections"`.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.bool] pbf_only: The PbfOnly param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] targets: The Targets param.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceConnectionGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.ServiceConnectionGroup("example")
        ```

        :param str resource_name: The name of the resource.
        :param ServiceConnectionGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceConnectionGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pbf_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceConnectionGroupArgs.__new__(ServiceConnectionGroupArgs)

            __props__.__dict__["disable_snat"] = disable_snat
            __props__.__dict__["folder"] = folder
            __props__.__dict__["name"] = name
            __props__.__dict__["pbf_only"] = pbf_only
            if targets is None and not opts.urn:
                raise TypeError("Missing required property 'targets'")
            __props__.__dict__["targets"] = targets
            __props__.__dict__["tfid"] = None
        super(ServiceConnectionGroup, __self__).__init__(
            'scm:index/serviceConnectionGroup:ServiceConnectionGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            disable_snat: Optional[pulumi.Input[_builtins.bool]] = None,
            folder: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pbf_only: Optional[pulumi.Input[_builtins.bool]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tfid: Optional[pulumi.Input[_builtins.str]] = None) -> 'ServiceConnectionGroup':
        """
        Get an existing ServiceConnectionGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] disable_snat: The DisableSnat param.
        :param pulumi.Input[_builtins.str] folder: The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `"Service Connections"`.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[_builtins.bool] pbf_only: The PbfOnly param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] targets: The Targets param.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceConnectionGroupState.__new__(_ServiceConnectionGroupState)

        __props__.__dict__["disable_snat"] = disable_snat
        __props__.__dict__["folder"] = folder
        __props__.__dict__["name"] = name
        __props__.__dict__["pbf_only"] = pbf_only
        __props__.__dict__["targets"] = targets
        __props__.__dict__["tfid"] = tfid
        return ServiceConnectionGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="disableSnat")
    def disable_snat(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        The DisableSnat param.
        """
        return pulumi.get(self, "disable_snat")

    @_builtins.property
    @pulumi.getter
    def folder(self) -> pulumi.Output[_builtins.str]:
        """
        The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `"Service Connections"`.
        """
        return pulumi.get(self, "folder")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pbfOnly")
    def pbf_only(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        The PbfOnly param.
        """
        return pulumi.get(self, "pbf_only")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The Targets param.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tfid")

