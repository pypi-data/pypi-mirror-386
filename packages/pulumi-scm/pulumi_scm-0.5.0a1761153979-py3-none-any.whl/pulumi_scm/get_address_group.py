# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAddressGroupResult',
    'AwaitableGetAddressGroupResult',
    'get_address_group',
    'get_address_group_output',
]

@pulumi.output_type
class GetAddressGroupResult:
    """
    A collection of values returned by getAddressGroup.
    """
    def __init__(__self__, description=None, dynamic_value=None, id=None, name=None, static_lists=None, tags=None, tfid=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dynamic_value and not isinstance(dynamic_value, dict):
            raise TypeError("Expected argument 'dynamic_value' to be a dict")
        pulumi.set(__self__, "dynamic_value", dynamic_value)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if static_lists and not isinstance(static_lists, list):
            raise TypeError("Expected argument 'static_lists' to be a list")
        pulumi.set(__self__, "static_lists", static_lists)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tfid and not isinstance(tfid, str):
            raise TypeError("Expected argument 'tfid' to be a str")
        pulumi.set(__self__, "tfid", tfid)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The Description param. String length must not exceed 1023 characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> 'outputs.GetAddressGroupDynamicValueResult':
        """
        The DynamicValue param.
        """
        return pulumi.get(self, "dynamic_value")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The Id param.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="staticLists")
    def static_lists(self) -> Sequence[_builtins.str]:
        """
        The StaticList param. Individual elements in this list are subject to additional validation. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "static_lists")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        Tags for address group object. List must contain at most 64 elements. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> _builtins.str:
        return pulumi.get(self, "tfid")


class AwaitableGetAddressGroupResult(GetAddressGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAddressGroupResult(
            description=self.description,
            dynamic_value=self.dynamic_value,
            id=self.id,
            name=self.name,
            static_lists=self.static_lists,
            tags=self.tags,
            tfid=self.tfid)


def get_address_group(id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAddressGroupResult:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_address_group(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('scm:index/getAddressGroup:getAddressGroup', __args__, opts=opts, typ=GetAddressGroupResult).value

    return AwaitableGetAddressGroupResult(
        description=pulumi.get(__ret__, 'description'),
        dynamic_value=pulumi.get(__ret__, 'dynamic_value'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        static_lists=pulumi.get(__ret__, 'static_lists'),
        tags=pulumi.get(__ret__, 'tags'),
        tfid=pulumi.get(__ret__, 'tfid'))
def get_address_group_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAddressGroupResult]:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_address_group(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('scm:index/getAddressGroup:getAddressGroup', __args__, opts=opts, typ=GetAddressGroupResult)
    return __ret__.apply(lambda __response__: GetAddressGroupResult(
        description=pulumi.get(__response__, 'description'),
        dynamic_value=pulumi.get(__response__, 'dynamic_value'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        static_lists=pulumi.get(__response__, 'static_lists'),
        tags=pulumi.get(__response__, 'tags'),
        tfid=pulumi.get(__response__, 'tfid')))
