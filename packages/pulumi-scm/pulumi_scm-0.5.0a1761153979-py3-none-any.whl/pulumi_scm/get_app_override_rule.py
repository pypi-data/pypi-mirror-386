# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppOverrideRuleResult',
    'AwaitableGetAppOverrideRuleResult',
    'get_app_override_rule',
    'get_app_override_rule_output',
]

@pulumi.output_type
class GetAppOverrideRuleResult:
    """
    A collection of values returned by getAppOverrideRule.
    """
    def __init__(__self__, application=None, description=None, destinations=None, disabled=None, froms=None, group_tag=None, id=None, name=None, negate_destination=None, negate_source=None, port=None, protocol=None, sources=None, tags=None, tfid=None, tos=None):
        if application and not isinstance(application, str):
            raise TypeError("Expected argument 'application' to be a str")
        pulumi.set(__self__, "application", application)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destinations and not isinstance(destinations, list):
            raise TypeError("Expected argument 'destinations' to be a list")
        pulumi.set(__self__, "destinations", destinations)
        if disabled and not isinstance(disabled, bool):
            raise TypeError("Expected argument 'disabled' to be a bool")
        pulumi.set(__self__, "disabled", disabled)
        if froms and not isinstance(froms, list):
            raise TypeError("Expected argument 'froms' to be a list")
        pulumi.set(__self__, "froms", froms)
        if group_tag and not isinstance(group_tag, str):
            raise TypeError("Expected argument 'group_tag' to be a str")
        pulumi.set(__self__, "group_tag", group_tag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if negate_destination and not isinstance(negate_destination, bool):
            raise TypeError("Expected argument 'negate_destination' to be a bool")
        pulumi.set(__self__, "negate_destination", negate_destination)
        if negate_source and not isinstance(negate_source, bool):
            raise TypeError("Expected argument 'negate_source' to be a bool")
        pulumi.set(__self__, "negate_source", negate_source)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tfid and not isinstance(tfid, str):
            raise TypeError("Expected argument 'tfid' to be a str")
        pulumi.set(__self__, "tfid", tfid)
        if tos and not isinstance(tos, list):
            raise TypeError("Expected argument 'tos' to be a list")
        pulumi.set(__self__, "tos", tos)

    @_builtins.property
    @pulumi.getter
    def application(self) -> _builtins.str:
        """
        The Application param.
        """
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The Description param. String length must not exceed 1024 characters.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def destinations(self) -> Sequence[_builtins.str]:
        """
        The Destinations param.
        """
        return pulumi.get(self, "destinations")

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> _builtins.bool:
        """
        The Disabled param. Default: `false`.
        """
        return pulumi.get(self, "disabled")

    @_builtins.property
    @pulumi.getter
    def froms(self) -> Sequence[_builtins.str]:
        """
        The Froms param.
        """
        return pulumi.get(self, "froms")

    @_builtins.property
    @pulumi.getter(name="groupTag")
    def group_tag(self) -> _builtins.str:
        """
        The GroupTag param.
        """
        return pulumi.get(self, "group_tag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The Id param.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The Name param. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="negateDestination")
    def negate_destination(self) -> _builtins.bool:
        """
        The NegateDestination param. Default: `false`.
        """
        return pulumi.get(self, "negate_destination")

    @_builtins.property
    @pulumi.getter(name="negateSource")
    def negate_source(self) -> _builtins.bool:
        """
        The NegateSource param. Default: `false`.
        """
        return pulumi.get(self, "negate_source")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The Port param. Value must be between 0 and 65535.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The Protocol param. String must be one of these: `"tcp"`, `"udp"`.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence[_builtins.str]:
        """
        The Sources param.
        """
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        The Tags param.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> _builtins.str:
        return pulumi.get(self, "tfid")

    @_builtins.property
    @pulumi.getter
    def tos(self) -> Sequence[_builtins.str]:
        """
        The Tos param.
        """
        return pulumi.get(self, "tos")


class AwaitableGetAppOverrideRuleResult(GetAppOverrideRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppOverrideRuleResult(
            application=self.application,
            description=self.description,
            destinations=self.destinations,
            disabled=self.disabled,
            froms=self.froms,
            group_tag=self.group_tag,
            id=self.id,
            name=self.name,
            negate_destination=self.negate_destination,
            negate_source=self.negate_source,
            port=self.port,
            protocol=self.protocol,
            sources=self.sources,
            tags=self.tags,
            tfid=self.tfid,
            tos=self.tos)


def get_app_override_rule(id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppOverrideRuleResult:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_app_override_rule(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('scm:index/getAppOverrideRule:getAppOverrideRule', __args__, opts=opts, typ=GetAppOverrideRuleResult).value

    return AwaitableGetAppOverrideRuleResult(
        application=pulumi.get(__ret__, 'application'),
        description=pulumi.get(__ret__, 'description'),
        destinations=pulumi.get(__ret__, 'destinations'),
        disabled=pulumi.get(__ret__, 'disabled'),
        froms=pulumi.get(__ret__, 'froms'),
        group_tag=pulumi.get(__ret__, 'group_tag'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        negate_destination=pulumi.get(__ret__, 'negate_destination'),
        negate_source=pulumi.get(__ret__, 'negate_source'),
        port=pulumi.get(__ret__, 'port'),
        protocol=pulumi.get(__ret__, 'protocol'),
        sources=pulumi.get(__ret__, 'sources'),
        tags=pulumi.get(__ret__, 'tags'),
        tfid=pulumi.get(__ret__, 'tfid'),
        tos=pulumi.get(__ret__, 'tos'))
def get_app_override_rule_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppOverrideRuleResult]:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_app_override_rule(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('scm:index/getAppOverrideRule:getAppOverrideRule', __args__, opts=opts, typ=GetAppOverrideRuleResult)
    return __ret__.apply(lambda __response__: GetAppOverrideRuleResult(
        application=pulumi.get(__response__, 'application'),
        description=pulumi.get(__response__, 'description'),
        destinations=pulumi.get(__response__, 'destinations'),
        disabled=pulumi.get(__response__, 'disabled'),
        froms=pulumi.get(__response__, 'froms'),
        group_tag=pulumi.get(__response__, 'group_tag'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        negate_destination=pulumi.get(__response__, 'negate_destination'),
        negate_source=pulumi.get(__response__, 'negate_source'),
        port=pulumi.get(__response__, 'port'),
        protocol=pulumi.get(__response__, 'protocol'),
        sources=pulumi.get(__response__, 'sources'),
        tags=pulumi.get(__response__, 'tags'),
        tfid=pulumi.get(__response__, 'tfid'),
        tos=pulumi.get(__response__, 'tos')))
