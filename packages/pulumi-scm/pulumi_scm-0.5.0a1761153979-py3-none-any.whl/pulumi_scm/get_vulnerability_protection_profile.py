# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVulnerabilityProtectionProfileResult',
    'AwaitableGetVulnerabilityProtectionProfileResult',
    'get_vulnerability_protection_profile',
    'get_vulnerability_protection_profile_output',
]

@pulumi.output_type
class GetVulnerabilityProtectionProfileResult:
    """
    A collection of values returned by getVulnerabilityProtectionProfile.
    """
    def __init__(__self__, description=None, id=None, name=None, rules=None, tfid=None, threat_exceptions=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if tfid and not isinstance(tfid, str):
            raise TypeError("Expected argument 'tfid' to be a str")
        pulumi.set(__self__, "tfid", tfid)
        if threat_exceptions and not isinstance(threat_exceptions, list):
            raise TypeError("Expected argument 'threat_exceptions' to be a list")
        pulumi.set(__self__, "threat_exceptions", threat_exceptions)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The Description param.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The Id param.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The Name param. String validation regex: `^[a-zA-Z0-9._-]+$`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetVulnerabilityProtectionProfileRuleResult']:
        """
        The Rules param.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> _builtins.str:
        return pulumi.get(self, "tfid")

    @_builtins.property
    @pulumi.getter(name="threatExceptions")
    def threat_exceptions(self) -> Sequence['outputs.GetVulnerabilityProtectionProfileThreatExceptionResult']:
        """
        The ThreatExceptions param.
        """
        return pulumi.get(self, "threat_exceptions")


class AwaitableGetVulnerabilityProtectionProfileResult(GetVulnerabilityProtectionProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVulnerabilityProtectionProfileResult(
            description=self.description,
            id=self.id,
            name=self.name,
            rules=self.rules,
            tfid=self.tfid,
            threat_exceptions=self.threat_exceptions)


def get_vulnerability_protection_profile(id: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVulnerabilityProtectionProfileResult:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_vulnerability_protection_profile(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('scm:index/getVulnerabilityProtectionProfile:getVulnerabilityProtectionProfile', __args__, opts=opts, typ=GetVulnerabilityProtectionProfileResult).value

    return AwaitableGetVulnerabilityProtectionProfileResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        rules=pulumi.get(__ret__, 'rules'),
        tfid=pulumi.get(__ret__, 'tfid'),
        threat_exceptions=pulumi.get(__ret__, 'threat_exceptions'))
def get_vulnerability_protection_profile_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVulnerabilityProtectionProfileResult]:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_vulnerability_protection_profile(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('scm:index/getVulnerabilityProtectionProfile:getVulnerabilityProtectionProfile', __args__, opts=opts, typ=GetVulnerabilityProtectionProfileResult)
    return __ret__.apply(lambda __response__: GetVulnerabilityProtectionProfileResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        rules=pulumi.get(__response__, 'rules'),
        tfid=pulumi.get(__response__, 'tfid'),
        threat_exceptions=pulumi.get(__response__, 'threat_exceptions')))
