# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetRadiusServerProfileResult',
    'AwaitableGetRadiusServerProfileResult',
    'get_radius_server_profile',
    'get_radius_server_profile_output',
]

@pulumi.output_type
class GetRadiusServerProfileResult:
    """
    A collection of values returned by getRadiusServerProfile.
    """
    def __init__(__self__, id=None, protocol=None, retries=None, servers=None, tfid=None, timeout=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if protocol and not isinstance(protocol, dict):
            raise TypeError("Expected argument 'protocol' to be a dict")
        pulumi.set(__self__, "protocol", protocol)
        if retries and not isinstance(retries, int):
            raise TypeError("Expected argument 'retries' to be a int")
        pulumi.set(__self__, "retries", retries)
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        pulumi.set(__self__, "servers", servers)
        if tfid and not isinstance(tfid, str):
            raise TypeError("Expected argument 'tfid' to be a str")
        pulumi.set(__self__, "tfid", tfid)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The Id param.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> 'outputs.GetRadiusServerProfileProtocolResult':
        """
        The Protocol param.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def retries(self) -> _builtins.int:
        """
        The Retries param. Value must be between 1 and 5.
        """
        return pulumi.get(self, "retries")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetRadiusServerProfileServerResult']:
        """
        The Servers param.
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> _builtins.str:
        return pulumi.get(self, "tfid")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The Timeout param. Value must be between 1 and 120.
        """
        return pulumi.get(self, "timeout")


class AwaitableGetRadiusServerProfileResult(GetRadiusServerProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRadiusServerProfileResult(
            id=self.id,
            protocol=self.protocol,
            retries=self.retries,
            servers=self.servers,
            tfid=self.tfid,
            timeout=self.timeout)


def get_radius_server_profile(id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRadiusServerProfileResult:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_radius_server_profile(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('scm:index/getRadiusServerProfile:getRadiusServerProfile', __args__, opts=opts, typ=GetRadiusServerProfileResult).value

    return AwaitableGetRadiusServerProfileResult(
        id=pulumi.get(__ret__, 'id'),
        protocol=pulumi.get(__ret__, 'protocol'),
        retries=pulumi.get(__ret__, 'retries'),
        servers=pulumi.get(__ret__, 'servers'),
        tfid=pulumi.get(__ret__, 'tfid'),
        timeout=pulumi.get(__ret__, 'timeout'))
def get_radius_server_profile_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRadiusServerProfileResult]:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_radius_server_profile(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('scm:index/getRadiusServerProfile:getRadiusServerProfile', __args__, opts=opts, typ=GetRadiusServerProfileResult)
    return __ret__.apply(lambda __response__: GetRadiusServerProfileResult(
        id=pulumi.get(__response__, 'id'),
        protocol=pulumi.get(__response__, 'protocol'),
        retries=pulumi.get(__response__, 'retries'),
        servers=pulumi.get(__response__, 'servers'),
        tfid=pulumi.get(__response__, 'tfid'),
        timeout=pulumi.get(__response__, 'timeout')))
