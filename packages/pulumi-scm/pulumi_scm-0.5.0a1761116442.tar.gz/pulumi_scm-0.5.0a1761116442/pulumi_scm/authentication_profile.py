# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuthenticationProfileArgs', 'AuthenticationProfile']

@pulumi.input_type
class AuthenticationProfileArgs:
    def __init__(__self__, *,
                 allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 lockout: Optional[pulumi.Input['AuthenticationProfileLockoutArgs']] = None,
                 method: Optional[pulumi.Input['AuthenticationProfileMethodArgs']] = None,
                 multi_factor_auth: Optional[pulumi.Input['AuthenticationProfileMultiFactorAuthArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 single_sign_on: Optional[pulumi.Input['AuthenticationProfileSingleSignOnArgs']] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 user_domain: Optional[pulumi.Input[_builtins.str]] = None,
                 username_modifier: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AuthenticationProfile resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allow_lists: The AllowList param.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input['AuthenticationProfileLockoutArgs'] lockout: The Lockout param.
        :param pulumi.Input['AuthenticationProfileMethodArgs'] method: The Method param.
        :param pulumi.Input['AuthenticationProfileMultiFactorAuthArgs'] multi_factor_auth: The MultiFactorAuth param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input['AuthenticationProfileSingleSignOnArgs'] single_sign_on: The SingleSignOn param.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[_builtins.str] user_domain: The UserDomain param. String length must not exceed 63 characters.
        :param pulumi.Input[_builtins.str] username_modifier: The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\\\%USERINPUT%"`.
        """
        if allow_lists is not None:
            pulumi.set(__self__, "allow_lists", allow_lists)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if lockout is not None:
            pulumi.set(__self__, "lockout", lockout)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if multi_factor_auth is not None:
            pulumi.set(__self__, "multi_factor_auth", multi_factor_auth)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if single_sign_on is not None:
            pulumi.set(__self__, "single_sign_on", single_sign_on)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if user_domain is not None:
            pulumi.set(__self__, "user_domain", user_domain)
        if username_modifier is not None:
            pulumi.set(__self__, "username_modifier", username_modifier)

    @_builtins.property
    @pulumi.getter(name="allowLists")
    def allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The AllowList param.
        """
        return pulumi.get(self, "allow_lists")

    @allow_lists.setter
    def allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allow_lists", value)

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Device param.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder", value)

    @_builtins.property
    @pulumi.getter
    def lockout(self) -> Optional[pulumi.Input['AuthenticationProfileLockoutArgs']]:
        """
        The Lockout param.
        """
        return pulumi.get(self, "lockout")

    @lockout.setter
    def lockout(self, value: Optional[pulumi.Input['AuthenticationProfileLockoutArgs']]):
        pulumi.set(self, "lockout", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['AuthenticationProfileMethodArgs']]:
        """
        The Method param.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['AuthenticationProfileMethodArgs']]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter(name="multiFactorAuth")
    def multi_factor_auth(self) -> Optional[pulumi.Input['AuthenticationProfileMultiFactorAuthArgs']]:
        """
        The MultiFactorAuth param.
        """
        return pulumi.get(self, "multi_factor_auth")

    @multi_factor_auth.setter
    def multi_factor_auth(self, value: Optional[pulumi.Input['AuthenticationProfileMultiFactorAuthArgs']]):
        pulumi.set(self, "multi_factor_auth", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="singleSignOn")
    def single_sign_on(self) -> Optional[pulumi.Input['AuthenticationProfileSingleSignOnArgs']]:
        """
        The SingleSignOn param.
        """
        return pulumi.get(self, "single_sign_on")

    @single_sign_on.setter
    def single_sign_on(self, value: Optional[pulumi.Input['AuthenticationProfileSingleSignOnArgs']]):
        pulumi.set(self, "single_sign_on", value)

    @_builtins.property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Snippet param.
        """
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snippet", value)

    @_builtins.property
    @pulumi.getter(name="userDomain")
    def user_domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UserDomain param. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "user_domain")

    @user_domain.setter
    def user_domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_domain", value)

    @_builtins.property
    @pulumi.getter(name="usernameModifier")
    def username_modifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\\\%USERINPUT%"`.
        """
        return pulumi.get(self, "username_modifier")

    @username_modifier.setter
    def username_modifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username_modifier", value)


@pulumi.input_type
class _AuthenticationProfileState:
    def __init__(__self__, *,
                 allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 lockout: Optional[pulumi.Input['AuthenticationProfileLockoutArgs']] = None,
                 method: Optional[pulumi.Input['AuthenticationProfileMethodArgs']] = None,
                 multi_factor_auth: Optional[pulumi.Input['AuthenticationProfileMultiFactorAuthArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 single_sign_on: Optional[pulumi.Input['AuthenticationProfileSingleSignOnArgs']] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 tfid: Optional[pulumi.Input[_builtins.str]] = None,
                 user_domain: Optional[pulumi.Input[_builtins.str]] = None,
                 username_modifier: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AuthenticationProfile resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allow_lists: The AllowList param.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input['AuthenticationProfileLockoutArgs'] lockout: The Lockout param.
        :param pulumi.Input['AuthenticationProfileMethodArgs'] method: The Method param.
        :param pulumi.Input['AuthenticationProfileMultiFactorAuthArgs'] multi_factor_auth: The MultiFactorAuth param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input['AuthenticationProfileSingleSignOnArgs'] single_sign_on: The SingleSignOn param.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[_builtins.str] user_domain: The UserDomain param. String length must not exceed 63 characters.
        :param pulumi.Input[_builtins.str] username_modifier: The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\\\%USERINPUT%"`.
        """
        if allow_lists is not None:
            pulumi.set(__self__, "allow_lists", allow_lists)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if lockout is not None:
            pulumi.set(__self__, "lockout", lockout)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if multi_factor_auth is not None:
            pulumi.set(__self__, "multi_factor_auth", multi_factor_auth)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if single_sign_on is not None:
            pulumi.set(__self__, "single_sign_on", single_sign_on)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if tfid is not None:
            pulumi.set(__self__, "tfid", tfid)
        if user_domain is not None:
            pulumi.set(__self__, "user_domain", user_domain)
        if username_modifier is not None:
            pulumi.set(__self__, "username_modifier", username_modifier)

    @_builtins.property
    @pulumi.getter(name="allowLists")
    def allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The AllowList param.
        """
        return pulumi.get(self, "allow_lists")

    @allow_lists.setter
    def allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allow_lists", value)

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Device param.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder", value)

    @_builtins.property
    @pulumi.getter
    def lockout(self) -> Optional[pulumi.Input['AuthenticationProfileLockoutArgs']]:
        """
        The Lockout param.
        """
        return pulumi.get(self, "lockout")

    @lockout.setter
    def lockout(self, value: Optional[pulumi.Input['AuthenticationProfileLockoutArgs']]):
        pulumi.set(self, "lockout", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['AuthenticationProfileMethodArgs']]:
        """
        The Method param.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['AuthenticationProfileMethodArgs']]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter(name="multiFactorAuth")
    def multi_factor_auth(self) -> Optional[pulumi.Input['AuthenticationProfileMultiFactorAuthArgs']]:
        """
        The MultiFactorAuth param.
        """
        return pulumi.get(self, "multi_factor_auth")

    @multi_factor_auth.setter
    def multi_factor_auth(self, value: Optional[pulumi.Input['AuthenticationProfileMultiFactorAuthArgs']]):
        pulumi.set(self, "multi_factor_auth", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="singleSignOn")
    def single_sign_on(self) -> Optional[pulumi.Input['AuthenticationProfileSingleSignOnArgs']]:
        """
        The SingleSignOn param.
        """
        return pulumi.get(self, "single_sign_on")

    @single_sign_on.setter
    def single_sign_on(self, value: Optional[pulumi.Input['AuthenticationProfileSingleSignOnArgs']]):
        pulumi.set(self, "single_sign_on", value)

    @_builtins.property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Snippet param.
        """
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snippet", value)

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tfid")

    @tfid.setter
    def tfid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tfid", value)

    @_builtins.property
    @pulumi.getter(name="userDomain")
    def user_domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UserDomain param. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "user_domain")

    @user_domain.setter
    def user_domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_domain", value)

    @_builtins.property
    @pulumi.getter(name="usernameModifier")
    def username_modifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\\\%USERINPUT%"`.
        """
        return pulumi.get(self, "username_modifier")

    @username_modifier.setter
    def username_modifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username_modifier", value)


@pulumi.type_token("scm:index/authenticationProfile:AuthenticationProfile")
class AuthenticationProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 lockout: Optional[pulumi.Input[Union['AuthenticationProfileLockoutArgs', 'AuthenticationProfileLockoutArgsDict']]] = None,
                 method: Optional[pulumi.Input[Union['AuthenticationProfileMethodArgs', 'AuthenticationProfileMethodArgsDict']]] = None,
                 multi_factor_auth: Optional[pulumi.Input[Union['AuthenticationProfileMultiFactorAuthArgs', 'AuthenticationProfileMultiFactorAuthArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 single_sign_on: Optional[pulumi.Input[Union['AuthenticationProfileSingleSignOnArgs', 'AuthenticationProfileSingleSignOnArgsDict']]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 user_domain: Optional[pulumi.Input[_builtins.str]] = None,
                 username_modifier: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.AuthenticationProfile("example")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allow_lists: The AllowList param.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[Union['AuthenticationProfileLockoutArgs', 'AuthenticationProfileLockoutArgsDict']] lockout: The Lockout param.
        :param pulumi.Input[Union['AuthenticationProfileMethodArgs', 'AuthenticationProfileMethodArgsDict']] method: The Method param.
        :param pulumi.Input[Union['AuthenticationProfileMultiFactorAuthArgs', 'AuthenticationProfileMultiFactorAuthArgsDict']] multi_factor_auth: The MultiFactorAuth param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[Union['AuthenticationProfileSingleSignOnArgs', 'AuthenticationProfileSingleSignOnArgsDict']] single_sign_on: The SingleSignOn param.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[_builtins.str] user_domain: The UserDomain param. String length must not exceed 63 characters.
        :param pulumi.Input[_builtins.str] username_modifier: The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\\\%USERINPUT%"`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AuthenticationProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.AuthenticationProfile("example")
        ```

        :param str resource_name: The name of the resource.
        :param AuthenticationProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthenticationProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 lockout: Optional[pulumi.Input[Union['AuthenticationProfileLockoutArgs', 'AuthenticationProfileLockoutArgsDict']]] = None,
                 method: Optional[pulumi.Input[Union['AuthenticationProfileMethodArgs', 'AuthenticationProfileMethodArgsDict']]] = None,
                 multi_factor_auth: Optional[pulumi.Input[Union['AuthenticationProfileMultiFactorAuthArgs', 'AuthenticationProfileMultiFactorAuthArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 single_sign_on: Optional[pulumi.Input[Union['AuthenticationProfileSingleSignOnArgs', 'AuthenticationProfileSingleSignOnArgsDict']]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 user_domain: Optional[pulumi.Input[_builtins.str]] = None,
                 username_modifier: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthenticationProfileArgs.__new__(AuthenticationProfileArgs)

            __props__.__dict__["allow_lists"] = allow_lists
            __props__.__dict__["device"] = device
            __props__.__dict__["folder"] = folder
            __props__.__dict__["lockout"] = lockout
            __props__.__dict__["method"] = method
            __props__.__dict__["multi_factor_auth"] = multi_factor_auth
            __props__.__dict__["name"] = name
            __props__.__dict__["single_sign_on"] = single_sign_on
            __props__.__dict__["snippet"] = snippet
            __props__.__dict__["user_domain"] = user_domain
            __props__.__dict__["username_modifier"] = username_modifier
            __props__.__dict__["tfid"] = None
        super(AuthenticationProfile, __self__).__init__(
            'scm:index/authenticationProfile:AuthenticationProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            device: Optional[pulumi.Input[_builtins.str]] = None,
            folder: Optional[pulumi.Input[_builtins.str]] = None,
            lockout: Optional[pulumi.Input[Union['AuthenticationProfileLockoutArgs', 'AuthenticationProfileLockoutArgsDict']]] = None,
            method: Optional[pulumi.Input[Union['AuthenticationProfileMethodArgs', 'AuthenticationProfileMethodArgsDict']]] = None,
            multi_factor_auth: Optional[pulumi.Input[Union['AuthenticationProfileMultiFactorAuthArgs', 'AuthenticationProfileMultiFactorAuthArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            single_sign_on: Optional[pulumi.Input[Union['AuthenticationProfileSingleSignOnArgs', 'AuthenticationProfileSingleSignOnArgsDict']]] = None,
            snippet: Optional[pulumi.Input[_builtins.str]] = None,
            tfid: Optional[pulumi.Input[_builtins.str]] = None,
            user_domain: Optional[pulumi.Input[_builtins.str]] = None,
            username_modifier: Optional[pulumi.Input[_builtins.str]] = None) -> 'AuthenticationProfile':
        """
        Get an existing AuthenticationProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allow_lists: The AllowList param.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[Union['AuthenticationProfileLockoutArgs', 'AuthenticationProfileLockoutArgsDict']] lockout: The Lockout param.
        :param pulumi.Input[Union['AuthenticationProfileMethodArgs', 'AuthenticationProfileMethodArgsDict']] method: The Method param.
        :param pulumi.Input[Union['AuthenticationProfileMultiFactorAuthArgs', 'AuthenticationProfileMultiFactorAuthArgsDict']] multi_factor_auth: The MultiFactorAuth param.
        :param pulumi.Input[_builtins.str] name: The Name param.
        :param pulumi.Input[Union['AuthenticationProfileSingleSignOnArgs', 'AuthenticationProfileSingleSignOnArgsDict']] single_sign_on: The SingleSignOn param.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[_builtins.str] user_domain: The UserDomain param. String length must not exceed 63 characters.
        :param pulumi.Input[_builtins.str] username_modifier: The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\\\%USERINPUT%"`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthenticationProfileState.__new__(_AuthenticationProfileState)

        __props__.__dict__["allow_lists"] = allow_lists
        __props__.__dict__["device"] = device
        __props__.__dict__["folder"] = folder
        __props__.__dict__["lockout"] = lockout
        __props__.__dict__["method"] = method
        __props__.__dict__["multi_factor_auth"] = multi_factor_auth
        __props__.__dict__["name"] = name
        __props__.__dict__["single_sign_on"] = single_sign_on
        __props__.__dict__["snippet"] = snippet
        __props__.__dict__["tfid"] = tfid
        __props__.__dict__["user_domain"] = user_domain
        __props__.__dict__["username_modifier"] = username_modifier
        return AuthenticationProfile(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowLists")
    def allow_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The AllowList param.
        """
        return pulumi.get(self, "allow_lists")

    @_builtins.property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Device param.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter
    def folder(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @_builtins.property
    @pulumi.getter
    def lockout(self) -> pulumi.Output[Optional['outputs.AuthenticationProfileLockout']]:
        """
        The Lockout param.
        """
        return pulumi.get(self, "lockout")

    @_builtins.property
    @pulumi.getter
    def method(self) -> pulumi.Output[Optional['outputs.AuthenticationProfileMethod']]:
        """
        The Method param.
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter(name="multiFactorAuth")
    def multi_factor_auth(self) -> pulumi.Output[Optional['outputs.AuthenticationProfileMultiFactorAuth']]:
        """
        The MultiFactorAuth param.
        """
        return pulumi.get(self, "multi_factor_auth")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="singleSignOn")
    def single_sign_on(self) -> pulumi.Output[Optional['outputs.AuthenticationProfileSingleSignOn']]:
        """
        The SingleSignOn param.
        """
        return pulumi.get(self, "single_sign_on")

    @_builtins.property
    @pulumi.getter
    def snippet(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Snippet param.
        """
        return pulumi.get(self, "snippet")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tfid")

    @_builtins.property
    @pulumi.getter(name="userDomain")
    def user_domain(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The UserDomain param. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "user_domain")

    @_builtins.property
    @pulumi.getter(name="usernameModifier")
    def username_modifier(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\\\%USERINPUT%"`.
        """
        return pulumi.get(self, "username_modifier")

