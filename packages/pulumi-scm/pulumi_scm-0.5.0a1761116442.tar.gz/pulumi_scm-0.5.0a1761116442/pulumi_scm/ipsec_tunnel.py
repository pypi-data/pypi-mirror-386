# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IpsecTunnelArgs', 'IpsecTunnel']

@pulumi.input_type
class IpsecTunnelArgs:
    def __init__(__self__, *,
                 auto_key: pulumi.Input['IpsecTunnelAutoKeyArgs'],
                 anti_replay: Optional[pulumi.Input[_builtins.bool]] = None,
                 copy_tos: Optional[pulumi.Input[_builtins.bool]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_gre_encapsulation: Optional[pulumi.Input[_builtins.bool]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_monitor: Optional[pulumi.Input['IpsecTunnelTunnelMonitorArgs']] = None):
        """
        The set of arguments for constructing a IpsecTunnel resource.
        :param pulumi.Input['IpsecTunnelAutoKeyArgs'] auto_key: The AutoKey param.
        :param pulumi.Input[_builtins.bool] anti_replay: Enable Anti-Replay check on this tunnel.
        :param pulumi.Input[_builtins.bool] copy_tos: Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[_builtins.bool] enable_gre_encapsulation: allow GRE over IPSec. Default: `false`.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[_builtins.str] name: Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input['IpsecTunnelTunnelMonitorArgs'] tunnel_monitor: The TunnelMonitor param.
        """
        pulumi.set(__self__, "auto_key", auto_key)
        if anti_replay is not None:
            pulumi.set(__self__, "anti_replay", anti_replay)
        if copy_tos is not None:
            pulumi.set(__self__, "copy_tos", copy_tos)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if enable_gre_encapsulation is not None:
            pulumi.set(__self__, "enable_gre_encapsulation", enable_gre_encapsulation)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if tunnel_monitor is not None:
            pulumi.set(__self__, "tunnel_monitor", tunnel_monitor)

    @_builtins.property
    @pulumi.getter(name="autoKey")
    def auto_key(self) -> pulumi.Input['IpsecTunnelAutoKeyArgs']:
        """
        The AutoKey param.
        """
        return pulumi.get(self, "auto_key")

    @auto_key.setter
    def auto_key(self, value: pulumi.Input['IpsecTunnelAutoKeyArgs']):
        pulumi.set(self, "auto_key", value)

    @_builtins.property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Anti-Replay check on this tunnel.
        """
        return pulumi.get(self, "anti_replay")

    @anti_replay.setter
    def anti_replay(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "anti_replay", value)

    @_builtins.property
    @pulumi.getter(name="copyTos")
    def copy_tos(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.
        """
        return pulumi.get(self, "copy_tos")

    @copy_tos.setter
    def copy_tos(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "copy_tos", value)

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Device param.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter(name="enableGreEncapsulation")
    def enable_gre_encapsulation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        allow GRE over IPSec. Default: `false`.
        """
        return pulumi.get(self, "enable_gre_encapsulation")

    @enable_gre_encapsulation.setter
    def enable_gre_encapsulation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_gre_encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Snippet param.
        """
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snippet", value)

    @_builtins.property
    @pulumi.getter(name="tunnelMonitor")
    def tunnel_monitor(self) -> Optional[pulumi.Input['IpsecTunnelTunnelMonitorArgs']]:
        """
        The TunnelMonitor param.
        """
        return pulumi.get(self, "tunnel_monitor")

    @tunnel_monitor.setter
    def tunnel_monitor(self, value: Optional[pulumi.Input['IpsecTunnelTunnelMonitorArgs']]):
        pulumi.set(self, "tunnel_monitor", value)


@pulumi.input_type
class _IpsecTunnelState:
    def __init__(__self__, *,
                 anti_replay: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_key: Optional[pulumi.Input['IpsecTunnelAutoKeyArgs']] = None,
                 copy_tos: Optional[pulumi.Input[_builtins.bool]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_gre_encapsulation: Optional[pulumi.Input[_builtins.bool]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 tfid: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_monitor: Optional[pulumi.Input['IpsecTunnelTunnelMonitorArgs']] = None):
        """
        Input properties used for looking up and filtering IpsecTunnel resources.
        :param pulumi.Input[_builtins.bool] anti_replay: Enable Anti-Replay check on this tunnel.
        :param pulumi.Input['IpsecTunnelAutoKeyArgs'] auto_key: The AutoKey param.
        :param pulumi.Input[_builtins.bool] copy_tos: Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[_builtins.bool] enable_gre_encapsulation: allow GRE over IPSec. Default: `false`.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[_builtins.str] name: Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input['IpsecTunnelTunnelMonitorArgs'] tunnel_monitor: The TunnelMonitor param.
        """
        if anti_replay is not None:
            pulumi.set(__self__, "anti_replay", anti_replay)
        if auto_key is not None:
            pulumi.set(__self__, "auto_key", auto_key)
        if copy_tos is not None:
            pulumi.set(__self__, "copy_tos", copy_tos)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if enable_gre_encapsulation is not None:
            pulumi.set(__self__, "enable_gre_encapsulation", enable_gre_encapsulation)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if tfid is not None:
            pulumi.set(__self__, "tfid", tfid)
        if tunnel_monitor is not None:
            pulumi.set(__self__, "tunnel_monitor", tunnel_monitor)

    @_builtins.property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Anti-Replay check on this tunnel.
        """
        return pulumi.get(self, "anti_replay")

    @anti_replay.setter
    def anti_replay(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "anti_replay", value)

    @_builtins.property
    @pulumi.getter(name="autoKey")
    def auto_key(self) -> Optional[pulumi.Input['IpsecTunnelAutoKeyArgs']]:
        """
        The AutoKey param.
        """
        return pulumi.get(self, "auto_key")

    @auto_key.setter
    def auto_key(self, value: Optional[pulumi.Input['IpsecTunnelAutoKeyArgs']]):
        pulumi.set(self, "auto_key", value)

    @_builtins.property
    @pulumi.getter(name="copyTos")
    def copy_tos(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.
        """
        return pulumi.get(self, "copy_tos")

    @copy_tos.setter
    def copy_tos(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "copy_tos", value)

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Device param.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter(name="enableGreEncapsulation")
    def enable_gre_encapsulation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        allow GRE over IPSec. Default: `false`.
        """
        return pulumi.get(self, "enable_gre_encapsulation")

    @enable_gre_encapsulation.setter
    def enable_gre_encapsulation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_gre_encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Snippet param.
        """
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snippet", value)

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tfid")

    @tfid.setter
    def tfid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tfid", value)

    @_builtins.property
    @pulumi.getter(name="tunnelMonitor")
    def tunnel_monitor(self) -> Optional[pulumi.Input['IpsecTunnelTunnelMonitorArgs']]:
        """
        The TunnelMonitor param.
        """
        return pulumi.get(self, "tunnel_monitor")

    @tunnel_monitor.setter
    def tunnel_monitor(self, value: Optional[pulumi.Input['IpsecTunnelTunnelMonitorArgs']]):
        pulumi.set(self, "tunnel_monitor", value)


@pulumi.type_token("scm:index/ipsecTunnel:IpsecTunnel")
class IpsecTunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anti_replay: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_key: Optional[pulumi.Input[Union['IpsecTunnelAutoKeyArgs', 'IpsecTunnelAutoKeyArgsDict']]] = None,
                 copy_tos: Optional[pulumi.Input[_builtins.bool]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_gre_encapsulation: Optional[pulumi.Input[_builtins.bool]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_monitor: Optional[pulumi.Input[Union['IpsecTunnelTunnelMonitorArgs', 'IpsecTunnelTunnelMonitorArgsDict']]] = None,
                 __props__=None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.IpsecTunnel("example")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] anti_replay: Enable Anti-Replay check on this tunnel.
        :param pulumi.Input[Union['IpsecTunnelAutoKeyArgs', 'IpsecTunnelAutoKeyArgsDict']] auto_key: The AutoKey param.
        :param pulumi.Input[_builtins.bool] copy_tos: Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[_builtins.bool] enable_gre_encapsulation: allow GRE over IPSec. Default: `false`.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[_builtins.str] name: Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[Union['IpsecTunnelTunnelMonitorArgs', 'IpsecTunnelTunnelMonitorArgsDict']] tunnel_monitor: The TunnelMonitor param.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpsecTunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.IpsecTunnel("example")
        ```

        :param str resource_name: The name of the resource.
        :param IpsecTunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpsecTunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anti_replay: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_key: Optional[pulumi.Input[Union['IpsecTunnelAutoKeyArgs', 'IpsecTunnelAutoKeyArgsDict']]] = None,
                 copy_tos: Optional[pulumi.Input[_builtins.bool]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_gre_encapsulation: Optional[pulumi.Input[_builtins.bool]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_monitor: Optional[pulumi.Input[Union['IpsecTunnelTunnelMonitorArgs', 'IpsecTunnelTunnelMonitorArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpsecTunnelArgs.__new__(IpsecTunnelArgs)

            __props__.__dict__["anti_replay"] = anti_replay
            if auto_key is None and not opts.urn:
                raise TypeError("Missing required property 'auto_key'")
            __props__.__dict__["auto_key"] = auto_key
            __props__.__dict__["copy_tos"] = copy_tos
            __props__.__dict__["device"] = device
            __props__.__dict__["enable_gre_encapsulation"] = enable_gre_encapsulation
            __props__.__dict__["folder"] = folder
            __props__.__dict__["name"] = name
            __props__.__dict__["snippet"] = snippet
            __props__.__dict__["tunnel_monitor"] = tunnel_monitor
            __props__.__dict__["tfid"] = None
        super(IpsecTunnel, __self__).__init__(
            'scm:index/ipsecTunnel:IpsecTunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anti_replay: Optional[pulumi.Input[_builtins.bool]] = None,
            auto_key: Optional[pulumi.Input[Union['IpsecTunnelAutoKeyArgs', 'IpsecTunnelAutoKeyArgsDict']]] = None,
            copy_tos: Optional[pulumi.Input[_builtins.bool]] = None,
            device: Optional[pulumi.Input[_builtins.str]] = None,
            enable_gre_encapsulation: Optional[pulumi.Input[_builtins.bool]] = None,
            folder: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            snippet: Optional[pulumi.Input[_builtins.str]] = None,
            tfid: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_monitor: Optional[pulumi.Input[Union['IpsecTunnelTunnelMonitorArgs', 'IpsecTunnelTunnelMonitorArgsDict']]] = None) -> 'IpsecTunnel':
        """
        Get an existing IpsecTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] anti_replay: Enable Anti-Replay check on this tunnel.
        :param pulumi.Input[Union['IpsecTunnelAutoKeyArgs', 'IpsecTunnelAutoKeyArgsDict']] auto_key: The AutoKey param.
        :param pulumi.Input[_builtins.bool] copy_tos: Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[_builtins.bool] enable_gre_encapsulation: allow GRE over IPSec. Default: `false`.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[_builtins.str] name: Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[Union['IpsecTunnelTunnelMonitorArgs', 'IpsecTunnelTunnelMonitorArgsDict']] tunnel_monitor: The TunnelMonitor param.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpsecTunnelState.__new__(_IpsecTunnelState)

        __props__.__dict__["anti_replay"] = anti_replay
        __props__.__dict__["auto_key"] = auto_key
        __props__.__dict__["copy_tos"] = copy_tos
        __props__.__dict__["device"] = device
        __props__.__dict__["enable_gre_encapsulation"] = enable_gre_encapsulation
        __props__.__dict__["folder"] = folder
        __props__.__dict__["name"] = name
        __props__.__dict__["snippet"] = snippet
        __props__.__dict__["tfid"] = tfid
        __props__.__dict__["tunnel_monitor"] = tunnel_monitor
        return IpsecTunnel(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="antiReplay")
    def anti_replay(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable Anti-Replay check on this tunnel.
        """
        return pulumi.get(self, "anti_replay")

    @_builtins.property
    @pulumi.getter(name="autoKey")
    def auto_key(self) -> pulumi.Output['outputs.IpsecTunnelAutoKey']:
        """
        The AutoKey param.
        """
        return pulumi.get(self, "auto_key")

    @_builtins.property
    @pulumi.getter(name="copyTos")
    def copy_tos(self) -> pulumi.Output[_builtins.bool]:
        """
        Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.
        """
        return pulumi.get(self, "copy_tos")

    @_builtins.property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Device param.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter(name="enableGreEncapsulation")
    def enable_gre_encapsulation(self) -> pulumi.Output[_builtins.bool]:
        """
        allow GRE over IPSec. Default: `false`.
        """
        return pulumi.get(self, "enable_gre_encapsulation")

    @_builtins.property
    @pulumi.getter
    def folder(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def snippet(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Snippet param.
        """
        return pulumi.get(self, "snippet")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tfid")

    @_builtins.property
    @pulumi.getter(name="tunnelMonitor")
    def tunnel_monitor(self) -> pulumi.Output[Optional['outputs.IpsecTunnelTunnelMonitor']]:
        """
        The TunnelMonitor param.
        """
        return pulumi.get(self, "tunnel_monitor")

