# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCertificateProfileResult',
    'AwaitableGetCertificateProfileResult',
    'get_certificate_profile',
    'get_certificate_profile_output',
]

@pulumi.output_type
class GetCertificateProfileResult:
    """
    A collection of values returned by getCertificateProfile.
    """
    def __init__(__self__, block_expired_cert=None, block_timeout_cert=None, block_unauthenticated_cert=None, block_unknown_cert=None, ca_certificates=None, cert_status_timeout=None, crl_receive_timeout=None, domain=None, id=None, name=None, ocsp_receive_timeout=None, tfid=None, use_crl=None, use_ocsp=None, username_field=None):
        if block_expired_cert and not isinstance(block_expired_cert, bool):
            raise TypeError("Expected argument 'block_expired_cert' to be a bool")
        pulumi.set(__self__, "block_expired_cert", block_expired_cert)
        if block_timeout_cert and not isinstance(block_timeout_cert, bool):
            raise TypeError("Expected argument 'block_timeout_cert' to be a bool")
        pulumi.set(__self__, "block_timeout_cert", block_timeout_cert)
        if block_unauthenticated_cert and not isinstance(block_unauthenticated_cert, bool):
            raise TypeError("Expected argument 'block_unauthenticated_cert' to be a bool")
        pulumi.set(__self__, "block_unauthenticated_cert", block_unauthenticated_cert)
        if block_unknown_cert and not isinstance(block_unknown_cert, bool):
            raise TypeError("Expected argument 'block_unknown_cert' to be a bool")
        pulumi.set(__self__, "block_unknown_cert", block_unknown_cert)
        if ca_certificates and not isinstance(ca_certificates, list):
            raise TypeError("Expected argument 'ca_certificates' to be a list")
        pulumi.set(__self__, "ca_certificates", ca_certificates)
        if cert_status_timeout and not isinstance(cert_status_timeout, str):
            raise TypeError("Expected argument 'cert_status_timeout' to be a str")
        pulumi.set(__self__, "cert_status_timeout", cert_status_timeout)
        if crl_receive_timeout and not isinstance(crl_receive_timeout, str):
            raise TypeError("Expected argument 'crl_receive_timeout' to be a str")
        pulumi.set(__self__, "crl_receive_timeout", crl_receive_timeout)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ocsp_receive_timeout and not isinstance(ocsp_receive_timeout, str):
            raise TypeError("Expected argument 'ocsp_receive_timeout' to be a str")
        pulumi.set(__self__, "ocsp_receive_timeout", ocsp_receive_timeout)
        if tfid and not isinstance(tfid, str):
            raise TypeError("Expected argument 'tfid' to be a str")
        pulumi.set(__self__, "tfid", tfid)
        if use_crl and not isinstance(use_crl, bool):
            raise TypeError("Expected argument 'use_crl' to be a bool")
        pulumi.set(__self__, "use_crl", use_crl)
        if use_ocsp and not isinstance(use_ocsp, bool):
            raise TypeError("Expected argument 'use_ocsp' to be a bool")
        pulumi.set(__self__, "use_ocsp", use_ocsp)
        if username_field and not isinstance(username_field, dict):
            raise TypeError("Expected argument 'username_field' to be a dict")
        pulumi.set(__self__, "username_field", username_field)

    @_builtins.property
    @pulumi.getter(name="blockExpiredCert")
    def block_expired_cert(self) -> _builtins.bool:
        """
        The BlockExpiredCert param.
        """
        return pulumi.get(self, "block_expired_cert")

    @_builtins.property
    @pulumi.getter(name="blockTimeoutCert")
    def block_timeout_cert(self) -> _builtins.bool:
        """
        The BlockTimeoutCert param.
        """
        return pulumi.get(self, "block_timeout_cert")

    @_builtins.property
    @pulumi.getter(name="blockUnauthenticatedCert")
    def block_unauthenticated_cert(self) -> _builtins.bool:
        """
        The BlockUnauthenticatedCert param.
        """
        return pulumi.get(self, "block_unauthenticated_cert")

    @_builtins.property
    @pulumi.getter(name="blockUnknownCert")
    def block_unknown_cert(self) -> _builtins.bool:
        """
        The BlockUnknownCert param.
        """
        return pulumi.get(self, "block_unknown_cert")

    @_builtins.property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Sequence['outputs.GetCertificateProfileCaCertificateResult']:
        """
        The CaCertificates param.
        """
        return pulumi.get(self, "ca_certificates")

    @_builtins.property
    @pulumi.getter(name="certStatusTimeout")
    def cert_status_timeout(self) -> _builtins.str:
        """
        The CertStatusTimeout param.
        """
        return pulumi.get(self, "cert_status_timeout")

    @_builtins.property
    @pulumi.getter(name="crlReceiveTimeout")
    def crl_receive_timeout(self) -> _builtins.str:
        """
        The CrlReceiveTimeout param.
        """
        return pulumi.get(self, "crl_receive_timeout")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        The Domain param.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The Id param.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ocspReceiveTimeout")
    def ocsp_receive_timeout(self) -> _builtins.str:
        """
        The OcspReceiveTimeout param.
        """
        return pulumi.get(self, "ocsp_receive_timeout")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> _builtins.str:
        return pulumi.get(self, "tfid")

    @_builtins.property
    @pulumi.getter(name="useCrl")
    def use_crl(self) -> _builtins.bool:
        """
        The UseCrl param.
        """
        return pulumi.get(self, "use_crl")

    @_builtins.property
    @pulumi.getter(name="useOcsp")
    def use_ocsp(self) -> _builtins.bool:
        """
        The UseOcsp param.
        """
        return pulumi.get(self, "use_ocsp")

    @_builtins.property
    @pulumi.getter(name="usernameField")
    def username_field(self) -> 'outputs.GetCertificateProfileUsernameFieldResult':
        """
        The UsernameField param.
        """
        return pulumi.get(self, "username_field")


class AwaitableGetCertificateProfileResult(GetCertificateProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificateProfileResult(
            block_expired_cert=self.block_expired_cert,
            block_timeout_cert=self.block_timeout_cert,
            block_unauthenticated_cert=self.block_unauthenticated_cert,
            block_unknown_cert=self.block_unknown_cert,
            ca_certificates=self.ca_certificates,
            cert_status_timeout=self.cert_status_timeout,
            crl_receive_timeout=self.crl_receive_timeout,
            domain=self.domain,
            id=self.id,
            name=self.name,
            ocsp_receive_timeout=self.ocsp_receive_timeout,
            tfid=self.tfid,
            use_crl=self.use_crl,
            use_ocsp=self.use_ocsp,
            username_field=self.username_field)


def get_certificate_profile(id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificateProfileResult:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_certificate_profile(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('scm:index/getCertificateProfile:getCertificateProfile', __args__, opts=opts, typ=GetCertificateProfileResult).value

    return AwaitableGetCertificateProfileResult(
        block_expired_cert=pulumi.get(__ret__, 'block_expired_cert'),
        block_timeout_cert=pulumi.get(__ret__, 'block_timeout_cert'),
        block_unauthenticated_cert=pulumi.get(__ret__, 'block_unauthenticated_cert'),
        block_unknown_cert=pulumi.get(__ret__, 'block_unknown_cert'),
        ca_certificates=pulumi.get(__ret__, 'ca_certificates'),
        cert_status_timeout=pulumi.get(__ret__, 'cert_status_timeout'),
        crl_receive_timeout=pulumi.get(__ret__, 'crl_receive_timeout'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        ocsp_receive_timeout=pulumi.get(__ret__, 'ocsp_receive_timeout'),
        tfid=pulumi.get(__ret__, 'tfid'),
        use_crl=pulumi.get(__ret__, 'use_crl'),
        use_ocsp=pulumi.get(__ret__, 'use_ocsp'),
        username_field=pulumi.get(__ret__, 'username_field'))
def get_certificate_profile_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCertificateProfileResult]:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_certificate_profile(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('scm:index/getCertificateProfile:getCertificateProfile', __args__, opts=opts, typ=GetCertificateProfileResult)
    return __ret__.apply(lambda __response__: GetCertificateProfileResult(
        block_expired_cert=pulumi.get(__response__, 'block_expired_cert'),
        block_timeout_cert=pulumi.get(__response__, 'block_timeout_cert'),
        block_unauthenticated_cert=pulumi.get(__response__, 'block_unauthenticated_cert'),
        block_unknown_cert=pulumi.get(__response__, 'block_unknown_cert'),
        ca_certificates=pulumi.get(__response__, 'ca_certificates'),
        cert_status_timeout=pulumi.get(__response__, 'cert_status_timeout'),
        crl_receive_timeout=pulumi.get(__response__, 'crl_receive_timeout'),
        domain=pulumi.get(__response__, 'domain'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        ocsp_receive_timeout=pulumi.get(__response__, 'ocsp_receive_timeout'),
        tfid=pulumi.get(__response__, 'tfid'),
        use_crl=pulumi.get(__response__, 'use_crl'),
        use_ocsp=pulumi.get(__response__, 'use_ocsp'),
        username_field=pulumi.get(__response__, 'username_field')))
