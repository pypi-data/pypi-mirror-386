# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAuthenticationProfileResult',
    'AwaitableGetAuthenticationProfileResult',
    'get_authentication_profile',
    'get_authentication_profile_output',
]

@pulumi.output_type
class GetAuthenticationProfileResult:
    """
    A collection of values returned by getAuthenticationProfile.
    """
    def __init__(__self__, allow_lists=None, id=None, lockout=None, method=None, multi_factor_auth=None, name=None, single_sign_on=None, tfid=None, user_domain=None, username_modifier=None):
        if allow_lists and not isinstance(allow_lists, list):
            raise TypeError("Expected argument 'allow_lists' to be a list")
        pulumi.set(__self__, "allow_lists", allow_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lockout and not isinstance(lockout, dict):
            raise TypeError("Expected argument 'lockout' to be a dict")
        pulumi.set(__self__, "lockout", lockout)
        if method and not isinstance(method, dict):
            raise TypeError("Expected argument 'method' to be a dict")
        pulumi.set(__self__, "method", method)
        if multi_factor_auth and not isinstance(multi_factor_auth, dict):
            raise TypeError("Expected argument 'multi_factor_auth' to be a dict")
        pulumi.set(__self__, "multi_factor_auth", multi_factor_auth)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if single_sign_on and not isinstance(single_sign_on, dict):
            raise TypeError("Expected argument 'single_sign_on' to be a dict")
        pulumi.set(__self__, "single_sign_on", single_sign_on)
        if tfid and not isinstance(tfid, str):
            raise TypeError("Expected argument 'tfid' to be a str")
        pulumi.set(__self__, "tfid", tfid)
        if user_domain and not isinstance(user_domain, str):
            raise TypeError("Expected argument 'user_domain' to be a str")
        pulumi.set(__self__, "user_domain", user_domain)
        if username_modifier and not isinstance(username_modifier, str):
            raise TypeError("Expected argument 'username_modifier' to be a str")
        pulumi.set(__self__, "username_modifier", username_modifier)

    @_builtins.property
    @pulumi.getter(name="allowLists")
    def allow_lists(self) -> Sequence[_builtins.str]:
        """
        The AllowList param.
        """
        return pulumi.get(self, "allow_lists")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The Id param.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lockout(self) -> 'outputs.GetAuthenticationProfileLockoutResult':
        """
        The Lockout param.
        """
        return pulumi.get(self, "lockout")

    @_builtins.property
    @pulumi.getter
    def method(self) -> 'outputs.GetAuthenticationProfileMethodResult':
        """
        The Method param.
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter(name="multiFactorAuth")
    def multi_factor_auth(self) -> 'outputs.GetAuthenticationProfileMultiFactorAuthResult':
        """
        The MultiFactorAuth param.
        """
        return pulumi.get(self, "multi_factor_auth")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="singleSignOn")
    def single_sign_on(self) -> 'outputs.GetAuthenticationProfileSingleSignOnResult':
        """
        The SingleSignOn param.
        """
        return pulumi.get(self, "single_sign_on")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> _builtins.str:
        return pulumi.get(self, "tfid")

    @_builtins.property
    @pulumi.getter(name="userDomain")
    def user_domain(self) -> _builtins.str:
        """
        The UserDomain param. String length must not exceed 63 characters.
        """
        return pulumi.get(self, "user_domain")

    @_builtins.property
    @pulumi.getter(name="usernameModifier")
    def username_modifier(self) -> _builtins.str:
        """
        The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\\\%USERINPUT%"`.
        """
        return pulumi.get(self, "username_modifier")


class AwaitableGetAuthenticationProfileResult(GetAuthenticationProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthenticationProfileResult(
            allow_lists=self.allow_lists,
            id=self.id,
            lockout=self.lockout,
            method=self.method,
            multi_factor_auth=self.multi_factor_auth,
            name=self.name,
            single_sign_on=self.single_sign_on,
            tfid=self.tfid,
            user_domain=self.user_domain,
            username_modifier=self.username_modifier)


def get_authentication_profile(id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthenticationProfileResult:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_authentication_profile(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('scm:index/getAuthenticationProfile:getAuthenticationProfile', __args__, opts=opts, typ=GetAuthenticationProfileResult).value

    return AwaitableGetAuthenticationProfileResult(
        allow_lists=pulumi.get(__ret__, 'allow_lists'),
        id=pulumi.get(__ret__, 'id'),
        lockout=pulumi.get(__ret__, 'lockout'),
        method=pulumi.get(__ret__, 'method'),
        multi_factor_auth=pulumi.get(__ret__, 'multi_factor_auth'),
        name=pulumi.get(__ret__, 'name'),
        single_sign_on=pulumi.get(__ret__, 'single_sign_on'),
        tfid=pulumi.get(__ret__, 'tfid'),
        user_domain=pulumi.get(__ret__, 'user_domain'),
        username_modifier=pulumi.get(__ret__, 'username_modifier'))
def get_authentication_profile_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAuthenticationProfileResult]:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_authentication_profile(id="1234-56-789")
    ```


    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('scm:index/getAuthenticationProfile:getAuthenticationProfile', __args__, opts=opts, typ=GetAuthenticationProfileResult)
    return __ret__.apply(lambda __response__: GetAuthenticationProfileResult(
        allow_lists=pulumi.get(__response__, 'allow_lists'),
        id=pulumi.get(__response__, 'id'),
        lockout=pulumi.get(__response__, 'lockout'),
        method=pulumi.get(__response__, 'method'),
        multi_factor_auth=pulumi.get(__response__, 'multi_factor_auth'),
        name=pulumi.get(__response__, 'name'),
        single_sign_on=pulumi.get(__response__, 'single_sign_on'),
        tfid=pulumi.get(__response__, 'tfid'),
        user_domain=pulumi.get(__response__, 'user_domain'),
        username_modifier=pulumi.get(__response__, 'username_modifier')))
