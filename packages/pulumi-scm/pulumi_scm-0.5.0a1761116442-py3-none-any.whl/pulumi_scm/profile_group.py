# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProfileGroupArgs', 'ProfileGroup']

@pulumi.input_type
class ProfileGroupArgs:
    def __init__(__self__, *,
                 ai_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 file_blockings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 saas_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 spywares: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 url_filterings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 virus_and_wildfire_analyses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vulnerabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ProfileGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ai_securities: List of AI security profiles.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_securities: List of DNS security profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] file_blockings: List of file blocking profiles.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[_builtins.str] name: The name of the profile group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] saas_securities: List of HTTP header insertion profiles.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] spywares: List of anti-spyware profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] url_filterings: List of URL filtering profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] virus_and_wildfire_analyses: List of anti-virus and Wildfire analysis profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vulnerabilities: List of vulnerability protection profiles.
        """
        if ai_securities is not None:
            pulumi.set(__self__, "ai_securities", ai_securities)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dns_securities is not None:
            pulumi.set(__self__, "dns_securities", dns_securities)
        if file_blockings is not None:
            pulumi.set(__self__, "file_blockings", file_blockings)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if saas_securities is not None:
            pulumi.set(__self__, "saas_securities", saas_securities)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if spywares is not None:
            pulumi.set(__self__, "spywares", spywares)
        if url_filterings is not None:
            pulumi.set(__self__, "url_filterings", url_filterings)
        if virus_and_wildfire_analyses is not None:
            pulumi.set(__self__, "virus_and_wildfire_analyses", virus_and_wildfire_analyses)
        if vulnerabilities is not None:
            pulumi.set(__self__, "vulnerabilities", vulnerabilities)

    @_builtins.property
    @pulumi.getter(name="aiSecurities")
    def ai_securities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of AI security profiles.
        """
        return pulumi.get(self, "ai_securities")

    @ai_securities.setter
    def ai_securities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ai_securities", value)

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Device param.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter(name="dnsSecurities")
    def dns_securities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of DNS security profiles.
        """
        return pulumi.get(self, "dns_securities")

    @dns_securities.setter
    def dns_securities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dns_securities", value)

    @_builtins.property
    @pulumi.getter(name="fileBlockings")
    def file_blockings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of file blocking profiles.
        """
        return pulumi.get(self, "file_blockings")

    @file_blockings.setter
    def file_blockings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "file_blockings", value)

    @_builtins.property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the profile group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="saasSecurities")
    def saas_securities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of HTTP header insertion profiles.
        """
        return pulumi.get(self, "saas_securities")

    @saas_securities.setter
    def saas_securities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "saas_securities", value)

    @_builtins.property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Snippet param.
        """
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snippet", value)

    @_builtins.property
    @pulumi.getter
    def spywares(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of anti-spyware profiles.
        """
        return pulumi.get(self, "spywares")

    @spywares.setter
    def spywares(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "spywares", value)

    @_builtins.property
    @pulumi.getter(name="urlFilterings")
    def url_filterings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of URL filtering profiles.
        """
        return pulumi.get(self, "url_filterings")

    @url_filterings.setter
    def url_filterings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "url_filterings", value)

    @_builtins.property
    @pulumi.getter(name="virusAndWildfireAnalyses")
    def virus_and_wildfire_analyses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of anti-virus and Wildfire analysis profiles.
        """
        return pulumi.get(self, "virus_and_wildfire_analyses")

    @virus_and_wildfire_analyses.setter
    def virus_and_wildfire_analyses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "virus_and_wildfire_analyses", value)

    @_builtins.property
    @pulumi.getter
    def vulnerabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of vulnerability protection profiles.
        """
        return pulumi.get(self, "vulnerabilities")

    @vulnerabilities.setter
    def vulnerabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vulnerabilities", value)


@pulumi.input_type
class _ProfileGroupState:
    def __init__(__self__, *,
                 ai_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 file_blockings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 saas_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 spywares: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tfid: Optional[pulumi.Input[_builtins.str]] = None,
                 url_filterings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 virus_and_wildfire_analyses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vulnerabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering ProfileGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ai_securities: List of AI security profiles.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_securities: List of DNS security profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] file_blockings: List of file blocking profiles.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[_builtins.str] name: The name of the profile group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] saas_securities: List of HTTP header insertion profiles.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] spywares: List of anti-spyware profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] url_filterings: List of URL filtering profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] virus_and_wildfire_analyses: List of anti-virus and Wildfire analysis profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vulnerabilities: List of vulnerability protection profiles.
        """
        if ai_securities is not None:
            pulumi.set(__self__, "ai_securities", ai_securities)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dns_securities is not None:
            pulumi.set(__self__, "dns_securities", dns_securities)
        if file_blockings is not None:
            pulumi.set(__self__, "file_blockings", file_blockings)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if saas_securities is not None:
            pulumi.set(__self__, "saas_securities", saas_securities)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if spywares is not None:
            pulumi.set(__self__, "spywares", spywares)
        if tfid is not None:
            pulumi.set(__self__, "tfid", tfid)
        if url_filterings is not None:
            pulumi.set(__self__, "url_filterings", url_filterings)
        if virus_and_wildfire_analyses is not None:
            pulumi.set(__self__, "virus_and_wildfire_analyses", virus_and_wildfire_analyses)
        if vulnerabilities is not None:
            pulumi.set(__self__, "vulnerabilities", vulnerabilities)

    @_builtins.property
    @pulumi.getter(name="aiSecurities")
    def ai_securities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of AI security profiles.
        """
        return pulumi.get(self, "ai_securities")

    @ai_securities.setter
    def ai_securities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ai_securities", value)

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Device param.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter(name="dnsSecurities")
    def dns_securities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of DNS security profiles.
        """
        return pulumi.get(self, "dns_securities")

    @dns_securities.setter
    def dns_securities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dns_securities", value)

    @_builtins.property
    @pulumi.getter(name="fileBlockings")
    def file_blockings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of file blocking profiles.
        """
        return pulumi.get(self, "file_blockings")

    @file_blockings.setter
    def file_blockings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "file_blockings", value)

    @_builtins.property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the profile group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="saasSecurities")
    def saas_securities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of HTTP header insertion profiles.
        """
        return pulumi.get(self, "saas_securities")

    @saas_securities.setter
    def saas_securities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "saas_securities", value)

    @_builtins.property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Snippet param.
        """
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snippet", value)

    @_builtins.property
    @pulumi.getter
    def spywares(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of anti-spyware profiles.
        """
        return pulumi.get(self, "spywares")

    @spywares.setter
    def spywares(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "spywares", value)

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tfid")

    @tfid.setter
    def tfid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tfid", value)

    @_builtins.property
    @pulumi.getter(name="urlFilterings")
    def url_filterings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of URL filtering profiles.
        """
        return pulumi.get(self, "url_filterings")

    @url_filterings.setter
    def url_filterings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "url_filterings", value)

    @_builtins.property
    @pulumi.getter(name="virusAndWildfireAnalyses")
    def virus_and_wildfire_analyses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of anti-virus and Wildfire analysis profiles.
        """
        return pulumi.get(self, "virus_and_wildfire_analyses")

    @virus_and_wildfire_analyses.setter
    def virus_and_wildfire_analyses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "virus_and_wildfire_analyses", value)

    @_builtins.property
    @pulumi.getter
    def vulnerabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of vulnerability protection profiles.
        """
        return pulumi.get(self, "vulnerabilities")

    @vulnerabilities.setter
    def vulnerabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vulnerabilities", value)


@pulumi.type_token("scm:index/profileGroup:ProfileGroup")
class ProfileGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 file_blockings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 saas_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 spywares: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 url_filterings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 virus_and_wildfire_analyses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vulnerabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.ProfileGroup("example")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ai_securities: List of AI security profiles.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_securities: List of DNS security profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] file_blockings: List of file blocking profiles.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[_builtins.str] name: The name of the profile group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] saas_securities: List of HTTP header insertion profiles.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] spywares: List of anti-spyware profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] url_filterings: List of URL filtering profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] virus_and_wildfire_analyses: List of anti-virus and Wildfire analysis profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vulnerabilities: List of vulnerability protection profiles.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProfileGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.ProfileGroup("example")
        ```

        :param str resource_name: The name of the resource.
        :param ProfileGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProfileGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 file_blockings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 folder: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 saas_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 snippet: Optional[pulumi.Input[_builtins.str]] = None,
                 spywares: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 url_filterings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 virus_and_wildfire_analyses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vulnerabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProfileGroupArgs.__new__(ProfileGroupArgs)

            __props__.__dict__["ai_securities"] = ai_securities
            __props__.__dict__["device"] = device
            __props__.__dict__["dns_securities"] = dns_securities
            __props__.__dict__["file_blockings"] = file_blockings
            __props__.__dict__["folder"] = folder
            __props__.__dict__["name"] = name
            __props__.__dict__["saas_securities"] = saas_securities
            __props__.__dict__["snippet"] = snippet
            __props__.__dict__["spywares"] = spywares
            __props__.__dict__["url_filterings"] = url_filterings
            __props__.__dict__["virus_and_wildfire_analyses"] = virus_and_wildfire_analyses
            __props__.__dict__["vulnerabilities"] = vulnerabilities
            __props__.__dict__["tfid"] = None
        super(ProfileGroup, __self__).__init__(
            'scm:index/profileGroup:ProfileGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ai_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            device: Optional[pulumi.Input[_builtins.str]] = None,
            dns_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            file_blockings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            folder: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            saas_securities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            snippet: Optional[pulumi.Input[_builtins.str]] = None,
            spywares: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tfid: Optional[pulumi.Input[_builtins.str]] = None,
            url_filterings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            virus_and_wildfire_analyses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            vulnerabilities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'ProfileGroup':
        """
        Get an existing ProfileGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ai_securities: List of AI security profiles.
        :param pulumi.Input[_builtins.str] device: The Device param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dns_securities: List of DNS security profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] file_blockings: List of file blocking profiles.
        :param pulumi.Input[_builtins.str] folder: The Folder param.
        :param pulumi.Input[_builtins.str] name: The name of the profile group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] saas_securities: List of HTTP header insertion profiles.
        :param pulumi.Input[_builtins.str] snippet: The Snippet param.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] spywares: List of anti-spyware profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] url_filterings: List of URL filtering profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] virus_and_wildfire_analyses: List of anti-virus and Wildfire analysis profiles.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vulnerabilities: List of vulnerability protection profiles.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProfileGroupState.__new__(_ProfileGroupState)

        __props__.__dict__["ai_securities"] = ai_securities
        __props__.__dict__["device"] = device
        __props__.__dict__["dns_securities"] = dns_securities
        __props__.__dict__["file_blockings"] = file_blockings
        __props__.__dict__["folder"] = folder
        __props__.__dict__["name"] = name
        __props__.__dict__["saas_securities"] = saas_securities
        __props__.__dict__["snippet"] = snippet
        __props__.__dict__["spywares"] = spywares
        __props__.__dict__["tfid"] = tfid
        __props__.__dict__["url_filterings"] = url_filterings
        __props__.__dict__["virus_and_wildfire_analyses"] = virus_and_wildfire_analyses
        __props__.__dict__["vulnerabilities"] = vulnerabilities
        return ProfileGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="aiSecurities")
    def ai_securities(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of AI security profiles.
        """
        return pulumi.get(self, "ai_securities")

    @_builtins.property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Device param.
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter(name="dnsSecurities")
    def dns_securities(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of DNS security profiles.
        """
        return pulumi.get(self, "dns_securities")

    @_builtins.property
    @pulumi.getter(name="fileBlockings")
    def file_blockings(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of file blocking profiles.
        """
        return pulumi.get(self, "file_blockings")

    @_builtins.property
    @pulumi.getter
    def folder(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the profile group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="saasSecurities")
    def saas_securities(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of HTTP header insertion profiles.
        """
        return pulumi.get(self, "saas_securities")

    @_builtins.property
    @pulumi.getter
    def snippet(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Snippet param.
        """
        return pulumi.get(self, "snippet")

    @_builtins.property
    @pulumi.getter
    def spywares(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of anti-spyware profiles.
        """
        return pulumi.get(self, "spywares")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tfid")

    @_builtins.property
    @pulumi.getter(name="urlFilterings")
    def url_filterings(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of URL filtering profiles.
        """
        return pulumi.get(self, "url_filterings")

    @_builtins.property
    @pulumi.getter(name="virusAndWildfireAnalyses")
    def virus_and_wildfire_analyses(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of anti-virus and Wildfire analysis profiles.
        """
        return pulumi.get(self, "virus_and_wildfire_analyses")

    @_builtins.property
    @pulumi.getter
    def vulnerabilities(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of vulnerability protection profiles.
        """
        return pulumi.get(self, "vulnerabilities")

