# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetQosPolicyRuleResult',
    'AwaitableGetQosPolicyRuleResult',
    'get_qos_policy_rule',
    'get_qos_policy_rule_output',
]

@pulumi.output_type
class GetQosPolicyRuleResult:
    """
    A collection of values returned by getQosPolicyRule.
    """
    def __init__(__self__, action=None, description=None, dscp_tos=None, folder=None, id=None, name=None, schedule=None, tfid=None):
        if action and not isinstance(action, dict):
            raise TypeError("Expected argument 'action' to be a dict")
        pulumi.set(__self__, "action", action)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dscp_tos and not isinstance(dscp_tos, dict):
            raise TypeError("Expected argument 'dscp_tos' to be a dict")
        pulumi.set(__self__, "dscp_tos", dscp_tos)
        if folder and not isinstance(folder, str):
            raise TypeError("Expected argument 'folder' to be a str")
        pulumi.set(__self__, "folder", folder)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if tfid and not isinstance(tfid, str):
            raise TypeError("Expected argument 'tfid' to be a str")
        pulumi.set(__self__, "tfid", tfid)

    @_builtins.property
    @pulumi.getter
    def action(self) -> 'outputs.GetQosPolicyRuleActionResult':
        """
        The Action param.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The Description param.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dscpTos")
    def dscp_tos(self) -> 'outputs.GetQosPolicyRuleDscpTosResult':
        """
        The DscpTos param.
        """
        return pulumi.get(self, "dscp_tos")

    @_builtins.property
    @pulumi.getter
    def folder(self) -> Optional[_builtins.str]:
        """
        The Folder param.
        """
        return pulumi.get(self, "folder")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The Id param.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> _builtins.str:
        """
        The Schedule param.
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter
    def tfid(self) -> _builtins.str:
        return pulumi.get(self, "tfid")


class AwaitableGetQosPolicyRuleResult(GetQosPolicyRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQosPolicyRuleResult(
            action=self.action,
            description=self.description,
            dscp_tos=self.dscp_tos,
            folder=self.folder,
            id=self.id,
            name=self.name,
            schedule=self.schedule,
            tfid=self.tfid)


def get_qos_policy_rule(folder: Optional[_builtins.str] = None,
                        id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQosPolicyRuleResult:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_qos_policy_rule(id="1234-56-789")
    ```


    :param _builtins.str folder: The Folder param.
    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['folder'] = folder
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('scm:index/getQosPolicyRule:getQosPolicyRule', __args__, opts=opts, typ=GetQosPolicyRuleResult).value

    return AwaitableGetQosPolicyRuleResult(
        action=pulumi.get(__ret__, 'action'),
        description=pulumi.get(__ret__, 'description'),
        dscp_tos=pulumi.get(__ret__, 'dscp_tos'),
        folder=pulumi.get(__ret__, 'folder'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        schedule=pulumi.get(__ret__, 'schedule'),
        tfid=pulumi.get(__ret__, 'tfid'))
def get_qos_policy_rule_output(folder: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               id: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQosPolicyRuleResult]:
    """
    Retrieves a config item.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_scm as scm

    example = scm.get_qos_policy_rule(id="1234-56-789")
    ```


    :param _builtins.str folder: The Folder param.
    :param _builtins.str id: The Id param.
    """
    __args__ = dict()
    __args__['folder'] = folder
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('scm:index/getQosPolicyRule:getQosPolicyRule', __args__, opts=opts, typ=GetQosPolicyRuleResult)
    return __ret__.apply(lambda __response__: GetQosPolicyRuleResult(
        action=pulumi.get(__response__, 'action'),
        description=pulumi.get(__response__, 'description'),
        dscp_tos=pulumi.get(__response__, 'dscp_tos'),
        folder=pulumi.get(__response__, 'folder'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        schedule=pulumi.get(__response__, 'schedule'),
        tfid=pulumi.get(__response__, 'tfid')))
