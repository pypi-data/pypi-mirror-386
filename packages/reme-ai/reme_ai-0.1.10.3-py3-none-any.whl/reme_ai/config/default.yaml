backend: http
thread_pool_max_workers: 64

mcp:
  transport: sse
  host: "0.0.0.0"
  port: 8002

http:
  host: "0.0.0.0"
  port: 8002
  timeout_keep_alive: 600
  limit_concurrency: 64

flow:
  retrieve_task_memory:
    flow_content: build_query_op >> recall_vector_store_op >> rerank_memory_op >> rewrite_memory_op
    description: "Retrieves the most relevant top-k memory experiences from historical data based on the current query to enhance task-solving capabilities"
    input_schema:
      query:
        type: string
        description: "user query"
        required: true

  summary_task_memory:
    flow_content: trajectory_preprocess_op >> (success_extraction_op|failure_extraction_op|comparative_extraction_op) >> memory_validation_op >> update_vector_store_op
    description: "Summarizes conversation trajectories or messages into structured memory representations for long-term storage"
    input_schema:
      trajectories:
        type: array
        description: "A list of conversation trajectory information, including message content and score. This field does not need to be filled in, the system will complete it automatically."
        required: false

  retrieve_personal_memory:
    flow_content: set_query_op >> (extract_time_op | (retrieve_memory_op >> semantic_rank_op)) >> fuse_rerank_op
    description: "Retrieves the most relevant personal memories from historical data based on the query to enhance response quality"
    input_schema:
      query:
        type: string
        description: "user query"
        required: true

  summary_personal_memory:
    flow_content: info_filter_op >> (get_observation_op | get_observation_with_time_op | load_today_memory_op) >> contra_repeat_op >> update_vector_store_op
    description: "Consolidates user observations and memories by filtering information and removing redundancies for efficient storage"
    input_schema:
      trajectories:
        type: array
        description: "A list of conversation trajectory information, including message content and score. This field does not need to be filled in, the system will complete it automatically."
        required: false

  retrieve_tool_memory:
    flow_content: retrieve_tool_memory_op
    description: "Retrieves tool memories from the vector database based on tool names to provide tool usage patterns and best practices"
    input_schema:
      tool_names:
        type: string
        description: "Comma-separated tool names (e.g., 'tool_name1,tool_name2')"
        required: true

  add_tool_call_result:
    flow_content: parse_tool_call_result_op >> update_vector_store_op
    description: "Evaluates and adds tool call results to the tool memory database, creating new memory or updating existing memory for the specified tool"
    input_schema:
      tool_call_results:
        type: array
        description: "List of tool call result objects, each containing: tool_name, input, output, success, time_cost, token_cost, create_time"
        required: true

  summary_tool_memory:
    flow_content: summary_tool_memory_op >> update_vector_store_op
    description: "Analyzes tool call history and generates comprehensive usage patterns, best practices, and recommendations for the specified tools"
    input_schema:
      tool_names:
        type: string
        description: "Comma-separated tool names to summarize (e.g., 'tool_name1,tool_name2')"
        required: true

  use_mock_search:
    flow_content: use_mock_search_op
    description: "Simulates intelligent search tool selection and execution based on query complexity, with automatic tool memory recording"
    input_schema:
      query:
        type: string
        description: "User search query to process"
        required: true 

  summary_task_memory_simple:
    flow_content: simple_summary_op >> update_vector_store_op
    description: "Summarizes conversation trajectories or messages into memories using a simplified approach"
    input_schema:
      trajectories:
        type: array
        description: "A list of conversation trajectory information, including message content and score. This field does not need to be filled in, the system will complete it automatically."
        required: false

  vector_store:
    flow_content: vector_store_action_op
    description: "Directly operates on the vector store with various management actions"
    input_schema:
      action:
        type: string
        description: "vector store operations"
        required: true
        enum: [ copy, delete, delete_ids, dump, load, list]

  record_task_memory:
    flow_content: update_memory_freq_op >> update_memory_utility_op >> update_vector_store_op
    description: "Update the freq & utility attributes of retrieved task memories"
    input_schema:
      workspace_id:
        type: string
        description: "workspace id"
        required: true
      memory_dicts:
        type: array
        description: "A list of retrieved task memory corresponding to the current task."
        required: true
      update_utility:
        type: boolean
        description: "Whether to update the utility attribute of the retrieved task memory."
        required: true

  delete_task_memory:
    flow_content: delete_memory_op >> update_vector_store_op
    description: "Delete task memories when utility/freq < utility_threshold and freq >= freq_threshold"
    input_schema:
      workspace_id:
        type: string
        description: "workspace id"
        required: true
      freq_threshold:
        type: integer
        description: "The retrieved frequency threshold for deleting task memory."
        required: true
      utility_threshold:
        type: number
        description: "The utility/freq threshold for deleting task memory."
        required: true

  react:
    flow_content: simple_react_op
    description: "React to the current task with an agent"
    input_schema:
      query:
        type: string
        description: "user query"
        required: true

op:
  # retriever ops
  rerank_memory_op:
    backend: rerank_memory_op
    llm: default
    params:
      enable_llm_rerank: true
      enable_score_filter: false
      top_k: 5

  rewrite_memory_op:
    backend: rewrite_memory_op
    llm: default
    params:
      enable_llm_rewrite: true

  # tool memory ops
  parse_tool_call_result_op:
    backend: parse_tool_call_result_op
    llm: default
    params:
      max_history_tool_call_cnt: 100
      evaluation_sleep_interval: 1.0

  summary_tool_memory_op:
    backend: summary_tool_memory_op
    llm: default
    params:
      recent_call_count: 20
      summary_sleep_interval: 1.0

llm:
  default:
    backend: openai_compatible
    model_name: qwen3-30b-a3b-instruct-2507
    params:
      temperature: 0.6

  qwen3_30b_instruct:
    backend: openai_compatible
    model_name: qwen3-30b-a3b-instruct-2507

  qwen3_30b_thinking:
    backend: openai_compatible
    model_name: qwen3-30b-a3b-thinking-2507

  qwen3_235b_instruct:
    backend: openai_compatible
    model_name: qwen3-235b-a22b-instruct-2507

  qwen3_235b_thinking:
    backend: openai_compatible
    model_name: qwen3-235b-a22b-thinking-2507

  qwen3_80b_instruct:
    backend: openai_compatible
    model_name: qwen3-next-80b-a3b-instruct

  qwen3_80b_thinking:
    backend: openai_compatible
    model_name: qwen3-next-80b-a3b-thinking

  qwen3_max_instruct:
    backend: openai_compatible
    model_name: qwen3-max

  qwen25_max_instruct:
    backend: openai_compatible
    model_name: qwen-max-2025-01-25

embedding_model:
  default:
    backend: openai_compatible
    model_name: text-embedding-v4
    params:
      dimensions: 1024

vector_store:
  default:
    backend: memory
    embedding_model: default
#    params:
#      hosts: "http://localhost:9200"
