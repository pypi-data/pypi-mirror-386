[project]
name = "maktaba"
version = "0.1.4"
description = "Production-ready RAG infrastructure for multilingual applications"
authors = [
    {name = "NuhaTech", email = "contact@nuhatech.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["rag", "retrieval", "embeddings", "vector-search", "llm", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pydantic>=2.0",
    "pydantic-settings>=2.0",
    "httpx>=0.27",
    "tenacity>=8.0",
]

[project.optional-dependencies]
openai = ["openai>=1.0"]
azure = ["azure-ai-inference>=1.0.0b9"]
cohere = ["cohere>=5.0"]
voyage = ["voyageai>=0.2"]
zeroentropy = ["zeroentropy>=0.1.0a6"]
qdrant = ["qdrant-client>=1.11"]
pinecone = ["pinecone-client>=3.0"]
chroma = ["chromadb>=0.4,<1.1"]
redis = ["redis>=5.0"]
unstructured = [
    "llama-index-core>=0.12",
    "llama-index-readers-file>=0.4",
    "unstructured[all-docs]>=0.16",
    "python-magic>=0.4; platform_system != 'Windows'",
    "python-magic-bin>=0.4; platform_system == 'Windows'",
]
all = [
    "openai>=1.0",
    "azure-ai-inference>=1.0.0b9",
    "cohere>=5.0",
    "voyageai>=0.2",
    "zeroentropy>=0.1.0a6",
    "qdrant-client>=1.11",
    "pinecone-client>=3.0",
    "chromadb>=0.4,<1.1",
    "redis>=5.0",
    "llama-index-core>=0.12",
    "llama-index-readers-file>=0.4",
    "unstructured[all-docs]>=0.16",
    "python-magic>=0.4",
]

[project.urls]
Homepage = "https://github.com/nuhatech/maktaba"
Documentation = "https://maktaba.nuhatech.com"
Repository = "https://github.com/nuhatech/maktaba"
Issues = "https://github.com/nuhatech/maktaba/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/maktaba"]

[dependency-groups]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.1",
    "ruff>=0.6",
    "mypy>=1.8",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W"]
ignore = [
    "N803",  # Argument name should be lowercase (allow camelCase for API compatibility)
]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = false  # Allow Any returns for flexibility with third-party libraries
warn_unused_configs = true

# Ignore missing imports and type issues from third-party libraries
[[tool.mypy.overrides]]
module = [
    "llama_index.*",
    "chromadb.*",
    "qdrant_client.*",
    "unstructured.*",
    "zeroentropy.*",
]
ignore_missing_imports = true
