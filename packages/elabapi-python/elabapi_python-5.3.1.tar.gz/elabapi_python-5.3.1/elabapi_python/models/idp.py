# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Idp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'entityid': 'str',
        'sso_url': 'str',
        'sso_binding': 'str',
        'slo_url': 'str',
        'slo_binding': 'str',
        'x509': 'str',
        'x509_new': 'str',
        'enabled': 'int',
        'email_attr': 'str',
        'team_attr': 'str',
        'fname_attr': 'str',
        'lname_attr': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'entityid': 'entityid',
        'sso_url': 'sso_url',
        'sso_binding': 'sso_binding',
        'slo_url': 'slo_url',
        'slo_binding': 'slo_binding',
        'x509': 'x509',
        'x509_new': 'x509_new',
        'enabled': 'enabled',
        'email_attr': 'email_attr',
        'team_attr': 'team_attr',
        'fname_attr': 'fname_attr',
        'lname_attr': 'lname_attr'
    }

    def __init__(self, id=None, name=None, entityid=None, sso_url=None, sso_binding=None, slo_url=None, slo_binding=None, x509=None, x509_new=None, enabled=None, email_attr=None, team_attr=None, fname_attr=None, lname_attr=None):  # noqa: E501
        """Idp - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._entityid = None
        self._sso_url = None
        self._sso_binding = None
        self._slo_url = None
        self._slo_binding = None
        self._x509 = None
        self._x509_new = None
        self._enabled = None
        self._email_attr = None
        self._team_attr = None
        self._fname_attr = None
        self._lname_attr = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if entityid is not None:
            self.entityid = entityid
        if sso_url is not None:
            self.sso_url = sso_url
        if sso_binding is not None:
            self.sso_binding = sso_binding
        if slo_url is not None:
            self.slo_url = slo_url
        if slo_binding is not None:
            self.slo_binding = slo_binding
        if x509 is not None:
            self.x509 = x509
        if x509_new is not None:
            self.x509_new = x509_new
        if enabled is not None:
            self.enabled = enabled
        if email_attr is not None:
            self.email_attr = email_attr
        if team_attr is not None:
            self.team_attr = team_attr
        if fname_attr is not None:
            self.fname_attr = fname_attr
        if lname_attr is not None:
            self.lname_attr = lname_attr

    @property
    def id(self):
        """Gets the id of this Idp.  # noqa: E501


        :return: The id of this Idp.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Idp.


        :param id: The id of this Idp.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Idp.  # noqa: E501


        :return: The name of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Idp.


        :param name: The name of this Idp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def entityid(self):
        """Gets the entityid of this Idp.  # noqa: E501


        :return: The entityid of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._entityid

    @entityid.setter
    def entityid(self, entityid):
        """Sets the entityid of this Idp.


        :param entityid: The entityid of this Idp.  # noqa: E501
        :type: str
        """

        self._entityid = entityid

    @property
    def sso_url(self):
        """Gets the sso_url of this Idp.  # noqa: E501


        :return: The sso_url of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._sso_url

    @sso_url.setter
    def sso_url(self, sso_url):
        """Sets the sso_url of this Idp.


        :param sso_url: The sso_url of this Idp.  # noqa: E501
        :type: str
        """

        self._sso_url = sso_url

    @property
    def sso_binding(self):
        """Gets the sso_binding of this Idp.  # noqa: E501


        :return: The sso_binding of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._sso_binding

    @sso_binding.setter
    def sso_binding(self, sso_binding):
        """Sets the sso_binding of this Idp.


        :param sso_binding: The sso_binding of this Idp.  # noqa: E501
        :type: str
        """

        self._sso_binding = sso_binding

    @property
    def slo_url(self):
        """Gets the slo_url of this Idp.  # noqa: E501


        :return: The slo_url of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._slo_url

    @slo_url.setter
    def slo_url(self, slo_url):
        """Sets the slo_url of this Idp.


        :param slo_url: The slo_url of this Idp.  # noqa: E501
        :type: str
        """

        self._slo_url = slo_url

    @property
    def slo_binding(self):
        """Gets the slo_binding of this Idp.  # noqa: E501


        :return: The slo_binding of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._slo_binding

    @slo_binding.setter
    def slo_binding(self, slo_binding):
        """Sets the slo_binding of this Idp.


        :param slo_binding: The slo_binding of this Idp.  # noqa: E501
        :type: str
        """

        self._slo_binding = slo_binding

    @property
    def x509(self):
        """Gets the x509 of this Idp.  # noqa: E501


        :return: The x509 of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._x509

    @x509.setter
    def x509(self, x509):
        """Sets the x509 of this Idp.


        :param x509: The x509 of this Idp.  # noqa: E501
        :type: str
        """

        self._x509 = x509

    @property
    def x509_new(self):
        """Gets the x509_new of this Idp.  # noqa: E501


        :return: The x509_new of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._x509_new

    @x509_new.setter
    def x509_new(self, x509_new):
        """Sets the x509_new of this Idp.


        :param x509_new: The x509_new of this Idp.  # noqa: E501
        :type: str
        """

        self._x509_new = x509_new

    @property
    def enabled(self):
        """Gets the enabled of this Idp.  # noqa: E501


        :return: The enabled of this Idp.  # noqa: E501
        :rtype: int
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Idp.


        :param enabled: The enabled of this Idp.  # noqa: E501
        :type: int
        """

        self._enabled = enabled

    @property
    def email_attr(self):
        """Gets the email_attr of this Idp.  # noqa: E501


        :return: The email_attr of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._email_attr

    @email_attr.setter
    def email_attr(self, email_attr):
        """Sets the email_attr of this Idp.


        :param email_attr: The email_attr of this Idp.  # noqa: E501
        :type: str
        """

        self._email_attr = email_attr

    @property
    def team_attr(self):
        """Gets the team_attr of this Idp.  # noqa: E501


        :return: The team_attr of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._team_attr

    @team_attr.setter
    def team_attr(self, team_attr):
        """Sets the team_attr of this Idp.


        :param team_attr: The team_attr of this Idp.  # noqa: E501
        :type: str
        """

        self._team_attr = team_attr

    @property
    def fname_attr(self):
        """Gets the fname_attr of this Idp.  # noqa: E501


        :return: The fname_attr of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._fname_attr

    @fname_attr.setter
    def fname_attr(self, fname_attr):
        """Sets the fname_attr of this Idp.


        :param fname_attr: The fname_attr of this Idp.  # noqa: E501
        :type: str
        """

        self._fname_attr = fname_attr

    @property
    def lname_attr(self):
        """Gets the lname_attr of this Idp.  # noqa: E501


        :return: The lname_attr of this Idp.  # noqa: E501
        :rtype: str
        """
        return self._lname_attr

    @lname_attr.setter
    def lname_attr(self, lname_attr):
        """Sets the lname_attr of this Idp.


        :param lname_attr: The lname_attr of this Idp.  # noqa: E501
        :type: str
        """

        self._lname_attr = lname_attr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Idp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Idp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
