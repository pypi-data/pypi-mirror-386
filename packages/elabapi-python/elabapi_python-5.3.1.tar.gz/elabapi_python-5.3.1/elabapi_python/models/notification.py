# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'category': 'int',
        'is_ack': 'int',
        'created_at': 'str',
        'userid': 'int',
        'send_email': 'int',
        'email_sent_at': 'str',
        'body': 'str'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'is_ack': 'is_ack',
        'created_at': 'created_at',
        'userid': 'userid',
        'send_email': 'send_email',
        'email_sent_at': 'email_sent_at',
        'body': 'body'
    }

    def __init__(self, id=None, category=None, is_ack=None, created_at=None, userid=None, send_email=None, email_sent_at=None, body=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._category = None
        self._is_ack = None
        self._created_at = None
        self._userid = None
        self._send_email = None
        self._email_sent_at = None
        self._body = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if category is not None:
            self.category = category
        if is_ack is not None:
            self.is_ack = is_ack
        if created_at is not None:
            self.created_at = created_at
        if userid is not None:
            self.userid = userid
        if send_email is not None:
            self.send_email = send_email
        if email_sent_at is not None:
            self.email_sent_at = email_sent_at
        if body is not None:
            self.body = body

    @property
    def id(self):
        """Gets the id of this Notification.  # noqa: E501


        :return: The id of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.


        :param id: The id of this Notification.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def category(self):
        """Gets the category of this Notification.  # noqa: E501


        :return: The category of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Notification.


        :param category: The category of this Notification.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def is_ack(self):
        """Gets the is_ack of this Notification.  # noqa: E501


        :return: The is_ack of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._is_ack

    @is_ack.setter
    def is_ack(self, is_ack):
        """Sets the is_ack of this Notification.


        :param is_ack: The is_ack of this Notification.  # noqa: E501
        :type: int
        """

        self._is_ack = is_ack

    @property
    def created_at(self):
        """Gets the created_at of this Notification.  # noqa: E501


        :return: The created_at of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Notification.


        :param created_at: The created_at of this Notification.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def userid(self):
        """Gets the userid of this Notification.  # noqa: E501


        :return: The userid of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Notification.


        :param userid: The userid of this Notification.  # noqa: E501
        :type: int
        """

        self._userid = userid

    @property
    def send_email(self):
        """Gets the send_email of this Notification.  # noqa: E501


        :return: The send_email of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this Notification.


        :param send_email: The send_email of this Notification.  # noqa: E501
        :type: int
        """

        self._send_email = send_email

    @property
    def email_sent_at(self):
        """Gets the email_sent_at of this Notification.  # noqa: E501


        :return: The email_sent_at of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._email_sent_at

    @email_sent_at.setter
    def email_sent_at(self, email_sent_at):
        """Sets the email_sent_at of this Notification.


        :param email_sent_at: The email_sent_at of this Notification.  # noqa: E501
        :type: str
        """

        self._email_sent_at = email_sent_at

    @property
    def body(self):
        """Gets the body of this Notification.  # noqa: E501


        :return: The body of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Notification.


        :param body: The body of this Notification.  # noqa: E501
        :type: str
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
