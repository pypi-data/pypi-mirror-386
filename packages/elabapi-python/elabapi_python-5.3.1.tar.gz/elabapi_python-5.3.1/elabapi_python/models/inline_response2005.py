# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'real_name': 'str',
        'long_name': 'str',
        'created_at': 'datetime',
        'filesize': 'int',
        'type': 'str',
        'comment': 'str',
        'entity_id': 'int',
        'entity_title': 'str',
        'page': 'str'
    }

    attribute_map = {
        'id': 'id',
        'real_name': 'real_name',
        'long_name': 'long_name',
        'created_at': 'created_at',
        'filesize': 'filesize',
        'type': 'type',
        'comment': 'comment',
        'entity_id': 'entity_id',
        'entity_title': 'entity_title',
        'page': 'page'
    }

    def __init__(self, id=None, real_name=None, long_name=None, created_at=None, filesize=None, type=None, comment=None, entity_id=None, entity_title=None, page=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._real_name = None
        self._long_name = None
        self._created_at = None
        self._filesize = None
        self._type = None
        self._comment = None
        self._entity_id = None
        self._entity_title = None
        self._page = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if real_name is not None:
            self.real_name = real_name
        if long_name is not None:
            self.long_name = long_name
        if created_at is not None:
            self.created_at = created_at
        if filesize is not None:
            self.filesize = filesize
        if type is not None:
            self.type = type
        if comment is not None:
            self.comment = comment
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_title is not None:
            self.entity_title = entity_title
        if page is not None:
            self.page = page

    @property
    def id(self):
        """Gets the id of this InlineResponse2005.  # noqa: E501


        :return: The id of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2005.


        :param id: The id of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def real_name(self):
        """Gets the real_name of this InlineResponse2005.  # noqa: E501


        :return: The real_name of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this InlineResponse2005.


        :param real_name: The real_name of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._real_name = real_name

    @property
    def long_name(self):
        """Gets the long_name of this InlineResponse2005.  # noqa: E501


        :return: The long_name of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this InlineResponse2005.


        :param long_name: The long_name of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse2005.  # noqa: E501


        :return: The created_at of this InlineResponse2005.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse2005.


        :param created_at: The created_at of this InlineResponse2005.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def filesize(self):
        """Gets the filesize of this InlineResponse2005.  # noqa: E501


        :return: The filesize of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this InlineResponse2005.


        :param filesize: The filesize of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._filesize = filesize

    @property
    def type(self):
        """Gets the type of this InlineResponse2005.  # noqa: E501


        :return: The type of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2005.


        :param type: The type of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def comment(self):
        """Gets the comment of this InlineResponse2005.  # noqa: E501


        :return: The comment of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineResponse2005.


        :param comment: The comment of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def entity_id(self):
        """Gets the entity_id of this InlineResponse2005.  # noqa: E501


        :return: The entity_id of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this InlineResponse2005.


        :param entity_id: The entity_id of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_title(self):
        """Gets the entity_title of this InlineResponse2005.  # noqa: E501


        :return: The entity_title of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._entity_title

    @entity_title.setter
    def entity_title(self, entity_title):
        """Sets the entity_title of this InlineResponse2005.


        :param entity_title: The entity_title of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._entity_title = entity_title

    @property
    def page(self):
        """Gets the page of this InlineResponse2005.  # noqa: E501


        :return: The page of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this InlineResponse2005.


        :param page: The page of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._page = page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
