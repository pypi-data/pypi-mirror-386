# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Compound(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'datetime',
        'created_by': 'int',
        'modified_at': 'datetime',
        'modified_by': 'int',
        'userid': 'int',
        'team': 'int',
        'state': 'int',
        'name': 'str',
        'molecular_formula': 'str',
        'cas_number': 'str',
        'ec_number': 'str',
        'chebi_id': 'str',
        'chembl_id': 'str',
        'dea_number': 'str',
        'drugbank_id': 'str',
        'dsstox_id': 'str',
        'hmdb_id': 'str',
        'inchi': 'str',
        'inchi_key': 'str',
        'iupac_name': 'str',
        'kegg_id': 'str',
        'metabolomics_wb_id': 'str',
        'molecular_weight': 'float',
        'nci_code': 'str',
        'nikkaji_number': 'str',
        'pharmgkb_id': 'str',
        'pharos_ligand_id': 'str',
        'pubchem_cid': 'int',
        'rxcui': 'str',
        'smiles': 'str',
        'unii': 'str',
        'wikidata': 'str',
        'wikipedia': 'str',
        'is_corrosive': 'int',
        'is_explosive': 'int',
        'is_flammable': 'int',
        'is_gas_under_pressure': 'int',
        'is_hazardous2env': 'int',
        'is_hazardous2health': 'int',
        'is_serious_health_hazard': 'int',
        'is_oxidising': 'int',
        'is_toxic': 'int',
        'is_radioactive': 'int',
        'is_antibiotic': 'int',
        'is_antibiotic_precursor': 'int',
        'is_drug': 'int',
        'is_drug_precursor': 'int',
        'is_explosive_precursor': 'int',
        'is_cmr': 'int',
        'is_nano': 'int',
        'is_controlled': 'int',
        'is_ed2health': 'int',
        'is_ed2env': 'int',
        'is_pbt': 'int',
        'is_pmt': 'int',
        'is_vpvb': 'int',
        'is_vpvm': 'int',
        'fp2_base64': 'str',
        'userid_human': 'str',
        'team_name': 'str',
        'has_fingerprint': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'modified_at': 'modified_at',
        'modified_by': 'modified_by',
        'userid': 'userid',
        'team': 'team',
        'state': 'state',
        'name': 'name',
        'molecular_formula': 'molecular_formula',
        'cas_number': 'cas_number',
        'ec_number': 'ec_number',
        'chebi_id': 'chebi_id',
        'chembl_id': 'chembl_id',
        'dea_number': 'dea_number',
        'drugbank_id': 'drugbank_id',
        'dsstox_id': 'dsstox_id',
        'hmdb_id': 'hmdb_id',
        'inchi': 'inchi',
        'inchi_key': 'inchi_key',
        'iupac_name': 'iupac_name',
        'kegg_id': 'kegg_id',
        'metabolomics_wb_id': 'metabolomics_wb_id',
        'molecular_weight': 'molecular_weight',
        'nci_code': 'nci_code',
        'nikkaji_number': 'nikkaji_number',
        'pharmgkb_id': 'pharmgkb_id',
        'pharos_ligand_id': 'pharos_ligand_id',
        'pubchem_cid': 'pubchem_cid',
        'rxcui': 'rxcui',
        'smiles': 'smiles',
        'unii': 'unii',
        'wikidata': 'wikidata',
        'wikipedia': 'wikipedia',
        'is_corrosive': 'is_corrosive',
        'is_explosive': 'is_explosive',
        'is_flammable': 'is_flammable',
        'is_gas_under_pressure': 'is_gas_under_pressure',
        'is_hazardous2env': 'is_hazardous2env',
        'is_hazardous2health': 'is_hazardous2health',
        'is_serious_health_hazard': 'is_serious_health_hazard',
        'is_oxidising': 'is_oxidising',
        'is_toxic': 'is_toxic',
        'is_radioactive': 'is_radioactive',
        'is_antibiotic': 'is_antibiotic',
        'is_antibiotic_precursor': 'is_antibiotic_precursor',
        'is_drug': 'is_drug',
        'is_drug_precursor': 'is_drug_precursor',
        'is_explosive_precursor': 'is_explosive_precursor',
        'is_cmr': 'is_cmr',
        'is_nano': 'is_nano',
        'is_controlled': 'is_controlled',
        'is_ed2health': 'is_ed2health',
        'is_ed2env': 'is_ed2env',
        'is_pbt': 'is_pbt',
        'is_pmt': 'is_pmt',
        'is_vpvb': 'is_vpvb',
        'is_vpvm': 'is_vpvm',
        'fp2_base64': 'fp2_base64',
        'userid_human': 'userid_human',
        'team_name': 'team_name',
        'has_fingerprint': 'has_fingerprint'
    }

    def __init__(self, id=None, created_at=None, created_by=None, modified_at=None, modified_by=None, userid=None, team=None, state=None, name=None, molecular_formula=None, cas_number=None, ec_number=None, chebi_id=None, chembl_id=None, dea_number=None, drugbank_id=None, dsstox_id=None, hmdb_id=None, inchi=None, inchi_key=None, iupac_name=None, kegg_id=None, metabolomics_wb_id=None, molecular_weight=None, nci_code=None, nikkaji_number=None, pharmgkb_id=None, pharos_ligand_id=None, pubchem_cid=None, rxcui=None, smiles=None, unii=None, wikidata=None, wikipedia=None, is_corrosive=None, is_explosive=None, is_flammable=None, is_gas_under_pressure=None, is_hazardous2env=None, is_hazardous2health=None, is_serious_health_hazard=None, is_oxidising=None, is_toxic=None, is_radioactive=None, is_antibiotic=None, is_antibiotic_precursor=None, is_drug=None, is_drug_precursor=None, is_explosive_precursor=None, is_cmr=None, is_nano=None, is_controlled=None, is_ed2health=None, is_ed2env=None, is_pbt=None, is_pmt=None, is_vpvb=None, is_vpvm=None, fp2_base64=None, userid_human=None, team_name=None, has_fingerprint=None):  # noqa: E501
        """Compound - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._created_by = None
        self._modified_at = None
        self._modified_by = None
        self._userid = None
        self._team = None
        self._state = None
        self._name = None
        self._molecular_formula = None
        self._cas_number = None
        self._ec_number = None
        self._chebi_id = None
        self._chembl_id = None
        self._dea_number = None
        self._drugbank_id = None
        self._dsstox_id = None
        self._hmdb_id = None
        self._inchi = None
        self._inchi_key = None
        self._iupac_name = None
        self._kegg_id = None
        self._metabolomics_wb_id = None
        self._molecular_weight = None
        self._nci_code = None
        self._nikkaji_number = None
        self._pharmgkb_id = None
        self._pharos_ligand_id = None
        self._pubchem_cid = None
        self._rxcui = None
        self._smiles = None
        self._unii = None
        self._wikidata = None
        self._wikipedia = None
        self._is_corrosive = None
        self._is_explosive = None
        self._is_flammable = None
        self._is_gas_under_pressure = None
        self._is_hazardous2env = None
        self._is_hazardous2health = None
        self._is_serious_health_hazard = None
        self._is_oxidising = None
        self._is_toxic = None
        self._is_radioactive = None
        self._is_antibiotic = None
        self._is_antibiotic_precursor = None
        self._is_drug = None
        self._is_drug_precursor = None
        self._is_explosive_precursor = None
        self._is_cmr = None
        self._is_nano = None
        self._is_controlled = None
        self._is_ed2health = None
        self._is_ed2env = None
        self._is_pbt = None
        self._is_pmt = None
        self._is_vpvb = None
        self._is_vpvm = None
        self._fp2_base64 = None
        self._userid_human = None
        self._team_name = None
        self._has_fingerprint = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if modified_at is not None:
            self.modified_at = modified_at
        if modified_by is not None:
            self.modified_by = modified_by
        if userid is not None:
            self.userid = userid
        if team is not None:
            self.team = team
        if state is not None:
            self.state = state
        if name is not None:
            self.name = name
        if molecular_formula is not None:
            self.molecular_formula = molecular_formula
        if cas_number is not None:
            self.cas_number = cas_number
        if ec_number is not None:
            self.ec_number = ec_number
        if chebi_id is not None:
            self.chebi_id = chebi_id
        if chembl_id is not None:
            self.chembl_id = chembl_id
        if dea_number is not None:
            self.dea_number = dea_number
        if drugbank_id is not None:
            self.drugbank_id = drugbank_id
        if dsstox_id is not None:
            self.dsstox_id = dsstox_id
        if hmdb_id is not None:
            self.hmdb_id = hmdb_id
        if inchi is not None:
            self.inchi = inchi
        if inchi_key is not None:
            self.inchi_key = inchi_key
        if iupac_name is not None:
            self.iupac_name = iupac_name
        if kegg_id is not None:
            self.kegg_id = kegg_id
        if metabolomics_wb_id is not None:
            self.metabolomics_wb_id = metabolomics_wb_id
        if molecular_weight is not None:
            self.molecular_weight = molecular_weight
        if nci_code is not None:
            self.nci_code = nci_code
        if nikkaji_number is not None:
            self.nikkaji_number = nikkaji_number
        if pharmgkb_id is not None:
            self.pharmgkb_id = pharmgkb_id
        if pharos_ligand_id is not None:
            self.pharos_ligand_id = pharos_ligand_id
        if pubchem_cid is not None:
            self.pubchem_cid = pubchem_cid
        if rxcui is not None:
            self.rxcui = rxcui
        if smiles is not None:
            self.smiles = smiles
        if unii is not None:
            self.unii = unii
        if wikidata is not None:
            self.wikidata = wikidata
        if wikipedia is not None:
            self.wikipedia = wikipedia
        if is_corrosive is not None:
            self.is_corrosive = is_corrosive
        if is_explosive is not None:
            self.is_explosive = is_explosive
        if is_flammable is not None:
            self.is_flammable = is_flammable
        if is_gas_under_pressure is not None:
            self.is_gas_under_pressure = is_gas_under_pressure
        if is_hazardous2env is not None:
            self.is_hazardous2env = is_hazardous2env
        if is_hazardous2health is not None:
            self.is_hazardous2health = is_hazardous2health
        if is_serious_health_hazard is not None:
            self.is_serious_health_hazard = is_serious_health_hazard
        if is_oxidising is not None:
            self.is_oxidising = is_oxidising
        if is_toxic is not None:
            self.is_toxic = is_toxic
        if is_radioactive is not None:
            self.is_radioactive = is_radioactive
        if is_antibiotic is not None:
            self.is_antibiotic = is_antibiotic
        if is_antibiotic_precursor is not None:
            self.is_antibiotic_precursor = is_antibiotic_precursor
        if is_drug is not None:
            self.is_drug = is_drug
        if is_drug_precursor is not None:
            self.is_drug_precursor = is_drug_precursor
        if is_explosive_precursor is not None:
            self.is_explosive_precursor = is_explosive_precursor
        if is_cmr is not None:
            self.is_cmr = is_cmr
        if is_nano is not None:
            self.is_nano = is_nano
        if is_controlled is not None:
            self.is_controlled = is_controlled
        if is_ed2health is not None:
            self.is_ed2health = is_ed2health
        if is_ed2env is not None:
            self.is_ed2env = is_ed2env
        if is_pbt is not None:
            self.is_pbt = is_pbt
        if is_pmt is not None:
            self.is_pmt = is_pmt
        if is_vpvb is not None:
            self.is_vpvb = is_vpvb
        if is_vpvm is not None:
            self.is_vpvm = is_vpvm
        if fp2_base64 is not None:
            self.fp2_base64 = fp2_base64
        if userid_human is not None:
            self.userid_human = userid_human
        if team_name is not None:
            self.team_name = team_name
        if has_fingerprint is not None:
            self.has_fingerprint = has_fingerprint

    @property
    def id(self):
        """Gets the id of this Compound.  # noqa: E501


        :return: The id of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Compound.


        :param id: The id of this Compound.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Compound.  # noqa: E501


        :return: The created_at of this Compound.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Compound.


        :param created_at: The created_at of this Compound.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Compound.  # noqa: E501


        :return: The created_by of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Compound.


        :param created_by: The created_by of this Compound.  # noqa: E501
        :type: int
        """

        self._created_by = created_by

    @property
    def modified_at(self):
        """Gets the modified_at of this Compound.  # noqa: E501


        :return: The modified_at of this Compound.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Compound.


        :param modified_at: The modified_at of this Compound.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def modified_by(self):
        """Gets the modified_by of this Compound.  # noqa: E501


        :return: The modified_by of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Compound.


        :param modified_by: The modified_by of this Compound.  # noqa: E501
        :type: int
        """

        self._modified_by = modified_by

    @property
    def userid(self):
        """Gets the userid of this Compound.  # noqa: E501


        :return: The userid of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Compound.


        :param userid: The userid of this Compound.  # noqa: E501
        :type: int
        """

        self._userid = userid

    @property
    def team(self):
        """Gets the team of this Compound.  # noqa: E501


        :return: The team of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Compound.


        :param team: The team of this Compound.  # noqa: E501
        :type: int
        """

        self._team = team

    @property
    def state(self):
        """Gets the state of this Compound.  # noqa: E501


        :return: The state of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Compound.


        :param state: The state of this Compound.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def name(self):
        """Gets the name of this Compound.  # noqa: E501


        :return: The name of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Compound.


        :param name: The name of this Compound.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def molecular_formula(self):
        """Gets the molecular_formula of this Compound.  # noqa: E501


        :return: The molecular_formula of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._molecular_formula

    @molecular_formula.setter
    def molecular_formula(self, molecular_formula):
        """Sets the molecular_formula of this Compound.


        :param molecular_formula: The molecular_formula of this Compound.  # noqa: E501
        :type: str
        """

        self._molecular_formula = molecular_formula

    @property
    def cas_number(self):
        """Gets the cas_number of this Compound.  # noqa: E501


        :return: The cas_number of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._cas_number

    @cas_number.setter
    def cas_number(self, cas_number):
        """Sets the cas_number of this Compound.


        :param cas_number: The cas_number of this Compound.  # noqa: E501
        :type: str
        """

        self._cas_number = cas_number

    @property
    def ec_number(self):
        """Gets the ec_number of this Compound.  # noqa: E501


        :return: The ec_number of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._ec_number

    @ec_number.setter
    def ec_number(self, ec_number):
        """Sets the ec_number of this Compound.


        :param ec_number: The ec_number of this Compound.  # noqa: E501
        :type: str
        """

        self._ec_number = ec_number

    @property
    def chebi_id(self):
        """Gets the chebi_id of this Compound.  # noqa: E501


        :return: The chebi_id of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._chebi_id

    @chebi_id.setter
    def chebi_id(self, chebi_id):
        """Sets the chebi_id of this Compound.


        :param chebi_id: The chebi_id of this Compound.  # noqa: E501
        :type: str
        """

        self._chebi_id = chebi_id

    @property
    def chembl_id(self):
        """Gets the chembl_id of this Compound.  # noqa: E501


        :return: The chembl_id of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._chembl_id

    @chembl_id.setter
    def chembl_id(self, chembl_id):
        """Sets the chembl_id of this Compound.


        :param chembl_id: The chembl_id of this Compound.  # noqa: E501
        :type: str
        """

        self._chembl_id = chembl_id

    @property
    def dea_number(self):
        """Gets the dea_number of this Compound.  # noqa: E501


        :return: The dea_number of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._dea_number

    @dea_number.setter
    def dea_number(self, dea_number):
        """Sets the dea_number of this Compound.


        :param dea_number: The dea_number of this Compound.  # noqa: E501
        :type: str
        """

        self._dea_number = dea_number

    @property
    def drugbank_id(self):
        """Gets the drugbank_id of this Compound.  # noqa: E501


        :return: The drugbank_id of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._drugbank_id

    @drugbank_id.setter
    def drugbank_id(self, drugbank_id):
        """Sets the drugbank_id of this Compound.


        :param drugbank_id: The drugbank_id of this Compound.  # noqa: E501
        :type: str
        """

        self._drugbank_id = drugbank_id

    @property
    def dsstox_id(self):
        """Gets the dsstox_id of this Compound.  # noqa: E501


        :return: The dsstox_id of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._dsstox_id

    @dsstox_id.setter
    def dsstox_id(self, dsstox_id):
        """Sets the dsstox_id of this Compound.


        :param dsstox_id: The dsstox_id of this Compound.  # noqa: E501
        :type: str
        """

        self._dsstox_id = dsstox_id

    @property
    def hmdb_id(self):
        """Gets the hmdb_id of this Compound.  # noqa: E501


        :return: The hmdb_id of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._hmdb_id

    @hmdb_id.setter
    def hmdb_id(self, hmdb_id):
        """Sets the hmdb_id of this Compound.


        :param hmdb_id: The hmdb_id of this Compound.  # noqa: E501
        :type: str
        """

        self._hmdb_id = hmdb_id

    @property
    def inchi(self):
        """Gets the inchi of this Compound.  # noqa: E501


        :return: The inchi of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._inchi

    @inchi.setter
    def inchi(self, inchi):
        """Sets the inchi of this Compound.


        :param inchi: The inchi of this Compound.  # noqa: E501
        :type: str
        """

        self._inchi = inchi

    @property
    def inchi_key(self):
        """Gets the inchi_key of this Compound.  # noqa: E501


        :return: The inchi_key of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._inchi_key

    @inchi_key.setter
    def inchi_key(self, inchi_key):
        """Sets the inchi_key of this Compound.


        :param inchi_key: The inchi_key of this Compound.  # noqa: E501
        :type: str
        """

        self._inchi_key = inchi_key

    @property
    def iupac_name(self):
        """Gets the iupac_name of this Compound.  # noqa: E501


        :return: The iupac_name of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._iupac_name

    @iupac_name.setter
    def iupac_name(self, iupac_name):
        """Sets the iupac_name of this Compound.


        :param iupac_name: The iupac_name of this Compound.  # noqa: E501
        :type: str
        """

        self._iupac_name = iupac_name

    @property
    def kegg_id(self):
        """Gets the kegg_id of this Compound.  # noqa: E501


        :return: The kegg_id of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._kegg_id

    @kegg_id.setter
    def kegg_id(self, kegg_id):
        """Sets the kegg_id of this Compound.


        :param kegg_id: The kegg_id of this Compound.  # noqa: E501
        :type: str
        """

        self._kegg_id = kegg_id

    @property
    def metabolomics_wb_id(self):
        """Gets the metabolomics_wb_id of this Compound.  # noqa: E501


        :return: The metabolomics_wb_id of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._metabolomics_wb_id

    @metabolomics_wb_id.setter
    def metabolomics_wb_id(self, metabolomics_wb_id):
        """Sets the metabolomics_wb_id of this Compound.


        :param metabolomics_wb_id: The metabolomics_wb_id of this Compound.  # noqa: E501
        :type: str
        """

        self._metabolomics_wb_id = metabolomics_wb_id

    @property
    def molecular_weight(self):
        """Gets the molecular_weight of this Compound.  # noqa: E501


        :return: The molecular_weight of this Compound.  # noqa: E501
        :rtype: float
        """
        return self._molecular_weight

    @molecular_weight.setter
    def molecular_weight(self, molecular_weight):
        """Sets the molecular_weight of this Compound.


        :param molecular_weight: The molecular_weight of this Compound.  # noqa: E501
        :type: float
        """

        self._molecular_weight = molecular_weight

    @property
    def nci_code(self):
        """Gets the nci_code of this Compound.  # noqa: E501


        :return: The nci_code of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._nci_code

    @nci_code.setter
    def nci_code(self, nci_code):
        """Sets the nci_code of this Compound.


        :param nci_code: The nci_code of this Compound.  # noqa: E501
        :type: str
        """

        self._nci_code = nci_code

    @property
    def nikkaji_number(self):
        """Gets the nikkaji_number of this Compound.  # noqa: E501


        :return: The nikkaji_number of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._nikkaji_number

    @nikkaji_number.setter
    def nikkaji_number(self, nikkaji_number):
        """Sets the nikkaji_number of this Compound.


        :param nikkaji_number: The nikkaji_number of this Compound.  # noqa: E501
        :type: str
        """

        self._nikkaji_number = nikkaji_number

    @property
    def pharmgkb_id(self):
        """Gets the pharmgkb_id of this Compound.  # noqa: E501


        :return: The pharmgkb_id of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._pharmgkb_id

    @pharmgkb_id.setter
    def pharmgkb_id(self, pharmgkb_id):
        """Sets the pharmgkb_id of this Compound.


        :param pharmgkb_id: The pharmgkb_id of this Compound.  # noqa: E501
        :type: str
        """

        self._pharmgkb_id = pharmgkb_id

    @property
    def pharos_ligand_id(self):
        """Gets the pharos_ligand_id of this Compound.  # noqa: E501


        :return: The pharos_ligand_id of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._pharos_ligand_id

    @pharos_ligand_id.setter
    def pharos_ligand_id(self, pharos_ligand_id):
        """Sets the pharos_ligand_id of this Compound.


        :param pharos_ligand_id: The pharos_ligand_id of this Compound.  # noqa: E501
        :type: str
        """

        self._pharos_ligand_id = pharos_ligand_id

    @property
    def pubchem_cid(self):
        """Gets the pubchem_cid of this Compound.  # noqa: E501


        :return: The pubchem_cid of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._pubchem_cid

    @pubchem_cid.setter
    def pubchem_cid(self, pubchem_cid):
        """Sets the pubchem_cid of this Compound.


        :param pubchem_cid: The pubchem_cid of this Compound.  # noqa: E501
        :type: int
        """

        self._pubchem_cid = pubchem_cid

    @property
    def rxcui(self):
        """Gets the rxcui of this Compound.  # noqa: E501


        :return: The rxcui of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._rxcui

    @rxcui.setter
    def rxcui(self, rxcui):
        """Sets the rxcui of this Compound.


        :param rxcui: The rxcui of this Compound.  # noqa: E501
        :type: str
        """

        self._rxcui = rxcui

    @property
    def smiles(self):
        """Gets the smiles of this Compound.  # noqa: E501


        :return: The smiles of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._smiles

    @smiles.setter
    def smiles(self, smiles):
        """Sets the smiles of this Compound.


        :param smiles: The smiles of this Compound.  # noqa: E501
        :type: str
        """

        self._smiles = smiles

    @property
    def unii(self):
        """Gets the unii of this Compound.  # noqa: E501


        :return: The unii of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._unii

    @unii.setter
    def unii(self, unii):
        """Sets the unii of this Compound.


        :param unii: The unii of this Compound.  # noqa: E501
        :type: str
        """

        self._unii = unii

    @property
    def wikidata(self):
        """Gets the wikidata of this Compound.  # noqa: E501


        :return: The wikidata of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._wikidata

    @wikidata.setter
    def wikidata(self, wikidata):
        """Sets the wikidata of this Compound.


        :param wikidata: The wikidata of this Compound.  # noqa: E501
        :type: str
        """

        self._wikidata = wikidata

    @property
    def wikipedia(self):
        """Gets the wikipedia of this Compound.  # noqa: E501


        :return: The wikipedia of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._wikipedia

    @wikipedia.setter
    def wikipedia(self, wikipedia):
        """Sets the wikipedia of this Compound.


        :param wikipedia: The wikipedia of this Compound.  # noqa: E501
        :type: str
        """

        self._wikipedia = wikipedia

    @property
    def is_corrosive(self):
        """Gets the is_corrosive of this Compound.  # noqa: E501


        :return: The is_corrosive of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_corrosive

    @is_corrosive.setter
    def is_corrosive(self, is_corrosive):
        """Sets the is_corrosive of this Compound.


        :param is_corrosive: The is_corrosive of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_corrosive not in allowed_values:
            raise ValueError(
                "Invalid value for `is_corrosive` ({0}), must be one of {1}"  # noqa: E501
                .format(is_corrosive, allowed_values)
            )

        self._is_corrosive = is_corrosive

    @property
    def is_explosive(self):
        """Gets the is_explosive of this Compound.  # noqa: E501


        :return: The is_explosive of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_explosive

    @is_explosive.setter
    def is_explosive(self, is_explosive):
        """Sets the is_explosive of this Compound.


        :param is_explosive: The is_explosive of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_explosive not in allowed_values:
            raise ValueError(
                "Invalid value for `is_explosive` ({0}), must be one of {1}"  # noqa: E501
                .format(is_explosive, allowed_values)
            )

        self._is_explosive = is_explosive

    @property
    def is_flammable(self):
        """Gets the is_flammable of this Compound.  # noqa: E501


        :return: The is_flammable of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_flammable

    @is_flammable.setter
    def is_flammable(self, is_flammable):
        """Sets the is_flammable of this Compound.


        :param is_flammable: The is_flammable of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_flammable not in allowed_values:
            raise ValueError(
                "Invalid value for `is_flammable` ({0}), must be one of {1}"  # noqa: E501
                .format(is_flammable, allowed_values)
            )

        self._is_flammable = is_flammable

    @property
    def is_gas_under_pressure(self):
        """Gets the is_gas_under_pressure of this Compound.  # noqa: E501


        :return: The is_gas_under_pressure of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_gas_under_pressure

    @is_gas_under_pressure.setter
    def is_gas_under_pressure(self, is_gas_under_pressure):
        """Sets the is_gas_under_pressure of this Compound.


        :param is_gas_under_pressure: The is_gas_under_pressure of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_gas_under_pressure not in allowed_values:
            raise ValueError(
                "Invalid value for `is_gas_under_pressure` ({0}), must be one of {1}"  # noqa: E501
                .format(is_gas_under_pressure, allowed_values)
            )

        self._is_gas_under_pressure = is_gas_under_pressure

    @property
    def is_hazardous2env(self):
        """Gets the is_hazardous2env of this Compound.  # noqa: E501


        :return: The is_hazardous2env of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_hazardous2env

    @is_hazardous2env.setter
    def is_hazardous2env(self, is_hazardous2env):
        """Sets the is_hazardous2env of this Compound.


        :param is_hazardous2env: The is_hazardous2env of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_hazardous2env not in allowed_values:
            raise ValueError(
                "Invalid value for `is_hazardous2env` ({0}), must be one of {1}"  # noqa: E501
                .format(is_hazardous2env, allowed_values)
            )

        self._is_hazardous2env = is_hazardous2env

    @property
    def is_hazardous2health(self):
        """Gets the is_hazardous2health of this Compound.  # noqa: E501


        :return: The is_hazardous2health of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_hazardous2health

    @is_hazardous2health.setter
    def is_hazardous2health(self, is_hazardous2health):
        """Sets the is_hazardous2health of this Compound.


        :param is_hazardous2health: The is_hazardous2health of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_hazardous2health not in allowed_values:
            raise ValueError(
                "Invalid value for `is_hazardous2health` ({0}), must be one of {1}"  # noqa: E501
                .format(is_hazardous2health, allowed_values)
            )

        self._is_hazardous2health = is_hazardous2health

    @property
    def is_serious_health_hazard(self):
        """Gets the is_serious_health_hazard of this Compound.  # noqa: E501


        :return: The is_serious_health_hazard of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_serious_health_hazard

    @is_serious_health_hazard.setter
    def is_serious_health_hazard(self, is_serious_health_hazard):
        """Sets the is_serious_health_hazard of this Compound.


        :param is_serious_health_hazard: The is_serious_health_hazard of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_serious_health_hazard not in allowed_values:
            raise ValueError(
                "Invalid value for `is_serious_health_hazard` ({0}), must be one of {1}"  # noqa: E501
                .format(is_serious_health_hazard, allowed_values)
            )

        self._is_serious_health_hazard = is_serious_health_hazard

    @property
    def is_oxidising(self):
        """Gets the is_oxidising of this Compound.  # noqa: E501


        :return: The is_oxidising of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_oxidising

    @is_oxidising.setter
    def is_oxidising(self, is_oxidising):
        """Sets the is_oxidising of this Compound.


        :param is_oxidising: The is_oxidising of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_oxidising not in allowed_values:
            raise ValueError(
                "Invalid value for `is_oxidising` ({0}), must be one of {1}"  # noqa: E501
                .format(is_oxidising, allowed_values)
            )

        self._is_oxidising = is_oxidising

    @property
    def is_toxic(self):
        """Gets the is_toxic of this Compound.  # noqa: E501


        :return: The is_toxic of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_toxic

    @is_toxic.setter
    def is_toxic(self, is_toxic):
        """Sets the is_toxic of this Compound.


        :param is_toxic: The is_toxic of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_toxic not in allowed_values:
            raise ValueError(
                "Invalid value for `is_toxic` ({0}), must be one of {1}"  # noqa: E501
                .format(is_toxic, allowed_values)
            )

        self._is_toxic = is_toxic

    @property
    def is_radioactive(self):
        """Gets the is_radioactive of this Compound.  # noqa: E501


        :return: The is_radioactive of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_radioactive

    @is_radioactive.setter
    def is_radioactive(self, is_radioactive):
        """Sets the is_radioactive of this Compound.


        :param is_radioactive: The is_radioactive of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_radioactive not in allowed_values:
            raise ValueError(
                "Invalid value for `is_radioactive` ({0}), must be one of {1}"  # noqa: E501
                .format(is_radioactive, allowed_values)
            )

        self._is_radioactive = is_radioactive

    @property
    def is_antibiotic(self):
        """Gets the is_antibiotic of this Compound.  # noqa: E501


        :return: The is_antibiotic of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_antibiotic

    @is_antibiotic.setter
    def is_antibiotic(self, is_antibiotic):
        """Sets the is_antibiotic of this Compound.


        :param is_antibiotic: The is_antibiotic of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_antibiotic not in allowed_values:
            raise ValueError(
                "Invalid value for `is_antibiotic` ({0}), must be one of {1}"  # noqa: E501
                .format(is_antibiotic, allowed_values)
            )

        self._is_antibiotic = is_antibiotic

    @property
    def is_antibiotic_precursor(self):
        """Gets the is_antibiotic_precursor of this Compound.  # noqa: E501


        :return: The is_antibiotic_precursor of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_antibiotic_precursor

    @is_antibiotic_precursor.setter
    def is_antibiotic_precursor(self, is_antibiotic_precursor):
        """Sets the is_antibiotic_precursor of this Compound.


        :param is_antibiotic_precursor: The is_antibiotic_precursor of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_antibiotic_precursor not in allowed_values:
            raise ValueError(
                "Invalid value for `is_antibiotic_precursor` ({0}), must be one of {1}"  # noqa: E501
                .format(is_antibiotic_precursor, allowed_values)
            )

        self._is_antibiotic_precursor = is_antibiotic_precursor

    @property
    def is_drug(self):
        """Gets the is_drug of this Compound.  # noqa: E501


        :return: The is_drug of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_drug

    @is_drug.setter
    def is_drug(self, is_drug):
        """Sets the is_drug of this Compound.


        :param is_drug: The is_drug of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_drug not in allowed_values:
            raise ValueError(
                "Invalid value for `is_drug` ({0}), must be one of {1}"  # noqa: E501
                .format(is_drug, allowed_values)
            )

        self._is_drug = is_drug

    @property
    def is_drug_precursor(self):
        """Gets the is_drug_precursor of this Compound.  # noqa: E501


        :return: The is_drug_precursor of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_drug_precursor

    @is_drug_precursor.setter
    def is_drug_precursor(self, is_drug_precursor):
        """Sets the is_drug_precursor of this Compound.


        :param is_drug_precursor: The is_drug_precursor of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_drug_precursor not in allowed_values:
            raise ValueError(
                "Invalid value for `is_drug_precursor` ({0}), must be one of {1}"  # noqa: E501
                .format(is_drug_precursor, allowed_values)
            )

        self._is_drug_precursor = is_drug_precursor

    @property
    def is_explosive_precursor(self):
        """Gets the is_explosive_precursor of this Compound.  # noqa: E501


        :return: The is_explosive_precursor of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_explosive_precursor

    @is_explosive_precursor.setter
    def is_explosive_precursor(self, is_explosive_precursor):
        """Sets the is_explosive_precursor of this Compound.


        :param is_explosive_precursor: The is_explosive_precursor of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_explosive_precursor not in allowed_values:
            raise ValueError(
                "Invalid value for `is_explosive_precursor` ({0}), must be one of {1}"  # noqa: E501
                .format(is_explosive_precursor, allowed_values)
            )

        self._is_explosive_precursor = is_explosive_precursor

    @property
    def is_cmr(self):
        """Gets the is_cmr of this Compound.  # noqa: E501


        :return: The is_cmr of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_cmr

    @is_cmr.setter
    def is_cmr(self, is_cmr):
        """Sets the is_cmr of this Compound.


        :param is_cmr: The is_cmr of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_cmr not in allowed_values:
            raise ValueError(
                "Invalid value for `is_cmr` ({0}), must be one of {1}"  # noqa: E501
                .format(is_cmr, allowed_values)
            )

        self._is_cmr = is_cmr

    @property
    def is_nano(self):
        """Gets the is_nano of this Compound.  # noqa: E501


        :return: The is_nano of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_nano

    @is_nano.setter
    def is_nano(self, is_nano):
        """Sets the is_nano of this Compound.


        :param is_nano: The is_nano of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_nano not in allowed_values:
            raise ValueError(
                "Invalid value for `is_nano` ({0}), must be one of {1}"  # noqa: E501
                .format(is_nano, allowed_values)
            )

        self._is_nano = is_nano

    @property
    def is_controlled(self):
        """Gets the is_controlled of this Compound.  # noqa: E501


        :return: The is_controlled of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_controlled

    @is_controlled.setter
    def is_controlled(self, is_controlled):
        """Sets the is_controlled of this Compound.


        :param is_controlled: The is_controlled of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_controlled not in allowed_values:
            raise ValueError(
                "Invalid value for `is_controlled` ({0}), must be one of {1}"  # noqa: E501
                .format(is_controlled, allowed_values)
            )

        self._is_controlled = is_controlled

    @property
    def is_ed2health(self):
        """Gets the is_ed2health of this Compound.  # noqa: E501


        :return: The is_ed2health of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_ed2health

    @is_ed2health.setter
    def is_ed2health(self, is_ed2health):
        """Sets the is_ed2health of this Compound.


        :param is_ed2health: The is_ed2health of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_ed2health not in allowed_values:
            raise ValueError(
                "Invalid value for `is_ed2health` ({0}), must be one of {1}"  # noqa: E501
                .format(is_ed2health, allowed_values)
            )

        self._is_ed2health = is_ed2health

    @property
    def is_ed2env(self):
        """Gets the is_ed2env of this Compound.  # noqa: E501


        :return: The is_ed2env of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_ed2env

    @is_ed2env.setter
    def is_ed2env(self, is_ed2env):
        """Sets the is_ed2env of this Compound.


        :param is_ed2env: The is_ed2env of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_ed2env not in allowed_values:
            raise ValueError(
                "Invalid value for `is_ed2env` ({0}), must be one of {1}"  # noqa: E501
                .format(is_ed2env, allowed_values)
            )

        self._is_ed2env = is_ed2env

    @property
    def is_pbt(self):
        """Gets the is_pbt of this Compound.  # noqa: E501


        :return: The is_pbt of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_pbt

    @is_pbt.setter
    def is_pbt(self, is_pbt):
        """Sets the is_pbt of this Compound.


        :param is_pbt: The is_pbt of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_pbt not in allowed_values:
            raise ValueError(
                "Invalid value for `is_pbt` ({0}), must be one of {1}"  # noqa: E501
                .format(is_pbt, allowed_values)
            )

        self._is_pbt = is_pbt

    @property
    def is_pmt(self):
        """Gets the is_pmt of this Compound.  # noqa: E501


        :return: The is_pmt of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_pmt

    @is_pmt.setter
    def is_pmt(self, is_pmt):
        """Sets the is_pmt of this Compound.


        :param is_pmt: The is_pmt of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_pmt not in allowed_values:
            raise ValueError(
                "Invalid value for `is_pmt` ({0}), must be one of {1}"  # noqa: E501
                .format(is_pmt, allowed_values)
            )

        self._is_pmt = is_pmt

    @property
    def is_vpvb(self):
        """Gets the is_vpvb of this Compound.  # noqa: E501


        :return: The is_vpvb of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_vpvb

    @is_vpvb.setter
    def is_vpvb(self, is_vpvb):
        """Sets the is_vpvb of this Compound.


        :param is_vpvb: The is_vpvb of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_vpvb not in allowed_values:
            raise ValueError(
                "Invalid value for `is_vpvb` ({0}), must be one of {1}"  # noqa: E501
                .format(is_vpvb, allowed_values)
            )

        self._is_vpvb = is_vpvb

    @property
    def is_vpvm(self):
        """Gets the is_vpvm of this Compound.  # noqa: E501


        :return: The is_vpvm of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._is_vpvm

    @is_vpvm.setter
    def is_vpvm(self, is_vpvm):
        """Sets the is_vpvm of this Compound.


        :param is_vpvm: The is_vpvm of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_vpvm not in allowed_values:
            raise ValueError(
                "Invalid value for `is_vpvm` ({0}), must be one of {1}"  # noqa: E501
                .format(is_vpvm, allowed_values)
            )

        self._is_vpvm = is_vpvm

    @property
    def fp2_base64(self):
        """Gets the fp2_base64 of this Compound.  # noqa: E501

        Base64-encoded fingerprint  # noqa: E501

        :return: The fp2_base64 of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._fp2_base64

    @fp2_base64.setter
    def fp2_base64(self, fp2_base64):
        """Sets the fp2_base64 of this Compound.

        Base64-encoded fingerprint  # noqa: E501

        :param fp2_base64: The fp2_base64 of this Compound.  # noqa: E501
        :type: str
        """

        self._fp2_base64 = fp2_base64

    @property
    def userid_human(self):
        """Gets the userid_human of this Compound.  # noqa: E501


        :return: The userid_human of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._userid_human

    @userid_human.setter
    def userid_human(self, userid_human):
        """Sets the userid_human of this Compound.


        :param userid_human: The userid_human of this Compound.  # noqa: E501
        :type: str
        """

        self._userid_human = userid_human

    @property
    def team_name(self):
        """Gets the team_name of this Compound.  # noqa: E501


        :return: The team_name of this Compound.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this Compound.


        :param team_name: The team_name of this Compound.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def has_fingerprint(self):
        """Gets the has_fingerprint of this Compound.  # noqa: E501


        :return: The has_fingerprint of this Compound.  # noqa: E501
        :rtype: int
        """
        return self._has_fingerprint

    @has_fingerprint.setter
    def has_fingerprint(self, has_fingerprint):
        """Sets the has_fingerprint of this Compound.


        :param has_fingerprint: The has_fingerprint of this Compound.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if has_fingerprint not in allowed_values:
            raise ValueError(
                "Invalid value for `has_fingerprint` ({0}), must be one of {1}"  # noqa: E501
                .format(has_fingerprint, allowed_values)
            )

        self._has_fingerprint = has_fingerprint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Compound, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Compound):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
