# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'id': 'int',
        'start': 'str',
        'end': 'str',
        'userid': 'int',
        'item_title': 'str',
        'color': 'str',
        'fullname': 'str',
        'item_link': 'int',
        'item_link_title': 'str',
        'experiment': 'int',
        'experiment_title': 'str'
    }

    attribute_map = {
        'title': 'title',
        'id': 'id',
        'start': 'start',
        'end': 'end',
        'userid': 'userid',
        'item_title': 'item_title',
        'color': 'color',
        'fullname': 'fullname',
        'item_link': 'item_link',
        'item_link_title': 'item_link_title',
        'experiment': 'experiment',
        'experiment_title': 'experiment_title'
    }

    def __init__(self, title=None, id=None, start=None, end=None, userid=None, item_title=None, color=None, fullname=None, item_link=None, item_link_title=None, experiment=None, experiment_title=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._id = None
        self._start = None
        self._end = None
        self._userid = None
        self._item_title = None
        self._color = None
        self._fullname = None
        self._item_link = None
        self._item_link_title = None
        self._experiment = None
        self._experiment_title = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if id is not None:
            self.id = id
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if userid is not None:
            self.userid = userid
        if item_title is not None:
            self.item_title = item_title
        if color is not None:
            self.color = color
        if fullname is not None:
            self.fullname = fullname
        if item_link is not None:
            self.item_link = item_link
        if item_link_title is not None:
            self.item_link_title = item_link_title
        if experiment is not None:
            self.experiment = experiment
        if experiment_title is not None:
            self.experiment_title = experiment_title

    @property
    def title(self):
        """Gets the title of this Event.  # noqa: E501


        :return: The title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.


        :param title: The title of this Event.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def start(self):
        """Gets the start of this Event.  # noqa: E501


        :return: The start of this Event.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Event.


        :param start: The start of this Event.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this Event.  # noqa: E501


        :return: The end of this Event.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Event.


        :param end: The end of this Event.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def userid(self):
        """Gets the userid of this Event.  # noqa: E501


        :return: The userid of this Event.  # noqa: E501
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Event.


        :param userid: The userid of this Event.  # noqa: E501
        :type: int
        """

        self._userid = userid

    @property
    def item_title(self):
        """Gets the item_title of this Event.  # noqa: E501


        :return: The item_title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._item_title

    @item_title.setter
    def item_title(self, item_title):
        """Sets the item_title of this Event.


        :param item_title: The item_title of this Event.  # noqa: E501
        :type: str
        """

        self._item_title = item_title

    @property
    def color(self):
        """Gets the color of this Event.  # noqa: E501


        :return: The color of this Event.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Event.


        :param color: The color of this Event.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def fullname(self):
        """Gets the fullname of this Event.  # noqa: E501


        :return: The fullname of this Event.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this Event.


        :param fullname: The fullname of this Event.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def item_link(self):
        """Gets the item_link of this Event.  # noqa: E501


        :return: The item_link of this Event.  # noqa: E501
        :rtype: int
        """
        return self._item_link

    @item_link.setter
    def item_link(self, item_link):
        """Sets the item_link of this Event.


        :param item_link: The item_link of this Event.  # noqa: E501
        :type: int
        """

        self._item_link = item_link

    @property
    def item_link_title(self):
        """Gets the item_link_title of this Event.  # noqa: E501


        :return: The item_link_title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._item_link_title

    @item_link_title.setter
    def item_link_title(self, item_link_title):
        """Sets the item_link_title of this Event.


        :param item_link_title: The item_link_title of this Event.  # noqa: E501
        :type: str
        """

        self._item_link_title = item_link_title

    @property
    def experiment(self):
        """Gets the experiment of this Event.  # noqa: E501


        :return: The experiment of this Event.  # noqa: E501
        :rtype: int
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this Event.


        :param experiment: The experiment of this Event.  # noqa: E501
        :type: int
        """

        self._experiment = experiment

    @property
    def experiment_title(self):
        """Gets the experiment_title of this Event.  # noqa: E501


        :return: The experiment_title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._experiment_title

    @experiment_title.setter
    def experiment_title(self, experiment_title):
        """Sets the experiment_title of this Event.


        :param experiment_title: The experiment_title of this Event.  # noqa: E501
        :type: str
        """

        self._experiment_title = experiment_title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
