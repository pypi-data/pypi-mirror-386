# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elabftw_version': 'str',
        'elabftw_version_int': 'int',
        'ts_balance': 'int',
        'all_users_count': 'int',
        'active_users_count': 'int',
        'items_count': 'int',
        'teams_count': 'int',
        'experiments_count': 'int',
        'experiments_timestamped_count': 'int',
        'uploads_filesize_sum': 'int',
        'uploads_filesize_sum_formatted': 'str'
    }

    attribute_map = {
        'elabftw_version': 'elabftw_version',
        'elabftw_version_int': 'elabftw_version_int',
        'ts_balance': 'ts_balance',
        'all_users_count': 'all_users_count',
        'active_users_count': 'active_users_count',
        'items_count': 'items_count',
        'teams_count': 'teams_count',
        'experiments_count': 'experiments_count',
        'experiments_timestamped_count': 'experiments_timestamped_count',
        'uploads_filesize_sum': 'uploads_filesize_sum',
        'uploads_filesize_sum_formatted': 'uploads_filesize_sum_formatted'
    }

    def __init__(self, elabftw_version=None, elabftw_version_int=None, ts_balance=None, all_users_count=None, active_users_count=None, items_count=None, teams_count=None, experiments_count=None, experiments_timestamped_count=None, uploads_filesize_sum=None, uploads_filesize_sum_formatted=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._elabftw_version = None
        self._elabftw_version_int = None
        self._ts_balance = None
        self._all_users_count = None
        self._active_users_count = None
        self._items_count = None
        self._teams_count = None
        self._experiments_count = None
        self._experiments_timestamped_count = None
        self._uploads_filesize_sum = None
        self._uploads_filesize_sum_formatted = None
        self.discriminator = None
        if elabftw_version is not None:
            self.elabftw_version = elabftw_version
        if elabftw_version_int is not None:
            self.elabftw_version_int = elabftw_version_int
        if ts_balance is not None:
            self.ts_balance = ts_balance
        if all_users_count is not None:
            self.all_users_count = all_users_count
        if active_users_count is not None:
            self.active_users_count = active_users_count
        if items_count is not None:
            self.items_count = items_count
        if teams_count is not None:
            self.teams_count = teams_count
        if experiments_count is not None:
            self.experiments_count = experiments_count
        if experiments_timestamped_count is not None:
            self.experiments_timestamped_count = experiments_timestamped_count
        if uploads_filesize_sum is not None:
            self.uploads_filesize_sum = uploads_filesize_sum
        if uploads_filesize_sum_formatted is not None:
            self.uploads_filesize_sum_formatted = uploads_filesize_sum_formatted

    @property
    def elabftw_version(self):
        """Gets the elabftw_version of this InlineResponse200.  # noqa: E501

        Current eLabFTW version  # noqa: E501

        :return: The elabftw_version of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._elabftw_version

    @elabftw_version.setter
    def elabftw_version(self, elabftw_version):
        """Sets the elabftw_version of this InlineResponse200.

        Current eLabFTW version  # noqa: E501

        :param elabftw_version: The elabftw_version of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._elabftw_version = elabftw_version

    @property
    def elabftw_version_int(self):
        """Gets the elabftw_version_int of this InlineResponse200.  # noqa: E501

        Current eLabFTW version as an integer  # noqa: E501

        :return: The elabftw_version_int of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._elabftw_version_int

    @elabftw_version_int.setter
    def elabftw_version_int(self, elabftw_version_int):
        """Sets the elabftw_version_int of this InlineResponse200.

        Current eLabFTW version as an integer  # noqa: E501

        :param elabftw_version_int: The elabftw_version_int of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._elabftw_version_int = elabftw_version_int

    @property
    def ts_balance(self):
        """Gets the ts_balance of this InlineResponse200.  # noqa: E501

        Number of timestamp tokens left  # noqa: E501

        :return: The ts_balance of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._ts_balance

    @ts_balance.setter
    def ts_balance(self, ts_balance):
        """Sets the ts_balance of this InlineResponse200.

        Number of timestamp tokens left  # noqa: E501

        :param ts_balance: The ts_balance of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._ts_balance = ts_balance

    @property
    def all_users_count(self):
        """Gets the all_users_count of this InlineResponse200.  # noqa: E501

        Total count of all users  # noqa: E501

        :return: The all_users_count of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._all_users_count

    @all_users_count.setter
    def all_users_count(self, all_users_count):
        """Sets the all_users_count of this InlineResponse200.

        Total count of all users  # noqa: E501

        :param all_users_count: The all_users_count of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._all_users_count = all_users_count

    @property
    def active_users_count(self):
        """Gets the active_users_count of this InlineResponse200.  # noqa: E501

        Total count of active users  # noqa: E501

        :return: The active_users_count of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._active_users_count

    @active_users_count.setter
    def active_users_count(self, active_users_count):
        """Sets the active_users_count of this InlineResponse200.

        Total count of active users  # noqa: E501

        :param active_users_count: The active_users_count of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._active_users_count = active_users_count

    @property
    def items_count(self):
        """Gets the items_count of this InlineResponse200.  # noqa: E501

        Total count of items  # noqa: E501

        :return: The items_count of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._items_count

    @items_count.setter
    def items_count(self, items_count):
        """Sets the items_count of this InlineResponse200.

        Total count of items  # noqa: E501

        :param items_count: The items_count of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._items_count = items_count

    @property
    def teams_count(self):
        """Gets the teams_count of this InlineResponse200.  # noqa: E501

        Total count of teams  # noqa: E501

        :return: The teams_count of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._teams_count

    @teams_count.setter
    def teams_count(self, teams_count):
        """Sets the teams_count of this InlineResponse200.

        Total count of teams  # noqa: E501

        :param teams_count: The teams_count of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._teams_count = teams_count

    @property
    def experiments_count(self):
        """Gets the experiments_count of this InlineResponse200.  # noqa: E501

        Total count of experiments  # noqa: E501

        :return: The experiments_count of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._experiments_count

    @experiments_count.setter
    def experiments_count(self, experiments_count):
        """Sets the experiments_count of this InlineResponse200.

        Total count of experiments  # noqa: E501

        :param experiments_count: The experiments_count of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._experiments_count = experiments_count

    @property
    def experiments_timestamped_count(self):
        """Gets the experiments_timestamped_count of this InlineResponse200.  # noqa: E501

        Total count of experiments with timestamps  # noqa: E501

        :return: The experiments_timestamped_count of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._experiments_timestamped_count

    @experiments_timestamped_count.setter
    def experiments_timestamped_count(self, experiments_timestamped_count):
        """Sets the experiments_timestamped_count of this InlineResponse200.

        Total count of experiments with timestamps  # noqa: E501

        :param experiments_timestamped_count: The experiments_timestamped_count of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._experiments_timestamped_count = experiments_timestamped_count

    @property
    def uploads_filesize_sum(self):
        """Gets the uploads_filesize_sum of this InlineResponse200.  # noqa: E501

        Sum of stored filesize in MySQL for all uploads of the instance.  # noqa: E501

        :return: The uploads_filesize_sum of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._uploads_filesize_sum

    @uploads_filesize_sum.setter
    def uploads_filesize_sum(self, uploads_filesize_sum):
        """Sets the uploads_filesize_sum of this InlineResponse200.

        Sum of stored filesize in MySQL for all uploads of the instance.  # noqa: E501

        :param uploads_filesize_sum: The uploads_filesize_sum of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._uploads_filesize_sum = uploads_filesize_sum

    @property
    def uploads_filesize_sum_formatted(self):
        """Gets the uploads_filesize_sum_formatted of this InlineResponse200.  # noqa: E501

        Sum of stored filesize in MySQL for all uploads of the instance, formatted  # noqa: E501

        :return: The uploads_filesize_sum_formatted of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._uploads_filesize_sum_formatted

    @uploads_filesize_sum_formatted.setter
    def uploads_filesize_sum_formatted(self, uploads_filesize_sum_formatted):
        """Sets the uploads_filesize_sum_formatted of this InlineResponse200.

        Sum of stored filesize in MySQL for all uploads of the instance, formatted  # noqa: E501

        :param uploads_filesize_sum_formatted: The uploads_filesize_sum_formatted of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._uploads_filesize_sum_formatted = uploads_filesize_sum_formatted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
