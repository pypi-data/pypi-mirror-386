# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Todoitem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'body': 'str',
        'creation_time': 'str',
        'ordering': 'int',
        'userid': 'int'
    }

    attribute_map = {
        'id': 'id',
        'body': 'body',
        'creation_time': 'creation_time',
        'ordering': 'ordering',
        'userid': 'userid'
    }

    def __init__(self, id=None, body=None, creation_time=None, ordering=None, userid=None):  # noqa: E501
        """Todoitem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._body = None
        self._creation_time = None
        self._ordering = None
        self._userid = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if body is not None:
            self.body = body
        if creation_time is not None:
            self.creation_time = creation_time
        if ordering is not None:
            self.ordering = ordering
        if userid is not None:
            self.userid = userid

    @property
    def id(self):
        """Gets the id of this Todoitem.  # noqa: E501


        :return: The id of this Todoitem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Todoitem.


        :param id: The id of this Todoitem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def body(self):
        """Gets the body of this Todoitem.  # noqa: E501


        :return: The body of this Todoitem.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Todoitem.


        :param body: The body of this Todoitem.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def creation_time(self):
        """Gets the creation_time of this Todoitem.  # noqa: E501


        :return: The creation_time of this Todoitem.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Todoitem.


        :param creation_time: The creation_time of this Todoitem.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def ordering(self):
        """Gets the ordering of this Todoitem.  # noqa: E501


        :return: The ordering of this Todoitem.  # noqa: E501
        :rtype: int
        """
        return self._ordering

    @ordering.setter
    def ordering(self, ordering):
        """Sets the ordering of this Todoitem.


        :param ordering: The ordering of this Todoitem.  # noqa: E501
        :type: int
        """

        self._ordering = ordering

    @property
    def userid(self):
        """Gets the userid of this Todoitem.  # noqa: E501


        :return: The userid of this Todoitem.  # noqa: E501
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Todoitem.


        :param userid: The userid of this Todoitem.  # noqa: E501
        :type: int
        """

        self._userid = userid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Todoitem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Todoitem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
