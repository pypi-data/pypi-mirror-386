# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admins_create_users': 'str',
        'admins_create_users_remote_dir': 'str',
        'admin_validate': 'str',
        'allow_permission_full': 'str',
        'allow_permission_organization': 'str',
        'allow_permission_team': 'str',
        'allow_permission_user': 'str',
        'allow_permission_useronly': 'str',
        'announcement': 'str',
        'anon_users': 'str',
        'autologout_time': 'str',
        'blox_anon': 'str',
        'blox_enabled': 'str',
        'chat_url': 'str',
        'cookie_validity_time': 'int',
        'email_domain': 'str',
        'extauth_email': 'str',
        'extauth_firstname': 'str',
        'extauth_lastname': 'str',
        'extauth_remote_user': 'str',
        'extauth_teams': 'str',
        'lang': 'str',
        'ldap_base_dn': 'str',
        'ldap_search_attr': 'str',
        'ldap_email': 'str',
        'ldap_firstname': 'str',
        'ldap_host': 'str',
        'ldap_lastname': 'str',
        'ldap_password': 'str',
        'ldap_port': 'str',
        'ldap_team': 'str',
        'ldap_toggle': 'str',
        'ldap_use_tls': 'str',
        'ldap_username': 'str',
        'local_login': 'str',
        'local_register': 'str',
        'login_announcement': 'str',
        'login_tries': 'str',
        'logout_url': 'str',
        'mail_from': 'str',
        'max_revisions': 'str',
        'min_days_revisions': 'str',
        'min_delta_revisions': 'str',
        'onboarding_email_active': 'str',
        'onboarding_email_admins_body': 'str',
        'onboarding_email_admins_subject': 'str',
        'onboarding_email_body': 'str',
        'onboarding_email_different_for_admins': 'str',
        'onboarding_email_subject': 'str',
        'open_science': 'str',
        'open_team': 'str',
        'privacy_policy': 'str',
        'proxy': 'str',
        'remote_dir_config': 'str',
        'remote_dir_service': 'str',
        's3_bucket_name': 'str',
        's3_endpoint': 'str',
        's3_path_prefix': 'str',
        's3_region': 'str',
        's3_verify_cert': 'str',
        'saml_acs_binding': 'str',
        'saml_allowrepeatattributename': 'str',
        'saml_authnrequestssigned': 'str',
        'saml_baseurl': 'str',
        'saml_debug': 'str',
        'saml_entityid': 'str',
        'saml_logoutrequestsigned': 'str',
        'saml_logoutresponsesigned': 'str',
        'saml_lowercaseurlencoding': 'str',
        'saml_nameidencrypted': 'str',
        'saml_nameidformat': 'str',
        'saml_privatekey': 'str',
        'saml_relaxdestinationvalidation': 'str',
        'saml_signmetadata': 'str',
        'saml_slo_binding': 'str',
        'saml_strict': 'str',
        'saml_sync_teams': 'str',
        'saml_team_create': 'str',
        'saml_team_default': 'str',
        'saml_toggle': 'str',
        'saml_user_default': 'str',
        'saml_wantassertionsencrypted': 'str',
        'saml_wantassertionssigned': 'str',
        'saml_wantmessagessigned': 'str',
        'saml_wantnameid': 'str',
        'saml_wantnameidencrypted': 'str',
        'saml_wantxmlvalidation': 'str',
        'saml_x509': 'str',
        'saml_x509_new': 'str',
        'schema': 'str',
        'smtp_address': 'str',
        'smtp_encryption': 'str',
        'smtp_password': 'str',
        'smtp_port': 'str',
        'smtp_username': 'str',
        'support_url': 'str',
        'ts_authority': 'str',
        'ts_cert': 'str',
        'ts_hash': 'str',
        'ts_limit': 'str',
        'ts_login': 'str',
        'ts_password': 'str',
        'ts_url': 'str',
        'uploads_storage': 'str'
    }

    attribute_map = {
        'admins_create_users': 'admins_create_users',
        'admins_create_users_remote_dir': 'admins_create_users_remote_dir',
        'admin_validate': 'admin_validate',
        'allow_permission_full': 'allow_permission_full',
        'allow_permission_organization': 'allow_permission_organization',
        'allow_permission_team': 'allow_permission_team',
        'allow_permission_user': 'allow_permission_user',
        'allow_permission_useronly': 'allow_permission_useronly',
        'announcement': 'announcement',
        'anon_users': 'anon_users',
        'autologout_time': 'autologout_time',
        'blox_anon': 'blox_anon',
        'blox_enabled': 'blox_enabled',
        'chat_url': 'chat_url',
        'cookie_validity_time': 'cookie_validity_time',
        'email_domain': 'email_domain',
        'extauth_email': 'extauth_email',
        'extauth_firstname': 'extauth_firstname',
        'extauth_lastname': 'extauth_lastname',
        'extauth_remote_user': 'extauth_remote_user',
        'extauth_teams': 'extauth_teams',
        'lang': 'lang',
        'ldap_base_dn': 'ldap_base_dn',
        'ldap_search_attr': 'ldap_search_attr',
        'ldap_email': 'ldap_email',
        'ldap_firstname': 'ldap_firstname',
        'ldap_host': 'ldap_host',
        'ldap_lastname': 'ldap_lastname',
        'ldap_password': 'ldap_password',
        'ldap_port': 'ldap_port',
        'ldap_team': 'ldap_team',
        'ldap_toggle': 'ldap_toggle',
        'ldap_use_tls': 'ldap_use_tls',
        'ldap_username': 'ldap_username',
        'local_login': 'local_login',
        'local_register': 'local_register',
        'login_announcement': 'login_announcement',
        'login_tries': 'login_tries',
        'logout_url': 'logout_url',
        'mail_from': 'mail_from',
        'max_revisions': 'max_revisions',
        'min_days_revisions': 'min_days_revisions',
        'min_delta_revisions': 'min_delta_revisions',
        'onboarding_email_active': 'onboarding_email_active',
        'onboarding_email_admins_body': 'onboarding_email_admins_body',
        'onboarding_email_admins_subject': 'onboarding_email_admins_subject',
        'onboarding_email_body': 'onboarding_email_body',
        'onboarding_email_different_for_admins': 'onboarding_email_different_for_admins',
        'onboarding_email_subject': 'onboarding_email_subject',
        'open_science': 'open_science',
        'open_team': 'open_team',
        'privacy_policy': 'privacy_policy',
        'proxy': 'proxy',
        'remote_dir_config': 'remote_dir_config',
        'remote_dir_service': 'remote_dir_service',
        's3_bucket_name': 's3_bucket_name',
        's3_endpoint': 's3_endpoint',
        's3_path_prefix': 's3_path_prefix',
        's3_region': 's3_region',
        's3_verify_cert': 's3_verify_cert',
        'saml_acs_binding': 'saml_acs_binding',
        'saml_allowrepeatattributename': 'saml_allowrepeatattributename',
        'saml_authnrequestssigned': 'saml_authnrequestssigned',
        'saml_baseurl': 'saml_baseurl',
        'saml_debug': 'saml_debug',
        'saml_entityid': 'saml_entityid',
        'saml_logoutrequestsigned': 'saml_logoutrequestsigned',
        'saml_logoutresponsesigned': 'saml_logoutresponsesigned',
        'saml_lowercaseurlencoding': 'saml_lowercaseurlencoding',
        'saml_nameidencrypted': 'saml_nameidencrypted',
        'saml_nameidformat': 'saml_nameidformat',
        'saml_privatekey': 'saml_privatekey',
        'saml_relaxdestinationvalidation': 'saml_relaxdestinationvalidation',
        'saml_signmetadata': 'saml_signmetadata',
        'saml_slo_binding': 'saml_slo_binding',
        'saml_strict': 'saml_strict',
        'saml_sync_teams': 'saml_sync_teams',
        'saml_team_create': 'saml_team_create',
        'saml_team_default': 'saml_team_default',
        'saml_toggle': 'saml_toggle',
        'saml_user_default': 'saml_user_default',
        'saml_wantassertionsencrypted': 'saml_wantassertionsencrypted',
        'saml_wantassertionssigned': 'saml_wantassertionssigned',
        'saml_wantmessagessigned': 'saml_wantmessagessigned',
        'saml_wantnameid': 'saml_wantnameid',
        'saml_wantnameidencrypted': 'saml_wantnameidencrypted',
        'saml_wantxmlvalidation': 'saml_wantxmlvalidation',
        'saml_x509': 'saml_x509',
        'saml_x509_new': 'saml_x509_new',
        'schema': 'schema',
        'smtp_address': 'smtp_address',
        'smtp_encryption': 'smtp_encryption',
        'smtp_password': 'smtp_password',
        'smtp_port': 'smtp_port',
        'smtp_username': 'smtp_username',
        'support_url': 'support_url',
        'ts_authority': 'ts_authority',
        'ts_cert': 'ts_cert',
        'ts_hash': 'ts_hash',
        'ts_limit': 'ts_limit',
        'ts_login': 'ts_login',
        'ts_password': 'ts_password',
        'ts_url': 'ts_url',
        'uploads_storage': 'uploads_storage'
    }

    def __init__(self, admins_create_users=None, admins_create_users_remote_dir=None, admin_validate=None, allow_permission_full=None, allow_permission_organization=None, allow_permission_team=None, allow_permission_user=None, allow_permission_useronly=None, announcement=None, anon_users=None, autologout_time=None, blox_anon=None, blox_enabled=None, chat_url=None, cookie_validity_time=None, email_domain=None, extauth_email=None, extauth_firstname=None, extauth_lastname=None, extauth_remote_user=None, extauth_teams=None, lang=None, ldap_base_dn=None, ldap_search_attr=None, ldap_email=None, ldap_firstname=None, ldap_host=None, ldap_lastname=None, ldap_password=None, ldap_port=None, ldap_team=None, ldap_toggle=None, ldap_use_tls=None, ldap_username=None, local_login=None, local_register=None, login_announcement=None, login_tries=None, logout_url=None, mail_from=None, max_revisions=None, min_days_revisions=None, min_delta_revisions=None, onboarding_email_active=None, onboarding_email_admins_body=None, onboarding_email_admins_subject=None, onboarding_email_body=None, onboarding_email_different_for_admins=None, onboarding_email_subject=None, open_science=None, open_team=None, privacy_policy=None, proxy=None, remote_dir_config=None, remote_dir_service=None, s3_bucket_name=None, s3_endpoint=None, s3_path_prefix=None, s3_region=None, s3_verify_cert=None, saml_acs_binding=None, saml_allowrepeatattributename=None, saml_authnrequestssigned=None, saml_baseurl=None, saml_debug=None, saml_entityid=None, saml_logoutrequestsigned=None, saml_logoutresponsesigned=None, saml_lowercaseurlencoding=None, saml_nameidencrypted=None, saml_nameidformat=None, saml_privatekey=None, saml_relaxdestinationvalidation=None, saml_signmetadata=None, saml_slo_binding=None, saml_strict=None, saml_sync_teams=None, saml_team_create=None, saml_team_default=None, saml_toggle=None, saml_user_default=None, saml_wantassertionsencrypted=None, saml_wantassertionssigned=None, saml_wantmessagessigned=None, saml_wantnameid=None, saml_wantnameidencrypted=None, saml_wantxmlvalidation=None, saml_x509=None, saml_x509_new=None, schema=None, smtp_address=None, smtp_encryption=None, smtp_password=None, smtp_port=None, smtp_username=None, support_url=None, ts_authority=None, ts_cert=None, ts_hash=None, ts_limit=None, ts_login=None, ts_password=None, ts_url=None, uploads_storage=None):  # noqa: E501
        """Config - a model defined in Swagger"""  # noqa: E501
        self._admins_create_users = None
        self._admins_create_users_remote_dir = None
        self._admin_validate = None
        self._allow_permission_full = None
        self._allow_permission_organization = None
        self._allow_permission_team = None
        self._allow_permission_user = None
        self._allow_permission_useronly = None
        self._announcement = None
        self._anon_users = None
        self._autologout_time = None
        self._blox_anon = None
        self._blox_enabled = None
        self._chat_url = None
        self._cookie_validity_time = None
        self._email_domain = None
        self._extauth_email = None
        self._extauth_firstname = None
        self._extauth_lastname = None
        self._extauth_remote_user = None
        self._extauth_teams = None
        self._lang = None
        self._ldap_base_dn = None
        self._ldap_search_attr = None
        self._ldap_email = None
        self._ldap_firstname = None
        self._ldap_host = None
        self._ldap_lastname = None
        self._ldap_password = None
        self._ldap_port = None
        self._ldap_team = None
        self._ldap_toggle = None
        self._ldap_use_tls = None
        self._ldap_username = None
        self._local_login = None
        self._local_register = None
        self._login_announcement = None
        self._login_tries = None
        self._logout_url = None
        self._mail_from = None
        self._max_revisions = None
        self._min_days_revisions = None
        self._min_delta_revisions = None
        self._onboarding_email_active = None
        self._onboarding_email_admins_body = None
        self._onboarding_email_admins_subject = None
        self._onboarding_email_body = None
        self._onboarding_email_different_for_admins = None
        self._onboarding_email_subject = None
        self._open_science = None
        self._open_team = None
        self._privacy_policy = None
        self._proxy = None
        self._remote_dir_config = None
        self._remote_dir_service = None
        self._s3_bucket_name = None
        self._s3_endpoint = None
        self._s3_path_prefix = None
        self._s3_region = None
        self._s3_verify_cert = None
        self._saml_acs_binding = None
        self._saml_allowrepeatattributename = None
        self._saml_authnrequestssigned = None
        self._saml_baseurl = None
        self._saml_debug = None
        self._saml_entityid = None
        self._saml_logoutrequestsigned = None
        self._saml_logoutresponsesigned = None
        self._saml_lowercaseurlencoding = None
        self._saml_nameidencrypted = None
        self._saml_nameidformat = None
        self._saml_privatekey = None
        self._saml_relaxdestinationvalidation = None
        self._saml_signmetadata = None
        self._saml_slo_binding = None
        self._saml_strict = None
        self._saml_sync_teams = None
        self._saml_team_create = None
        self._saml_team_default = None
        self._saml_toggle = None
        self._saml_user_default = None
        self._saml_wantassertionsencrypted = None
        self._saml_wantassertionssigned = None
        self._saml_wantmessagessigned = None
        self._saml_wantnameid = None
        self._saml_wantnameidencrypted = None
        self._saml_wantxmlvalidation = None
        self._saml_x509 = None
        self._saml_x509_new = None
        self._schema = None
        self._smtp_address = None
        self._smtp_encryption = None
        self._smtp_password = None
        self._smtp_port = None
        self._smtp_username = None
        self._support_url = None
        self._ts_authority = None
        self._ts_cert = None
        self._ts_hash = None
        self._ts_limit = None
        self._ts_login = None
        self._ts_password = None
        self._ts_url = None
        self._uploads_storage = None
        self.discriminator = None
        if admins_create_users is not None:
            self.admins_create_users = admins_create_users
        if admins_create_users_remote_dir is not None:
            self.admins_create_users_remote_dir = admins_create_users_remote_dir
        if admin_validate is not None:
            self.admin_validate = admin_validate
        if allow_permission_full is not None:
            self.allow_permission_full = allow_permission_full
        if allow_permission_organization is not None:
            self.allow_permission_organization = allow_permission_organization
        if allow_permission_team is not None:
            self.allow_permission_team = allow_permission_team
        if allow_permission_user is not None:
            self.allow_permission_user = allow_permission_user
        if allow_permission_useronly is not None:
            self.allow_permission_useronly = allow_permission_useronly
        if announcement is not None:
            self.announcement = announcement
        if anon_users is not None:
            self.anon_users = anon_users
        if autologout_time is not None:
            self.autologout_time = autologout_time
        if blox_anon is not None:
            self.blox_anon = blox_anon
        if blox_enabled is not None:
            self.blox_enabled = blox_enabled
        if chat_url is not None:
            self.chat_url = chat_url
        if cookie_validity_time is not None:
            self.cookie_validity_time = cookie_validity_time
        if email_domain is not None:
            self.email_domain = email_domain
        if extauth_email is not None:
            self.extauth_email = extauth_email
        if extauth_firstname is not None:
            self.extauth_firstname = extauth_firstname
        if extauth_lastname is not None:
            self.extauth_lastname = extauth_lastname
        if extauth_remote_user is not None:
            self.extauth_remote_user = extauth_remote_user
        if extauth_teams is not None:
            self.extauth_teams = extauth_teams
        if lang is not None:
            self.lang = lang
        if ldap_base_dn is not None:
            self.ldap_base_dn = ldap_base_dn
        if ldap_search_attr is not None:
            self.ldap_search_attr = ldap_search_attr
        if ldap_email is not None:
            self.ldap_email = ldap_email
        if ldap_firstname is not None:
            self.ldap_firstname = ldap_firstname
        if ldap_host is not None:
            self.ldap_host = ldap_host
        if ldap_lastname is not None:
            self.ldap_lastname = ldap_lastname
        if ldap_password is not None:
            self.ldap_password = ldap_password
        if ldap_port is not None:
            self.ldap_port = ldap_port
        if ldap_team is not None:
            self.ldap_team = ldap_team
        if ldap_toggle is not None:
            self.ldap_toggle = ldap_toggle
        if ldap_use_tls is not None:
            self.ldap_use_tls = ldap_use_tls
        if ldap_username is not None:
            self.ldap_username = ldap_username
        if local_login is not None:
            self.local_login = local_login
        if local_register is not None:
            self.local_register = local_register
        if login_announcement is not None:
            self.login_announcement = login_announcement
        if login_tries is not None:
            self.login_tries = login_tries
        if logout_url is not None:
            self.logout_url = logout_url
        if mail_from is not None:
            self.mail_from = mail_from
        if max_revisions is not None:
            self.max_revisions = max_revisions
        if min_days_revisions is not None:
            self.min_days_revisions = min_days_revisions
        if min_delta_revisions is not None:
            self.min_delta_revisions = min_delta_revisions
        if onboarding_email_active is not None:
            self.onboarding_email_active = onboarding_email_active
        if onboarding_email_admins_body is not None:
            self.onboarding_email_admins_body = onboarding_email_admins_body
        if onboarding_email_admins_subject is not None:
            self.onboarding_email_admins_subject = onboarding_email_admins_subject
        if onboarding_email_body is not None:
            self.onboarding_email_body = onboarding_email_body
        if onboarding_email_different_for_admins is not None:
            self.onboarding_email_different_for_admins = onboarding_email_different_for_admins
        if onboarding_email_subject is not None:
            self.onboarding_email_subject = onboarding_email_subject
        if open_science is not None:
            self.open_science = open_science
        if open_team is not None:
            self.open_team = open_team
        if privacy_policy is not None:
            self.privacy_policy = privacy_policy
        if proxy is not None:
            self.proxy = proxy
        if remote_dir_config is not None:
            self.remote_dir_config = remote_dir_config
        if remote_dir_service is not None:
            self.remote_dir_service = remote_dir_service
        if s3_bucket_name is not None:
            self.s3_bucket_name = s3_bucket_name
        if s3_endpoint is not None:
            self.s3_endpoint = s3_endpoint
        if s3_path_prefix is not None:
            self.s3_path_prefix = s3_path_prefix
        if s3_region is not None:
            self.s3_region = s3_region
        if s3_verify_cert is not None:
            self.s3_verify_cert = s3_verify_cert
        if saml_acs_binding is not None:
            self.saml_acs_binding = saml_acs_binding
        if saml_allowrepeatattributename is not None:
            self.saml_allowrepeatattributename = saml_allowrepeatattributename
        if saml_authnrequestssigned is not None:
            self.saml_authnrequestssigned = saml_authnrequestssigned
        if saml_baseurl is not None:
            self.saml_baseurl = saml_baseurl
        if saml_debug is not None:
            self.saml_debug = saml_debug
        if saml_entityid is not None:
            self.saml_entityid = saml_entityid
        if saml_logoutrequestsigned is not None:
            self.saml_logoutrequestsigned = saml_logoutrequestsigned
        if saml_logoutresponsesigned is not None:
            self.saml_logoutresponsesigned = saml_logoutresponsesigned
        if saml_lowercaseurlencoding is not None:
            self.saml_lowercaseurlencoding = saml_lowercaseurlencoding
        if saml_nameidencrypted is not None:
            self.saml_nameidencrypted = saml_nameidencrypted
        if saml_nameidformat is not None:
            self.saml_nameidformat = saml_nameidformat
        if saml_privatekey is not None:
            self.saml_privatekey = saml_privatekey
        if saml_relaxdestinationvalidation is not None:
            self.saml_relaxdestinationvalidation = saml_relaxdestinationvalidation
        if saml_signmetadata is not None:
            self.saml_signmetadata = saml_signmetadata
        if saml_slo_binding is not None:
            self.saml_slo_binding = saml_slo_binding
        if saml_strict is not None:
            self.saml_strict = saml_strict
        if saml_sync_teams is not None:
            self.saml_sync_teams = saml_sync_teams
        if saml_team_create is not None:
            self.saml_team_create = saml_team_create
        if saml_team_default is not None:
            self.saml_team_default = saml_team_default
        if saml_toggle is not None:
            self.saml_toggle = saml_toggle
        if saml_user_default is not None:
            self.saml_user_default = saml_user_default
        if saml_wantassertionsencrypted is not None:
            self.saml_wantassertionsencrypted = saml_wantassertionsencrypted
        if saml_wantassertionssigned is not None:
            self.saml_wantassertionssigned = saml_wantassertionssigned
        if saml_wantmessagessigned is not None:
            self.saml_wantmessagessigned = saml_wantmessagessigned
        if saml_wantnameid is not None:
            self.saml_wantnameid = saml_wantnameid
        if saml_wantnameidencrypted is not None:
            self.saml_wantnameidencrypted = saml_wantnameidencrypted
        if saml_wantxmlvalidation is not None:
            self.saml_wantxmlvalidation = saml_wantxmlvalidation
        if saml_x509 is not None:
            self.saml_x509 = saml_x509
        if saml_x509_new is not None:
            self.saml_x509_new = saml_x509_new
        if schema is not None:
            self.schema = schema
        if smtp_address is not None:
            self.smtp_address = smtp_address
        if smtp_encryption is not None:
            self.smtp_encryption = smtp_encryption
        if smtp_password is not None:
            self.smtp_password = smtp_password
        if smtp_port is not None:
            self.smtp_port = smtp_port
        if smtp_username is not None:
            self.smtp_username = smtp_username
        if support_url is not None:
            self.support_url = support_url
        if ts_authority is not None:
            self.ts_authority = ts_authority
        if ts_cert is not None:
            self.ts_cert = ts_cert
        if ts_hash is not None:
            self.ts_hash = ts_hash
        if ts_limit is not None:
            self.ts_limit = ts_limit
        if ts_login is not None:
            self.ts_login = ts_login
        if ts_password is not None:
            self.ts_password = ts_password
        if ts_url is not None:
            self.ts_url = ts_url
        if uploads_storage is not None:
            self.uploads_storage = uploads_storage

    @property
    def admins_create_users(self):
        """Gets the admins_create_users of this Config.  # noqa: E501


        :return: The admins_create_users of this Config.  # noqa: E501
        :rtype: str
        """
        return self._admins_create_users

    @admins_create_users.setter
    def admins_create_users(self, admins_create_users):
        """Sets the admins_create_users of this Config.


        :param admins_create_users: The admins_create_users of this Config.  # noqa: E501
        :type: str
        """

        self._admins_create_users = admins_create_users

    @property
    def admins_create_users_remote_dir(self):
        """Gets the admins_create_users_remote_dir of this Config.  # noqa: E501


        :return: The admins_create_users_remote_dir of this Config.  # noqa: E501
        :rtype: str
        """
        return self._admins_create_users_remote_dir

    @admins_create_users_remote_dir.setter
    def admins_create_users_remote_dir(self, admins_create_users_remote_dir):
        """Sets the admins_create_users_remote_dir of this Config.


        :param admins_create_users_remote_dir: The admins_create_users_remote_dir of this Config.  # noqa: E501
        :type: str
        """

        self._admins_create_users_remote_dir = admins_create_users_remote_dir

    @property
    def admin_validate(self):
        """Gets the admin_validate of this Config.  # noqa: E501


        :return: The admin_validate of this Config.  # noqa: E501
        :rtype: str
        """
        return self._admin_validate

    @admin_validate.setter
    def admin_validate(self, admin_validate):
        """Sets the admin_validate of this Config.


        :param admin_validate: The admin_validate of this Config.  # noqa: E501
        :type: str
        """

        self._admin_validate = admin_validate

    @property
    def allow_permission_full(self):
        """Gets the allow_permission_full of this Config.  # noqa: E501


        :return: The allow_permission_full of this Config.  # noqa: E501
        :rtype: str
        """
        return self._allow_permission_full

    @allow_permission_full.setter
    def allow_permission_full(self, allow_permission_full):
        """Sets the allow_permission_full of this Config.


        :param allow_permission_full: The allow_permission_full of this Config.  # noqa: E501
        :type: str
        """

        self._allow_permission_full = allow_permission_full

    @property
    def allow_permission_organization(self):
        """Gets the allow_permission_organization of this Config.  # noqa: E501


        :return: The allow_permission_organization of this Config.  # noqa: E501
        :rtype: str
        """
        return self._allow_permission_organization

    @allow_permission_organization.setter
    def allow_permission_organization(self, allow_permission_organization):
        """Sets the allow_permission_organization of this Config.


        :param allow_permission_organization: The allow_permission_organization of this Config.  # noqa: E501
        :type: str
        """

        self._allow_permission_organization = allow_permission_organization

    @property
    def allow_permission_team(self):
        """Gets the allow_permission_team of this Config.  # noqa: E501


        :return: The allow_permission_team of this Config.  # noqa: E501
        :rtype: str
        """
        return self._allow_permission_team

    @allow_permission_team.setter
    def allow_permission_team(self, allow_permission_team):
        """Sets the allow_permission_team of this Config.


        :param allow_permission_team: The allow_permission_team of this Config.  # noqa: E501
        :type: str
        """

        self._allow_permission_team = allow_permission_team

    @property
    def allow_permission_user(self):
        """Gets the allow_permission_user of this Config.  # noqa: E501


        :return: The allow_permission_user of this Config.  # noqa: E501
        :rtype: str
        """
        return self._allow_permission_user

    @allow_permission_user.setter
    def allow_permission_user(self, allow_permission_user):
        """Sets the allow_permission_user of this Config.


        :param allow_permission_user: The allow_permission_user of this Config.  # noqa: E501
        :type: str
        """

        self._allow_permission_user = allow_permission_user

    @property
    def allow_permission_useronly(self):
        """Gets the allow_permission_useronly of this Config.  # noqa: E501


        :return: The allow_permission_useronly of this Config.  # noqa: E501
        :rtype: str
        """
        return self._allow_permission_useronly

    @allow_permission_useronly.setter
    def allow_permission_useronly(self, allow_permission_useronly):
        """Sets the allow_permission_useronly of this Config.


        :param allow_permission_useronly: The allow_permission_useronly of this Config.  # noqa: E501
        :type: str
        """

        self._allow_permission_useronly = allow_permission_useronly

    @property
    def announcement(self):
        """Gets the announcement of this Config.  # noqa: E501

        This text will be shown on every page, including login page.  # noqa: E501

        :return: The announcement of this Config.  # noqa: E501
        :rtype: str
        """
        return self._announcement

    @announcement.setter
    def announcement(self, announcement):
        """Sets the announcement of this Config.

        This text will be shown on every page, including login page.  # noqa: E501

        :param announcement: The announcement of this Config.  # noqa: E501
        :type: str
        """

        self._announcement = announcement

    @property
    def anon_users(self):
        """Gets the anon_users of this Config.  # noqa: E501


        :return: The anon_users of this Config.  # noqa: E501
        :rtype: str
        """
        return self._anon_users

    @anon_users.setter
    def anon_users(self, anon_users):
        """Sets the anon_users of this Config.


        :param anon_users: The anon_users of this Config.  # noqa: E501
        :type: str
        """

        self._anon_users = anon_users

    @property
    def autologout_time(self):
        """Gets the autologout_time of this Config.  # noqa: E501


        :return: The autologout_time of this Config.  # noqa: E501
        :rtype: str
        """
        return self._autologout_time

    @autologout_time.setter
    def autologout_time(self, autologout_time):
        """Sets the autologout_time of this Config.


        :param autologout_time: The autologout_time of this Config.  # noqa: E501
        :type: str
        """

        self._autologout_time = autologout_time

    @property
    def blox_anon(self):
        """Gets the blox_anon of this Config.  # noqa: E501


        :return: The blox_anon of this Config.  # noqa: E501
        :rtype: str
        """
        return self._blox_anon

    @blox_anon.setter
    def blox_anon(self, blox_anon):
        """Sets the blox_anon of this Config.


        :param blox_anon: The blox_anon of this Config.  # noqa: E501
        :type: str
        """

        self._blox_anon = blox_anon

    @property
    def blox_enabled(self):
        """Gets the blox_enabled of this Config.  # noqa: E501


        :return: The blox_enabled of this Config.  # noqa: E501
        :rtype: str
        """
        return self._blox_enabled

    @blox_enabled.setter
    def blox_enabled(self, blox_enabled):
        """Sets the blox_enabled of this Config.


        :param blox_enabled: The blox_enabled of this Config.  # noqa: E501
        :type: str
        """

        self._blox_enabled = blox_enabled

    @property
    def chat_url(self):
        """Gets the chat_url of this Config.  # noqa: E501


        :return: The chat_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._chat_url

    @chat_url.setter
    def chat_url(self, chat_url):
        """Sets the chat_url of this Config.


        :param chat_url: The chat_url of this Config.  # noqa: E501
        :type: str
        """

        self._chat_url = chat_url

    @property
    def cookie_validity_time(self):
        """Gets the cookie_validity_time of this Config.  # noqa: E501


        :return: The cookie_validity_time of this Config.  # noqa: E501
        :rtype: int
        """
        return self._cookie_validity_time

    @cookie_validity_time.setter
    def cookie_validity_time(self, cookie_validity_time):
        """Sets the cookie_validity_time of this Config.


        :param cookie_validity_time: The cookie_validity_time of this Config.  # noqa: E501
        :type: int
        """

        self._cookie_validity_time = cookie_validity_time

    @property
    def email_domain(self):
        """Gets the email_domain of this Config.  # noqa: E501


        :return: The email_domain of this Config.  # noqa: E501
        :rtype: str
        """
        return self._email_domain

    @email_domain.setter
    def email_domain(self, email_domain):
        """Sets the email_domain of this Config.


        :param email_domain: The email_domain of this Config.  # noqa: E501
        :type: str
        """

        self._email_domain = email_domain

    @property
    def extauth_email(self):
        """Gets the extauth_email of this Config.  # noqa: E501


        :return: The extauth_email of this Config.  # noqa: E501
        :rtype: str
        """
        return self._extauth_email

    @extauth_email.setter
    def extauth_email(self, extauth_email):
        """Sets the extauth_email of this Config.


        :param extauth_email: The extauth_email of this Config.  # noqa: E501
        :type: str
        """

        self._extauth_email = extauth_email

    @property
    def extauth_firstname(self):
        """Gets the extauth_firstname of this Config.  # noqa: E501


        :return: The extauth_firstname of this Config.  # noqa: E501
        :rtype: str
        """
        return self._extauth_firstname

    @extauth_firstname.setter
    def extauth_firstname(self, extauth_firstname):
        """Sets the extauth_firstname of this Config.


        :param extauth_firstname: The extauth_firstname of this Config.  # noqa: E501
        :type: str
        """

        self._extauth_firstname = extauth_firstname

    @property
    def extauth_lastname(self):
        """Gets the extauth_lastname of this Config.  # noqa: E501


        :return: The extauth_lastname of this Config.  # noqa: E501
        :rtype: str
        """
        return self._extauth_lastname

    @extauth_lastname.setter
    def extauth_lastname(self, extauth_lastname):
        """Sets the extauth_lastname of this Config.


        :param extauth_lastname: The extauth_lastname of this Config.  # noqa: E501
        :type: str
        """

        self._extauth_lastname = extauth_lastname

    @property
    def extauth_remote_user(self):
        """Gets the extauth_remote_user of this Config.  # noqa: E501


        :return: The extauth_remote_user of this Config.  # noqa: E501
        :rtype: str
        """
        return self._extauth_remote_user

    @extauth_remote_user.setter
    def extauth_remote_user(self, extauth_remote_user):
        """Sets the extauth_remote_user of this Config.


        :param extauth_remote_user: The extauth_remote_user of this Config.  # noqa: E501
        :type: str
        """

        self._extauth_remote_user = extauth_remote_user

    @property
    def extauth_teams(self):
        """Gets the extauth_teams of this Config.  # noqa: E501


        :return: The extauth_teams of this Config.  # noqa: E501
        :rtype: str
        """
        return self._extauth_teams

    @extauth_teams.setter
    def extauth_teams(self, extauth_teams):
        """Sets the extauth_teams of this Config.


        :param extauth_teams: The extauth_teams of this Config.  # noqa: E501
        :type: str
        """

        self._extauth_teams = extauth_teams

    @property
    def lang(self):
        """Gets the lang of this Config.  # noqa: E501


        :return: The lang of this Config.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Config.


        :param lang: The lang of this Config.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def ldap_base_dn(self):
        """Gets the ldap_base_dn of this Config.  # noqa: E501


        :return: The ldap_base_dn of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_base_dn

    @ldap_base_dn.setter
    def ldap_base_dn(self, ldap_base_dn):
        """Sets the ldap_base_dn of this Config.


        :param ldap_base_dn: The ldap_base_dn of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_base_dn = ldap_base_dn

    @property
    def ldap_search_attr(self):
        """Gets the ldap_search_attr of this Config.  # noqa: E501


        :return: The ldap_search_attr of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_search_attr

    @ldap_search_attr.setter
    def ldap_search_attr(self, ldap_search_attr):
        """Sets the ldap_search_attr of this Config.


        :param ldap_search_attr: The ldap_search_attr of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_search_attr = ldap_search_attr

    @property
    def ldap_email(self):
        """Gets the ldap_email of this Config.  # noqa: E501


        :return: The ldap_email of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_email

    @ldap_email.setter
    def ldap_email(self, ldap_email):
        """Sets the ldap_email of this Config.


        :param ldap_email: The ldap_email of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_email = ldap_email

    @property
    def ldap_firstname(self):
        """Gets the ldap_firstname of this Config.  # noqa: E501


        :return: The ldap_firstname of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_firstname

    @ldap_firstname.setter
    def ldap_firstname(self, ldap_firstname):
        """Sets the ldap_firstname of this Config.


        :param ldap_firstname: The ldap_firstname of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_firstname = ldap_firstname

    @property
    def ldap_host(self):
        """Gets the ldap_host of this Config.  # noqa: E501


        :return: The ldap_host of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_host

    @ldap_host.setter
    def ldap_host(self, ldap_host):
        """Sets the ldap_host of this Config.


        :param ldap_host: The ldap_host of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_host = ldap_host

    @property
    def ldap_lastname(self):
        """Gets the ldap_lastname of this Config.  # noqa: E501


        :return: The ldap_lastname of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_lastname

    @ldap_lastname.setter
    def ldap_lastname(self, ldap_lastname):
        """Sets the ldap_lastname of this Config.


        :param ldap_lastname: The ldap_lastname of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_lastname = ldap_lastname

    @property
    def ldap_password(self):
        """Gets the ldap_password of this Config.  # noqa: E501


        :return: The ldap_password of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_password

    @ldap_password.setter
    def ldap_password(self, ldap_password):
        """Sets the ldap_password of this Config.


        :param ldap_password: The ldap_password of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_password = ldap_password

    @property
    def ldap_port(self):
        """Gets the ldap_port of this Config.  # noqa: E501


        :return: The ldap_port of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_port

    @ldap_port.setter
    def ldap_port(self, ldap_port):
        """Sets the ldap_port of this Config.


        :param ldap_port: The ldap_port of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_port = ldap_port

    @property
    def ldap_team(self):
        """Gets the ldap_team of this Config.  # noqa: E501


        :return: The ldap_team of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_team

    @ldap_team.setter
    def ldap_team(self, ldap_team):
        """Sets the ldap_team of this Config.


        :param ldap_team: The ldap_team of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_team = ldap_team

    @property
    def ldap_toggle(self):
        """Gets the ldap_toggle of this Config.  # noqa: E501


        :return: The ldap_toggle of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_toggle

    @ldap_toggle.setter
    def ldap_toggle(self, ldap_toggle):
        """Sets the ldap_toggle of this Config.


        :param ldap_toggle: The ldap_toggle of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_toggle = ldap_toggle

    @property
    def ldap_use_tls(self):
        """Gets the ldap_use_tls of this Config.  # noqa: E501


        :return: The ldap_use_tls of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_use_tls

    @ldap_use_tls.setter
    def ldap_use_tls(self, ldap_use_tls):
        """Sets the ldap_use_tls of this Config.


        :param ldap_use_tls: The ldap_use_tls of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_use_tls = ldap_use_tls

    @property
    def ldap_username(self):
        """Gets the ldap_username of this Config.  # noqa: E501


        :return: The ldap_username of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ldap_username

    @ldap_username.setter
    def ldap_username(self, ldap_username):
        """Sets the ldap_username of this Config.


        :param ldap_username: The ldap_username of this Config.  # noqa: E501
        :type: str
        """

        self._ldap_username = ldap_username

    @property
    def local_login(self):
        """Gets the local_login of this Config.  # noqa: E501


        :return: The local_login of this Config.  # noqa: E501
        :rtype: str
        """
        return self._local_login

    @local_login.setter
    def local_login(self, local_login):
        """Sets the local_login of this Config.


        :param local_login: The local_login of this Config.  # noqa: E501
        :type: str
        """

        self._local_login = local_login

    @property
    def local_register(self):
        """Gets the local_register of this Config.  # noqa: E501


        :return: The local_register of this Config.  # noqa: E501
        :rtype: str
        """
        return self._local_register

    @local_register.setter
    def local_register(self, local_register):
        """Sets the local_register of this Config.


        :param local_register: The local_register of this Config.  # noqa: E501
        :type: str
        """

        self._local_register = local_register

    @property
    def login_announcement(self):
        """Gets the login_announcement of this Config.  # noqa: E501

        This text will only be shown on the login page.  # noqa: E501

        :return: The login_announcement of this Config.  # noqa: E501
        :rtype: str
        """
        return self._login_announcement

    @login_announcement.setter
    def login_announcement(self, login_announcement):
        """Sets the login_announcement of this Config.

        This text will only be shown on the login page.  # noqa: E501

        :param login_announcement: The login_announcement of this Config.  # noqa: E501
        :type: str
        """

        self._login_announcement = login_announcement

    @property
    def login_tries(self):
        """Gets the login_tries of this Config.  # noqa: E501


        :return: The login_tries of this Config.  # noqa: E501
        :rtype: str
        """
        return self._login_tries

    @login_tries.setter
    def login_tries(self, login_tries):
        """Sets the login_tries of this Config.


        :param login_tries: The login_tries of this Config.  # noqa: E501
        :type: str
        """

        self._login_tries = login_tries

    @property
    def logout_url(self):
        """Gets the logout_url of this Config.  # noqa: E501


        :return: The logout_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._logout_url

    @logout_url.setter
    def logout_url(self, logout_url):
        """Sets the logout_url of this Config.


        :param logout_url: The logout_url of this Config.  # noqa: E501
        :type: str
        """

        self._logout_url = logout_url

    @property
    def mail_from(self):
        """Gets the mail_from of this Config.  # noqa: E501


        :return: The mail_from of this Config.  # noqa: E501
        :rtype: str
        """
        return self._mail_from

    @mail_from.setter
    def mail_from(self, mail_from):
        """Sets the mail_from of this Config.


        :param mail_from: The mail_from of this Config.  # noqa: E501
        :type: str
        """

        self._mail_from = mail_from

    @property
    def max_revisions(self):
        """Gets the max_revisions of this Config.  # noqa: E501


        :return: The max_revisions of this Config.  # noqa: E501
        :rtype: str
        """
        return self._max_revisions

    @max_revisions.setter
    def max_revisions(self, max_revisions):
        """Sets the max_revisions of this Config.


        :param max_revisions: The max_revisions of this Config.  # noqa: E501
        :type: str
        """

        self._max_revisions = max_revisions

    @property
    def min_days_revisions(self):
        """Gets the min_days_revisions of this Config.  # noqa: E501


        :return: The min_days_revisions of this Config.  # noqa: E501
        :rtype: str
        """
        return self._min_days_revisions

    @min_days_revisions.setter
    def min_days_revisions(self, min_days_revisions):
        """Sets the min_days_revisions of this Config.


        :param min_days_revisions: The min_days_revisions of this Config.  # noqa: E501
        :type: str
        """

        self._min_days_revisions = min_days_revisions

    @property
    def min_delta_revisions(self):
        """Gets the min_delta_revisions of this Config.  # noqa: E501

        Minimum number of characters changed required to trigger a revision save.  # noqa: E501

        :return: The min_delta_revisions of this Config.  # noqa: E501
        :rtype: str
        """
        return self._min_delta_revisions

    @min_delta_revisions.setter
    def min_delta_revisions(self, min_delta_revisions):
        """Sets the min_delta_revisions of this Config.

        Minimum number of characters changed required to trigger a revision save.  # noqa: E501

        :param min_delta_revisions: The min_delta_revisions of this Config.  # noqa: E501
        :type: str
        """

        self._min_delta_revisions = min_delta_revisions

    @property
    def onboarding_email_active(self):
        """Gets the onboarding_email_active of this Config.  # noqa: E501


        :return: The onboarding_email_active of this Config.  # noqa: E501
        :rtype: str
        """
        return self._onboarding_email_active

    @onboarding_email_active.setter
    def onboarding_email_active(self, onboarding_email_active):
        """Sets the onboarding_email_active of this Config.


        :param onboarding_email_active: The onboarding_email_active of this Config.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if onboarding_email_active not in allowed_values:
            raise ValueError(
                "Invalid value for `onboarding_email_active` ({0}), must be one of {1}"  # noqa: E501
                .format(onboarding_email_active, allowed_values)
            )

        self._onboarding_email_active = onboarding_email_active

    @property
    def onboarding_email_admins_body(self):
        """Gets the onboarding_email_admins_body of this Config.  # noqa: E501


        :return: The onboarding_email_admins_body of this Config.  # noqa: E501
        :rtype: str
        """
        return self._onboarding_email_admins_body

    @onboarding_email_admins_body.setter
    def onboarding_email_admins_body(self, onboarding_email_admins_body):
        """Sets the onboarding_email_admins_body of this Config.


        :param onboarding_email_admins_body: The onboarding_email_admins_body of this Config.  # noqa: E501
        :type: str
        """

        self._onboarding_email_admins_body = onboarding_email_admins_body

    @property
    def onboarding_email_admins_subject(self):
        """Gets the onboarding_email_admins_subject of this Config.  # noqa: E501


        :return: The onboarding_email_admins_subject of this Config.  # noqa: E501
        :rtype: str
        """
        return self._onboarding_email_admins_subject

    @onboarding_email_admins_subject.setter
    def onboarding_email_admins_subject(self, onboarding_email_admins_subject):
        """Sets the onboarding_email_admins_subject of this Config.


        :param onboarding_email_admins_subject: The onboarding_email_admins_subject of this Config.  # noqa: E501
        :type: str
        """

        self._onboarding_email_admins_subject = onboarding_email_admins_subject

    @property
    def onboarding_email_body(self):
        """Gets the onboarding_email_body of this Config.  # noqa: E501


        :return: The onboarding_email_body of this Config.  # noqa: E501
        :rtype: str
        """
        return self._onboarding_email_body

    @onboarding_email_body.setter
    def onboarding_email_body(self, onboarding_email_body):
        """Sets the onboarding_email_body of this Config.


        :param onboarding_email_body: The onboarding_email_body of this Config.  # noqa: E501
        :type: str
        """

        self._onboarding_email_body = onboarding_email_body

    @property
    def onboarding_email_different_for_admins(self):
        """Gets the onboarding_email_different_for_admins of this Config.  # noqa: E501


        :return: The onboarding_email_different_for_admins of this Config.  # noqa: E501
        :rtype: str
        """
        return self._onboarding_email_different_for_admins

    @onboarding_email_different_for_admins.setter
    def onboarding_email_different_for_admins(self, onboarding_email_different_for_admins):
        """Sets the onboarding_email_different_for_admins of this Config.


        :param onboarding_email_different_for_admins: The onboarding_email_different_for_admins of this Config.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if onboarding_email_different_for_admins not in allowed_values:
            raise ValueError(
                "Invalid value for `onboarding_email_different_for_admins` ({0}), must be one of {1}"  # noqa: E501
                .format(onboarding_email_different_for_admins, allowed_values)
            )

        self._onboarding_email_different_for_admins = onboarding_email_different_for_admins

    @property
    def onboarding_email_subject(self):
        """Gets the onboarding_email_subject of this Config.  # noqa: E501


        :return: The onboarding_email_subject of this Config.  # noqa: E501
        :rtype: str
        """
        return self._onboarding_email_subject

    @onboarding_email_subject.setter
    def onboarding_email_subject(self, onboarding_email_subject):
        """Sets the onboarding_email_subject of this Config.


        :param onboarding_email_subject: The onboarding_email_subject of this Config.  # noqa: E501
        :type: str
        """

        self._onboarding_email_subject = onboarding_email_subject

    @property
    def open_science(self):
        """Gets the open_science of this Config.  # noqa: E501


        :return: The open_science of this Config.  # noqa: E501
        :rtype: str
        """
        return self._open_science

    @open_science.setter
    def open_science(self, open_science):
        """Sets the open_science of this Config.


        :param open_science: The open_science of this Config.  # noqa: E501
        :type: str
        """

        self._open_science = open_science

    @property
    def open_team(self):
        """Gets the open_team of this Config.  # noqa: E501


        :return: The open_team of this Config.  # noqa: E501
        :rtype: str
        """
        return self._open_team

    @open_team.setter
    def open_team(self, open_team):
        """Sets the open_team of this Config.


        :param open_team: The open_team of this Config.  # noqa: E501
        :type: str
        """

        self._open_team = open_team

    @property
    def privacy_policy(self):
        """Gets the privacy_policy of this Config.  # noqa: E501


        :return: The privacy_policy of this Config.  # noqa: E501
        :rtype: str
        """
        return self._privacy_policy

    @privacy_policy.setter
    def privacy_policy(self, privacy_policy):
        """Sets the privacy_policy of this Config.


        :param privacy_policy: The privacy_policy of this Config.  # noqa: E501
        :type: str
        """

        self._privacy_policy = privacy_policy

    @property
    def proxy(self):
        """Gets the proxy of this Config.  # noqa: E501


        :return: The proxy of this Config.  # noqa: E501
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this Config.


        :param proxy: The proxy of this Config.  # noqa: E501
        :type: str
        """

        self._proxy = proxy

    @property
    def remote_dir_config(self):
        """Gets the remote_dir_config of this Config.  # noqa: E501


        :return: The remote_dir_config of this Config.  # noqa: E501
        :rtype: str
        """
        return self._remote_dir_config

    @remote_dir_config.setter
    def remote_dir_config(self, remote_dir_config):
        """Sets the remote_dir_config of this Config.


        :param remote_dir_config: The remote_dir_config of this Config.  # noqa: E501
        :type: str
        """

        self._remote_dir_config = remote_dir_config

    @property
    def remote_dir_service(self):
        """Gets the remote_dir_service of this Config.  # noqa: E501


        :return: The remote_dir_service of this Config.  # noqa: E501
        :rtype: str
        """
        return self._remote_dir_service

    @remote_dir_service.setter
    def remote_dir_service(self, remote_dir_service):
        """Sets the remote_dir_service of this Config.


        :param remote_dir_service: The remote_dir_service of this Config.  # noqa: E501
        :type: str
        """

        self._remote_dir_service = remote_dir_service

    @property
    def s3_bucket_name(self):
        """Gets the s3_bucket_name of this Config.  # noqa: E501


        :return: The s3_bucket_name of this Config.  # noqa: E501
        :rtype: str
        """
        return self._s3_bucket_name

    @s3_bucket_name.setter
    def s3_bucket_name(self, s3_bucket_name):
        """Sets the s3_bucket_name of this Config.


        :param s3_bucket_name: The s3_bucket_name of this Config.  # noqa: E501
        :type: str
        """

        self._s3_bucket_name = s3_bucket_name

    @property
    def s3_endpoint(self):
        """Gets the s3_endpoint of this Config.  # noqa: E501


        :return: The s3_endpoint of this Config.  # noqa: E501
        :rtype: str
        """
        return self._s3_endpoint

    @s3_endpoint.setter
    def s3_endpoint(self, s3_endpoint):
        """Sets the s3_endpoint of this Config.


        :param s3_endpoint: The s3_endpoint of this Config.  # noqa: E501
        :type: str
        """

        self._s3_endpoint = s3_endpoint

    @property
    def s3_path_prefix(self):
        """Gets the s3_path_prefix of this Config.  # noqa: E501


        :return: The s3_path_prefix of this Config.  # noqa: E501
        :rtype: str
        """
        return self._s3_path_prefix

    @s3_path_prefix.setter
    def s3_path_prefix(self, s3_path_prefix):
        """Sets the s3_path_prefix of this Config.


        :param s3_path_prefix: The s3_path_prefix of this Config.  # noqa: E501
        :type: str
        """

        self._s3_path_prefix = s3_path_prefix

    @property
    def s3_region(self):
        """Gets the s3_region of this Config.  # noqa: E501


        :return: The s3_region of this Config.  # noqa: E501
        :rtype: str
        """
        return self._s3_region

    @s3_region.setter
    def s3_region(self, s3_region):
        """Sets the s3_region of this Config.


        :param s3_region: The s3_region of this Config.  # noqa: E501
        :type: str
        """

        self._s3_region = s3_region

    @property
    def s3_verify_cert(self):
        """Gets the s3_verify_cert of this Config.  # noqa: E501


        :return: The s3_verify_cert of this Config.  # noqa: E501
        :rtype: str
        """
        return self._s3_verify_cert

    @s3_verify_cert.setter
    def s3_verify_cert(self, s3_verify_cert):
        """Sets the s3_verify_cert of this Config.


        :param s3_verify_cert: The s3_verify_cert of this Config.  # noqa: E501
        :type: str
        """

        self._s3_verify_cert = s3_verify_cert

    @property
    def saml_acs_binding(self):
        """Gets the saml_acs_binding of this Config.  # noqa: E501


        :return: The saml_acs_binding of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_acs_binding

    @saml_acs_binding.setter
    def saml_acs_binding(self, saml_acs_binding):
        """Sets the saml_acs_binding of this Config.


        :param saml_acs_binding: The saml_acs_binding of this Config.  # noqa: E501
        :type: str
        """

        self._saml_acs_binding = saml_acs_binding

    @property
    def saml_allowrepeatattributename(self):
        """Gets the saml_allowrepeatattributename of this Config.  # noqa: E501


        :return: The saml_allowrepeatattributename of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_allowrepeatattributename

    @saml_allowrepeatattributename.setter
    def saml_allowrepeatattributename(self, saml_allowrepeatattributename):
        """Sets the saml_allowrepeatattributename of this Config.


        :param saml_allowrepeatattributename: The saml_allowrepeatattributename of this Config.  # noqa: E501
        :type: str
        """

        self._saml_allowrepeatattributename = saml_allowrepeatattributename

    @property
    def saml_authnrequestssigned(self):
        """Gets the saml_authnrequestssigned of this Config.  # noqa: E501


        :return: The saml_authnrequestssigned of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_authnrequestssigned

    @saml_authnrequestssigned.setter
    def saml_authnrequestssigned(self, saml_authnrequestssigned):
        """Sets the saml_authnrequestssigned of this Config.


        :param saml_authnrequestssigned: The saml_authnrequestssigned of this Config.  # noqa: E501
        :type: str
        """

        self._saml_authnrequestssigned = saml_authnrequestssigned

    @property
    def saml_baseurl(self):
        """Gets the saml_baseurl of this Config.  # noqa: E501


        :return: The saml_baseurl of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_baseurl

    @saml_baseurl.setter
    def saml_baseurl(self, saml_baseurl):
        """Sets the saml_baseurl of this Config.


        :param saml_baseurl: The saml_baseurl of this Config.  # noqa: E501
        :type: str
        """

        self._saml_baseurl = saml_baseurl

    @property
    def saml_debug(self):
        """Gets the saml_debug of this Config.  # noqa: E501


        :return: The saml_debug of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_debug

    @saml_debug.setter
    def saml_debug(self, saml_debug):
        """Sets the saml_debug of this Config.


        :param saml_debug: The saml_debug of this Config.  # noqa: E501
        :type: str
        """

        self._saml_debug = saml_debug

    @property
    def saml_entityid(self):
        """Gets the saml_entityid of this Config.  # noqa: E501


        :return: The saml_entityid of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_entityid

    @saml_entityid.setter
    def saml_entityid(self, saml_entityid):
        """Sets the saml_entityid of this Config.


        :param saml_entityid: The saml_entityid of this Config.  # noqa: E501
        :type: str
        """

        self._saml_entityid = saml_entityid

    @property
    def saml_logoutrequestsigned(self):
        """Gets the saml_logoutrequestsigned of this Config.  # noqa: E501


        :return: The saml_logoutrequestsigned of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_logoutrequestsigned

    @saml_logoutrequestsigned.setter
    def saml_logoutrequestsigned(self, saml_logoutrequestsigned):
        """Sets the saml_logoutrequestsigned of this Config.


        :param saml_logoutrequestsigned: The saml_logoutrequestsigned of this Config.  # noqa: E501
        :type: str
        """

        self._saml_logoutrequestsigned = saml_logoutrequestsigned

    @property
    def saml_logoutresponsesigned(self):
        """Gets the saml_logoutresponsesigned of this Config.  # noqa: E501


        :return: The saml_logoutresponsesigned of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_logoutresponsesigned

    @saml_logoutresponsesigned.setter
    def saml_logoutresponsesigned(self, saml_logoutresponsesigned):
        """Sets the saml_logoutresponsesigned of this Config.


        :param saml_logoutresponsesigned: The saml_logoutresponsesigned of this Config.  # noqa: E501
        :type: str
        """

        self._saml_logoutresponsesigned = saml_logoutresponsesigned

    @property
    def saml_lowercaseurlencoding(self):
        """Gets the saml_lowercaseurlencoding of this Config.  # noqa: E501


        :return: The saml_lowercaseurlencoding of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_lowercaseurlencoding

    @saml_lowercaseurlencoding.setter
    def saml_lowercaseurlencoding(self, saml_lowercaseurlencoding):
        """Sets the saml_lowercaseurlencoding of this Config.


        :param saml_lowercaseurlencoding: The saml_lowercaseurlencoding of this Config.  # noqa: E501
        :type: str
        """

        self._saml_lowercaseurlencoding = saml_lowercaseurlencoding

    @property
    def saml_nameidencrypted(self):
        """Gets the saml_nameidencrypted of this Config.  # noqa: E501


        :return: The saml_nameidencrypted of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_nameidencrypted

    @saml_nameidencrypted.setter
    def saml_nameidencrypted(self, saml_nameidencrypted):
        """Sets the saml_nameidencrypted of this Config.


        :param saml_nameidencrypted: The saml_nameidencrypted of this Config.  # noqa: E501
        :type: str
        """

        self._saml_nameidencrypted = saml_nameidencrypted

    @property
    def saml_nameidformat(self):
        """Gets the saml_nameidformat of this Config.  # noqa: E501


        :return: The saml_nameidformat of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_nameidformat

    @saml_nameidformat.setter
    def saml_nameidformat(self, saml_nameidformat):
        """Sets the saml_nameidformat of this Config.


        :param saml_nameidformat: The saml_nameidformat of this Config.  # noqa: E501
        :type: str
        """

        self._saml_nameidformat = saml_nameidformat

    @property
    def saml_privatekey(self):
        """Gets the saml_privatekey of this Config.  # noqa: E501


        :return: The saml_privatekey of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_privatekey

    @saml_privatekey.setter
    def saml_privatekey(self, saml_privatekey):
        """Sets the saml_privatekey of this Config.


        :param saml_privatekey: The saml_privatekey of this Config.  # noqa: E501
        :type: str
        """

        self._saml_privatekey = saml_privatekey

    @property
    def saml_relaxdestinationvalidation(self):
        """Gets the saml_relaxdestinationvalidation of this Config.  # noqa: E501


        :return: The saml_relaxdestinationvalidation of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_relaxdestinationvalidation

    @saml_relaxdestinationvalidation.setter
    def saml_relaxdestinationvalidation(self, saml_relaxdestinationvalidation):
        """Sets the saml_relaxdestinationvalidation of this Config.


        :param saml_relaxdestinationvalidation: The saml_relaxdestinationvalidation of this Config.  # noqa: E501
        :type: str
        """

        self._saml_relaxdestinationvalidation = saml_relaxdestinationvalidation

    @property
    def saml_signmetadata(self):
        """Gets the saml_signmetadata of this Config.  # noqa: E501


        :return: The saml_signmetadata of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_signmetadata

    @saml_signmetadata.setter
    def saml_signmetadata(self, saml_signmetadata):
        """Sets the saml_signmetadata of this Config.


        :param saml_signmetadata: The saml_signmetadata of this Config.  # noqa: E501
        :type: str
        """

        self._saml_signmetadata = saml_signmetadata

    @property
    def saml_slo_binding(self):
        """Gets the saml_slo_binding of this Config.  # noqa: E501


        :return: The saml_slo_binding of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_slo_binding

    @saml_slo_binding.setter
    def saml_slo_binding(self, saml_slo_binding):
        """Sets the saml_slo_binding of this Config.


        :param saml_slo_binding: The saml_slo_binding of this Config.  # noqa: E501
        :type: str
        """

        self._saml_slo_binding = saml_slo_binding

    @property
    def saml_strict(self):
        """Gets the saml_strict of this Config.  # noqa: E501


        :return: The saml_strict of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_strict

    @saml_strict.setter
    def saml_strict(self, saml_strict):
        """Sets the saml_strict of this Config.


        :param saml_strict: The saml_strict of this Config.  # noqa: E501
        :type: str
        """

        self._saml_strict = saml_strict

    @property
    def saml_sync_teams(self):
        """Gets the saml_sync_teams of this Config.  # noqa: E501


        :return: The saml_sync_teams of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_sync_teams

    @saml_sync_teams.setter
    def saml_sync_teams(self, saml_sync_teams):
        """Sets the saml_sync_teams of this Config.


        :param saml_sync_teams: The saml_sync_teams of this Config.  # noqa: E501
        :type: str
        """

        self._saml_sync_teams = saml_sync_teams

    @property
    def saml_team_create(self):
        """Gets the saml_team_create of this Config.  # noqa: E501


        :return: The saml_team_create of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_team_create

    @saml_team_create.setter
    def saml_team_create(self, saml_team_create):
        """Sets the saml_team_create of this Config.


        :param saml_team_create: The saml_team_create of this Config.  # noqa: E501
        :type: str
        """

        self._saml_team_create = saml_team_create

    @property
    def saml_team_default(self):
        """Gets the saml_team_default of this Config.  # noqa: E501


        :return: The saml_team_default of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_team_default

    @saml_team_default.setter
    def saml_team_default(self, saml_team_default):
        """Sets the saml_team_default of this Config.


        :param saml_team_default: The saml_team_default of this Config.  # noqa: E501
        :type: str
        """

        self._saml_team_default = saml_team_default

    @property
    def saml_toggle(self):
        """Gets the saml_toggle of this Config.  # noqa: E501


        :return: The saml_toggle of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_toggle

    @saml_toggle.setter
    def saml_toggle(self, saml_toggle):
        """Sets the saml_toggle of this Config.


        :param saml_toggle: The saml_toggle of this Config.  # noqa: E501
        :type: str
        """

        self._saml_toggle = saml_toggle

    @property
    def saml_user_default(self):
        """Gets the saml_user_default of this Config.  # noqa: E501


        :return: The saml_user_default of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_user_default

    @saml_user_default.setter
    def saml_user_default(self, saml_user_default):
        """Sets the saml_user_default of this Config.


        :param saml_user_default: The saml_user_default of this Config.  # noqa: E501
        :type: str
        """

        self._saml_user_default = saml_user_default

    @property
    def saml_wantassertionsencrypted(self):
        """Gets the saml_wantassertionsencrypted of this Config.  # noqa: E501


        :return: The saml_wantassertionsencrypted of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_wantassertionsencrypted

    @saml_wantassertionsencrypted.setter
    def saml_wantassertionsencrypted(self, saml_wantassertionsencrypted):
        """Sets the saml_wantassertionsencrypted of this Config.


        :param saml_wantassertionsencrypted: The saml_wantassertionsencrypted of this Config.  # noqa: E501
        :type: str
        """

        self._saml_wantassertionsencrypted = saml_wantassertionsencrypted

    @property
    def saml_wantassertionssigned(self):
        """Gets the saml_wantassertionssigned of this Config.  # noqa: E501


        :return: The saml_wantassertionssigned of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_wantassertionssigned

    @saml_wantassertionssigned.setter
    def saml_wantassertionssigned(self, saml_wantassertionssigned):
        """Sets the saml_wantassertionssigned of this Config.


        :param saml_wantassertionssigned: The saml_wantassertionssigned of this Config.  # noqa: E501
        :type: str
        """

        self._saml_wantassertionssigned = saml_wantassertionssigned

    @property
    def saml_wantmessagessigned(self):
        """Gets the saml_wantmessagessigned of this Config.  # noqa: E501


        :return: The saml_wantmessagessigned of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_wantmessagessigned

    @saml_wantmessagessigned.setter
    def saml_wantmessagessigned(self, saml_wantmessagessigned):
        """Sets the saml_wantmessagessigned of this Config.


        :param saml_wantmessagessigned: The saml_wantmessagessigned of this Config.  # noqa: E501
        :type: str
        """

        self._saml_wantmessagessigned = saml_wantmessagessigned

    @property
    def saml_wantnameid(self):
        """Gets the saml_wantnameid of this Config.  # noqa: E501


        :return: The saml_wantnameid of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_wantnameid

    @saml_wantnameid.setter
    def saml_wantnameid(self, saml_wantnameid):
        """Sets the saml_wantnameid of this Config.


        :param saml_wantnameid: The saml_wantnameid of this Config.  # noqa: E501
        :type: str
        """

        self._saml_wantnameid = saml_wantnameid

    @property
    def saml_wantnameidencrypted(self):
        """Gets the saml_wantnameidencrypted of this Config.  # noqa: E501


        :return: The saml_wantnameidencrypted of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_wantnameidencrypted

    @saml_wantnameidencrypted.setter
    def saml_wantnameidencrypted(self, saml_wantnameidencrypted):
        """Sets the saml_wantnameidencrypted of this Config.


        :param saml_wantnameidencrypted: The saml_wantnameidencrypted of this Config.  # noqa: E501
        :type: str
        """

        self._saml_wantnameidencrypted = saml_wantnameidencrypted

    @property
    def saml_wantxmlvalidation(self):
        """Gets the saml_wantxmlvalidation of this Config.  # noqa: E501


        :return: The saml_wantxmlvalidation of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_wantxmlvalidation

    @saml_wantxmlvalidation.setter
    def saml_wantxmlvalidation(self, saml_wantxmlvalidation):
        """Sets the saml_wantxmlvalidation of this Config.


        :param saml_wantxmlvalidation: The saml_wantxmlvalidation of this Config.  # noqa: E501
        :type: str
        """

        self._saml_wantxmlvalidation = saml_wantxmlvalidation

    @property
    def saml_x509(self):
        """Gets the saml_x509 of this Config.  # noqa: E501


        :return: The saml_x509 of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_x509

    @saml_x509.setter
    def saml_x509(self, saml_x509):
        """Sets the saml_x509 of this Config.


        :param saml_x509: The saml_x509 of this Config.  # noqa: E501
        :type: str
        """

        self._saml_x509 = saml_x509

    @property
    def saml_x509_new(self):
        """Gets the saml_x509_new of this Config.  # noqa: E501


        :return: The saml_x509_new of this Config.  # noqa: E501
        :rtype: str
        """
        return self._saml_x509_new

    @saml_x509_new.setter
    def saml_x509_new(self, saml_x509_new):
        """Sets the saml_x509_new of this Config.


        :param saml_x509_new: The saml_x509_new of this Config.  # noqa: E501
        :type: str
        """

        self._saml_x509_new = saml_x509_new

    @property
    def schema(self):
        """Gets the schema of this Config.  # noqa: E501


        :return: The schema of this Config.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this Config.


        :param schema: The schema of this Config.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def smtp_address(self):
        """Gets the smtp_address of this Config.  # noqa: E501


        :return: The smtp_address of this Config.  # noqa: E501
        :rtype: str
        """
        return self._smtp_address

    @smtp_address.setter
    def smtp_address(self, smtp_address):
        """Sets the smtp_address of this Config.


        :param smtp_address: The smtp_address of this Config.  # noqa: E501
        :type: str
        """

        self._smtp_address = smtp_address

    @property
    def smtp_encryption(self):
        """Gets the smtp_encryption of this Config.  # noqa: E501


        :return: The smtp_encryption of this Config.  # noqa: E501
        :rtype: str
        """
        return self._smtp_encryption

    @smtp_encryption.setter
    def smtp_encryption(self, smtp_encryption):
        """Sets the smtp_encryption of this Config.


        :param smtp_encryption: The smtp_encryption of this Config.  # noqa: E501
        :type: str
        """

        self._smtp_encryption = smtp_encryption

    @property
    def smtp_password(self):
        """Gets the smtp_password of this Config.  # noqa: E501


        :return: The smtp_password of this Config.  # noqa: E501
        :rtype: str
        """
        return self._smtp_password

    @smtp_password.setter
    def smtp_password(self, smtp_password):
        """Sets the smtp_password of this Config.


        :param smtp_password: The smtp_password of this Config.  # noqa: E501
        :type: str
        """

        self._smtp_password = smtp_password

    @property
    def smtp_port(self):
        """Gets the smtp_port of this Config.  # noqa: E501


        :return: The smtp_port of this Config.  # noqa: E501
        :rtype: str
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """Sets the smtp_port of this Config.


        :param smtp_port: The smtp_port of this Config.  # noqa: E501
        :type: str
        """

        self._smtp_port = smtp_port

    @property
    def smtp_username(self):
        """Gets the smtp_username of this Config.  # noqa: E501


        :return: The smtp_username of this Config.  # noqa: E501
        :rtype: str
        """
        return self._smtp_username

    @smtp_username.setter
    def smtp_username(self, smtp_username):
        """Sets the smtp_username of this Config.


        :param smtp_username: The smtp_username of this Config.  # noqa: E501
        :type: str
        """

        self._smtp_username = smtp_username

    @property
    def support_url(self):
        """Gets the support_url of this Config.  # noqa: E501


        :return: The support_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._support_url

    @support_url.setter
    def support_url(self, support_url):
        """Sets the support_url of this Config.


        :param support_url: The support_url of this Config.  # noqa: E501
        :type: str
        """

        self._support_url = support_url

    @property
    def ts_authority(self):
        """Gets the ts_authority of this Config.  # noqa: E501


        :return: The ts_authority of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ts_authority

    @ts_authority.setter
    def ts_authority(self, ts_authority):
        """Sets the ts_authority of this Config.


        :param ts_authority: The ts_authority of this Config.  # noqa: E501
        :type: str
        """

        self._ts_authority = ts_authority

    @property
    def ts_cert(self):
        """Gets the ts_cert of this Config.  # noqa: E501


        :return: The ts_cert of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ts_cert

    @ts_cert.setter
    def ts_cert(self, ts_cert):
        """Sets the ts_cert of this Config.


        :param ts_cert: The ts_cert of this Config.  # noqa: E501
        :type: str
        """

        self._ts_cert = ts_cert

    @property
    def ts_hash(self):
        """Gets the ts_hash of this Config.  # noqa: E501


        :return: The ts_hash of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ts_hash

    @ts_hash.setter
    def ts_hash(self, ts_hash):
        """Sets the ts_hash of this Config.


        :param ts_hash: The ts_hash of this Config.  # noqa: E501
        :type: str
        """

        self._ts_hash = ts_hash

    @property
    def ts_limit(self):
        """Gets the ts_limit of this Config.  # noqa: E501


        :return: The ts_limit of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ts_limit

    @ts_limit.setter
    def ts_limit(self, ts_limit):
        """Sets the ts_limit of this Config.


        :param ts_limit: The ts_limit of this Config.  # noqa: E501
        :type: str
        """

        self._ts_limit = ts_limit

    @property
    def ts_login(self):
        """Gets the ts_login of this Config.  # noqa: E501


        :return: The ts_login of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ts_login

    @ts_login.setter
    def ts_login(self, ts_login):
        """Sets the ts_login of this Config.


        :param ts_login: The ts_login of this Config.  # noqa: E501
        :type: str
        """

        self._ts_login = ts_login

    @property
    def ts_password(self):
        """Gets the ts_password of this Config.  # noqa: E501


        :return: The ts_password of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ts_password

    @ts_password.setter
    def ts_password(self, ts_password):
        """Sets the ts_password of this Config.


        :param ts_password: The ts_password of this Config.  # noqa: E501
        :type: str
        """

        self._ts_password = ts_password

    @property
    def ts_url(self):
        """Gets the ts_url of this Config.  # noqa: E501


        :return: The ts_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._ts_url

    @ts_url.setter
    def ts_url(self, ts_url):
        """Sets the ts_url of this Config.


        :param ts_url: The ts_url of this Config.  # noqa: E501
        :type: str
        """

        self._ts_url = ts_url

    @property
    def uploads_storage(self):
        """Gets the uploads_storage of this Config.  # noqa: E501


        :return: The uploads_storage of this Config.  # noqa: E501
        :rtype: str
        """
        return self._uploads_storage

    @uploads_storage.setter
    def uploads_storage(self, uploads_storage):
        """Sets the uploads_storage of this Config.


        :param uploads_storage: The uploads_storage of this Config.  # noqa: E501
        :type: str
        """

        self._uploads_storage = uploads_storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
