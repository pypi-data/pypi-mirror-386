# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Revision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'int',
        'body': 'str',
        'body_html': 'str',
        'content_type': 'int',
        'created_at': 'str',
        'userid': 'int'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'item_id',
        'body': 'body',
        'body_html': 'body_html',
        'content_type': 'content_type',
        'created_at': 'created_at',
        'userid': 'userid'
    }

    def __init__(self, id=None, item_id=None, body=None, body_html=None, content_type=None, created_at=None, userid=None):  # noqa: E501
        """Revision - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._body = None
        self._body_html = None
        self._content_type = None
        self._created_at = None
        self._userid = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if body is not None:
            self.body = body
        if body_html is not None:
            self.body_html = body_html
        if content_type is not None:
            self.content_type = content_type
        if created_at is not None:
            self.created_at = created_at
        if userid is not None:
            self.userid = userid

    @property
    def id(self):
        """Gets the id of this Revision.  # noqa: E501


        :return: The id of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Revision.


        :param id: The id of this Revision.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this Revision.  # noqa: E501


        :return: The item_id of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Revision.


        :param item_id: The item_id of this Revision.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def body(self):
        """Gets the body of this Revision.  # noqa: E501


        :return: The body of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Revision.


        :param body: The body of this Revision.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this Revision.  # noqa: E501


        :return: The body_html of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this Revision.


        :param body_html: The body_html of this Revision.  # noqa: E501
        :type: str
        """

        self._body_html = body_html

    @property
    def content_type(self):
        """Gets the content_type of this Revision.  # noqa: E501


        :return: The content_type of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Revision.


        :param content_type: The content_type of this Revision.  # noqa: E501
        :type: int
        """

        self._content_type = content_type

    @property
    def created_at(self):
        """Gets the created_at of this Revision.  # noqa: E501


        :return: The created_at of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Revision.


        :param created_at: The created_at of this Revision.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def userid(self):
        """Gets the userid of this Revision.  # noqa: E501


        :return: The userid of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Revision.


        :param userid: The userid of this Revision.  # noqa: E501
        :type: int
        """

        self._userid = userid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Revision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Revision):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
