# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from elabapi_python.models.entity import Entity  # noqa: F401,E501

class Item(Entity):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_bookable': 'int',
        'canbook': 'str',
        'book_max_minutes': 'int',
        'book_max_slots': 'int',
        'book_can_overlap': 'int',
        'book_users_can_in_past': 'int',
        'book_is_cancellable': 'int',
        'book_cancel_minutes': 'int'
    }
    if hasattr(Entity, "swagger_types"):
        swagger_types.update(Entity.swagger_types)

    attribute_map = {
        'is_bookable': 'is_bookable',
        'canbook': 'canbook',
        'book_max_minutes': 'book_max_minutes',
        'book_max_slots': 'book_max_slots',
        'book_can_overlap': 'book_can_overlap',
        'book_users_can_in_past': 'book_users_can_in_past',
        'book_is_cancellable': 'book_is_cancellable',
        'book_cancel_minutes': 'book_cancel_minutes'
    }
    if hasattr(Entity, "attribute_map"):
        attribute_map.update(Entity.attribute_map)

    def __init__(self, is_bookable=None, canbook=None, book_max_minutes=None, book_max_slots=None, book_can_overlap=None, book_users_can_in_past=None, book_is_cancellable=None, book_cancel_minutes=None, *args, **kwargs):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        self._is_bookable = None
        self._canbook = None
        self._book_max_minutes = None
        self._book_max_slots = None
        self._book_can_overlap = None
        self._book_users_can_in_past = None
        self._book_is_cancellable = None
        self._book_cancel_minutes = None
        self.discriminator = None
        if is_bookable is not None:
            self.is_bookable = is_bookable
        if canbook is not None:
            self.canbook = canbook
        if book_max_minutes is not None:
            self.book_max_minutes = book_max_minutes
        if book_max_slots is not None:
            self.book_max_slots = book_max_slots
        if book_can_overlap is not None:
            self.book_can_overlap = book_can_overlap
        if book_users_can_in_past is not None:
            self.book_users_can_in_past = book_users_can_in_past
        if book_is_cancellable is not None:
            self.book_is_cancellable = book_is_cancellable
        if book_cancel_minutes is not None:
            self.book_cancel_minutes = book_cancel_minutes
        Entity.__init__(self, *args, **kwargs)

    @property
    def is_bookable(self):
        """Gets the is_bookable of this Item.  # noqa: E501


        :return: The is_bookable of this Item.  # noqa: E501
        :rtype: int
        """
        return self._is_bookable

    @is_bookable.setter
    def is_bookable(self, is_bookable):
        """Sets the is_bookable of this Item.


        :param is_bookable: The is_bookable of this Item.  # noqa: E501
        :type: int
        """

        self._is_bookable = is_bookable

    @property
    def canbook(self):
        """Gets the canbook of this Item.  # noqa: E501


        :return: The canbook of this Item.  # noqa: E501
        :rtype: str
        """
        return self._canbook

    @canbook.setter
    def canbook(self, canbook):
        """Sets the canbook of this Item.


        :param canbook: The canbook of this Item.  # noqa: E501
        :type: str
        """

        self._canbook = canbook

    @property
    def book_max_minutes(self):
        """Gets the book_max_minutes of this Item.  # noqa: E501


        :return: The book_max_minutes of this Item.  # noqa: E501
        :rtype: int
        """
        return self._book_max_minutes

    @book_max_minutes.setter
    def book_max_minutes(self, book_max_minutes):
        """Sets the book_max_minutes of this Item.


        :param book_max_minutes: The book_max_minutes of this Item.  # noqa: E501
        :type: int
        """

        self._book_max_minutes = book_max_minutes

    @property
    def book_max_slots(self):
        """Gets the book_max_slots of this Item.  # noqa: E501


        :return: The book_max_slots of this Item.  # noqa: E501
        :rtype: int
        """
        return self._book_max_slots

    @book_max_slots.setter
    def book_max_slots(self, book_max_slots):
        """Sets the book_max_slots of this Item.


        :param book_max_slots: The book_max_slots of this Item.  # noqa: E501
        :type: int
        """

        self._book_max_slots = book_max_slots

    @property
    def book_can_overlap(self):
        """Gets the book_can_overlap of this Item.  # noqa: E501


        :return: The book_can_overlap of this Item.  # noqa: E501
        :rtype: int
        """
        return self._book_can_overlap

    @book_can_overlap.setter
    def book_can_overlap(self, book_can_overlap):
        """Sets the book_can_overlap of this Item.


        :param book_can_overlap: The book_can_overlap of this Item.  # noqa: E501
        :type: int
        """

        self._book_can_overlap = book_can_overlap

    @property
    def book_users_can_in_past(self):
        """Gets the book_users_can_in_past of this Item.  # noqa: E501


        :return: The book_users_can_in_past of this Item.  # noqa: E501
        :rtype: int
        """
        return self._book_users_can_in_past

    @book_users_can_in_past.setter
    def book_users_can_in_past(self, book_users_can_in_past):
        """Sets the book_users_can_in_past of this Item.


        :param book_users_can_in_past: The book_users_can_in_past of this Item.  # noqa: E501
        :type: int
        """

        self._book_users_can_in_past = book_users_can_in_past

    @property
    def book_is_cancellable(self):
        """Gets the book_is_cancellable of this Item.  # noqa: E501


        :return: The book_is_cancellable of this Item.  # noqa: E501
        :rtype: int
        """
        return self._book_is_cancellable

    @book_is_cancellable.setter
    def book_is_cancellable(self, book_is_cancellable):
        """Sets the book_is_cancellable of this Item.


        :param book_is_cancellable: The book_is_cancellable of this Item.  # noqa: E501
        :type: int
        """

        self._book_is_cancellable = book_is_cancellable

    @property
    def book_cancel_minutes(self):
        """Gets the book_cancel_minutes of this Item.  # noqa: E501


        :return: The book_cancel_minutes of this Item.  # noqa: E501
        :rtype: int
        """
        return self._book_cancel_minutes

    @book_cancel_minutes.setter
    def book_cancel_minutes(self, book_cancel_minutes):
        """Sets the book_cancel_minutes of this Item.


        :param book_cancel_minutes: The book_cancel_minutes of this Item.  # noqa: E501
        :type: int
        """

        self._book_cancel_minutes = book_cancel_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
