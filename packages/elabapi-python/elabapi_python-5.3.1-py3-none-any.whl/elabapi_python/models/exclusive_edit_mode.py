# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExclusiveEditMode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locked_by': 'int',
        'locked_by_human': 'str',
        'locked_at': 'str',
        'is_stale': 'int'
    }

    attribute_map = {
        'locked_by': 'locked_by',
        'locked_by_human': 'locked_by_human',
        'locked_at': 'locked_at',
        'is_stale': 'is_stale'
    }

    def __init__(self, locked_by=None, locked_by_human=None, locked_at=None, is_stale=None):  # noqa: E501
        """ExclusiveEditMode - a model defined in Swagger"""  # noqa: E501
        self._locked_by = None
        self._locked_by_human = None
        self._locked_at = None
        self._is_stale = None
        self.discriminator = None
        if locked_by is not None:
            self.locked_by = locked_by
        if locked_by_human is not None:
            self.locked_by_human = locked_by_human
        if locked_at is not None:
            self.locked_at = locked_at
        if is_stale is not None:
            self.is_stale = is_stale

    @property
    def locked_by(self):
        """Gets the locked_by of this ExclusiveEditMode.  # noqa: E501

        Userid of the user having exclusive edition rights  # noqa: E501

        :return: The locked_by of this ExclusiveEditMode.  # noqa: E501
        :rtype: int
        """
        return self._locked_by

    @locked_by.setter
    def locked_by(self, locked_by):
        """Sets the locked_by of this ExclusiveEditMode.

        Userid of the user having exclusive edition rights  # noqa: E501

        :param locked_by: The locked_by of this ExclusiveEditMode.  # noqa: E501
        :type: int
        """

        self._locked_by = locked_by

    @property
    def locked_by_human(self):
        """Gets the locked_by_human of this ExclusiveEditMode.  # noqa: E501

        Full name of the user having exclusive edition rights  # noqa: E501

        :return: The locked_by_human of this ExclusiveEditMode.  # noqa: E501
        :rtype: str
        """
        return self._locked_by_human

    @locked_by_human.setter
    def locked_by_human(self, locked_by_human):
        """Sets the locked_by_human of this ExclusiveEditMode.

        Full name of the user having exclusive edition rights  # noqa: E501

        :param locked_by_human: The locked_by_human of this ExclusiveEditMode.  # noqa: E501
        :type: str
        """

        self._locked_by_human = locked_by_human

    @property
    def locked_at(self):
        """Gets the locked_at of this ExclusiveEditMode.  # noqa: E501

        Time when the exclusive edit mode was created  # noqa: E501

        :return: The locked_at of this ExclusiveEditMode.  # noqa: E501
        :rtype: str
        """
        return self._locked_at

    @locked_at.setter
    def locked_at(self, locked_at):
        """Sets the locked_at of this ExclusiveEditMode.

        Time when the exclusive edit mode was created  # noqa: E501

        :param locked_at: The locked_at of this ExclusiveEditMode.  # noqa: E501
        :type: str
        """

        self._locked_at = locked_at

    @property
    def is_stale(self):
        """Gets the is_stale of this ExclusiveEditMode.  # noqa: E501

        Is 1 when the exclusive edit lock is longer than ExclusiveEditMode::EXPIRATION_MINUTES  # noqa: E501

        :return: The is_stale of this ExclusiveEditMode.  # noqa: E501
        :rtype: int
        """
        return self._is_stale

    @is_stale.setter
    def is_stale(self, is_stale):
        """Sets the is_stale of this ExclusiveEditMode.

        Is 1 when the exclusive edit lock is longer than ExclusiveEditMode::EXPIRATION_MINUTES  # noqa: E501

        :param is_stale: The is_stale of this ExclusiveEditMode.  # noqa: E501
        :type: int
        """

        self._is_stale = is_stale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExclusiveEditMode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExclusiveEditMode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
