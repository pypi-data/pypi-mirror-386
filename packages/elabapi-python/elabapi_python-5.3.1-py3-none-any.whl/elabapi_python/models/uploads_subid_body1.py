# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UploadsSubidBody1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'real_name': 'str',
        'comment': 'str',
        'state': 'int'
    }

    attribute_map = {
        'action': 'action',
        'real_name': 'real_name',
        'comment': 'comment',
        'state': 'state'
    }

    def __init__(self, action=None, real_name=None, comment=None, state=None):  # noqa: E501
        """UploadsSubidBody1 - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._real_name = None
        self._comment = None
        self._state = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if real_name is not None:
            self.real_name = real_name
        if comment is not None:
            self.comment = comment
        if state is not None:
            self.state = state

    @property
    def action(self):
        """Gets the action of this UploadsSubidBody1.  # noqa: E501


        :return: The action of this UploadsSubidBody1.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UploadsSubidBody1.


        :param action: The action of this UploadsSubidBody1.  # noqa: E501
        :type: str
        """
        allowed_values = ["update"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def real_name(self):
        """Gets the real_name of this UploadsSubidBody1.  # noqa: E501


        :return: The real_name of this UploadsSubidBody1.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this UploadsSubidBody1.


        :param real_name: The real_name of this UploadsSubidBody1.  # noqa: E501
        :type: str
        """

        self._real_name = real_name

    @property
    def comment(self):
        """Gets the comment of this UploadsSubidBody1.  # noqa: E501


        :return: The comment of this UploadsSubidBody1.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UploadsSubidBody1.


        :param comment: The comment of this UploadsSubidBody1.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def state(self):
        """Gets the state of this UploadsSubidBody1.  # noqa: E501


        :return: The state of this UploadsSubidBody1.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UploadsSubidBody1.


        :param state: The state of this UploadsSubidBody1.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadsSubidBody1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadsSubidBody1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
