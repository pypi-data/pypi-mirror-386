# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StepsSubidBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'is_immutable': 'int',
        'body': 'str',
        'finished': 'int'
    }

    attribute_map = {
        'action': 'action',
        'is_immutable': 'is_immutable',
        'body': 'body',
        'finished': 'finished'
    }

    def __init__(self, action=None, is_immutable=None, body=None, finished=None):  # noqa: E501
        """StepsSubidBody - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._is_immutable = None
        self._body = None
        self._finished = None
        self.discriminator = None
        self.action = action
        if is_immutable is not None:
            self.is_immutable = is_immutable
        if body is not None:
            self.body = body
        if finished is not None:
            self.finished = finished

    @property
    def action(self):
        """Gets the action of this StepsSubidBody.  # noqa: E501


        :return: The action of this StepsSubidBody.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this StepsSubidBody.


        :param action: The action of this StepsSubidBody.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["finish", "notif", "update"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def is_immutable(self):
        """Gets the is_immutable of this StepsSubidBody.  # noqa: E501


        :return: The is_immutable of this StepsSubidBody.  # noqa: E501
        :rtype: int
        """
        return self._is_immutable

    @is_immutable.setter
    def is_immutable(self, is_immutable):
        """Sets the is_immutable of this StepsSubidBody.


        :param is_immutable: The is_immutable of this StepsSubidBody.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_immutable not in allowed_values:
            raise ValueError(
                "Invalid value for `is_immutable` ({0}), must be one of {1}"  # noqa: E501
                .format(is_immutable, allowed_values)
            )

        self._is_immutable = is_immutable

    @property
    def body(self):
        """Gets the body of this StepsSubidBody.  # noqa: E501

        The text content of the step.  # noqa: E501

        :return: The body of this StepsSubidBody.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this StepsSubidBody.

        The text content of the step.  # noqa: E501

        :param body: The body of this StepsSubidBody.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def finished(self):
        """Gets the finished of this StepsSubidBody.  # noqa: E501


        :return: The finished of this StepsSubidBody.  # noqa: E501
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this StepsSubidBody.


        :param finished: The finished of this StepsSubidBody.  # noqa: E501
        :type: int
        """

        self._finished = finished

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StepsSubidBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StepsSubidBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
