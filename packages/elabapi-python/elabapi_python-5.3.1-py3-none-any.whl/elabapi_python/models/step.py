# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Step(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'int',
        'body': 'str',
        'ordering': 'int',
        'finished': 'int',
        'finished_time': 'str',
        'deadline': 'str',
        'deadline_notif': 'int',
        'is_immutable': 'int'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'item_id',
        'body': 'body',
        'ordering': 'ordering',
        'finished': 'finished',
        'finished_time': 'finished_time',
        'deadline': 'deadline',
        'deadline_notif': 'deadline_notif',
        'is_immutable': 'is_immutable'
    }

    def __init__(self, id=None, item_id=None, body=None, ordering=None, finished=None, finished_time=None, deadline=None, deadline_notif=None, is_immutable=None):  # noqa: E501
        """Step - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._body = None
        self._ordering = None
        self._finished = None
        self._finished_time = None
        self._deadline = None
        self._deadline_notif = None
        self._is_immutable = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if body is not None:
            self.body = body
        if ordering is not None:
            self.ordering = ordering
        if finished is not None:
            self.finished = finished
        if finished_time is not None:
            self.finished_time = finished_time
        if deadline is not None:
            self.deadline = deadline
        if deadline_notif is not None:
            self.deadline_notif = deadline_notif
        if is_immutable is not None:
            self.is_immutable = is_immutable

    @property
    def id(self):
        """Gets the id of this Step.  # noqa: E501


        :return: The id of this Step.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Step.


        :param id: The id of this Step.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this Step.  # noqa: E501


        :return: The item_id of this Step.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Step.


        :param item_id: The item_id of this Step.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def body(self):
        """Gets the body of this Step.  # noqa: E501


        :return: The body of this Step.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Step.


        :param body: The body of this Step.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def ordering(self):
        """Gets the ordering of this Step.  # noqa: E501


        :return: The ordering of this Step.  # noqa: E501
        :rtype: int
        """
        return self._ordering

    @ordering.setter
    def ordering(self, ordering):
        """Sets the ordering of this Step.


        :param ordering: The ordering of this Step.  # noqa: E501
        :type: int
        """

        self._ordering = ordering

    @property
    def finished(self):
        """Gets the finished of this Step.  # noqa: E501


        :return: The finished of this Step.  # noqa: E501
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Step.


        :param finished: The finished of this Step.  # noqa: E501
        :type: int
        """

        self._finished = finished

    @property
    def finished_time(self):
        """Gets the finished_time of this Step.  # noqa: E501


        :return: The finished_time of this Step.  # noqa: E501
        :rtype: str
        """
        return self._finished_time

    @finished_time.setter
    def finished_time(self, finished_time):
        """Sets the finished_time of this Step.


        :param finished_time: The finished_time of this Step.  # noqa: E501
        :type: str
        """

        self._finished_time = finished_time

    @property
    def deadline(self):
        """Gets the deadline of this Step.  # noqa: E501


        :return: The deadline of this Step.  # noqa: E501
        :rtype: str
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this Step.


        :param deadline: The deadline of this Step.  # noqa: E501
        :type: str
        """

        self._deadline = deadline

    @property
    def deadline_notif(self):
        """Gets the deadline_notif of this Step.  # noqa: E501


        :return: The deadline_notif of this Step.  # noqa: E501
        :rtype: int
        """
        return self._deadline_notif

    @deadline_notif.setter
    def deadline_notif(self, deadline_notif):
        """Sets the deadline_notif of this Step.


        :param deadline_notif: The deadline_notif of this Step.  # noqa: E501
        :type: int
        """

        self._deadline_notif = deadline_notif

    @property
    def is_immutable(self):
        """Gets the is_immutable of this Step.  # noqa: E501

        Only editable via templates. Immutability persists on derived experiments or resources.  # noqa: E501

        :return: The is_immutable of this Step.  # noqa: E501
        :rtype: int
        """
        return self._is_immutable

    @is_immutable.setter
    def is_immutable(self, is_immutable):
        """Sets the is_immutable of this Step.

        Only editable via templates. Immutability persists on derived experiments or resources.  # noqa: E501

        :param is_immutable: The is_immutable of this Step.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_immutable not in allowed_values:
            raise ValueError(
                "Invalid value for `is_immutable` ({0}), must be one of {1}"  # noqa: E501
                .format(is_immutable, allowed_values)
            )

        self._is_immutable = is_immutable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Step, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Step):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
