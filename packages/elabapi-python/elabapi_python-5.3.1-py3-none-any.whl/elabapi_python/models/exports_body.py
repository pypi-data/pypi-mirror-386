# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExportsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'str',
        'experiments': 'str',
        'items': 'str',
        'experiments_templates': 'str',
        'items_types': 'str',
        'changelog': 'str',
        'json': 'str',
        'pdfa': 'str'
    }

    attribute_map = {
        'format': 'format',
        'experiments': 'experiments',
        'items': 'items',
        'experiments_templates': 'experiments_templates',
        'items_types': 'items_types',
        'changelog': 'changelog',
        'json': 'json',
        'pdfa': 'pdfa'
    }

    def __init__(self, format=None, experiments=None, items=None, experiments_templates=None, items_types=None, changelog=None, json=None, pdfa=None):  # noqa: E501
        """ExportsBody - a model defined in Swagger"""  # noqa: E501
        self._format = None
        self._experiments = None
        self._items = None
        self._experiments_templates = None
        self._items_types = None
        self._changelog = None
        self._json = None
        self._pdfa = None
        self.discriminator = None
        self.format = format
        if experiments is not None:
            self.experiments = experiments
        if items is not None:
            self.items = items
        if experiments_templates is not None:
            self.experiments_templates = experiments_templates
        if items_types is not None:
            self.items_types = items_types
        if changelog is not None:
            self.changelog = changelog
        if json is not None:
            self.json = json
        if pdfa is not None:
            self.pdfa = pdfa

    @property
    def format(self):
        """Gets the format of this ExportsBody.  # noqa: E501

        File format for the export  # noqa: E501

        :return: The format of this ExportsBody.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ExportsBody.

        File format for the export  # noqa: E501

        :param format: The format of this ExportsBody.  # noqa: E501
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["csv", "eln", "json", "pdf", "zip"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def experiments(self):
        """Gets the experiments of this ExportsBody.  # noqa: E501

        Set to \"on\" to include experiments in the export  # noqa: E501

        :return: The experiments of this ExportsBody.  # noqa: E501
        :rtype: str
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this ExportsBody.

        Set to \"on\" to include experiments in the export  # noqa: E501

        :param experiments: The experiments of this ExportsBody.  # noqa: E501
        :type: str
        """

        self._experiments = experiments

    @property
    def items(self):
        """Gets the items of this ExportsBody.  # noqa: E501

        Set to \"on\" to include resources in the export  # noqa: E501

        :return: The items of this ExportsBody.  # noqa: E501
        :rtype: str
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ExportsBody.

        Set to \"on\" to include resources in the export  # noqa: E501

        :param items: The items of this ExportsBody.  # noqa: E501
        :type: str
        """

        self._items = items

    @property
    def experiments_templates(self):
        """Gets the experiments_templates of this ExportsBody.  # noqa: E501

        Set to \"on\" to include experiments templates in the export  # noqa: E501

        :return: The experiments_templates of this ExportsBody.  # noqa: E501
        :rtype: str
        """
        return self._experiments_templates

    @experiments_templates.setter
    def experiments_templates(self, experiments_templates):
        """Sets the experiments_templates of this ExportsBody.

        Set to \"on\" to include experiments templates in the export  # noqa: E501

        :param experiments_templates: The experiments_templates of this ExportsBody.  # noqa: E501
        :type: str
        """

        self._experiments_templates = experiments_templates

    @property
    def items_types(self):
        """Gets the items_types of this ExportsBody.  # noqa: E501

        Set to \"on\" to include resources categories in the export  # noqa: E501

        :return: The items_types of this ExportsBody.  # noqa: E501
        :rtype: str
        """
        return self._items_types

    @items_types.setter
    def items_types(self, items_types):
        """Sets the items_types of this ExportsBody.

        Set to \"on\" to include resources categories in the export  # noqa: E501

        :param items_types: The items_types of this ExportsBody.  # noqa: E501
        :type: str
        """

        self._items_types = items_types

    @property
    def changelog(self):
        """Gets the changelog of this ExportsBody.  # noqa: E501

        Set to \"on\" to include the changelog in PDF files  # noqa: E501

        :return: The changelog of this ExportsBody.  # noqa: E501
        :rtype: str
        """
        return self._changelog

    @changelog.setter
    def changelog(self, changelog):
        """Sets the changelog of this ExportsBody.

        Set to \"on\" to include the changelog in PDF files  # noqa: E501

        :param changelog: The changelog of this ExportsBody.  # noqa: E501
        :type: str
        """

        self._changelog = changelog

    @property
    def json(self):
        """Gets the json of this ExportsBody.  # noqa: E501

        Set to \"on\" to include a full JSON export in the ZIP archives  # noqa: E501

        :return: The json of this ExportsBody.  # noqa: E501
        :rtype: str
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this ExportsBody.

        Set to \"on\" to include a full JSON export in the ZIP archives  # noqa: E501

        :param json: The json of this ExportsBody.  # noqa: E501
        :type: str
        """

        self._json = json

    @property
    def pdfa(self):
        """Gets the pdfa of this ExportsBody.  # noqa: E501

        Set to \"on\" to create PDF files with the PDF/A specification  # noqa: E501

        :return: The pdfa of this ExportsBody.  # noqa: E501
        :rtype: str
        """
        return self._pdfa

    @pdfa.setter
    def pdfa(self, pdfa):
        """Sets the pdfa of this ExportsBody.

        Set to \"on\" to create PDF files with the PDF/A specification  # noqa: E501

        :param pdfa: The pdfa of this ExportsBody.  # noqa: E501
        :type: str
        """

        self._pdfa = pdfa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
