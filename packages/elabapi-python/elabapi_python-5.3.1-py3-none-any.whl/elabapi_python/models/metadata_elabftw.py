# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataElabftw(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_main_text': 'bool',
        'extra_fields_groups': 'list[MetadataElabftwExtraFieldsGroups]'
    }

    attribute_map = {
        'display_main_text': 'display_main_text',
        'extra_fields_groups': 'extra_fields_groups'
    }

    def __init__(self, display_main_text=True, extra_fields_groups=None):  # noqa: E501
        """MetadataElabftw - a model defined in Swagger"""  # noqa: E501
        self._display_main_text = None
        self._extra_fields_groups = None
        self.discriminator = None
        if display_main_text is not None:
            self.display_main_text = display_main_text
        if extra_fields_groups is not None:
            self.extra_fields_groups = extra_fields_groups

    @property
    def display_main_text(self):
        """Gets the display_main_text of this MetadataElabftw.  # noqa: E501

        The main text will be hidden if set to false. Use it on templates to force the use of extra fields, and only them for the reports.  # noqa: E501

        :return: The display_main_text of this MetadataElabftw.  # noqa: E501
        :rtype: bool
        """
        return self._display_main_text

    @display_main_text.setter
    def display_main_text(self, display_main_text):
        """Sets the display_main_text of this MetadataElabftw.

        The main text will be hidden if set to false. Use it on templates to force the use of extra fields, and only them for the reports.  # noqa: E501

        :param display_main_text: The display_main_text of this MetadataElabftw.  # noqa: E501
        :type: bool
        """

        self._display_main_text = display_main_text

    @property
    def extra_fields_groups(self):
        """Gets the extra_fields_groups of this MetadataElabftw.  # noqa: E501

        This array stores the extra fields groups  # noqa: E501

        :return: The extra_fields_groups of this MetadataElabftw.  # noqa: E501
        :rtype: list[MetadataElabftwExtraFieldsGroups]
        """
        return self._extra_fields_groups

    @extra_fields_groups.setter
    def extra_fields_groups(self, extra_fields_groups):
        """Sets the extra_fields_groups of this MetadataElabftw.

        This array stores the extra fields groups  # noqa: E501

        :param extra_fields_groups: The extra_fields_groups of this MetadataElabftw.  # noqa: E501
        :type: list[MetadataElabftwExtraFieldsGroups]
        """

        self._extra_fields_groups = extra_fields_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataElabftw, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataElabftw):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
