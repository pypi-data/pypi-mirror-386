# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntityEditable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'str',
        'canread': 'str',
        'canwrite': 'str',
        'category': 'int',
        '_date': 'str',
        'content_type': 'int',
        'custom_id': 'int',
        'metadata': 'Metadata',
        'rating': 'int',
        'state': 'int',
        'status': 'int',
        'tags': 'list[str]',
        'title': 'str',
        'template': 'int',
        'userid': 'int'
    }

    attribute_map = {
        'body': 'body',
        'canread': 'canread',
        'canwrite': 'canwrite',
        'category': 'category',
        '_date': 'date',
        'content_type': 'content_type',
        'custom_id': 'custom_id',
        'metadata': 'metadata',
        'rating': 'rating',
        'state': 'state',
        'status': 'status',
        'tags': 'tags',
        'title': 'title',
        'template': 'template',
        'userid': 'userid'
    }

    def __init__(self, body=None, canread='{"base": 20, "teams": [], "users": [1], "teamgroups": [1]}', canwrite='{"base": 20, "teams": [], "users": [1], "teamgroups": [1]}', category=None, _date=None, content_type=None, custom_id=None, metadata=None, rating=0, state=None, status=None, tags=None, title='Untitled', template=-1, userid=None):  # noqa: E501
        """EntityEditable - a model defined in Swagger"""  # noqa: E501
        self._body = None
        self._canread = None
        self._canwrite = None
        self._category = None
        self.__date = None
        self._content_type = None
        self._custom_id = None
        self._metadata = None
        self._rating = None
        self._state = None
        self._status = None
        self._tags = None
        self._title = None
        self._template = None
        self._userid = None
        self.discriminator = None
        if body is not None:
            self.body = body
        if canread is not None:
            self.canread = canread
        if canwrite is not None:
            self.canwrite = canwrite
        if category is not None:
            self.category = category
        if _date is not None:
            self._date = _date
        if content_type is not None:
            self.content_type = content_type
        if custom_id is not None:
            self.custom_id = custom_id
        if metadata is not None:
            self.metadata = metadata
        if rating is not None:
            self.rating = rating
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if title is not None:
            self.title = title
        if template is not None:
            self.template = template
        if userid is not None:
            self.userid = userid

    @property
    def body(self):
        """Gets the body of this EntityEditable.  # noqa: E501

        The main text content (HTML or Markdown)  # noqa: E501

        :return: The body of this EntityEditable.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EntityEditable.

        The main text content (HTML or Markdown)  # noqa: E501

        :param body: The body of this EntityEditable.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def canread(self):
        """Gets the canread of this EntityEditable.  # noqa: E501

        JSON permissions for reading the entry  # noqa: E501

        :return: The canread of this EntityEditable.  # noqa: E501
        :rtype: str
        """
        return self._canread

    @canread.setter
    def canread(self, canread):
        """Sets the canread of this EntityEditable.

        JSON permissions for reading the entry  # noqa: E501

        :param canread: The canread of this EntityEditable.  # noqa: E501
        :type: str
        """

        self._canread = canread

    @property
    def canwrite(self):
        """Gets the canwrite of this EntityEditable.  # noqa: E501

        JSON permissions for writing the entry  # noqa: E501

        :return: The canwrite of this EntityEditable.  # noqa: E501
        :rtype: str
        """
        return self._canwrite

    @canwrite.setter
    def canwrite(self, canwrite):
        """Sets the canwrite of this EntityEditable.

        JSON permissions for writing the entry  # noqa: E501

        :param canwrite: The canwrite of this EntityEditable.  # noqa: E501
        :type: str
        """

        self._canwrite = canwrite

    @property
    def category(self):
        """Gets the category of this EntityEditable.  # noqa: E501

        The experiment category ID  # noqa: E501

        :return: The category of this EntityEditable.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EntityEditable.

        The experiment category ID  # noqa: E501

        :param category: The category of this EntityEditable.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def _date(self):
        """Gets the _date of this EntityEditable.  # noqa: E501


        :return: The _date of this EntityEditable.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EntityEditable.


        :param _date: The _date of this EntityEditable.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def content_type(self):
        """Gets the content_type of this EntityEditable.  # noqa: E501

        Set the content type for main text: 1 for HTML (default) and 2 for Markdown   # noqa: E501

        :return: The content_type of this EntityEditable.  # noqa: E501
        :rtype: int
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this EntityEditable.

        Set the content type for main text: 1 for HTML (default) and 2 for Markdown   # noqa: E501

        :param content_type: The content_type of this EntityEditable.  # noqa: E501
        :type: int
        """

        self._content_type = content_type

    @property
    def custom_id(self):
        """Gets the custom_id of this EntityEditable.  # noqa: E501

        Cannot be negative. Can be reset with \"0\", null or empty string.  # noqa: E501

        :return: The custom_id of this EntityEditable.  # noqa: E501
        :rtype: int
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id):
        """Sets the custom_id of this EntityEditable.

        Cannot be negative. Can be reset with \"0\", null or empty string.  # noqa: E501

        :param custom_id: The custom_id of this EntityEditable.  # noqa: E501
        :type: int
        """

        self._custom_id = custom_id

    @property
    def metadata(self):
        """Gets the metadata of this EntityEditable.  # noqa: E501


        :return: The metadata of this EntityEditable.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this EntityEditable.


        :param metadata: The metadata of this EntityEditable.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def rating(self):
        """Gets the rating of this EntityEditable.  # noqa: E501

        Rating value from 0 to 5  # noqa: E501

        :return: The rating of this EntityEditable.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this EntityEditable.

        Rating value from 0 to 5  # noqa: E501

        :param rating: The rating of this EntityEditable.  # noqa: E501
        :type: int
        """

        self._rating = rating

    @property
    def state(self):
        """Gets the state of this EntityEditable.  # noqa: E501


        :return: The state of this EntityEditable.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EntityEditable.


        :param state: The state of this EntityEditable.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this EntityEditable.  # noqa: E501

        Cannot be negative nor empty string. Can be reset with \"0\" and null.  # noqa: E501

        :return: The status of this EntityEditable.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EntityEditable.

        Cannot be negative nor empty string. Can be reset with \"0\" and null.  # noqa: E501

        :param status: The status of this EntityEditable.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this EntityEditable.  # noqa: E501

        An array of tags to assign to the created entry.   # noqa: E501

        :return: The tags of this EntityEditable.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EntityEditable.

        An array of tags to assign to the created entry.   # noqa: E501

        :param tags: The tags of this EntityEditable.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this EntityEditable.  # noqa: E501

        The title of the entry  # noqa: E501

        :return: The title of this EntityEditable.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EntityEditable.

        The title of the entry  # noqa: E501

        :param title: The title of this EntityEditable.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def template(self):
        """Gets the template of this EntityEditable.  # noqa: E501

        The template id to use, or 0 to use the common team template, or -1 to have an empty body.   # noqa: E501

        :return: The template of this EntityEditable.  # noqa: E501
        :rtype: int
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this EntityEditable.

        The template id to use, or 0 to use the common team template, or -1 to have an empty body.   # noqa: E501

        :param template: The template of this EntityEditable.  # noqa: E501
        :type: int
        """

        self._template = template

    @property
    def userid(self):
        """Gets the userid of this EntityEditable.  # noqa: E501

        Userid of entity's owner  # noqa: E501

        :return: The userid of this EntityEditable.  # noqa: E501
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this EntityEditable.

        Userid of entity's owner  # noqa: E501

        :param userid: The userid of this EntityEditable.  # noqa: E501
        :type: int
        """

        self._userid = userid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityEditable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityEditable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
