# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_extensions': 'list[str]',
        'max_filesize': 'int',
        'max_upload_size': 'str',
        'max_upload_time': 'int'
    }

    attribute_map = {
        'allowed_extensions': 'allowed_extensions',
        'max_filesize': 'max_filesize',
        'max_upload_size': 'max_upload_size',
        'max_upload_time': 'max_upload_time'
    }

    def __init__(self, allowed_extensions=None, max_filesize=None, max_upload_size=None, max_upload_time=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._allowed_extensions = None
        self._max_filesize = None
        self._max_upload_size = None
        self._max_upload_time = None
        self.discriminator = None
        if allowed_extensions is not None:
            self.allowed_extensions = allowed_extensions
        if max_filesize is not None:
            self.max_filesize = max_filesize
        if max_upload_size is not None:
            self.max_upload_size = max_upload_size
        if max_upload_time is not None:
            self.max_upload_time = max_upload_time

    @property
    def allowed_extensions(self):
        """Gets the allowed_extensions of this InlineResponse2001.  # noqa: E501

        allowlist of file extensions accepted for import  # noqa: E501

        :return: The allowed_extensions of this InlineResponse2001.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_extensions

    @allowed_extensions.setter
    def allowed_extensions(self, allowed_extensions):
        """Sets the allowed_extensions of this InlineResponse2001.

        allowlist of file extensions accepted for import  # noqa: E501

        :param allowed_extensions: The allowed_extensions of this InlineResponse2001.  # noqa: E501
        :type: list[str]
        """

        self._allowed_extensions = allowed_extensions

    @property
    def max_filesize(self):
        """Gets the max_filesize of this InlineResponse2001.  # noqa: E501

        maximum size of an uploaded file in bytes  # noqa: E501

        :return: The max_filesize of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._max_filesize

    @max_filesize.setter
    def max_filesize(self, max_filesize):
        """Sets the max_filesize of this InlineResponse2001.

        maximum size of an uploaded file in bytes  # noqa: E501

        :param max_filesize: The max_filesize of this InlineResponse2001.  # noqa: E501
        :type: int
        """

        self._max_filesize = max_filesize

    @property
    def max_upload_size(self):
        """Gets the max_upload_size of this InlineResponse2001.  # noqa: E501

        value of MAX_UPLOAD_SIZE env parameter  # noqa: E501

        :return: The max_upload_size of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._max_upload_size

    @max_upload_size.setter
    def max_upload_size(self, max_upload_size):
        """Sets the max_upload_size of this InlineResponse2001.

        value of MAX_UPLOAD_SIZE env parameter  # noqa: E501

        :param max_upload_size: The max_upload_size of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._max_upload_size = max_upload_size

    @property
    def max_upload_time(self):
        """Gets the max_upload_time of this InlineResponse2001.  # noqa: E501

        value of MAX_UPLOAD_TIME env parameter  # noqa: E501

        :return: The max_upload_time of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._max_upload_time

    @max_upload_time.setter
    def max_upload_time(self, max_upload_time):
        """Sets the max_upload_time of this InlineResponse2001.

        value of MAX_UPLOAD_TIME env parameter  # noqa: E501

        :param max_upload_time: The max_upload_time of this InlineResponse2001.  # noqa: E501
        :type: int
        """

        self._max_upload_time = max_upload_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
