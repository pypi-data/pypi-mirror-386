# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Export(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'str',
        'requester_userid': 'int',
        'state': 'int',
        'long_name': 'str',
        'filesize': 'int',
        'modified_at': 'str',
        'real_name': 'str',
        'team': 'int',
        'changelog': 'int',
        'pdfa': 'int',
        'json': 'int',
        'hash': 'str',
        'hash_algo': 'str',
        'experiments': 'int',
        'items': 'int',
        'experiments_templates': 'int',
        'items_types': 'int',
        'format': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'requester_userid': 'requester_userid',
        'state': 'state',
        'long_name': 'long_name',
        'filesize': 'filesize',
        'modified_at': 'modified_at',
        'real_name': 'real_name',
        'team': 'team',
        'changelog': 'changelog',
        'pdfa': 'pdfa',
        'json': 'json',
        'hash': 'hash',
        'hash_algo': 'hash_algo',
        'experiments': 'experiments',
        'items': 'items',
        'experiments_templates': 'experiments_templates',
        'items_types': 'items_types',
        'format': 'format'
    }

    def __init__(self, id=None, created_at=None, requester_userid=None, state=None, long_name=None, filesize=None, modified_at=None, real_name=None, team=None, changelog=None, pdfa=None, json=None, hash=None, hash_algo=None, experiments=None, items=None, experiments_templates=None, items_types=None, format=None):  # noqa: E501
        """Export - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._requester_userid = None
        self._state = None
        self._long_name = None
        self._filesize = None
        self._modified_at = None
        self._real_name = None
        self._team = None
        self._changelog = None
        self._pdfa = None
        self._json = None
        self._hash = None
        self._hash_algo = None
        self._experiments = None
        self._items = None
        self._experiments_templates = None
        self._items_types = None
        self._format = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if requester_userid is not None:
            self.requester_userid = requester_userid
        if state is not None:
            self.state = state
        if long_name is not None:
            self.long_name = long_name
        if filesize is not None:
            self.filesize = filesize
        if modified_at is not None:
            self.modified_at = modified_at
        if real_name is not None:
            self.real_name = real_name
        if team is not None:
            self.team = team
        if changelog is not None:
            self.changelog = changelog
        if pdfa is not None:
            self.pdfa = pdfa
        if json is not None:
            self.json = json
        if hash is not None:
            self.hash = hash
        if hash_algo is not None:
            self.hash_algo = hash_algo
        if experiments is not None:
            self.experiments = experiments
        if items is not None:
            self.items = items
        if experiments_templates is not None:
            self.experiments_templates = experiments_templates
        if items_types is not None:
            self.items_types = items_types
        if format is not None:
            self.format = format

    @property
    def id(self):
        """Gets the id of this Export.  # noqa: E501


        :return: The id of this Export.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Export.


        :param id: The id of this Export.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Export.  # noqa: E501


        :return: The created_at of this Export.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Export.


        :param created_at: The created_at of this Export.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def requester_userid(self):
        """Gets the requester_userid of this Export.  # noqa: E501


        :return: The requester_userid of this Export.  # noqa: E501
        :rtype: int
        """
        return self._requester_userid

    @requester_userid.setter
    def requester_userid(self, requester_userid):
        """Sets the requester_userid of this Export.


        :param requester_userid: The requester_userid of this Export.  # noqa: E501
        :type: int
        """

        self._requester_userid = requester_userid

    @property
    def state(self):
        """Gets the state of this Export.  # noqa: E501


        :return: The state of this Export.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Export.


        :param state: The state of this Export.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def long_name(self):
        """Gets the long_name of this Export.  # noqa: E501


        :return: The long_name of this Export.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this Export.


        :param long_name: The long_name of this Export.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def filesize(self):
        """Gets the filesize of this Export.  # noqa: E501


        :return: The filesize of this Export.  # noqa: E501
        :rtype: int
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this Export.


        :param filesize: The filesize of this Export.  # noqa: E501
        :type: int
        """

        self._filesize = filesize

    @property
    def modified_at(self):
        """Gets the modified_at of this Export.  # noqa: E501


        :return: The modified_at of this Export.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Export.


        :param modified_at: The modified_at of this Export.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def real_name(self):
        """Gets the real_name of this Export.  # noqa: E501


        :return: The real_name of this Export.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this Export.


        :param real_name: The real_name of this Export.  # noqa: E501
        :type: str
        """

        self._real_name = real_name

    @property
    def team(self):
        """Gets the team of this Export.  # noqa: E501


        :return: The team of this Export.  # noqa: E501
        :rtype: int
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Export.


        :param team: The team of this Export.  # noqa: E501
        :type: int
        """

        self._team = team

    @property
    def changelog(self):
        """Gets the changelog of this Export.  # noqa: E501


        :return: The changelog of this Export.  # noqa: E501
        :rtype: int
        """
        return self._changelog

    @changelog.setter
    def changelog(self, changelog):
        """Sets the changelog of this Export.


        :param changelog: The changelog of this Export.  # noqa: E501
        :type: int
        """

        self._changelog = changelog

    @property
    def pdfa(self):
        """Gets the pdfa of this Export.  # noqa: E501


        :return: The pdfa of this Export.  # noqa: E501
        :rtype: int
        """
        return self._pdfa

    @pdfa.setter
    def pdfa(self, pdfa):
        """Sets the pdfa of this Export.


        :param pdfa: The pdfa of this Export.  # noqa: E501
        :type: int
        """

        self._pdfa = pdfa

    @property
    def json(self):
        """Gets the json of this Export.  # noqa: E501


        :return: The json of this Export.  # noqa: E501
        :rtype: int
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this Export.


        :param json: The json of this Export.  # noqa: E501
        :type: int
        """

        self._json = json

    @property
    def hash(self):
        """Gets the hash of this Export.  # noqa: E501


        :return: The hash of this Export.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Export.


        :param hash: The hash of this Export.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def hash_algo(self):
        """Gets the hash_algo of this Export.  # noqa: E501


        :return: The hash_algo of this Export.  # noqa: E501
        :rtype: str
        """
        return self._hash_algo

    @hash_algo.setter
    def hash_algo(self, hash_algo):
        """Sets the hash_algo of this Export.


        :param hash_algo: The hash_algo of this Export.  # noqa: E501
        :type: str
        """

        self._hash_algo = hash_algo

    @property
    def experiments(self):
        """Gets the experiments of this Export.  # noqa: E501


        :return: The experiments of this Export.  # noqa: E501
        :rtype: int
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this Export.


        :param experiments: The experiments of this Export.  # noqa: E501
        :type: int
        """

        self._experiments = experiments

    @property
    def items(self):
        """Gets the items of this Export.  # noqa: E501


        :return: The items of this Export.  # noqa: E501
        :rtype: int
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Export.


        :param items: The items of this Export.  # noqa: E501
        :type: int
        """

        self._items = items

    @property
    def experiments_templates(self):
        """Gets the experiments_templates of this Export.  # noqa: E501


        :return: The experiments_templates of this Export.  # noqa: E501
        :rtype: int
        """
        return self._experiments_templates

    @experiments_templates.setter
    def experiments_templates(self, experiments_templates):
        """Sets the experiments_templates of this Export.


        :param experiments_templates: The experiments_templates of this Export.  # noqa: E501
        :type: int
        """

        self._experiments_templates = experiments_templates

    @property
    def items_types(self):
        """Gets the items_types of this Export.  # noqa: E501


        :return: The items_types of this Export.  # noqa: E501
        :rtype: int
        """
        return self._items_types

    @items_types.setter
    def items_types(self, items_types):
        """Sets the items_types of this Export.


        :param items_types: The items_types of this Export.  # noqa: E501
        :type: int
        """

        self._items_types = items_types

    @property
    def format(self):
        """Gets the format of this Export.  # noqa: E501


        :return: The format of this Export.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Export.


        :param format: The format of this Export.  # noqa: E501
        :type: str
        """

        self._format = format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Export, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Export):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
