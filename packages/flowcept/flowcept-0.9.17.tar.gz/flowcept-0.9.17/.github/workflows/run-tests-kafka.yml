name: (With Mongo) Tests on Kafka MQ
on:
  pull_request:
    branches: [ "dev", "main" ]
    types: [opened, synchronize, reopened]
#on:
#  push:

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    env:
      MONGO_ENABLED: true
      LMDB_ENABLED: false
    timeout-minutes: 40
    if: "!contains(github.event.head_commit.message, 'CI Bot')"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # cache: "pip"

      - name: Run docker compose
        run: docker compose -f deployment/compose-kafka.yml up -d

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Show Python version
        run: python --version && pip --version

      - name: Test examples
        run: bash .github/workflows/run_examples.sh examples true # with mongo

      - name: Install all dependencies
        run: |
          python -m pip install .[all]
          python -m pip install .[ml_dev]

      - name: Check liveness
        run: |
          export MQ_TYPE=kafka
          export MQ_PORT=9092
          python -c 'from flowcept.configs import MQ_TYPE, MQ_PORT; print(f"MQ_TYPE={MQ_TYPE}"); print(f"MQ_PORT={MQ_PORT}")'
          python -c 'from flowcept import Flowcept; assert Flowcept.services_alive()'

      - name: Run tests with kafka
        run: |
          export MQ_TYPE=kafka
          export MQ_PORT=9092
          make tests

      - name: Test notebooks
        run: pytest --nbmake "notebooks/" --nbmake-timeout=600 --ignore=notebooks/dask_from_CLI.ipynb --ignore=notebooks/tensorboard.ipynb

      - name: Stop services
        run: docker compose -f deployment/compose-kafka.yml down

      - name: Clean up
        run: |
          make clean
          test -d /home/runner/runners/ && find /home/runner/runners/ -type f -name "*.log" -exec sh -c 'echo {}; >"{}"' \; || true
          docker image prune -a -f