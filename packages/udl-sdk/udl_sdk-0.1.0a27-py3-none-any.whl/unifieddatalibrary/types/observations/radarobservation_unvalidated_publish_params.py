# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from ..._types import SequenceNotStr
from ..._utils import PropertyInfo

__all__ = ["RadarobservationUnvalidatedPublishParams", "Body"]


class RadarobservationUnvalidatedPublishParams(TypedDict, total=False):
    body: Required[Iterable[Body]]


class Body(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    ob_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="obTime", format="iso8601")]]
    """Ob detection time in ISO 8601 UTC with microsecond precision."""

    source: Required[str]
    """Source of the data."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    azimuth: float
    """azimuth angle in degrees and topocentric frame."""

    azimuth_bias: Annotated[float, PropertyInfo(alias="azimuthBias")]
    """Sensor azimuth angle bias in degrees."""

    azimuth_measured: Annotated[bool, PropertyInfo(alias="azimuthMeasured")]
    """
    Optional flag indicating whether the azimuth value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    azimuth_rate: Annotated[float, PropertyInfo(alias="azimuthRate")]
    """Rate of change of the line of sight azimuth in degrees per second."""

    azimuth_unc: Annotated[float, PropertyInfo(alias="azimuthUnc")]
    """
    One sigma uncertainty in the line of sight azimuth angle measurement, in
    degrees.
    """

    beam: float
    """ID of the beam that produced this observation."""

    declination: float
    """Line of sight declination angle in degrees and J2000 coordinate frame."""

    declination_measured: Annotated[bool, PropertyInfo(alias="declinationMeasured")]
    """
    Optional flag indicating whether the declination value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    descriptor: str
    """Optional source-provided and searchable metadata or descriptor of the data."""

    doppler: float
    """Corrected doppler measurement in meters per second."""

    doppler_unc: Annotated[float, PropertyInfo(alias="dopplerUnc")]
    """One sigma uncertainty in the corrected doppler measurement, in meters/second."""

    elevation: float
    """Line of sight elevation in degrees and topocentric frame."""

    elevation_bias: Annotated[float, PropertyInfo(alias="elevationBias")]
    """Sensor elevation bias in degrees."""

    elevation_measured: Annotated[bool, PropertyInfo(alias="elevationMeasured")]
    """
    Optional flag indicating whether the elevation value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    elevation_rate: Annotated[float, PropertyInfo(alias="elevationRate")]
    """Rate of change of the line of sight elevation in degrees per second."""

    elevation_unc: Annotated[float, PropertyInfo(alias="elevationUnc")]
    """
    One sigma uncertainty in the line of sight elevation angle measurement, in
    degrees.
    """

    id_sensor: Annotated[str, PropertyInfo(alias="idSensor")]
    """Unique identifier of the reporting sensor."""

    ob_position: Annotated[str, PropertyInfo(alias="obPosition")]
    """The position of this observation within a track (FENCE, FIRST, IN, LAST,
    SINGLE).

    This identifier is optional and, if null, no assumption should be made regarding
    whether other observations may or may not exist to compose a track.
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """
    Optional identifier provided by observation source to indicate the target
    onorbit object of this observation. This may be an internal identifier and not
    necessarily a valid satellite number.
    """

    orig_sensor_id: Annotated[str, PropertyInfo(alias="origSensorId")]
    """
    Optional identifier provided by observation source to indicate the sensor
    identifier which produced this observation. This may be an internal identifier
    and not necessarily a valid sensor ID.
    """

    orthogonal_rcs: Annotated[float, PropertyInfo(alias="orthogonalRcs")]
    """Radar cross section in meters squared for orthogonal polarization."""

    orthogonal_rcs_unc: Annotated[float, PropertyInfo(alias="orthogonalRcsUnc")]
    """
    one sigma uncertainty in orthogonal polarization Radar Cross Section, in
    meters^2.
    """

    ra: float
    """Line of sight right ascension in degrees and J2000 coordinate frame."""

    ra_measured: Annotated[bool, PropertyInfo(alias="raMeasured")]
    """
    Optional flag indicating whether the ra value is measured (true) or computed
    (false). If null, consumers may consult the data provider for information
    regarding whether the corresponding value is computed or measured.
    """

    range: float
    """Target range in km."""

    range_accel: Annotated[float, PropertyInfo(alias="rangeAccel")]
    """Range accelaration in km/s2."""

    range_accel_unc: Annotated[float, PropertyInfo(alias="rangeAccelUnc")]
    """
    One sigma uncertainty in the range acceleration measurement, in
    kilometers/(second^2).
    """

    range_bias: Annotated[float, PropertyInfo(alias="rangeBias")]
    """Sensor range bias in km."""

    range_measured: Annotated[bool, PropertyInfo(alias="rangeMeasured")]
    """
    Optional flag indicating whether the range value is measured (true) or computed
    (false). If null, consumers may consult the data provider for information
    regarding whether the corresponding value is computed or measured.
    """

    range_rate: Annotated[float, PropertyInfo(alias="rangeRate")]
    """Rate of change of the line of sight range in km/sec."""

    range_rate_measured: Annotated[bool, PropertyInfo(alias="rangeRateMeasured")]
    """
    Optional flag indicating whether the rangeRate value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    range_rate_unc: Annotated[float, PropertyInfo(alias="rangeRateUnc")]
    """One sigma uncertainty in the range rate measurement, in kilometers/second."""

    range_unc: Annotated[float, PropertyInfo(alias="rangeUnc")]
    """One sigma uncertainty in the range measurement, in kilometers."""

    raw_file_uri: Annotated[str, PropertyInfo(alias="rawFileURI")]
    """
    Optional URI location in the document repository of the raw file parsed by the
    system to produce this record. To download the raw file, prepend
    https://udl-hostname/scs/download?id= to this value.
    """

    rcs: float
    """Radar cross section in meters squared for polarization principal."""

    rcs_unc: Annotated[float, PropertyInfo(alias="rcsUnc")]
    """
    one sigma uncertainty in principal polarization Radar Cross Section, in
    meters^2.
    """

    sat_no: Annotated[int, PropertyInfo(alias="satNo")]
    """Satellite/Catalog number of the target on-orbit object."""

    sen_reference_frame: Annotated[
        Literal["J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF"], PropertyInfo(alias="senReferenceFrame")
    ]
    """The reference frame of the observing sensor state.

    If the senReferenceFrame is null it is assumed to be J2000.
    """

    senx: float
    """
    Sensor x position in km at obTime (if mobile/onorbit) in the specified
    senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed.
    """

    seny: float
    """
    Sensor y position in km at obTime (if mobile/onorbit) in the specified
    senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed.
    """

    senz: float
    """
    Sensor z position in km at obTime (if mobile/onorbit) in the specified
    senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed.
    """

    snr: float
    """Signal to noise ratio, in dB."""

    tags: SequenceNotStr[str]
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    task_id: Annotated[str, PropertyInfo(alias="taskId")]
    """
    Optional identifier to indicate the specific tasking which produced this
    observation.
    """

    timing_bias: Annotated[float, PropertyInfo(alias="timingBias")]
    """Sensor timing bias in seconds."""

    track_id: Annotated[str, PropertyInfo(alias="trackId")]
    """Optional identifier of the track to which this observation belongs."""

    tracking_state: Annotated[str, PropertyInfo(alias="trackingState")]
    """
    The beam type (or tracking state) in use at the time of collection of this
    observation. Values include:

    INIT ACQ WITH INIT VALUES: Initial acquisition based on predefined initial
    values such as position, velocity, or other specific parameters.

    INIT ACQ: Initial acquisition when no prior information or initial values such
    as position or velocity are available.

    TRACKING SINGLE BEAM: Continuously tracks and monitors a single target using one
    specific radar beam.

    TRACKING SEQUENTIAL ROVING: Sequentially tracks different targets or areas by
    "roving" from one sector to the next in a systematic order.

    SELF ACQ WITH INIT VALUES: Autonomously acquires targets using predefined
    starting parameters or initial values.

    SELF ACQ: Automatically detects and locks onto targets without the need for
    predefined initial settings.

    NON-TRACKING: Non-tracking.
    """

    transaction_id: Annotated[str, PropertyInfo(alias="transactionId")]
    """
    Optional identifier to track a commercial or marketplace transaction executed to
    produce this data.
    """

    uct: bool
    """
    Boolean indicating this observation is part of an uncorrelated track or was
    unable to be correlated to a known object. This flag should only be set to true
    by data providers after an attempt to correlate to an on-orbit object was made
    and failed. If unable to correlate, the 'origObjectId' field may be populated
    with an internal data provider specific identifier.
    """

    x: float
    """X position of target in km in J2000 coordinate frame."""

    xvel: float
    """X velocity of target in km/sec in J2000 coordinate frame."""

    y: float
    """Y position of target in km in J2000 coordinate frame."""

    yvel: float
    """Y velocity of target in km/sec in J2000 coordinate frame."""

    z: float
    """Z position of target in km in J2000 coordinate frame."""

    zvel: float
    """Z velocity of target in km/sec in J2000 coordinate frame."""
