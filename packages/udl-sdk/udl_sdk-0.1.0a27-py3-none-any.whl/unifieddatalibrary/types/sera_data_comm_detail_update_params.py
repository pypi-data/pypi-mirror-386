# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo

__all__ = ["SeraDataCommDetailUpdateParams"]


class SeraDataCommDetailUpdateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    source: Required[str]
    """Source of the data."""

    body_id: Annotated[str, PropertyInfo(alias="id")]
    """Unique identifier of the record, auto-generated by the system."""

    band: str
    """Name of the band of this RF range (e.g.

    X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more
    details and descriptions of each band name.
    """

    bandwidth: float
    """Comm bandwidth in Mhz."""

    eirp: float
    """Effective isotropic radiated power in dB."""

    est_hts_total_capacity: Annotated[float, PropertyInfo(alias="estHtsTotalCapacity")]
    """Comm estimated HtsTotalCapacity in Gbps."""

    est_hts_total_user_downlink_bandwidth_per_beam: Annotated[
        float, PropertyInfo(alias="estHtsTotalUserDownlinkBandwidthPerBeam")
    ]
    """Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz."""

    est_hts_total_user_uplink_bandwidth_per_beam: Annotated[
        float, PropertyInfo(alias="estHtsTotalUserUplinkBandwidthPerBeam")
    ]
    """Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz."""

    gateway_downlink_from: Annotated[float, PropertyInfo(alias="gatewayDownlinkFrom")]
    """Comm gatewayDownlinkFrom in Ghz."""

    gateway_downlink_to: Annotated[float, PropertyInfo(alias="gatewayDownlinkTo")]
    """Comm gatewayDownlinkTo in Ghz."""

    gateway_uplink_from: Annotated[float, PropertyInfo(alias="gatewayUplinkFrom")]
    """Comm gatewayUplinkFrom in Ghz."""

    gateway_uplink_to: Annotated[float, PropertyInfo(alias="gatewayUplinkTo")]
    """Comm gatewayUplinkTo in Ghz."""

    hosted_for_company_org_id: Annotated[str, PropertyInfo(alias="hostedForCompanyOrgId")]
    """Comm hostedForCompanyOrgId."""

    hts_num_user_spot_beams: Annotated[int, PropertyInfo(alias="htsNumUserSpotBeams")]
    """Comm htsNumUserSpotBeams."""

    hts_user_downlink_bandwidth_per_beam: Annotated[float, PropertyInfo(alias="htsUserDownlinkBandwidthPerBeam")]
    """Comm htsUserDownlinkBandwidthPerBeam in Mhz."""

    hts_user_uplink_bandwidth_per_beam: Annotated[float, PropertyInfo(alias="htsUserUplinkBandwidthPerBeam")]
    """Comm htsUserUplinkBandwidthPerBeam in Mhz."""

    id_comm: Annotated[str, PropertyInfo(alias="idComm")]
    """UUID of the parent Comm record."""

    manufacturer_org_id: Annotated[str, PropertyInfo(alias="manufacturerOrgId")]
    """Comm manufacturerOrgId."""

    num36_mhz_equivalent_transponders: Annotated[int, PropertyInfo(alias="num36MhzEquivalentTransponders")]
    """Comm num36MhzEquivalentTransponders."""

    num_operational_transponders: Annotated[int, PropertyInfo(alias="numOperationalTransponders")]
    """Comm numOperationalTransponders."""

    num_spare_transponders: Annotated[int, PropertyInfo(alias="numSpareTransponders")]
    """Comm numSpareTransponders."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    payload_notes: Annotated[str, PropertyInfo(alias="payloadNotes")]
    """Payload notes."""

    polarization: str
    """Comm polarization."""

    solid_state_power_amp: Annotated[float, PropertyInfo(alias="solidStatePowerAmp")]
    """Solid state power amplifier, in Watts."""

    spacecraft_id: Annotated[str, PropertyInfo(alias="spacecraftId")]
    """Seradata ID of the spacecraft (SeradataSpacecraftDetails ID)."""

    trade_lease_org_id: Annotated[str, PropertyInfo(alias="tradeLeaseOrgId")]
    """Comm tradeLeaseOrgId."""

    traveling_wave_tube_amplifier: Annotated[float, PropertyInfo(alias="travelingWaveTubeAmplifier")]
    """Comm travelingWaveTubeAmplifier in Watts."""

    user_downlink_from: Annotated[float, PropertyInfo(alias="userDownlinkFrom")]
    """Comm userDownlinkFrom in Ghz."""

    user_downlink_to: Annotated[float, PropertyInfo(alias="userDownlinkTo")]
    """Comm userDownlinkTo in Ghz."""

    user_uplink_from: Annotated[float, PropertyInfo(alias="userUplinkFrom")]
    """Comm userUplinkFrom in Ghz."""

    user_uplink_to: Annotated[float, PropertyInfo(alias="userUplinkTo")]
    """Comm userUplinkTo in Ghz."""
