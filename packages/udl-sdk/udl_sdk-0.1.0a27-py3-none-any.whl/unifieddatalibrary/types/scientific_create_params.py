# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo
from .entity_ingest_param import EntityIngestParam

__all__ = ["ScientificCreateParams"]


class ScientificCreateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Sensor name from sera data, e.g. SEM/MAG (SEM / Magnetometer)."""

    source: Required[str]
    """Source of the data."""

    spacecraft_id: Required[Annotated[str, PropertyInfo(alias="spacecraftId")]]
    """Seradata ID of the spacecraft (SeradataSpacecraftDetails ID)."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    entity: EntityIngestParam
    """
    An entity is a generic representation of any object within a space/SSA system
    such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
    entity can have an operating unit, a location (if terrestrial), and statuses.
    """

    frequency_band: Annotated[str, PropertyInfo(alias="frequencyBand")]
    """Frequency band, e.g. Gamma."""

    hosted_for_company_org_id: Annotated[str, PropertyInfo(alias="hostedForCompanyOrgId")]
    """Hosted for company/Organization Id."""

    id_entity: Annotated[str, PropertyInfo(alias="idEntity")]
    """ID of the parent entity for this Scientific."""

    manufacturer_org_id: Annotated[str, PropertyInfo(alias="manufacturerOrgId")]
    """Unique identifier of the organization which manufactures this bus."""

    notes: str
    """Notes associated with the payload."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    payload_category: Annotated[str, PropertyInfo(alias="payloadCategory")]
    """Payload category, e.g. Magnetometer, Radiometer, Sensor, etc."""
