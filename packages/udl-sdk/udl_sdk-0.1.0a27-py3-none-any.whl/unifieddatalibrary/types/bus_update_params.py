# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal, Required, Annotated, TypedDict

from .._types import SequenceNotStr
from .._utils import PropertyInfo
from .entity_ingest_param import EntityIngestParam

__all__ = ["BusUpdateParams"]


class BusUpdateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Name of this bus."""

    source: Required[str]
    """Source of the data."""

    body_id: Annotated[str, PropertyInfo(alias="id")]
    """Unique identifier of the record, auto-generated by the system."""

    aocs_notes: Annotated[str, PropertyInfo(alias="aocsNotes")]
    """Attitude and Orbital Control Notes/description for the bus."""

    avg_dry_mass: Annotated[float, PropertyInfo(alias="avgDryMass")]
    """Average mass of this bus without payloads or fuel, in kilograms."""

    avg_payload_mass: Annotated[float, PropertyInfo(alias="avgPayloadMass")]
    """Average mass available on this bus for payloads, in kilograms."""

    avg_payload_power: Annotated[float, PropertyInfo(alias="avgPayloadPower")]
    """Average power available on this bus for payloads, in kilowatts."""

    avg_spacecraft_power: Annotated[float, PropertyInfo(alias="avgSpacecraftPower")]
    """Average power available on this bus, in kilowatts."""

    avg_wet_mass: Annotated[float, PropertyInfo(alias="avgWetMass")]
    """Average mass of this bus with fuel, but without payloads, in kilograms."""

    body_dimension_x: Annotated[float, PropertyInfo(alias="bodyDimensionX")]
    """Body dimension in X direction pertaining to length, in meters."""

    body_dimension_y: Annotated[float, PropertyInfo(alias="bodyDimensionY")]
    """Body dimension in Y direction pertaining to height, in meters."""

    body_dimension_z: Annotated[float, PropertyInfo(alias="bodyDimensionZ")]
    """Body dimension in Z direction pertaining to width, in meters."""

    bus_kit_designer_org_id: Annotated[str, PropertyInfo(alias="busKitDesignerOrgId")]
    """Unique identifier of the organization which designs the bus kit."""

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """Country where this bus was manufactured.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDLâ€™s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    description: str
    """Notes/description of the bus."""

    entity: EntityIngestParam
    """
    An entity is a generic representation of any object within a space/SSA system
    such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
    entity can have an operating unit, a location (if terrestrial), and statuses.
    """

    generic: bool
    """Boolean indicating if this bus is generic."""

    id_entity: Annotated[str, PropertyInfo(alias="idEntity")]
    """ID of the parent entity for this bus."""

    launch_envelope_dimension_x: Annotated[float, PropertyInfo(alias="launchEnvelopeDimensionX")]
    """Launch envelope dimension in X direction, in meters."""

    launch_envelope_dimension_y: Annotated[float, PropertyInfo(alias="launchEnvelopeDimensionY")]
    """Launch envelope dimension in Y direction, in meters."""

    launch_envelope_dimension_z: Annotated[float, PropertyInfo(alias="launchEnvelopeDimensionZ")]
    """Launch envelope dimension in Z direction, in meters."""

    main_computer_manufacturer_org_id: Annotated[str, PropertyInfo(alias="mainComputerManufacturerOrgId")]
    """
    Unique identifier of the organization which manufactures the main onboard
    computer for this bus.
    """

    manufacturer_org_id: Annotated[str, PropertyInfo(alias="manufacturerOrgId")]
    """Unique identifier of the organization which manufactures this bus."""

    mass_category: Annotated[str, PropertyInfo(alias="massCategory")]
    """Mass category of this bus (e.g.

    1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg:
    Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
    """

    max_bol_power_lower: Annotated[float, PropertyInfo(alias="maxBOLPowerLower")]
    """Maximum power at beginning of life, lower bounds, in kilowatts."""

    max_bol_power_upper: Annotated[float, PropertyInfo(alias="maxBOLPowerUpper")]
    """Maximum power at beginning of life, upper bounds, in kilowatts."""

    max_bol_station_mass: Annotated[float, PropertyInfo(alias="maxBOLStationMass")]
    """Maximum mass on station at beginning of life, in kilograms."""

    max_dry_mass: Annotated[float, PropertyInfo(alias="maxDryMass")]
    """Maximum mass of this bus without payloads or fuel, in kilograms."""

    max_eol_power_lower: Annotated[float, PropertyInfo(alias="maxEOLPowerLower")]
    """Maximum power at end of life, lower bounds, in kilowatts."""

    max_eol_power_upper: Annotated[float, PropertyInfo(alias="maxEOLPowerUpper")]
    """Maximum power at end of life, upper bounds, in kilowatts."""

    max_launch_mass_lower: Annotated[float, PropertyInfo(alias="maxLaunchMassLower")]
    """Maximum mass at launch, lower bounds, in kilograms."""

    max_launch_mass_upper: Annotated[float, PropertyInfo(alias="maxLaunchMassUpper")]
    """Maximum mass at launch, upper bounds, in kilograms."""

    max_payload_mass: Annotated[float, PropertyInfo(alias="maxPayloadMass")]
    """Maximum payload mass available, in kilograms."""

    max_payload_power: Annotated[float, PropertyInfo(alias="maxPayloadPower")]
    """Maximum payload power available, in kilowatts."""

    max_spacecraft_power: Annotated[float, PropertyInfo(alias="maxSpacecraftPower")]
    """Maximum power available on this bus, in kilowatts."""

    max_wet_mass: Annotated[float, PropertyInfo(alias="maxWetMass")]
    """Maximum mass of this bus with fuel, but without payloads, in kilograms."""

    median_dry_mass: Annotated[float, PropertyInfo(alias="medianDryMass")]
    """Median mass of this bus without payloads or fuel, in kilograms."""

    median_wet_mass: Annotated[float, PropertyInfo(alias="medianWetMass")]
    """Median mass of this bus with fuel, but without payloads, in kilograms."""

    min_dry_mass: Annotated[float, PropertyInfo(alias="minDryMass")]
    """Minimum mass of this bus without payloads or fuel, in kilograms."""

    min_wet_mass: Annotated[float, PropertyInfo(alias="minWetMass")]
    """Minimum mass of this bus with fuel, but without payloads, in kilograms."""

    num_orbit_type: Annotated[int, PropertyInfo(alias="numOrbitType")]
    """The number of orbit types this bus can support."""

    oap_payload_power: Annotated[float, PropertyInfo(alias="oapPayloadPower")]
    """
    Orbit averaged power (the power averaged over one orbit) available on this bus
    for payloads, in kilowatts.
    """

    oap_spacecraft_power: Annotated[float, PropertyInfo(alias="oapSpacecraftPower")]
    """
    Orbit averaged power (the power averaged over one orbit) available on this bus,
    in kilowatts.
    """

    orbit_types: Annotated[SequenceNotStr[str], PropertyInfo(alias="orbitTypes")]
    """Array of orbit types this bus can support (e.g.

    GEO, LEO, etc.). Must contain the same number of elements as the value of
    numOrbitType.
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    payload_dimension_x: Annotated[float, PropertyInfo(alias="payloadDimensionX")]
    """The radial dimension available on this bus for payloads, in meters."""

    payload_dimension_y: Annotated[float, PropertyInfo(alias="payloadDimensionY")]
    """The in-track dimension available on this bus for payloads, in meters."""

    payload_dimension_z: Annotated[float, PropertyInfo(alias="payloadDimensionZ")]
    """The cross-track dimension available on this bus for payloads, in meters."""

    payload_volume: Annotated[float, PropertyInfo(alias="payloadVolume")]
    """The volume available on this bus for payloads, in cubic meters."""

    power_category: Annotated[str, PropertyInfo(alias="powerCategory")]
    """Power category of this bus (e.g. 0-1kW low power, etc)."""

    telemetry_tracking_manufacturer_org_id: Annotated[str, PropertyInfo(alias="telemetryTrackingManufacturerOrgId")]
    """
    Unique identifier of the organization which manufactures the telemetry tracking
    and command subsystem for this bus.
    """

    type: str
    """Type of this bus."""
