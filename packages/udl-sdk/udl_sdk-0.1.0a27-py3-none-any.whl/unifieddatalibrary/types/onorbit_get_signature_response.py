# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import Optional
from datetime import datetime
from typing_extensions import Literal

from pydantic import Field as FieldInfo

from .._models import BaseModel
from .observations.eo_observation_abridged import EoObservationAbridged

__all__ = ["OnorbitGetSignatureResponse", "RadarObservation", "RfObservation"]


class RadarObservation(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    ob_time: datetime = FieldInfo(alias="obTime")
    """Ob detection time in ISO 8601 UTC with microsecond precision."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    azimuth: Optional[float] = None
    """azimuth angle in degrees and topocentric frame."""

    azimuth_bias: Optional[float] = FieldInfo(alias="azimuthBias", default=None)
    """Sensor azimuth angle bias in degrees."""

    azimuth_measured: Optional[bool] = FieldInfo(alias="azimuthMeasured", default=None)
    """
    Optional flag indicating whether the azimuth value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    azimuth_rate: Optional[float] = FieldInfo(alias="azimuthRate", default=None)
    """Rate of change of the line of sight azimuth in degrees per second."""

    azimuth_unc: Optional[float] = FieldInfo(alias="azimuthUnc", default=None)
    """
    One sigma uncertainty in the line of sight azimuth angle measurement, in
    degrees.
    """

    beam: Optional[float] = None
    """ID of the beam that produced this observation."""

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    declination: Optional[float] = None
    """Line of sight declination angle in degrees and J2000 coordinate frame."""

    declination_measured: Optional[bool] = FieldInfo(alias="declinationMeasured", default=None)
    """
    Optional flag indicating whether the declination value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    descriptor: Optional[str] = None
    """Optional source-provided and searchable metadata or descriptor of the data."""

    doppler: Optional[float] = None
    """Corrected doppler measurement in meters per second."""

    doppler_unc: Optional[float] = FieldInfo(alias="dopplerUnc", default=None)
    """One sigma uncertainty in the corrected doppler measurement, in meters/second."""

    elevation: Optional[float] = None
    """Line of sight elevation in degrees and topocentric frame."""

    elevation_bias: Optional[float] = FieldInfo(alias="elevationBias", default=None)
    """Sensor elevation bias in degrees."""

    elevation_measured: Optional[bool] = FieldInfo(alias="elevationMeasured", default=None)
    """
    Optional flag indicating whether the elevation value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    elevation_rate: Optional[float] = FieldInfo(alias="elevationRate", default=None)
    """Rate of change of the line of sight elevation in degrees per second."""

    elevation_unc: Optional[float] = FieldInfo(alias="elevationUnc", default=None)
    """
    One sigma uncertainty in the line of sight elevation angle measurement, in
    degrees.
    """

    id_on_orbit: Optional[str] = FieldInfo(alias="idOnOrbit", default=None)
    """Unique identifier of the target on-orbit object, if correlated."""

    id_sensor: Optional[str] = FieldInfo(alias="idSensor", default=None)
    """Unique identifier of the reporting sensor."""

    ob_position: Optional[str] = FieldInfo(alias="obPosition", default=None)
    """The position of this observation within a track (FENCE, FIRST, IN, LAST,
    SINGLE).

    This identifier is optional and, if null, no assumption should be made regarding
    whether other observations may or may not exist to compose a track.
    """

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    orig_object_id: Optional[str] = FieldInfo(alias="origObjectId", default=None)
    """
    Optional identifier provided by observation source to indicate the target
    onorbit object of this observation. This may be an internal identifier and not
    necessarily a valid satellite number.
    """

    orig_sensor_id: Optional[str] = FieldInfo(alias="origSensorId", default=None)
    """
    Optional identifier provided by observation source to indicate the sensor
    identifier which produced this observation. This may be an internal identifier
    and not necessarily a valid sensor ID.
    """

    orthogonal_rcs: Optional[float] = FieldInfo(alias="orthogonalRcs", default=None)
    """Radar cross section in meters squared for orthogonal polarization."""

    orthogonal_rcs_unc: Optional[float] = FieldInfo(alias="orthogonalRcsUnc", default=None)
    """
    one sigma uncertainty in orthogonal polarization Radar Cross Section, in
    meters^2.
    """

    ra: Optional[float] = None
    """Line of sight right ascension in degrees and J2000 coordinate frame."""

    ra_measured: Optional[bool] = FieldInfo(alias="raMeasured", default=None)
    """
    Optional flag indicating whether the ra value is measured (true) or computed
    (false). If null, consumers may consult the data provider for information
    regarding whether the corresponding value is computed or measured.
    """

    range: Optional[float] = None
    """Target range in km."""

    range_accel: Optional[float] = FieldInfo(alias="rangeAccel", default=None)
    """Range accelaration in km/s2."""

    range_accel_unc: Optional[float] = FieldInfo(alias="rangeAccelUnc", default=None)
    """
    One sigma uncertainty in the range acceleration measurement, in
    kilometers/(second^2).
    """

    range_bias: Optional[float] = FieldInfo(alias="rangeBias", default=None)
    """Sensor range bias in km."""

    range_measured: Optional[bool] = FieldInfo(alias="rangeMeasured", default=None)
    """
    Optional flag indicating whether the range value is measured (true) or computed
    (false). If null, consumers may consult the data provider for information
    regarding whether the corresponding value is computed or measured.
    """

    range_rate: Optional[float] = FieldInfo(alias="rangeRate", default=None)
    """Rate of change of the line of sight range in km/sec."""

    range_rate_measured: Optional[bool] = FieldInfo(alias="rangeRateMeasured", default=None)
    """
    Optional flag indicating whether the rangeRate value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    range_rate_unc: Optional[float] = FieldInfo(alias="rangeRateUnc", default=None)
    """One sigma uncertainty in the range rate measurement, in kilometers/second."""

    range_unc: Optional[float] = FieldInfo(alias="rangeUnc", default=None)
    """One sigma uncertainty in the range measurement, in kilometers."""

    raw_file_uri: Optional[str] = FieldInfo(alias="rawFileURI", default=None)
    """
    Optional URI location in the document repository of the raw file parsed by the
    system to produce this record. To download the raw file, prepend
    https://udl-hostname/scs/download?id= to this value.
    """

    rcs: Optional[float] = None
    """Radar cross section in meters squared for polarization principal."""

    rcs_unc: Optional[float] = FieldInfo(alias="rcsUnc", default=None)
    """
    one sigma uncertainty in principal polarization Radar Cross Section, in
    meters^2.
    """

    sat_no: Optional[int] = FieldInfo(alias="satNo", default=None)
    """Satellite/Catalog number of the target on-orbit object."""

    sen_reference_frame: Optional[Literal["J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF"]] = FieldInfo(
        alias="senReferenceFrame", default=None
    )
    """The reference frame of the observing sensor state.

    If the senReferenceFrame is null it is assumed to be J2000.
    """

    senx: Optional[float] = None
    """
    Sensor x position in km at obTime (if mobile/onorbit) in the specified
    senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed.
    """

    seny: Optional[float] = None
    """
    Sensor y position in km at obTime (if mobile/onorbit) in the specified
    senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed.
    """

    senz: Optional[float] = None
    """
    Sensor z position in km at obTime (if mobile/onorbit) in the specified
    senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed.
    """

    snr: Optional[float] = None
    """Signal to noise ratio, in dB."""

    source_dl: Optional[str] = FieldInfo(alias="sourceDL", default=None)
    """The source data library from which this record was received.

    This could be a remote or tactical UDL or another data library. If null, the
    record should be assumed to have originated from the primary Enterprise UDL.
    """

    task_id: Optional[str] = FieldInfo(alias="taskId", default=None)
    """
    Optional identifier to indicate the specific tasking which produced this
    observation.
    """

    timing_bias: Optional[float] = FieldInfo(alias="timingBias", default=None)
    """Sensor timing bias in seconds."""

    track_id: Optional[str] = FieldInfo(alias="trackId", default=None)
    """Optional identifier of the track to which this observation belongs."""

    tracking_state: Optional[str] = FieldInfo(alias="trackingState", default=None)
    """
    The beam type (or tracking state) in use at the time of collection of this
    observation. Values include:

    INIT ACQ WITH INIT VALUES: Initial acquisition based on predefined initial
    values such as position, velocity, or other specific parameters.

    INIT ACQ: Initial acquisition when no prior information or initial values such
    as position or velocity are available.

    TRACKING SINGLE BEAM: Continuously tracks and monitors a single target using one
    specific radar beam.

    TRACKING SEQUENTIAL ROVING: Sequentially tracks different targets or areas by
    "roving" from one sector to the next in a systematic order.

    SELF ACQ WITH INIT VALUES: Autonomously acquires targets using predefined
    starting parameters or initial values.

    SELF ACQ: Automatically detects and locks onto targets without the need for
    predefined initial settings.

    NON-TRACKING: Non-tracking.
    """

    transaction_id: Optional[str] = FieldInfo(alias="transactionId", default=None)
    """
    Optional identifier to track a commercial or marketplace transaction executed to
    produce this data.
    """

    type: Optional[str] = None
    """Read only enumeration specifying the type of observation (e.g.

    OPTICAL, RADAR, RF, etc).
    """

    uct: Optional[bool] = None
    """
    Boolean indicating this observation is part of an uncorrelated track or was
    unable to be correlated to a known object. This flag should only be set to true
    by data providers after an attempt to correlate to an on-orbit object was made
    and failed. If unable to correlate, the 'origObjectId' field may be populated
    with an internal data provider specific identifier.
    """

    x: Optional[float] = None
    """X position of target in km in J2000 coordinate frame."""

    xvel: Optional[float] = None
    """X velocity of target in km/sec in J2000 coordinate frame."""

    y: Optional[float] = None
    """Y position of target in km in J2000 coordinate frame."""

    yvel: Optional[float] = None
    """Y velocity of target in km/sec in J2000 coordinate frame."""

    z: Optional[float] = None
    """Z position of target in km in J2000 coordinate frame."""

    zvel: Optional[float] = None
    """Z velocity of target in km/sec in J2000 coordinate frame."""


class RfObservation(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    ob_time: datetime = FieldInfo(alias="obTime")
    """Ob detection time in ISO 8601 UTC with microsecond precision."""

    source: str
    """Source of the data."""

    type: str
    """Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc)."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    antenna_name: Optional[str] = FieldInfo(alias="antennaName", default=None)
    """Antenna name of the RFObservation record."""

    azimuth: Optional[float] = None
    """Azimuth angle in degrees and topocentric coordinate frame."""

    azimuth_measured: Optional[bool] = FieldInfo(alias="azimuthMeasured", default=None)
    """
    Optional flag indicating whether the azimuth value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    azimuth_rate: Optional[float] = FieldInfo(alias="azimuthRate", default=None)
    """Rate of change of the azimuth in degrees per second."""

    azimuth_unc: Optional[float] = FieldInfo(alias="azimuthUnc", default=None)
    """One sigma uncertainty in the azimuth angle measurement, in degrees."""

    bandwidth: Optional[float] = None
    """Measured bandwidth in hertz."""

    baud_rate: Optional[float] = FieldInfo(alias="baudRate", default=None)
    """
    Baud rate is the number of symbol changes, waveform changes, or signaling
    events, across the transmission medium per second.
    """

    bit_error_rate: Optional[float] = FieldInfo(alias="bitErrorRate", default=None)
    """The ratio of bit errors per number of received bits."""

    carrier_standard: Optional[str] = FieldInfo(alias="carrierStandard", default=None)
    """Carrier standard (e.g. DVB-S2, 802.11g, etc.)."""

    channel: Optional[int] = None
    """Channel of the RFObservation record."""

    collection_mode: Optional[str] = FieldInfo(alias="collectionMode", default=None)
    """Collection mode (e.g.

    CONTINUOUS, MANUAL, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, SPOT_SEARCH, SURVEY,
    etc).
    """

    confidence: Optional[float] = None
    """Confidence in the signal and its measurements and characterization."""

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    descriptor: Optional[str] = None
    """Optional source-provided and searchable metadata or descriptor of the data."""

    detection_status: Optional[str] = FieldInfo(alias="detectionStatus", default=None)
    """Detection status (e.g.

    DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
    """

    eirp: Optional[float] = None
    """Measured Equivalent Isotopically Radiated Power in decibel watts."""

    elevation: Optional[float] = None
    """Elevation in degrees and topocentric coordinate frame."""

    elevation_measured: Optional[bool] = FieldInfo(alias="elevationMeasured", default=None)
    """
    Optional flag indicating whether the elevation value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    elevation_rate: Optional[float] = FieldInfo(alias="elevationRate", default=None)
    """Rate of change of the elevation in degrees per second."""

    elevation_unc: Optional[float] = FieldInfo(alias="elevationUnc", default=None)
    """One sigma uncertainty in the elevation angle measurement, in degrees."""

    elnot: Optional[str] = None
    """ELINT notation."""

    end_frequency: Optional[float] = FieldInfo(alias="endFrequency", default=None)
    """End carrier frequency in hertz."""

    frequency: Optional[float] = None
    """Center carrier frequency in hertz."""

    frequency_shift: Optional[float] = FieldInfo(alias="frequencyShift", default=None)
    """Frequency Shift of the RFObservation record."""

    id_on_orbit: Optional[str] = FieldInfo(alias="idOnOrbit", default=None)
    """Unique identifier of the target on-orbit object, if correlated."""

    id_sensor: Optional[str] = FieldInfo(alias="idSensor", default=None)
    """Unique identifier of the reporting sensor."""

    incoming: Optional[bool] = None
    """True if the signal is incoming, false if outgoing."""

    inner_coding_rate: Optional[int] = FieldInfo(alias="innerCodingRate", default=None)
    """
    Inner forward error correction rate: 0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 =
    5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    """

    max_psd: Optional[float] = FieldInfo(alias="maxPSD", default=None)
    """Maximum measured PSD value of the trace in decibel watts."""

    min_psd: Optional[float] = FieldInfo(alias="minPSD", default=None)
    """Minimum measured PSD value of the trace in decibel watts."""

    modulation: Optional[str] = None
    """Transponder modulation (e.g. Auto, QPSK, 8PSK, etc)."""

    noise_pwr_density: Optional[float] = FieldInfo(alias="noisePwrDensity", default=None)
    """Noise power density, in decibel watts per hertz."""

    nominal_bandwidth: Optional[float] = FieldInfo(alias="nominalBandwidth", default=None)
    """Expected bandwidth in hertz."""

    nominal_eirp: Optional[float] = FieldInfo(alias="nominalEirp", default=None)
    """Expected Equivalent Isotopically Radiated Power in decibel watts."""

    nominal_frequency: Optional[float] = FieldInfo(alias="nominalFrequency", default=None)
    """Nominal or expected center carrier frequency in hertz."""

    nominal_power_over_noise: Optional[float] = FieldInfo(alias="nominalPowerOverNoise", default=None)
    """Expected carrier power over noise (decibel watts per hertz)."""

    nominal_snr: Optional[float] = FieldInfo(alias="nominalSnr", default=None)
    """Nominal or expected signal to noise ratio, in decibels."""

    orig_country: Optional[str] = FieldInfo(alias="origCountry", default=None)
    """Country of origin in which the data was originally posted."""

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_marking: Optional[str] = FieldInfo(alias="origMarking", default=None)
    """Original security marking that the data was marked with."""

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    orig_object_id: Optional[str] = FieldInfo(alias="origObjectId", default=None)
    """
    Optional identifier provided by observation source to indicate the target
    onorbit object of this observation. This may be an internal identifier and not
    necessarily a valid satellite number.
    """

    orig_sensor_id: Optional[str] = FieldInfo(alias="origSensorId", default=None)
    """
    Optional identifier provided by observation source to indicate the sensor
    identifier which produced this observation. This may be an internal identifier
    and not necessarily a valid sensor ID.
    """

    outer_coding_rate: Optional[int] = FieldInfo(alias="outerCodingRate", default=None)
    """
    Outer forward error correction rate: 0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 =
    5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    """

    peak: Optional[bool] = None
    """Peak of the RFObservation record."""

    pgri: Optional[float] = None
    """
    A pulse group repetition interval (PGRI) is a pulse train in which there are
    groups of closely spaced pulses separated by much longer times between these
    pulse groups. The PGRI is measured in seconds.
    """

    polarity: Optional[float] = None
    """The antenna pointing dependent polarizer angle, in degrees."""

    polarity_type: Optional[Literal["H", "V", "R", "L"]] = FieldInfo(alias="polarityType", default=None)
    """Transponder polarization e.g.

    H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically
    Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized)
    Rotating left relative to the earth's surface, R - (Right Hand Circularly
    Polarized) Rotating right relative to the earth's surface.
    """

    power_over_noise: Optional[float] = FieldInfo(alias="powerOverNoise", default=None)
    """Measured carrier power over noise (decibel watts per hertz)."""

    range: Optional[float] = None
    """Target range in kilometers."""

    range_measured: Optional[bool] = FieldInfo(alias="rangeMeasured", default=None)
    """
    Optional flag indicating whether the range value is measured (true) or computed
    (false). If null, consumers may consult the data provider for information
    regarding whether the corresponding value is computed or measured.
    """

    range_rate: Optional[float] = FieldInfo(alias="rangeRate", default=None)
    """Rate of change of the range in kilometers per second."""

    range_rate_measured: Optional[bool] = FieldInfo(alias="rangeRateMeasured", default=None)
    """
    Optional flag indicating whether the rangeRate value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    range_rate_unc: Optional[float] = FieldInfo(alias="rangeRateUnc", default=None)
    """One sigma uncertainty in the range rate measurement, in kilometers/second."""

    range_unc: Optional[float] = FieldInfo(alias="rangeUnc", default=None)
    """One sigma uncertainty in the range measurement, in kilometers."""

    raw_file_uri: Optional[str] = FieldInfo(alias="rawFileURI", default=None)
    """
    Optional URI location in the document repository of the raw file parsed by the
    system to produce this record. To download the raw file, prepend
    https://udl-hostname/scs/download?id= to this value.
    """

    reference_level: Optional[float] = FieldInfo(alias="referenceLevel", default=None)
    """Reference signal level, in decibel watts."""

    relative_carrier_power: Optional[float] = FieldInfo(alias="relativeCarrierPower", default=None)
    """Measured power of the center carrier frequency in decibel watts."""

    relative_noise_floor: Optional[float] = FieldInfo(alias="relativeNoiseFloor", default=None)
    """
    The measure of the signal created from the sum of all the noise sources and
    unwanted signals within the measurement system, in decibel watts.
    """

    resolution_bandwidth: Optional[float] = FieldInfo(alias="resolutionBandwidth", default=None)
    """Resolution bandwidth in hertz."""

    sat_no: Optional[int] = FieldInfo(alias="satNo", default=None)
    """Satellite/Catalog number of the target on-orbit object."""

    senalt: Optional[float] = None
    """Sensor altitude at obTime (if mobile/onorbit) in km.

    If null, can be obtained from sensor info.
    """

    senlat: Optional[float] = None
    """Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees.

    If null, can be obtained from sensor info. -90 to 90 degrees (negative values
    south of equator).
    """

    senlon: Optional[float] = None
    """Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees.

    If null, can be obtained from sensor info. -180 to 180 degrees (negative values
    west of Prime Meridian).
    """

    snr: Optional[float] = None
    """Signal to noise ratio, in decibels."""

    source_dl: Optional[str] = FieldInfo(alias="sourceDL", default=None)
    """The source data library from which this record was received.

    This could be a remote or tactical UDL or another data library. If null, the
    record should be assumed to have originated from the primary Enterprise UDL.
    """

    spectrum_analyzer_power: Optional[float] = FieldInfo(alias="spectrumAnalyzerPower", default=None)
    """
    Measured spectrum analyzer power of the center carrier frequency in decibel
    watts.
    """

    start_frequency: Optional[float] = FieldInfo(alias="startFrequency", default=None)
    """Start carrier frequency in hertz."""

    switch_point: Optional[int] = FieldInfo(alias="switchPoint", default=None)
    """Switch Point of the RFObservation record."""

    symbol_to_noise_ratio: Optional[float] = FieldInfo(alias="symbolToNoiseRatio", default=None)
    """Symbol to noise ratio, in decibels."""

    task_id: Optional[str] = FieldInfo(alias="taskId", default=None)
    """
    Optional identifier to indicate the specific tasking which produced this
    observation.
    """

    track_id: Optional[str] = FieldInfo(alias="trackId", default=None)
    """Optional identifier of the track to which this observation belongs."""

    track_range: Optional[float] = FieldInfo(alias="trackRange", default=None)
    """Target track or apparent range in kilometers."""

    transaction_id: Optional[str] = FieldInfo(alias="transactionId", default=None)
    """
    Optional identifier to track a commercial or marketplace transaction executed to
    produce this data.
    """

    transmit_filter_roll_off: Optional[float] = FieldInfo(alias="transmitFilterRollOff", default=None)
    """Transmit pulse shaping filter roll-off value."""

    transmit_filter_type: Optional[str] = FieldInfo(alias="transmitFilterType", default=None)
    """Transmit pulse shaping filter type (e.g. RRC)."""

    transponder: Optional[str] = None
    """
    Optional identifier provided by observation source to indicate the transponder
    used for this measurement.
    """

    uct: Optional[bool] = None
    """
    Boolean indicating this observation is part of an uncorrelated track or was
    unable to be correlated to a known object. This flag should only be set to true
    by data providers after an attempt to correlate to an on-orbit object was made
    and failed. If unable to correlate, the 'origObjectId' field may be populated
    with an internal data provider specific identifier.
    """

    url: Optional[str] = None
    """Optional URL containing additional information on this observation."""

    video_bandwidth: Optional[float] = FieldInfo(alias="videoBandwidth", default=None)
    """Video bandwidth in hertz."""


class OnorbitGetSignatureResponse(BaseModel):
    eo_observation: Optional[EoObservationAbridged] = FieldInfo(alias="eoObservation", default=None)
    """
    Model representation of observation data for electro-optical based sensor
    phenomenologies. ECI J2K is the preferred reference frame for EOObservations,
    however, several user-specified reference frames are accommodated. Users should
    check the EOObservation record as well as the 'Discover' tab in the storefront
    to confirm the coordinate frames used by the data provider.
    """

    radar_observation: Optional[RadarObservation] = FieldInfo(alias="radarObservation", default=None)
    """Model representation of observation data for radar based sensor phenomenologies.

    J2000 is the preferred coordinate frame for all observations, but in some cases
    observations may be in another frame depending on the provider. Please see the
    'Discover' tab in the storefront to confirm coordinate frames by data provider.
    """

    rf_observation: Optional[RfObservation] = FieldInfo(alias="rfObservation", default=None)
    """
    Model representation of observation data for active/passive radio frequency (RF)
    based sensor phenomenologies. J2000 is the preferred coordinate frame for all
    observations, but in some cases observations may be in another frame depending
    on the provider. Please see the 'Discover' tab in the storefront to confirm
    coordinate frames by data provider. RF observations include several optional
    ordered arrays which are used to provide detailed information on recorded
    signals such as power spectral density lists or active signals (code taps/fills,
    etc). In these cases, the sizes of the arrays must match and can be assumed to
    have consistent indexing across arrays (e.g. powers[0] is the measured power at
    frequencies[0]).
    """
