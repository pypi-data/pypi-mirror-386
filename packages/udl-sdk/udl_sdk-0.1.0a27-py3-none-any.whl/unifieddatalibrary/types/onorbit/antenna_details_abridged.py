# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import List, Optional
from datetime import datetime
from typing_extensions import Literal

from pydantic import Field as FieldInfo

from ..._models import BaseModel

__all__ = ["AntennaDetailsAbridged"]


class AntennaDetailsAbridged(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_antenna: str = FieldInfo(alias="idAntenna")
    """Unique identifier of the parent Antenna."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    beam_forming: Optional[bool] = FieldInfo(alias="beamForming", default=None)
    """Boolean indicating if this is a beam forming antenna."""

    beamwidth: Optional[float] = None
    """
    Array of angles between the half-power (-3 dB) points of the main lobe of the
    antenna, in degrees.
    """

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    description: Optional[str] = None
    """Antenna description."""

    diameter: Optional[float] = None
    """Antenna diameter in meters."""

    end_frequency: Optional[float] = FieldInfo(alias="endFrequency", default=None)
    """Antenna end of frequency range in Mhz."""

    gain: Optional[float] = None
    """Antenna maximum gain in dBi."""

    gain_tolerance: Optional[float] = FieldInfo(alias="gainTolerance", default=None)
    """Antenna gain tolerance in dB."""

    manufacturer_org_id: Optional[str] = FieldInfo(alias="manufacturerOrgId", default=None)
    """ID of the organization that manufactures the antenna."""

    mode: Optional[Literal["TX", "RX"]] = None
    """Antenna mode (e.g. TX,RX)."""

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    polarization: Optional[float] = None
    """Antenna polarization in degrees."""

    position: Optional[str] = None
    """Antenna position (e.g. Top, Nadir, Side)."""

    size: Optional[List[float]] = None
    """
    Array with 1-2 values specifying the length and width (for rectangular) and just
    length for dipole antennas in meters.
    """

    start_frequency: Optional[float] = FieldInfo(alias="startFrequency", default=None)
    """Antenna start of frequency range in Mhz."""

    steerable: Optional[bool] = None
    """Boolean indicating if this antenna is steerable."""

    type: Optional[str] = None
    """Type of antenna (e.g.

    Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
    """
