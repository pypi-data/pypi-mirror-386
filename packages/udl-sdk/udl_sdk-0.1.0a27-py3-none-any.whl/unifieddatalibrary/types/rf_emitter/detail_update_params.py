# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Iterable
from typing_extensions import Literal, Required, Annotated, TypedDict

from ..._types import SequenceNotStr
from ..._utils import PropertyInfo

__all__ = [
    "DetailUpdateParams",
    "Amplifier",
    "Antenna",
    "AntennaFeed",
    "AntennaReceiverChannel",
    "AntennaTransmitChannel",
    "PowerOffset",
    "Service",
    "Ttp",
    "TtpTechniqueDefinition",
    "TtpTechniqueDefinitionParamDefinition",
]


class DetailUpdateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_rf_emitter: Required[Annotated[str, PropertyInfo(alias="idRFEmitter")]]
    """Unique identifier of the parent RF Emitter."""

    source: Required[str]
    """Source of the data."""

    body_id: Annotated[str, PropertyInfo(alias="id")]
    """Unique identifier of the record, auto-generated by the system."""

    alternate_facility_name: Annotated[str, PropertyInfo(alias="alternateFacilityName")]
    """Alternate facility name for this RF Emitter."""

    alt_name: Annotated[str, PropertyInfo(alias="altName")]
    """Optional alternate name or alias for this RF Emitter."""

    amplifier: Amplifier
    """An RF Amplifier associated with an RF Emitter Details."""

    antennas: Iterable[Antenna]
    """The set of antennas hosted on this EW Emitter system."""

    barrage_noise_bandwidth: Annotated[float, PropertyInfo(alias="barrageNoiseBandwidth")]
    """Barrage noise bandwidth, in megahertz."""

    bit_run_time: Annotated[float, PropertyInfo(alias="bitRunTime")]
    """
    The length of time, in seconds, for the RF Emitter built-in test to run to
    completion.
    """

    description: str
    """Detailed description of the RF Emitter."""

    designator: str
    """Designator of this RF Emitter."""

    doppler_noise: Annotated[float, PropertyInfo(alias="dopplerNoise")]
    """Doppler noise value, in megahertz."""

    drfm_instantaneous_bandwidth: Annotated[float, PropertyInfo(alias="drfmInstantaneousBandwidth")]
    """Digital Form Radio Memory instantaneous bandwidth in megahertz."""

    family: str
    """Family of this RF Emitter type."""

    fixed_attenuation: Annotated[float, PropertyInfo(alias="fixedAttenuation")]
    """
    A fixed attenuation value to be set on the SRF Emitter HPA when commanding an
    Electronic Attack/Techniques Tactics and Procedures task, in decibels.
    """

    id_manufacturer_org: Annotated[str, PropertyInfo(alias="idManufacturerOrg")]
    """Unique identifier of the organization which manufactured this RF Emitter."""

    id_production_facility_location: Annotated[str, PropertyInfo(alias="idProductionFacilityLocation")]
    """
    Unique identifier of the location of the production facility for this RF
    Emitter.
    """

    loaned_to_cocom: Annotated[str, PropertyInfo(alias="loanedToCocom")]
    """
    COCOM that has temporary responsibility for scheduling and management of the RF
    Emitter (e.g. SPACEFOR-CENT, SPACEFOR-EURAF, SPACEFOR-INDOPAC, SPACEFOR-KOR,
    SPACEFOR-STRATNORTH, SPACESOC, NONE).
    """

    notes: str
    """Notes on the RF Emitter."""

    num_bits: Annotated[int, PropertyInfo(alias="numBits")]
    """Number of bits."""

    num_channels: Annotated[int, PropertyInfo(alias="numChannels")]
    """Number of channels."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    power_offsets: Annotated[Iterable[PowerOffset], PropertyInfo(alias="powerOffsets")]
    """
    A set of system/frequency band adjustments to the power offset commanded in an
    EA/TTP task.
    """

    prep_time: Annotated[float, PropertyInfo(alias="prepTime")]
    """
    The length of time, in seconds, for the RF Emitter to prepare for a task,
    including sufficient time to slew the antenna and configure the equipment.
    """

    primary_cocom: Annotated[str, PropertyInfo(alias="primaryCocom")]
    """
    Primary COCOM that is responsible for scheduling and management of the RF
    Emitter (e.g. SPACEFOR-CENT, SPACEFOR-EURAF, SPACEFOR-INDOPAC, SPACEFOR-KOR,
    SPACEFOR-STRATNORTH, SPACESOC, NONE).
    """

    production_facility_name: Annotated[str, PropertyInfo(alias="productionFacilityName")]
    """Name of the production facility for this RF Emitter."""

    receiver_type: Annotated[str, PropertyInfo(alias="receiverType")]
    """Type or name of receiver."""

    secondary_notes: Annotated[str, PropertyInfo(alias="secondaryNotes")]
    """Secondary notes on the RF Emitter."""

    services: Iterable[Service]
    """The set of software services running on this EW Emitter system."""

    system_sensitivity_end: Annotated[float, PropertyInfo(alias="systemSensitivityEnd")]
    """
    Receiver sensitivity is the lowest power level at which the receiver can detect
    an RF signal and demodulate data. Sensitivity is purely a receiver specification
    and is independent of the transmitter. End sensitivity range, in
    decibel-milliwatts.
    """

    system_sensitivity_start: Annotated[float, PropertyInfo(alias="systemSensitivityStart")]
    """
    Receiver sensitivity is the lowest power level at which the receiver can detect
    an RF signal and demodulate data. Sensitivity is purely a receiver specification
    and is independent of the transmitter. Start sensitivity range, in
    decibel-milliwatts.
    """

    ttps: Iterable[Ttp]
    """The set of EA/TTP techniques that are supported by this EW Emitter system."""

    urls: SequenceNotStr[str]
    """Array of URLs containing additional information on this RF Emitter."""


class Amplifier(TypedDict, total=False):
    device_identifier: Annotated[str, PropertyInfo(alias="deviceIdentifier")]
    """The device identifier of the amplifier."""

    manufacturer: str
    """The manufacturer of the amplifier."""

    model_name: Annotated[str, PropertyInfo(alias="modelName")]
    """The model name of the amplifier."""

    power: float
    """The amplifier power level, in watts."""


class AntennaFeed(TypedDict, total=False):
    freq_max: Annotated[float, PropertyInfo(alias="freqMax")]
    """Maximum frequency, in megahertz."""

    freq_min: Annotated[float, PropertyInfo(alias="freqMin")]
    """Minimum frequency, in megahertz."""

    name: str
    """The feed name."""

    polarization: str
    """The antenna feed linear/circular polarization (e.g.

    HORIZONTAL, VERTICAL, LEFT_HAND_CIRCULAR, RIGHT_HAND_CIRCULAR).
    """


class AntennaReceiverChannel(TypedDict, total=False):
    bandwidth: float
    """
    The receiver bandwidth, in megahertz, must satisfy the constraint: minBandwidth
    ≤ bandwidth ≤ maxBandwidth.
    """

    channel_num: Annotated[str, PropertyInfo(alias="channelNum")]
    """The receive channel number."""

    device_identifier: Annotated[str, PropertyInfo(alias="deviceIdentifier")]
    """The receive channel device identifier."""

    freq_max: Annotated[float, PropertyInfo(alias="freqMax")]
    """Maximum frequency, in megahertz."""

    freq_min: Annotated[float, PropertyInfo(alias="freqMin")]
    """Minimum frequency, in megahertz."""

    max_bandwidth: Annotated[float, PropertyInfo(alias="maxBandwidth")]
    """
    The maximum receiver bandwidth, in megahertz, must satisfy the constraint:
    minBandwidth ≤ bandwidth ≤ maxBandwidth.
    """

    min_bandwidth: Annotated[float, PropertyInfo(alias="minBandwidth")]
    """
    The receiver bandwidth, in megahertz, must satisfy the constraint: minBandwidth
    ≤ bandwidth ≤ maxBandwidth.
    """

    sensitivity: float
    """Receiver sensitivity, in decibel-milliwatts."""


class AntennaTransmitChannel(TypedDict, total=False):
    power: Required[float]
    """Transmit power, in watts."""

    bandwidth: float
    """
    The transmitter bandwidth, in megahertz, must satisfy the constraint:
    minBandwidth ≤ bandwidth ≤ maxBandwidth.
    """

    channel_num: Annotated[str, PropertyInfo(alias="channelNum")]
    """The transmit channel number."""

    device_identifier: Annotated[str, PropertyInfo(alias="deviceIdentifier")]
    """The transmit channel device identifier."""

    freq: float
    """
    The transmitter frequency, in megahertz, must satisfy the constraint: freqMin <=
    freq <= freqMax.
    """

    freq_max: Annotated[float, PropertyInfo(alias="freqMax")]
    """
    The maximum transmitter frequency, in megahertz, must satisfy the constraint:
    freqMin ≤ freq ≤ freqMax.
    """

    freq_min: Annotated[float, PropertyInfo(alias="freqMin")]
    """
    The minimum transmitter frequency, in megahertz, must satisfy the constraint:
    freqMin ≤ freq ≤ freqMax.
    """

    hardware_sample_rate: Annotated[int, PropertyInfo(alias="hardwareSampleRate")]
    """The hardware sample rate, in bits per second for this transmit channel."""

    max_bandwidth: Annotated[float, PropertyInfo(alias="maxBandwidth")]
    """
    The maximum transmitter bandwidth, in megahertz, must satisfy the constraint:
    minBandwidth ≤ bandwidth ≤ maxBandwidth.
    """

    max_gain: Annotated[float, PropertyInfo(alias="maxGain")]
    """Maximum gain, in decibels."""

    min_bandwidth: Annotated[float, PropertyInfo(alias="minBandwidth")]
    """
    The minimum transmitter bandwidth, in megahertz, must satisfy the constraint:
    minBandwidth ≤ bandwidth ≤ maxBandwidth.
    """

    min_gain: Annotated[float, PropertyInfo(alias="minGain")]
    """Minimum gain, in decibels."""

    sample_rates: Annotated[Iterable[float], PropertyInfo(alias="sampleRates")]
    """The set of sample rates supported by this transmit channel, in bits per second."""


class Antenna(TypedDict, total=False):
    antenna_diameter: Annotated[float, PropertyInfo(alias="antennaDiameter")]
    """For parabolic/dish antennas, the diameter of the antenna in meters."""

    antenna_size: Annotated[Iterable[float], PropertyInfo(alias="antennaSize")]
    """
    Array with 1-2 values specifying the length and width (for rectangular) and just
    length for dipole antennas in meters.
    """

    az_el_fixed: Annotated[bool, PropertyInfo(alias="azElFixed")]
    """A flag to indicate whether the antenna points at a fixed azimuth/elevation."""

    feeds: Iterable[AntennaFeed]
    """The set of antenna feeds for this antenna."""

    fixed_azimuth: Annotated[float, PropertyInfo(alias="fixedAzimuth")]
    """Antenna azimuth, in degrees clockwise from true North, for a fixed antenna."""

    fixed_elevation: Annotated[float, PropertyInfo(alias="fixedElevation")]
    """Antenna elevation, in degrees, for a fixed antenna."""

    max_azimuths: Annotated[Iterable[float], PropertyInfo(alias="maxAzimuths")]
    """Array of maximum azimuths, in degrees."""

    max_elevation: Annotated[float, PropertyInfo(alias="maxElevation")]
    """Maximum elevation, in degrees."""

    min_azimuths: Annotated[Iterable[float], PropertyInfo(alias="minAzimuths")]
    """Array of minimum azimuths, in degrees."""

    min_elevation: Annotated[float, PropertyInfo(alias="minElevation")]
    """Minimum elevation, in degrees."""

    name: str
    """The name of the antenna."""

    receiver_channels: Annotated[Iterable[AntennaReceiverChannel], PropertyInfo(alias="receiverChannels")]
    """The set of receiver channels for this antenna."""

    transmit_channels: Annotated[Iterable[AntennaTransmitChannel], PropertyInfo(alias="transmitChannels")]
    """The set of transmit channels for this antenna."""


class PowerOffset(TypedDict, total=False):
    frequency_band: Annotated[str, PropertyInfo(alias="frequencyBand")]
    """The RF frequency band (e.g. HF, VHF, P, UHF, L, S, C, X, KU, K, KA, V, W, MM)."""

    power_offset: Annotated[float, PropertyInfo(alias="powerOffset")]
    """Power offset, in decibels."""


class Service(TypedDict, total=False):
    name: str
    """The name for this software service."""

    version: str
    """The version for this software service."""


class TtpTechniqueDefinitionParamDefinition(TypedDict, total=False):
    default_value: Annotated[str, PropertyInfo(alias="defaultValue")]
    """Default parameter value used if not overridden in a SEW task definition."""

    max: float
    """Maximum allowable value for a numeric parameter."""

    min: float
    """Minimum allowable value for a numeric parameter."""

    name: str
    """The name of the parameter."""

    optional: bool
    """A flag to specify that a parameter is optional."""

    type: str
    """The type of parameter (e.g. STRING, DOUBLE, INT, LIST)."""

    units: str
    """Units (degrees, seconds, decibels, etc.) for a numeric parameter."""

    valid_values: Annotated[SequenceNotStr[str], PropertyInfo(alias="validValues")]
    """Valid values for strictly defined parameters."""


class TtpTechniqueDefinition(TypedDict, total=False):
    name: str
    """The EW Emitter system technique name."""

    param_definitions: Annotated[
        Iterable[TtpTechniqueDefinitionParamDefinition], PropertyInfo(alias="paramDefinitions")
    ]
    """The set of required/optional parameters for this technique."""


class Ttp(TypedDict, total=False):
    output_signal_name: Annotated[str, PropertyInfo(alias="outputSignalName")]
    """The name of the output signal."""

    technique_definitions: Annotated[Iterable[TtpTechniqueDefinition], PropertyInfo(alias="techniqueDefinitions")]
    """The set of TTPs affected by this signal."""
