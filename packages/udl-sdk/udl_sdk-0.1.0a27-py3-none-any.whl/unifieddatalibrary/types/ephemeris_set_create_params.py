# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._types import SequenceNotStr
from .._utils import PropertyInfo

__all__ = ["EphemerisSetCreateParams", "EphemerisList"]


class EphemerisSetCreateParams(TypedDict, total=False):
    category: Required[str]
    """The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL)."""

    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    num_points: Required[Annotated[int, PropertyInfo(alias="numPoints")]]
    """Number of points contained in the ephemeris."""

    point_end_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="pointEndTime", format="iso8601")]]
    """End time/last time point of the ephemeris, in ISO 8601 UTC format."""

    point_start_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="pointStartTime", format="iso8601")]]
    """Start time/first time point of the ephemeris, in ISO 8601 UTC format."""

    source: Required[str]
    """Source of the data."""

    type: Required[str]
    """
    The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN,
    ROUTINE, SCREENING).
    """

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    b_dot: Annotated[float, PropertyInfo(alias="bDot")]
    """First derivative of ballistic coefficient (m^2/kg-s)."""

    cent_body: Annotated[str, PropertyInfo(alias="centBody")]
    """The Central Body of the ephemeris.

    Assumed to be Earth, unless otherwise indicated.
    """

    comments: str
    """Additional source provided comments associated with the ephemeris."""

    cov_reference_frame: Annotated[
        Literal["J2000", "UVW", "EFG/TDR", "ECR/ECEF", "TEME", "GCRF"], PropertyInfo(alias="covReferenceFrame")
    ]
    """The reference frame of the covariance matrix elements.

    If the covReferenceFrame is null it is assumed to be J2000.
    """

    description: str
    """Notes/description of the provided ephemeris.

    A value of DSTOP signifies the ephemeris were generated using the last
    observation available.
    """

    descriptor: str
    """Optional source-provided and searchable metadata or descriptor of the data."""

    drag_model: Annotated[str, PropertyInfo(alias="dragModel")]
    """Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.)."""

    edr: float
    """Model parameter value for energy dissipation rate (EDR), expressed in w/kg."""

    ephemeris_list: Annotated[Iterable[EphemerisList], PropertyInfo(alias="ephemerisList")]
    """The list of ephemeris states belonging to the EphemerisSet.

    Each ephemeris point is associated with a parent Ephemeris Set via the
    EphemerisSet ID (esId).
    """

    filename: str
    """
    Filename of the raw file used to provide the ephemeris data including filetype
    extension, if applicable. This file may be retrieved using the 'getFile'
    operation as specified in the 'EphemerisSet' OpenAPI docs.
    """

    geopotential_model: Annotated[str, PropertyInfo(alias="geopotentialModel")]
    """Geopotential model used in ephemeris generation (e.g.

    EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn
    degree/order tesserals (e.g. EGM-96 24Z,24T).
    """

    has_accel: Annotated[bool, PropertyInfo(alias="hasAccel")]
    """Boolean indicating whether acceleration data is provided with the ephemeris."""

    has_cov: Annotated[bool, PropertyInfo(alias="hasCov")]
    """Boolean indicating whether covariance data is provided with the ephemeris."""

    has_mnvr: Annotated[bool, PropertyInfo(alias="hasMnvr")]
    """Boolean indicating whether maneuver(s) are incorporated into the ephemeris."""

    id_maneuvers: Annotated[SequenceNotStr[str], PropertyInfo(alias="idManeuvers")]
    """Array of the maneuver IDs of all maneuvers incorporated in the ephemeris."""

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """Unique identifier of the primary satellite on-orbit object."""

    id_state_vector: Annotated[str, PropertyInfo(alias="idStateVector")]
    """ID of the State Vector used to generate the ephemeris."""

    integrator: str
    """Integrator used in ephemeris generation (e.g.

    RK7(8), RK8(9), COWELL, TWO-BODY).
    """

    interpolation: str
    """The recommended interpolation method for the ephemeris data."""

    interpolation_degree: Annotated[int, PropertyInfo(alias="interpolationDegree")]
    """The recommended interpolation degree for the ephemeris data."""

    lunar_solar: Annotated[bool, PropertyInfo(alias="lunarSolar")]
    """Boolean indicating use of lunar/solar data in ephemeris generation."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """
    Optional identifier provided by ephemeris source to indicate the target object
    of this ephemeris. This may be an internal identifier and not necessarily map to
    a valid satellite number.
    """

    pedigree: str
    """The pedigree of the ephemeris or source data used for ephemeris generation (e.g.

    DOPPLER, GPS, HYBRID, PROPAGATED, RANGING, SLR).
    """

    reference_frame: Annotated[
        Literal["J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF"], PropertyInfo(alias="referenceFrame")
    ]
    """The reference frame of the cartesian orbital states.

    If the referenceFrame is null it is assumed to be J2000.
    """

    sat_no: Annotated[int, PropertyInfo(alias="satNo")]
    """Satellite/catalog number of the target on-orbit object."""

    solid_earth_tides: Annotated[bool, PropertyInfo(alias="solidEarthTides")]
    """Boolean indicating use of solid earth tide data in ephemeris generation."""

    step_size: Annotated[int, PropertyInfo(alias="stepSize")]
    """Ephemeris step size, in seconds."""

    tags: SequenceNotStr[str]
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    transaction_id: Annotated[str, PropertyInfo(alias="transactionId")]
    """
    Optional identifier to track a commercial or marketplace transaction executed to
    produce this data.
    """

    usable_end_time: Annotated[Union[str, datetime], PropertyInfo(alias="usableEndTime", format="iso8601")]
    """
    Optional end time of the usable time span for the ephemeris data, in ISO 8601
    UTC format with microsecond precision.
    """

    usable_start_time: Annotated[Union[str, datetime], PropertyInfo(alias="usableStartTime", format="iso8601")]
    """
    Optional start time of the usable time span for the ephemeris data, in ISO 8601
    UTC format with microsecond precision.
    """


class EphemerisList(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    source: Required[str]
    """Source of the data."""

    ts: Required[Annotated[Union[str, datetime], PropertyInfo(format="iso8601")]]
    """Time associated with the Ephemeris Point, in ISO8601 UTC format."""

    xpos: Required[float]
    """
    Cartesian X position of target, in km, in the specified EphemerisSet
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    xvel: Required[float]
    """
    Cartesian X velocity of target, in km/sec, in the specified EphemerisSet
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    ypos: Required[float]
    """
    Cartesian Y position of target, in km, in the specified EphemerisSet
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    yvel: Required[float]
    """
    Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    zpos: Required[float]
    """
    Cartesian Z position of target, in km, in the specified EphemerisSet
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    zvel: Required[float]
    """
    Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    cov: Iterable[float]
    """
    Covariance matrix, in kilometer and second based units, in the specified
    Ephemeris Set covReferenceFrame. If the covReferenceFrame from the EphemerisSet
    table is null it is assumed to be J2000. The array values represent the lower
    triangular half of the position-velocity covariance matrix. The size of the
    covariance matrix is dynamic, depending on whether the covariance for position
    only or position & velocity. The covariance elements are position dependent
    within the array with values ordered as follows:

    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;

    x&nbsp;&nbsp;&nbsp;&nbsp;1

    y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3

    z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6

    x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10

    y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15

    z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;
    21

    The array containing the covariance matrix elements will be of length 6 for
    position only covariance, or length 21 for position-velocity covariance. The cov
    array should contain only the lower left triangle values from top left down to
    bottom right, in order.
    """

    es_id: Annotated[str, PropertyInfo(alias="esId")]
    """Unique identifier of the parent EphemerisSet, auto-generated by the system.

    The esId (ephemerisSet id) is used to identify all individual ephemeris states
    associated with a parent ephemerisSet.
    """

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """Unique identifier of the on-orbit satellite object."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """
    Optional identifier provided by ephemeris source to indicate the target object
    of this ephemeris. This may be an internal identifier and not necessarily map to
    a valid satellite number.
    """

    xaccel: float
    """
    Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    yaccel: float
    """
    Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    zaccel: float
    """
    Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """
