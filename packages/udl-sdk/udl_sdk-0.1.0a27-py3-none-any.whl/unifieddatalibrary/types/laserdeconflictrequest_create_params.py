# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._types import SequenceNotStr
from .._utils import PropertyInfo

__all__ = [
    "LaserdeconflictrequestCreateParams",
    "FixedPoint",
    "LaserDeconflictTarget",
    "LaserDeconflictTargetFixedPoint",
]


class LaserdeconflictrequestCreateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    end_date: Required[Annotated[Union[str, datetime], PropertyInfo(alias="endDate", format="iso8601")]]
    """
    End date of the time windows associated with this LaserDeconflictRequest, in ISO
    8601 UTC format with millisecond precision.
    """

    id_laser_emitters: Required[Annotated[SequenceNotStr[str], PropertyInfo(alias="idLaserEmitters")]]
    """
    A list containing the id strings of the LaserEmitter records in UDL detailing
    the physical parameters of each laser/emitter operationally involved with this
    request. All laser/emitter components must be accurately described using the
    LaserEmitter schema and ingested into the UDL LaserEmitter service before
    creating a LaserDeconflictRequest. Users should create new LaserEmitter records
    for non-existent emitters and update existing records for any modifications.
    """

    num_targets: Required[Annotated[int, PropertyInfo(alias="numTargets")]]
    """The number of targets included in this request."""

    request_id: Required[Annotated[str, PropertyInfo(alias="requestId")]]
    """External identifier for this LaserDeconflictRequest record."""

    request_ts: Required[Annotated[Union[str, datetime], PropertyInfo(alias="requestTs", format="iso8601")]]
    """
    The datetime that this LaserDeconflictRequest record was created, in ISO 8601
    UTC format with millisecond precision.
    """

    source: Required[str]
    """Source of the data."""

    start_date: Required[Annotated[Union[str, datetime], PropertyInfo(alias="startDate", format="iso8601")]]
    """
    Start date of the time windows associated with this LaserDeconflictRequest, in
    ISO 8601 UTC format with millisecond precision.
    """

    id: str
    """
    Unique identifier of the record, auto-generated by the system if not provided on
    create operations.
    """

    centerline_azimuth: Annotated[float, PropertyInfo(alias="centerlineAzimuth")]
    """
    The azimuth angle of the centerline of the geospatial box that confines
    positions of the laser platform, in degrees.
    """

    centerline_elevation: Annotated[float, PropertyInfo(alias="centerlineElevation")]
    """
    The elevation angle of the centerline of the geospatial box that confines the
    positions of the laser platform, in degrees.
    """

    default_cha: Annotated[float, PropertyInfo(alias="defaultCHA")]
    """The half-angle of the safety cone of the laser beam, in degrees."""

    enable_dss: Annotated[bool, PropertyInfo(alias="enableDSS")]
    """Boolean enabling Dynamic Satellite Susceptibility (DSS) algorithms."""

    fixed_points: Annotated[Iterable[FixedPoint], PropertyInfo(alias="fixedPoints")]
    """
    A collection of latitude, longitude, and altitude fields which can be used to
    specify the geometry of the coordinate space in which the laser platform(s) will
    be operational for this request. For example, a BOX_2_WAYPOINTS would include
    two data points, while a BOX_4_SURFACE_POINTS would include four data points.
    """

    geopotential_model: Annotated[str, PropertyInfo(alias="geopotentialModel")]
    """
    Indicates the geopotential model used in the propagation calculation for this
    request (e.g. EGM-96, WGS-84, WGS-72, WGS66, WGS60, JGM-2, or GEM-T3).
    """

    laser_deconflict_targets: Annotated[Iterable[LaserDeconflictTarget], PropertyInfo(alias="laserDeconflictTargets")]
    """
    A list containing all laser illumination target object specifications for which
    deconflictions must be calculated, as planned for this request.
    """

    laser_system_name: Annotated[str, PropertyInfo(alias="laserSystemName")]
    """The name of the laser/beam director system.

    The Laser Clearinghouse will append identifiers to the name using standard
    conventions.
    """

    length_centerline: Annotated[float, PropertyInfo(alias="lengthCenterline")]
    """
    The length of the centerline that passes through the center point of the
    geospatial box that confines the positions of the laser platform, in kilometers.
    """

    length_left_right: Annotated[float, PropertyInfo(alias="lengthLeftRight")]
    """
    Specifies the length of the horizontal dimension of the geospatial box that
    confines the positions of the laser platform, in kilometers.
    """

    length_up_down: Annotated[float, PropertyInfo(alias="lengthUpDown")]
    """
    Specifies the length of the vertical dimension of the geospatial box that
    confines the positions of the laser platform, in kilometers.
    """

    maximum_height: Annotated[float, PropertyInfo(alias="maximumHeight")]
    """
    The maximum laser operating altitude specified as the height above/below the
    WGS84 ellipsoid where the laser is omitted from, in kilometers.
    """

    minimum_height: Annotated[float, PropertyInfo(alias="minimumHeight")]
    """
    The minimum laser operating altitude specified as the height above/below the
    WGS84 ellipsoid where the laser is omitted from, in kilometers.
    """

    mission_name: Annotated[str, PropertyInfo(alias="missionName")]
    """The name of the mission with which this LaserDeconflictRequest is associated."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """
    Optional identifier provided by the source provider to indicate the on-orbit
    laser platform. This may be an internal identifier and not necessarily map to a
    valid satellite number.
    """

    platform_location_name: Annotated[str, PropertyInfo(alias="platformLocationName")]
    """The name of the laser platform."""

    platform_location_type: Annotated[str, PropertyInfo(alias="platformLocationType")]
    """
    Indicates the type of location(s) the laser platform will be operational for
    this request (BOX_2_WAYPOINTS, BOX_4_SURFACE_POINTS, BOX_CENTER_POINT_LINE,
    EXTERNAL_EPHEMERIS, FIXED_POINT, SATELLITE).
    """

    program_id: Annotated[str, PropertyInfo(alias="programId")]
    """
    External identifier for the program that is responsible for this
    LaserDeconflictRequest.
    """

    propagator: str
    """
    The type of propagator utilized in the deconfliction/predictive avoidance
    calculation.
    """

    protect_list: Annotated[Iterable[int], PropertyInfo(alias="protectList")]
    """
    A list of satellite/catalog numbers that should be protected from any and all
    incidence of laser illumination for the duration of this request.
    """

    sat_no: Annotated[int, PropertyInfo(alias="satNo")]
    """The satellite/catalog number of the on-orbit laser platform."""

    source_enabled: Annotated[bool, PropertyInfo(alias="sourceEnabled")]
    """
    Boolean indicating whether error growth of the laser beam is enabled for this
    request.
    """

    status: str
    """
    Status of this request (APPROVED, COMPLETE_WITH_ERRORS, COMPLETE_WITH_WARNINGS,
    FAILURE, IN_PROGRESS, REQUESTED, SUCCESS).
    """

    tags: SequenceNotStr[str]
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    target_enabled: Annotated[bool, PropertyInfo(alias="targetEnabled")]
    """Boolean indicating whether target error growth is enabled for this request."""

    target_type: Annotated[str, PropertyInfo(alias="targetType")]
    """
    The target type that concerns this request (BOX_2_WAYPOINTS,
    BOX_4_SURFACE_POINTS, BOX_CENTER_POINT_LINE, EXTERNAL_EPHEMERIS, FIXED_POINT,
    SATELLITE).
    """

    transaction_id: Annotated[str, PropertyInfo(alias="transactionId")]
    """
    Optional identifier to track a commercial or marketplace transaction executed to
    produce this data.
    """

    treat_earth_as: Annotated[str, PropertyInfo(alias="treatEarthAs")]
    """
    Indicates the treatment of earth (INVISIBLE, VICTIM, SHIELD) for this
    LaserDeconflictRequest record.
    """

    use_field_of_regard: Annotated[bool, PropertyInfo(alias="useFieldOfRegard")]
    """
    Boolean indicating that, for deconfliction events in which the potential target
    is an optical imaging satellite, line of sight computation between target and
    source is ensured when the source emitter is contained within the field of
    regard (field of view) of the satellite's optical telescope.
    """

    victim_enabled: Annotated[bool, PropertyInfo(alias="victimEnabled")]
    """
    Boolean indicating whether victim error growth is enabled as input to the
    deconfliction calculations for this request.
    """


class FixedPoint(TypedDict, total=False):
    latitude: Required[float]
    """WGS84 latitude of a point, in degrees.

    -90 to 90 degrees (negative values south of equator).
    """

    longitude: Required[float]
    """WGS84 longitude of a point, in degrees.

    -180 to 180 degrees (negative values west of Prime Meridian).
    """

    height: float
    """Point height as measured from sea level, ranging from -300 to 1000 kilometers."""


class LaserDeconflictTargetFixedPoint(TypedDict, total=False):
    latitude: Required[float]
    """WGS84 latitude of a point, in degrees.

    -90 to 90 degrees (negative values south of equator).
    """

    longitude: Required[float]
    """WGS84 longitude of a point, in degrees.

    -180 to 180 degrees (negative values west of Prime Meridian).
    """

    height: float
    """Point height as measured from sea level, ranging from -300 to 1000 kilometers."""


class LaserDeconflictTarget(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    source: Required[str]
    """Source of the data."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    azimuth: float
    """The expected or directed azimuth angle of this target, in degrees."""

    azimuth_end: Annotated[float, PropertyInfo(alias="azimuthEnd")]
    """
    The secondary azimuth angle specifying the end of the azimuthal range that
    defines this target area, in degrees.
    """

    azimuth_increment: Annotated[float, PropertyInfo(alias="azimuthIncrement")]
    """
    The incremental change in angle over the given azimuthal range at which the
    target area will be engaged, in degrees.
    """

    azimuth_start: Annotated[float, PropertyInfo(alias="azimuthStart")]
    """
    The initial azimuth angle specifying the start of the azimuthal range that
    defines this target area, in degrees.
    """

    centerline_azimuth: Annotated[float, PropertyInfo(alias="centerlineAzimuth")]
    """
    The azimuth angle of the centerline of the geospatial box that confines
    positions of the target, in degrees.
    """

    centerline_elevation: Annotated[float, PropertyInfo(alias="centerlineElevation")]
    """
    The elevation angle of the centerline of the geospatial box that confines the
    positions of the target, in degrees.
    """

    declination: float
    """The expected or directed declination angle of this target, in degrees."""

    elevation: float
    """The expected or directed elevation angle of this target, in degrees."""

    elevation_end: Annotated[float, PropertyInfo(alias="elevationEnd")]
    """
    The secondary elevation angle specifying the end of the elevation range that
    defines this target area, in degrees.
    """

    elevation_increment: Annotated[float, PropertyInfo(alias="elevationIncrement")]
    """
    The incremental change in angle across the given elevation range at which the
    target area will be engaged, in degrees.
    """

    elevation_start: Annotated[float, PropertyInfo(alias="elevationStart")]
    """
    The initial elevation angle specifying the start of the elevation range that
    defines this target area, in degrees.
    """

    fixed_points: Annotated[Iterable[LaserDeconflictTargetFixedPoint], PropertyInfo(alias="fixedPoints")]
    """
    A collection of latitude, longitude, and altitude fields which can be used to
    specify the geometry of the coordinate space of this target. For example, a
    BOX_2_WAYPOINTS would include two data points, while a BOX_4_SURFACE_POINTS
    would include four data points.
    """

    id_laser_deconflict_request: Annotated[str, PropertyInfo(alias="idLaserDeconflictRequest")]
    """
    Unique identifier of the parent LaserDeconflictRequest record containing this
    target.
    """

    length_centerline: Annotated[float, PropertyInfo(alias="lengthCenterline")]
    """
    The length of the centerline that passes through the center point of the
    geospatial box that confines the positions of the target, in kilometers.
    """

    length_left_right: Annotated[float, PropertyInfo(alias="lengthLeftRight")]
    """
    Specifies the length of the horizontal dimension of the geospatial box that
    confines the positions of the target, in kilometers.
    """

    length_up_down: Annotated[float, PropertyInfo(alias="lengthUpDown")]
    """
    Specifies the length of the vertical dimension of the geospatial box that
    confines the positions of the target, in kilometers.
    """

    maximum_height: Annotated[float, PropertyInfo(alias="maximumHeight")]
    """
    The maximum target altitude specified as the height above/below the WGS84
    ellipsoid, in kilometers.
    """

    minimum_height: Annotated[float, PropertyInfo(alias="minimumHeight")]
    """
    The minimum target altitude specified as the height above/below the WGS84
    ellipsoid, in kilometers.
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    ra: float
    """The expected or directed right ascension angle of this target, in degrees."""

    solar_system_body: Annotated[str, PropertyInfo(alias="solarSystemBody")]
    """
    The name of the target celestial body in Earth's solar system (JUPITER, MARS,
    MERCURY, MOON, NEPTUNE, PLUTO, SATURN, SUN, URANUS, VENUS).
    """

    star_number: Annotated[int, PropertyInfo(alias="starNumber")]
    """The reference number of the target star."""

    target_number: Annotated[int, PropertyInfo(alias="targetNumber")]
    """The number assigned to this target instance for a request."""

    target_object_no: Annotated[int, PropertyInfo(alias="targetObjectNo")]
    """If this is an on-orbit target, this is the satellite/catalog number."""
