# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo

__all__ = ["SeradataRadarPayloadUpdateParams"]


class SeradataRadarPayloadUpdateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    source: Required[str]
    """Source of the data."""

    spacecraft_id: Required[Annotated[str, PropertyInfo(alias="spacecraftId")]]
    """Seradata ID of the spacecraft (SeradataSpacecraftDetails ID)."""

    body_id: Annotated[str, PropertyInfo(alias="id")]
    """Unique identifier of the record, auto-generated by the system."""

    bandwidth: float
    """Radar bandwidth in mega hertz."""

    best_resolution: Annotated[float, PropertyInfo(alias="bestResolution")]
    """Best resolution in meters."""

    category: str
    """Radar category, e.g. SAR, Surface Search, etc."""

    constellation_interferometric_capability: Annotated[
        str, PropertyInfo(alias="constellationInterferometricCapability")
    ]
    """Constellation interferometric capability."""

    duty_cycle: Annotated[str, PropertyInfo(alias="dutyCycle")]
    """Duty cycle."""

    field_of_regard: Annotated[float, PropertyInfo(alias="fieldOfRegard")]
    """Field of regard of this radar in degrees."""

    field_of_view: Annotated[float, PropertyInfo(alias="fieldOfView")]
    """Field of view of this radar in kilometers."""

    frequency: float
    """Frequency in giga hertz."""

    frequency_band: Annotated[str, PropertyInfo(alias="frequencyBand")]
    """Name of the band of this RF range (e.g.

    X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more
    details and descriptions of each band name.
    """

    ground_station_locations: Annotated[str, PropertyInfo(alias="groundStationLocations")]
    """Ground Station Locations for this payload."""

    ground_stations: Annotated[str, PropertyInfo(alias="groundStations")]
    """Ground Station info for this payload."""

    hosted_for_company_org_id: Annotated[str, PropertyInfo(alias="hostedForCompanyOrgId")]
    """Hosted for company/Organization Id."""

    id_sensor: Annotated[str, PropertyInfo(alias="idSensor")]
    """UUID of the Sensor record."""

    manufacturer_org_id: Annotated[str, PropertyInfo(alias="manufacturerOrgId")]
    """Manufacturer Organization Id."""

    name: str
    """Sensor name from Seradata, e.g.

    ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
    """

    notes: str
    """Payload notes."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    partner_spacecraft: Annotated[str, PropertyInfo(alias="partnerSpacecraft")]
    """Partner seradata-spacecraft."""

    pointing_method: Annotated[str, PropertyInfo(alias="pointingMethod")]
    """Point method for this radar, e.g. Spacecraft."""

    receive_polarization: Annotated[str, PropertyInfo(alias="receivePolarization")]
    """Receive polarization, e.g. Lin Dual, Lin vert, etc."""

    recorder_size: Annotated[str, PropertyInfo(alias="recorderSize")]
    """Recorder size, e.g. 256."""

    swath_width: Annotated[float, PropertyInfo(alias="swathWidth")]
    """Swath width in kilometers."""

    transmit_polarization: Annotated[str, PropertyInfo(alias="transmitPolarization")]
    """Transmit polarization, e.g. Lin Dual, Lin vert, etc."""

    wave_length: Annotated[float, PropertyInfo(alias="waveLength")]
    """Wave length in meters."""
