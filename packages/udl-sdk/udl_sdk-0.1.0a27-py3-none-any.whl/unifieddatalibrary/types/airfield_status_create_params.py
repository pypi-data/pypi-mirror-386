# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._types import SequenceNotStr
from .._utils import PropertyInfo

__all__ = ["AirfieldStatusCreateParams"]


class AirfieldStatusCreateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_airfield: Required[Annotated[str, PropertyInfo(alias="idAirfield")]]
    """Unique identifier of the Airfield for which this status is referencing."""

    source: Required[str]
    """Source of the data."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    alt_airfield_id: Annotated[str, PropertyInfo(alias="altAirfieldId")]
    """Alternate airfield identifier provided by the source."""

    approved_by: Annotated[str, PropertyInfo(alias="approvedBy")]
    """The name of the person who approved the airfield survey review."""

    approved_date: Annotated[Union[str, datetime], PropertyInfo(alias="approvedDate", format="iso8601")]
    """
    The date that survey review changes were approved for this airfield, in ISO 8601
    UTC format with millisecond precision.
    """

    arff_cat: Annotated[str, PropertyInfo(alias="arffCat")]
    """
    The category of aircraft rescue and fire fighting (ARFF) services that are
    currently available at the airfield. Entries should include the code (FAA or
    ICAO) and the category.
    """

    cargo_mog: Annotated[int, PropertyInfo(alias="cargoMOG")]
    """
    Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can
    be serviced simultaneously based on spacing and manpower at the time of status.
    """

    fleet_service_mog: Annotated[int, PropertyInfo(alias="fleetServiceMOG")]
    """
    Maximum on ground (MOG) number of fleet aircraft that can be serviced
    simultaneously based on spacing and manpower at the time of status.
    """

    fuel_mog: Annotated[int, PropertyInfo(alias="fuelMOG")]
    """
    Maximum on ground (MOG) number of aircraft that can be simultaneously refueled
    based on spacing and manpower at the time of status.
    """

    fuel_qtys: Annotated[Iterable[float], PropertyInfo(alias="fuelQtys")]
    """Array of quantities for each fuel type at the airfield, in kilograms.

    The values in this array must correspond to the position index in fuelTypes.
    This array must be the same length as fuelTypes.
    """

    fuel_types: Annotated[SequenceNotStr[str], PropertyInfo(alias="fuelTypes")]
    """Array of fuel types available at the airfield.

    This array must be the same length as fuelQtys.
    """

    gse_time: Annotated[int, PropertyInfo(alias="gseTime")]
    """The expected time to receive ground support equipment (e.g.

    power units, air units, cables, hoses, etc.), in minutes.
    """

    med_cap: Annotated[str, PropertyInfo(alias="medCap")]
    """The level of medical support and capabilities available at the airfield."""

    message: str
    """Description of the current status of the airfield."""

    mhe_qtys: Annotated[Iterable[int], PropertyInfo(alias="mheQtys")]
    """Array of quantities for each material handling equipment types at the airfield.

    The values in this array must correspond to the position index in mheTypes. This
    array must be the same length as mheTypes.
    """

    mhe_types: Annotated[SequenceNotStr[str], PropertyInfo(alias="mheTypes")]
    """Array of material handling equipment types at the airfield.

    This array must be the same length as mheQtys.
    """

    mx_mog: Annotated[int, PropertyInfo(alias="mxMOG")]
    """
    Maximum on ground (MOG) number of aircraft that can be simultaneously ground
    handled for standard maintenance based on spacing and manpower at the time of
    status.
    """

    narrow_parking_mog: Annotated[int, PropertyInfo(alias="narrowParkingMOG")]
    """
    Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing
    and manpower at the time of status.
    """

    narrow_working_mog: Annotated[int, PropertyInfo(alias="narrowWorkingMOG")]
    """
    Maximum on ground (MOG) number of working narrow-body aircraft based on spacing
    and manpower at the time of status.
    """

    num_cog: Annotated[int, PropertyInfo(alias="numCOG")]
    """The number of aircraft that are currently on ground (COG) at the airfield."""

    operating_mog: Annotated[int, PropertyInfo(alias="operatingMOG")]
    """
    Maximum on ground (MOG) number of aircraft due to items not directly related to
    the airfield infrastructure or aircraft servicing capability based on spacing
    and manpower at the time of status.
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    passenger_service_mog: Annotated[int, PropertyInfo(alias="passengerServiceMOG")]
    """
    Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that
    can be serviced simultaneously based on spacing and manpower at the time of
    status.
    """

    pri_freq: Annotated[float, PropertyInfo(alias="priFreq")]
    """The primary frequency which the airfield is currently operating, in megahertz."""

    pri_rwy_num: Annotated[str, PropertyInfo(alias="priRwyNum")]
    """The number or ID of primary runway at the airfield."""

    reviewed_by: Annotated[str, PropertyInfo(alias="reviewedBy")]
    """The name of the person who reviewed the airfield survey."""

    reviewed_date: Annotated[Union[str, datetime], PropertyInfo(alias="reviewedDate", format="iso8601")]
    """
    The date the airfield survey was reviewed, in ISO 8601 UTC format with
    millisecond precision.
    """

    rwy_cond_reading: Annotated[int, PropertyInfo(alias="rwyCondReading")]
    """
    The primary runway condition reading value used for determining runway braking
    action, from 0 to 26. A value of 0 indicates braking action is poor or
    non-existent, where a value of 26 indicates braking action is good.
    """

    rwy_friction_factor: Annotated[int, PropertyInfo(alias="rwyFrictionFactor")]
    """
    The primary runway friction factor which is dependent on the surface friction
    between the tires of the aircraft and the runway surface, from 0 to 100. A lower
    number indicates less friction and less braking response.
    """

    rwy_markings: Annotated[SequenceNotStr[str], PropertyInfo(alias="rwyMarkings")]
    """Array of markings currently on the primary runway."""

    slot_types_req: Annotated[SequenceNotStr[str], PropertyInfo(alias="slotTypesReq")]
    """
    Array of slot types that an airfield requires a particular aircraft provide in
    order to consume a slot at this location.
    """

    survey_date: Annotated[Union[str, datetime], PropertyInfo(alias="surveyDate", format="iso8601")]
    """
    The date the airfield survey was performed, in ISO 8601 UTC format with
    millisecond precision.
    """

    wide_parking_mog: Annotated[int, PropertyInfo(alias="wideParkingMOG")]
    """
    Maximum on ground (MOG) number of parking wide-body aircraft based on spacing
    and manpower at the time of status. Additional information about this field as
    it pertains to specific aircraft type may be available in an associated
    SiteOperations record.
    """

    wide_working_mog: Annotated[int, PropertyInfo(alias="wideWorkingMOG")]
    """
    Maximum on ground (MOG) number of working wide-body aircraft based on spacing
    and manpower at the time of status. Additional information about this field as
    it pertains to specific aircraft type may be available in an associated
    SiteOperations record.
    """
