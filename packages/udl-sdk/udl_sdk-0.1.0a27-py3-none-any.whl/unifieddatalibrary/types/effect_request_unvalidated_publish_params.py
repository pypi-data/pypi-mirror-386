# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._types import SequenceNotStr
from .._utils import PropertyInfo

__all__ = ["EffectRequestUnvalidatedPublishParams", "Body"]


class EffectRequestUnvalidatedPublishParams(TypedDict, total=False):
    body: Required[Iterable[Body]]


class Body(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    effect_list: Required[Annotated[SequenceNotStr[str], PropertyInfo(alias="effectList")]]
    """List of effects to be achieved on the target (e.g.

    COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX,
    INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).
    The effects included in this list are connected by implied AND.
    """

    source: Required[str]
    """Source of the data."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    context: str
    """Specific descriptive instantiation of the effect, e.g., playbook to be used."""

    deadline_type: Annotated[str, PropertyInfo(alias="deadlineType")]
    """The indicator of deadline of the bid request (e.g.

    BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.): BETWEEN:&nbsp;Produce
    effect any time between the given start and end times, equal penalty for being
    early or late IMMEDIATE:&nbsp;Start as soon as possible, earlier is always
    better NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty
    for being earlier, no reward for being later NOLATERTHAN:&nbsp;Produce effect no
    later than the given startTime. Large penalty for being later, no reward for
    being even earlier as long as the effect starts by the given time.
    """

    end_time: Annotated[Union[str, datetime], PropertyInfo(alias="endTime", format="iso8601")]
    """The time the effect should end, in ISO8601 UTC format."""

    external_request_id: Annotated[str, PropertyInfo(alias="externalRequestId")]
    """The extenal system identifier of this request. A human readable unique id."""

    metric_types: Annotated[SequenceNotStr[str], PropertyInfo(alias="metricTypes")]
    """Array of the the metric classes to be evaluated (e.g.

    Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).
    See the associated 'metricWeights' array for the weighting values, positionally
    corresponding to these types. The 'metricTypes' and 'metricWeights' arrays must
    match in size.
    """

    metric_weights: Annotated[Iterable[float], PropertyInfo(alias="metricWeights")]
    """Array of the weights for the metric in the final evaluation score.

    Normalized (0 to 1). See the associated 'metricTypes' array for the metric
    classes, positionally corresponding to these values. The 'metricTypes' and
    'metricWeights' arrays must match in size.
    """

    model_class: Annotated[str, PropertyInfo(alias="modelClass")]
    """The type or class of the preference model used to evaluate this offer."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    priority: str
    """The priority (LOW, MEDIUM, HIGH) of this request."""

    start_time: Annotated[Union[str, datetime], PropertyInfo(alias="startTime", format="iso8601")]
    """The time the effect should start, in ISO8601 UTC format."""

    state: str
    """State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.)."""

    target_src_id: Annotated[str, PropertyInfo(alias="targetSrcId")]
    """
    The record ID, depending on the type identified in targetSrcType, of the
    requested target. This identifier corresponds to either poi.poiid or track.trkId
    from their respective schemas.
    """

    target_src_type: Annotated[str, PropertyInfo(alias="targetSrcType")]
    """The source type of the targetId identifier (POI, TRACK)."""
