# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal, Required, Annotated, TypedDict

from .._types import SequenceNotStr
from .._utils import PropertyInfo

__all__ = ["EngineDetailUpdateParams"]


class EngineDetailUpdateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_engine: Required[Annotated[str, PropertyInfo(alias="idEngine")]]
    """Identifier of the parent engine record."""

    source: Required[str]
    """Source of the data."""

    body_id: Annotated[str, PropertyInfo(alias="id")]
    """Unique identifier of the record, auto-generated by the system."""

    burn_time: Annotated[float, PropertyInfo(alias="burnTime")]
    """Launch engine maximum burn time in seconds."""

    chamber_pressure: Annotated[float, PropertyInfo(alias="chamberPressure")]
    """Engine chamber pressure in bars."""

    characteristic_type: Annotated[str, PropertyInfo(alias="characteristicType")]
    """Engine characteristic type (e.g.

    Electric, Mono-propellant, Bi-propellant, etc.).
    """

    cycle_type: Annotated[str, PropertyInfo(alias="cycleType")]
    """Engine cycle type (e.g.

    Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
    """

    family: str
    """Engine type or family."""

    manufacturer_org_id: Annotated[str, PropertyInfo(alias="manufacturerOrgId")]
    """Organization ID of the engine manufacturer."""

    max_firings: Annotated[int, PropertyInfo(alias="maxFirings")]
    """Engine maximum number of firings."""

    notes: str
    """Notes/Description of the engine."""

    nozzle_expansion_ratio: Annotated[float, PropertyInfo(alias="nozzleExpansionRatio")]
    """Engine nozzle expansion ratio."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    oxidizer: str
    """Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc)."""

    propellant: str
    """Propellant/fuel type of the engine (e.g.

    Liquid Hydrogen, Kerosene, Aerozine, etc).
    """

    sea_level_thrust: Annotated[float, PropertyInfo(alias="seaLevelThrust")]
    """Engine maximum thrust at sea level in Kilo-Newtons."""

    specific_impulse: Annotated[float, PropertyInfo(alias="specificImpulse")]
    """Launch engine specific impulse in seconds."""

    tags: SequenceNotStr[str]
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    vacuum_thrust: Annotated[float, PropertyInfo(alias="vacuumThrust")]
    """Engine maximum thrust in a vacuum in Kilo-Newtons."""
