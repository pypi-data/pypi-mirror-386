# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo

__all__ = ["SeradataSpacecraftDetailCreateParams"]


class SeradataSpacecraftDetailCreateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Spacecraft name."""

    source: Required[str]
    """Source of the data."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    additional_missions_groups: Annotated[str, PropertyInfo(alias="additionalMissionsGroups")]
    """Spacecraft additional missions and groups."""

    altitude: float
    """Spacecraft latest altitude in km."""

    annual_insured_depreciation_factor: Annotated[float, PropertyInfo(alias="annualInsuredDepreciationFactor")]
    """Annual insured depreciaion factor as a percent fraction."""

    annual_insured_depreciation_factor_estimated: Annotated[
        bool, PropertyInfo(alias="annualInsuredDepreciationFactorEstimated")
    ]
    """
    Boolean indicating if the spacecraft annualInsuredDepreciationFactor is
    estimated.
    """

    apogee: float
    """Apogee in km."""

    bus_id: Annotated[str, PropertyInfo(alias="busId")]
    """Spacecraft Bus ID."""

    capability_lost: Annotated[float, PropertyInfo(alias="capabilityLost")]
    """Total capability lost as a percent fraction."""

    capacity_lost: Annotated[float, PropertyInfo(alias="capacityLost")]
    """Total capacity lost as a percent fraction."""

    catalog_number: Annotated[int, PropertyInfo(alias="catalogNumber")]
    """NORAD satellite number if available."""

    collision_risk_cm: Annotated[float, PropertyInfo(alias="collisionRiskCM")]
    """Spacecraft collision risk 1cm sqm latest."""

    collision_risk_mm: Annotated[float, PropertyInfo(alias="collisionRiskMM")]
    """Spacecraft collision risk 1mm sqm latest."""

    combined_cost_estimated: Annotated[bool, PropertyInfo(alias="combinedCostEstimated")]
    """Boolean indicating if the spacecraft combined new cost is estimated."""

    combined_new_cost: Annotated[float, PropertyInfo(alias="combinedNewCost")]
    """Combined cost of spacecraft at new in M USD."""

    commercial_launch: Annotated[bool, PropertyInfo(alias="commercialLaunch")]
    """Boolean indicating if the launch was commercial."""

    constellation: str
    """Spacecraft constellation."""

    cost_estimated: Annotated[bool, PropertyInfo(alias="costEstimated")]
    """Boolean indicating if the spacecraft cost is estimated."""

    cubesat_dispenser_type: Annotated[str, PropertyInfo(alias="cubesatDispenserType")]
    """Cubesat dispenser type."""

    current_age: Annotated[float, PropertyInfo(alias="currentAge")]
    """Current age in years."""

    date_of_observation: Annotated[Union[str, datetime], PropertyInfo(alias="dateOfObservation", format="iso8601")]
    """Spacecraft date of observation."""

    description: str
    """Description associated with the spacecraft."""

    design_life: Annotated[int, PropertyInfo(alias="designLife")]
    """Spacecraft design life in days."""

    dry_mass: Annotated[float, PropertyInfo(alias="dryMass")]
    """Mass dry in kg."""

    expected_life: Annotated[int, PropertyInfo(alias="expectedLife")]
    """Spacecraft expected life in days."""

    geo_position: Annotated[float, PropertyInfo(alias="geoPosition")]
    """WGS84 longitude of the spacecraftâ€™s latest GEO position, in degrees.

    -180 to 180 degrees (negative values west of Prime Meridian).
    """

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """UUID of the parent Onorbit record, if available."""

    inclination: float
    """Seradata provided inclination in degrees."""

    insurance_losses_total: Annotated[float, PropertyInfo(alias="insuranceLossesTotal")]
    """Spacecraft total insurance losses as a fraction."""

    insurance_notes: Annotated[str, PropertyInfo(alias="insuranceNotes")]
    """Insurance notes for the spacecraft."""

    insurance_premium_at_launch: Annotated[float, PropertyInfo(alias="insurancePremiumAtLaunch")]
    """Insurance premium at launch in M USD."""

    insurance_premium_at_launch_estimated: Annotated[bool, PropertyInfo(alias="insurancePremiumAtLaunchEstimated")]
    """Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated."""

    insured_at_launch: Annotated[bool, PropertyInfo(alias="insuredAtLaunch")]
    """Boolean indicating if the spacecraft was insured at launch."""

    insured_value_at_launch: Annotated[float, PropertyInfo(alias="insuredValueAtLaunch")]
    """Insured value of spacecraft at launch in M USD."""

    insured_value_launch_estimated: Annotated[bool, PropertyInfo(alias="insuredValueLaunchEstimated")]
    """Boolean indicating if the spacecraft insured value at launch is estimated."""

    intl_number: Annotated[str, PropertyInfo(alias="intlNumber")]
    """Seradata international number."""

    lat: float
    """Spacecraft latest latitude in degrees."""

    launch_arranger: Annotated[str, PropertyInfo(alias="launchArranger")]
    """Spacecraft launch arranger."""

    launch_arranger_country: Annotated[str, PropertyInfo(alias="launchArrangerCountry")]
    """Spacecraft launch arranger country."""

    launch_characteristic: Annotated[str, PropertyInfo(alias="launchCharacteristic")]
    """Seradata launch characteristic (e.g. Expendable, Reusable (New), etc)."""

    launch_cost: Annotated[float, PropertyInfo(alias="launchCost")]
    """Cost of launch in M USD."""

    launch_cost_estimated: Annotated[bool, PropertyInfo(alias="launchCostEstimated")]
    """Boolean indicating if the spacecraft launch cost is estimated."""

    launch_country: Annotated[str, PropertyInfo(alias="launchCountry")]
    """Seradata launch country."""

    launch_date: Annotated[Union[str, datetime], PropertyInfo(alias="launchDate", format="iso8601")]
    """Launch date."""

    launch_date_remarks: Annotated[str, PropertyInfo(alias="launchDateRemarks")]
    """Seradata remarks on launch date."""

    launch_id: Annotated[str, PropertyInfo(alias="launchId")]
    """Seradata launch ID."""

    launch_mass: Annotated[float, PropertyInfo(alias="launchMass")]
    """Mass at launch in kg."""

    launch_notes: Annotated[str, PropertyInfo(alias="launchNotes")]
    """Insurance notes for the spacecraft."""

    launch_number: Annotated[str, PropertyInfo(alias="launchNumber")]
    """Seradata launch number."""

    launch_provider: Annotated[str, PropertyInfo(alias="launchProvider")]
    """Seradata launch provider."""

    launch_provider_country: Annotated[str, PropertyInfo(alias="launchProviderCountry")]
    """Seradata launch provider country."""

    launch_provider_flight_number: Annotated[str, PropertyInfo(alias="launchProviderFlightNumber")]
    """Seradata launch vehicle family."""

    launch_site_id: Annotated[str, PropertyInfo(alias="launchSiteId")]
    """Seradata Launch Site ID."""

    launch_site_name: Annotated[str, PropertyInfo(alias="launchSiteName")]
    """Launch Site Name."""

    launch_type: Annotated[str, PropertyInfo(alias="launchType")]
    """Seradata launch type (e.g. Launched, Future, etc)."""

    launch_vehicle_id: Annotated[str, PropertyInfo(alias="launchVehicleId")]
    """Seradata launch ID."""

    leased: bool
    """Boolean indicating if the spacecraft was leased."""

    life_lost: Annotated[float, PropertyInfo(alias="lifeLost")]
    """Spacecraft life lost as a percent fraction."""

    lon: float
    """Spacecraft latest longitude in degrees."""

    mass_category: Annotated[str, PropertyInfo(alias="massCategory")]
    """Mass category (e.g.

    2500 - 3500kg - Large Satellite, 10 - 100 kg - Microsatellite, etc).
    """

    name_at_launch: Annotated[str, PropertyInfo(alias="nameAtLaunch")]
    """Spacecraft name at launch."""

    new_cost: Annotated[float, PropertyInfo(alias="newCost")]
    """Cost of spacecraft at new in M USD."""

    notes: str
    """Notes on the spacecraft."""

    num_humans: Annotated[int, PropertyInfo(alias="numHumans")]
    """Number of humans carried on spacecraft."""

    operator: str
    """Spacecraft operator name."""

    operator_country: Annotated[str, PropertyInfo(alias="operatorCountry")]
    """Spacecraft operator country."""

    orbit_category: Annotated[str, PropertyInfo(alias="orbitCategory")]
    """Spacecraft orbit category (e.g GEO, LEO, etc)."""

    orbit_sub_category: Annotated[str, PropertyInfo(alias="orbitSubCategory")]
    """Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc)."""

    order_date: Annotated[Union[str, datetime], PropertyInfo(alias="orderDate", format="iso8601")]
    """Spacecraft order date."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    owner: str
    """Spacecraft owner name."""

    owner_country: Annotated[str, PropertyInfo(alias="ownerCountry")]
    """Spacecraft owner country."""

    perigee: float
    """Perigee in km."""

    period: float
    """Spacecraft period in minutes."""

    primary_mission_group: Annotated[str, PropertyInfo(alias="primaryMissionGroup")]
    """Spacecraft primary mission and group."""

    prime_manufacturer_org_id: Annotated[str, PropertyInfo(alias="primeManufacturerOrgId")]
    """UUID of the prime manufacturer organization, if available."""

    program_name: Annotated[str, PropertyInfo(alias="programName")]
    """Spacecraft program name."""

    quantity: int
    """Spacecraft quantity."""

    reusable_flights: Annotated[str, PropertyInfo(alias="reusableFlights")]
    """Spacecraft reusable flights."""

    reused_hull_name: Annotated[str, PropertyInfo(alias="reusedHullName")]
    """Spacecraft reused hull name."""

    sector: str
    """Seradata sector (e.g. Commercial, Military, Civil/Other)."""

    serial_number: Annotated[str, PropertyInfo(alias="serialNumber")]
    """Spacecraft serial number."""

    stabilizer: str
    """Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc)."""

    status: str
    """Spacecraft status (e.g.

    Inactive - Retired, Inactive - Re-entered, Active, etc).
    """

    total_claims: Annotated[int, PropertyInfo(alias="totalClaims")]
    """Number of insurance claims for this spacecraft."""

    total_fatalities: Annotated[int, PropertyInfo(alias="totalFatalities")]
    """Number of fatalities related to this spacecraft."""

    total_injuries: Annotated[int, PropertyInfo(alias="totalInjuries")]
    """Number of injuries related to this spacecraft."""

    total_payload_power: Annotated[float, PropertyInfo(alias="totalPayloadPower")]
    """Mass dry in kg."""

    youtube_launch_link: Annotated[str, PropertyInfo(alias="youtubeLaunchLink")]
    """Youtube link of launch."""
