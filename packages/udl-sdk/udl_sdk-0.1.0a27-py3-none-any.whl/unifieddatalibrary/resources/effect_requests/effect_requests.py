# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import date, datetime
from typing_extensions import Literal

import httpx

from ...types import (
    effect_request_list_params,
    effect_request_count_params,
    effect_request_tuple_params,
    effect_request_create_params,
    effect_request_retrieve_params,
    effect_request_create_bulk_params,
    effect_request_unvalidated_publish_params,
)
from .history import (
    HistoryResource,
    AsyncHistoryResource,
    HistoryResourceWithRawResponse,
    AsyncHistoryResourceWithRawResponse,
    HistoryResourceWithStreamingResponse,
    AsyncHistoryResourceWithStreamingResponse,
)
from ..._types import Body, Omit, Query, Headers, NoneType, NotGiven, SequenceNotStr, omit, not_given
from ..._utils import maybe_transform, async_maybe_transform
from ..._compat import cached_property
from ..._resource import SyncAPIResource, AsyncAPIResource
from ..._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ...pagination import SyncOffsetPage, AsyncOffsetPage
from ..._base_client import AsyncPaginator, make_request_options
from ...types.effect_request_list_response import EffectRequestListResponse
from ...types.effect_request_tuple_response import EffectRequestTupleResponse
from ...types.effect_request_retrieve_response import EffectRequestRetrieveResponse
from ...types.effect_request_query_help_response import EffectRequestQueryHelpResponse

__all__ = ["EffectRequestsResource", "AsyncEffectRequestsResource"]


class EffectRequestsResource(SyncAPIResource):
    @cached_property
    def history(self) -> HistoryResource:
        return HistoryResource(self._client)

    @cached_property
    def with_raw_response(self) -> EffectRequestsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return EffectRequestsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> EffectRequestsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return EffectRequestsResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        effect_list: SequenceNotStr[str],
        source: str,
        id: str | Omit = omit,
        context: str | Omit = omit,
        deadline_type: str | Omit = omit,
        end_time: Union[str, datetime] | Omit = omit,
        external_request_id: str | Omit = omit,
        metric_types: SequenceNotStr[str] | Omit = omit,
        metric_weights: Iterable[float] | Omit = omit,
        model_class: str | Omit = omit,
        origin: str | Omit = omit,
        priority: str | Omit = omit,
        start_time: Union[str, datetime] | Omit = omit,
        state: str | Omit = omit,
        target_src_id: str | Omit = omit,
        target_src_type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single EffectRequest as a POST body and ingest into
        the database. This operation is not intended to be used for automated feeds into
        UDL. Data providers should contact the UDL team for specific role assignments
        and for instructions on setting up a permanent feed through an alternate
        mechanism.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          effect_list: List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE,
              DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE,
              MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.). The effects included in this
              list are connected by implied AND.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          context: Specific descriptive instantiation of the effect, e.g., playbook to be used.

          deadline_type: The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE,
              NOEARLIERTHAN, NOLATERTHAN, etc.): BETWEEN:&nbsp;Produce effect any time between
              the given start and end times, equal penalty for being early or late
              IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
              NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for
              being earlier, no reward for being later NOLATERTHAN:&nbsp;Produce effect no
              later than the given startTime. Large penalty for being later, no reward for
              being even earlier as long as the effect starts by the given time.

          end_time: The time the effect should end, in ISO8601 UTC format.

          external_request_id: The extenal system identifier of this request. A human readable unique id.

          metric_types: Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement,
              OpportunityCost, Risk, Timeliness, Unavailable, etc.). See the associated
              'metricWeights' array for the weighting values, positionally corresponding to
              these types. The 'metricTypes' and 'metricWeights' arrays must match in size.

          metric_weights: Array of the weights for the metric in the final evaluation score. Normalized (0
              to 1). See the associated 'metricTypes' array for the metric classes,
              positionally corresponding to these values. The 'metricTypes' and
              'metricWeights' arrays must match in size.

          model_class: The type or class of the preference model used to evaluate this offer.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          priority: The priority (LOW, MEDIUM, HIGH) of this request.

          start_time: The time the effect should start, in ISO8601 UTC format.

          state: State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).

          target_src_id: The record ID, depending on the type identified in targetSrcType, of the
              requested target. This identifier corresponds to either poi.poiid or track.trkId
              from their respective schemas.

          target_src_type: The source type of the targetId identifier (POI, TRACK).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/effectrequest",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "effect_list": effect_list,
                    "source": source,
                    "id": id,
                    "context": context,
                    "deadline_type": deadline_type,
                    "end_time": end_time,
                    "external_request_id": external_request_id,
                    "metric_types": metric_types,
                    "metric_weights": metric_weights,
                    "model_class": model_class,
                    "origin": origin,
                    "priority": priority,
                    "start_time": start_time,
                    "state": state,
                    "target_src_id": target_src_id,
                    "target_src_type": target_src_type,
                },
                effect_request_create_params.EffectRequestCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> EffectRequestRetrieveResponse:
        """
        Service operation to get a single EffectRequest by its unique ID passed as a
        path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/effectrequest/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    effect_request_retrieve_params.EffectRequestRetrieveParams,
                ),
            ),
            cast_to=EffectRequestRetrieveResponse,
        )

    def list(
        self,
        *,
        created_at: Union[str, date],
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SyncOffsetPage[EffectRequestListResponse]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/effectrequest",
            page=SyncOffsetPage[EffectRequestListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "created_at": created_at,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    effect_request_list_params.EffectRequestListParams,
                ),
            ),
            model=EffectRequestListResponse,
        )

    def count(
        self,
        *,
        created_at: Union[str, date],
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return self._get(
            "/udl/effectrequest/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "created_at": created_at,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    effect_request_count_params.EffectRequestCountParams,
                ),
            ),
            cast_to=str,
        )

    def create_bulk(
        self,
        *,
        body: Iterable[effect_request_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of
        EffectRequest records as a POST body and ingest into the database. This
        operation is not intended to be used for automated feeds into UDL. Data
        providers should contact the UDL team for specific role assignments and for
        instructions on setting up a permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/effectrequest/createBulk",
            body=maybe_transform(body, Iterable[effect_request_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def query_help(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> EffectRequestQueryHelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return self._get(
            "/udl/effectrequest/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=EffectRequestQueryHelpResponse,
        )

    def tuple(
        self,
        *,
        columns: str,
        created_at: Union[str, date],
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> EffectRequestTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get(
            "/udl/effectrequest/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "columns": columns,
                        "created_at": created_at,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    effect_request_tuple_params.EffectRequestTupleParams,
                ),
            ),
            cast_to=EffectRequestTupleResponse,
        )

    def unvalidated_publish(
        self,
        *,
        body: Iterable[effect_request_unvalidated_publish_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take multiple EffectRequests as a POST body and ingest into
        the database. This operation is intended to be used for automated feeds into
        UDL. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/filedrop/udl-effectrequest",
            body=maybe_transform(body, Iterable[effect_request_unvalidated_publish_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class AsyncEffectRequestsResource(AsyncAPIResource):
    @cached_property
    def history(self) -> AsyncHistoryResource:
        return AsyncHistoryResource(self._client)

    @cached_property
    def with_raw_response(self) -> AsyncEffectRequestsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncEffectRequestsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncEffectRequestsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncEffectRequestsResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        effect_list: SequenceNotStr[str],
        source: str,
        id: str | Omit = omit,
        context: str | Omit = omit,
        deadline_type: str | Omit = omit,
        end_time: Union[str, datetime] | Omit = omit,
        external_request_id: str | Omit = omit,
        metric_types: SequenceNotStr[str] | Omit = omit,
        metric_weights: Iterable[float] | Omit = omit,
        model_class: str | Omit = omit,
        origin: str | Omit = omit,
        priority: str | Omit = omit,
        start_time: Union[str, datetime] | Omit = omit,
        state: str | Omit = omit,
        target_src_id: str | Omit = omit,
        target_src_type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single EffectRequest as a POST body and ingest into
        the database. This operation is not intended to be used for automated feeds into
        UDL. Data providers should contact the UDL team for specific role assignments
        and for instructions on setting up a permanent feed through an alternate
        mechanism.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          effect_list: List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE,
              DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE,
              MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.). The effects included in this
              list are connected by implied AND.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          context: Specific descriptive instantiation of the effect, e.g., playbook to be used.

          deadline_type: The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE,
              NOEARLIERTHAN, NOLATERTHAN, etc.): BETWEEN:&nbsp;Produce effect any time between
              the given start and end times, equal penalty for being early or late
              IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
              NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for
              being earlier, no reward for being later NOLATERTHAN:&nbsp;Produce effect no
              later than the given startTime. Large penalty for being later, no reward for
              being even earlier as long as the effect starts by the given time.

          end_time: The time the effect should end, in ISO8601 UTC format.

          external_request_id: The extenal system identifier of this request. A human readable unique id.

          metric_types: Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement,
              OpportunityCost, Risk, Timeliness, Unavailable, etc.). See the associated
              'metricWeights' array for the weighting values, positionally corresponding to
              these types. The 'metricTypes' and 'metricWeights' arrays must match in size.

          metric_weights: Array of the weights for the metric in the final evaluation score. Normalized (0
              to 1). See the associated 'metricTypes' array for the metric classes,
              positionally corresponding to these values. The 'metricTypes' and
              'metricWeights' arrays must match in size.

          model_class: The type or class of the preference model used to evaluate this offer.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          priority: The priority (LOW, MEDIUM, HIGH) of this request.

          start_time: The time the effect should start, in ISO8601 UTC format.

          state: State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).

          target_src_id: The record ID, depending on the type identified in targetSrcType, of the
              requested target. This identifier corresponds to either poi.poiid or track.trkId
              from their respective schemas.

          target_src_type: The source type of the targetId identifier (POI, TRACK).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/effectrequest",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "effect_list": effect_list,
                    "source": source,
                    "id": id,
                    "context": context,
                    "deadline_type": deadline_type,
                    "end_time": end_time,
                    "external_request_id": external_request_id,
                    "metric_types": metric_types,
                    "metric_weights": metric_weights,
                    "model_class": model_class,
                    "origin": origin,
                    "priority": priority,
                    "start_time": start_time,
                    "state": state,
                    "target_src_id": target_src_id,
                    "target_src_type": target_src_type,
                },
                effect_request_create_params.EffectRequestCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> EffectRequestRetrieveResponse:
        """
        Service operation to get a single EffectRequest by its unique ID passed as a
        path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/effectrequest/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    effect_request_retrieve_params.EffectRequestRetrieveParams,
                ),
            ),
            cast_to=EffectRequestRetrieveResponse,
        )

    def list(
        self,
        *,
        created_at: Union[str, date],
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> AsyncPaginator[EffectRequestListResponse, AsyncOffsetPage[EffectRequestListResponse]]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/effectrequest",
            page=AsyncOffsetPage[EffectRequestListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "created_at": created_at,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    effect_request_list_params.EffectRequestListParams,
                ),
            ),
            model=EffectRequestListResponse,
        )

    async def count(
        self,
        *,
        created_at: Union[str, date],
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return await self._get(
            "/udl/effectrequest/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "created_at": created_at,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    effect_request_count_params.EffectRequestCountParams,
                ),
            ),
            cast_to=str,
        )

    async def create_bulk(
        self,
        *,
        body: Iterable[effect_request_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of
        EffectRequest records as a POST body and ingest into the database. This
        operation is not intended to be used for automated feeds into UDL. Data
        providers should contact the UDL team for specific role assignments and for
        instructions on setting up a permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/effectrequest/createBulk",
            body=await async_maybe_transform(body, Iterable[effect_request_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def query_help(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> EffectRequestQueryHelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return await self._get(
            "/udl/effectrequest/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=EffectRequestQueryHelpResponse,
        )

    async def tuple(
        self,
        *,
        columns: str,
        created_at: Union[str, date],
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> EffectRequestTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          created_at: Time the row was created in the database, auto-populated by the system.
              (YYYY-MM-DDTHH:MM:SS.sssZ)

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._get(
            "/udl/effectrequest/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "columns": columns,
                        "created_at": created_at,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    effect_request_tuple_params.EffectRequestTupleParams,
                ),
            ),
            cast_to=EffectRequestTupleResponse,
        )

    async def unvalidated_publish(
        self,
        *,
        body: Iterable[effect_request_unvalidated_publish_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take multiple EffectRequests as a POST body and ingest into
        the database. This operation is intended to be used for automated feeds into
        UDL. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/filedrop/udl-effectrequest",
            body=await async_maybe_transform(body, Iterable[effect_request_unvalidated_publish_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class EffectRequestsResourceWithRawResponse:
    def __init__(self, effect_requests: EffectRequestsResource) -> None:
        self._effect_requests = effect_requests

        self.create = to_raw_response_wrapper(
            effect_requests.create,
        )
        self.retrieve = to_raw_response_wrapper(
            effect_requests.retrieve,
        )
        self.list = to_raw_response_wrapper(
            effect_requests.list,
        )
        self.count = to_raw_response_wrapper(
            effect_requests.count,
        )
        self.create_bulk = to_raw_response_wrapper(
            effect_requests.create_bulk,
        )
        self.query_help = to_raw_response_wrapper(
            effect_requests.query_help,
        )
        self.tuple = to_raw_response_wrapper(
            effect_requests.tuple,
        )
        self.unvalidated_publish = to_raw_response_wrapper(
            effect_requests.unvalidated_publish,
        )

    @cached_property
    def history(self) -> HistoryResourceWithRawResponse:
        return HistoryResourceWithRawResponse(self._effect_requests.history)


class AsyncEffectRequestsResourceWithRawResponse:
    def __init__(self, effect_requests: AsyncEffectRequestsResource) -> None:
        self._effect_requests = effect_requests

        self.create = async_to_raw_response_wrapper(
            effect_requests.create,
        )
        self.retrieve = async_to_raw_response_wrapper(
            effect_requests.retrieve,
        )
        self.list = async_to_raw_response_wrapper(
            effect_requests.list,
        )
        self.count = async_to_raw_response_wrapper(
            effect_requests.count,
        )
        self.create_bulk = async_to_raw_response_wrapper(
            effect_requests.create_bulk,
        )
        self.query_help = async_to_raw_response_wrapper(
            effect_requests.query_help,
        )
        self.tuple = async_to_raw_response_wrapper(
            effect_requests.tuple,
        )
        self.unvalidated_publish = async_to_raw_response_wrapper(
            effect_requests.unvalidated_publish,
        )

    @cached_property
    def history(self) -> AsyncHistoryResourceWithRawResponse:
        return AsyncHistoryResourceWithRawResponse(self._effect_requests.history)


class EffectRequestsResourceWithStreamingResponse:
    def __init__(self, effect_requests: EffectRequestsResource) -> None:
        self._effect_requests = effect_requests

        self.create = to_streamed_response_wrapper(
            effect_requests.create,
        )
        self.retrieve = to_streamed_response_wrapper(
            effect_requests.retrieve,
        )
        self.list = to_streamed_response_wrapper(
            effect_requests.list,
        )
        self.count = to_streamed_response_wrapper(
            effect_requests.count,
        )
        self.create_bulk = to_streamed_response_wrapper(
            effect_requests.create_bulk,
        )
        self.query_help = to_streamed_response_wrapper(
            effect_requests.query_help,
        )
        self.tuple = to_streamed_response_wrapper(
            effect_requests.tuple,
        )
        self.unvalidated_publish = to_streamed_response_wrapper(
            effect_requests.unvalidated_publish,
        )

    @cached_property
    def history(self) -> HistoryResourceWithStreamingResponse:
        return HistoryResourceWithStreamingResponse(self._effect_requests.history)


class AsyncEffectRequestsResourceWithStreamingResponse:
    def __init__(self, effect_requests: AsyncEffectRequestsResource) -> None:
        self._effect_requests = effect_requests

        self.create = async_to_streamed_response_wrapper(
            effect_requests.create,
        )
        self.retrieve = async_to_streamed_response_wrapper(
            effect_requests.retrieve,
        )
        self.list = async_to_streamed_response_wrapper(
            effect_requests.list,
        )
        self.count = async_to_streamed_response_wrapper(
            effect_requests.count,
        )
        self.create_bulk = async_to_streamed_response_wrapper(
            effect_requests.create_bulk,
        )
        self.query_help = async_to_streamed_response_wrapper(
            effect_requests.query_help,
        )
        self.tuple = async_to_streamed_response_wrapper(
            effect_requests.tuple,
        )
        self.unvalidated_publish = async_to_streamed_response_wrapper(
            effect_requests.unvalidated_publish,
        )

    @cached_property
    def history(self) -> AsyncHistoryResourceWithStreamingResponse:
        return AsyncHistoryResourceWithStreamingResponse(self._effect_requests.history)
