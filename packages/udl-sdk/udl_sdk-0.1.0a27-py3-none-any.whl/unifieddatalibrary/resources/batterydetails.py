# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal

import httpx

from ..types import (
    batterydetail_list_params,
    batterydetail_create_params,
    batterydetail_update_params,
    batterydetail_retrieve_params,
)
from .._types import Body, Omit, Query, Headers, NoneType, NotGiven, SequenceNotStr, omit, not_given
from .._utils import maybe_transform, async_maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ..pagination import SyncOffsetPage, AsyncOffsetPage
from .._base_client import AsyncPaginator, make_request_options
from ..types.batterydetails_abridged import BatterydetailsAbridged
from ..types.shared.batterydetails_full import BatterydetailsFull

__all__ = ["BatterydetailsResource", "AsyncBatterydetailsResource"]


class BatterydetailsResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> BatterydetailsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return BatterydetailsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> BatterydetailsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return BatterydetailsResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_battery: str,
        source: str,
        id: str | Omit = omit,
        capacity: float | Omit = omit,
        description: str | Omit = omit,
        discharge_depth: float | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        model: str | Omit = omit,
        origin: str | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        technology: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single BatteryDetails as a POST body and ingest into
        the database. A Battery record may have multiple details records from several
        sources. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_battery: Identifier of the parent battery type record.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          capacity: Battery capacity in Ah.

          description: Battery description/notes.

          discharge_depth: Depth of discharge as a percentage/fraction.

          manufacturer_org_id: ID of the organization that manufactures the battery.

          model: Battery model number or name.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          technology: Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/batterydetails",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_battery": id_battery,
                    "source": source,
                    "id": id,
                    "capacity": capacity,
                    "description": description,
                    "discharge_depth": discharge_depth,
                    "manufacturer_org_id": manufacturer_org_id,
                    "model": model,
                    "origin": origin,
                    "tags": tags,
                    "technology": technology,
                },
                batterydetail_create_params.BatterydetailCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> BatterydetailsFull:
        """
        Service operation to get a single BatteryDetails record by its unique ID passed
        as a path parameter. A Battery record may have multiple details records from
        several sources.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/batterydetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    batterydetail_retrieve_params.BatterydetailRetrieveParams,
                ),
            ),
            cast_to=BatterydetailsFull,
        )

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_battery: str,
        source: str,
        body_id: str | Omit = omit,
        capacity: float | Omit = omit,
        description: str | Omit = omit,
        discharge_depth: float | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        model: str | Omit = omit,
        origin: str | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        technology: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single BatteryDetails.

        A Battery record may have
        multiple details records from several sources. A specific role is required to
        perform this service operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_battery: Identifier of the parent battery type record.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          capacity: Battery capacity in Ah.

          description: Battery description/notes.

          discharge_depth: Depth of discharge as a percentage/fraction.

          manufacturer_org_id: ID of the organization that manufactures the battery.

          model: Battery model number or name.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          technology: Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/batterydetails/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_battery": id_battery,
                    "source": source,
                    "body_id": body_id,
                    "capacity": capacity,
                    "description": description,
                    "discharge_depth": discharge_depth,
                    "manufacturer_org_id": manufacturer_org_id,
                    "model": model,
                    "origin": origin,
                    "tags": tags,
                    "technology": technology,
                },
                batterydetail_update_params.BatterydetailUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SyncOffsetPage[BatterydetailsAbridged]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/batterydetails",
            page=SyncOffsetPage[BatterydetailsAbridged],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    batterydetail_list_params.BatterydetailListParams,
                ),
            ),
            model=BatterydetailsAbridged,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a BatteryDetails object specified by the passed ID
        path parameter. A Battery record may have multiple details records from several
        sources. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/batterydetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class AsyncBatterydetailsResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncBatterydetailsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncBatterydetailsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncBatterydetailsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncBatterydetailsResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_battery: str,
        source: str,
        id: str | Omit = omit,
        capacity: float | Omit = omit,
        description: str | Omit = omit,
        discharge_depth: float | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        model: str | Omit = omit,
        origin: str | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        technology: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single BatteryDetails as a POST body and ingest into
        the database. A Battery record may have multiple details records from several
        sources. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_battery: Identifier of the parent battery type record.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          capacity: Battery capacity in Ah.

          description: Battery description/notes.

          discharge_depth: Depth of discharge as a percentage/fraction.

          manufacturer_org_id: ID of the organization that manufactures the battery.

          model: Battery model number or name.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          technology: Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/batterydetails",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_battery": id_battery,
                    "source": source,
                    "id": id,
                    "capacity": capacity,
                    "description": description,
                    "discharge_depth": discharge_depth,
                    "manufacturer_org_id": manufacturer_org_id,
                    "model": model,
                    "origin": origin,
                    "tags": tags,
                    "technology": technology,
                },
                batterydetail_create_params.BatterydetailCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> BatterydetailsFull:
        """
        Service operation to get a single BatteryDetails record by its unique ID passed
        as a path parameter. A Battery record may have multiple details records from
        several sources.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/batterydetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    batterydetail_retrieve_params.BatterydetailRetrieveParams,
                ),
            ),
            cast_to=BatterydetailsFull,
        )

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_battery: str,
        source: str,
        body_id: str | Omit = omit,
        capacity: float | Omit = omit,
        description: str | Omit = omit,
        discharge_depth: float | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        model: str | Omit = omit,
        origin: str | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        technology: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single BatteryDetails.

        A Battery record may have
        multiple details records from several sources. A specific role is required to
        perform this service operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_battery: Identifier of the parent battery type record.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          capacity: Battery capacity in Ah.

          description: Battery description/notes.

          discharge_depth: Depth of discharge as a percentage/fraction.

          manufacturer_org_id: ID of the organization that manufactures the battery.

          model: Battery model number or name.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          technology: Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/batterydetails/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_battery": id_battery,
                    "source": source,
                    "body_id": body_id,
                    "capacity": capacity,
                    "description": description,
                    "discharge_depth": discharge_depth,
                    "manufacturer_org_id": manufacturer_org_id,
                    "model": model,
                    "origin": origin,
                    "tags": tags,
                    "technology": technology,
                },
                batterydetail_update_params.BatterydetailUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> AsyncPaginator[BatterydetailsAbridged, AsyncOffsetPage[BatterydetailsAbridged]]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/batterydetails",
            page=AsyncOffsetPage[BatterydetailsAbridged],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    batterydetail_list_params.BatterydetailListParams,
                ),
            ),
            model=BatterydetailsAbridged,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a BatteryDetails object specified by the passed ID
        path parameter. A Battery record may have multiple details records from several
        sources. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/batterydetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class BatterydetailsResourceWithRawResponse:
    def __init__(self, batterydetails: BatterydetailsResource) -> None:
        self._batterydetails = batterydetails

        self.create = to_raw_response_wrapper(
            batterydetails.create,
        )
        self.retrieve = to_raw_response_wrapper(
            batterydetails.retrieve,
        )
        self.update = to_raw_response_wrapper(
            batterydetails.update,
        )
        self.list = to_raw_response_wrapper(
            batterydetails.list,
        )
        self.delete = to_raw_response_wrapper(
            batterydetails.delete,
        )


class AsyncBatterydetailsResourceWithRawResponse:
    def __init__(self, batterydetails: AsyncBatterydetailsResource) -> None:
        self._batterydetails = batterydetails

        self.create = async_to_raw_response_wrapper(
            batterydetails.create,
        )
        self.retrieve = async_to_raw_response_wrapper(
            batterydetails.retrieve,
        )
        self.update = async_to_raw_response_wrapper(
            batterydetails.update,
        )
        self.list = async_to_raw_response_wrapper(
            batterydetails.list,
        )
        self.delete = async_to_raw_response_wrapper(
            batterydetails.delete,
        )


class BatterydetailsResourceWithStreamingResponse:
    def __init__(self, batterydetails: BatterydetailsResource) -> None:
        self._batterydetails = batterydetails

        self.create = to_streamed_response_wrapper(
            batterydetails.create,
        )
        self.retrieve = to_streamed_response_wrapper(
            batterydetails.retrieve,
        )
        self.update = to_streamed_response_wrapper(
            batterydetails.update,
        )
        self.list = to_streamed_response_wrapper(
            batterydetails.list,
        )
        self.delete = to_streamed_response_wrapper(
            batterydetails.delete,
        )


class AsyncBatterydetailsResourceWithStreamingResponse:
    def __init__(self, batterydetails: AsyncBatterydetailsResource) -> None:
        self._batterydetails = batterydetails

        self.create = async_to_streamed_response_wrapper(
            batterydetails.create,
        )
        self.retrieve = async_to_streamed_response_wrapper(
            batterydetails.retrieve,
        )
        self.update = async_to_streamed_response_wrapper(
            batterydetails.update,
        )
        self.list = async_to_streamed_response_wrapper(
            batterydetails.list,
        )
        self.delete = async_to_streamed_response_wrapper(
            batterydetails.delete,
        )
