# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal

import httpx

from ...types import (
    laseremitter_get_params,
    laseremitter_list_params,
    laseremitter_count_params,
    laseremitter_tuple_params,
    laseremitter_create_params,
    laseremitter_update_params,
)
from .staging import (
    StagingResource,
    AsyncStagingResource,
    StagingResourceWithRawResponse,
    AsyncStagingResourceWithRawResponse,
    StagingResourceWithStreamingResponse,
    AsyncStagingResourceWithStreamingResponse,
)
from ..._types import Body, Omit, Query, Headers, NoneType, NotGiven, omit, not_given
from ..._utils import maybe_transform, async_maybe_transform
from ..._compat import cached_property
from ..._resource import SyncAPIResource, AsyncAPIResource
from ..._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ...pagination import SyncOffsetPage, AsyncOffsetPage
from ..._base_client import AsyncPaginator, make_request_options
from ...types.entity_ingest_param import EntityIngestParam
from ...types.laseremitter_get_response import LaseremitterGetResponse
from ...types.laseremitter_list_response import LaseremitterListResponse
from ...types.laseremitter_tuple_response import LaseremitterTupleResponse
from ...types.laseremitter_queryhelp_response import LaseremitterQueryhelpResponse

__all__ = ["LaseremitterResource", "AsyncLaseremitterResource"]


class LaseremitterResource(SyncAPIResource):
    @cached_property
    def staging(self) -> StagingResource:
        return StagingResource(self._client)

    @cached_property
    def with_raw_response(self) -> LaseremitterResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return LaseremitterResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> LaseremitterResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return LaseremitterResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        laser_name: str,
        laser_type: str,
        source: str,
        id: str | Omit = omit,
        atmospheric_transmission: float | Omit = omit,
        beam_output_power: float | Omit = omit,
        beam_waist: float | Omit = omit,
        divergence: float | Omit = omit,
        entity: EntityIngestParam | Omit = omit,
        id_entity: str | Omit = omit,
        is_operational: bool | Omit = omit,
        max_duration: float | Omit = omit,
        max_focus_range: float | Omit = omit,
        min_focus_range: float | Omit = omit,
        origin: str | Omit = omit,
        pulse_fluence: float | Omit = omit,
        pulse_peak_power: float | Omit = omit,
        pulse_rep_freq: float | Omit = omit,
        pulse_shape: str | Omit = omit,
        pulse_width: float | Omit = omit,
        wavelength: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single LaserEmitter record as a POST body and ingest
        into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          laser_name: The name of this laser within the laser system or facility.

          laser_type: The type of laser (e.g. CONTINUOUS WAVE, PULSED, etc.).

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          atmospheric_transmission: Maximum possible laser-to-space atmospheric transmission (a value between zero
              and one, usually assumed to be unity for all lasers except for lasers with
              wavelengths heavily absorbed by the atmosphere).

          beam_output_power: The beam director aperture average (equivalent CW) output power is the total
              laser average power that is transmitted away from the final exit aperture of the
              optical system. For a CW laser, this is equivalent to the laser device CW power
              multiplied by the throughput of the optical system, including the beam director
              telescope. For a pulsed laser, this is equivalent to the laser device energy per
              pulse multiplied by the pulse repetition frequency (PRF) multiplied by the
              throughput of the optical system including the beam director telescope. Measured
              in Watts.

          beam_waist: The beam waist (radius) of this laser at the exit aperture, in centimeters.

          divergence: Minimum possible divergence half-angle of this laser, referenced from the
              optical axis to the 1/e point of the beam's far field irradiance profile,
              measured in microradians.

          entity: An entity is a generic representation of any object within a space/SSA system
              such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
              entity can have an operating unit, a location (if terrestrial), and statuses.

          id_entity: Unique identifier of the parent entity. idEntity is required for PUT.

          is_operational: A Boolean indicating whether or not this laser emitter is operational. False
              indicates that the laser specified in this record is no longer available and can
              be considered defunct. This field is true by default.

          max_duration: The maximum time that the laser would be "on" for a given test(s) for laser
              activity, in seconds.

          max_focus_range: The maximum possible focus range of this laser, measured in kilometers.

          min_focus_range: The minimum possible focus range of this laser, measured in kilometers.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          pulse_fluence: The amount of energy in each laser pulse exiting from the beam
              director/telescope, measured in Joules.

          pulse_peak_power: The instantaneous single pulse peak power exiting from the laser device,
              measured in Watts.

          pulse_rep_freq: The pulse repetition frequency of this laser, measured in kilohertz.

          pulse_shape: The pulse shape (waveform) of this laser, e.g. "RECTANGULAR," "SAWTOOTH,"
              "GAUSSIAN," etc.

          pulse_width: The laser device pulse duration, measured in seconds.

          wavelength: The center wavelength of this laser, in micrometers.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/laseremitter",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "laser_name": laser_name,
                    "laser_type": laser_type,
                    "source": source,
                    "id": id,
                    "atmospheric_transmission": atmospheric_transmission,
                    "beam_output_power": beam_output_power,
                    "beam_waist": beam_waist,
                    "divergence": divergence,
                    "entity": entity,
                    "id_entity": id_entity,
                    "is_operational": is_operational,
                    "max_duration": max_duration,
                    "max_focus_range": max_focus_range,
                    "min_focus_range": min_focus_range,
                    "origin": origin,
                    "pulse_fluence": pulse_fluence,
                    "pulse_peak_power": pulse_peak_power,
                    "pulse_rep_freq": pulse_rep_freq,
                    "pulse_shape": pulse_shape,
                    "pulse_width": pulse_width,
                    "wavelength": wavelength,
                },
                laseremitter_create_params.LaseremitterCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        laser_name: str,
        laser_type: str,
        source: str,
        body_id: str | Omit = omit,
        atmospheric_transmission: float | Omit = omit,
        beam_output_power: float | Omit = omit,
        beam_waist: float | Omit = omit,
        divergence: float | Omit = omit,
        entity: EntityIngestParam | Omit = omit,
        id_entity: str | Omit = omit,
        is_operational: bool | Omit = omit,
        max_duration: float | Omit = omit,
        max_focus_range: float | Omit = omit,
        min_focus_range: float | Omit = omit,
        origin: str | Omit = omit,
        pulse_fluence: float | Omit = omit,
        pulse_peak_power: float | Omit = omit,
        pulse_rep_freq: float | Omit = omit,
        pulse_shape: str | Omit = omit,
        pulse_width: float | Omit = omit,
        wavelength: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single LaserEmitter record.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          laser_name: The name of this laser within the laser system or facility.

          laser_type: The type of laser (e.g. CONTINUOUS WAVE, PULSED, etc.).

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          atmospheric_transmission: Maximum possible laser-to-space atmospheric transmission (a value between zero
              and one, usually assumed to be unity for all lasers except for lasers with
              wavelengths heavily absorbed by the atmosphere).

          beam_output_power: The beam director aperture average (equivalent CW) output power is the total
              laser average power that is transmitted away from the final exit aperture of the
              optical system. For a CW laser, this is equivalent to the laser device CW power
              multiplied by the throughput of the optical system, including the beam director
              telescope. For a pulsed laser, this is equivalent to the laser device energy per
              pulse multiplied by the pulse repetition frequency (PRF) multiplied by the
              throughput of the optical system including the beam director telescope. Measured
              in Watts.

          beam_waist: The beam waist (radius) of this laser at the exit aperture, in centimeters.

          divergence: Minimum possible divergence half-angle of this laser, referenced from the
              optical axis to the 1/e point of the beam's far field irradiance profile,
              measured in microradians.

          entity: An entity is a generic representation of any object within a space/SSA system
              such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
              entity can have an operating unit, a location (if terrestrial), and statuses.

          id_entity: Unique identifier of the parent entity. idEntity is required for PUT.

          is_operational: A Boolean indicating whether or not this laser emitter is operational. False
              indicates that the laser specified in this record is no longer available and can
              be considered defunct. This field is true by default.

          max_duration: The maximum time that the laser would be "on" for a given test(s) for laser
              activity, in seconds.

          max_focus_range: The maximum possible focus range of this laser, measured in kilometers.

          min_focus_range: The minimum possible focus range of this laser, measured in kilometers.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          pulse_fluence: The amount of energy in each laser pulse exiting from the beam
              director/telescope, measured in Joules.

          pulse_peak_power: The instantaneous single pulse peak power exiting from the laser device,
              measured in Watts.

          pulse_rep_freq: The pulse repetition frequency of this laser, measured in kilohertz.

          pulse_shape: The pulse shape (waveform) of this laser, e.g. "RECTANGULAR," "SAWTOOTH,"
              "GAUSSIAN," etc.

          pulse_width: The laser device pulse duration, measured in seconds.

          wavelength: The center wavelength of this laser, in micrometers.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/laseremitter/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "laser_name": laser_name,
                    "laser_type": laser_type,
                    "source": source,
                    "body_id": body_id,
                    "atmospheric_transmission": atmospheric_transmission,
                    "beam_output_power": beam_output_power,
                    "beam_waist": beam_waist,
                    "divergence": divergence,
                    "entity": entity,
                    "id_entity": id_entity,
                    "is_operational": is_operational,
                    "max_duration": max_duration,
                    "max_focus_range": max_focus_range,
                    "min_focus_range": min_focus_range,
                    "origin": origin,
                    "pulse_fluence": pulse_fluence,
                    "pulse_peak_power": pulse_peak_power,
                    "pulse_rep_freq": pulse_rep_freq,
                    "pulse_shape": pulse_shape,
                    "pulse_width": pulse_width,
                    "wavelength": wavelength,
                },
                laseremitter_update_params.LaseremitterUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SyncOffsetPage[LaseremitterListResponse]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/laseremitter",
            page=SyncOffsetPage[LaseremitterListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    laseremitter_list_params.LaseremitterListParams,
                ),
            ),
            model=LaseremitterListResponse,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a LaserEmitter record specified by the passed ID
        path parameter. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/laseremitter/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def count(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return self._get(
            "/udl/laseremitter/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    laseremitter_count_params.LaseremitterCountParams,
                ),
            ),
            cast_to=str,
        )

    def get(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> LaseremitterGetResponse:
        """
        Service operation to get a single LaserEmitter record by its unique ID passed as
        a path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/laseremitter/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    laseremitter_get_params.LaseremitterGetParams,
                ),
            ),
            cast_to=LaseremitterGetResponse,
        )

    def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> LaseremitterQueryhelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return self._get(
            "/udl/laseremitter/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=LaseremitterQueryhelpResponse,
        )

    def tuple(
        self,
        *,
        columns: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> LaseremitterTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get(
            "/udl/laseremitter/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "columns": columns,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    laseremitter_tuple_params.LaseremitterTupleParams,
                ),
            ),
            cast_to=LaseremitterTupleResponse,
        )


class AsyncLaseremitterResource(AsyncAPIResource):
    @cached_property
    def staging(self) -> AsyncStagingResource:
        return AsyncStagingResource(self._client)

    @cached_property
    def with_raw_response(self) -> AsyncLaseremitterResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncLaseremitterResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncLaseremitterResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncLaseremitterResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        laser_name: str,
        laser_type: str,
        source: str,
        id: str | Omit = omit,
        atmospheric_transmission: float | Omit = omit,
        beam_output_power: float | Omit = omit,
        beam_waist: float | Omit = omit,
        divergence: float | Omit = omit,
        entity: EntityIngestParam | Omit = omit,
        id_entity: str | Omit = omit,
        is_operational: bool | Omit = omit,
        max_duration: float | Omit = omit,
        max_focus_range: float | Omit = omit,
        min_focus_range: float | Omit = omit,
        origin: str | Omit = omit,
        pulse_fluence: float | Omit = omit,
        pulse_peak_power: float | Omit = omit,
        pulse_rep_freq: float | Omit = omit,
        pulse_shape: str | Omit = omit,
        pulse_width: float | Omit = omit,
        wavelength: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single LaserEmitter record as a POST body and ingest
        into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          laser_name: The name of this laser within the laser system or facility.

          laser_type: The type of laser (e.g. CONTINUOUS WAVE, PULSED, etc.).

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          atmospheric_transmission: Maximum possible laser-to-space atmospheric transmission (a value between zero
              and one, usually assumed to be unity for all lasers except for lasers with
              wavelengths heavily absorbed by the atmosphere).

          beam_output_power: The beam director aperture average (equivalent CW) output power is the total
              laser average power that is transmitted away from the final exit aperture of the
              optical system. For a CW laser, this is equivalent to the laser device CW power
              multiplied by the throughput of the optical system, including the beam director
              telescope. For a pulsed laser, this is equivalent to the laser device energy per
              pulse multiplied by the pulse repetition frequency (PRF) multiplied by the
              throughput of the optical system including the beam director telescope. Measured
              in Watts.

          beam_waist: The beam waist (radius) of this laser at the exit aperture, in centimeters.

          divergence: Minimum possible divergence half-angle of this laser, referenced from the
              optical axis to the 1/e point of the beam's far field irradiance profile,
              measured in microradians.

          entity: An entity is a generic representation of any object within a space/SSA system
              such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
              entity can have an operating unit, a location (if terrestrial), and statuses.

          id_entity: Unique identifier of the parent entity. idEntity is required for PUT.

          is_operational: A Boolean indicating whether or not this laser emitter is operational. False
              indicates that the laser specified in this record is no longer available and can
              be considered defunct. This field is true by default.

          max_duration: The maximum time that the laser would be "on" for a given test(s) for laser
              activity, in seconds.

          max_focus_range: The maximum possible focus range of this laser, measured in kilometers.

          min_focus_range: The minimum possible focus range of this laser, measured in kilometers.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          pulse_fluence: The amount of energy in each laser pulse exiting from the beam
              director/telescope, measured in Joules.

          pulse_peak_power: The instantaneous single pulse peak power exiting from the laser device,
              measured in Watts.

          pulse_rep_freq: The pulse repetition frequency of this laser, measured in kilohertz.

          pulse_shape: The pulse shape (waveform) of this laser, e.g. "RECTANGULAR," "SAWTOOTH,"
              "GAUSSIAN," etc.

          pulse_width: The laser device pulse duration, measured in seconds.

          wavelength: The center wavelength of this laser, in micrometers.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/laseremitter",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "laser_name": laser_name,
                    "laser_type": laser_type,
                    "source": source,
                    "id": id,
                    "atmospheric_transmission": atmospheric_transmission,
                    "beam_output_power": beam_output_power,
                    "beam_waist": beam_waist,
                    "divergence": divergence,
                    "entity": entity,
                    "id_entity": id_entity,
                    "is_operational": is_operational,
                    "max_duration": max_duration,
                    "max_focus_range": max_focus_range,
                    "min_focus_range": min_focus_range,
                    "origin": origin,
                    "pulse_fluence": pulse_fluence,
                    "pulse_peak_power": pulse_peak_power,
                    "pulse_rep_freq": pulse_rep_freq,
                    "pulse_shape": pulse_shape,
                    "pulse_width": pulse_width,
                    "wavelength": wavelength,
                },
                laseremitter_create_params.LaseremitterCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        laser_name: str,
        laser_type: str,
        source: str,
        body_id: str | Omit = omit,
        atmospheric_transmission: float | Omit = omit,
        beam_output_power: float | Omit = omit,
        beam_waist: float | Omit = omit,
        divergence: float | Omit = omit,
        entity: EntityIngestParam | Omit = omit,
        id_entity: str | Omit = omit,
        is_operational: bool | Omit = omit,
        max_duration: float | Omit = omit,
        max_focus_range: float | Omit = omit,
        min_focus_range: float | Omit = omit,
        origin: str | Omit = omit,
        pulse_fluence: float | Omit = omit,
        pulse_peak_power: float | Omit = omit,
        pulse_rep_freq: float | Omit = omit,
        pulse_shape: str | Omit = omit,
        pulse_width: float | Omit = omit,
        wavelength: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single LaserEmitter record.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          laser_name: The name of this laser within the laser system or facility.

          laser_type: The type of laser (e.g. CONTINUOUS WAVE, PULSED, etc.).

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          atmospheric_transmission: Maximum possible laser-to-space atmospheric transmission (a value between zero
              and one, usually assumed to be unity for all lasers except for lasers with
              wavelengths heavily absorbed by the atmosphere).

          beam_output_power: The beam director aperture average (equivalent CW) output power is the total
              laser average power that is transmitted away from the final exit aperture of the
              optical system. For a CW laser, this is equivalent to the laser device CW power
              multiplied by the throughput of the optical system, including the beam director
              telescope. For a pulsed laser, this is equivalent to the laser device energy per
              pulse multiplied by the pulse repetition frequency (PRF) multiplied by the
              throughput of the optical system including the beam director telescope. Measured
              in Watts.

          beam_waist: The beam waist (radius) of this laser at the exit aperture, in centimeters.

          divergence: Minimum possible divergence half-angle of this laser, referenced from the
              optical axis to the 1/e point of the beam's far field irradiance profile,
              measured in microradians.

          entity: An entity is a generic representation of any object within a space/SSA system
              such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
              entity can have an operating unit, a location (if terrestrial), and statuses.

          id_entity: Unique identifier of the parent entity. idEntity is required for PUT.

          is_operational: A Boolean indicating whether or not this laser emitter is operational. False
              indicates that the laser specified in this record is no longer available and can
              be considered defunct. This field is true by default.

          max_duration: The maximum time that the laser would be "on" for a given test(s) for laser
              activity, in seconds.

          max_focus_range: The maximum possible focus range of this laser, measured in kilometers.

          min_focus_range: The minimum possible focus range of this laser, measured in kilometers.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          pulse_fluence: The amount of energy in each laser pulse exiting from the beam
              director/telescope, measured in Joules.

          pulse_peak_power: The instantaneous single pulse peak power exiting from the laser device,
              measured in Watts.

          pulse_rep_freq: The pulse repetition frequency of this laser, measured in kilohertz.

          pulse_shape: The pulse shape (waveform) of this laser, e.g. "RECTANGULAR," "SAWTOOTH,"
              "GAUSSIAN," etc.

          pulse_width: The laser device pulse duration, measured in seconds.

          wavelength: The center wavelength of this laser, in micrometers.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/laseremitter/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "laser_name": laser_name,
                    "laser_type": laser_type,
                    "source": source,
                    "body_id": body_id,
                    "atmospheric_transmission": atmospheric_transmission,
                    "beam_output_power": beam_output_power,
                    "beam_waist": beam_waist,
                    "divergence": divergence,
                    "entity": entity,
                    "id_entity": id_entity,
                    "is_operational": is_operational,
                    "max_duration": max_duration,
                    "max_focus_range": max_focus_range,
                    "min_focus_range": min_focus_range,
                    "origin": origin,
                    "pulse_fluence": pulse_fluence,
                    "pulse_peak_power": pulse_peak_power,
                    "pulse_rep_freq": pulse_rep_freq,
                    "pulse_shape": pulse_shape,
                    "pulse_width": pulse_width,
                    "wavelength": wavelength,
                },
                laseremitter_update_params.LaseremitterUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> AsyncPaginator[LaseremitterListResponse, AsyncOffsetPage[LaseremitterListResponse]]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/laseremitter",
            page=AsyncOffsetPage[LaseremitterListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    laseremitter_list_params.LaseremitterListParams,
                ),
            ),
            model=LaseremitterListResponse,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a LaserEmitter record specified by the passed ID
        path parameter. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/laseremitter/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def count(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return await self._get(
            "/udl/laseremitter/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    laseremitter_count_params.LaseremitterCountParams,
                ),
            ),
            cast_to=str,
        )

    async def get(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> LaseremitterGetResponse:
        """
        Service operation to get a single LaserEmitter record by its unique ID passed as
        a path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/laseremitter/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    laseremitter_get_params.LaseremitterGetParams,
                ),
            ),
            cast_to=LaseremitterGetResponse,
        )

    async def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> LaseremitterQueryhelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return await self._get(
            "/udl/laseremitter/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=LaseremitterQueryhelpResponse,
        )

    async def tuple(
        self,
        *,
        columns: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> LaseremitterTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._get(
            "/udl/laseremitter/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "columns": columns,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    laseremitter_tuple_params.LaseremitterTupleParams,
                ),
            ),
            cast_to=LaseremitterTupleResponse,
        )


class LaseremitterResourceWithRawResponse:
    def __init__(self, laseremitter: LaseremitterResource) -> None:
        self._laseremitter = laseremitter

        self.create = to_raw_response_wrapper(
            laseremitter.create,
        )
        self.update = to_raw_response_wrapper(
            laseremitter.update,
        )
        self.list = to_raw_response_wrapper(
            laseremitter.list,
        )
        self.delete = to_raw_response_wrapper(
            laseremitter.delete,
        )
        self.count = to_raw_response_wrapper(
            laseremitter.count,
        )
        self.get = to_raw_response_wrapper(
            laseremitter.get,
        )
        self.queryhelp = to_raw_response_wrapper(
            laseremitter.queryhelp,
        )
        self.tuple = to_raw_response_wrapper(
            laseremitter.tuple,
        )

    @cached_property
    def staging(self) -> StagingResourceWithRawResponse:
        return StagingResourceWithRawResponse(self._laseremitter.staging)


class AsyncLaseremitterResourceWithRawResponse:
    def __init__(self, laseremitter: AsyncLaseremitterResource) -> None:
        self._laseremitter = laseremitter

        self.create = async_to_raw_response_wrapper(
            laseremitter.create,
        )
        self.update = async_to_raw_response_wrapper(
            laseremitter.update,
        )
        self.list = async_to_raw_response_wrapper(
            laseremitter.list,
        )
        self.delete = async_to_raw_response_wrapper(
            laseremitter.delete,
        )
        self.count = async_to_raw_response_wrapper(
            laseremitter.count,
        )
        self.get = async_to_raw_response_wrapper(
            laseremitter.get,
        )
        self.queryhelp = async_to_raw_response_wrapper(
            laseremitter.queryhelp,
        )
        self.tuple = async_to_raw_response_wrapper(
            laseremitter.tuple,
        )

    @cached_property
    def staging(self) -> AsyncStagingResourceWithRawResponse:
        return AsyncStagingResourceWithRawResponse(self._laseremitter.staging)


class LaseremitterResourceWithStreamingResponse:
    def __init__(self, laseremitter: LaseremitterResource) -> None:
        self._laseremitter = laseremitter

        self.create = to_streamed_response_wrapper(
            laseremitter.create,
        )
        self.update = to_streamed_response_wrapper(
            laseremitter.update,
        )
        self.list = to_streamed_response_wrapper(
            laseremitter.list,
        )
        self.delete = to_streamed_response_wrapper(
            laseremitter.delete,
        )
        self.count = to_streamed_response_wrapper(
            laseremitter.count,
        )
        self.get = to_streamed_response_wrapper(
            laseremitter.get,
        )
        self.queryhelp = to_streamed_response_wrapper(
            laseremitter.queryhelp,
        )
        self.tuple = to_streamed_response_wrapper(
            laseremitter.tuple,
        )

    @cached_property
    def staging(self) -> StagingResourceWithStreamingResponse:
        return StagingResourceWithStreamingResponse(self._laseremitter.staging)


class AsyncLaseremitterResourceWithStreamingResponse:
    def __init__(self, laseremitter: AsyncLaseremitterResource) -> None:
        self._laseremitter = laseremitter

        self.create = async_to_streamed_response_wrapper(
            laseremitter.create,
        )
        self.update = async_to_streamed_response_wrapper(
            laseremitter.update,
        )
        self.list = async_to_streamed_response_wrapper(
            laseremitter.list,
        )
        self.delete = async_to_streamed_response_wrapper(
            laseremitter.delete,
        )
        self.count = async_to_streamed_response_wrapper(
            laseremitter.count,
        )
        self.get = async_to_streamed_response_wrapper(
            laseremitter.get,
        )
        self.queryhelp = async_to_streamed_response_wrapper(
            laseremitter.queryhelp,
        )
        self.tuple = async_to_streamed_response_wrapper(
            laseremitter.tuple,
        )

    @cached_property
    def staging(self) -> AsyncStagingResourceWithStreamingResponse:
        return AsyncStagingResourceWithStreamingResponse(self._laseremitter.staging)
