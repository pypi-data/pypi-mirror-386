# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal

import httpx

from ..types import (
    engine_detail_list_params,
    engine_detail_create_params,
    engine_detail_update_params,
    engine_detail_retrieve_params,
)
from .._types import Body, Omit, Query, Headers, NoneType, NotGiven, SequenceNotStr, omit, not_given
from .._utils import maybe_transform, async_maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ..pagination import SyncOffsetPage, AsyncOffsetPage
from .._base_client import AsyncPaginator, make_request_options
from ..types.engine_details_abridged import EngineDetailsAbridged
from ..types.shared.engine_details_full import EngineDetailsFull

__all__ = ["EngineDetailsResource", "AsyncEngineDetailsResource"]


class EngineDetailsResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> EngineDetailsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return EngineDetailsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> EngineDetailsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return EngineDetailsResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_engine: str,
        source: str,
        id: str | Omit = omit,
        burn_time: float | Omit = omit,
        chamber_pressure: float | Omit = omit,
        characteristic_type: str | Omit = omit,
        cycle_type: str | Omit = omit,
        family: str | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        max_firings: int | Omit = omit,
        notes: str | Omit = omit,
        nozzle_expansion_ratio: float | Omit = omit,
        origin: str | Omit = omit,
        oxidizer: str | Omit = omit,
        propellant: str | Omit = omit,
        sea_level_thrust: float | Omit = omit,
        specific_impulse: float | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        vacuum_thrust: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single EngineDetails as a POST body and ingest into
        the database. EngineDetails are launch vehicle engine details and performance
        characteristics/limits compiled by a particular source. A launch vehicle engine
        may have several details records from multiple sources. A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_engine: Identifier of the parent engine record.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          burn_time: Launch engine maximum burn time in seconds.

          chamber_pressure: Engine chamber pressure in bars.

          characteristic_type: Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant,
              etc.).

          cycle_type: Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic
              Decomposition, etc.).

          family: Engine type or family.

          manufacturer_org_id: Organization ID of the engine manufacturer.

          max_firings: Engine maximum number of firings.

          notes: Notes/Description of the engine.

          nozzle_expansion_ratio: Engine nozzle expansion ratio.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          oxidizer: Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).

          propellant: Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine,
              etc).

          sea_level_thrust: Engine maximum thrust at sea level in Kilo-Newtons.

          specific_impulse: Launch engine specific impulse in seconds.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          vacuum_thrust: Engine maximum thrust in a vacuum in Kilo-Newtons.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/enginedetails",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_engine": id_engine,
                    "source": source,
                    "id": id,
                    "burn_time": burn_time,
                    "chamber_pressure": chamber_pressure,
                    "characteristic_type": characteristic_type,
                    "cycle_type": cycle_type,
                    "family": family,
                    "manufacturer_org_id": manufacturer_org_id,
                    "max_firings": max_firings,
                    "notes": notes,
                    "nozzle_expansion_ratio": nozzle_expansion_ratio,
                    "origin": origin,
                    "oxidizer": oxidizer,
                    "propellant": propellant,
                    "sea_level_thrust": sea_level_thrust,
                    "specific_impulse": specific_impulse,
                    "tags": tags,
                    "vacuum_thrust": vacuum_thrust,
                },
                engine_detail_create_params.EngineDetailCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> EngineDetailsFull:
        """
        Service operation to get a single EngineDetails record by its unique ID passed
        as a path parameter. EngineDetails are launch vehicle engine details and
        performance characteristics/limits compiled by a particular source. A launch
        vehicle engine may have several details records from multiple sources.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/enginedetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    engine_detail_retrieve_params.EngineDetailRetrieveParams,
                ),
            ),
            cast_to=EngineDetailsFull,
        )

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_engine: str,
        source: str,
        body_id: str | Omit = omit,
        burn_time: float | Omit = omit,
        chamber_pressure: float | Omit = omit,
        characteristic_type: str | Omit = omit,
        cycle_type: str | Omit = omit,
        family: str | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        max_firings: int | Omit = omit,
        notes: str | Omit = omit,
        nozzle_expansion_ratio: float | Omit = omit,
        origin: str | Omit = omit,
        oxidizer: str | Omit = omit,
        propellant: str | Omit = omit,
        sea_level_thrust: float | Omit = omit,
        specific_impulse: float | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        vacuum_thrust: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single EngineDetails.

        EngineDetails are launch
        vehicle engine details and performance characteristics/limits compiled by a
        particular source. A launch vehicle engine may have several details records from
        multiple sources. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_engine: Identifier of the parent engine record.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          burn_time: Launch engine maximum burn time in seconds.

          chamber_pressure: Engine chamber pressure in bars.

          characteristic_type: Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant,
              etc.).

          cycle_type: Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic
              Decomposition, etc.).

          family: Engine type or family.

          manufacturer_org_id: Organization ID of the engine manufacturer.

          max_firings: Engine maximum number of firings.

          notes: Notes/Description of the engine.

          nozzle_expansion_ratio: Engine nozzle expansion ratio.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          oxidizer: Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).

          propellant: Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine,
              etc).

          sea_level_thrust: Engine maximum thrust at sea level in Kilo-Newtons.

          specific_impulse: Launch engine specific impulse in seconds.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          vacuum_thrust: Engine maximum thrust in a vacuum in Kilo-Newtons.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/enginedetails/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_engine": id_engine,
                    "source": source,
                    "body_id": body_id,
                    "burn_time": burn_time,
                    "chamber_pressure": chamber_pressure,
                    "characteristic_type": characteristic_type,
                    "cycle_type": cycle_type,
                    "family": family,
                    "manufacturer_org_id": manufacturer_org_id,
                    "max_firings": max_firings,
                    "notes": notes,
                    "nozzle_expansion_ratio": nozzle_expansion_ratio,
                    "origin": origin,
                    "oxidizer": oxidizer,
                    "propellant": propellant,
                    "sea_level_thrust": sea_level_thrust,
                    "specific_impulse": specific_impulse,
                    "tags": tags,
                    "vacuum_thrust": vacuum_thrust,
                },
                engine_detail_update_params.EngineDetailUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SyncOffsetPage[EngineDetailsAbridged]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/enginedetails",
            page=SyncOffsetPage[EngineDetailsAbridged],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    engine_detail_list_params.EngineDetailListParams,
                ),
            ),
            model=EngineDetailsAbridged,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a EngineDetails object specified by the passed ID
        path parameter. EngineDetails are launch vehicle engine details and performance
        characteristics/limits compiled by a particular source. A launch vehicle engine
        may have several details records from multiple sources. A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/enginedetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class AsyncEngineDetailsResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncEngineDetailsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncEngineDetailsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncEngineDetailsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncEngineDetailsResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_engine: str,
        source: str,
        id: str | Omit = omit,
        burn_time: float | Omit = omit,
        chamber_pressure: float | Omit = omit,
        characteristic_type: str | Omit = omit,
        cycle_type: str | Omit = omit,
        family: str | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        max_firings: int | Omit = omit,
        notes: str | Omit = omit,
        nozzle_expansion_ratio: float | Omit = omit,
        origin: str | Omit = omit,
        oxidizer: str | Omit = omit,
        propellant: str | Omit = omit,
        sea_level_thrust: float | Omit = omit,
        specific_impulse: float | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        vacuum_thrust: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single EngineDetails as a POST body and ingest into
        the database. EngineDetails are launch vehicle engine details and performance
        characteristics/limits compiled by a particular source. A launch vehicle engine
        may have several details records from multiple sources. A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_engine: Identifier of the parent engine record.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          burn_time: Launch engine maximum burn time in seconds.

          chamber_pressure: Engine chamber pressure in bars.

          characteristic_type: Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant,
              etc.).

          cycle_type: Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic
              Decomposition, etc.).

          family: Engine type or family.

          manufacturer_org_id: Organization ID of the engine manufacturer.

          max_firings: Engine maximum number of firings.

          notes: Notes/Description of the engine.

          nozzle_expansion_ratio: Engine nozzle expansion ratio.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          oxidizer: Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).

          propellant: Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine,
              etc).

          sea_level_thrust: Engine maximum thrust at sea level in Kilo-Newtons.

          specific_impulse: Launch engine specific impulse in seconds.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          vacuum_thrust: Engine maximum thrust in a vacuum in Kilo-Newtons.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/enginedetails",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_engine": id_engine,
                    "source": source,
                    "id": id,
                    "burn_time": burn_time,
                    "chamber_pressure": chamber_pressure,
                    "characteristic_type": characteristic_type,
                    "cycle_type": cycle_type,
                    "family": family,
                    "manufacturer_org_id": manufacturer_org_id,
                    "max_firings": max_firings,
                    "notes": notes,
                    "nozzle_expansion_ratio": nozzle_expansion_ratio,
                    "origin": origin,
                    "oxidizer": oxidizer,
                    "propellant": propellant,
                    "sea_level_thrust": sea_level_thrust,
                    "specific_impulse": specific_impulse,
                    "tags": tags,
                    "vacuum_thrust": vacuum_thrust,
                },
                engine_detail_create_params.EngineDetailCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> EngineDetailsFull:
        """
        Service operation to get a single EngineDetails record by its unique ID passed
        as a path parameter. EngineDetails are launch vehicle engine details and
        performance characteristics/limits compiled by a particular source. A launch
        vehicle engine may have several details records from multiple sources.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/enginedetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    engine_detail_retrieve_params.EngineDetailRetrieveParams,
                ),
            ),
            cast_to=EngineDetailsFull,
        )

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_engine: str,
        source: str,
        body_id: str | Omit = omit,
        burn_time: float | Omit = omit,
        chamber_pressure: float | Omit = omit,
        characteristic_type: str | Omit = omit,
        cycle_type: str | Omit = omit,
        family: str | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        max_firings: int | Omit = omit,
        notes: str | Omit = omit,
        nozzle_expansion_ratio: float | Omit = omit,
        origin: str | Omit = omit,
        oxidizer: str | Omit = omit,
        propellant: str | Omit = omit,
        sea_level_thrust: float | Omit = omit,
        specific_impulse: float | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        vacuum_thrust: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single EngineDetails.

        EngineDetails are launch
        vehicle engine details and performance characteristics/limits compiled by a
        particular source. A launch vehicle engine may have several details records from
        multiple sources. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_engine: Identifier of the parent engine record.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          burn_time: Launch engine maximum burn time in seconds.

          chamber_pressure: Engine chamber pressure in bars.

          characteristic_type: Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant,
              etc.).

          cycle_type: Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic
              Decomposition, etc.).

          family: Engine type or family.

          manufacturer_org_id: Organization ID of the engine manufacturer.

          max_firings: Engine maximum number of firings.

          notes: Notes/Description of the engine.

          nozzle_expansion_ratio: Engine nozzle expansion ratio.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          oxidizer: Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).

          propellant: Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine,
              etc).

          sea_level_thrust: Engine maximum thrust at sea level in Kilo-Newtons.

          specific_impulse: Launch engine specific impulse in seconds.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          vacuum_thrust: Engine maximum thrust in a vacuum in Kilo-Newtons.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/enginedetails/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_engine": id_engine,
                    "source": source,
                    "body_id": body_id,
                    "burn_time": burn_time,
                    "chamber_pressure": chamber_pressure,
                    "characteristic_type": characteristic_type,
                    "cycle_type": cycle_type,
                    "family": family,
                    "manufacturer_org_id": manufacturer_org_id,
                    "max_firings": max_firings,
                    "notes": notes,
                    "nozzle_expansion_ratio": nozzle_expansion_ratio,
                    "origin": origin,
                    "oxidizer": oxidizer,
                    "propellant": propellant,
                    "sea_level_thrust": sea_level_thrust,
                    "specific_impulse": specific_impulse,
                    "tags": tags,
                    "vacuum_thrust": vacuum_thrust,
                },
                engine_detail_update_params.EngineDetailUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> AsyncPaginator[EngineDetailsAbridged, AsyncOffsetPage[EngineDetailsAbridged]]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/enginedetails",
            page=AsyncOffsetPage[EngineDetailsAbridged],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    engine_detail_list_params.EngineDetailListParams,
                ),
            ),
            model=EngineDetailsAbridged,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a EngineDetails object specified by the passed ID
        path parameter. EngineDetails are launch vehicle engine details and performance
        characteristics/limits compiled by a particular source. A launch vehicle engine
        may have several details records from multiple sources. A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/enginedetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class EngineDetailsResourceWithRawResponse:
    def __init__(self, engine_details: EngineDetailsResource) -> None:
        self._engine_details = engine_details

        self.create = to_raw_response_wrapper(
            engine_details.create,
        )
        self.retrieve = to_raw_response_wrapper(
            engine_details.retrieve,
        )
        self.update = to_raw_response_wrapper(
            engine_details.update,
        )
        self.list = to_raw_response_wrapper(
            engine_details.list,
        )
        self.delete = to_raw_response_wrapper(
            engine_details.delete,
        )


class AsyncEngineDetailsResourceWithRawResponse:
    def __init__(self, engine_details: AsyncEngineDetailsResource) -> None:
        self._engine_details = engine_details

        self.create = async_to_raw_response_wrapper(
            engine_details.create,
        )
        self.retrieve = async_to_raw_response_wrapper(
            engine_details.retrieve,
        )
        self.update = async_to_raw_response_wrapper(
            engine_details.update,
        )
        self.list = async_to_raw_response_wrapper(
            engine_details.list,
        )
        self.delete = async_to_raw_response_wrapper(
            engine_details.delete,
        )


class EngineDetailsResourceWithStreamingResponse:
    def __init__(self, engine_details: EngineDetailsResource) -> None:
        self._engine_details = engine_details

        self.create = to_streamed_response_wrapper(
            engine_details.create,
        )
        self.retrieve = to_streamed_response_wrapper(
            engine_details.retrieve,
        )
        self.update = to_streamed_response_wrapper(
            engine_details.update,
        )
        self.list = to_streamed_response_wrapper(
            engine_details.list,
        )
        self.delete = to_streamed_response_wrapper(
            engine_details.delete,
        )


class AsyncEngineDetailsResourceWithStreamingResponse:
    def __init__(self, engine_details: AsyncEngineDetailsResource) -> None:
        self._engine_details = engine_details

        self.create = async_to_streamed_response_wrapper(
            engine_details.create,
        )
        self.retrieve = async_to_streamed_response_wrapper(
            engine_details.retrieve,
        )
        self.update = async_to_streamed_response_wrapper(
            engine_details.update,
        )
        self.list = async_to_streamed_response_wrapper(
            engine_details.list,
        )
        self.delete = async_to_streamed_response_wrapper(
            engine_details.delete,
        )
