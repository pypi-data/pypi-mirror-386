# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Iterable

import httpx

from ..._types import Body, Omit, Query, Headers, NoneType, NotGiven, omit, not_given
from ..._utils import maybe_transform, async_maybe_transform
from ..._compat import cached_property
from ..._resource import SyncAPIResource, AsyncAPIResource
from ..._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ...pagination import SyncOffsetPage, AsyncOffsetPage
from ..._base_client import AsyncPaginator, make_request_options
from ...types.rf_emitter import (
    staging_list_params,
    staging_create_params,
    staging_update_params,
    staging_retrieve_params,
    staging_create_bulk_params,
)
from ...types.rf_emitter.staging_list_response import StagingListResponse
from ...types.rf_emitter.staging_retrieve_response import StagingRetrieveResponse
from ...types.rf_emitter.staging_queryhelp_response import StagingQueryhelpResponse

__all__ = ["StagingResource", "AsyncStagingResource"]


class StagingResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> StagingResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return StagingResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> StagingResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return StagingResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        name: str,
        source: str,
        id: str | Omit = omit,
        altitude: float | Omit = omit,
        ext_sys_id: str | Omit = omit,
        lat: float | Omit = omit,
        location_country: str | Omit = omit,
        lon: float | Omit = omit,
        owner_country: str | Omit = omit,
        subtype: str | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single RFEmitterStaging record as a POST body and
        ingest into the staging database. This API allows users to create, manage, and
        review RFEmitter records in a staging environment before their incorporation
        into the production UDL. It supports workflows involving validation, review, and
        approval of emitter data to ensure consistency, compliance, and data quality. A
        specific role is required to perform this service operation. Please contact the
        UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          name: Unique name of this RF Emitter.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          altitude: Emitter altitude relative to WGS-84 ellipsoid, in kilometers. Positive values
              indicate an emitter height above ellipsoid, and negative values indicate an
              emitter height below ellipsoid.

          ext_sys_id: The originating system ID for the RF Emitter.

          lat: WGS-84 latitude of the emitter, in degrees. -90 to 90 degrees (negative values
              south of equator).

          location_country: The DoD Standard Country Code designator for the country or political entity to
              which the RF Emitter equipment geographic coordinates reside. This value is
              typically the ISO 3166 Alpha-2 two-character country code, however it can also
              represent various consortiums that do not appear in the ISO document. The code
              must correspond to an existing country in the UDL’s country API. Call
              udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
              alternate code values that exist for the specified country code.

          lon: WGS-84 longitude of the emitter, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          owner_country: The DoD Standard Country Code designator for the country or political entity
              owning the RF Emitter. This value is typically the ISO 3166 Alpha-2
              two-character country code, however it can also represent various consortiums
              that do not appear in the ISO document. The code must correspond to an existing
              country in the UDL’s country API. Call udl/country/{code} to get any associated
              FIPS code, ISO Alpha-3 code, or alternate code values that exist for the
              specified country code.

          subtype: The RF Emitter subtype, which can distinguish specialized deployments (e.g.
              BLOCK_0_AVL, BLOCK_0_DS1, BLOCK_0_TEST, BLOCK_1, BLOCK_1_TEST, NONE).

          type: Type of this RF Emitter.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/rfemitterstaging",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "name": name,
                    "source": source,
                    "id": id,
                    "altitude": altitude,
                    "ext_sys_id": ext_sys_id,
                    "lat": lat,
                    "location_country": location_country,
                    "lon": lon,
                    "owner_country": owner_country,
                    "subtype": subtype,
                    "type": type,
                },
                staging_create_params.StagingCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> StagingRetrieveResponse:
        """
        Service operation to get a single RFEmitterStaging record by its unique ID
        passed as a path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/rfemitterstaging/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    staging_retrieve_params.StagingRetrieveParams,
                ),
            ),
            cast_to=StagingRetrieveResponse,
        )

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        name: str,
        source: str,
        body_id: str | Omit = omit,
        altitude: float | Omit = omit,
        ext_sys_id: str | Omit = omit,
        lat: float | Omit = omit,
        location_country: str | Omit = omit,
        lon: float | Omit = omit,
        owner_country: str | Omit = omit,
        subtype: str | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single RFEmitterStaging record.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          name: Unique name of this RF Emitter.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          altitude: Emitter altitude relative to WGS-84 ellipsoid, in kilometers. Positive values
              indicate an emitter height above ellipsoid, and negative values indicate an
              emitter height below ellipsoid.

          ext_sys_id: The originating system ID for the RF Emitter.

          lat: WGS-84 latitude of the emitter, in degrees. -90 to 90 degrees (negative values
              south of equator).

          location_country: The DoD Standard Country Code designator for the country or political entity to
              which the RF Emitter equipment geographic coordinates reside. This value is
              typically the ISO 3166 Alpha-2 two-character country code, however it can also
              represent various consortiums that do not appear in the ISO document. The code
              must correspond to an existing country in the UDL’s country API. Call
              udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
              alternate code values that exist for the specified country code.

          lon: WGS-84 longitude of the emitter, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          owner_country: The DoD Standard Country Code designator for the country or political entity
              owning the RF Emitter. This value is typically the ISO 3166 Alpha-2
              two-character country code, however it can also represent various consortiums
              that do not appear in the ISO document. The code must correspond to an existing
              country in the UDL’s country API. Call udl/country/{code} to get any associated
              FIPS code, ISO Alpha-3 code, or alternate code values that exist for the
              specified country code.

          subtype: The RF Emitter subtype, which can distinguish specialized deployments (e.g.
              BLOCK_0_AVL, BLOCK_0_DS1, BLOCK_0_TEST, BLOCK_1, BLOCK_1_TEST, NONE).

          type: Type of this RF Emitter.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/rfemitterstaging/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "name": name,
                    "source": source,
                    "body_id": body_id,
                    "altitude": altitude,
                    "ext_sys_id": ext_sys_id,
                    "lat": lat,
                    "location_country": location_country,
                    "lon": lon,
                    "owner_country": owner_country,
                    "subtype": subtype,
                    "type": type,
                },
                staging_update_params.StagingUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SyncOffsetPage[StagingListResponse]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/rfemitterstaging",
            page=SyncOffsetPage[StagingListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    staging_list_params.StagingListParams,
                ),
            ),
            model=StagingListResponse,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a RFEmitterStaging record specified by the passed ID
        path parameter. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/rfemitterstaging/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def create_bulk(
        self,
        *,
        body: Iterable[staging_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take multiple RFEmitterStaging records as a POST body and
        ingest into the staging database. This API allows users to create, manage, and
        review RFEmitter records in a staging environment before their incorporation
        into the production UDL. It supports workflows involving validation, review, and
        approval of emitter data to ensure consistency, compliance, and data quality. A
        specific role is required to perform this service operation. Please contact the
        UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/rfemitterstaging/createBulk",
            body=maybe_transform(body, Iterable[staging_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> StagingQueryhelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return self._get(
            "/udl/rfemitterstaging/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=StagingQueryhelpResponse,
        )


class AsyncStagingResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncStagingResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncStagingResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncStagingResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncStagingResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        name: str,
        source: str,
        id: str | Omit = omit,
        altitude: float | Omit = omit,
        ext_sys_id: str | Omit = omit,
        lat: float | Omit = omit,
        location_country: str | Omit = omit,
        lon: float | Omit = omit,
        owner_country: str | Omit = omit,
        subtype: str | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single RFEmitterStaging record as a POST body and
        ingest into the staging database. This API allows users to create, manage, and
        review RFEmitter records in a staging environment before their incorporation
        into the production UDL. It supports workflows involving validation, review, and
        approval of emitter data to ensure consistency, compliance, and data quality. A
        specific role is required to perform this service operation. Please contact the
        UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          name: Unique name of this RF Emitter.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          altitude: Emitter altitude relative to WGS-84 ellipsoid, in kilometers. Positive values
              indicate an emitter height above ellipsoid, and negative values indicate an
              emitter height below ellipsoid.

          ext_sys_id: The originating system ID for the RF Emitter.

          lat: WGS-84 latitude of the emitter, in degrees. -90 to 90 degrees (negative values
              south of equator).

          location_country: The DoD Standard Country Code designator for the country or political entity to
              which the RF Emitter equipment geographic coordinates reside. This value is
              typically the ISO 3166 Alpha-2 two-character country code, however it can also
              represent various consortiums that do not appear in the ISO document. The code
              must correspond to an existing country in the UDL’s country API. Call
              udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
              alternate code values that exist for the specified country code.

          lon: WGS-84 longitude of the emitter, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          owner_country: The DoD Standard Country Code designator for the country or political entity
              owning the RF Emitter. This value is typically the ISO 3166 Alpha-2
              two-character country code, however it can also represent various consortiums
              that do not appear in the ISO document. The code must correspond to an existing
              country in the UDL’s country API. Call udl/country/{code} to get any associated
              FIPS code, ISO Alpha-3 code, or alternate code values that exist for the
              specified country code.

          subtype: The RF Emitter subtype, which can distinguish specialized deployments (e.g.
              BLOCK_0_AVL, BLOCK_0_DS1, BLOCK_0_TEST, BLOCK_1, BLOCK_1_TEST, NONE).

          type: Type of this RF Emitter.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/rfemitterstaging",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "name": name,
                    "source": source,
                    "id": id,
                    "altitude": altitude,
                    "ext_sys_id": ext_sys_id,
                    "lat": lat,
                    "location_country": location_country,
                    "lon": lon,
                    "owner_country": owner_country,
                    "subtype": subtype,
                    "type": type,
                },
                staging_create_params.StagingCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> StagingRetrieveResponse:
        """
        Service operation to get a single RFEmitterStaging record by its unique ID
        passed as a path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/rfemitterstaging/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    staging_retrieve_params.StagingRetrieveParams,
                ),
            ),
            cast_to=StagingRetrieveResponse,
        )

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        name: str,
        source: str,
        body_id: str | Omit = omit,
        altitude: float | Omit = omit,
        ext_sys_id: str | Omit = omit,
        lat: float | Omit = omit,
        location_country: str | Omit = omit,
        lon: float | Omit = omit,
        owner_country: str | Omit = omit,
        subtype: str | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single RFEmitterStaging record.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          name: Unique name of this RF Emitter.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          altitude: Emitter altitude relative to WGS-84 ellipsoid, in kilometers. Positive values
              indicate an emitter height above ellipsoid, and negative values indicate an
              emitter height below ellipsoid.

          ext_sys_id: The originating system ID for the RF Emitter.

          lat: WGS-84 latitude of the emitter, in degrees. -90 to 90 degrees (negative values
              south of equator).

          location_country: The DoD Standard Country Code designator for the country or political entity to
              which the RF Emitter equipment geographic coordinates reside. This value is
              typically the ISO 3166 Alpha-2 two-character country code, however it can also
              represent various consortiums that do not appear in the ISO document. The code
              must correspond to an existing country in the UDL’s country API. Call
              udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
              alternate code values that exist for the specified country code.

          lon: WGS-84 longitude of the emitter, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          owner_country: The DoD Standard Country Code designator for the country or political entity
              owning the RF Emitter. This value is typically the ISO 3166 Alpha-2
              two-character country code, however it can also represent various consortiums
              that do not appear in the ISO document. The code must correspond to an existing
              country in the UDL’s country API. Call udl/country/{code} to get any associated
              FIPS code, ISO Alpha-3 code, or alternate code values that exist for the
              specified country code.

          subtype: The RF Emitter subtype, which can distinguish specialized deployments (e.g.
              BLOCK_0_AVL, BLOCK_0_DS1, BLOCK_0_TEST, BLOCK_1, BLOCK_1_TEST, NONE).

          type: Type of this RF Emitter.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/rfemitterstaging/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "name": name,
                    "source": source,
                    "body_id": body_id,
                    "altitude": altitude,
                    "ext_sys_id": ext_sys_id,
                    "lat": lat,
                    "location_country": location_country,
                    "lon": lon,
                    "owner_country": owner_country,
                    "subtype": subtype,
                    "type": type,
                },
                staging_update_params.StagingUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> AsyncPaginator[StagingListResponse, AsyncOffsetPage[StagingListResponse]]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/rfemitterstaging",
            page=AsyncOffsetPage[StagingListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    staging_list_params.StagingListParams,
                ),
            ),
            model=StagingListResponse,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a RFEmitterStaging record specified by the passed ID
        path parameter. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/rfemitterstaging/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def create_bulk(
        self,
        *,
        body: Iterable[staging_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take multiple RFEmitterStaging records as a POST body and
        ingest into the staging database. This API allows users to create, manage, and
        review RFEmitter records in a staging environment before their incorporation
        into the production UDL. It supports workflows involving validation, review, and
        approval of emitter data to ensure consistency, compliance, and data quality. A
        specific role is required to perform this service operation. Please contact the
        UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/rfemitterstaging/createBulk",
            body=await async_maybe_transform(body, Iterable[staging_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> StagingQueryhelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return await self._get(
            "/udl/rfemitterstaging/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=StagingQueryhelpResponse,
        )


class StagingResourceWithRawResponse:
    def __init__(self, staging: StagingResource) -> None:
        self._staging = staging

        self.create = to_raw_response_wrapper(
            staging.create,
        )
        self.retrieve = to_raw_response_wrapper(
            staging.retrieve,
        )
        self.update = to_raw_response_wrapper(
            staging.update,
        )
        self.list = to_raw_response_wrapper(
            staging.list,
        )
        self.delete = to_raw_response_wrapper(
            staging.delete,
        )
        self.create_bulk = to_raw_response_wrapper(
            staging.create_bulk,
        )
        self.queryhelp = to_raw_response_wrapper(
            staging.queryhelp,
        )


class AsyncStagingResourceWithRawResponse:
    def __init__(self, staging: AsyncStagingResource) -> None:
        self._staging = staging

        self.create = async_to_raw_response_wrapper(
            staging.create,
        )
        self.retrieve = async_to_raw_response_wrapper(
            staging.retrieve,
        )
        self.update = async_to_raw_response_wrapper(
            staging.update,
        )
        self.list = async_to_raw_response_wrapper(
            staging.list,
        )
        self.delete = async_to_raw_response_wrapper(
            staging.delete,
        )
        self.create_bulk = async_to_raw_response_wrapper(
            staging.create_bulk,
        )
        self.queryhelp = async_to_raw_response_wrapper(
            staging.queryhelp,
        )


class StagingResourceWithStreamingResponse:
    def __init__(self, staging: StagingResource) -> None:
        self._staging = staging

        self.create = to_streamed_response_wrapper(
            staging.create,
        )
        self.retrieve = to_streamed_response_wrapper(
            staging.retrieve,
        )
        self.update = to_streamed_response_wrapper(
            staging.update,
        )
        self.list = to_streamed_response_wrapper(
            staging.list,
        )
        self.delete = to_streamed_response_wrapper(
            staging.delete,
        )
        self.create_bulk = to_streamed_response_wrapper(
            staging.create_bulk,
        )
        self.queryhelp = to_streamed_response_wrapper(
            staging.queryhelp,
        )


class AsyncStagingResourceWithStreamingResponse:
    def __init__(self, staging: AsyncStagingResource) -> None:
        self._staging = staging

        self.create = async_to_streamed_response_wrapper(
            staging.create,
        )
        self.retrieve = async_to_streamed_response_wrapper(
            staging.retrieve,
        )
        self.update = async_to_streamed_response_wrapper(
            staging.update,
        )
        self.list = async_to_streamed_response_wrapper(
            staging.list,
        )
        self.delete = async_to_streamed_response_wrapper(
            staging.delete,
        )
        self.create_bulk = async_to_streamed_response_wrapper(
            staging.create_bulk,
        )
        self.queryhelp = async_to_streamed_response_wrapper(
            staging.queryhelp,
        )
