# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing_extensions import Literal

import httpx

from ..types import (
    solar_array_detail_get_params,
    solar_array_detail_list_params,
    solar_array_detail_create_params,
    solar_array_detail_update_params,
)
from .._types import Body, Omit, Query, Headers, NoneType, NotGiven, SequenceNotStr, omit, not_given
from .._utils import maybe_transform, async_maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ..pagination import SyncOffsetPage, AsyncOffsetPage
from .._base_client import AsyncPaginator, make_request_options
from ..types.shared.solar_array_details_full import SolarArrayDetailsFull
from ..types.solar_array_detail_list_response import SolarArrayDetailListResponse

__all__ = ["SolarArrayDetailsResource", "AsyncSolarArrayDetailsResource"]


class SolarArrayDetailsResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> SolarArrayDetailsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return SolarArrayDetailsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> SolarArrayDetailsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return SolarArrayDetailsResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_solar_array: str,
        source: str,
        id: str | Omit = omit,
        area: float | Omit = omit,
        description: str | Omit = omit,
        junction_technology: str | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        origin: str | Omit = omit,
        span: float | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        technology: str | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single SolarArrayDetails as a POST body and ingest
        into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance. A SolarArray may have
        multiple details records compiled by various sources.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_solar_array: Unique identifier of the parent SolarArray.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          area: Solar Array area in square meters.

          description: Solar array description/notes.

          junction_technology: Solar array junction technology (e.g. Triple).

          manufacturer_org_id: Unique identifier of the organization that manufactures the solar array.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          span: Solar Array span in meters.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          technology: Solar array technology (e.g. Ga-As).

          type: Type of solar array (e.g. U Shaped).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/solararraydetails",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_solar_array": id_solar_array,
                    "source": source,
                    "id": id,
                    "area": area,
                    "description": description,
                    "junction_technology": junction_technology,
                    "manufacturer_org_id": manufacturer_org_id,
                    "origin": origin,
                    "span": span,
                    "tags": tags,
                    "technology": technology,
                    "type": type,
                },
                solar_array_detail_create_params.SolarArrayDetailCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_solar_array: str,
        source: str,
        body_id: str | Omit = omit,
        area: float | Omit = omit,
        description: str | Omit = omit,
        junction_technology: str | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        origin: str | Omit = omit,
        span: float | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        technology: str | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single SolarArrayDetails.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance. A SolarArray may have multiple details records compiled by various
        sources.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_solar_array: Unique identifier of the parent SolarArray.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          area: Solar Array area in square meters.

          description: Solar array description/notes.

          junction_technology: Solar array junction technology (e.g. Triple).

          manufacturer_org_id: Unique identifier of the organization that manufactures the solar array.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          span: Solar Array span in meters.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          technology: Solar array technology (e.g. Ga-As).

          type: Type of solar array (e.g. U Shaped).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/solararraydetails/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_solar_array": id_solar_array,
                    "source": source,
                    "body_id": body_id,
                    "area": area,
                    "description": description,
                    "junction_technology": junction_technology,
                    "manufacturer_org_id": manufacturer_org_id,
                    "origin": origin,
                    "span": span,
                    "tags": tags,
                    "technology": technology,
                    "type": type,
                },
                solar_array_detail_update_params.SolarArrayDetailUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        classification_marking: str | Omit = omit,
        data_mode: str | Omit = omit,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        source: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SyncOffsetPage[SolarArrayDetailListResponse]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          classification_marking: (One or more of fields 'classificationMarking, dataMode, source' are required.)
              Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode: (One or more of fields 'classificationMarking, dataMode, source' are required.)
              Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data. (REAL,
              TEST, SIMULATED, or EXERCISE)

          source: (One or more of fields 'classificationMarking, dataMode, source' are required.)
              Source of the data.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/solararraydetails",
            page=SyncOffsetPage[SolarArrayDetailListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "classification_marking": classification_marking,
                        "data_mode": data_mode,
                        "first_result": first_result,
                        "max_results": max_results,
                        "source": source,
                    },
                    solar_array_detail_list_params.SolarArrayDetailListParams,
                ),
            ),
            model=SolarArrayDetailListResponse,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a SolarArrayDetails object specified by the passed
        ID path parameter. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance. A SolarArray may have
        multiple details records compiled by various sources.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/solararraydetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def get(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SolarArrayDetailsFull:
        """
        Service operation to get a single SolarArrayDetails record by its unique ID
        passed as a path parameter. A SolarArray may have multiple details records
        compiled by various sources.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/solararraydetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    solar_array_detail_get_params.SolarArrayDetailGetParams,
                ),
            ),
            cast_to=SolarArrayDetailsFull,
        )


class AsyncSolarArrayDetailsResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncSolarArrayDetailsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncSolarArrayDetailsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncSolarArrayDetailsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncSolarArrayDetailsResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_solar_array: str,
        source: str,
        id: str | Omit = omit,
        area: float | Omit = omit,
        description: str | Omit = omit,
        junction_technology: str | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        origin: str | Omit = omit,
        span: float | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        technology: str | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single SolarArrayDetails as a POST body and ingest
        into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance. A SolarArray may have
        multiple details records compiled by various sources.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_solar_array: Unique identifier of the parent SolarArray.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          area: Solar Array area in square meters.

          description: Solar array description/notes.

          junction_technology: Solar array junction technology (e.g. Triple).

          manufacturer_org_id: Unique identifier of the organization that manufactures the solar array.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          span: Solar Array span in meters.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          technology: Solar array technology (e.g. Ga-As).

          type: Type of solar array (e.g. U Shaped).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/solararraydetails",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_solar_array": id_solar_array,
                    "source": source,
                    "id": id,
                    "area": area,
                    "description": description,
                    "junction_technology": junction_technology,
                    "manufacturer_org_id": manufacturer_org_id,
                    "origin": origin,
                    "span": span,
                    "tags": tags,
                    "technology": technology,
                    "type": type,
                },
                solar_array_detail_create_params.SolarArrayDetailCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_solar_array: str,
        source: str,
        body_id: str | Omit = omit,
        area: float | Omit = omit,
        description: str | Omit = omit,
        junction_technology: str | Omit = omit,
        manufacturer_org_id: str | Omit = omit,
        origin: str | Omit = omit,
        span: float | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        technology: str | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single SolarArrayDetails.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance. A SolarArray may have multiple details records compiled by various
        sources.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_solar_array: Unique identifier of the parent SolarArray.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          area: Solar Array area in square meters.

          description: Solar array description/notes.

          junction_technology: Solar array junction technology (e.g. Triple).

          manufacturer_org_id: Unique identifier of the organization that manufactures the solar array.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          span: Solar Array span in meters.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          technology: Solar array technology (e.g. Ga-As).

          type: Type of solar array (e.g. U Shaped).

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/solararraydetails/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_solar_array": id_solar_array,
                    "source": source,
                    "body_id": body_id,
                    "area": area,
                    "description": description,
                    "junction_technology": junction_technology,
                    "manufacturer_org_id": manufacturer_org_id,
                    "origin": origin,
                    "span": span,
                    "tags": tags,
                    "technology": technology,
                    "type": type,
                },
                solar_array_detail_update_params.SolarArrayDetailUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        classification_marking: str | Omit = omit,
        data_mode: str | Omit = omit,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        source: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> AsyncPaginator[SolarArrayDetailListResponse, AsyncOffsetPage[SolarArrayDetailListResponse]]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          classification_marking: (One or more of fields 'classificationMarking, dataMode, source' are required.)
              Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode: (One or more of fields 'classificationMarking, dataMode, source' are required.)
              Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data. (REAL,
              TEST, SIMULATED, or EXERCISE)

          source: (One or more of fields 'classificationMarking, dataMode, source' are required.)
              Source of the data.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/solararraydetails",
            page=AsyncOffsetPage[SolarArrayDetailListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "classification_marking": classification_marking,
                        "data_mode": data_mode,
                        "first_result": first_result,
                        "max_results": max_results,
                        "source": source,
                    },
                    solar_array_detail_list_params.SolarArrayDetailListParams,
                ),
            ),
            model=SolarArrayDetailListResponse,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a SolarArrayDetails object specified by the passed
        ID path parameter. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance. A SolarArray may have
        multiple details records compiled by various sources.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/solararraydetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def get(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SolarArrayDetailsFull:
        """
        Service operation to get a single SolarArrayDetails record by its unique ID
        passed as a path parameter. A SolarArray may have multiple details records
        compiled by various sources.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/solararraydetails/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    solar_array_detail_get_params.SolarArrayDetailGetParams,
                ),
            ),
            cast_to=SolarArrayDetailsFull,
        )


class SolarArrayDetailsResourceWithRawResponse:
    def __init__(self, solar_array_details: SolarArrayDetailsResource) -> None:
        self._solar_array_details = solar_array_details

        self.create = to_raw_response_wrapper(
            solar_array_details.create,
        )
        self.update = to_raw_response_wrapper(
            solar_array_details.update,
        )
        self.list = to_raw_response_wrapper(
            solar_array_details.list,
        )
        self.delete = to_raw_response_wrapper(
            solar_array_details.delete,
        )
        self.get = to_raw_response_wrapper(
            solar_array_details.get,
        )


class AsyncSolarArrayDetailsResourceWithRawResponse:
    def __init__(self, solar_array_details: AsyncSolarArrayDetailsResource) -> None:
        self._solar_array_details = solar_array_details

        self.create = async_to_raw_response_wrapper(
            solar_array_details.create,
        )
        self.update = async_to_raw_response_wrapper(
            solar_array_details.update,
        )
        self.list = async_to_raw_response_wrapper(
            solar_array_details.list,
        )
        self.delete = async_to_raw_response_wrapper(
            solar_array_details.delete,
        )
        self.get = async_to_raw_response_wrapper(
            solar_array_details.get,
        )


class SolarArrayDetailsResourceWithStreamingResponse:
    def __init__(self, solar_array_details: SolarArrayDetailsResource) -> None:
        self._solar_array_details = solar_array_details

        self.create = to_streamed_response_wrapper(
            solar_array_details.create,
        )
        self.update = to_streamed_response_wrapper(
            solar_array_details.update,
        )
        self.list = to_streamed_response_wrapper(
            solar_array_details.list,
        )
        self.delete = to_streamed_response_wrapper(
            solar_array_details.delete,
        )
        self.get = to_streamed_response_wrapper(
            solar_array_details.get,
        )


class AsyncSolarArrayDetailsResourceWithStreamingResponse:
    def __init__(self, solar_array_details: AsyncSolarArrayDetailsResource) -> None:
        self._solar_array_details = solar_array_details

        self.create = async_to_streamed_response_wrapper(
            solar_array_details.create,
        )
        self.update = async_to_streamed_response_wrapper(
            solar_array_details.update,
        )
        self.list = async_to_streamed_response_wrapper(
            solar_array_details.list,
        )
        self.delete = async_to_streamed_response_wrapper(
            solar_array_details.delete,
        )
        self.get = async_to_streamed_response_wrapper(
            solar_array_details.get,
        )
