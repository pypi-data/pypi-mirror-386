# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal

import httpx

from ...types import (
    sortie_ppr_get_params,
    sortie_ppr_list_params,
    sortie_ppr_count_params,
    sortie_ppr_tuple_params,
    sortie_ppr_create_params,
    sortie_ppr_update_params,
    sortie_ppr_create_bulk_params,
    sortie_ppr_unvalidated_publish_params,
)
from .history import (
    HistoryResource,
    AsyncHistoryResource,
    HistoryResourceWithRawResponse,
    AsyncHistoryResourceWithRawResponse,
    HistoryResourceWithStreamingResponse,
    AsyncHistoryResourceWithStreamingResponse,
)
from ..._types import Body, Omit, Query, Headers, NoneType, NotGiven, omit, not_given
from ..._utils import maybe_transform, async_maybe_transform
from ..._compat import cached_property
from ..._resource import SyncAPIResource, AsyncAPIResource
from ..._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ...pagination import SyncOffsetPage, AsyncOffsetPage
from ..._base_client import AsyncPaginator, make_request_options
from ...types.shared.sortie_ppr_full import SortiePprFull
from ...types.sortie_ppr_list_response import SortiePprListResponse
from ...types.sortie_ppr_tuple_response import SortiePprTupleResponse
from ...types.sortie_ppr_queryhelp_response import SortiePprQueryhelpResponse

__all__ = ["SortiePprResource", "AsyncSortiePprResource"]


class SortiePprResource(SyncAPIResource):
    @cached_property
    def history(self) -> HistoryResource:
        return HistoryResource(self._client)

    @cached_property
    def with_raw_response(self) -> SortiePprResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return SortiePprResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> SortiePprResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return SortiePprResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_sortie: str,
        source: str,
        id: str | Omit = omit,
        end_time: Union[str, datetime] | Omit = omit,
        external_id: str | Omit = omit,
        grantor: str | Omit = omit,
        number: str | Omit = omit,
        origin: str | Omit = omit,
        remarks: str | Omit = omit,
        requestor: str | Omit = omit,
        start_time: Union[str, datetime] | Omit = omit,
        type: Literal["M", "C"] | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single sortieppr record as a POST body and ingest
        into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          end_time: Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC
              format with millisecond precision.

          external_id: Optional ID from external systems. This field has no meaning within UDL and is
              provided as a convenience for systems that require tracking of an internal
              system generated ID.

          grantor: Identifier of the prior permission required (PPR) grantor.

          number: The prior permission required (PPR) number issued by the airfield for a sortie.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          remarks: Remarks concerning the prior permission required (PPR) for a sortie.

          requestor: The username of the prior permission required (PPR) requestor.

          start_time: Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC
              format with millisecond precision.

          type: Type of prior permission required (PPR) for a sortie (M - Military or C -
              Civilian). Enum: [M, C].

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/sortieppr",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_sortie": id_sortie,
                    "source": source,
                    "id": id,
                    "end_time": end_time,
                    "external_id": external_id,
                    "grantor": grantor,
                    "number": number,
                    "origin": origin,
                    "remarks": remarks,
                    "requestor": requestor,
                    "start_time": start_time,
                    "type": type,
                },
                sortie_ppr_create_params.SortiePprCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_sortie: str,
        source: str,
        body_id: str | Omit = omit,
        end_time: Union[str, datetime] | Omit = omit,
        external_id: str | Omit = omit,
        grantor: str | Omit = omit,
        number: str | Omit = omit,
        origin: str | Omit = omit,
        remarks: str | Omit = omit,
        requestor: str | Omit = omit,
        start_time: Union[str, datetime] | Omit = omit,
        type: Literal["M", "C"] | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single sortieppr record.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          end_time: Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC
              format with millisecond precision.

          external_id: Optional ID from external systems. This field has no meaning within UDL and is
              provided as a convenience for systems that require tracking of an internal
              system generated ID.

          grantor: Identifier of the prior permission required (PPR) grantor.

          number: The prior permission required (PPR) number issued by the airfield for a sortie.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          remarks: Remarks concerning the prior permission required (PPR) for a sortie.

          requestor: The username of the prior permission required (PPR) requestor.

          start_time: Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC
              format with millisecond precision.

          type: Type of prior permission required (PPR) for a sortie (M - Military or C -
              Civilian). Enum: [M, C].

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/sortieppr/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_sortie": id_sortie,
                    "source": source,
                    "body_id": body_id,
                    "end_time": end_time,
                    "external_id": external_id,
                    "grantor": grantor,
                    "number": number,
                    "origin": origin,
                    "remarks": remarks,
                    "requestor": requestor,
                    "start_time": start_time,
                    "type": type,
                },
                sortie_ppr_update_params.SortiePprUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        id_sortie: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SyncOffsetPage[SortiePprListResponse]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/sortieppr",
            page=SyncOffsetPage[SortiePprListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "id_sortie": id_sortie,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    sortie_ppr_list_params.SortiePprListParams,
                ),
            ),
            model=SortiePprListResponse,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a sortieppr record specified by the passed ID path
        parameter. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/sortieppr/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def count(
        self,
        *,
        id_sortie: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return self._get(
            "/udl/sortieppr/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "id_sortie": id_sortie,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    sortie_ppr_count_params.SortiePprCountParams,
                ),
            ),
            cast_to=str,
        )

    def create_bulk(
        self,
        *,
        body: Iterable[sortie_ppr_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of
        SortiePPR records as a POST body and ingest into the database. This operation is
        not intended to be used for automated feeds into UDL. Data providers should
        contact the UDL team for specific role assignments and for instructions on
        setting up a permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/sortieppr/createBulk",
            body=maybe_transform(body, Iterable[sortie_ppr_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def get(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SortiePprFull:
        """
        Service operation to get a single sortieppr record by its unique ID passed as a
        path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/sortieppr/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    sortie_ppr_get_params.SortiePprGetParams,
                ),
            ),
            cast_to=SortiePprFull,
        )

    def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SortiePprQueryhelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return self._get(
            "/udl/sortieppr/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SortiePprQueryhelpResponse,
        )

    def tuple(
        self,
        *,
        columns: str,
        id_sortie: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SortiePprTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get(
            "/udl/sortieppr/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "columns": columns,
                        "id_sortie": id_sortie,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    sortie_ppr_tuple_params.SortiePprTupleParams,
                ),
            ),
            cast_to=SortiePprTupleResponse,
        )

    def unvalidated_publish(
        self,
        *,
        body: Iterable[sortie_ppr_unvalidated_publish_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take SortiePPR as a POST body and ingest into the database.
        This operation is intended to be used for automated feeds into UDL. A specific
        role is required to perform this service operation. Please contact the UDL team
        for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/filedrop/udl-sortieppr",
            body=maybe_transform(body, Iterable[sortie_ppr_unvalidated_publish_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class AsyncSortiePprResource(AsyncAPIResource):
    @cached_property
    def history(self) -> AsyncHistoryResource:
        return AsyncHistoryResource(self._client)

    @cached_property
    def with_raw_response(self) -> AsyncSortiePprResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncSortiePprResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncSortiePprResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncSortiePprResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_sortie: str,
        source: str,
        id: str | Omit = omit,
        end_time: Union[str, datetime] | Omit = omit,
        external_id: str | Omit = omit,
        grantor: str | Omit = omit,
        number: str | Omit = omit,
        origin: str | Omit = omit,
        remarks: str | Omit = omit,
        requestor: str | Omit = omit,
        start_time: Union[str, datetime] | Omit = omit,
        type: Literal["M", "C"] | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single sortieppr record as a POST body and ingest
        into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          end_time: Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC
              format with millisecond precision.

          external_id: Optional ID from external systems. This field has no meaning within UDL and is
              provided as a convenience for systems that require tracking of an internal
              system generated ID.

          grantor: Identifier of the prior permission required (PPR) grantor.

          number: The prior permission required (PPR) number issued by the airfield for a sortie.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          remarks: Remarks concerning the prior permission required (PPR) for a sortie.

          requestor: The username of the prior permission required (PPR) requestor.

          start_time: Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC
              format with millisecond precision.

          type: Type of prior permission required (PPR) for a sortie (M - Military or C -
              Civilian). Enum: [M, C].

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/sortieppr",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_sortie": id_sortie,
                    "source": source,
                    "id": id,
                    "end_time": end_time,
                    "external_id": external_id,
                    "grantor": grantor,
                    "number": number,
                    "origin": origin,
                    "remarks": remarks,
                    "requestor": requestor,
                    "start_time": start_time,
                    "type": type,
                },
                sortie_ppr_create_params.SortiePprCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        id_sortie: str,
        source: str,
        body_id: str | Omit = omit,
        end_time: Union[str, datetime] | Omit = omit,
        external_id: str | Omit = omit,
        grantor: str | Omit = omit,
        number: str | Omit = omit,
        origin: str | Omit = omit,
        remarks: str | Omit = omit,
        requestor: str | Omit = omit,
        start_time: Union[str, datetime] | Omit = omit,
        type: Literal["M", "C"] | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single sortieppr record.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          end_time: Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC
              format with millisecond precision.

          external_id: Optional ID from external systems. This field has no meaning within UDL and is
              provided as a convenience for systems that require tracking of an internal
              system generated ID.

          grantor: Identifier of the prior permission required (PPR) grantor.

          number: The prior permission required (PPR) number issued by the airfield for a sortie.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          remarks: Remarks concerning the prior permission required (PPR) for a sortie.

          requestor: The username of the prior permission required (PPR) requestor.

          start_time: Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC
              format with millisecond precision.

          type: Type of prior permission required (PPR) for a sortie (M - Military or C -
              Civilian). Enum: [M, C].

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/sortieppr/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "id_sortie": id_sortie,
                    "source": source,
                    "body_id": body_id,
                    "end_time": end_time,
                    "external_id": external_id,
                    "grantor": grantor,
                    "number": number,
                    "origin": origin,
                    "remarks": remarks,
                    "requestor": requestor,
                    "start_time": start_time,
                    "type": type,
                },
                sortie_ppr_update_params.SortiePprUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        id_sortie: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> AsyncPaginator[SortiePprListResponse, AsyncOffsetPage[SortiePprListResponse]]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/sortieppr",
            page=AsyncOffsetPage[SortiePprListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "id_sortie": id_sortie,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    sortie_ppr_list_params.SortiePprListParams,
                ),
            ),
            model=SortiePprListResponse,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a sortieppr record specified by the passed ID path
        parameter. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/sortieppr/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def count(
        self,
        *,
        id_sortie: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return await self._get(
            "/udl/sortieppr/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "id_sortie": id_sortie,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    sortie_ppr_count_params.SortiePprCountParams,
                ),
            ),
            cast_to=str,
        )

    async def create_bulk(
        self,
        *,
        body: Iterable[sortie_ppr_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of
        SortiePPR records as a POST body and ingest into the database. This operation is
        not intended to be used for automated feeds into UDL. Data providers should
        contact the UDL team for specific role assignments and for instructions on
        setting up a permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/sortieppr/createBulk",
            body=await async_maybe_transform(body, Iterable[sortie_ppr_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def get(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SortiePprFull:
        """
        Service operation to get a single sortieppr record by its unique ID passed as a
        path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/sortieppr/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    sortie_ppr_get_params.SortiePprGetParams,
                ),
            ),
            cast_to=SortiePprFull,
        )

    async def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SortiePprQueryhelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return await self._get(
            "/udl/sortieppr/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SortiePprQueryhelpResponse,
        )

    async def tuple(
        self,
        *,
        columns: str,
        id_sortie: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SortiePprTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the ‘queryhelp’ operation
              for a complete list of possible fields.

          id_sortie: Unique identifier of the Aircraft Sortie associated with this prior permission
              required (PPR) record.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._get(
            "/udl/sortieppr/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "columns": columns,
                        "id_sortie": id_sortie,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    sortie_ppr_tuple_params.SortiePprTupleParams,
                ),
            ),
            cast_to=SortiePprTupleResponse,
        )

    async def unvalidated_publish(
        self,
        *,
        body: Iterable[sortie_ppr_unvalidated_publish_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take SortiePPR as a POST body and ingest into the database.
        This operation is intended to be used for automated feeds into UDL. A specific
        role is required to perform this service operation. Please contact the UDL team
        for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/filedrop/udl-sortieppr",
            body=await async_maybe_transform(body, Iterable[sortie_ppr_unvalidated_publish_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class SortiePprResourceWithRawResponse:
    def __init__(self, sortie_ppr: SortiePprResource) -> None:
        self._sortie_ppr = sortie_ppr

        self.create = to_raw_response_wrapper(
            sortie_ppr.create,
        )
        self.update = to_raw_response_wrapper(
            sortie_ppr.update,
        )
        self.list = to_raw_response_wrapper(
            sortie_ppr.list,
        )
        self.delete = to_raw_response_wrapper(
            sortie_ppr.delete,
        )
        self.count = to_raw_response_wrapper(
            sortie_ppr.count,
        )
        self.create_bulk = to_raw_response_wrapper(
            sortie_ppr.create_bulk,
        )
        self.get = to_raw_response_wrapper(
            sortie_ppr.get,
        )
        self.queryhelp = to_raw_response_wrapper(
            sortie_ppr.queryhelp,
        )
        self.tuple = to_raw_response_wrapper(
            sortie_ppr.tuple,
        )
        self.unvalidated_publish = to_raw_response_wrapper(
            sortie_ppr.unvalidated_publish,
        )

    @cached_property
    def history(self) -> HistoryResourceWithRawResponse:
        return HistoryResourceWithRawResponse(self._sortie_ppr.history)


class AsyncSortiePprResourceWithRawResponse:
    def __init__(self, sortie_ppr: AsyncSortiePprResource) -> None:
        self._sortie_ppr = sortie_ppr

        self.create = async_to_raw_response_wrapper(
            sortie_ppr.create,
        )
        self.update = async_to_raw_response_wrapper(
            sortie_ppr.update,
        )
        self.list = async_to_raw_response_wrapper(
            sortie_ppr.list,
        )
        self.delete = async_to_raw_response_wrapper(
            sortie_ppr.delete,
        )
        self.count = async_to_raw_response_wrapper(
            sortie_ppr.count,
        )
        self.create_bulk = async_to_raw_response_wrapper(
            sortie_ppr.create_bulk,
        )
        self.get = async_to_raw_response_wrapper(
            sortie_ppr.get,
        )
        self.queryhelp = async_to_raw_response_wrapper(
            sortie_ppr.queryhelp,
        )
        self.tuple = async_to_raw_response_wrapper(
            sortie_ppr.tuple,
        )
        self.unvalidated_publish = async_to_raw_response_wrapper(
            sortie_ppr.unvalidated_publish,
        )

    @cached_property
    def history(self) -> AsyncHistoryResourceWithRawResponse:
        return AsyncHistoryResourceWithRawResponse(self._sortie_ppr.history)


class SortiePprResourceWithStreamingResponse:
    def __init__(self, sortie_ppr: SortiePprResource) -> None:
        self._sortie_ppr = sortie_ppr

        self.create = to_streamed_response_wrapper(
            sortie_ppr.create,
        )
        self.update = to_streamed_response_wrapper(
            sortie_ppr.update,
        )
        self.list = to_streamed_response_wrapper(
            sortie_ppr.list,
        )
        self.delete = to_streamed_response_wrapper(
            sortie_ppr.delete,
        )
        self.count = to_streamed_response_wrapper(
            sortie_ppr.count,
        )
        self.create_bulk = to_streamed_response_wrapper(
            sortie_ppr.create_bulk,
        )
        self.get = to_streamed_response_wrapper(
            sortie_ppr.get,
        )
        self.queryhelp = to_streamed_response_wrapper(
            sortie_ppr.queryhelp,
        )
        self.tuple = to_streamed_response_wrapper(
            sortie_ppr.tuple,
        )
        self.unvalidated_publish = to_streamed_response_wrapper(
            sortie_ppr.unvalidated_publish,
        )

    @cached_property
    def history(self) -> HistoryResourceWithStreamingResponse:
        return HistoryResourceWithStreamingResponse(self._sortie_ppr.history)


class AsyncSortiePprResourceWithStreamingResponse:
    def __init__(self, sortie_ppr: AsyncSortiePprResource) -> None:
        self._sortie_ppr = sortie_ppr

        self.create = async_to_streamed_response_wrapper(
            sortie_ppr.create,
        )
        self.update = async_to_streamed_response_wrapper(
            sortie_ppr.update,
        )
        self.list = async_to_streamed_response_wrapper(
            sortie_ppr.list,
        )
        self.delete = async_to_streamed_response_wrapper(
            sortie_ppr.delete,
        )
        self.count = async_to_streamed_response_wrapper(
            sortie_ppr.count,
        )
        self.create_bulk = async_to_streamed_response_wrapper(
            sortie_ppr.create_bulk,
        )
        self.get = async_to_streamed_response_wrapper(
            sortie_ppr.get,
        )
        self.queryhelp = async_to_streamed_response_wrapper(
            sortie_ppr.queryhelp,
        )
        self.tuple = async_to_streamed_response_wrapper(
            sortie_ppr.tuple,
        )
        self.unvalidated_publish = async_to_streamed_response_wrapper(
            sortie_ppr.unvalidated_publish,
        )

    @cached_property
    def history(self) -> AsyncHistoryResourceWithStreamingResponse:
        return AsyncHistoryResourceWithStreamingResponse(self._sortie_ppr.history)
