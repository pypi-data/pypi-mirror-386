# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal

import httpx

from ..._types import Body, Omit, Query, Headers, NoneType, NotGiven, SequenceNotStr, omit, not_given
from ..._utils import maybe_transform, async_maybe_transform
from ..._compat import cached_property
from ..._resource import SyncAPIResource, AsyncAPIResource
from ..._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ..._base_client import make_request_options
from ...types.report_and_activities import udl_h3geo_unvalidated_publish_params

__all__ = ["UdlH3geoResource", "AsyncUdlH3geoResource"]


class UdlH3geoResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> UdlH3geoResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return UdlH3geoResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> UdlH3geoResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return UdlH3geoResourceWithStreamingResponse(self)

    def unvalidated_publish(
        self,
        *,
        cells: Iterable[udl_h3geo_unvalidated_publish_params.Cell],
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        num_cells: int,
        source: str,
        start_time: Union[str, datetime],
        id: str | Omit = omit,
        center_freq: float | Omit = omit,
        end_time: Union[str, datetime] | Omit = omit,
        origin: str | Omit = omit,
        resolution: int | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single H3Geo record and many associated H3Geo hex
        cell records as a POST body and ingest into the database. This operation is
        intended to be used for automated feeds into UDL. A specific role is required to
        perform this service operation. Please contact the UDL team for assistance.

        Args:
          cells: The collection of hex cells contained in this H3 data set. The number of cells
              is a function of the specified resolution.

          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          num_cells: The number of cells associated with this H3 Geo data set. At this time, UDL
              supports up to 50,000 cells.

          source: Source of the data.

          start_time: Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.

          id: Unique identifier of the record, auto-generated by the system.

          center_freq: The center frequency of this H3 Geo data set measured in megahertz.

          end_time: End time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          resolution: H3 resolution (0 â€“ 15) for the data set. At this time, UDL supports a resolution
              of 3 or less.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          type: An optional field containing the type of data that is represented by this H3 Geo
              data set.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/filedrop/udl-h3geo",
            body=maybe_transform(
                {
                    "cells": cells,
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "num_cells": num_cells,
                    "source": source,
                    "start_time": start_time,
                    "id": id,
                    "center_freq": center_freq,
                    "end_time": end_time,
                    "origin": origin,
                    "resolution": resolution,
                    "tags": tags,
                    "type": type,
                },
                udl_h3geo_unvalidated_publish_params.UdlH3geoUnvalidatedPublishParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class AsyncUdlH3geoResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncUdlH3geoResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncUdlH3geoResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncUdlH3geoResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncUdlH3geoResourceWithStreamingResponse(self)

    async def unvalidated_publish(
        self,
        *,
        cells: Iterable[udl_h3geo_unvalidated_publish_params.Cell],
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        num_cells: int,
        source: str,
        start_time: Union[str, datetime],
        id: str | Omit = omit,
        center_freq: float | Omit = omit,
        end_time: Union[str, datetime] | Omit = omit,
        origin: str | Omit = omit,
        resolution: int | Omit = omit,
        tags: SequenceNotStr[str] | Omit = omit,
        type: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single H3Geo record and many associated H3Geo hex
        cell records as a POST body and ingest into the database. This operation is
        intended to be used for automated feeds into UDL. A specific role is required to
        perform this service operation. Please contact the UDL team for assistance.

        Args:
          cells: The collection of hex cells contained in this H3 data set. The number of cells
              is a function of the specified resolution.

          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          num_cells: The number of cells associated with this H3 Geo data set. At this time, UDL
              supports up to 50,000 cells.

          source: Source of the data.

          start_time: Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.

          id: Unique identifier of the record, auto-generated by the system.

          center_freq: The center frequency of this H3 Geo data set measured in megahertz.

          end_time: End time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          resolution: H3 resolution (0 â€“ 15) for the data set. At this time, UDL supports a resolution
              of 3 or less.

          tags: Optional array of provider/source specific tags for this data, where each
              element is no longer than 32 characters, used for implementing data owner
              conditional access controls to restrict access to the data. Should be left null
              by data providers unless conditional access controls are coordinated with the
              UDL team.

          type: An optional field containing the type of data that is represented by this H3 Geo
              data set.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/filedrop/udl-h3geo",
            body=await async_maybe_transform(
                {
                    "cells": cells,
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "num_cells": num_cells,
                    "source": source,
                    "start_time": start_time,
                    "id": id,
                    "center_freq": center_freq,
                    "end_time": end_time,
                    "origin": origin,
                    "resolution": resolution,
                    "tags": tags,
                    "type": type,
                },
                udl_h3geo_unvalidated_publish_params.UdlH3geoUnvalidatedPublishParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class UdlH3geoResourceWithRawResponse:
    def __init__(self, udl_h3geo: UdlH3geoResource) -> None:
        self._udl_h3geo = udl_h3geo

        self.unvalidated_publish = to_raw_response_wrapper(
            udl_h3geo.unvalidated_publish,
        )


class AsyncUdlH3geoResourceWithRawResponse:
    def __init__(self, udl_h3geo: AsyncUdlH3geoResource) -> None:
        self._udl_h3geo = udl_h3geo

        self.unvalidated_publish = async_to_raw_response_wrapper(
            udl_h3geo.unvalidated_publish,
        )


class UdlH3geoResourceWithStreamingResponse:
    def __init__(self, udl_h3geo: UdlH3geoResource) -> None:
        self._udl_h3geo = udl_h3geo

        self.unvalidated_publish = to_streamed_response_wrapper(
            udl_h3geo.unvalidated_publish,
        )


class AsyncUdlH3geoResourceWithStreamingResponse:
    def __init__(self, udl_h3geo: AsyncUdlH3geoResource) -> None:
        self._udl_h3geo = udl_h3geo

        self.unvalidated_publish = async_to_streamed_response_wrapper(
            udl_h3geo.unvalidated_publish,
        )
