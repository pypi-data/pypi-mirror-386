# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Iterable
from typing_extensions import Literal

import httpx

from ..types import (
    port_get_params,
    port_list_params,
    port_count_params,
    port_tuple_params,
    port_create_params,
    port_update_params,
    port_create_bulk_params,
)
from .._types import Body, Omit, Query, Headers, NoneType, NotGiven, omit, not_given
from .._utils import maybe_transform, async_maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ..pagination import SyncOffsetPage, AsyncOffsetPage
from .._base_client import AsyncPaginator, make_request_options
from ..types.port_get_response import PortGetResponse
from ..types.port_list_response import PortListResponse
from ..types.port_tuple_response import PortTupleResponse
from ..types.port_queryhelp_response import PortQueryhelpResponse

__all__ = ["PortResource", "AsyncPortResource"]


class PortResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> PortResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return PortResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> PortResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return PortResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        id: str | Omit = omit,
        avg_duration: float | Omit = omit,
        country_code: str | Omit = omit,
        external_id: str | Omit = omit,
        harbor_size: float | Omit = omit,
        harbor_type: str | Omit = omit,
        id_site: str | Omit = omit,
        lat: float | Omit = omit,
        locode: str | Omit = omit,
        lon: float | Omit = omit,
        max_draught: float | Omit = omit,
        origin: str | Omit = omit,
        pilot_reqd: bool | Omit = omit,
        port_name: str | Omit = omit,
        shelter: str | Omit = omit,
        tide_range: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single port record as a POST body and ingest into
        the database. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          avg_duration: Average time for a vessel at this port in hours.

          country_code: The country where this port is located.

          external_id: Optional ID from external systems. This field has no meaning within UDL and is
              provided as a convenience for systems that require tracking of an internal
              system generated ID.

          harbor_size: The size of the harbor for this port measured in square kilometers.

          harbor_type: The type of harbor for this port. The harbor type refers to how a port is
              physically positioned.

              COASTAL BREAKWATER (CB)

              COASTAL NATURAL (CN)

              COASTAL TIDE GATE (CT)

              LAKE OR CANAL (LC)

              OPEN ROADSTEAD (OR)

              RIVER BASIN (RB)

              RIVER NATURAL (RN)

              RIVER TIDE GATE (RT)

              TYPHOON HARBOR (TH).

          id_site: Unique identifier of the Site Entity associated with the Port record.

          lat: WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
              south of equator).

          locode: The five-character United Nations Code for Trade and Transport Locations
              (UN/LOCODE) of this port. The first two letters of the code contains the ISO
              3166-1 alpha-2 country designation of the port country. The three remaining
              characters identify a location within that country. Letters are preferred, but
              if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid
              confusion with the letters "O" and "I" respectively.

          lon: WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          max_draught: Maximum allowed vessel draught. Draught is the principal dimensions of any
              waterborne vessel defined as the distance between the shipâ€™s keel and the
              waterline of the vessel measured in meters.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          pilot_reqd: Flag indicating whether a pilot is required at this port.

          port_name: The name of this port.

          shelter: The shelter afforded from wind, sea, and swell refers to the area where normal
              port operations are conducted, usually the wharf area. Shelter afforded by the
              anchorage area may be given for ports where cargo is handled by lighters. Values
              given are EXCELLENT, FAIR, GOOD, POOR, or NONE.

          tide_range: The tide range of this port in meters.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/port",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "id": id,
                    "avg_duration": avg_duration,
                    "country_code": country_code,
                    "external_id": external_id,
                    "harbor_size": harbor_size,
                    "harbor_type": harbor_type,
                    "id_site": id_site,
                    "lat": lat,
                    "locode": locode,
                    "lon": lon,
                    "max_draught": max_draught,
                    "origin": origin,
                    "pilot_reqd": pilot_reqd,
                    "port_name": port_name,
                    "shelter": shelter,
                    "tide_range": tide_range,
                },
                port_create_params.PortCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        body_id: str | Omit = omit,
        avg_duration: float | Omit = omit,
        country_code: str | Omit = omit,
        external_id: str | Omit = omit,
        harbor_size: float | Omit = omit,
        harbor_type: str | Omit = omit,
        id_site: str | Omit = omit,
        lat: float | Omit = omit,
        locode: str | Omit = omit,
        lon: float | Omit = omit,
        max_draught: float | Omit = omit,
        origin: str | Omit = omit,
        pilot_reqd: bool | Omit = omit,
        port_name: str | Omit = omit,
        shelter: str | Omit = omit,
        tide_range: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single port record.

        A specific role is required to
        perform this service operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          avg_duration: Average time for a vessel at this port in hours.

          country_code: The country where this port is located.

          external_id: Optional ID from external systems. This field has no meaning within UDL and is
              provided as a convenience for systems that require tracking of an internal
              system generated ID.

          harbor_size: The size of the harbor for this port measured in square kilometers.

          harbor_type: The type of harbor for this port. The harbor type refers to how a port is
              physically positioned.

              COASTAL BREAKWATER (CB)

              COASTAL NATURAL (CN)

              COASTAL TIDE GATE (CT)

              LAKE OR CANAL (LC)

              OPEN ROADSTEAD (OR)

              RIVER BASIN (RB)

              RIVER NATURAL (RN)

              RIVER TIDE GATE (RT)

              TYPHOON HARBOR (TH).

          id_site: Unique identifier of the Site Entity associated with the Port record.

          lat: WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
              south of equator).

          locode: The five-character United Nations Code for Trade and Transport Locations
              (UN/LOCODE) of this port. The first two letters of the code contains the ISO
              3166-1 alpha-2 country designation of the port country. The three remaining
              characters identify a location within that country. Letters are preferred, but
              if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid
              confusion with the letters "O" and "I" respectively.

          lon: WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          max_draught: Maximum allowed vessel draught. Draught is the principal dimensions of any
              waterborne vessel defined as the distance between the shipâ€™s keel and the
              waterline of the vessel measured in meters.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          pilot_reqd: Flag indicating whether a pilot is required at this port.

          port_name: The name of this port.

          shelter: The shelter afforded from wind, sea, and swell refers to the area where normal
              port operations are conducted, usually the wharf area. Shelter afforded by the
              anchorage area may be given for ports where cargo is handled by lighters. Values
              given are EXCELLENT, FAIR, GOOD, POOR, or NONE.

          tide_range: The tide range of this port in meters.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/port/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "body_id": body_id,
                    "avg_duration": avg_duration,
                    "country_code": country_code,
                    "external_id": external_id,
                    "harbor_size": harbor_size,
                    "harbor_type": harbor_type,
                    "id_site": id_site,
                    "lat": lat,
                    "locode": locode,
                    "lon": lon,
                    "max_draught": max_draught,
                    "origin": origin,
                    "pilot_reqd": pilot_reqd,
                    "port_name": port_name,
                    "shelter": shelter,
                    "tide_range": tide_range,
                },
                port_update_params.PortUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SyncOffsetPage[PortListResponse]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/port",
            page=SyncOffsetPage[PortListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    port_list_params.PortListParams,
                ),
            ),
            model=PortListResponse,
        )

    def count(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return self._get(
            "/udl/port/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    port_count_params.PortCountParams,
                ),
            ),
            cast_to=str,
        )

    def create_bulk(
        self,
        *,
        body: Iterable[port_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of port
        records as a POST body and ingest into the database. This operation is not
        intended to be used for automated feeds into UDL. Data providers should contact
        the UDL team for specific role assignments and for instructions on setting up a
        permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/port/createBulk",
            body=maybe_transform(body, Iterable[port_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def get(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> PortGetResponse:
        """
        Service operation to get a single port record by its unique ID passed as a path
        parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/port/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    port_get_params.PortGetParams,
                ),
            ),
            cast_to=PortGetResponse,
        )

    def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> PortQueryhelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return self._get(
            "/udl/port/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=PortQueryhelpResponse,
        )

    def tuple(
        self,
        *,
        columns: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> PortTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the â€˜queryhelpâ€™ operation
              for a complete list of possible fields.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get(
            "/udl/port/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "columns": columns,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    port_tuple_params.PortTupleParams,
                ),
            ),
            cast_to=PortTupleResponse,
        )


class AsyncPortResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncPortResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncPortResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncPortResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncPortResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        id: str | Omit = omit,
        avg_duration: float | Omit = omit,
        country_code: str | Omit = omit,
        external_id: str | Omit = omit,
        harbor_size: float | Omit = omit,
        harbor_type: str | Omit = omit,
        id_site: str | Omit = omit,
        lat: float | Omit = omit,
        locode: str | Omit = omit,
        lon: float | Omit = omit,
        max_draught: float | Omit = omit,
        origin: str | Omit = omit,
        pilot_reqd: bool | Omit = omit,
        port_name: str | Omit = omit,
        shelter: str | Omit = omit,
        tide_range: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single port record as a POST body and ingest into
        the database. A specific role is required to perform this service operation.
        Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          avg_duration: Average time for a vessel at this port in hours.

          country_code: The country where this port is located.

          external_id: Optional ID from external systems. This field has no meaning within UDL and is
              provided as a convenience for systems that require tracking of an internal
              system generated ID.

          harbor_size: The size of the harbor for this port measured in square kilometers.

          harbor_type: The type of harbor for this port. The harbor type refers to how a port is
              physically positioned.

              COASTAL BREAKWATER (CB)

              COASTAL NATURAL (CN)

              COASTAL TIDE GATE (CT)

              LAKE OR CANAL (LC)

              OPEN ROADSTEAD (OR)

              RIVER BASIN (RB)

              RIVER NATURAL (RN)

              RIVER TIDE GATE (RT)

              TYPHOON HARBOR (TH).

          id_site: Unique identifier of the Site Entity associated with the Port record.

          lat: WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
              south of equator).

          locode: The five-character United Nations Code for Trade and Transport Locations
              (UN/LOCODE) of this port. The first two letters of the code contains the ISO
              3166-1 alpha-2 country designation of the port country. The three remaining
              characters identify a location within that country. Letters are preferred, but
              if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid
              confusion with the letters "O" and "I" respectively.

          lon: WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          max_draught: Maximum allowed vessel draught. Draught is the principal dimensions of any
              waterborne vessel defined as the distance between the shipâ€™s keel and the
              waterline of the vessel measured in meters.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          pilot_reqd: Flag indicating whether a pilot is required at this port.

          port_name: The name of this port.

          shelter: The shelter afforded from wind, sea, and swell refers to the area where normal
              port operations are conducted, usually the wharf area. Shelter afforded by the
              anchorage area may be given for ports where cargo is handled by lighters. Values
              given are EXCELLENT, FAIR, GOOD, POOR, or NONE.

          tide_range: The tide range of this port in meters.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/port",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "id": id,
                    "avg_duration": avg_duration,
                    "country_code": country_code,
                    "external_id": external_id,
                    "harbor_size": harbor_size,
                    "harbor_type": harbor_type,
                    "id_site": id_site,
                    "lat": lat,
                    "locode": locode,
                    "lon": lon,
                    "max_draught": max_draught,
                    "origin": origin,
                    "pilot_reqd": pilot_reqd,
                    "port_name": port_name,
                    "shelter": shelter,
                    "tide_range": tide_range,
                },
                port_create_params.PortCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        source: str,
        body_id: str | Omit = omit,
        avg_duration: float | Omit = omit,
        country_code: str | Omit = omit,
        external_id: str | Omit = omit,
        harbor_size: float | Omit = omit,
        harbor_type: str | Omit = omit,
        id_site: str | Omit = omit,
        lat: float | Omit = omit,
        locode: str | Omit = omit,
        lon: float | Omit = omit,
        max_draught: float | Omit = omit,
        origin: str | Omit = omit,
        pilot_reqd: bool | Omit = omit,
        port_name: str | Omit = omit,
        shelter: str | Omit = omit,
        tide_range: float | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single port record.

        A specific role is required to
        perform this service operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system if not provided on
              create operations.

          avg_duration: Average time for a vessel at this port in hours.

          country_code: The country where this port is located.

          external_id: Optional ID from external systems. This field has no meaning within UDL and is
              provided as a convenience for systems that require tracking of an internal
              system generated ID.

          harbor_size: The size of the harbor for this port measured in square kilometers.

          harbor_type: The type of harbor for this port. The harbor type refers to how a port is
              physically positioned.

              COASTAL BREAKWATER (CB)

              COASTAL NATURAL (CN)

              COASTAL TIDE GATE (CT)

              LAKE OR CANAL (LC)

              OPEN ROADSTEAD (OR)

              RIVER BASIN (RB)

              RIVER NATURAL (RN)

              RIVER TIDE GATE (RT)

              TYPHOON HARBOR (TH).

          id_site: Unique identifier of the Site Entity associated with the Port record.

          lat: WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
              south of equator).

          locode: The five-character United Nations Code for Trade and Transport Locations
              (UN/LOCODE) of this port. The first two letters of the code contains the ISO
              3166-1 alpha-2 country designation of the port country. The three remaining
              characters identify a location within that country. Letters are preferred, but
              if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid
              confusion with the letters "O" and "I" respectively.

          lon: WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          max_draught: Maximum allowed vessel draught. Draught is the principal dimensions of any
              waterborne vessel defined as the distance between the shipâ€™s keel and the
              waterline of the vessel measured in meters.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          pilot_reqd: Flag indicating whether a pilot is required at this port.

          port_name: The name of this port.

          shelter: The shelter afforded from wind, sea, and swell refers to the area where normal
              port operations are conducted, usually the wharf area. Shelter afforded by the
              anchorage area may be given for ports where cargo is handled by lighters. Values
              given are EXCELLENT, FAIR, GOOD, POOR, or NONE.

          tide_range: The tide range of this port in meters.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/port/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "source": source,
                    "body_id": body_id,
                    "avg_duration": avg_duration,
                    "country_code": country_code,
                    "external_id": external_id,
                    "harbor_size": harbor_size,
                    "harbor_type": harbor_type,
                    "id_site": id_site,
                    "lat": lat,
                    "locode": locode,
                    "lon": lon,
                    "max_draught": max_draught,
                    "origin": origin,
                    "pilot_reqd": pilot_reqd,
                    "port_name": port_name,
                    "shelter": shelter,
                    "tide_range": tide_range,
                },
                port_update_params.PortUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> AsyncPaginator[PortListResponse, AsyncOffsetPage[PortListResponse]]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/port",
            page=AsyncOffsetPage[PortListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    port_list_params.PortListParams,
                ),
            ),
            model=PortListResponse,
        )

    async def count(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return await self._get(
            "/udl/port/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    port_count_params.PortCountParams,
                ),
            ),
            cast_to=str,
        )

    async def create_bulk(
        self,
        *,
        body: Iterable[port_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of port
        records as a POST body and ingest into the database. This operation is not
        intended to be used for automated feeds into UDL. Data providers should contact
        the UDL team for specific role assignments and for instructions on setting up a
        permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/port/createBulk",
            body=await async_maybe_transform(body, Iterable[port_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def get(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> PortGetResponse:
        """
        Service operation to get a single port record by its unique ID passed as a path
        parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/port/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    port_get_params.PortGetParams,
                ),
            ),
            cast_to=PortGetResponse,
        )

    async def queryhelp(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> PortQueryhelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return await self._get(
            "/udl/port/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=PortQueryhelpResponse,
        )

    async def tuple(
        self,
        *,
        columns: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> PortTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the â€˜queryhelpâ€™ operation
              for a complete list of possible fields.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._get(
            "/udl/port/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "columns": columns,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    port_tuple_params.PortTupleParams,
                ),
            ),
            cast_to=PortTupleResponse,
        )


class PortResourceWithRawResponse:
    def __init__(self, port: PortResource) -> None:
        self._port = port

        self.create = to_raw_response_wrapper(
            port.create,
        )
        self.update = to_raw_response_wrapper(
            port.update,
        )
        self.list = to_raw_response_wrapper(
            port.list,
        )
        self.count = to_raw_response_wrapper(
            port.count,
        )
        self.create_bulk = to_raw_response_wrapper(
            port.create_bulk,
        )
        self.get = to_raw_response_wrapper(
            port.get,
        )
        self.queryhelp = to_raw_response_wrapper(
            port.queryhelp,
        )
        self.tuple = to_raw_response_wrapper(
            port.tuple,
        )


class AsyncPortResourceWithRawResponse:
    def __init__(self, port: AsyncPortResource) -> None:
        self._port = port

        self.create = async_to_raw_response_wrapper(
            port.create,
        )
        self.update = async_to_raw_response_wrapper(
            port.update,
        )
        self.list = async_to_raw_response_wrapper(
            port.list,
        )
        self.count = async_to_raw_response_wrapper(
            port.count,
        )
        self.create_bulk = async_to_raw_response_wrapper(
            port.create_bulk,
        )
        self.get = async_to_raw_response_wrapper(
            port.get,
        )
        self.queryhelp = async_to_raw_response_wrapper(
            port.queryhelp,
        )
        self.tuple = async_to_raw_response_wrapper(
            port.tuple,
        )


class PortResourceWithStreamingResponse:
    def __init__(self, port: PortResource) -> None:
        self._port = port

        self.create = to_streamed_response_wrapper(
            port.create,
        )
        self.update = to_streamed_response_wrapper(
            port.update,
        )
        self.list = to_streamed_response_wrapper(
            port.list,
        )
        self.count = to_streamed_response_wrapper(
            port.count,
        )
        self.create_bulk = to_streamed_response_wrapper(
            port.create_bulk,
        )
        self.get = to_streamed_response_wrapper(
            port.get,
        )
        self.queryhelp = to_streamed_response_wrapper(
            port.queryhelp,
        )
        self.tuple = to_streamed_response_wrapper(
            port.tuple,
        )


class AsyncPortResourceWithStreamingResponse:
    def __init__(self, port: AsyncPortResource) -> None:
        self._port = port

        self.create = async_to_streamed_response_wrapper(
            port.create,
        )
        self.update = async_to_streamed_response_wrapper(
            port.update,
        )
        self.list = async_to_streamed_response_wrapper(
            port.list,
        )
        self.count = async_to_streamed_response_wrapper(
            port.count,
        )
        self.create_bulk = async_to_streamed_response_wrapper(
            port.create_bulk,
        )
        self.get = async_to_streamed_response_wrapper(
            port.get,
        )
        self.queryhelp = async_to_streamed_response_wrapper(
            port.queryhelp,
        )
        self.tuple = async_to_streamed_response_wrapper(
            port.tuple,
        )
