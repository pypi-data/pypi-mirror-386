# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union
from datetime import datetime
from typing_extensions import Literal

import httpx

from ..types import linkstatus_update_params
from .._types import Body, Omit, Query, Headers, NoneType, NotGiven, omit, not_given
from .._utils import maybe_transform, async_maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from .._base_client import make_request_options

__all__ = ["LinkstatusResource", "AsyncLinkstatusResource"]


class LinkstatusResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> LinkstatusResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return LinkstatusResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> LinkstatusResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return LinkstatusResourceWithStreamingResponse(self)

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        end_point1_lat: float,
        end_point1_lon: float,
        end_point1_name: str,
        end_point2_lat: float,
        end_point2_lon: float,
        end_point2_name: str,
        link_name: str,
        link_start_time: Union[str, datetime],
        link_stop_time: Union[str, datetime],
        source: str,
        body_id: str | Omit = omit,
        band: str | Omit = omit,
        constellation: str | Omit = omit,
        data_rate1_to2: float | Omit = omit,
        data_rate2_to1: float | Omit = omit,
        id_beam1: str | Omit = omit,
        id_beam2: str | Omit = omit,
        link_state: str | Omit = omit,
        link_type: str | Omit = omit,
        ops_cap: str | Omit = omit,
        origin: str | Omit = omit,
        sat_no1: int | Omit = omit,
        sat_no2: int | Omit = omit,
        snr: float | Omit = omit,
        sys_cap: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single LinkStatus.

        A specific role is required to
        perform this service operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          end_point1_lat: Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative
              values south of equator).

          end_point1_lon: Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees
              (negative values west of Prime Meridian).

          end_point1_name: The name or description of link endpoint-1, corresponding to beam-1.

          end_point2_lat: Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative
              values south of equator).

          end_point2_lon: Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees
              (negative values west of Prime Meridian).

          end_point2_name: The name or description of link endpoint-2, corresponding to beam-2.

          link_name: The name or description of the link.

          link_start_time: The link establishment time, or the time that the link becomes available for
              use, in ISO8601 UTC format.

          link_stop_time: The link termination time, or the time that the link becomes unavailable for
              use, in ISO8601 UTC format.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          band: The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).

          constellation: The constellation name if the link is established over a LEO/MEO constellation.
              In this case, idOnOrbit1 and idOnOrbit2 will be null.

          data_rate1_to2: The endpoint-1 to endpoint-2 data rate, in kbps.

          data_rate2_to1: The endpoint-2 to endpoint-1 data rate, in kbps.

          id_beam1: The ID of beam-1 forming the link. In the case of two sat link, beam-1
              corresponds to Sat-1.

          id_beam2: The ID of beam-2 forming the link. In the case of two sat link, beam-2
              corresponds to Sat-2.

          link_state: The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).

          link_type: The type of the link.

          ops_cap: The OPSCAP mission status of the system(s) forming the link.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          sat_no1: Satellite/catalog number of the target on-orbit primary object.

          sat_no2: Satellite/catalog number of the target on-orbit secondary object.

          snr: Signal to noise ratio, in dB.

          sys_cap: The SYSCAP mission status of the system(s) forming the link.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/linkstatus/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "end_point1_lat": end_point1_lat,
                    "end_point1_lon": end_point1_lon,
                    "end_point1_name": end_point1_name,
                    "end_point2_lat": end_point2_lat,
                    "end_point2_lon": end_point2_lon,
                    "end_point2_name": end_point2_name,
                    "link_name": link_name,
                    "link_start_time": link_start_time,
                    "link_stop_time": link_stop_time,
                    "source": source,
                    "body_id": body_id,
                    "band": band,
                    "constellation": constellation,
                    "data_rate1_to2": data_rate1_to2,
                    "data_rate2_to1": data_rate2_to1,
                    "id_beam1": id_beam1,
                    "id_beam2": id_beam2,
                    "link_state": link_state,
                    "link_type": link_type,
                    "ops_cap": ops_cap,
                    "origin": origin,
                    "sat_no1": sat_no1,
                    "sat_no2": sat_no2,
                    "snr": snr,
                    "sys_cap": sys_cap,
                },
                linkstatus_update_params.LinkstatusUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a LinkStatus object specified by the passed ID path
        parameter. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/linkstatus/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class AsyncLinkstatusResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncLinkstatusResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncLinkstatusResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncLinkstatusResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncLinkstatusResourceWithStreamingResponse(self)

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        end_point1_lat: float,
        end_point1_lon: float,
        end_point1_name: str,
        end_point2_lat: float,
        end_point2_lon: float,
        end_point2_name: str,
        link_name: str,
        link_start_time: Union[str, datetime],
        link_stop_time: Union[str, datetime],
        source: str,
        body_id: str | Omit = omit,
        band: str | Omit = omit,
        constellation: str | Omit = omit,
        data_rate1_to2: float | Omit = omit,
        data_rate2_to1: float | Omit = omit,
        id_beam1: str | Omit = omit,
        id_beam2: str | Omit = omit,
        link_state: str | Omit = omit,
        link_type: str | Omit = omit,
        ops_cap: str | Omit = omit,
        origin: str | Omit = omit,
        sat_no1: int | Omit = omit,
        sat_no2: int | Omit = omit,
        snr: float | Omit = omit,
        sys_cap: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single LinkStatus.

        A specific role is required to
        perform this service operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          end_point1_lat: Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative
              values south of equator).

          end_point1_lon: Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees
              (negative values west of Prime Meridian).

          end_point1_name: The name or description of link endpoint-1, corresponding to beam-1.

          end_point2_lat: Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative
              values south of equator).

          end_point2_lon: Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees
              (negative values west of Prime Meridian).

          end_point2_name: The name or description of link endpoint-2, corresponding to beam-2.

          link_name: The name or description of the link.

          link_start_time: The link establishment time, or the time that the link becomes available for
              use, in ISO8601 UTC format.

          link_stop_time: The link termination time, or the time that the link becomes unavailable for
              use, in ISO8601 UTC format.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          band: The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).

          constellation: The constellation name if the link is established over a LEO/MEO constellation.
              In this case, idOnOrbit1 and idOnOrbit2 will be null.

          data_rate1_to2: The endpoint-1 to endpoint-2 data rate, in kbps.

          data_rate2_to1: The endpoint-2 to endpoint-1 data rate, in kbps.

          id_beam1: The ID of beam-1 forming the link. In the case of two sat link, beam-1
              corresponds to Sat-1.

          id_beam2: The ID of beam-2 forming the link. In the case of two sat link, beam-2
              corresponds to Sat-2.

          link_state: The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).

          link_type: The type of the link.

          ops_cap: The OPSCAP mission status of the system(s) forming the link.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          sat_no1: Satellite/catalog number of the target on-orbit primary object.

          sat_no2: Satellite/catalog number of the target on-orbit secondary object.

          snr: Signal to noise ratio, in dB.

          sys_cap: The SYSCAP mission status of the system(s) forming the link.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/linkstatus/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "end_point1_lat": end_point1_lat,
                    "end_point1_lon": end_point1_lon,
                    "end_point1_name": end_point1_name,
                    "end_point2_lat": end_point2_lat,
                    "end_point2_lon": end_point2_lon,
                    "end_point2_name": end_point2_name,
                    "link_name": link_name,
                    "link_start_time": link_start_time,
                    "link_stop_time": link_stop_time,
                    "source": source,
                    "body_id": body_id,
                    "band": band,
                    "constellation": constellation,
                    "data_rate1_to2": data_rate1_to2,
                    "data_rate2_to1": data_rate2_to1,
                    "id_beam1": id_beam1,
                    "id_beam2": id_beam2,
                    "link_state": link_state,
                    "link_type": link_type,
                    "ops_cap": ops_cap,
                    "origin": origin,
                    "sat_no1": sat_no1,
                    "sat_no2": sat_no2,
                    "snr": snr,
                    "sys_cap": sys_cap,
                },
                linkstatus_update_params.LinkstatusUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a LinkStatus object specified by the passed ID path
        parameter. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/linkstatus/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class LinkstatusResourceWithRawResponse:
    def __init__(self, linkstatus: LinkstatusResource) -> None:
        self._linkstatus = linkstatus

        self.update = to_raw_response_wrapper(
            linkstatus.update,
        )
        self.delete = to_raw_response_wrapper(
            linkstatus.delete,
        )


class AsyncLinkstatusResourceWithRawResponse:
    def __init__(self, linkstatus: AsyncLinkstatusResource) -> None:
        self._linkstatus = linkstatus

        self.update = async_to_raw_response_wrapper(
            linkstatus.update,
        )
        self.delete = async_to_raw_response_wrapper(
            linkstatus.delete,
        )


class LinkstatusResourceWithStreamingResponse:
    def __init__(self, linkstatus: LinkstatusResource) -> None:
        self._linkstatus = linkstatus

        self.update = to_streamed_response_wrapper(
            linkstatus.update,
        )
        self.delete = to_streamed_response_wrapper(
            linkstatus.delete,
        )


class AsyncLinkstatusResourceWithStreamingResponse:
    def __init__(self, linkstatus: AsyncLinkstatusResource) -> None:
        self._linkstatus = linkstatus

        self.update = async_to_streamed_response_wrapper(
            linkstatus.update,
        )
        self.delete = async_to_streamed_response_wrapper(
            linkstatus.delete,
        )
