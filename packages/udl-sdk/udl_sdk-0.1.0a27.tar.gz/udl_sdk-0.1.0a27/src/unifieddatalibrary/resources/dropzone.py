# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal

import httpx

from ..types import (
    dropzone_list_params,
    dropzone_count_params,
    dropzone_tuple_params,
    dropzone_create_params,
    dropzone_update_params,
    dropzone_retrieve_params,
    dropzone_create_bulk_params,
    dropzone_unvalidated_publish_params,
)
from .._types import Body, Omit, Query, Headers, NoneType, NotGiven, omit, not_given
from .._utils import maybe_transform, async_maybe_transform
from .._compat import cached_property
from .._resource import SyncAPIResource, AsyncAPIResource
from .._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ..pagination import SyncOffsetPage, AsyncOffsetPage
from .._base_client import AsyncPaginator, make_request_options
from ..types.dropzone_list_response import DropzoneListResponse
from ..types.dropzone_tuple_response import DropzoneTupleResponse
from ..types.dropzone_retrieve_response import DropzoneRetrieveResponse
from ..types.dropzone_query_help_response import DropzoneQueryHelpResponse

__all__ = ["DropzoneResource", "AsyncDropzoneResource"]


class DropzoneResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> DropzoneResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return DropzoneResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> DropzoneResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return DropzoneResourceWithStreamingResponse(self)

    def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        lat: float,
        lon: float,
        name: str,
        source: str,
        id: str | Omit = omit,
        alt_country_code: str | Omit = omit,
        alt_country_name: str | Omit = omit,
        approval_date: Union[str, datetime] | Omit = omit,
        code: str | Omit = omit,
        country_code: str | Omit = omit,
        country_name: str | Omit = omit,
        expiration_date: Union[str, datetime] | Omit = omit,
        ext_identifier: str | Omit = omit,
        id_site: str | Omit = omit,
        last_update: Union[str, datetime] | Omit = omit,
        length: float | Omit = omit,
        majcom: str | Omit = omit,
        nearest_loc: str | Omit = omit,
        operational_approval_date: Union[str, datetime] | Omit = omit,
        origin: str | Omit = omit,
        point_name: str | Omit = omit,
        radius: float | Omit = omit,
        recert_date: Union[str, datetime] | Omit = omit,
        remark: str | Omit = omit,
        state_abbr: str | Omit = omit,
        state_name: str | Omit = omit,
        survey_date: Union[str, datetime] | Omit = omit,
        width: float | Omit = omit,
        zar_id: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single dropzone record as a POST body and ingest
        into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          lat: WGS84 latitude of the drop zone, in degrees. -90 to 90 degrees (negative values
              south of equator).

          lon: WGS84 longitude of the drop zone, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          name: The name of the drop zone.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          alt_country_code: Specifies an alternate country code for the drop zone if the data provider code
              is not part of an official Country Code standard such as ISO-3166 or FIPS. This
              field will be set to the value provided by the source and should be used for all
              Queries specifying a Country Code.

          alt_country_name: Specifies the country name associated with the source provided alternate country
              code.

          approval_date: The date the drop zone survey was approved, in ISO 8601 UTC format with
              millisecond precision.

          code: The type code for the drop zone.

          country_code: The Country Code where the drop zone is located. This value is typically the ISO
              3166 Alpha-2 two-character country code, however it can also represent various
              consortiums that do not appear in the ISO document. The code must correspond to
              an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any
              associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for
              the specified country code.

          country_name: The country name of the location for the drop zone.

          expiration_date: The survey expiration date of the drop zone, in ISO 8601 UTC format with
              millisecond precision.

          ext_identifier: The external identifier assigned to the drop zone.

          id_site: The ID of the site associated with the drop zone.

          last_update: Last time the drop zone information was updated, in ISO 8601 UTC format with
              millisecond precision.

          length: The length dimension of the drop zone in meters for non-circular drop zones.

          majcom: The Major Command (MAJCOM) responsible for management of the drop zone.

          nearest_loc: The nearest reference location to the drop zone.

          operational_approval_date: The approval date for the drop zone by an air drop authority certifying
              operational usage, in ISO 8601 UTC format with millisecond precision.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          point_name: The name assigned to the drop zone point.

          radius: The radius dimension of the drop zone in meters for circular drop zones.

          recert_date: The date the drop zone was recertified, in ISO 8601 UTC format with millisecond
              precision.

          remark: Remarks concerning the drop zone.

          state_abbr: The US alphabetical code for the state where the drop zone is located.

          state_name: The name of the state where the drop zone is located.

          survey_date: The date the drop zone survey was performed, in ISO 8601 UTC format with
              millisecond precision.

          width: The width dimension of the drop zone in meters for non-circular drop zones.

          zar_id: The identifier of the Zone Availability Report (ZAR) for the drop zone.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/dropzone",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "lat": lat,
                    "lon": lon,
                    "name": name,
                    "source": source,
                    "id": id,
                    "alt_country_code": alt_country_code,
                    "alt_country_name": alt_country_name,
                    "approval_date": approval_date,
                    "code": code,
                    "country_code": country_code,
                    "country_name": country_name,
                    "expiration_date": expiration_date,
                    "ext_identifier": ext_identifier,
                    "id_site": id_site,
                    "last_update": last_update,
                    "length": length,
                    "majcom": majcom,
                    "nearest_loc": nearest_loc,
                    "operational_approval_date": operational_approval_date,
                    "origin": origin,
                    "point_name": point_name,
                    "radius": radius,
                    "recert_date": recert_date,
                    "remark": remark,
                    "state_abbr": state_abbr,
                    "state_name": state_name,
                    "survey_date": survey_date,
                    "width": width,
                    "zar_id": zar_id,
                },
                dropzone_create_params.DropzoneCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> DropzoneRetrieveResponse:
        """
        Service operation to get a single dropzone record by its unique ID passed as a
        path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return self._get(
            f"/udl/dropzone/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    dropzone_retrieve_params.DropzoneRetrieveParams,
                ),
            ),
            cast_to=DropzoneRetrieveResponse,
        )

    def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        lat: float,
        lon: float,
        name: str,
        source: str,
        body_id: str | Omit = omit,
        alt_country_code: str | Omit = omit,
        alt_country_name: str | Omit = omit,
        approval_date: Union[str, datetime] | Omit = omit,
        code: str | Omit = omit,
        country_code: str | Omit = omit,
        country_name: str | Omit = omit,
        expiration_date: Union[str, datetime] | Omit = omit,
        ext_identifier: str | Omit = omit,
        id_site: str | Omit = omit,
        last_update: Union[str, datetime] | Omit = omit,
        length: float | Omit = omit,
        majcom: str | Omit = omit,
        nearest_loc: str | Omit = omit,
        operational_approval_date: Union[str, datetime] | Omit = omit,
        origin: str | Omit = omit,
        point_name: str | Omit = omit,
        radius: float | Omit = omit,
        recert_date: Union[str, datetime] | Omit = omit,
        remark: str | Omit = omit,
        state_abbr: str | Omit = omit,
        state_name: str | Omit = omit,
        survey_date: Union[str, datetime] | Omit = omit,
        width: float | Omit = omit,
        zar_id: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single dropzone record.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          lat: WGS84 latitude of the drop zone, in degrees. -90 to 90 degrees (negative values
              south of equator).

          lon: WGS84 longitude of the drop zone, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          name: The name of the drop zone.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          alt_country_code: Specifies an alternate country code for the drop zone if the data provider code
              is not part of an official Country Code standard such as ISO-3166 or FIPS. This
              field will be set to the value provided by the source and should be used for all
              Queries specifying a Country Code.

          alt_country_name: Specifies the country name associated with the source provided alternate country
              code.

          approval_date: The date the drop zone survey was approved, in ISO 8601 UTC format with
              millisecond precision.

          code: The type code for the drop zone.

          country_code: The Country Code where the drop zone is located. This value is typically the ISO
              3166 Alpha-2 two-character country code, however it can also represent various
              consortiums that do not appear in the ISO document. The code must correspond to
              an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any
              associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for
              the specified country code.

          country_name: The country name of the location for the drop zone.

          expiration_date: The survey expiration date of the drop zone, in ISO 8601 UTC format with
              millisecond precision.

          ext_identifier: The external identifier assigned to the drop zone.

          id_site: The ID of the site associated with the drop zone.

          last_update: Last time the drop zone information was updated, in ISO 8601 UTC format with
              millisecond precision.

          length: The length dimension of the drop zone in meters for non-circular drop zones.

          majcom: The Major Command (MAJCOM) responsible for management of the drop zone.

          nearest_loc: The nearest reference location to the drop zone.

          operational_approval_date: The approval date for the drop zone by an air drop authority certifying
              operational usage, in ISO 8601 UTC format with millisecond precision.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          point_name: The name assigned to the drop zone point.

          radius: The radius dimension of the drop zone in meters for circular drop zones.

          recert_date: The date the drop zone was recertified, in ISO 8601 UTC format with millisecond
              precision.

          remark: Remarks concerning the drop zone.

          state_abbr: The US alphabetical code for the state where the drop zone is located.

          state_name: The name of the state where the drop zone is located.

          survey_date: The date the drop zone survey was performed, in ISO 8601 UTC format with
              millisecond precision.

          width: The width dimension of the drop zone in meters for non-circular drop zones.

          zar_id: The identifier of the Zone Availability Report (ZAR) for the drop zone.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._put(
            f"/udl/dropzone/{path_id}",
            body=maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "lat": lat,
                    "lon": lon,
                    "name": name,
                    "source": source,
                    "body_id": body_id,
                    "alt_country_code": alt_country_code,
                    "alt_country_name": alt_country_name,
                    "approval_date": approval_date,
                    "code": code,
                    "country_code": country_code,
                    "country_name": country_name,
                    "expiration_date": expiration_date,
                    "ext_identifier": ext_identifier,
                    "id_site": id_site,
                    "last_update": last_update,
                    "length": length,
                    "majcom": majcom,
                    "nearest_loc": nearest_loc,
                    "operational_approval_date": operational_approval_date,
                    "origin": origin,
                    "point_name": point_name,
                    "radius": radius,
                    "recert_date": recert_date,
                    "remark": remark,
                    "state_abbr": state_abbr,
                    "state_name": state_name,
                    "survey_date": survey_date,
                    "width": width,
                    "zar_id": zar_id,
                },
                dropzone_update_params.DropzoneUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> SyncOffsetPage[DropzoneListResponse]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/dropzone",
            page=SyncOffsetPage[DropzoneListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    dropzone_list_params.DropzoneListParams,
                ),
            ),
            model=DropzoneListResponse,
        )

    def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a dropzone record specified by the passed ID path
        parameter. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._delete(
            f"/udl/dropzone/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def count(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return self._get(
            "/udl/dropzone/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    dropzone_count_params.DropzoneCountParams,
                ),
            ),
            cast_to=str,
        )

    def create_bulk(
        self,
        *,
        body: Iterable[dropzone_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of
        dropzone records as a POST body and ingest into the database. This operation is
        not intended to be used for automated feeds into UDL. Data providers should
        contact the UDL team for specific role assignments and for instructions on
        setting up a permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/udl/dropzone/createBulk",
            body=maybe_transform(body, Iterable[dropzone_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def query_help(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> DropzoneQueryHelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return self._get(
            "/udl/dropzone/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=DropzoneQueryHelpResponse,
        )

    def tuple(
        self,
        *,
        columns: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> DropzoneTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the â€˜queryhelpâ€™ operation
              for a complete list of possible fields.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get(
            "/udl/dropzone/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "columns": columns,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    dropzone_tuple_params.DropzoneTupleParams,
                ),
            ),
            cast_to=DropzoneTupleResponse,
        )

    def unvalidated_publish(
        self,
        *,
        body: Iterable[dropzone_unvalidated_publish_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take multiple dropzone records as a POST body and ingest
        into the database. This operation is intended to be used for automated feeds
        into UDL. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return self._post(
            "/filedrop/udl-dropzone",
            body=maybe_transform(body, Iterable[dropzone_unvalidated_publish_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class AsyncDropzoneResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncDropzoneResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#accessing-raw-response-data-eg-headers
        """
        return AsyncDropzoneResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncDropzoneResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/Bluestaq/udl-python-sdk#with_streaming_response
        """
        return AsyncDropzoneResourceWithStreamingResponse(self)

    async def create(
        self,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        lat: float,
        lon: float,
        name: str,
        source: str,
        id: str | Omit = omit,
        alt_country_code: str | Omit = omit,
        alt_country_name: str | Omit = omit,
        approval_date: Union[str, datetime] | Omit = omit,
        code: str | Omit = omit,
        country_code: str | Omit = omit,
        country_name: str | Omit = omit,
        expiration_date: Union[str, datetime] | Omit = omit,
        ext_identifier: str | Omit = omit,
        id_site: str | Omit = omit,
        last_update: Union[str, datetime] | Omit = omit,
        length: float | Omit = omit,
        majcom: str | Omit = omit,
        nearest_loc: str | Omit = omit,
        operational_approval_date: Union[str, datetime] | Omit = omit,
        origin: str | Omit = omit,
        point_name: str | Omit = omit,
        radius: float | Omit = omit,
        recert_date: Union[str, datetime] | Omit = omit,
        remark: str | Omit = omit,
        state_abbr: str | Omit = omit,
        state_name: str | Omit = omit,
        survey_date: Union[str, datetime] | Omit = omit,
        width: float | Omit = omit,
        zar_id: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take a single dropzone record as a POST body and ingest
        into the database. A specific role is required to perform this service
        operation. Please contact the UDL team for assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          lat: WGS84 latitude of the drop zone, in degrees. -90 to 90 degrees (negative values
              south of equator).

          lon: WGS84 longitude of the drop zone, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          name: The name of the drop zone.

          source: Source of the data.

          id: Unique identifier of the record, auto-generated by the system.

          alt_country_code: Specifies an alternate country code for the drop zone if the data provider code
              is not part of an official Country Code standard such as ISO-3166 or FIPS. This
              field will be set to the value provided by the source and should be used for all
              Queries specifying a Country Code.

          alt_country_name: Specifies the country name associated with the source provided alternate country
              code.

          approval_date: The date the drop zone survey was approved, in ISO 8601 UTC format with
              millisecond precision.

          code: The type code for the drop zone.

          country_code: The Country Code where the drop zone is located. This value is typically the ISO
              3166 Alpha-2 two-character country code, however it can also represent various
              consortiums that do not appear in the ISO document. The code must correspond to
              an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any
              associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for
              the specified country code.

          country_name: The country name of the location for the drop zone.

          expiration_date: The survey expiration date of the drop zone, in ISO 8601 UTC format with
              millisecond precision.

          ext_identifier: The external identifier assigned to the drop zone.

          id_site: The ID of the site associated with the drop zone.

          last_update: Last time the drop zone information was updated, in ISO 8601 UTC format with
              millisecond precision.

          length: The length dimension of the drop zone in meters for non-circular drop zones.

          majcom: The Major Command (MAJCOM) responsible for management of the drop zone.

          nearest_loc: The nearest reference location to the drop zone.

          operational_approval_date: The approval date for the drop zone by an air drop authority certifying
              operational usage, in ISO 8601 UTC format with millisecond precision.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          point_name: The name assigned to the drop zone point.

          radius: The radius dimension of the drop zone in meters for circular drop zones.

          recert_date: The date the drop zone was recertified, in ISO 8601 UTC format with millisecond
              precision.

          remark: Remarks concerning the drop zone.

          state_abbr: The US alphabetical code for the state where the drop zone is located.

          state_name: The name of the state where the drop zone is located.

          survey_date: The date the drop zone survey was performed, in ISO 8601 UTC format with
              millisecond precision.

          width: The width dimension of the drop zone in meters for non-circular drop zones.

          zar_id: The identifier of the Zone Availability Report (ZAR) for the drop zone.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/dropzone",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "lat": lat,
                    "lon": lon,
                    "name": name,
                    "source": source,
                    "id": id,
                    "alt_country_code": alt_country_code,
                    "alt_country_name": alt_country_name,
                    "approval_date": approval_date,
                    "code": code,
                    "country_code": country_code,
                    "country_name": country_name,
                    "expiration_date": expiration_date,
                    "ext_identifier": ext_identifier,
                    "id_site": id_site,
                    "last_update": last_update,
                    "length": length,
                    "majcom": majcom,
                    "nearest_loc": nearest_loc,
                    "operational_approval_date": operational_approval_date,
                    "origin": origin,
                    "point_name": point_name,
                    "radius": radius,
                    "recert_date": recert_date,
                    "remark": remark,
                    "state_abbr": state_abbr,
                    "state_name": state_name,
                    "survey_date": survey_date,
                    "width": width,
                    "zar_id": zar_id,
                },
                dropzone_create_params.DropzoneCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def retrieve(
        self,
        id: str,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> DropzoneRetrieveResponse:
        """
        Service operation to get a single dropzone record by its unique ID passed as a
        path parameter.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        return await self._get(
            f"/udl/dropzone/{id}",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    dropzone_retrieve_params.DropzoneRetrieveParams,
                ),
            ),
            cast_to=DropzoneRetrieveResponse,
        )

    async def update(
        self,
        path_id: str,
        *,
        classification_marking: str,
        data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"],
        lat: float,
        lon: float,
        name: str,
        source: str,
        body_id: str | Omit = omit,
        alt_country_code: str | Omit = omit,
        alt_country_name: str | Omit = omit,
        approval_date: Union[str, datetime] | Omit = omit,
        code: str | Omit = omit,
        country_code: str | Omit = omit,
        country_name: str | Omit = omit,
        expiration_date: Union[str, datetime] | Omit = omit,
        ext_identifier: str | Omit = omit,
        id_site: str | Omit = omit,
        last_update: Union[str, datetime] | Omit = omit,
        length: float | Omit = omit,
        majcom: str | Omit = omit,
        nearest_loc: str | Omit = omit,
        operational_approval_date: Union[str, datetime] | Omit = omit,
        origin: str | Omit = omit,
        point_name: str | Omit = omit,
        radius: float | Omit = omit,
        recert_date: Union[str, datetime] | Omit = omit,
        remark: str | Omit = omit,
        state_abbr: str | Omit = omit,
        state_name: str | Omit = omit,
        survey_date: Union[str, datetime] | Omit = omit,
        width: float | Omit = omit,
        zar_id: str | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """Service operation to update a single dropzone record.

        A specific role is
        required to perform this service operation. Please contact the UDL team for
        assistance.

        Args:
          classification_marking: Classification marking of the data in IC/CAPCO Portion-marked format.

          data_mode:
              Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

              EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
              may include both real and simulated data.

              REAL:&nbsp;Data collected or produced that pertains to real-world objects,
              events, and analysis.

              SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
              datasets.

              TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
              requirements, and for validating technical, functional, and performance
              characteristics.

          lat: WGS84 latitude of the drop zone, in degrees. -90 to 90 degrees (negative values
              south of equator).

          lon: WGS84 longitude of the drop zone, in degrees. -180 to 180 degrees (negative
              values west of Prime Meridian).

          name: The name of the drop zone.

          source: Source of the data.

          body_id: Unique identifier of the record, auto-generated by the system.

          alt_country_code: Specifies an alternate country code for the drop zone if the data provider code
              is not part of an official Country Code standard such as ISO-3166 or FIPS. This
              field will be set to the value provided by the source and should be used for all
              Queries specifying a Country Code.

          alt_country_name: Specifies the country name associated with the source provided alternate country
              code.

          approval_date: The date the drop zone survey was approved, in ISO 8601 UTC format with
              millisecond precision.

          code: The type code for the drop zone.

          country_code: The Country Code where the drop zone is located. This value is typically the ISO
              3166 Alpha-2 two-character country code, however it can also represent various
              consortiums that do not appear in the ISO document. The code must correspond to
              an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any
              associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for
              the specified country code.

          country_name: The country name of the location for the drop zone.

          expiration_date: The survey expiration date of the drop zone, in ISO 8601 UTC format with
              millisecond precision.

          ext_identifier: The external identifier assigned to the drop zone.

          id_site: The ID of the site associated with the drop zone.

          last_update: Last time the drop zone information was updated, in ISO 8601 UTC format with
              millisecond precision.

          length: The length dimension of the drop zone in meters for non-circular drop zones.

          majcom: The Major Command (MAJCOM) responsible for management of the drop zone.

          nearest_loc: The nearest reference location to the drop zone.

          operational_approval_date: The approval date for the drop zone by an air drop authority certifying
              operational usage, in ISO 8601 UTC format with millisecond precision.

          origin: Originating system or organization which produced the data, if different from
              the source. The origin may be different than the source if the source was a
              mediating system which forwarded the data on behalf of the origin system. If
              null, the source may be assumed to be the origin.

          point_name: The name assigned to the drop zone point.

          radius: The radius dimension of the drop zone in meters for circular drop zones.

          recert_date: The date the drop zone was recertified, in ISO 8601 UTC format with millisecond
              precision.

          remark: Remarks concerning the drop zone.

          state_abbr: The US alphabetical code for the state where the drop zone is located.

          state_name: The name of the state where the drop zone is located.

          survey_date: The date the drop zone survey was performed, in ISO 8601 UTC format with
              millisecond precision.

          width: The width dimension of the drop zone in meters for non-circular drop zones.

          zar_id: The identifier of the Zone Availability Report (ZAR) for the drop zone.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not path_id:
            raise ValueError(f"Expected a non-empty value for `path_id` but received {path_id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._put(
            f"/udl/dropzone/{path_id}",
            body=await async_maybe_transform(
                {
                    "classification_marking": classification_marking,
                    "data_mode": data_mode,
                    "lat": lat,
                    "lon": lon,
                    "name": name,
                    "source": source,
                    "body_id": body_id,
                    "alt_country_code": alt_country_code,
                    "alt_country_name": alt_country_name,
                    "approval_date": approval_date,
                    "code": code,
                    "country_code": country_code,
                    "country_name": country_name,
                    "expiration_date": expiration_date,
                    "ext_identifier": ext_identifier,
                    "id_site": id_site,
                    "last_update": last_update,
                    "length": length,
                    "majcom": majcom,
                    "nearest_loc": nearest_loc,
                    "operational_approval_date": operational_approval_date,
                    "origin": origin,
                    "point_name": point_name,
                    "radius": radius,
                    "recert_date": recert_date,
                    "remark": remark,
                    "state_abbr": state_abbr,
                    "state_name": state_name,
                    "survey_date": survey_date,
                    "width": width,
                    "zar_id": zar_id,
                },
                dropzone_update_params.DropzoneUpdateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    def list(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> AsyncPaginator[DropzoneListResponse, AsyncOffsetPage[DropzoneListResponse]]:
        """
        Service operation to dynamically query data by a variety of query parameters not
        specified in this API documentation. See the queryhelp operation
        (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
        parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get_api_list(
            "/udl/dropzone",
            page=AsyncOffsetPage[DropzoneListResponse],
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    dropzone_list_params.DropzoneListParams,
                ),
            ),
            model=DropzoneListResponse,
        )

    async def delete(
        self,
        id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to delete a dropzone record specified by the passed ID path
        parameter. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not id:
            raise ValueError(f"Expected a non-empty value for `id` but received {id!r}")
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._delete(
            f"/udl/dropzone/{id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def count(
        self,
        *,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> str:
        """
        Service operation to return the count of records satisfying the specified query
        parameters. This operation is useful to determine how many records pass a
        particular query criteria without retrieving large amounts of data. See the
        queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
        valid/required query parameter information.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "text/plain", **(extra_headers or {})}
        return await self._get(
            "/udl/dropzone/count",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    dropzone_count_params.DropzoneCountParams,
                ),
            ),
            cast_to=str,
        )

    async def create_bulk(
        self,
        *,
        body: Iterable[dropzone_create_bulk_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation intended for initial integration only, to take a list of
        dropzone records as a POST body and ingest into the database. This operation is
        not intended to be used for automated feeds into UDL. Data providers should
        contact the UDL team for specific role assignments and for instructions on
        setting up a permanent feed through an alternate mechanism.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/udl/dropzone/createBulk",
            body=await async_maybe_transform(body, Iterable[dropzone_create_bulk_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )

    async def query_help(
        self,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> DropzoneQueryHelpResponse:
        """
        Service operation to provide detailed information on available dynamic query
        parameters for a particular data type.
        """
        return await self._get(
            "/udl/dropzone/queryhelp",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=DropzoneQueryHelpResponse,
        )

    async def tuple(
        self,
        *,
        columns: str,
        first_result: int | Omit = omit,
        max_results: int | Omit = omit,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> DropzoneTupleResponse:
        """
        Service operation to dynamically query data and only return specified
        columns/fields. Requested columns are specified by the 'columns' query parameter
        and should be a comma separated list of valid fields for the specified data
        type. classificationMarking is always returned. See the queryhelp operation
        (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
        information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
        hours would return the satNo and period of elsets with an epoch greater than 5
        hours ago.

        Args:
          columns: Comma-separated list of valid field names for this data type to be returned in
              the response. Only the fields specified will be returned as well as the
              classification marking of the data, if applicable. See the â€˜queryhelpâ€™ operation
              for a complete list of possible fields.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._get(
            "/udl/dropzone/tuple",
            options=make_request_options(
                extra_headers=extra_headers,
                extra_query=extra_query,
                extra_body=extra_body,
                timeout=timeout,
                query=await async_maybe_transform(
                    {
                        "columns": columns,
                        "first_result": first_result,
                        "max_results": max_results,
                    },
                    dropzone_tuple_params.DropzoneTupleParams,
                ),
            ),
            cast_to=DropzoneTupleResponse,
        )

    async def unvalidated_publish(
        self,
        *,
        body: Iterable[dropzone_unvalidated_publish_params.Body],
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = not_given,
    ) -> None:
        """
        Service operation to take multiple dropzone records as a POST body and ingest
        into the database. This operation is intended to be used for automated feeds
        into UDL. A specific role is required to perform this service operation. Please
        contact the UDL team for assistance.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        extra_headers = {"Accept": "*/*", **(extra_headers or {})}
        return await self._post(
            "/filedrop/udl-dropzone",
            body=await async_maybe_transform(body, Iterable[dropzone_unvalidated_publish_params.Body]),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=NoneType,
        )


class DropzoneResourceWithRawResponse:
    def __init__(self, dropzone: DropzoneResource) -> None:
        self._dropzone = dropzone

        self.create = to_raw_response_wrapper(
            dropzone.create,
        )
        self.retrieve = to_raw_response_wrapper(
            dropzone.retrieve,
        )
        self.update = to_raw_response_wrapper(
            dropzone.update,
        )
        self.list = to_raw_response_wrapper(
            dropzone.list,
        )
        self.delete = to_raw_response_wrapper(
            dropzone.delete,
        )
        self.count = to_raw_response_wrapper(
            dropzone.count,
        )
        self.create_bulk = to_raw_response_wrapper(
            dropzone.create_bulk,
        )
        self.query_help = to_raw_response_wrapper(
            dropzone.query_help,
        )
        self.tuple = to_raw_response_wrapper(
            dropzone.tuple,
        )
        self.unvalidated_publish = to_raw_response_wrapper(
            dropzone.unvalidated_publish,
        )


class AsyncDropzoneResourceWithRawResponse:
    def __init__(self, dropzone: AsyncDropzoneResource) -> None:
        self._dropzone = dropzone

        self.create = async_to_raw_response_wrapper(
            dropzone.create,
        )
        self.retrieve = async_to_raw_response_wrapper(
            dropzone.retrieve,
        )
        self.update = async_to_raw_response_wrapper(
            dropzone.update,
        )
        self.list = async_to_raw_response_wrapper(
            dropzone.list,
        )
        self.delete = async_to_raw_response_wrapper(
            dropzone.delete,
        )
        self.count = async_to_raw_response_wrapper(
            dropzone.count,
        )
        self.create_bulk = async_to_raw_response_wrapper(
            dropzone.create_bulk,
        )
        self.query_help = async_to_raw_response_wrapper(
            dropzone.query_help,
        )
        self.tuple = async_to_raw_response_wrapper(
            dropzone.tuple,
        )
        self.unvalidated_publish = async_to_raw_response_wrapper(
            dropzone.unvalidated_publish,
        )


class DropzoneResourceWithStreamingResponse:
    def __init__(self, dropzone: DropzoneResource) -> None:
        self._dropzone = dropzone

        self.create = to_streamed_response_wrapper(
            dropzone.create,
        )
        self.retrieve = to_streamed_response_wrapper(
            dropzone.retrieve,
        )
        self.update = to_streamed_response_wrapper(
            dropzone.update,
        )
        self.list = to_streamed_response_wrapper(
            dropzone.list,
        )
        self.delete = to_streamed_response_wrapper(
            dropzone.delete,
        )
        self.count = to_streamed_response_wrapper(
            dropzone.count,
        )
        self.create_bulk = to_streamed_response_wrapper(
            dropzone.create_bulk,
        )
        self.query_help = to_streamed_response_wrapper(
            dropzone.query_help,
        )
        self.tuple = to_streamed_response_wrapper(
            dropzone.tuple,
        )
        self.unvalidated_publish = to_streamed_response_wrapper(
            dropzone.unvalidated_publish,
        )


class AsyncDropzoneResourceWithStreamingResponse:
    def __init__(self, dropzone: AsyncDropzoneResource) -> None:
        self._dropzone = dropzone

        self.create = async_to_streamed_response_wrapper(
            dropzone.create,
        )
        self.retrieve = async_to_streamed_response_wrapper(
            dropzone.retrieve,
        )
        self.update = async_to_streamed_response_wrapper(
            dropzone.update,
        )
        self.list = async_to_streamed_response_wrapper(
            dropzone.list,
        )
        self.delete = async_to_streamed_response_wrapper(
            dropzone.delete,
        )
        self.count = async_to_streamed_response_wrapper(
            dropzone.count,
        )
        self.create_bulk = async_to_streamed_response_wrapper(
            dropzone.create_bulk,
        )
        self.query_help = async_to_streamed_response_wrapper(
            dropzone.query_help,
        )
        self.tuple = async_to_streamed_response_wrapper(
            dropzone.tuple,
        )
        self.unvalidated_publish = async_to_streamed_response_wrapper(
            dropzone.unvalidated_publish,
        )
