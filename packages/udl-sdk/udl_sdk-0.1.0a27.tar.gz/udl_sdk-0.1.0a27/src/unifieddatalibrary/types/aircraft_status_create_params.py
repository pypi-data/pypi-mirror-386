# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._types import SequenceNotStr
from .._utils import PropertyInfo

__all__ = ["AircraftStatusCreateParams"]


class AircraftStatusCreateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_aircraft: Required[Annotated[str, PropertyInfo(alias="idAircraft")]]
    """Unique identifier of the aircraft."""

    source: Required[str]
    """Source of the data."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    additional_sys: Annotated[SequenceNotStr[str], PropertyInfo(alias="additionalSys")]
    """
    List of additional operational systems on this aircraft beyond what is normally
    available.
    """

    air_to_air_status: Annotated[Literal["OPERATIONAL", "NON-OPERATIONAL", "OFF"], PropertyInfo(alias="airToAirStatus")]
    """
    The status of the air-to-air weapon release system (OPERATIONAL,
    NON-OPERATIONAL, OFF).
    """

    air_to_ground_status: Annotated[
        Literal["OPERATIONAL", "NON-OPERATIONAL", "OFF"], PropertyInfo(alias="airToGroundStatus")
    ]
    """
    The status of the air-to-ground weapon release system (OPERATIONAL,
    NON-OPERATIONAL, OFF).
    """

    alpha_status_code: Annotated[str, PropertyInfo(alias="alphaStatusCode")]
    """
    Aircraft alpha status code that indicates the aircraft maintenance status
    estimated by the pilot.
    """

    alt_aircraft_id: Annotated[str, PropertyInfo(alias="altAircraftId")]
    """Alternate Aircraft Identifier provided by source."""

    contamination_status: Annotated[str, PropertyInfo(alias="contaminationStatus")]
    """The contamination status of the aircraft (e.g.

    CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
    """

    current_icao: Annotated[str, PropertyInfo(alias="currentICAO")]
    """
    The International Civil Aviation Organization (ICAO) code at which this aircraft
    is currently located or has most recently departed, if airborne.
    """

    current_state: Annotated[str, PropertyInfo(alias="currentState")]
    """The current readiness state of the aircraft (e.g.

    AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
    """

    earliest_ta_end_time: Annotated[Union[str, datetime], PropertyInfo(alias="earliestTAEndTime", format="iso8601")]
    """
    The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC
    format with millisecond precision.
    """

    etic: Annotated[Union[str, datetime], PropertyInfo(format="iso8601")]
    """
    The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format
    with millisecond precision. This is the estimated time when the issue will be
    resolved.
    """

    flight_phase: Annotated[str, PropertyInfo(alias="flightPhase")]
    """Current flight phase (e.g.

    AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
    """

    fuel: int
    """The mass of fuel remaining on the aircraft, in kilograms."""

    fuel_function: Annotated[str, PropertyInfo(alias="fuelFunction")]
    """
    Used in conjunction with the fuel field to indicate either burnable or offload
    fuel.
    """

    fuel_status: Annotated[str, PropertyInfo(alias="fuelStatus")]
    """The state of the aircraft fuel status (e.g.

    DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
    """

    geo_loc: Annotated[str, PropertyInfo(alias="geoLoc")]
    """
    US Air Force geographic location code of the airfield where the aircraft is
    located.
    """

    ground_status: Annotated[str, PropertyInfo(alias="groundStatus")]
    """The ground status of the aircraft (e.g.

    ALERT, CREW READY, ENGINE START, HANGAR, etc.).
    """

    gun_capable: Annotated[bool, PropertyInfo(alias="gunCapable")]
    """Flag indicating that the aircraft is capable of making at least one gun pass."""

    gun_rds_max: Annotated[int, PropertyInfo(alias="gunRdsMax")]
    """The upper bound of the estimated number of gun rounds available."""

    gun_rds_min: Annotated[int, PropertyInfo(alias="gunRdsMin")]
    """The lower bound of the estimated number of gun rounds available."""

    gun_rds_type: Annotated[str, PropertyInfo(alias="gunRdsType")]
    """The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.)."""

    id_airfield: Annotated[str, PropertyInfo(alias="idAirfield")]
    """
    If not airborne, the unique identifier of the installation currently hosting the
    aircraft.
    """

    id_poi: Annotated[str, PropertyInfo(alias="idPOI")]
    """
    Unique identifier of the Point of Interest (POI) record related to this aircraft
    status. This will generally represent the location of an aircraft on the ground.
    """

    inventory: SequenceNotStr[str]
    """Array of inventory item(s) for which estimate(s) are available (e.g.

    AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400,
    etc.). Intended as, but not constrained to, MIL-STD-6016 environment dependent
    specific/store type designations. This array must be the same length as
    inventoryMin and inventoryMax.
    """

    inventory_max: Annotated[Iterable[int], PropertyInfo(alias="inventoryMax")]
    """Array of the upper bound quantity for each of the inventory items.

    The values in this array must correspond to position index in the inventory
    array. This array must be the same length as inventory and inventoryMin.
    """

    inventory_min: Annotated[Iterable[int], PropertyInfo(alias="inventoryMin")]
    """Array of the lower bound quantity for each of the inventory items.

    The values in this array must correspond to position index in the inventory
    array. This array must be the same length as inventory and inventoryMax.
    """

    last_inspection_date: Annotated[Union[str, datetime], PropertyInfo(alias="lastInspectionDate", format="iso8601")]
    """
    Date when the military aircraft inspection was last performed, in ISO 8601 UTC
    format with millisecond precision.
    """

    last_updated_by: Annotated[str, PropertyInfo(alias="lastUpdatedBy")]
    """The name or ID of the external user that updated this status."""

    maint_poc: Annotated[str, PropertyInfo(alias="maintPoc")]
    """Military aircraft maintenance point of contact for this aircraft."""

    maint_priority: Annotated[str, PropertyInfo(alias="maintPriority")]
    """Indicates the priority of the maintenance effort."""

    maint_status: Annotated[str, PropertyInfo(alias="maintStatus")]
    """The maintenance status of the aircraft."""

    maint_status_driver: Annotated[str, PropertyInfo(alias="maintStatusDriver")]
    """
    Indicates the maintenance discrepancy that drives the current maintenance
    status.
    """

    maint_status_update: Annotated[Union[str, datetime], PropertyInfo(alias="maintStatusUpdate", format="iso8601")]
    """
    The time of the last maintenance status update, in ISO 8601 UTC format with
    millisecond precision.
    """

    mission_readiness: Annotated[str, PropertyInfo(alias="missionReadiness")]
    """The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE)."""

    mx_remark: Annotated[str, PropertyInfo(alias="mxRemark")]
    """Maintenance pacing remarks assocociated with this aircraft."""

    next_icao: Annotated[str, PropertyInfo(alias="nextICAO")]
    """
    The International Civil Aviation Organization (ICAO) code of the next
    destination of this aircraft.
    """

    notes: str
    """Optional notes/comments concerning this aircraft status."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    park_location: Annotated[str, PropertyInfo(alias="parkLocation")]
    """The parking location of this aircraft."""

    park_location_system: Annotated[str, PropertyInfo(alias="parkLocationSystem")]
    """The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.)."""

    previous_icao: Annotated[str, PropertyInfo(alias="previousICAO")]
    """
    The International Civil Aviation Organization (ICAO) code at which this aircraft
    was previously located.
    """

    ta_start_time: Annotated[Union[str, datetime], PropertyInfo(alias="taStartTime", format="iso8601")]
    """The turnaround start time, in ISO 8601 UTC format with millisecond precision."""

    troubleshoot_etic: Annotated[Union[str, datetime], PropertyInfo(alias="troubleshootEtic", format="iso8601")]
    """
    Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC
    format with millisecond precision. This is the estimated time when the course of
    action to resolve the issue will be determined.
    """

    unavailable_sys: Annotated[SequenceNotStr[str], PropertyInfo(alias="unavailableSys")]
    """List of unavailable systems that would normally be on this aircraft."""
