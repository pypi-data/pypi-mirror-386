# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from ..._types import SequenceNotStr
from ..._utils import PropertyInfo

__all__ = ["RfObservationCreateBulkParams", "Body"]


class RfObservationCreateBulkParams(TypedDict, total=False):
    body: Required[Iterable[Body]]


class Body(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    ob_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="obTime", format="iso8601")]]
    """Ob detection time in ISO 8601 UTC with microsecond precision."""

    source: Required[str]
    """Source of the data."""

    type: Required[str]
    """Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc)."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    antenna_name: Annotated[str, PropertyInfo(alias="antennaName")]
    """Antenna name of the RFObservation record."""

    azimuth: float
    """Azimuth angle in degrees and topocentric coordinate frame."""

    azimuth_measured: Annotated[bool, PropertyInfo(alias="azimuthMeasured")]
    """
    Optional flag indicating whether the azimuth value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    azimuth_rate: Annotated[float, PropertyInfo(alias="azimuthRate")]
    """Rate of change of the azimuth in degrees per second."""

    azimuth_unc: Annotated[float, PropertyInfo(alias="azimuthUnc")]
    """One sigma uncertainty in the azimuth angle measurement, in degrees."""

    bandwidth: float
    """Measured bandwidth in hertz."""

    baud_rate: Annotated[float, PropertyInfo(alias="baudRate")]
    """
    Baud rate is the number of symbol changes, waveform changes, or signaling
    events, across the transmission medium per second.
    """

    baud_rates: Annotated[Iterable[float], PropertyInfo(alias="baudRates")]
    """Array of measured signal baud rates."""

    bit_error_rate: Annotated[float, PropertyInfo(alias="bitErrorRate")]
    """The ratio of bit errors per number of received bits."""

    carrier_standard: Annotated[str, PropertyInfo(alias="carrierStandard")]
    """Carrier standard (e.g. DVB-S2, 802.11g, etc.)."""

    channel: int
    """Channel of the RFObservation record."""

    chip_rates: Annotated[Iterable[float], PropertyInfo(alias="chipRates")]
    """Array of chipRates."""

    code_fills: Annotated[SequenceNotStr[str], PropertyInfo(alias="codeFills")]
    """Array of code fills."""

    code_lengths: Annotated[Iterable[float], PropertyInfo(alias="codeLengths")]
    """Array of code lengths."""

    code_taps: Annotated[SequenceNotStr[str], PropertyInfo(alias="codeTaps")]
    """Array of code taps."""

    collection_mode: Annotated[str, PropertyInfo(alias="collectionMode")]
    """Collection mode (e.g.

    CONTINUOUS, MANUAL, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, SPOT_SEARCH, SURVEY,
    etc).
    """

    confidence: float
    """Confidence in the signal and its measurements and characterization."""

    confidences: Iterable[float]
    """Array of measurement confidences."""

    constellation_x_points: Annotated[Iterable[float], PropertyInfo(alias="constellationXPoints")]
    """Array of individual x-coordinates for demodulated signal constellation.

    This array should correspond with the same-sized array of constellationYPoints.
    """

    constellation_y_points: Annotated[Iterable[float], PropertyInfo(alias="constellationYPoints")]
    """Array of individual y-coordinates for demodulated signal constellation.

    This array should correspond with the same-sized array of constellationXPoints.
    """

    descriptor: str
    """Optional source-provided and searchable metadata or descriptor of the data."""

    detection_status: Annotated[str, PropertyInfo(alias="detectionStatus")]
    """Detection status (e.g.

    DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
    """

    detection_statuses: Annotated[SequenceNotStr[str], PropertyInfo(alias="detectionStatuses")]
    """Array of detection statuses (e.g.

    CARRIER_DETECTED, DETECTED, NOT_DETECTED) for each measured signal.
    """

    eirp: float
    """Measured Equivalent Isotopically Radiated Power in decibel watts."""

    elevation: float
    """Elevation in degrees and topocentric coordinate frame."""

    elevation_measured: Annotated[bool, PropertyInfo(alias="elevationMeasured")]
    """
    Optional flag indicating whether the elevation value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    elevation_rate: Annotated[float, PropertyInfo(alias="elevationRate")]
    """Rate of change of the elevation in degrees per second."""

    elevation_unc: Annotated[float, PropertyInfo(alias="elevationUnc")]
    """One sigma uncertainty in the elevation angle measurement, in degrees."""

    elnot: str
    """ELINT notation."""

    end_frequency: Annotated[float, PropertyInfo(alias="endFrequency")]
    """End carrier frequency in hertz."""

    fft_imag_coeffs: Annotated[Iterable[float], PropertyInfo(alias="fftImagCoeffs")]
    """
    Array of imaginary components of the complex Fast Fourier Transform (FFT)
    coefficients from the signal. Used together with the same-sized fftRealCoeffs
    array to preserve both amplitude and phase information. This array should
    correspond with the same-sized array of frequencies.
    """

    fft_real_coeffs: Annotated[Iterable[float], PropertyInfo(alias="fftRealCoeffs")]
    """
    Array of real components of the complex Fast Fourier Transform (FFT)
    coefficients from the signal. Used together with the same-sized fftImagCoeffs
    array to preserve both amplitude and phase information. This array should
    correspond with the same-sized array of frequencies.
    """

    frequencies: Iterable[float]
    """Array of individual PSD frequencies of the signal in hertz.

    This array should correspond with the same-sized array of powers.
    """

    frequency: float
    """Center carrier frequency in hertz."""

    frequency_shift: Annotated[float, PropertyInfo(alias="frequencyShift")]
    """Frequency Shift of the RFObservation record."""

    id_sensor: Annotated[str, PropertyInfo(alias="idSensor")]
    """Unique identifier of the reporting sensor."""

    incoming: bool
    """True if the signal is incoming, false if outgoing."""

    inner_coding_rate: Annotated[int, PropertyInfo(alias="innerCodingRate")]
    """
    Inner forward error correction rate: 0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 =
    5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    """

    max_psd: Annotated[float, PropertyInfo(alias="maxPSD")]
    """Maximum measured PSD value of the trace in decibel watts."""

    min_psd: Annotated[float, PropertyInfo(alias="minPSD")]
    """Minimum measured PSD value of the trace in decibel watts."""

    modulation: str
    """Transponder modulation (e.g. Auto, QPSK, 8PSK, etc)."""

    noise_pwr_density: Annotated[float, PropertyInfo(alias="noisePwrDensity")]
    """Noise power density, in decibel watts per hertz."""

    nominal_bandwidth: Annotated[float, PropertyInfo(alias="nominalBandwidth")]
    """Expected bandwidth in hertz."""

    nominal_eirp: Annotated[float, PropertyInfo(alias="nominalEirp")]
    """Expected Equivalent Isotopically Radiated Power in decibel watts."""

    nominal_frequency: Annotated[float, PropertyInfo(alias="nominalFrequency")]
    """Nominal or expected center carrier frequency in hertz."""

    nominal_power_over_noise: Annotated[float, PropertyInfo(alias="nominalPowerOverNoise")]
    """Expected carrier power over noise (decibel watts per hertz)."""

    nominal_snr: Annotated[float, PropertyInfo(alias="nominalSnr")]
    """Nominal or expected signal to noise ratio, in decibels."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """
    Optional identifier provided by observation source to indicate the target
    onorbit object of this observation. This may be an internal identifier and not
    necessarily a valid satellite number.
    """

    orig_sensor_id: Annotated[str, PropertyInfo(alias="origSensorId")]
    """
    Optional identifier provided by observation source to indicate the sensor
    identifier which produced this observation. This may be an internal identifier
    and not necessarily a valid sensor ID.
    """

    outer_coding_rate: Annotated[int, PropertyInfo(alias="outerCodingRate")]
    """
    Outer forward error correction rate: 0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 =
    5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    """

    peak: bool
    """Peak of the RFObservation record."""

    pgri: float
    """
    A pulse group repetition interval (PGRI) is a pulse train in which there are
    groups of closely spaced pulses separated by much longer times between these
    pulse groups. The PGRI is measured in seconds.
    """

    pn_orders: Annotated[Iterable[int], PropertyInfo(alias="pnOrders")]
    """Array of pnOrder."""

    polarity: float
    """The antenna pointing dependent polarizer angle, in degrees."""

    polarity_type: Annotated[Literal["H", "V", "R", "L"], PropertyInfo(alias="polarityType")]
    """Transponder polarization e.g.

    H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically
    Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized)
    Rotating left relative to the earth's surface, R - (Right Hand Circularly
    Polarized) Rotating right relative to the earth's surface.
    """

    power_over_noise: Annotated[float, PropertyInfo(alias="powerOverNoise")]
    """Measured carrier power over noise (decibel watts per hertz)."""

    powers: Iterable[float]
    """Array of individual measured PSD powers of the signal in decibel watts.

    This array should correspond with the same-sized array of frequencies.
    """

    range: float
    """Target range in kilometers."""

    range_measured: Annotated[bool, PropertyInfo(alias="rangeMeasured")]
    """
    Optional flag indicating whether the range value is measured (true) or computed
    (false). If null, consumers may consult the data provider for information
    regarding whether the corresponding value is computed or measured.
    """

    range_rate: Annotated[float, PropertyInfo(alias="rangeRate")]
    """Rate of change of the range in kilometers per second."""

    range_rate_measured: Annotated[bool, PropertyInfo(alias="rangeRateMeasured")]
    """
    Optional flag indicating whether the rangeRate value is measured (true) or
    computed (false). If null, consumers may consult the data provider for
    information regarding whether the corresponding value is computed or measured.
    """

    range_rate_unc: Annotated[float, PropertyInfo(alias="rangeRateUnc")]
    """One sigma uncertainty in the range rate measurement, in kilometers/second."""

    range_unc: Annotated[float, PropertyInfo(alias="rangeUnc")]
    """One sigma uncertainty in the range measurement, in kilometers."""

    raw_file_uri: Annotated[str, PropertyInfo(alias="rawFileURI")]
    """
    Optional URI location in the document repository of the raw file parsed by the
    system to produce this record. To download the raw file, prepend
    https://udl-hostname/scs/download?id= to this value.
    """

    reference_level: Annotated[float, PropertyInfo(alias="referenceLevel")]
    """Reference signal level, in decibel watts."""

    relative_carrier_power: Annotated[float, PropertyInfo(alias="relativeCarrierPower")]
    """Measured power of the center carrier frequency in decibel watts."""

    relative_noise_floor: Annotated[float, PropertyInfo(alias="relativeNoiseFloor")]
    """
    The measure of the signal created from the sum of all the noise sources and
    unwanted signals within the measurement system, in decibel watts.
    """

    resolution_bandwidth: Annotated[float, PropertyInfo(alias="resolutionBandwidth")]
    """Resolution bandwidth in hertz."""

    sat_no: Annotated[int, PropertyInfo(alias="satNo")]
    """Satellite/Catalog number of the target on-orbit object."""

    senalt: float
    """Sensor altitude at obTime (if mobile/onorbit) in km.

    If null, can be obtained from sensor info.
    """

    senlat: float
    """Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees.

    If null, can be obtained from sensor info. -90 to 90 degrees (negative values
    south of equator).
    """

    senlon: float
    """Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees.

    If null, can be obtained from sensor info. -180 to 180 degrees (negative values
    west of Prime Meridian).
    """

    signal_ids: Annotated[SequenceNotStr[str], PropertyInfo(alias="signalIds")]
    """Array of optional source provided identifiers of the measurements/signals."""

    snr: float
    """Signal to noise ratio, in decibels."""

    snrs: Iterable[float]
    """Array of signal to noise ratios of the signals, in decibels."""

    spectrum_analyzer_power: Annotated[float, PropertyInfo(alias="spectrumAnalyzerPower")]
    """
    Measured spectrum analyzer power of the center carrier frequency in decibel
    watts.
    """

    start_frequency: Annotated[float, PropertyInfo(alias="startFrequency")]
    """Start carrier frequency in hertz."""

    switch_point: Annotated[int, PropertyInfo(alias="switchPoint")]
    """Switch Point of the RFObservation record."""

    symbol_to_noise_ratio: Annotated[float, PropertyInfo(alias="symbolToNoiseRatio")]
    """Symbol to noise ratio, in decibels."""

    tags: SequenceNotStr[str]
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    task_id: Annotated[str, PropertyInfo(alias="taskId")]
    """
    Optional identifier to indicate the specific tasking which produced this
    observation.
    """

    telemetry_ids: Annotated[SequenceNotStr[str], PropertyInfo(alias="telemetryIds")]
    """
    Array of optional source provided telemetry identifiers of the
    measurements/signals.
    """

    track_id: Annotated[str, PropertyInfo(alias="trackId")]
    """Optional identifier of the track to which this observation belongs."""

    track_range: Annotated[float, PropertyInfo(alias="trackRange")]
    """Target track or apparent range in kilometers."""

    transaction_id: Annotated[str, PropertyInfo(alias="transactionId")]
    """
    Optional identifier to track a commercial or marketplace transaction executed to
    produce this data.
    """

    transmit_filter_roll_off: Annotated[float, PropertyInfo(alias="transmitFilterRollOff")]
    """Transmit pulse shaping filter roll-off value."""

    transmit_filter_type: Annotated[str, PropertyInfo(alias="transmitFilterType")]
    """Transmit pulse shaping filter type (e.g. RRC)."""

    transponder: str
    """
    Optional identifier provided by observation source to indicate the transponder
    used for this measurement.
    """

    uct: bool
    """
    Boolean indicating this observation is part of an uncorrelated track or was
    unable to be correlated to a known object. This flag should only be set to true
    by data providers after an attempt to correlate to an on-orbit object was made
    and failed. If unable to correlate, the 'origObjectId' field may be populated
    with an internal data provider specific identifier.
    """

    url: str
    """Optional URL containing additional information on this observation."""

    video_bandwidth: Annotated[float, PropertyInfo(alias="videoBandwidth")]
    """Video bandwidth in hertz."""
