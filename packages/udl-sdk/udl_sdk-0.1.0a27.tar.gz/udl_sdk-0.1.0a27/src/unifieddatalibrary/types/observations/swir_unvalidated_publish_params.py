# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from ..._utils import PropertyInfo

__all__ = ["SwirUnvalidatedPublishParams", "Body"]


class SwirUnvalidatedPublishParams(TypedDict, total=False):
    body: Required[Iterable[Body]]


class Body(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    source: Required[str]
    """Source of the data."""

    ts: Required[Annotated[Union[str, datetime], PropertyInfo(format="iso8601")]]
    """Data timestamp in ISO8601 UTC format."""

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    abs_fluxes: Annotated[Iterable[float], PropertyInfo(alias="absFluxes")]
    """
    Array of absolute flux measurement data, in Watts per square centimeter per
    micron. This array should correspond with the same-sized array of wavelengths.
    """

    bad_wave: Annotated[str, PropertyInfo(alias="badWave")]
    """User comments concerning sensor or data limitations."""

    flux_ratios: Annotated[Iterable[float], PropertyInfo(alias="fluxRatios")]
    """Array of flux ratio data.

    This array should correspond with the same-sized array of ratioWavelengths.
    """

    lat: float
    """Spacecraft WGS84 latitude, in degrees at obTime.

    -90 to 90 degrees (negative values south of equator).
    """

    location_name: Annotated[str, PropertyInfo(alias="locationName")]
    """Location/name of the observing sensor."""

    lon: float
    """Spacecraft WGS84 longitude at ob time, in degrees.

    -180 to 180 degrees (negative values west of Prime Meridian).
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """Original object ID or Catalog Number provided by source."""

    ratio_wavelengths: Annotated[Iterable[float], PropertyInfo(alias="ratioWavelengths")]
    """Array of ratio wavelength data.

    This array should correspond with the same-sized array of fluxRatios.
    """

    sat_no: Annotated[int, PropertyInfo(alias="satNo")]
    """Satellite/catalog number of the target on-orbit object."""

    solar_phase_angle: Annotated[float, PropertyInfo(alias="solarPhaseAngle")]
    """
    The angle, in degrees, between the target-to-observer vector and the
    target-to-sun vector.
    """

    wavelengths: Iterable[float]
    """Array of wavelengths, in microns.

    This array should correspond with the same-sized array of absFluxes.
    """
