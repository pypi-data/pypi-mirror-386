# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo

__all__ = ["OnorbitthrusterstatusCreateBulkParams", "Body"]


class OnorbitthrusterstatusCreateBulkParams(TypedDict, total=False):
    body: Required[Iterable[Body]]


class Body(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_onorbit_thruster: Required[Annotated[str, PropertyInfo(alias="idOnorbitThruster")]]
    """ID of the associated OnorbitThruster record.

    This ID can be used to obtain additional information on an onorbit thruster
    object using the 'get by ID' operation (e.g. /udl/onorbitthruster/{id}). For
    example, the OnorbitThruster object with idOnorbitThruster = abc would be
    queried as /udl/onorbitthruster/abc.
    """

    source: Required[str]
    """Source of the data."""

    status_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="statusTime", format="iso8601")]]
    """
    Datetime of the thruster status observation in ISO 8601 UTC datetime format with
    millisecond precision.
    """

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    est_delta_v: Annotated[float, PropertyInfo(alias="estDeltaV")]
    """Estimated available delta-velocity for this thruster, in meters per second."""

    fuel_mass: Annotated[float, PropertyInfo(alias="fuelMass")]
    """Total fuel mass available for this thruster's type, in kilograms."""

    fuel_mass_unc: Annotated[float, PropertyInfo(alias="fuelMassUnc")]
    """
    1-sigma uncertainty of the total fuel mass available for this thruster type, in
    kilograms.
    """

    isp: float
    """Specific impulse for this thruster, in seconds."""

    max_delta_v: Annotated[float, PropertyInfo(alias="maxDeltaV")]
    """Maximum available delta-velocity for this thruster, in meters per second."""

    min_delta_v: Annotated[float, PropertyInfo(alias="minDeltaV")]
    """Minimum available delta-velocity for this thruster, in meters per second."""

    name: str
    """Identifier of this thruster."""

    operational: bool
    """Flag indicating if this thruster is operational."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    prop_mass_avg: Annotated[float, PropertyInfo(alias="propMassAvg")]
    """Average available propellant mass for this thruster's type, in kilograms."""

    prop_mass_max: Annotated[float, PropertyInfo(alias="propMassMax")]
    """Maximum available propellant mass for this thruster's type, in kilograms."""

    prop_mass_median: Annotated[float, PropertyInfo(alias="propMassMedian")]
    """Median available propellant mass for this thruster's type, in kilograms."""

    prop_mass_min: Annotated[float, PropertyInfo(alias="propMassMin")]
    """Minimum available propellant mass for this thruster's type, in kilograms."""

    thrust_max: Annotated[float, PropertyInfo(alias="thrustMax")]
    """Maximum available thrust for this thruster, in newtons."""

    total_delta_v: Annotated[float, PropertyInfo(alias="totalDeltaV")]
    """Total delta-velocity available for this thruster's type, in meters per second."""
