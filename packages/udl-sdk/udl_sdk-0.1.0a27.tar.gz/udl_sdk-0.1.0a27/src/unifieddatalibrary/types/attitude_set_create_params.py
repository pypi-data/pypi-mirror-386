# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._types import SequenceNotStr
from .._utils import PropertyInfo

__all__ = ["AttitudeSetCreateParams", "AttitudeList"]


class AttitudeSetCreateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    end_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="endTime", format="iso8601")]]
    """
    The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond
    precision. If this set is constituted by a single epoch attitude message then
    endTime should match the startTime.
    """

    frame1: Required[str]
    """
    Reference frame 1 of the quaternion or Euler angle transformation utilized in
    this attitude parameter or attitude ephemeris. The UDL convention is that
    transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
    instrument name may be provided with the assumption the consumer understands the
    location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
    THRUSTERx, etc.).
    """

    frame2: Required[str]
    """
    Reference frame 2 of the quaternion or Euler angle transformation utilized in
    this attitude parameter or attitude ephemeris. The UDL convention is that
    transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
    instrument name may be provided with the assumption the consumer understands the
    location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
    THRUSTERx, etc.).
    """

    num_points: Required[Annotated[int, PropertyInfo(alias="numPoints")]]
    """Number of attitude records contained in this set."""

    source: Required[str]
    """Source of the data."""

    start_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="startTime", format="iso8601")]]
    """
    The epoch or start time of the attitude parameter or attitude ephemeris, in ISO
    8601 UTC format, with microsecond precision. If this set is constituted by a
    single attitude parameter message then startTime is the epoch.
    """

    type: Required[str]
    """The type of attitude message or messages associated with this set.

    AEM = Attitude Ephemeris Message, specifying the attitude state of a single
    object at multiple epochs.

    APM = Attitude Parameters Message, specifying the attitude state of a single
    object at a single epoch.
    """

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    as_ref: Annotated[SequenceNotStr[str], PropertyInfo(alias="asRef")]
    """Array of UDL UUIDs of one or more AttitudeSet records associated with this set.

    For example, a spacecraft Attitude Ephemeris Set might include a reference to an
    Attitude Parameter Message defining the sensor to body frame transformation for
    a sensor onboard the spacecraft, which allows for calculation of the sensor
    orientation in frame2 of the attitude ephemeris.
    """

    attitude_list: Annotated[Iterable[AttitudeList], PropertyInfo(alias="attitudeList")]
    """Collection of attitude data associated with this Attitude Set."""

    es_id: Annotated[str, PropertyInfo(alias="esId")]
    """
    Unique identifier of the parent (positional) Ephemeris Set, if this data is
    correlated with an Ephemeris.
    """

    euler_rot_seq: Annotated[str, PropertyInfo(alias="eulerRotSeq")]
    """
    The rotation sequence of the Euler angles in which attitude reference frame
    transformation occurs (from left to right). One, two, or three axis rotations
    are supported and are represented by one, two, or three characters respectively.
    Repeated axis rotations are also supported, however, these rotations should not
    be sequential. The numeric sequence values correspond to the body angles/rates
    as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate. Valid
    sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12,
    13, 21, 23, 31, 32, 1, 2, and 3.

    The following represent examples of possible rotation sequences: A single
    rotation about the Y-axis can be expressed as '2', a double rotation with X-Z
    sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can
    be expressed as '312'.
    """

    id_sensor: Annotated[str, PropertyInfo(alias="idSensor")]
    """
    Unique identifier of the sensor to which this attitude set applies IF this set
    is reporting a single sensor orientation.
    """

    interpolator: str
    """Recommended interpolation method for estimating attitude ephemeris data."""

    interpolator_degree: Annotated[int, PropertyInfo(alias="interpolatorDegree")]
    """Recommended polynomial interpolation degree."""

    notes: str
    """Optional notes/comments for this attitude set."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """
    Optional identifier provided by the record source to indicate the target object
    of this attitude set. This may be an internal identifier and not necessarily map
    to a valid satellite number.
    """

    orig_sensor_id: Annotated[str, PropertyInfo(alias="origSensorId")]
    """
    Optional identifier provided by the record source to indicate the sensor
    identifier to which this attitude set applies IF this set is reporting a single
    sensor orientation. This may be an internal identifier and not necessarily a
    valid sensor ID.
    """

    prec_angle_init: Annotated[float, PropertyInfo(alias="precAngleInit")]
    """Initial precession angle (ECI J2000 frame) in degrees."""

    sat_no: Annotated[int, PropertyInfo(alias="satNo")]
    """
    Satellite/catalog number of the on-orbit object to which this attitude set
    applies.
    """

    spin_angle_init: Annotated[float, PropertyInfo(alias="spinAngleInit")]
    """Initial spin angle (ECI J2000 frame) in degrees."""

    step_size: Annotated[int, PropertyInfo(alias="stepSize")]
    """Attitude ephemeris step size, in seconds.

    This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
    """


class AttitudeList(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    source: Required[str]
    """Source of the data."""

    ts: Required[Annotated[Union[str, datetime], PropertyInfo(format="iso8601")]]
    """
    Time associated with this attitude record, in ISO 8601 UTC format, with
    microsecond precision.
    """

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    as_id: Annotated[str, PropertyInfo(alias="asId")]
    """Unique identifier of the parent AttitudeSet associated with this record."""

    coning_angle: Annotated[float, PropertyInfo(alias="coningAngle")]
    """Coning angle in degrees."""

    declination: float
    """Precession axis declination (ECI J2000 frame) in degrees."""

    motion_type: Annotated[str, PropertyInfo(alias="motionType")]
    """Label specifying type of rotational motion of target."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """
    Optional identifier provided by the record source to indicate the target object
    of this attitude record. This may be an internal identifier and not necessarily
    map to a valid satellite number.
    """

    prec_period: Annotated[float, PropertyInfo(alias="precPeriod")]
    """Precession period in seconds."""

    q1: float
    """Quaternion vector component 1."""

    q1_dot: Annotated[float, PropertyInfo(alias="q1Dot")]
    """Derivative of quaternion vector component 1."""

    q2: float
    """Quaternion vector component 2."""

    q2_dot: Annotated[float, PropertyInfo(alias="q2Dot")]
    """Derivative of quaternion vector component 2."""

    q3: float
    """Quaternion vector component 3."""

    q3_dot: Annotated[float, PropertyInfo(alias="q3Dot")]
    """Derivative of quaternion vector component 3."""

    qc: float
    """Quaternion scalar component."""

    qc_dot: Annotated[float, PropertyInfo(alias="qcDot")]
    """Derivative of quaternion scalar component."""

    ra: float
    """Precession axis right ascension (ECI J2000 frame) in degrees."""

    sat_no: Annotated[int, PropertyInfo(alias="satNo")]
    """
    Satellite/catalog number of the on-orbit object to which this attitude record
    applies.
    """

    spin_period: Annotated[float, PropertyInfo(alias="spinPeriod")]
    """Spin period in seconds."""

    x_angle: Annotated[Iterable[float], PropertyInfo(alias="xAngle")]
    """Array of X body rotation Euler angle(s), in degrees (-180 to 180).

    For repeated axis rotations, the array elements should be placed in the order
    that the angles apply in the sequence.
    """

    x_rate: Annotated[Iterable[float], PropertyInfo(alias="xRate")]
    """Array of X body rotation rate(s), in degrees per second.

    For repeated axis rotations, the array elements should be placed in the order
    that the rates apply in the sequence. Attitude rates are expressed in frame1
    with respect to frame2.
    """

    y_angle: Annotated[Iterable[float], PropertyInfo(alias="yAngle")]
    """Array of Y body rotation Euler angle(s), in degrees (-180 to 180).

    For repeated axis rotations, the array elements should be placed in the order
    that the angles apply in the sequence.
    """

    y_rate: Annotated[Iterable[float], PropertyInfo(alias="yRate")]
    """Array of Y body rotation rate(s), in degrees per second.

    For repeated axis rotations, the array elements should be placed in the order
    that the rates apply in the sequence. Attitude rates are expressed in frame1
    with respect to frame2.
    """

    z_angle: Annotated[Iterable[float], PropertyInfo(alias="zAngle")]
    """Array of Z body rotation Euler angle(s), in degrees (-180 to 180).

    For repeated axis rotations, the array elements should be placed in the order
    that the angles apply in the sequence.
    """

    z_rate: Annotated[Iterable[float], PropertyInfo(alias="zRate")]
    """Array of Z body rotation rate(s), in degrees per second.

    For repeated axis rotations, the array elements should be placed in the order
    that the rates apply in the sequence Attitude rates are expressed in frame1 with
    respect to frame2.
    """
