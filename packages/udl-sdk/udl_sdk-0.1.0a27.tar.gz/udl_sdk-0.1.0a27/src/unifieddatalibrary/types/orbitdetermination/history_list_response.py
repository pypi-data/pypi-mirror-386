# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import List, Optional
from datetime import datetime
from typing_extensions import Literal

from pydantic import Field as FieldInfo

from ..._models import BaseModel
from ..shared.onorbit_full import OnorbitFull

__all__ = ["HistoryListResponse", "AprioriElset", "AprioriStateVector"]


class AprioriElset(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    epoch: datetime
    """Elset epoch time in ISO 8601 UTC format, with microsecond precision."""

    source: str
    """Source of the data."""

    agom: Optional[float] = None
    """
    AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the
    solar radiation pressure coefficient(Gamma) over the object Mass. Applicable
    only with ephemType4.
    """

    algorithm: Optional[str] = None
    """Optional algorithm used to produce this record."""

    apogee: Optional[float] = None
    """The orbit point furthest from the center of the earth in kilometers.

    If not provided, apogee will be computed from the TLE according to the
    following. Using mu, the standard gravitational parameter for the earth
    (398600.4418), semi-major axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using
    semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the
    calculations are for computing the apogee radius from the center of the earth,
    to compute apogee altitude the radius of the earth should be subtracted
    (6378.135 km).
    """

    arg_of_perigee: Optional[float] = FieldInfo(alias="argOfPerigee", default=None)
    """
    The argument of perigee is the angle in degrees formed between the perigee and
    the ascending node. If the perigee would occur at the ascending node, the
    argument of perigee would be 0.
    """

    ballistic_coeff: Optional[float] = FieldInfo(alias="ballisticCoeff", default=None)
    """Ballistic coefficient, in m^2/kg. Applicable only with ephemType4."""

    b_star: Optional[float] = FieldInfo(alias="bStar", default=None)
    """
    The drag term for SGP4 orbital model, used for calculating decay constants for
    altitude, eccentricity etc, measured in inverse earth radii.
    """

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    descriptor: Optional[str] = None
    """Optional source-provided and searchable metadata or descriptor of the data."""

    eccentricity: Optional[float] = None
    """
    The orbital eccentricity of an astronomical object is a parameter that
    determines the amount by which its orbit around another body deviates from a
    perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an
    elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a
    hyperbolic escape orbit.
    """

    effective_from: Optional[datetime] = FieldInfo(alias="effectiveFrom", default=None)
    """
    Read-only start time at which this elset was the 'current' elset for its
    satellite. This field and is set by the system automatically and ignored on
    create/edit operations.
    """

    effective_until: Optional[datetime] = FieldInfo(alias="effectiveUntil", default=None)
    """
    Read-only end time at which this elset was no longer the 'current' elset for its
    satellite. This field and is set by the system automatically and ignored on
    create/edit operations.
    """

    ephem_type: Optional[int] = FieldInfo(alias="ephemType", default=None)
    """The ephemeris type associated with this TLE:

    0:&nbsp;SGP (or SGP4 with Kozai mean motion)

    1:&nbsp;SGP (Kozai mean motion)

    2:&nbsp;SGP4 (Brouver mean motion)

    3:&nbsp;SDP4

    4:&nbsp;SGP4-XP

    5:&nbsp;SDP8

    6:&nbsp;SP (osculating mean motion)
    """

    id_elset: Optional[str] = FieldInfo(alias="idElset", default=None)
    """Unique identifier of the record, auto-generated by the system."""

    id_on_orbit: Optional[str] = FieldInfo(alias="idOnOrbit", default=None)
    """Unique identifier of the satellite on-orbit object, if correlated.

    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites.
    """

    id_orbit_determination: Optional[str] = FieldInfo(alias="idOrbitDetermination", default=None)
    """Unique identifier of the OD solution record that produced this elset.

    This ID can be used to obtain additional information on an OrbitDetermination
    object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
    example, the OrbitDetermination with idOrbitDetermination = abc would be queried
    as /udl/orbitdetermination/abc.
    """

    inclination: Optional[float] = None
    """
    The angle between the equator and the orbit when looking from the center of the
    Earth. If the orbit went exactly around the equator from left to right, then the
    inclination would be 0. The inclination ranges from 0 to 180 degrees.
    """

    line1: Optional[str] = None
    """
    Read only derived/generated line1 of a legacy TLE (two line element set) format,
    ignored on create/edit operations.
    """

    line2: Optional[str] = None
    """
    Read only derived/generated line2 of a legacy TLE (two line element set) format,
    ignored on create/edit operations.
    """

    mean_anomaly: Optional[float] = FieldInfo(alias="meanAnomaly", default=None)
    """Where the satellite is in its orbital path.

    The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to
    the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
    """

    mean_motion: Optional[float] = FieldInfo(alias="meanMotion", default=None)
    """
    Mean motion is the angular speed required for a body to complete one orbit,
    assuming constant speed in a circular orbit which completes in the same time as
    the variable speed, elliptical orbit of the actual body. Measured in revolutions
    per day.
    """

    mean_motion_d_dot: Optional[float] = FieldInfo(alias="meanMotionDDot", default=None)
    """2nd derivative of the mean motion with respect to time.

    Units are revolutions per day cubed.
    """

    mean_motion_dot: Optional[float] = FieldInfo(alias="meanMotionDot", default=None)
    """1st derivative of the mean motion with respect to time.

    Units are revolutions per day squared.
    """

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    orig_object_id: Optional[str] = FieldInfo(alias="origObjectId", default=None)
    """
    Optional identifier provided by elset source to indicate the target onorbit
    object of this elset. This may be an internal identifier and not necessarily map
    to a valid satellite number.
    """

    perigee: Optional[float] = None
    """The orbit point nearest to the center of the earth in kilometers.

    If not provided, perigee will be computed from the TLE according to the
    following. Using mu, the standard gravitational parameter for the earth
    (398600.4418), semi-major axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using
    semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the
    calculations are for computing the perigee radius from the center of the earth,
    to compute perigee altitude the radius of the earth should be subtracted
    (6378.135 km).
    """

    period: Optional[float] = None
    """Period of the orbit equal to inverse of mean motion, in minutes."""

    raan: Optional[float] = None
    """
    Right ascension of the ascending node, or RAAN is the angle as measured in
    degrees eastwards (or, as seen from the north, counterclockwise) from the First
    Point of Aries to the ascending node, which is where the orbit crosses the
    equator when traveling north.
    """

    raw_file_uri: Optional[str] = FieldInfo(alias="rawFileURI", default=None)
    """
    Optional URI location in the document repository of the raw file parsed by the
    system to produce this record. To download the raw file, prepend
    https://udl-hostname/scs/download?id= to this value.
    """

    rev_no: Optional[int] = FieldInfo(alias="revNo", default=None)
    """The current revolution number.

    The value is incremented when a satellite crosses the equator on an ascending
    pass.
    """

    sat_no: Optional[int] = FieldInfo(alias="satNo", default=None)
    """Satellite/catalog number of the target on-orbit object."""

    semi_major_axis: Optional[float] = FieldInfo(alias="semiMajorAxis", default=None)
    """The sum of the periapsis and apoapsis distances divided by two.

    For circular orbits, the semimajor axis is the distance between the centers of
    the bodies, not the distance of the bodies from the center of mass. Units are
    kilometers.
    """

    sourced_data: Optional[List[str]] = FieldInfo(alias="sourcedData", default=None)
    """Optional array of UDL data (observation) UUIDs used to build this element set.

    See the associated sourcedDataTypes array for the specific types of observations
    for the positionally corresponding UUIDs in this array (the two arrays must
    match in size).
    """

    sourced_data_types: Optional[List[Literal["EO", "RADAR", "RF", "DOA", "ELSET", "SV"]]] = FieldInfo(
        alias="sourcedDataTypes", default=None
    )
    """Optional array of UDL observation data types used to build this element set
    (e.g.

    EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs
    of observations for the positionally corresponding data types in this array (the
    two arrays must match in size).
    """

    source_dl: Optional[str] = FieldInfo(alias="sourceDL", default=None)
    """The source data library from which this record was received.

    This could be a remote or tactical UDL or another data library. If null, the
    record should be assumed to have originated from the primary Enterprise UDL.
    """

    tags: Optional[List[str]] = None
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    transaction_id: Optional[str] = FieldInfo(alias="transactionId", default=None)
    """
    Optional identifier to track a commercial or marketplace transaction executed to
    produce this data.
    """

    uct: Optional[bool] = None
    """Boolean indicating this Elset was unable to be correlated to a known object.

    This flag should only be set to true by data providers after an attempt to
    correlate to an on-orbit object was made and failed. If unable to correlate, the
    'origObjectId' field may be populated with an internal data provider specific
    identifier.
    """


class AprioriStateVector(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    epoch: datetime
    """
    Time of validity for state vector in ISO 8601 UTC datetime format, with
    microsecond precision.
    """

    source: str
    """Source of the data."""

    actual_od_span: Optional[float] = FieldInfo(alias="actualODSpan", default=None)
    """The actual time span used for the OD of the object, expressed in days."""

    algorithm: Optional[str] = None
    """Optional algorithm used to produce this record."""

    alt1_reference_frame: Optional[str] = FieldInfo(alias="alt1ReferenceFrame", default=None)
    """The reference frame of the alternate1 (Alt1) cartesian orbital state."""

    alt2_reference_frame: Optional[str] = FieldInfo(alias="alt2ReferenceFrame", default=None)
    """The reference frame of the alternate2 (Alt2) cartesian orbital state."""

    area: Optional[float] = None
    """
    The actual area of the object at it's largest cross-section, expressed in
    meters^2.
    """

    b_dot: Optional[float] = FieldInfo(alias="bDot", default=None)
    """First derivative of drag/ballistic coefficient (m2/kg-s)."""

    cm_offset: Optional[float] = FieldInfo(alias="cmOffset", default=None)
    """Model parameter value for center of mass offset (m)."""

    cov: Optional[List[float]] = None
    """
    Covariance matrix, in kilometer and second based units, in the specified
    covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
    The array values (1-21) represent the lower triangular half of the
    position-velocity covariance matrix. The size of the covariance matrix is
    dynamic, depending on whether the covariance for position only or position &
    velocity. The covariance elements are position dependent within the array with
    values ordered as follows:

    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;

    x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1

    y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3

    z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6

    x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10

    y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15

    z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;

    The cov array should contain only the lower left triangle values from top left
    down to bottom right, in order.

    If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
    matrix can be extended with the following order of elements:

    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR

    DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;

    SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;

    THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
    """

    cov_method: Optional[str] = FieldInfo(alias="covMethod", default=None)
    """
    The method used to generate the covariance during the orbit determination (OD)
    that produced the state vector, or whether an arbitrary, non-calculated default
    value was used (CALCULATED, DEFAULT).
    """

    cov_reference_frame: Optional[Literal["J2000", "UVW", "EFG/TDR", "ECR/ECEF", "TEME", "GCRF"]] = FieldInfo(
        alias="covReferenceFrame", default=None
    )
    """The reference frame of the covariance matrix elements.

    If the covReferenceFrame is null it is assumed to be J2000.
    """

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    descriptor: Optional[str] = None
    """Optional source-provided and searchable metadata or descriptor of the data."""

    drag_area: Optional[float] = FieldInfo(alias="dragArea", default=None)
    """
    The effective area of the object exposed to atmospheric drag, expressed in
    meters^2.
    """

    drag_coeff: Optional[float] = FieldInfo(alias="dragCoeff", default=None)
    """Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg)."""

    drag_model: Optional[str] = FieldInfo(alias="dragModel", default=None)
    """The Drag Model used for this vector (e.g.

    HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).
    """

    edr: Optional[float] = None
    """Model parameter value for energy dissipation rate (EDR) (w/kg)."""

    effective_from: Optional[datetime] = FieldInfo(alias="effectiveFrom", default=None)
    """
    Start time at which this state vector was the 'current' state vector for its
    satellite.
    """

    effective_until: Optional[datetime] = FieldInfo(alias="effectiveUntil", default=None)
    """
    End time at which this state vector was no longer the 'current' state vector for
    its satellite.
    """

    eq_cov: Optional[List[float]] = FieldInfo(alias="eqCov", default=None)
    """
    The covariance matrix values represent the lower triangular half of the
    covariance matrix in terms of equinoctial elements.&nbsp; The size of the
    covariance matrix is dynamic.&nbsp; The values are outputted in order across
    each row, i.e.:

    1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5

    6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10

    :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :

    :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :

    51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55

    :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :

    :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :

    The ordering of values is as follows:

    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
    Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
    B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...

    Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1

    Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3

    L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6

    N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10

    Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
    13&nbsp;&nbsp; 14&nbsp;&nbsp; 15

    Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
    18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21

    B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
    23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28

    BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
    33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36

    AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
    41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45

    T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
    47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
    52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55

    C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
    58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
    63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66

    C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
    69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
    74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78

    :

    :

    where C1, C2, etc, are the "consider parameters" that may be added to the
    covariance matrix.&nbsp; The covariance matrix will be as large as the last
    element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
    elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
    BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
    will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
    only the lower left triangle values from top left down to bottom right, in
    order.
    """

    error_control: Optional[float] = FieldInfo(alias="errorControl", default=None)
    """Integrator error control."""

    fixed_step: Optional[bool] = FieldInfo(alias="fixedStep", default=None)
    """Boolean indicating use of fixed step size for this vector."""

    geopotential_model: Optional[str] = FieldInfo(alias="geopotentialModel", default=None)
    """Geopotential model used for this vector (e.g.

    EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn
    degree/order tesserals. E.g. EGM-96 24Z,24T.
    """

    iau1980_terms: Optional[int] = FieldInfo(alias="iau1980Terms", default=None)
    """Number of terms used in the IAU 1980 nutation model (4, 50, or 106)."""

    id_on_orbit: Optional[str] = FieldInfo(alias="idOnOrbit", default=None)
    """Unique identifier of the satellite on-orbit object, if correlated.

    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites.
    """

    id_orbit_determination: Optional[str] = FieldInfo(alias="idOrbitDetermination", default=None)
    """Unique identifier of the OD solution record that produced this state vector.

    This ID can be used to obtain additional information on an OrbitDetermination
    object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
    example, the OrbitDetermination with idOrbitDetermination = abc would be queries
    as /udl/orbitdetermination/abc.
    """

    id_state_vector: Optional[str] = FieldInfo(alias="idStateVector", default=None)
    """Unique identifier of the record, auto-generated by the system."""

    integrator_mode: Optional[str] = FieldInfo(alias="integratorMode", default=None)
    """Integrator Mode."""

    in_track_thrust: Optional[bool] = FieldInfo(alias="inTrackThrust", default=None)
    """Boolean indicating use of in-track thrust perturbations for this vector."""

    last_ob_end: Optional[datetime] = FieldInfo(alias="lastObEnd", default=None)
    """
    The end of the time interval containing the time of the last accepted
    observation, in ISO 8601 UTC format with microsecond precision. For an exact
    observation time, the firstObTime and lastObTime are the same.
    """

    last_ob_start: Optional[datetime] = FieldInfo(alias="lastObStart", default=None)
    """
    The start of the time interval containing the time of the last accepted
    observation, in ISO 8601 UTC format with microsecond precision. For an exact
    observation time, the firstObTime and lastObTime are the same.
    """

    leap_second_time: Optional[datetime] = FieldInfo(alias="leapSecondTime", default=None)
    """Time of the next leap second after epoch in ISO 8601 UTC time.

    If the next leap second is not known, the time of the previous leap second is
    used.
    """

    lunar_solar: Optional[bool] = FieldInfo(alias="lunarSolar", default=None)
    """Boolean indicating use of lunar/solar perturbations for this vector."""

    mass: Optional[float] = None
    """The mass of the object, in kilograms."""

    msg_ts: Optional[datetime] = FieldInfo(alias="msgTs", default=None)
    """
    Time when message was generated in ISO 8601 UTC format with microsecond
    precision.
    """

    obs_available: Optional[int] = FieldInfo(alias="obsAvailable", default=None)
    """The number of observations available for the OD of the object."""

    obs_used: Optional[int] = FieldInfo(alias="obsUsed", default=None)
    """The number of observations accepted for the OD of the object."""

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    orig_object_id: Optional[str] = FieldInfo(alias="origObjectId", default=None)
    """
    Optional identifier provided by state vector source to indicate the target
    onorbit object of this state vector. This may be an internal identifier and not
    necessarily map to a valid satellite number.
    """

    partials: Optional[str] = None
    """Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM)."""

    pedigree: Optional[str] = None
    """
    The pedigree of state vector, or methods used for its generation to include
    state update/orbit determination, propagation from another state, or a state
    from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
    CONJUNCTION, FLIGHT_PLAN).
    """

    polar_motion_x: Optional[float] = FieldInfo(alias="polarMotionX", default=None)
    """Polar Wander Motion X (arc seconds)."""

    polar_motion_y: Optional[float] = FieldInfo(alias="polarMotionY", default=None)
    """Polar Wander Motion Y (arc seconds)."""

    pos_unc: Optional[float] = FieldInfo(alias="posUnc", default=None)
    """One sigma position uncertainty, in kilometers."""

    raw_file_uri: Optional[str] = FieldInfo(alias="rawFileURI", default=None)
    """
    Optional URI location in the document repository of the raw file parsed by the
    system to produce this record. To download the raw file, prepend
    https://udl-hostname/scs/download?id= to this value.
    """

    rec_od_span: Optional[float] = FieldInfo(alias="recODSpan", default=None)
    """The recommended OD time span calculated for the object, expressed in days."""

    reference_frame: Optional[Literal["J2000", "EFG/TDR", "ECR/ECEF", "TEME", "ITRF", "GCRF"]] = FieldInfo(
        alias="referenceFrame", default=None
    )
    """The reference frame of the cartesian orbital states.

    If the referenceFrame is null it is assumed to be J2000.
    """

    residuals_acc: Optional[float] = FieldInfo(alias="residualsAcc", default=None)
    """The percentage of residuals accepted in the OD of the object."""

    rev_no: Optional[int] = FieldInfo(alias="revNo", default=None)
    """Epoch revolution number."""

    rms: Optional[float] = None
    """
    The Weighted Root Mean Squared (RMS) of the differential correction on the
    target object that produced this vector. WRMS is a quality indicator of the
    state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
    Least Squares (BLS) processes.
    """

    sat_no: Optional[int] = FieldInfo(alias="satNo", default=None)
    """Satellite/Catalog number of the target OnOrbit object."""

    sigma_pos_uvw: Optional[List[float]] = FieldInfo(alias="sigmaPosUVW", default=None)
    """
    Array containing the standard deviation of error in target object position, U, V
    and W direction respectively (km).
    """

    sigma_vel_uvw: Optional[List[float]] = FieldInfo(alias="sigmaVelUVW", default=None)
    """
    Array containing the standard deviation of error in target object velocity, U, V
    and W direction respectively (km/sec).
    """

    solar_flux_ap_avg: Optional[float] = FieldInfo(alias="solarFluxAPAvg", default=None)
    """Average solar flux geomagnetic index."""

    solar_flux_f10: Optional[float] = FieldInfo(alias="solarFluxF10", default=None)
    """F10 (10.7 cm) solar flux value."""

    solar_flux_f10_avg: Optional[float] = FieldInfo(alias="solarFluxF10Avg", default=None)
    """F10 (10.7 cm) solar flux 81-day average value."""

    solar_rad_press: Optional[bool] = FieldInfo(alias="solarRadPress", default=None)
    """
    Boolean indicating use of solar radiation pressure perturbations for this
    vector.
    """

    solar_rad_press_coeff: Optional[float] = FieldInfo(alias="solarRadPressCoeff", default=None)
    """Area-to-mass ratio coefficient for solar radiation pressure."""

    solid_earth_tides: Optional[bool] = FieldInfo(alias="solidEarthTides", default=None)
    """Boolean indicating use of solid earth tide perturbations for this vector."""

    sourced_data: Optional[List[str]] = FieldInfo(alias="sourcedData", default=None)
    """Optional array of UDL data (observation) UUIDs used to build this state vector.

    See the associated sourcedDataTypes array for the specific types of observations
    for the positionally corresponding UUIDs in this array (the two arrays must
    match in size).
    """

    sourced_data_types: Optional[List[Literal["EO", "RADAR", "RF", "DOA", "ELSET", "SV"]]] = FieldInfo(
        alias="sourcedDataTypes", default=None
    )
    """
    Optional array of UDL observation data types used to build this state vector
    (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
    UUIDs of observations for the positionally corresponding data types in this
    array (the two arrays must match in size).
    """

    source_dl: Optional[str] = FieldInfo(alias="sourceDL", default=None)
    """The source data library from which this record was received.

    This could be a remote or tactical UDL or another data library. If null, the
    record should be assumed to have originated from the primary Enterprise UDL.
    """

    srp_area: Optional[float] = FieldInfo(alias="srpArea", default=None)
    """
    The effective area of the object exposed to solar radiation pressure, expressed
    in meters^2.
    """

    step_mode: Optional[str] = FieldInfo(alias="stepMode", default=None)
    """Integrator step mode (AUTO, TIME, or S)."""

    step_size: Optional[float] = FieldInfo(alias="stepSize", default=None)
    """Initial integration step size (seconds)."""

    step_size_selection: Optional[str] = FieldInfo(alias="stepSizeSelection", default=None)
    """Initial step size selection (AUTO or MANUAL)."""

    tags: Optional[List[str]] = None
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    tai_utc: Optional[float] = FieldInfo(alias="taiUtc", default=None)
    """
    TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
    in seconds.
    """

    thrust_accel: Optional[float] = FieldInfo(alias="thrustAccel", default=None)
    """Model parameter value for thrust acceleration (m/s2)."""

    tracks_avail: Optional[int] = FieldInfo(alias="tracksAvail", default=None)
    """The number of sensor tracks available for the OD of the object."""

    tracks_used: Optional[int] = FieldInfo(alias="tracksUsed", default=None)
    """The number of sensor tracks accepted for the OD of the object."""

    transaction_id: Optional[str] = FieldInfo(alias="transactionId", default=None)
    """
    Optional identifier to track a commercial or marketplace transaction executed to
    produce this data.
    """

    uct: Optional[bool] = None
    """
    Boolean indicating this state vector was unable to be correlated to a known
    object. This flag should only be set to true by data providers after an attempt
    to correlate to an OnOrbit object was made and failed. If unable to correlate,
    the 'origObjectId' field may be populated with an internal data provider
    specific identifier.
    """

    ut1_rate: Optional[float] = FieldInfo(alias="ut1Rate", default=None)
    """Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc."""

    ut1_utc: Optional[float] = FieldInfo(alias="ut1Utc", default=None)
    """Universal Time-1 (UT1) minus UTC offset, in seconds."""

    vel_unc: Optional[float] = FieldInfo(alias="velUnc", default=None)
    """One sigma velocity uncertainty, in kilometers/second."""

    xaccel: Optional[float] = None
    """
    Cartesian X acceleration of target, in kilometers/second^2, in the specified
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    xpos: Optional[float] = None
    """
    Cartesian X position of the target, in kilometers, in the specified
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    xpos_alt1: Optional[float] = FieldInfo(alias="xposAlt1", default=None)
    """
    Cartesian X position of the target, in kilometers, in the specified
    alt1ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    xpos_alt2: Optional[float] = FieldInfo(alias="xposAlt2", default=None)
    """
    Cartesian X position of the target, in kilometers, in the specified
    alt2ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    xvel: Optional[float] = None
    """
    Cartesian X velocity of target, in kilometers/second, in the specified
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    xvel_alt1: Optional[float] = FieldInfo(alias="xvelAlt1", default=None)
    """
    Cartesian X velocity of the target, in kilometers/second, in the specified
    alt1ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    xvel_alt2: Optional[float] = FieldInfo(alias="xvelAlt2", default=None)
    """
    Cartesian X velocity of the target, in kilometers/second, in the specified
    alt2ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    yaccel: Optional[float] = None
    """
    Cartesian Y acceleration of target, in kilometers/second^2, in the specified
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    ypos: Optional[float] = None
    """
    Cartesian Y position of the target, in kilometers, in the specified
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    ypos_alt1: Optional[float] = FieldInfo(alias="yposAlt1", default=None)
    """
    Cartesian Y position of the target, in kilometers, in the specified
    alt1ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    ypos_alt2: Optional[float] = FieldInfo(alias="yposAlt2", default=None)
    """
    Cartesian Y position of the target, in kilometers, in the specified
    alt2ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    yvel: Optional[float] = None
    """
    Cartesian Y velocity of target, in kilometers/second, in the specified
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    yvel_alt1: Optional[float] = FieldInfo(alias="yvelAlt1", default=None)
    """
    Cartesian Y velocity of the target, in kilometers/second, in the specified
    alt1ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    yvel_alt2: Optional[float] = FieldInfo(alias="yvelAlt2", default=None)
    """
    Cartesian Y velocity of the target, in kilometers/second, in the specified
    alt2ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    zaccel: Optional[float] = None
    """
    Cartesian Z acceleration of target, in kilometers/second^2, in the specified
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    zpos: Optional[float] = None
    """
    Cartesian Z position of the target, in kilometers, in the specified
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    zpos_alt1: Optional[float] = FieldInfo(alias="zposAlt1", default=None)
    """
    Cartesian Z position of the target, in kilometers, in the specified
    alt1ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    zpos_alt2: Optional[float] = FieldInfo(alias="zposAlt2", default=None)
    """
    Cartesian Z position of the target, in kilometers, in the specified
    alt2ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    zvel: Optional[float] = None
    """
    Cartesian Z velocity of target, in kilometers/second, in the specified
    referenceFrame. If referenceFrame is null then J2K should be assumed.
    """

    zvel_alt1: Optional[float] = FieldInfo(alias="zvelAlt1", default=None)
    """
    Cartesian Z velocity of the target, in kilometers/second, in the specified
    alt1ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """

    zvel_alt2: Optional[float] = FieldInfo(alias="zvelAlt2", default=None)
    """
    Cartesian Z velocity of the target, in kilometers/second, in the specified
    alt2ReferenceFrame. Alternate reference frames are optional and are intended to
    allow a data source to provide an equivalent vector in a different cartesian
    frame than the primary vector.
    """


class HistoryListResponse(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    end_time: datetime = FieldInfo(alias="endTime")
    """
    End time for OD solution in ISO 8601 UTC datetime format, with microsecond
    precision.
    """

    initial_od: bool = FieldInfo(alias="initialOD")
    """Flag indicating whether this is an initial orbit determination."""

    method: str
    """Orbit determination method used to produce this record (e.g.

    BLS, KF, UKF, etc.).
    """

    source: str
    """Source of the data."""

    start_time: datetime = FieldInfo(alias="startTime")
    """
    Start time for OD solution in ISO 8601 UTC datetime format, with microsecond
    precision.
    """

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    accepted_ob_ids: Optional[List[str]] = FieldInfo(alias="acceptedObIds", default=None)
    """Array of UDL data (observation) UUIDs that were accepted in this OD solution.

    See the associated acceptedObTyps array for the specific types of observations
    for the positionally corresponding UUIDs in this array (the two arrays must
    match in size).
    """

    accepted_ob_typs: Optional[List[str]] = FieldInfo(alias="acceptedObTyps", default=None)
    """Array of UDL observation types (e.g.

    DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution.
    See the associated acceptedObIds array for the records UUID(s), positionally
    corresponding to the record types in this array. The acceptedObTyps and
    acceptedObIds arrays must match in size.
    """

    agom_est: Optional[bool] = FieldInfo(alias="agomEst", default=None)
    """Flag indicating whether the AGOM was estimated during this OD solution."""

    agom_model: Optional[str] = FieldInfo(alias="agomModel", default=None)
    """Model used to estimate the AGOM."""

    apriori_elset: Optional[AprioriElset] = FieldInfo(alias="aprioriElset", default=None)
    """
    An element set is a collection of Keplerian orbital elements describing an orbit
    of a particular satellite. The data is used along with an orbit propagator in
    order to predict the motion of a satellite. The element set, or elset for short,
    consists of identification data, the classical elements and drag parameters.
    """

    apriori_id_elset: Optional[str] = FieldInfo(alias="aprioriIdElset", default=None)
    """Identifier of the element set used to seed this OD solution.

    This ID can be used to obtain additional information on an Elset object using
    the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with
    idElset = abc would be queried as /udl/elset/abc.
    """

    apriori_id_state_vector: Optional[str] = FieldInfo(alias="aprioriIdStateVector", default=None)
    """Identifier of the state vector used to seed this OD solution.

    This ID can be used to obtain additional information on a StateVector object
    using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the
    StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
    """

    apriori_state_vector: Optional[AprioriStateVector] = FieldInfo(alias="aprioriStateVector", default=None)
    """
    This service provides operations for querying and manipulation of state vectors
    for OnOrbit objects. State vectors are cartesian vectors of position (r) and
    velocity (v) that, together with their time (epoch) (t), uniquely determine the
    trajectory of the orbiting body in space. J2000 is the preferred coordinate
    frame for all state vector positions/velocities in UDL, but in some cases data
    may be in another frame depending on the provider and/or datatype. Please see
    the 'Discover' tab in the storefront to confirm coordinate frames by data
    provider.
    """

    ballistic_coeff_est: Optional[bool] = FieldInfo(alias="ballisticCoeffEst", default=None)
    """
    Flag indicating whether the ballistic coefficient was estimated during this OD
    solution.
    """

    ballistic_coeff_model: Optional[str] = FieldInfo(alias="ballisticCoeffModel", default=None)
    """Model used to estimate the ballistic coefficient."""

    best_pass_wrms: Optional[float] = FieldInfo(alias="bestPassWrms", default=None)
    """
    Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite
    pass during the observation span, indicating the pass with the highest quality
    OD solution.
    """

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    edr: Optional[float] = None
    """Model parameter value for energy dissipation rate (EDR) in watts per kilogram."""

    effective_from: Optional[datetime] = FieldInfo(alias="effectiveFrom", default=None)
    """
    Optional start time at which this OD solution is accurate, in ISO 8601 UTC
    datetime format with microsecond precision.
    """

    effective_until: Optional[datetime] = FieldInfo(alias="effectiveUntil", default=None)
    """
    Optional end time at which this OD solution may no longer be accurate, in ISO
    8601 UTC datetime format with microsecond precision.
    """

    error_growth_rate: Optional[float] = FieldInfo(alias="errorGrowthRate", default=None)
    """Error growth rate of the OD solution in kilometers per day."""

    first_pass_wrms: Optional[float] = FieldInfo(alias="firstPassWrms", default=None)
    """
    The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in
    the observation span. Serves as the initial quality metric for the beginning of
    the observation period.
    """

    fit_span: Optional[float] = FieldInfo(alias="fitSpan", default=None)
    """The fit span, in days, used in a Batch Least Squares (BLS) OD."""

    id_on_orbit: Optional[str] = FieldInfo(alias="idOnOrbit", default=None)
    """Unique identifier of the target satellite on-orbit object.

    This ID can be used to obtain additional information on an OnOrbit object using
    the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit
    with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
    """

    last_ob_end: Optional[datetime] = FieldInfo(alias="lastObEnd", default=None)
    """
    The end of the time interval containing the time of the last accepted
    observation, in ISO 8601 UTC datetime format with microsecond precision. For an
    exact observation time, the lastObStart and lastObEnd are the same.
    """

    last_ob_start: Optional[datetime] = FieldInfo(alias="lastObStart", default=None)
    """
    The start of the time interval containing the time of the last accepted
    observation, in ISO 8601 UTC datetime format with microsecond precision. For an
    exact observation time, the lastObStart and lastObEnd are the same.
    """

    method_source: Optional[str] = FieldInfo(alias="methodSource", default=None)
    """Source of orbit determination method used to produce this record (e.g.

    ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
    """

    num_iterations: Optional[int] = FieldInfo(alias="numIterations", default=None)
    """The number of iterations taken for the algorithm to converge on an OD solution."""

    on_orbit: Optional[OnorbitFull] = FieldInfo(alias="onOrbit", default=None)
    """Model object representing on-orbit objects or satellites in the system."""

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    orig_object_id: Optional[str] = FieldInfo(alias="origObjectId", default=None)
    """
    Optional identifier provided by the OD source to indicate the target on-orbit
    object of this OD solution. This may be an internal identifier and not
    necessarily map to a valid satellite number.
    """

    previous_wrms: Optional[float] = FieldInfo(alias="previousWrms", default=None)
    """
    The Weighted Root Mean Squared (RMS) of the differential correction from the
    previous overhead pass of the satellite. Provides a point of comparison for
    assessing changes in the quality of the OD solution between consecutive passes.
    """

    rejected_ob_ids: Optional[List[str]] = FieldInfo(alias="rejectedObIds", default=None)
    """Array of UDL data (observation) UUIDs that were rejected in this OD solution.

    See the associated rejectedObTyps array for the specific types of observations
    for the positionally corresponding UUIDs in this array (the two arrays must
    match in size).
    """

    rejected_ob_typs: Optional[List[str]] = FieldInfo(alias="rejectedObTyps", default=None)
    """Array of UDL observation types (e.g.

    DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution.
    See the associated rejectedObIds array for the records UUID(s), positionally
    corresponding to the record types in this array. The rejectedObTyps and
    rejectedObIds arrays must match in size.
    """

    rms_convergence_criteria: Optional[float] = FieldInfo(alias="rmsConvergenceCriteria", default=None)
    """
    OD parameter value for the Root Mean Square (RMS) convergence criteria to
    successfully close the OD solution.
    """

    sat_no: Optional[int] = FieldInfo(alias="satNo", default=None)
    """Satellite/Catalog number of the target on-orbit object."""

    sensor_ids: Optional[List[str]] = FieldInfo(alias="sensorIds", default=None)
    """
    Array of UDL UUIDs (idSensor) of the sensors that contributed observations in
    this OD solution.
    """

    source_dl: Optional[str] = FieldInfo(alias="sourceDL", default=None)
    """The source data library from which this record was received.

    This could be a remote or tactical UDL or another data library. If null, the
    record should be assumed to have originated from the primary Enterprise UDL.
    """

    time_span: Optional[float] = FieldInfo(alias="timeSpan", default=None)
    """The time span used for the OD of the object, in days."""

    wrms: Optional[float] = None
    """
    The Weighted Root Mean Squared (RMS) of the differential correction of the
    target object that produced this OD state. WRMS is a quality indicator of the OD
    update, with a value of 1.00 being optimal. WRMS applies to batch least squares
    (BLS) processes.
    """
