name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        uv pip install -e ".[dev]"

    - name: Run Black (code formatting check)
      run: |
        uv run black --check mw75_streamer/

    - name: Run Flake8 (linting)
      run: |
        uv run flake8 mw75_streamer/ --exclude=__pycache__

    - name: Run MyPy (type checking)
      run: |
        uv run mypy mw75_streamer/ --ignore-missing-imports --disable-error-code=unreachable

    - name: Test package imports on Linux (device modules should be None)
      run: |
        uv run python -c "
        import sys
        print(f'Testing imports on platform: {sys.platform}')
        
        import mw75_streamer
        print('✓ Basic import test passed')
        
        # Test that device classes are None on Linux
        print(f'MW75Device: {mw75_streamer.MW75Device}')
        print(f'BLEManager: {mw75_streamer.BLEManager}')  
        print(f'RFCOMMManager: {mw75_streamer.RFCOMMManager}')
        
        if sys.platform != 'darwin':
            assert mw75_streamer.MW75Device is None, 'MW75Device should be None on non-macOS'
            assert mw75_streamer.BLEManager is None, 'BLEManager should be None on non-macOS'
            assert mw75_streamer.RFCOMMManager is None, 'RFCOMMManager should be None on non-macOS'
            print('✓ Device classes properly None on Linux')
        
        # Test cross-platform modules
        import mw75_streamer.main
        import mw75_streamer.data  
        import mw75_streamer.testing
        import mw75_streamer.utils
        import mw75_streamer.panel
        import mw75_streamer.server
        print('✓ Cross-platform module imports passed')
        "

  macos-compatibility:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies and test macOS-specific functionality
      run: |
        uv venv
        uv pip install -e ".[dev]"
        uv run python -c "
        import sys
        print(f'Testing imports on platform: {sys.platform}')
        
        import mw75_streamer
        print('✓ Basic import test passed')
        
        # Test that device classes are available on macOS
        print(f'MW75Device: {mw75_streamer.MW75Device}')
        print(f'BLEManager: {mw75_streamer.BLEManager}')  
        print(f'RFCOMMManager: {mw75_streamer.RFCOMMManager}')
        
        if sys.platform == 'darwin':
            assert mw75_streamer.MW75Device is not None, 'MW75Device should be available on macOS'
            assert mw75_streamer.BLEManager is not None, 'BLEManager should be available on macOS'
            assert mw75_streamer.RFCOMMManager is not None, 'RFCOMMManager should be available on macOS'
            print('✓ Device classes properly available on macOS')
            
            # Test direct imports work
            import mw75_streamer.device.ble_manager
            import mw75_streamer.device.rfcomm_manager
            import mw75_streamer.device.mw75_device
            print('✓ Direct macOS device imports successful')
        "

    - name: Test CLI entry points
      run: |
        uv run mw75-streamer --help
        uv run mw75-test-server --help
        uv run python -m mw75_streamer.server --help

  build-and-publish:
    needs: [code-quality, macos-compatibility]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Build package
      run: |
        uv venv
        uv pip install build
        uv run python -m build
    
    - name: Check package
      run: |
        uv pip install twine
        uv run twine check dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1