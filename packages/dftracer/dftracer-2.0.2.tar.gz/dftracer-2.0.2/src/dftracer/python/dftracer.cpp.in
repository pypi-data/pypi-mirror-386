namespace py = pybind11;
namespace dftracer {

void initialize(const char *log_file, const char *data_dirs, int process_id) {
  auto conf =
      dftracer::Singleton<dftracer::ConfigurationManager>::get_instance();
  DFTRACER_LOG_DEBUG("py.initialize", "");
  dftracer::Singleton<dftracer::DFTracerCore>::get_instance(
      ProfilerStage::PROFILER_INIT, ProfileType::PROFILER_PY_APP, log_file,
      data_dirs, &process_id);
}

TimeResolution get_time() {
  DFTRACER_LOG_DEBUG("py.get_time", "");
  auto dftracer_inst =
      dftracer::Singleton<dftracer::DFTracerCore>::get_instance(
          ProfilerStage::PROFILER_OTHER, ProfileType::PROFILER_PY_APP);
  if (dftracer_inst != nullptr)
    return dftracer_inst->get_time();
  else
    DFTRACER_LOG_DEBUG("py.get_time dftracer not initialized", "");
  return 0;
}

void log_event(
    std::string name, std::string cat, TimeResolution start_time,
    TimeResolution duration,
    std::unordered_map<std::string, std::tuple<int, int>> &int_args,
    std::unordered_map<std::string, std::tuple<int, std::string>> &string_args,
    std::unordered_map<std::string, std::tuple<int, float>> &float_args) {
  DFTRACER_LOG_DEBUG("py.log_event", "");
  auto args = new Metadata();
  for (auto item : int_args)
    args->insert_or_assign(item.first, std::get<1>(item.second),
                           convert(std::get<0>(item.second)));
  for (auto item : string_args)
    args->insert_or_assign(item.first, std::get<1>(item.second),
                           convert(std::get<0>(item.second)));
  for (auto item : float_args)
    args->insert_or_assign(item.first, std::get<1>(item.second),
                           convert(std::get<0>(item.second)));
  auto dftracer_inst =
      dftracer::Singleton<dftracer::DFTracerCore>::get_instance(
          ProfilerStage::PROFILER_OTHER, ProfileType::PROFILER_PY_APP);
  if (dftracer_inst != nullptr)
    dftracer_inst->log(name.c_str(), cat.c_str(), start_time, duration, args);
  else
    DFTRACER_LOG_DEBUG("py.log_event dftracer not initialized", "");
}

void log_metadata_event(std::string key, std::string value) {
  DFTRACER_LOG_DEBUG("py.log_metadata_event", "");
  auto dftracer_inst =
      dftracer::Singleton<dftracer::DFTracerCore>::get_instance(
          ProfilerStage::PROFILER_OTHER, ProfileType::PROFILER_PY_APP);
  if (dftracer_inst != nullptr)
    dftracer_inst->log_metadata(key.c_str(), value.c_str());
  else
    DFTRACER_LOG_DEBUG("py.log_metadata_event dftracer not initialized", "");
}

void enter_event() {
  DFTRACER_LOG_DEBUG("py.enter_event", "");
  auto dftracer_inst =
      dftracer::Singleton<dftracer::DFTracerCore>::get_instance(
          ProfilerStage::PROFILER_OTHER, ProfileType::PROFILER_PY_APP);
  dftracer_inst->enter_event();
}

void exit_event() {
  DFTRACER_LOG_DEBUG("py.exit_event", "");
  auto dftracer_inst =
      dftracer::Singleton<dftracer::DFTracerCore>::get_instance(
          ProfilerStage::PROFILER_OTHER, ProfileType::PROFILER_PY_APP);
  dftracer_inst->exit_event();
}

void finalize() {
  DFTRACER_LOG_DEBUG("py.finalize", "");
  auto conf =
      dftracer::Singleton<dftracer::ConfigurationManager>::get_instance();
  // if (conf->init_type == ProfileInitType::PROFILER_INIT_FUNCTION) {
  auto dftracer_inst =
      dftracer::Singleton<dftracer::DFTracerCore>::get_instance(
          ProfilerStage::PROFILER_FINI, ProfileType::PROFILER_PY_APP);
  if (dftracer_inst != nullptr) {
    dftracer_inst->finalize();
  }
  //}
  DFTRACER_LOG_INFO("Finalized Py Binding", "");
}
}  // namespace dftracer