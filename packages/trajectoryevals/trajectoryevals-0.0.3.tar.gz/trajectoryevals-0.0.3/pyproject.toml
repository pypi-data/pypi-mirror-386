[project]
name = "trajectoryevals"
version = "0.0.3"
authors = [
    { name="Shrey Modi", email="shreycricket10@gmail.com" },

]
description = "Trajectory evals package"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
license = "Apache-2.0"
license-files = ["LICENSE.md"]
dependencies = [
    "litellm>=1.61.15",
    "python-dotenv",
    "requests",
    "pandas",
    "openai",
    "together",
    "anthropic",
    "nest-asyncio",
    "langchain-huggingface",
    "langchain-openai",
    "langchain-anthropic",
    "langchain-core",
    "google-genai",
    "boto3",
    "matplotlib",
    "python-slugify>=8.0.4",
    "datamodel-code-generator>=0.31.1",
    "opentelemetry-api>=1.34.1",
    "opentelemetry-sdk>=1.34.1",
    "opentelemetry-exporter-otlp-proto-http>=1.34.1",
    "opentelemetry-instrumentation>=0.55b1",
    "build>=1.2.2.post1",
    "twine>=6.2.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/trajectory"]
include = [
    "/src/trajectory",
    "/src/trajectory/**/*.py",
]

[tool.hatch.build.targets.wheel.package-dir]
"trajectory" = "src/trajectory"

[dependency-groups]
dev = [
    "chromadb>=1.0.12",
    "langchain-community>=0.3.24",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.1",
    "tavily-python>=0.7.5",
    "langgraph>=0.4.3",
    "pre-commit>=4.2.0",
    "types-requests>=2.32.4.20250611",
    "ruff>=0.14.1",
]

[tool.hatch.build]
directory = "dist"
artifacts = ["src/trajectory/**/*.py"]
exclude = [
    "src/e2etests/*",
    "src/tests/*",
    "src/demo/*"
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
    "src/e2etests",
    "src/tests",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11+
target-version = "py311"

[tool.ruff.lint]
# Focus on basic linting and formatting - minimal rules
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings  
    "F",     # pyflakes
    "I",     # isort (import sorting)
    "UP",    # pyupgrade (modernize syntax)
    "Q",     # flake8-quotes
    "RUF",   # Ruff-specific rules
]

ignore = [
    "E501",  # line too long, handled by formatter
    "E402",  # module level import not at top of file
    "E401",  # multiple imports on one line
    "W291",  # trailing whitespace (handled by formatter)
    "W292",  # no newline at end of file (handled by formatter)
    "W293",  # blank line contains whitespace (handled by formatter)
    "F401",  # imported but unused (too noisy for development)
    "F811",  # redefined while unused (too noisy for development)
    "F841",  # unused variable (too noisy for development)
    "UP007", # use `X | Y` for union types (not available in Python 3.10)
    "UP045", # non-pep604-annotation-optional
    "RUF001", # ambiguous unicode character
    "RUF002", # docstring contains ambiguous unicode character
    "RUF003", # comment contains ambiguous unicode character
    "RUF005", # collection-literal-concatenation
    "RUF012", # mutable-class-default
    "RUF013", # implicit-optional
    "RUF022", # unsorted-dunder-all
    "RUF059", # unused-unpacked-variable
    "RUF006", # asyncio-dangling-task
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false
