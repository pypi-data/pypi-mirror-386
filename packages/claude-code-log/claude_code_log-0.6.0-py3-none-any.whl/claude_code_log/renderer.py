#!/usr/bin/env python3
"""Render Claude transcript data to HTML format."""

import json
from pathlib import Path
from typing import List, Optional, Union, Dict, Any, cast, TYPE_CHECKING

if TYPE_CHECKING:
    from .cache import CacheManager
from datetime import datetime
import html
import mistune
from jinja2 import Environment, FileSystemLoader, select_autoescape

from .models import (
    AssistantTranscriptEntry,
    TranscriptEntry,
    SummaryTranscriptEntry,
    SystemTranscriptEntry,
    ContentItem,
    TextContent,
    ToolResultContent,
    ToolUseContent,
    ThinkingContent,
    ImageContent,
)
from .parser import extract_text_content
from .utils import (
    is_command_message,
    is_local_command_output,
    is_bash_input,
    is_bash_output,
    should_skip_message,
    should_use_as_session_starter,
    create_session_preview,
)
from .cache import get_library_version


def get_project_display_name(
    project_dir_name: str, working_directories: Optional[List[str]] = None
) -> str:
    """Get the display name for a project based on working directories.

    Args:
        project_dir_name: The Claude project directory name (e.g., "-Users-dain-workspace-claude-code-log")
        working_directories: List of working directories from cache data

    Returns:
        The project display name (e.g., "claude-code-log")
    """
    if working_directories:
        # Convert to Path objects with their original indices for tracking recency
        paths_with_indices = [(Path(wd), i) for i, wd in enumerate(working_directories)]

        # Sort by: 1) path depth (fewer parts = less nested), 2) recency (lower index = more recent)
        # This gives us the least nested path, with ties broken by recency
        best_path, _ = min(paths_with_indices, key=lambda p: (len(p[0].parts), p[1]))
        return best_path.name
    else:
        # Fall back to converting project directory name
        display_name = project_dir_name
        if display_name.startswith("-"):
            display_name = display_name[1:].replace("-", "/")
        return display_name


def check_html_version(html_file_path: Path) -> Optional[str]:
    """Check the version of an existing HTML file from its comment.

    Returns:
        The version string if found, None if no version comment or file doesn't exist.
    """
    if not html_file_path.exists():
        return None

    try:
        with open(html_file_path, "r", encoding="utf-8") as f:
            # Read only the first few lines to find the version comment
            for _ in range(5):  # Check first 5 lines
                line = f.readline()
                if not line:
                    break
                # Look for comment like: <!-- Generated by claude-code-log v0.3.4 -->
                if "<!-- Generated by claude-code-log v" in line:
                    # Extract version between 'v' and ' -->'
                    start = line.find("v") + 1
                    end = line.find(" -->")
                    if start > 0 and end > start:
                        return line[start:end]
    except (IOError, UnicodeDecodeError):
        pass

    return None


def is_html_outdated(html_file_path: Path) -> bool:
    """Check if an HTML file is outdated based on its version comment.

    Returns:
        True if the file should be regenerated (missing version, different version, or file doesn't exist).
        False if the file is current.
    """
    html_version = check_html_version(html_file_path)
    current_version = get_library_version()

    # If no version found or different version, it's outdated
    return html_version != current_version


def format_timestamp(timestamp_str: str | None) -> str:
    """Format ISO timestamp for display, converting to UTC."""
    if timestamp_str is None:
        return ""
    try:
        dt = datetime.fromisoformat(timestamp_str.replace("Z", "+00:00"))
        # Convert to UTC if timezone-aware
        if dt.tzinfo is not None:
            utc_timetuple = dt.utctimetuple()
            dt = datetime(
                utc_timetuple.tm_year,
                utc_timetuple.tm_mon,
                utc_timetuple.tm_mday,
                utc_timetuple.tm_hour,
                utc_timetuple.tm_min,
                utc_timetuple.tm_sec,
            )
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except (ValueError, AttributeError):
        return timestamp_str


def escape_html(text: str) -> str:
    """Escape HTML special characters in text."""
    return html.escape(text)


def create_collapsible_details(
    summary: str, content: str, css_classes: str = ""
) -> str:
    """Create a collapsible details element with consistent styling and preview functionality."""
    class_attr = ' class="collapsible-details"'
    wrapper_classes = f"tool-content{' ' + css_classes if css_classes else ''}"

    if len(content) <= 200:
        return f"""
        <div class="{wrapper_classes}">
            {summary}
            <div class="details-content">
                {content}
            </div>
        </div>
        """

    # Get first ~200 characters, break at word boundaries
    preview_text = content[:200] + "..."

    return f"""
    <div class="{wrapper_classes}">
        <details{class_attr}>
            <summary>
                {summary}
                <div class="preview-content">{preview_text}</div>
            </summary>
            <div class="details-content">
                {content}
            </div>
        </details>
    </div>
    """


def render_markdown(text: str) -> str:
    """Convert markdown text to HTML using mistune."""
    # Configure mistune with GitHub-flavored markdown features
    renderer = mistune.create_markdown(
        plugins=[
            "strikethrough",
            "footnotes",
            "table",
            "url",
            "task_lists",
            "def_list",
        ],
        escape=False,  # Don't escape HTML since we want to render markdown properly
        hard_wrap=True,  # Line break for newlines (checklists in Assistant messages)
    )
    return str(renderer(text))


def extract_command_info(text_content: str) -> tuple[str, str, str]:
    """Extract command info from system message with command tags."""
    import re

    # Extract command name
    command_name_match = re.search(
        r"<command-name>([^<]+)</command-name>", text_content
    )
    command_name = (
        command_name_match.group(1).strip() if command_name_match else "system"
    )

    # Extract command args
    command_args_match = re.search(
        r"<command-args>([^<]*)</command-args>", text_content
    )
    command_args = command_args_match.group(1).strip() if command_args_match else ""

    # Extract command contents
    command_contents_match = re.search(
        r"<command-contents>(.+?)</command-contents>", text_content, re.DOTALL
    )
    command_contents: str = ""
    if command_contents_match:
        contents_text = command_contents_match.group(1).strip()
        # Try to parse as JSON and extract the text field
        try:
            contents_json: Any = json.loads(contents_text)
            if isinstance(contents_json, dict) and "text" in contents_json:
                text_dict = cast(Dict[str, Any], contents_json)
                text_value = text_dict["text"]
                command_contents = str(text_value)
            else:
                command_contents = contents_text
        except json.JSONDecodeError:
            command_contents = contents_text

    return command_name, command_args, command_contents


def format_todowrite_content(tool_use: ToolUseContent) -> str:
    """Format TodoWrite tool use content as an actual todo list with checkboxes."""
    # Parse todos from input
    todos_data = tool_use.input.get("todos", [])
    if not todos_data:
        return """
        <div class="todo-content">
            <p><em>No todos found</em></p>
        </div>
        """

    # Status emojis
    status_emojis = {"pending": "‚è≥", "in_progress": "üîÑ", "completed": "‚úÖ"}

    # Build todo list HTML
    todo_items: List[str] = []
    for todo in todos_data:
        try:
            todo_id = escape_html(str(todo.get("id", "")))
            content = escape_html(str(todo.get("content", "")))
            status = todo.get("status", "pending")
            priority = todo.get("priority", "medium")
            status_emoji = status_emojis.get(status, "‚è≥")

            # Determine checkbox state
            checked = "checked" if status == "completed" else ""
            disabled = "disabled" if status == "completed" else ""

            # CSS class for styling
            item_class = f"todo-item {status} {priority}"

            todo_items.append(f"""
                <div class="{item_class}">
                    <input type="checkbox" {checked} {disabled} readonly>
                    <span class="todo-status">{status_emoji}</span>
                    <span class="todo-content">{content}</span>
                    <span class="todo-id">#{todo_id}</span>
                </div>
            """)
        except AttributeError:
            todo_items.append(f"""
                <div class="todo-item pending medium">
                    <input type="checkbox" readonly>
                    <span class="todo-status">‚è≥</span>
                    <span class="todo-content">{str(todo)}</span>
                </div>
            """)

    todos_html = "".join(todo_items)

    return f"""
    <div class="todo-list">
        {todos_html}
    </div>
    """


def format_tool_use_content(tool_use: ToolUseContent) -> str:
    """Format tool use content as HTML."""
    # Special handling for TodoWrite
    if tool_use.name == "TodoWrite":
        return format_todowrite_content(tool_use)

    # Format the input parameters
    try:
        formatted_input = json.dumps(tool_use.input, indent=2)
        escaped_input = escape_html(formatted_input)
    except (TypeError, ValueError):
        escaped_input = escape_html(str(tool_use.input))

    # For simple content, show directly without collapsible wrapper
    if len(escaped_input) <= 200:
        return f"<pre>{escaped_input}</pre>"

    # For longer content, use collapsible details but no extra wrapper
    preview_text = escaped_input[:200] + "..."
    return f"""
    <details class="collapsible-details">
        <summary>
            <div class="preview-content"><pre>{preview_text}</pre></div>
        </summary>
        <div class="details-content">
            <pre>{escaped_input}</pre>
        </div>
    </details>
    """


def format_tool_result_content(tool_result: ToolResultContent) -> str:
    """Format tool result content as HTML."""
    # Handle both string and structured content
    if isinstance(tool_result.content, str):
        raw_content = tool_result.content
    else:
        # Content is a list of structured items, extract text
        content_parts: List[str] = []
        for item in tool_result.content:
            if isinstance(item, dict) and item.get("type") == "text":  # type: ignore
                text_value = item.get("text")
                if isinstance(text_value, str):
                    content_parts.append(text_value)
        raw_content = "\n".join(content_parts)

    # Check if this looks like Bash tool output and process ANSI codes
    # Bash tool results often contain ANSI escape sequences and terminal output
    if _looks_like_bash_output(raw_content):
        escaped_content = _convert_ansi_to_html(raw_content)
    else:
        escaped_content = escape_html(raw_content)

    # For simple content, show directly without collapsible wrapper
    if len(escaped_content) <= 200:
        return f"<pre>{escaped_content}</pre>"

    # For longer content, use collapsible details but no extra wrapper
    preview_text = escaped_content[:200] + "..."
    return f"""
    <details class="collapsible-details">
        <summary>
            <div class="preview-content"><pre>{preview_text}</pre></div>
        </summary>
        <div class="details-content">
            <pre>{escaped_content}</pre>
        </div>
    </details>
    """


def _looks_like_bash_output(content: str) -> bool:
    """Check if content looks like it's from a Bash tool based on common patterns."""
    if not content:
        return False

    # Check for ANSI escape sequences
    if "\x1b[" in content:
        return True

    # Check for common bash/terminal patterns
    bash_indicators = [
        "$ ",  # Shell prompt
        "‚ùØ ",  # Modern shell prompt
        "> ",  # Shell continuation
        "\n+ ",  # Bash -x output
        "bash: ",  # Bash error messages
        "/bin/bash",  # Bash path
        "command not found",  # Common bash error
        "Permission denied",  # Common bash error
        "No such file or directory",  # Common bash error
    ]

    # Check for file path patterns that suggest command output
    import re

    if re.search(r"/[a-zA-Z0-9_-]+(/[a-zA-Z0-9_.-]+)*", content):  # Unix-style paths
        return True

    # Check for common command output patterns
    if any(indicator in content for indicator in bash_indicators):
        return True

    return False


def format_thinking_content(thinking: ThinkingContent) -> str:
    """Format thinking content as HTML."""
    escaped_thinking = escape_html(thinking.thinking.strip())

    # For simple content, show directly without collapsible wrapper
    if len(escaped_thinking) <= 200:
        return f'<div class="thinking-text">{escaped_thinking}</div>'

    # For longer content, use collapsible details but no extra wrapper
    preview_text = escaped_thinking[:200] + "..."
    return f"""
    <details class="collapsible-details">
        <summary>
            <div class="preview-content"><div class="thinking-text">{preview_text}</div></div>
        </summary>
        <div class="details-content">
            <div class="thinking-text">{escaped_thinking}</div>
        </div>
    </details>
    """


def format_image_content(image: ImageContent) -> str:
    """Format image content as HTML."""
    # Create a data URL from the base64 image data
    data_url = f"data:{image.source.media_type};base64,{image.source.data}"

    return f'<img src="{data_url}" alt="Uploaded image" style="max-width: 100%; height: auto; border: 1px solid #ddd; border-radius: 4px; margin: 10px 0;" />'


def render_message_content(
    content: Union[str, List[ContentItem]], message_type: str
) -> str:
    """Render message content with proper tool use and tool result formatting."""
    if isinstance(content, str):
        if message_type == "user":
            # User messages are shown as-is in preformatted blocks
            escaped_text = escape_html(content)
            return "<pre>" + escaped_text + "</pre>"
        else:
            # Assistant messages get markdown rendering
            return render_markdown(content)

    # content is a list of ContentItem objects
    rendered_parts: List[str] = []

    for item in content:
        # Handle both custom and Anthropic types
        item_type = getattr(item, "type", None)

        if type(item) is TextContent or (
            hasattr(item, "type") and hasattr(item, "text") and item_type == "text"
        ):
            # Handle both TextContent and Anthropic TextBlock
            text_value = getattr(item, "text", str(item))
            if message_type == "user":
                # User messages are shown as-is in preformatted blocks
                escaped_text = escape_html(text_value)
                rendered_parts.append("<pre>" + escaped_text + "</pre>")
            else:
                # Assistant messages get markdown rendering
                rendered_parts.append(render_markdown(text_value))
        elif type(item) is ToolUseContent or (
            hasattr(item, "type") and item_type == "tool_use"
        ):
            # Handle both ToolUseContent and Anthropic ToolUseBlock
            # Convert Anthropic type to our format if necessary
            if not isinstance(item, ToolUseContent):
                # Create a ToolUseContent from Anthropic ToolUseBlock
                tool_use_item = ToolUseContent(
                    type="tool_use",
                    id=getattr(item, "id", ""),
                    name=getattr(item, "name", ""),
                    input=getattr(item, "input", {}),
                )
            else:
                tool_use_item = item
            rendered_parts.append(format_tool_use_content(tool_use_item))  # type: ignore
        elif type(item) is ToolResultContent or (
            hasattr(item, "type") and item_type == "tool_result"
        ):
            # Handle both ToolResultContent and Anthropic types
            if not isinstance(item, ToolResultContent):
                # Convert from Anthropic type if needed
                tool_result_item = ToolResultContent(
                    type="tool_result",
                    tool_use_id=getattr(item, "tool_use_id", ""),
                    content=getattr(item, "content", ""),
                    is_error=getattr(item, "is_error", False),
                )
            else:
                tool_result_item = item
            rendered_parts.append(format_tool_result_content(tool_result_item))  # type: ignore
        elif type(item) is ThinkingContent or (
            hasattr(item, "type") and item_type == "thinking"
        ):
            # Handle both ThinkingContent and Anthropic ThinkingBlock
            if not isinstance(item, ThinkingContent):
                # Convert from Anthropic type if needed
                thinking_item = ThinkingContent(
                    type="thinking", thinking=getattr(item, "thinking", str(item))
                )
            else:
                thinking_item = item
            rendered_parts.append(format_thinking_content(thinking_item))  # type: ignore
        elif type(item) is ImageContent:
            rendered_parts.append(format_image_content(item))  # type: ignore

    return "\n".join(rendered_parts)


def _get_template_environment() -> Environment:
    """Get Jinja2 template environment."""
    templates_dir = Path(__file__).parent / "templates"
    return Environment(
        loader=FileSystemLoader(templates_dir),
        autoescape=select_autoescape(["html", "xml"]),
    )


class TemplateMessage:
    """Structured message data for template rendering."""

    def __init__(
        self,
        message_type: str,
        content_html: str,
        formatted_timestamp: str,
        css_class: str,
        raw_timestamp: Optional[str] = None,
        session_summary: Optional[str] = None,
        session_id: Optional[str] = None,
        is_session_header: bool = False,
        token_usage: Optional[str] = None,
    ):
        self.type = message_type
        self.content_html = content_html
        self.formatted_timestamp = formatted_timestamp
        self.css_class = css_class
        self.raw_timestamp = raw_timestamp
        self.display_type = message_type.title()
        self.session_summary = session_summary
        self.session_id = session_id
        self.is_session_header = is_session_header
        self.session_subtitle: Optional[str] = None
        self.token_usage = token_usage


class TemplateProject:
    """Structured project data for template rendering."""

    def __init__(self, project_data: Dict[str, Any]):
        self.name = project_data["name"]
        self.html_file = project_data["html_file"]
        self.jsonl_count = project_data["jsonl_count"]
        self.message_count = project_data["message_count"]
        self.last_modified = project_data["last_modified"]
        self.total_input_tokens = project_data.get("total_input_tokens", 0)
        self.total_output_tokens = project_data.get("total_output_tokens", 0)
        self.total_cache_creation_tokens = project_data.get(
            "total_cache_creation_tokens", 0
        )
        self.total_cache_read_tokens = project_data.get("total_cache_read_tokens", 0)
        self.latest_timestamp = project_data.get("latest_timestamp", "")
        self.earliest_timestamp = project_data.get("earliest_timestamp", "")
        self.sessions = project_data.get("sessions", [])
        self.working_directories = project_data.get("working_directories", [])

        # Format display name using shared logic
        self.display_name = get_project_display_name(
            self.name, self.working_directories
        )

        # Format last modified date
        last_modified_dt = datetime.fromtimestamp(self.last_modified)
        self.formatted_date = last_modified_dt.strftime("%Y-%m-%d %H:%M:%S")

        # Format interaction time range
        if self.earliest_timestamp and self.latest_timestamp:
            if self.earliest_timestamp == self.latest_timestamp:
                # Single interaction
                self.formatted_time_range = format_timestamp(self.latest_timestamp)
            else:
                # Time range
                earliest_formatted = format_timestamp(self.earliest_timestamp)
                latest_formatted = format_timestamp(self.latest_timestamp)
                self.formatted_time_range = (
                    f"{earliest_formatted} to {latest_formatted}"
                )
        elif self.latest_timestamp:
            self.formatted_time_range = format_timestamp(self.latest_timestamp)
        else:
            self.formatted_time_range = ""

        # Format last interaction timestamp (kept for backward compatibility)
        if self.latest_timestamp:
            self.formatted_last_interaction = format_timestamp(self.latest_timestamp)
        else:
            self.formatted_last_interaction = ""

        # Format token usage
        self.token_summary = ""
        if self.total_input_tokens > 0 or self.total_output_tokens > 0:
            token_parts: List[str] = []
            if self.total_input_tokens > 0:
                token_parts.append(f"Input: {self.total_input_tokens}")
            if self.total_output_tokens > 0:
                token_parts.append(f"Output: {self.total_output_tokens}")
            if self.total_cache_creation_tokens > 0:
                token_parts.append(
                    f"Cache Creation: {self.total_cache_creation_tokens}"
                )
            if self.total_cache_read_tokens > 0:
                token_parts.append(f"Cache Read: {self.total_cache_read_tokens}")
            self.token_summary = " | ".join(token_parts)


class TemplateSummary:
    """Summary statistics for template rendering."""

    def __init__(self, project_summaries: List[Dict[str, Any]]):
        self.total_projects = len(project_summaries)
        self.total_jsonl = sum(p["jsonl_count"] for p in project_summaries)
        self.total_messages = sum(p["message_count"] for p in project_summaries)

        # Calculate aggregated token usage
        self.total_input_tokens = sum(
            p.get("total_input_tokens", 0) for p in project_summaries
        )
        self.total_output_tokens = sum(
            p.get("total_output_tokens", 0) for p in project_summaries
        )
        self.total_cache_creation_tokens = sum(
            p.get("total_cache_creation_tokens", 0) for p in project_summaries
        )
        self.total_cache_read_tokens = sum(
            p.get("total_cache_read_tokens", 0) for p in project_summaries
        )

        # Find the most recent and earliest interaction timestamps across all projects
        self.latest_interaction = ""
        self.earliest_interaction = ""
        for project in project_summaries:
            # Check latest timestamp
            latest_timestamp = project.get("latest_timestamp", "")
            if latest_timestamp and (
                not self.latest_interaction
                or latest_timestamp > self.latest_interaction
            ):
                self.latest_interaction = latest_timestamp

            # Check earliest timestamp
            earliest_timestamp = project.get("earliest_timestamp", "")
            if earliest_timestamp and (
                not self.earliest_interaction
                or earliest_timestamp < self.earliest_interaction
            ):
                self.earliest_interaction = earliest_timestamp

        # Format the latest interaction timestamp
        if self.latest_interaction:
            self.formatted_latest_interaction = format_timestamp(
                self.latest_interaction
            )
        else:
            self.formatted_latest_interaction = ""

        # Format the time range
        if self.earliest_interaction and self.latest_interaction:
            if self.earliest_interaction == self.latest_interaction:
                # Single interaction
                self.formatted_time_range = format_timestamp(self.latest_interaction)
            else:
                # Time range
                earliest_formatted = format_timestamp(self.earliest_interaction)
                latest_formatted = format_timestamp(self.latest_interaction)
                self.formatted_time_range = (
                    f"{earliest_formatted} to {latest_formatted}"
                )
        else:
            self.formatted_time_range = ""

        # Format token usage summary
        self.token_summary = ""
        if self.total_input_tokens > 0 or self.total_output_tokens > 0:
            token_parts: List[str] = []
            if self.total_input_tokens > 0:
                token_parts.append(f"Input: {self.total_input_tokens}")
            if self.total_output_tokens > 0:
                token_parts.append(f"Output: {self.total_output_tokens}")
            if self.total_cache_creation_tokens > 0:
                token_parts.append(
                    f"Cache Creation: {self.total_cache_creation_tokens}"
                )
            if self.total_cache_read_tokens > 0:
                token_parts.append(f"Cache Read: {self.total_cache_read_tokens}")
            self.token_summary = " | ".join(token_parts)


def _convert_ansi_to_html(text: str) -> str:
    """Convert ANSI escape codes to HTML spans with CSS classes.

    Supports:
    - Colors (30-37, 90-97 for foreground; 40-47, 100-107 for background)
    - RGB colors (38;2;r;g;b for foreground; 48;2;r;g;b for background)
    - Bold (1), Dim (2), Italic (3), Underline (4)
    - Reset (0, 39, 49, 22, 23, 24)
    - Strips cursor movement and screen manipulation codes
    """
    import re

    # First, strip cursor movement and screen manipulation codes
    # Common patterns: [1A (cursor up), [2K (erase line), [?25l (hide cursor), etc.
    cursor_patterns = [
        r"\x1b\[[0-9]*[ABCD]",  # Cursor movement (up, down, forward, back)
        r"\x1b\[[0-9]*[EF]",  # Cursor next/previous line
        r"\x1b\[[0-9]*[GH]",  # Cursor horizontal/home position
        r"\x1b\[[0-9;]*[Hf]",  # Cursor position
        r"\x1b\[[0-9]*[JK]",  # Erase display/line
        r"\x1b\[[0-9]*[ST]",  # Scroll up/down
        r"\x1b\[\?[0-9]*[hl]",  # Private mode set/reset (show/hide cursor, etc.)
        r"\x1b\[[0-9]*[PXYZ@]",  # Insert/delete operations
        r"\x1b\[=[0-9]*[A-Za-z]",  # Alternate character set
        r"\x1b\][0-9];[^\x07]*\x07",  # Operating System Command (OSC)
        r"\x1b\][0-9];[^\x1b]*\x1b\\",  # OSC with string terminator
    ]

    # Strip all cursor movement and screen manipulation codes
    for pattern in cursor_patterns:
        text = re.sub(pattern, "", text)

    # Also strip any remaining unhandled escape sequences that aren't color codes
    # This catches any we might have missed, but preserves \x1b[...m color codes
    text = re.sub(r"\x1b\[(?![0-9;]*m)[0-9;]*[A-Za-z]", "", text)

    result: List[str] = []
    segments: List[Dict[str, Any]] = []

    # First pass: split text into segments with their styles
    last_end = 0
    current_fg = None
    current_bg = None
    current_bold = False
    current_dim = False
    current_italic = False
    current_underline = False
    current_rgb_fg = None
    current_rgb_bg = None

    for match in re.finditer(r"\x1b\[([0-9;]+)m", text):
        # Add text before this escape code
        if match.start() > last_end:
            segments.append(
                {
                    "text": text[last_end : match.start()],
                    "fg": current_fg,
                    "bg": current_bg,
                    "bold": current_bold,
                    "dim": current_dim,
                    "italic": current_italic,
                    "underline": current_underline,
                    "rgb_fg": current_rgb_fg,
                    "rgb_bg": current_rgb_bg,
                }
            )

        # Process escape codes
        codes = match.group(1).split(";")
        i = 0
        while i < len(codes):
            code = codes[i]

            # Reset codes
            if code == "0":
                current_fg = None
                current_bg = None
                current_bold = False
                current_dim = False
                current_italic = False
                current_underline = False
                current_rgb_fg = None
                current_rgb_bg = None
            elif code == "39":
                current_fg = None
                current_rgb_fg = None
            elif code == "49":
                current_bg = None
                current_rgb_bg = None
            elif code == "22":
                current_bold = False
                current_dim = False
            elif code == "23":
                current_italic = False
            elif code == "24":
                current_underline = False

            # Style codes
            elif code == "1":
                current_bold = True
            elif code == "2":
                current_dim = True
            elif code == "3":
                current_italic = True
            elif code == "4":
                current_underline = True

            # Standard foreground colors
            elif code in ["30", "31", "32", "33", "34", "35", "36", "37"]:
                color_map = {
                    "30": "black",
                    "31": "red",
                    "32": "green",
                    "33": "yellow",
                    "34": "blue",
                    "35": "magenta",
                    "36": "cyan",
                    "37": "white",
                }
                current_fg = f"ansi-{color_map[code]}"
                current_rgb_fg = None

            # Standard background colors
            elif code in ["40", "41", "42", "43", "44", "45", "46", "47"]:
                color_map = {
                    "40": "black",
                    "41": "red",
                    "42": "green",
                    "43": "yellow",
                    "44": "blue",
                    "45": "magenta",
                    "46": "cyan",
                    "47": "white",
                }
                current_bg = f"ansi-bg-{color_map[code]}"
                current_rgb_bg = None

            # Bright foreground colors
            elif code in ["90", "91", "92", "93", "94", "95", "96", "97"]:
                color_map = {
                    "90": "bright-black",
                    "91": "bright-red",
                    "92": "bright-green",
                    "93": "bright-yellow",
                    "94": "bright-blue",
                    "95": "bright-magenta",
                    "96": "bright-cyan",
                    "97": "bright-white",
                }
                current_fg = f"ansi-{color_map[code]}"
                current_rgb_fg = None

            # Bright background colors
            elif code in ["100", "101", "102", "103", "104", "105", "106", "107"]:
                color_map = {
                    "100": "bright-black",
                    "101": "bright-red",
                    "102": "bright-green",
                    "103": "bright-yellow",
                    "104": "bright-blue",
                    "105": "bright-magenta",
                    "106": "bright-cyan",
                    "107": "bright-white",
                }
                current_bg = f"ansi-bg-{color_map[code]}"
                current_rgb_bg = None

            # RGB foreground color
            elif code == "38" and i + 1 < len(codes) and codes[i + 1] == "2":
                if i + 4 < len(codes):
                    r, g, b = codes[i + 2], codes[i + 3], codes[i + 4]
                    current_rgb_fg = f"color: rgb({r}, {g}, {b})"
                    current_fg = None
                    i += 4

            # RGB background color
            elif code == "48" and i + 1 < len(codes) and codes[i + 1] == "2":
                if i + 4 < len(codes):
                    r, g, b = codes[i + 2], codes[i + 3], codes[i + 4]
                    current_rgb_bg = f"background-color: rgb({r}, {g}, {b})"
                    current_bg = None
                    i += 4

            i += 1

        last_end = match.end()

    # Add remaining text
    if last_end < len(text):
        segments.append(
            {
                "text": text[last_end:],
                "fg": current_fg,
                "bg": current_bg,
                "bold": current_bold,
                "dim": current_dim,
                "italic": current_italic,
                "underline": current_underline,
                "rgb_fg": current_rgb_fg,
                "rgb_bg": current_rgb_bg,
            }
        )

    # Second pass: build HTML
    for segment in segments:
        if not segment["text"]:
            continue

        classes: List[str] = []
        styles: List[str] = []

        if segment["fg"]:
            classes.append(segment["fg"])
        if segment["bg"]:
            classes.append(segment["bg"])
        if segment["bold"]:
            classes.append("ansi-bold")
        if segment["dim"]:
            classes.append("ansi-dim")
        if segment["italic"]:
            classes.append("ansi-italic")
        if segment["underline"]:
            classes.append("ansi-underline")
        if segment["rgb_fg"]:
            styles.append(segment["rgb_fg"])
        if segment["rgb_bg"]:
            styles.append(segment["rgb_bg"])

        escaped_text = escape_html(segment["text"])

        if classes or styles:
            attrs: List[str] = []
            if classes:
                attrs.append(f'class="{" ".join(classes)}"')
            if styles:
                attrs.append(f'style="{"; ".join(styles)}"')
            result.append(f"<span {' '.join(attrs)}>{escaped_text}</span>")
        else:
            result.append(escaped_text)

    return "".join(result)


# def _process_summary_message(message: SummaryTranscriptEntry) -> tuple[str, str, str]:
#     """Process a summary message and return (css_class, content_html, message_type)."""
#     css_class = "summary"
#     content_html = f"<strong>Summary:</strong> {escape_html(str(message.summary))}"
#     message_type = "summary"
#     return css_class, content_html, message_type


def _process_command_message(text_content: str) -> tuple[str, str, str]:
    """Process a command message and return (css_class, content_html, message_type)."""
    css_class = "system"
    command_name, command_args, command_contents = extract_command_info(text_content)
    escaped_command_name = escape_html(command_name)
    escaped_command_args = escape_html(command_args)

    # Format the command contents with proper line breaks
    formatted_contents = command_contents.replace("\\n", "\n")
    escaped_command_contents = escape_html(formatted_contents)

    # Build the content HTML
    content_parts: List[str] = [f"<strong>Command:</strong> {escaped_command_name}"]
    if command_args:
        content_parts.append(f"<strong>Args:</strong> {escaped_command_args}")
    if command_contents:
        details_html = create_collapsible_details("Content", escaped_command_contents)
        content_parts.append(details_html)

    content_html = "<br>".join(content_parts)
    message_type = "system"
    return css_class, content_html, message_type


def _process_local_command_output(text_content: str) -> tuple[str, str, str]:
    """Process local command output and return (css_class, content_html, message_type)."""
    import re

    css_class = "system command-output"

    stdout_match = re.search(
        r"<local-command-stdout>(.*?)</local-command-stdout>",
        text_content,
        re.DOTALL,
    )
    if stdout_match:
        stdout_content = stdout_match.group(1).strip()
        # Convert ANSI codes to HTML for colored display
        html_content = _convert_ansi_to_html(stdout_content)
        # Use <pre> to preserve formatting and line breaks
        content_html = (
            f"<strong>Command Output:</strong><br>"
            f"<pre class='command-output-content'>{html_content}</pre>"
        )
    else:
        content_html = escape_html(text_content)

    message_type = "system"
    return css_class, content_html, message_type


def _process_bash_input(text_content: str) -> tuple[str, str, str]:
    """Process bash input command and return (css_class, content_html, message_type)."""
    import re

    css_class = "bash-input"

    bash_match = re.search(
        r"<bash-input>(.*?)</bash-input>",
        text_content,
        re.DOTALL,
    )
    if bash_match:
        bash_command = bash_match.group(1).strip()
        escaped_command = escape_html(bash_command)
        content_html = (
            f"<span class='bash-prompt'>‚ùØ</span> "
            f"<code class='bash-command'>{escaped_command}</code>"
        )
    else:
        content_html = escape_html(text_content)

    message_type = "bash"
    return css_class, content_html, message_type


def _process_bash_output(text_content: str) -> tuple[str, str, str]:
    """Process bash output and return (css_class, content_html, message_type)."""
    import re

    css_class = "bash-output"

    stdout_match = re.search(
        r"<bash-stdout>(.*?)</bash-stdout>",
        text_content,
        re.DOTALL,
    )
    stderr_match = re.search(
        r"<bash-stderr>(.*?)</bash-stderr>",
        text_content,
        re.DOTALL,
    )

    output_parts: List[str] = []
    if stdout_match:
        stdout_content = stdout_match.group(1).strip()
        if stdout_content:
            escaped_stdout = _convert_ansi_to_html(stdout_content)
            output_parts.append(f"<pre class='bash-stdout'>{escaped_stdout}</pre>")

    if stderr_match:
        stderr_content = stderr_match.group(1).strip()
        if stderr_content:
            escaped_stderr = _convert_ansi_to_html(stderr_content)
            output_parts.append(f"<pre class='bash-stderr'>{escaped_stderr}</pre>")

    if output_parts:
        content_html = "".join(output_parts)
    else:
        # Empty output
        content_html = (
            "<pre class='bash-stdout'><span class='bash-empty'>(no output)</span></pre>"
        )

    message_type = "bash"
    return css_class, content_html, message_type


def _process_regular_message(
    text_only_content: Union[str, List[ContentItem]],
    message_type: str,
    is_sidechain: bool,
) -> tuple[str, str, str]:
    """Process regular message and return (css_class, content_html, message_type)."""
    css_class = f"{message_type}"
    content_html = render_message_content(text_only_content, message_type)

    if is_sidechain:
        css_class = f"{message_type} sidechain"
        # Update message type for display
        message_type = (
            "üìù Sub-assistant prompt" if message_type == "user" else "üîó Sub-assistant"
        )

    return css_class, content_html, message_type


def _get_combined_transcript_link(cache_manager: "CacheManager") -> Optional[str]:
    """Get link to combined transcript if available."""
    try:
        project_cache = cache_manager.get_cached_project_data()
        if project_cache and project_cache.sessions:
            return "combined_transcripts.html"
        return None
    except Exception:
        return None


def generate_session_html(
    messages: List[TranscriptEntry],
    session_id: str,
    title: Optional[str] = None,
    cache_manager: Optional["CacheManager"] = None,
) -> str:
    """Generate HTML for a single session using Jinja2 templates."""
    # Filter messages for this session only
    session_messages = [
        msg
        for msg in messages
        if hasattr(msg, "sessionId") and getattr(msg, "sessionId") == session_id
    ]

    # Get combined transcript link if cache manager is available
    combined_link = None
    if cache_manager is not None:
        combined_link = _get_combined_transcript_link(cache_manager)

    if not session_messages:
        return generate_html(
            [],
            title or f"Session {session_id[:8]}",
            combined_transcript_link=combined_link,
        )

    # Use the existing generate_html function but with filtered messages and combined link
    return generate_html(
        session_messages,
        title or f"Session {session_id[:8]}",
        combined_transcript_link=combined_link,
    )


def generate_html(
    messages: List[TranscriptEntry],
    title: Optional[str] = None,
    combined_transcript_link: Optional[str] = None,
) -> str:
    """Generate HTML from transcript messages using Jinja2 templates."""
    if not title:
        title = "Claude Transcript"

    # Pre-process to find and attach session summaries
    session_summaries: Dict[str, str] = {}
    uuid_to_session: Dict[str, str] = {}
    uuid_to_session_backup: Dict[str, str] = {}

    # Build mapping from message UUID to session ID
    for message in messages:
        if hasattr(message, "uuid") and hasattr(message, "sessionId"):
            message_uuid = getattr(message, "uuid", "")
            session_id = getattr(message, "sessionId", "")
            if message_uuid and session_id:
                # There is often duplication, in that case we want to prioritise the assistant
                # message because summaries are generated from Claude's (last) success message
                if type(message) is AssistantTranscriptEntry:
                    uuid_to_session[message_uuid] = session_id
                else:
                    uuid_to_session_backup[message_uuid] = session_id

    # Map summaries to sessions via leafUuid -> message UUID -> session ID
    for message in messages:
        if isinstance(message, SummaryTranscriptEntry):
            leaf_uuid = message.leafUuid
            if leaf_uuid in uuid_to_session:
                session_summaries[uuid_to_session[leaf_uuid]] = message.summary
            elif (
                leaf_uuid in uuid_to_session_backup
                and uuid_to_session_backup[leaf_uuid] not in session_summaries
            ):
                session_summaries[uuid_to_session_backup[leaf_uuid]] = message.summary

    # Attach summaries to messages
    for message in messages:
        if hasattr(message, "sessionId"):
            session_id = getattr(message, "sessionId", "")
            if session_id in session_summaries:
                setattr(message, "_session_summary", session_summaries[session_id])

    # Group messages by session and collect session info for navigation
    sessions: Dict[str, Dict[str, Any]] = {}
    session_order: List[str] = []
    seen_sessions: set[str] = set()

    # Track requestIds to avoid double-counting token usage
    seen_request_ids: set[str] = set()
    # Track which messages should show token usage (first occurrence of each requestId)
    show_tokens_for_message: set[str] = set()

    # Process messages into template-friendly format
    template_messages: List[TemplateMessage] = []

    for message in messages:
        message_type = message.type

        # Skip summary messages - they should already be attached to their sessions
        if isinstance(message, SummaryTranscriptEntry):
            continue

        # Handle system messages separately
        if isinstance(message, SystemTranscriptEntry):
            session_id = getattr(message, "sessionId", "unknown")
            timestamp = getattr(message, "timestamp", "")
            formatted_timestamp = format_timestamp(timestamp) if timestamp else ""

            # Create level-specific styling and icons
            level = getattr(message, "level", "info")
            level_icon = {"warning": "‚ö†Ô∏è", "error": "‚ùå", "info": "‚ÑπÔ∏è"}.get(level, "‚ÑπÔ∏è")
            level_css = f"system system-{level}"

            escaped_content = escape_html(message.content)
            content_html = f"<strong>{level_icon} System {level.title()}:</strong> {escaped_content}"

            system_template_message = TemplateMessage(
                message_type=f"System {level.title()}",
                content_html=content_html,
                formatted_timestamp=formatted_timestamp,
                css_class=level_css,
                raw_timestamp=timestamp,
                session_id=session_id,
            )
            template_messages.append(system_template_message)
            continue

        # Extract message content first to check for duplicates
        # Must be UserTranscriptEntry or AssistantTranscriptEntry
        message_content = message.message.content  # type: ignore
        text_content = extract_text_content(message_content)

        # Separate tool/thinking/image content from text content
        tool_items: List[ContentItem] = []
        text_only_content: Union[str, List[ContentItem]] = []

        if isinstance(message_content, list):
            text_only_items: List[ContentItem] = []
            for item in message_content:
                # Check for both custom types and Anthropic types
                item_type = getattr(item, "type", None)
                is_tool_item = isinstance(
                    item,
                    (ToolUseContent, ToolResultContent, ThinkingContent, ImageContent),
                ) or item_type in ("tool_use", "tool_result", "thinking", "image")

                if is_tool_item:
                    tool_items.append(item)
                else:
                    text_only_items.append(item)
            text_only_content = text_only_items
        else:
            # Single string content
            text_only_content = message_content

        # Skip if no meaningful content
        if not text_content.strip() and not tool_items:
            continue

        # Skip messages that should be filtered out
        if should_skip_message(text_content):
            continue

        # Check message types for special handling
        is_command = is_command_message(text_content)
        is_local_output = is_local_command_output(text_content)
        is_bash_cmd = is_bash_input(text_content)
        is_bash_result = is_bash_output(text_content)

        # Check if we're in a new session
        session_id = getattr(message, "sessionId", "unknown")
        session_summary = getattr(message, "_session_summary", None)

        # Track sessions for navigation and add session header if new
        if session_id not in sessions:
            # Get the session summary for this session (may be None)
            current_session_summary = getattr(message, "_session_summary", None)

            # Get first user message content for preview
            first_user_message = ""
            if (
                message_type == "user"
                and hasattr(message, "message")
                and should_use_as_session_starter(text_content)
            ):
                content = extract_text_content(message.message.content)
                first_user_message = create_session_preview(content)

            sessions[session_id] = {
                "id": session_id,
                "summary": current_session_summary,
                "first_timestamp": getattr(message, "timestamp", ""),
                "last_timestamp": getattr(message, "timestamp", ""),
                "message_count": 0,
                "first_user_message": first_user_message,
                "total_input_tokens": 0,
                "total_output_tokens": 0,
                "total_cache_creation_tokens": 0,
                "total_cache_read_tokens": 0,
            }
            session_order.append(session_id)

            # Add session header message
            if session_id not in seen_sessions:
                seen_sessions.add(session_id)
                # Create a meaningful session title
                session_title = (
                    f"{current_session_summary} ‚Ä¢ {session_id[:8]}"
                    if current_session_summary
                    else session_id[:8]
                )

                session_header = TemplateMessage(
                    message_type="session_header",
                    content_html=session_title,
                    formatted_timestamp="",
                    css_class="session-header",
                    raw_timestamp=None,
                    session_summary=current_session_summary,
                    session_id=session_id,
                    is_session_header=True,
                )
                template_messages.append(session_header)

        # Update first user message if this is a user message and we don't have one yet
        elif message_type == "user" and not sessions[session_id]["first_user_message"]:
            if hasattr(message, "message"):
                first_user_content = extract_text_content(message.message.content)
                if should_use_as_session_starter(first_user_content):
                    sessions[session_id]["first_user_message"] = create_session_preview(
                        first_user_content
                    )

        sessions[session_id]["message_count"] += 1

        # Update last timestamp for this session
        current_timestamp = getattr(message, "timestamp", "")
        if current_timestamp:
            sessions[session_id]["last_timestamp"] = current_timestamp

        # Extract and accumulate token usage for assistant messages
        # Only count tokens for the first message with each requestId to avoid duplicates
        if message_type == "assistant" and hasattr(message, "message"):
            assistant_message = getattr(message, "message")
            request_id = getattr(message, "requestId", None)
            message_uuid = getattr(message, "uuid", "")

            if (
                hasattr(assistant_message, "usage")
                and assistant_message.usage
                and request_id
                and request_id not in seen_request_ids
            ):
                # Mark this requestId as seen to avoid double-counting
                seen_request_ids.add(request_id)
                # Mark this specific message UUID as one that should show token usage
                show_tokens_for_message.add(message_uuid)

                usage = assistant_message.usage
                sessions[session_id]["total_input_tokens"] += usage.input_tokens
                sessions[session_id]["total_output_tokens"] += usage.output_tokens
                if usage.cache_creation_input_tokens:
                    sessions[session_id]["total_cache_creation_tokens"] += (
                        usage.cache_creation_input_tokens
                    )
                if usage.cache_read_input_tokens:
                    sessions[session_id]["total_cache_read_tokens"] += (
                        usage.cache_read_input_tokens
                    )

        # Get timestamp (only for non-summary messages)
        timestamp = (
            getattr(message, "timestamp", "") if hasattr(message, "timestamp") else ""
        )
        formatted_timestamp = format_timestamp(timestamp) if timestamp else ""

        # Extract token usage for assistant messages
        # Only show token usage for the first message with each requestId to avoid duplicates
        token_usage_str: Optional[str] = None
        if message_type == "assistant" and hasattr(message, "message"):
            assistant_message = getattr(message, "message")
            message_uuid = getattr(message, "uuid", "")

            if (
                hasattr(assistant_message, "usage")
                and assistant_message.usage
                and message_uuid in show_tokens_for_message
            ):
                # Only show token usage for messages marked as first occurrence of requestId
                usage = assistant_message.usage
                token_parts = [
                    f"Input: {usage.input_tokens}",
                    f"Output: {usage.output_tokens}",
                ]
                if usage.cache_creation_input_tokens:
                    token_parts.append(
                        f"Cache Creation: {usage.cache_creation_input_tokens}"
                    )
                if usage.cache_read_input_tokens:
                    token_parts.append(f"Cache Read: {usage.cache_read_input_tokens}")
                token_usage_str = " | ".join(token_parts)

        # Determine CSS class and content based on message type and duplicate status
        if is_command:
            css_class, content_html, message_type = _process_command_message(
                text_content
            )
        elif is_local_output:
            css_class, content_html, message_type = _process_local_command_output(
                text_content
            )
        elif is_bash_cmd:
            css_class, content_html, message_type = _process_bash_input(text_content)
        elif is_bash_result:
            css_class, content_html, message_type = _process_bash_output(text_content)
        else:
            css_class, content_html, message_type = _process_regular_message(
                text_only_content, message_type, getattr(message, "isSidechain", False)
            )

        # Create main message (if it has text content)
        if text_only_content and (
            isinstance(text_only_content, str)
            and text_only_content.strip()
            or isinstance(text_only_content, list)
            and text_only_content
        ):
            template_message = TemplateMessage(
                message_type=message_type,
                content_html=content_html,
                formatted_timestamp=formatted_timestamp,
                css_class=css_class,
                raw_timestamp=timestamp,
                session_summary=session_summary,
                session_id=session_id,
                token_usage=token_usage_str,
            )
            template_messages.append(template_message)

        # Create separate messages for each tool/thinking/image item
        for tool_item in tool_items:
            tool_timestamp = getattr(message, "timestamp", "")
            tool_formatted_timestamp = (
                format_timestamp(tool_timestamp) if tool_timestamp else ""
            )

            # Handle both custom types and Anthropic types
            item_type = getattr(tool_item, "type", None)

            if isinstance(tool_item, ToolUseContent) or item_type == "tool_use":
                # Convert Anthropic type to our format if necessary
                if not isinstance(tool_item, ToolUseContent):
                    tool_use_converted = ToolUseContent(
                        type="tool_use",
                        id=getattr(tool_item, "id", ""),
                        name=getattr(tool_item, "name", ""),
                        input=getattr(tool_item, "input", {}),
                    )
                else:
                    tool_use_converted = tool_item

                tool_content_html = format_tool_use_content(tool_use_converted)
                escaped_name = escape_html(tool_use_converted.name)
                escaped_id = escape_html(tool_use_converted.id)
                if tool_use_converted.name == "TodoWrite":
                    tool_message_type = f"üìù Todo List (ID: {escaped_id})"
                else:
                    tool_message_type = f"Tool Use: {escaped_name} (ID: {escaped_id})"
                tool_css_class = "tool_use"
            elif isinstance(tool_item, ToolResultContent) or item_type == "tool_result":
                # Convert Anthropic type to our format if necessary
                if not isinstance(tool_item, ToolResultContent):
                    tool_result_converted = ToolResultContent(
                        type="tool_result",
                        tool_use_id=getattr(tool_item, "tool_use_id", ""),
                        content=getattr(tool_item, "content", ""),
                        is_error=getattr(tool_item, "is_error", False),
                    )
                else:
                    tool_result_converted = tool_item

                tool_content_html = format_tool_result_content(tool_result_converted)
                escaped_id = escape_html(tool_result_converted.tool_use_id)
                error_indicator = (
                    " (üö® Error)" if tool_result_converted.is_error else ""
                )
                tool_message_type = f"Tool Result{error_indicator}: {escaped_id}"
                tool_css_class = "tool_result"
            elif isinstance(tool_item, ThinkingContent) or item_type == "thinking":
                # Convert Anthropic type to our format if necessary
                if not isinstance(tool_item, ThinkingContent):
                    thinking_converted = ThinkingContent(
                        type="thinking",
                        thinking=getattr(tool_item, "thinking", str(tool_item)),
                    )
                else:
                    thinking_converted = tool_item

                tool_content_html = format_thinking_content(thinking_converted)
                tool_message_type = "Thinking"
                tool_css_class = "thinking"
            elif isinstance(tool_item, ImageContent) or item_type == "image":
                # Convert Anthropic type to our format if necessary
                if not isinstance(tool_item, ImageContent):
                    # For now, skip Anthropic image types - we'll handle when we encounter them
                    continue
                else:
                    tool_content_html = format_image_content(tool_item)
                tool_message_type = "Image"
                tool_css_class = "image"
            else:
                # Handle unknown content types
                tool_content_html = (
                    f"<p>Unknown content type: {escape_html(str(type(tool_item)))}</p>"
                )
                tool_message_type = "Unknown Content"
                tool_css_class = "unknown"

            # Preserve sidechain context for tool/thinking/image content within sidechain messages
            if getattr(message, "isSidechain", False):
                tool_css_class += " sidechain"

            tool_template_message = TemplateMessage(
                message_type=tool_message_type,
                content_html=tool_content_html,
                formatted_timestamp=tool_formatted_timestamp,
                css_class=tool_css_class,
                raw_timestamp=tool_timestamp,
                session_summary=session_summary,
                session_id=session_id,
            )
            template_messages.append(tool_template_message)

    # Prepare session navigation data
    session_nav: List[Dict[str, Any]] = []
    for session_id in session_order:
        session_info = sessions[session_id]

        # Format timestamp range
        first_ts = session_info["first_timestamp"]
        last_ts = session_info["last_timestamp"]
        timestamp_range = ""
        if first_ts and last_ts:
            if first_ts == last_ts:
                timestamp_range = format_timestamp(first_ts)
            else:
                timestamp_range = (
                    f"{format_timestamp(first_ts)} - {format_timestamp(last_ts)}"
                )
        elif first_ts:
            timestamp_range = format_timestamp(first_ts)

        # Format token usage summary
        token_summary = ""
        total_input = session_info["total_input_tokens"]
        total_output = session_info["total_output_tokens"]
        total_cache_creation = session_info["total_cache_creation_tokens"]
        total_cache_read = session_info["total_cache_read_tokens"]

        if total_input > 0 or total_output > 0:
            token_parts: List[str] = []
            if total_input > 0:
                token_parts.append(f"Input: {total_input}")
            if total_output > 0:
                token_parts.append(f"Output: {total_output}")
            if total_cache_creation > 0:
                token_parts.append(f"Cache Creation: {total_cache_creation}")
            if total_cache_read > 0:
                token_parts.append(f"Cache Read: {total_cache_read}")
            token_summary = "Token usage ‚Äì " + " | ".join(token_parts)

        session_nav.append(
            {
                "id": session_id,
                "summary": session_info["summary"],
                "timestamp_range": timestamp_range,
                "first_timestamp": first_ts,
                "last_timestamp": last_ts,
                "message_count": session_info["message_count"],
                "first_user_message": session_info["first_user_message"]
                if session_info["first_user_message"] != ""
                else "[No user message found in session.]",
                "token_summary": token_summary,
            }
        )

    # Render template
    env = _get_template_environment()
    template = env.get_template("transcript.html")
    return str(
        template.render(
            title=title,
            messages=template_messages,
            sessions=session_nav,
            combined_transcript_link=combined_transcript_link,
            library_version=get_library_version(),
        )
    )


def generate_projects_index_html(
    project_summaries: List[Dict[str, Any]],
    from_date: Optional[str] = None,
    to_date: Optional[str] = None,
) -> str:
    """Generate an index HTML page listing all projects using Jinja2 templates."""
    # Try to get a better title from working directories in projects
    title = "Claude Code Projects"
    if project_summaries:
        # Collect all working directories from all projects
        all_working_dirs: set[str] = set()
        for project in project_summaries:
            working_dirs = project.get("working_directories", [])
            if working_dirs:
                all_working_dirs.update(working_dirs)

        # Use the common parent directory if available
        if all_working_dirs:
            # Find the most common parent directory
            from pathlib import Path

            working_paths = [Path(wd) for wd in all_working_dirs]

            if len(working_paths) == 1:
                # Single working directory - use its name
                title = f"Claude Code Projects - {working_paths[0].name}"
            else:
                # Multiple working directories - try to find common parent
                try:
                    # Find common parent
                    common_parts: list[str] = []
                    if working_paths:
                        # Get parts of first path
                        first_parts = working_paths[0].parts
                        for i, part in enumerate(first_parts):
                            # Check if this part exists in all paths
                            if all(
                                len(p.parts) > i and p.parts[i] == part
                                for p in working_paths
                            ):
                                common_parts.append(part)
                            else:
                                break

                        if len(common_parts) > 1:  # More than just root "/"
                            common_path = Path(*common_parts)
                            title = f"Claude Code Projects - {common_path.name}"
                except Exception:
                    # Fall back to default title if path analysis fails
                    pass
    if from_date or to_date:
        date_range_parts: List[str] = []
        if from_date:
            date_range_parts.append(f"from {from_date}")
        if to_date:
            date_range_parts.append(f"to {to_date}")
        date_range_str = " ".join(date_range_parts)
        title += f" ({date_range_str})"

    # Sort projects by last modified (most recent first)
    sorted_projects = sorted(
        project_summaries, key=lambda p: p["last_modified"], reverse=True
    )

    # Convert to template-friendly format
    template_projects = [TemplateProject(project) for project in sorted_projects]
    template_summary = TemplateSummary(project_summaries)

    # Render template
    env = _get_template_environment()
    template = env.get_template("index.html")
    return str(
        template.render(
            title=title,
            projects=template_projects,
            summary=template_summary,
            library_version=get_library_version(),
        )
    )
