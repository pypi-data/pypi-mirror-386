name: Schedule Test Status
permissions:
  contents: read
  pull-requests: write
on:
  schedule:
    - cron: '0 4 */4 * *'  # UTC 4 == +8 12:00
  workflow_dispatch:

jobs:
  test-suite:
    runs-on: macos-latest
    env:
      PYTHONIOENCODING: utf-8
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        include:
          - crawler_name: "kaobei"
            params: "-w 1 -k 海贼王 -i 1 -i2 -1 -sp 50021"
          - crawler_name: "wnacg"
            params: "-w 3 -k ミモネル -i 2 -sp 50051"
          - crawler_name: "mangabz"
            params: "-w 5 -k 海贼王 -i 1 -i2 -1 -sp 50081"

    steps:
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Install ComicGUISpider CLI
        run: |
          uv tool install comicguispider
          uv tool update-shell
      - name: Install coreutils (for gtimeout)
        run: brew install coreutils
      - name: Run tests and Generate report
        env:
          CRAWLER_NAME: ${{ matrix.crawler_name }}
        run: |
          export LANG=C.UTF-8
          TODAY=$(date +%m-%d)
          STDOUT_LOG="${CRAWLER_NAME}_stdout.log"
          STDERR_LOG="${CRAWLER_NAME}_stderr.log"
          if [[ "$CRAWLER_NAME" == "hitomi" ]]; then TIMEOUT_SECONDS=120; else TIMEOUT_SECONDS=60; fi
          CMD="cgs-cli ${{ matrix.params }} -l INFO -dt"
          gtimeout "$TIMEOUT_SECONDS" bash -lc "$CMD" > "$STDOUT_LOG" 2> "$STDERR_LOG" || true
          ITEM_COUNT=$(grep -oE "'image/downloaded': *[0-9]+" "$STDERR_LOG" | tail -n1 | grep -oE '[0-9]+')
          [[ -z "$ITEM_COUNT" ]] && ITEM_COUNT=0
          STATUS=fail; COLOR=critical
          if [[ $ITEM_COUNT -gt 0 ]]; then STATUS=pass; COLOR=success; fi
          ARTIFACT_PATH="badges"
          mkdir -p "$ARTIFACT_PATH"
          cat > "$ARTIFACT_PATH/status_$CRAWLER_NAME.json" <<EOF
          {"schemaVersion":1,"label":"$TODAY","message":"$STATUS","color":"$COLOR"}
          EOF
          cp "$STDERR_LOG" "$ARTIFACT_PATH/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: badges-${{ matrix.crawler_name }}
          path: badges/
  
  deploy-job:
    needs: test-suite
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install wrangler
        run: |
          npm install -g wrangler
      - name: Merge artifacts
        run: |
          mkdir -p /tmp/merged-badges
          sudo find /tmp/ -type f -name 'status_*.json' -exec cp {} /tmp/merged-badges/ \;
          
          set +e
          for crawler in "ehentai" "jm" "hitomi"; do
            curl -s "https://cgs-status-badges.pages.dev/status_${crawler}.json" -o "/tmp/merged-badges/status_${crawler}.json" || true
          done
          
          echo "Generating aggr_status.json..."
          node -e '
            const fs = require("fs");
            const path = require("path");
            const badgesDir = "/tmp/merged-badges";
            const aggrData = {};
            const files = fs.readdirSync(badgesDir)
              .filter(file => file.startsWith("status_") && file.endsWith(".json"));
            files.forEach(file => {
              const crawlerName = file.replace("status_", "").replace(".json", "");
              const content = JSON.parse(fs.readFileSync(path.join(badgesDir, file), "utf8"));
              aggrData[crawlerName] = content;
            });
            fs.writeFileSync(
              path.join(badgesDir, "aggr_status.json"),
              JSON.stringify(aggrData, null, 2)
            );
          '
      - name: Deploy to CloudFlare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          wrangler pages deploy /tmp/merged-badges/ --project-name=cgs-status-badges --branch=main
