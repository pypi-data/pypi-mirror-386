{"input": "[GLS]\n[GL] 1\nforall n : N, n = add n Z\n[HYPS] 1\n\n[THMS] 1\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]induction n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = add Z Z\n[HYPS] 1\n\n[THMS] 1\n[THM]Z : N\n[THM]add : N -> N -> N\n[THM]Nat.add : nat -> nat -> nat\n[THM]andb_true_intro : forall b1 b2  bool, b1 = true /\\ b2 = true -> (b1 && b2)%bool = true\n[THM]andb_prop : forall a b  bool,\n[DFNS] 1\n[DFN]add : N -> N\n[GL] 2\nNXT n = add (NXT n) Z\n[HYPS] 2\n[HYP]IHn : n = add n Z\n[HYP]n : N\n[THMS] 2\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = Z\n[HYPS] 1\n\n[THMS] 1\n[THM]Z : N\n[THM]andb_true_intro : forall b1 b2  bool, b1 = true /\\ b2 = true -> (b1 && b2)%bool = true\n[THM]andb_prop : forall a b  bool, (a && b)%bool = true -> a = true /\\ b = true\n[THM]eq_tr\n[DFNS] 1\n[DFN]Z : N\n[GL] 2\nNXT n = add (NXT n) Z\n[HYPS] 2\n[HYP]IHn : n = add n Z\n[HYP]n : N\n[THMS] 2\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 2\n[\n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT n = add (NXT n) Z\n[HYPS] 1\n[HYP]IHn : n = add n Z\n[HYP]n : N\n[THMS] 1\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT n = NXT (add n Z)\n[HYPS] 1\n[HYP]IHn : n = add n Z\n[HYP]n : N\n[THMS] 1\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]f_equal.\n[END]"}
{"input": "[GLS]\n[GL] 1\nn = add n Z\n[HYPS] 1\n[HYP]IHn : n = add n Z\n[HYP]n : N\n[THMS] 1\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall m n : N, NXT (add m n) = add m (NXT n)\n[HYPS] 1\n\n[THMS] 1\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) ->\n  (forall m n  N, lq m n -> P m n -> P m (NXT n)) ->\n  forall n n0  N, lq n n0 -> P n n0\n[THM]add_zero : forall n  N, n = add n\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]intros m n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT (add m n) = add m (NXT n)\n[HYPS] 1\n[HYP]m,n : N\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[THM]max_r : forall n m  nat, n <= m -> Nat.max n m = m\n[THM]eq_add_S : forall n m  nat, S n = S\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]induction m.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT (add Z n) = add Z (NXT n)\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, \n[DFNS] 1\n[DFN]add : N -> N\n[GL] 2\nNXT (add (NXT m) n) = add (NXT m) (NXT n)\n[HYPS] 2\n[HYP]IHm : NXT (add m n) = add m (NXT n)\n[HYP]m,n : N\n[THMS] 2\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N ->\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT n = NXT n\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 1\n[DFN]NXT : N -> N\n[GL] 2\nNXT (add (NXT m) n) = add (NXT m) (NXT n)\n[HYPS] 2\n[HYP]IHm : NXT (add m n) = add m (NXT n)\n[HYP]m,n : N\n[THMS] 2\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (\n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT (add (NXT m) n) = add (NXT m) (NXT n)\n[HYPS] 1\n[HYP]IHm : NXT (add m n) = add m (NXT n)\n[HYP]m,n : N\n[THMS] 1\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT (NXT (add m n)) = NXT (add m (NXT n))\n[HYPS] 1\n[HYP]IHm : NXT (add m n) = add m (NXT n)\n[HYP]m,n : N\n[THMS] 1\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]f_equal.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT (add m n) = add m (NXT n)\n[HYPS] 1\n[HYP]IHm : NXT (add m n) = add m (NXT n)\n[HYP]m,n : N\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[THM]max_r : forall n m  nat, n <= m -> Nat.max n m = m\n[THM]eq_add_S : forall n m  nat, S n = S\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall m n : N, add m n = add n m\n[HYPS] 1\n\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) ->\n  (forall m n  N, lq m n -> P m n -> P m (NXT n)) ->\n  forall n n0 \n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]intros m n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd m n = add n m\n[HYPS] 1\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[THM]max_r : forall n m  nat, n <= m\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]induction m.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd Z n = add n Z\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, \n[DFNS] 1\n[DFN]add : N -> N\n[GL] 2\nadd (NXT m) n = add n (NXT m)\n[HYPS] 2\n[HYP]IHm : add m n = add n m\n[HYP]m,n : N\n[THMS] 2\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[T\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nn = add n Z\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, \n[DFNS] 1\n[DFN]add : N -> N\n[GL] 2\nadd (NXT m) n = add n (NXT m)\n[HYPS] 2\n[HYP]IHm : add m n = add n m\n[HYP]m,n : N\n[THMS] 2\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[THM]max_r : forall n m  nat, n <= m -> Nat.max n\n[STPS]", "label": "[STP]apply add_zero.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (NXT m) n = add n (NXT m)\n[HYPS] 1\n[HYP]IHm : add m n = add n m\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[THM]max_r : forall n m  nat, n <= m\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT (add m n) = add n (NXT m)\n[HYPS] 1\n[HYP]IHm : add m n = add n m\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[THM]max_r : forall n m  nat, n <= m\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]rewrite IHm.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT (add n m) = add n (NXT m)\n[HYPS] 1\n[HYP]IHm : add m n = add n m\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[THM]max_r : forall n m  nat, n <= m\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]apply add_nxt.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall a b c : N, add (add a b) c = add a (add b c)\n[HYPS] 1\n\n[THMS] 1\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add : N -> N -> N\n[THM]add_zero : forall n  N, n = add n Z\n[THM]Nat.add : nat -\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]intros a b c.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (add a b) c = add a (add b c)\n[HYPS] 1\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_zero : forall n  N, n = add n Z\n[THM]add : N -> N -> N\n[THM]Nat.add : nat -\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]induction a.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (add Z b) c = add Z (add b c)\n[HYPS] 1\n[HYP]b,c : N\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add : N -> N -> N\n[THM]Nat.add : nat -\n[DFNS] 1\n[DFN]add : N -> N\n[GL] 2\nadd (add (NXT a) b) c = add (NXT a) (add b c)\n[HYPS] 2\n[HYP]IHa : add (add a b) c = add a (add b c)\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd b c = add b c\n[HYPS] 1\n[HYP]b,c : N\n[THMS] 1\n[THM]CompOpp_involutive : forall c  comparison, CompOpp (CompOpp c) = c\n[THM]CompOpp_inj : forall c c'  comparison, CompOpp c = CompOpp c' -> c = c'\n[THM]CompOpp_iff : forall c c'  comparison, \n[DFNS] 1\n[DFN]add : N -> N\n[GL] 2\nadd (add (NXT a) b) c = add (NXT a) (add b c)\n[HYPS] 2\n[HYP]IHa : add (add a b) c = add a (add b c)\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_zero \n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (add (NXT a) b) c = add (NXT a) (add b c)\n[HYPS] 1\n[HYP]IHa : add (add a b) c = add a (add b c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_zero : forall n  N, n = add n Z\n[THM]add : N -> N -> N\n[THM]Nat.add : nat -\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT (add (add a b) c) = NXT (add a (add b c))\n[HYPS] 1\n[HYP]IHa : add (add a b) c = add a (add b c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_zero : forall n  N, n = add n Z\n[THM]add : N -> N -> N\n[THM]Nat.add : nat -\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]f_equal.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (add a b) c = add a (add b c)\n[HYPS] 1\n[HYP]IHa : add (add a b) c = add a (add b c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_zero : forall n  N, n = add n Z\n[THM]add : N -> N -> N\n[THM]Nat.add : nat -\n[DFNS] 1\n[DFN]add : N -> N\n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall n : N, mult Z n = Z\n[HYPS] 1\n\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, \n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]induction n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult Z Z = Z\n[HYPS] 1\n\n[THMS] 1\n[THM]Z : N\n[THM]add_zero : forall n  N, n = add n Z\n[THM]mult : N -> N -> N\n[THM]andb_true_intro : forall b1 b2  bool, b1 = true /\\ b2 = true -> (b1 && b2)%bool = true\n[THM]andb_prop : forall a\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nmult Z (NXT n) = Z\n[HYPS] 2\n[HYP]IHn : mult Z n = Z\n[HYP]n : N\n[THMS] 2\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[T\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = Z\n[HYPS] 1\n\n[THMS] 1\n[THM]Z : N\n[THM]add_zero : forall n  N, n = add n Z\n[THM]andb_true_intro : forall b1 b2  bool, b1 = true /\\ b2 = true -> (b1 && b2)%bool = true\n[THM]andb_prop : forall a b  bool, (a && b)%bool \n[DFNS] 1\n[DFN]Z : N\n[GL] 2\nmult Z (NXT n) = Z\n[HYPS] 2\n[HYP]IHn : mult Z n = Z\n[HYP]n : N\n[THMS] 2\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 2\n[DF\n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult Z (NXT n) = Z\n[HYPS] 1\n[HYP]IHn : mult Z n = Z\n[HYP]n : N\n[THMS] 1\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[TH\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult Z n) Z = Z\n[HYPS] 1\n[HYP]IHn : mult Z n = Z\n[HYP]n : N\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]Z : N\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (fo\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite IHn.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd Z Z = Z\n[HYPS] 1\n[HYP]IHn : mult Z n = Z\n[HYP]n : N\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]Z : N\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (fo\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = Z\n[HYPS] 1\n[HYP]IHn : mult Z n = Z\n[HYP]n : N\n[THMS] 1\n[THM]Z : N\n[THM]add_zero : forall n  N, n = add n Z\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (fo\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall n : N, mult n (NXT Z) = n\n[HYPS] 1\n\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]intros.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult n (NXT Z) = n\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nn = n\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]add_zero : forall n  N, n = add n Z\n[THM]plus_n_O : forall n  nat, n = n + 0\n[THM]plus_O_n : forall n  nat, 0 + n = n\n[THM]eq_add_S : forall n m  nat, S n = S m -> n = m\n[THM]mult_n_Sm : f\n[DFNS] 1\n[DFN]N : Set\n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall m n : N, mult (NXT m) n = add (mult m n) n\n[HYPS] 1\n\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) ->\n  (forall m n  N, \n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]intros m.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall n : N, mult (NXT m) n = add (mult m n) n\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]lq_ind : forall P  N -> N -> Pr\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]induction n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult (NXT m) Z = add (mult m Z) Z\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_zero : forall n  N, n = add n Z\n[\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nmult (NXT m) (NXT n) = add (mult m (NXT n)) (NXT n)\n[HYPS] 2\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 2\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_one : forall n  N, mult n (NXT Z) =\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = Z\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]add_zero : forall n  N, n = add n Z\n[THM]Z : N\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (foral\n[DFNS] 1\n[DFN]Z : N\n[DFN]N\n[GL] 2\nmult (NXT m) (NXT n) = add (mult m (NXT n)) (NXT n)\n[HYPS] 2\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 2\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_comm : forall m \n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult (NXT m) (NXT n) = add (mult m (NXT n)) (NXT n)\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]N_rect : forall P  N -> Type,\n \n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult (NXT m) n) (NXT m) = add (add (mult m n) m) (NXT n)\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]min_r : forall n m  nat, m <= n\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite IHn.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (add (mult m n) n) (NXT m) = add (add (mult m n) m) (NXT n)\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_zero : forall n  N, n = add\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite add_assoc.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult m n) (add n (NXT m)) = add (add (mult m n) m) (NXT n)\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_zero : forall n  N, n = add\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite add_assoc.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult m n) (add n (NXT m)) = add (mult m n) (add m (NXT n))\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_zero : forall n  N, n = add\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]f_equal.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd n (NXT m) = add m (NXT n)\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite add_comm with (m:=n).\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (NXT m) n = add m (NXT n)\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite add_comm with (m:=m).\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (NXT m) n = add (NXT n) m\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nNXT (add m n) = NXT (add n m)\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]f_equal.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd m n = add n m\n[HYPS] 1\n[HYP]IHn : mult (NXT m) n = add (mult m n) n\n[HYP]m,n : N\n[THMS] 1\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_zero : forall n  N, n = add n Z\n[THM]min_r : forall n m  nat, m <= n -> Nat\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]apply add_comm.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall m n : N, mult m n = mult n m\n[HYPS] 1\n\n[THMS] 1\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) ->\n  (forall m n\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]intros m.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall n : N, mult m n = mult n m\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]lq_ind : forall P  N -> N -> Pro\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]induction n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult m Z = mult Z m\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]mult : N -> N -> N\n[THM]min_r : \n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nmult m (NXT n) = mult (NXT n) m\n[HYPS] 2\n[HYP]IHn : mult m n = mult n m\n[HYP]m,n : N\n[THMS] 2\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_nxt : forall m n  N, NXT (add m\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = mult Z m\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_zero : forall n  N, n = add \n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nmult m (NXT n) = mult (NXT n) m\n[HYPS] 2\n[HYP]IHn : mult m n = mult n m\n[HYP]m,n : N\n[THMS] 2\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_nxt : forall m n  N, NXT (add m n) = a\n[STPS]", "label": "[STP]rewrite mult_zero.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = Z\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]add_zero : forall n  N, n = add n Z\n[THM]Z : N\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (foral\n[DFNS] 1\n[DFN]Z : N\n[DFN]N\n[GL] 2\nmult m (NXT n) = mult (NXT n) m\n[HYPS] 2\n[HYP]IHn : mult m n = mult n m\n[HYP]m,n : N\n[THMS] 2\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (N\n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult m (NXT n) = mult (NXT n) m\n[HYPS] 1\n[HYP]IHn : mult m n = mult n m\n[HYP]m,n : N\n[THMS] 1\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_zero : for\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult m n) m = mult (NXT n) m\n[HYPS] 1\n[HYP]IHn : mult m n = mult n m\n[HYP]m,n : N\n[THMS] 1\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]mult_one : for\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite mult_nxt.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult m n) m = add (mult n m) m\n[HYPS] 1\n[HYP]IHn : mult m n = mult n m\n[HYP]m,n : N\n[THMS] 1\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]min_r : forall\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite IHn.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult n m) m = add (mult n m) m\n[HYPS] 1\n[HYP]IHn : mult m n = mult n m\n[HYP]m,n : N\n[THMS] 1\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]min_r : forall\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall a b c : N, mult a (add b c) = add (mult a b) (mult a c)\n[HYPS] 1\n\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_comm : forall m n  N, mult m n = mult n m\n[THM]and\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]intros a b c.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult a (add b c) = add (mult a b) (mult a c)\n[HYPS] 1\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_comm : forall m n  N, mult m n = mult n m\n[THM]and\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]induction b.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult a (add Z c) = add (mult a Z) (mult a c)\n[HYPS] 1\n[HYP]a,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_one : f\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nmult a (add (NXT b) c) = add (mult a (NXT b)) (mult a c)\n[HYPS] 2\n[HYP]IHb : mult a (add b c) = add (mult a b) (mult a c)\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]m\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult a c = mult a c\n[HYPS] 1\n[HYP]a,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]CompOpp_involutive : forall c  comparison, CompOpp (CompOpp c) = c\n[THM]CompOpp_inj : forall c c'  comparison, CompOpp c\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nmult a (add (NXT b) c) = add (mult a (NXT b)) (mult a c)\n[HYPS] 2\n[HYP]IHb : mult a (add b c) = add (mult a b) (mult a c)\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, \n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult a (add (NXT b) c) = add (mult a (NXT b)) (mult a c)\n[HYPS] 1\n[HYP]IHb : mult a (add b c) = add (mult a b) (mult a c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_nxt\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult a (add b c)) a = add (add (mult a b) a) (mult a c)\n[HYPS] 1\n[HYP]IHb : mult a (add b c) = add (mult a b) (mult a c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nx\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite IHb.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (add (mult a b) (mult a c)) a = add (add (mult a b) a) (mult a c)\n[HYPS] 1\n[HYP]IHb : mult a (add b c) = add (mult a b) (mult a c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_comm : forall m n  N, mult m n = mult n m\n[THM]add\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite add_assoc.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult a b) (add (mult a c) a) = add (add (mult a b) a) (mult a c)\n[HYPS] 1\n[HYP]IHb : mult a (add b c) = add (mult a b) (mult a c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_comm : forall m n  N, mult m n = mult n m\n[THM]add\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite add_assoc.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult a b) (add (mult a c) a) = add (mult a b) (add a (mult a c))\n[HYPS] 1\n[HYP]IHb : mult a (add b c) = add (mult a b) (mult a c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_comm : forall m n  N, mult m n = mult n m\n[THM]add\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]f_equal.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult a c) a = add a (mult a c)\n[HYPS] 1\n[HYP]IHb : mult a (add b c) = add (mult a b) (mult a c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]CompOpp_involutive : forall c  comparison, CompOpp (Com\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]apply add_comm.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall a b c : N, mult (add a b) c = add (mult a c) (mult b c)\n[HYPS] 1\n\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NX\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]intros a b c.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult (add a b) c = add (mult a c) (mult b c)\n[HYPS] 1\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NX\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite mult_comm.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult c (add a b) = add (mult a c) (mult b c)\n[HYPS] 1\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NX\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite mult_distr_add_l.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult c a) (mult c b) = add (mult a c) (mult b c)\n[HYPS] 1\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NX\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite mult_comm with (m:=c).\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult a c) (mult c b) = add (mult a c) (mult b c)\n[HYPS] 1\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NX\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite mult_comm with (m:=c).\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult a c) (mult b c) = add (mult a c) (mult b c)\n[HYPS] 1\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_nxt : forall m n  N, mult (NX\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall a b c : N, mult (mult a b) c = mult a (mult b c)\n[HYPS] 1\n\n[THMS] 1\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : fora\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]intros a b c.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult (mult a b) c = mult a (mult b c)\n[HYPS] 1\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : fora\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]induction c.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult (mult a b) Z = mult a (mult b Z)\n[HYPS] 1\n[HYP]a,b : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_zero : fora\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nmult (mult a b) (NXT c) = mult a (mult b (NXT c))\n[HYPS] 2\n[HYP]IHc : mult (mult a b) c = mult a (mult b c)\n[HYP]a,b,c : N\n[THMS] 2\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = Z\n[HYPS] 1\n[HYP]a,b : N\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]Z : N\n[THM]add_zero : forall n  N, n = add n Z\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (foral\n[DFNS] 1\n[DFN]Z : N\n[DFN]N\n[GL] 2\nmult (mult a b) (NXT c) = mult a (mult b (NXT c))\n[HYPS] 2\n[HYP]IHc : mult (mult a b) c = mult a (mult b c)\n[HYP]a,b,c : N\n[THMS] 2\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N, \n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nmult (mult a b) (NXT c) = mult a (mult b (NXT c))\n[HYPS] 1\n[HYP]IHc : mult (mult a b) c = mult a (mult b c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_nxt : foral\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult (mult a b) c) (mult a b) = mult a (add (mult b c) b)\n[HYPS] 1\n[HYP]IHc : mult (mult a b) c = mult a (mult b c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : fora\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite IHc.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult a (mult b c)) (mult a b) = mult a (add (mult b c) b)\n[HYPS] 1\n[HYP]IHc : mult (mult a b) c = mult a (mult b c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : fora\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]rewrite mult_distr_add_l.\n[END]"}
{"input": "[GLS]\n[GL] 1\nadd (mult a (mult b c)) (mult a b) = add (mult a (mult b c)) (mult a b)\n[HYPS] 1\n[HYP]IHc : mult (mult a b) c = mult a (mult b c)\n[HYP]a,b,c : N\n[THMS] 1\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]add_assoc : fora\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall n : N, sub n n = Z\n[HYPS] 1\n\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]add_zero : forall n  N, n = add n Z\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]induction n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nsub Z Z = Z\n[HYPS] 1\n\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]Z : N\n[THM]add_zero : forall n  N, n = add n Z\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]sub : N -> N -> N\n[THM]Nat.sub : nat -> nat -\n[DFNS] 1\n[DFN]sub : N -> N\n[GL] 2\nsub (NXT n) (NXT n) = Z\n[HYPS] 2\n[HYP]IHn : sub n n = Z\n[HYP]n : N\n[THMS] 2\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> fo\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = Z\n[HYPS] 1\n\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]Z : N\n[THM]add_zero : forall n  N, n = add n Z\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]andb_true_intro : forall b1 b2  bool, b1 = tr\n[DFNS] 1\n[DFN]Z : N\n[GL] 2\nsub (NXT n) (NXT n) = Z\n[HYPS] 2\n[HYP]IHn : sub n n = Z\n[HYP]n : N\n[THMS] 2\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall\n[DFNS] 2\n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nsub (NXT n) (NXT n) = Z\n[HYPS] 1\n[HYP]IHn : sub n n = Z\n[HYP]n : N\n[THMS] 1\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nsub n n = Z\n[HYPS] 1\n[HYP]IHn : sub n n = Z\n[HYP]n : N\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]add_zero : forall n  N, n = add n Z\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall n : N, n = sub n Z\n[HYPS] 1\n\n[THMS] 1\n[THM]sub_same : forall n  N, sub n n = Z\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]add_zero : forall n  N, n = add n Z\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]intros n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nn = sub n Z\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]sub_same : forall n  N, sub n n = Z\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]add_zero : forall n  N, n = add n Z\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]case n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = sub Z Z\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]sub_same : forall n  N, sub n n = Z\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]Z : N\n[THM]add_zero : forall n  N, n = add n Z\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_re\n[DFNS] 1\n[DFN]sub : N -> N\n[GL] 2\nforall n : N, NXT n = sub (NXT n) Z\n[HYPS] 2\n[HYP]n : N\n[THMS] 2\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (for\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nZ = Z\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]mult_zero : forall n  N, mult Z n = Z\n[THM]sub_same : forall n  N, sub n n = Z\n[THM]add_zero : forall n  N, n = add n Z\n[THM]Z : N\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_re\n[DFNS] 1\n[DFN]Z : N\n[DFN]N\n[GL] 2\nforall n : N, NXT n = sub (NXT n) Z\n[HYPS] 2\n[HYP]n : N\n[THMS] 2\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall\n[D\n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall n : N, NXT n = sub (NXT n) Z\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall n : N, NXT n = NXT n\n[HYPS] 1\n[HYP]n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]N_rect : forall\n[DFNS] 1\n[DFN]NXT : N -> N\n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall m n : N, sub (add m n) n = m\n[HYPS] 1\n\n[THMS] 1\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_comm : fo\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]intros m.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall n : N, sub (add m n) n = m\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]lq_ind : foral\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]induction n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nsub (add m Z) Z = m\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]sub_zero : forall n  N, n = sub n Z\n[THM]sub_same : forall n  N, sub n n = Z\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[T\n[DFNS] 1\n[DFN]sub : N -> N\n[GL] 2\nsub (add m (NXT n)) (NXT n) = m\n[HYPS] 2\n[HYP]IHn : sub (add m n) n = m\n[HYP]m,n : N\n[THMS] 2\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_comm : forall m n  \n[STPS]", "label": "[STP]rewrite <- add_zero.\n[END]"}
{"input": "[GLS]\n[GL] 1\nsub m Z = m\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]sub_zero : forall n  N, n = sub n Z\n[THM]sub_same : forall n  N, sub n n = Z\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[THM]max_r : forall n m  nat, n <= m -> Nat.max n m = m\n[DFNS] 1\n[DFN]sub : N -> N\n[GL] 2\nsub (add m (NXT n)) (NXT n) = m\n[HYPS] 2\n[HYP]IHn : sub (add m n) n = m\n[HYP]m,n : N\n[THMS] 2\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_comm : forall m n  N, add m\n[STPS]", "label": "[STP]rewrite <- sub_zero.\n[END]"}
{"input": "[GLS]\n[GL] 1\nm = m\n[HYPS] 1\n[HYP]m : N\n[THMS] 1\n[THM]min_r : forall n m  nat, m <= n -> Nat.min n m = m\n[THM]max_r : forall n m  nat, n <= m -> Nat.max n m = m\n[THM]eq_add_S : forall n m  nat, S n = S m -> n = m\n[THM]mult_comm : forall m n  \n[DFNS] 1\n[DFN]N : Set\n[GL] 2\nsub (add m (NXT n)) (NXT n) = m\n[HYPS] 2\n[HYP]IHn : sub (add m n) n = m\n[HYP]m,n : N\n[THMS] 2\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_comm : forall m n  N, add m n = add n \n[STPS]", "label": "[STP]reflexivity.\n[END]"}
{"input": "[GLS]\n[GL] 1\nsub (add m (NXT n)) (NXT n) = m\n[HYPS] 1\n[HYP]IHn : sub (add m n) n = m\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]min_r : forall\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]rewrite <- add_nxt.\n[END]"}
{"input": "[GLS]\n[GL] 1\nsub (NXT (add m n)) (NXT n) = m\n[HYPS] 1\n[HYP]IHn : sub (add m n) n = m\n[HYP]m,n : N\n[THMS] 1\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]min_r : forall\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nsub (add m n) n = m\n[HYPS] 1\n[HYP]IHn : sub (add m n) n = m\n[HYP]m,n : N\n[THMS] 1\n[THM]add_comm : forall m n  N, add m n = add n m\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]min_r : forall\n[DFNS] 1\n[DFN]sub : N -> N\n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall a b : N, lq a b -> lq (NXT a) (NXT b)\n[HYPS] 1\n\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_assoc : forall a b c  N, mult (mult a b) c = mult a (mult b c)\n[THM]add_assoc : forall a b c  N, \n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]intros a b H.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (NXT a) (NXT b)\n[HYPS] 1\n[HYP]H : lq a b\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq : N -> N -> Prop\n[THM]lq_same : forall n  N, lq n n\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) ->\n  (forall m n  \n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]induction b.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (NXT a) (NXT Z)\n[HYPS] 1\n[HYP]H : lq a Z\n[HYP]a : N\n[THMS] 1\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]Z : N\n[THM]lq : N -> N -> Prop\n[THM]lq_same : forall n  N, lq n n\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) ->\n  (f\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq (NXT a) (NXT (NXT b))\n[HYPS] 2\n[HYP]IHb : lq a b -> lq (NXT a) (NXT b)\n[HYP]H : lq a (NXT b)\n[HYP]a,b : N\n[THMS] 2\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq : N -> N -> Prop\n[THM]lq_same : forall n  N, lq n n\n[T\n[STPS]", "label": "[STP]inversion H.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (NXT Z) (NXT Z)\n[HYPS] 1\n[HYP]H1 : a = Z\n[HYP]H0 : n = a\n[HYP]n : N\n[HYP]H : lq a Z\n[HYP]a : N\n[THMS] 1\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq (NXT a) (NXT (NXT b))\n[HYPS] 2\n[HYP]IHb : lq a b -> lq (NXT a) (NXT b)\n[HYP]H : lq a (NXT b)\n[HYP]a,b : N\n[THMS] 2\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq : N -> N ->\n[STPS]", "label": "[STP]constructor.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (NXT a) (NXT (NXT b))\n[HYPS] 1\n[HYP]IHb : lq a b -> lq (NXT a) (NXT b)\n[HYP]H : lq a (NXT b)\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq : N -> N -> Prop\n[THM]lq_same : forall n  N, lq n n\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) ->\n  (forall m n  \n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]inversion H.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (NXT (NXT b)) (NXT (NXT b))\n[HYPS] 1\n[HYP]H1 : a = NXT b\n[HYP]H0 : n = a\n[HYP]n : N\n[HYP]IHb : lq a b -> lq (NXT a) (NXT b)\n[HYP]H : lq a (NXT b)\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]NXT : N -> N\n[THM]mult_one : forall n  N, mult n (NXT Z) = n\n[THM]lq_ind : f\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq (NXT a) (NXT (NXT b))\n[HYPS] 2\n[HYP]H0 : n = b\n[HYP]H1 : m = a\n[HYP]H2 : lq a b\n[HYP]m,n : N\n[HYP]IHb : lq a b -> lq (NXT \n[STPS]", "label": "[STP]constructor.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (NXT a) (NXT (NXT b))\n[HYPS] 1\n[HYP]H0 : n = b\n[HYP]H1 : m = a\n[HYP]H2 : lq a b\n[HYP]m,n : N\n[HYP]IHb : lq a b -> lq (NXT a) (NXT b)\n[HYP]H : lq a (NXT b)\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]NXT : N -> N\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) \n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]apply IHb in H2.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (NXT a) (NXT (NXT b))\n[HYPS] 1\n[HYP]H0 : n = b\n[HYP]H1 : m = a\n[HYP]H2 : lq (NXT a) (NXT b)\n[HYP]m,n : N\n[HYP]IHb : lq a b -> lq (NXT a) (NXT b)\n[HYP]H : lq a (NXT b)\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]add_nxt : forall m n  N, NXT (add m n) = add m (NXT n)\n[THM]NXT : N -> N\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) \n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]constructor.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (NXT a) (NXT b)\n[HYPS] 1\n[HYP]H0 : n = b\n[HYP]H1 : m = a\n[HYP]H2 : lq (NXT a) (NXT b)\n[HYP]m,n : N\n[HYP]IHb : lq a b -> lq (NXT a) (NXT b)\n[HYP]H : lq a (NXT b)\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq_ind : forall P  N -> N -> Prop,\n  (forall n  N, P n n) ->\n  (forall m n  N, lq m n -> P m n -> P m (NXT n)) ->\n  forall n n0  N, lq n\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall a b c : N, lq a b -> lq (add c a) (add c b)\n[HYPS] 1\n\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]intros a b c H.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add c a) (add c b)\n[HYPS] 1\n[HYP]H : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]induction c.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add Z a) (add Z b)\n[HYPS] 1\n[HYP]H : lq a b\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (m\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq (add (NXT c) a) (add (NXT c) b)\n[HYPS] 2\n[HYP]IHc : lq (add c a) (add c b)\n[HYP]H : lq a b\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_distr_add_r : forall a b c  N,\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a b\n[HYPS] 1\n[HYP]H : lq a b\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq : N -> N -> Prop\n[THM]lq_same : forall n  N, lq n n\n[THM]lq_ind : forall P\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq (add (NXT c) a) (add (NXT c) b)\n[HYPS] 2\n[HYP]IHc : lq (add c a) (add c b)\n[HYP]H : lq a b\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) \n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add (NXT c) a) (add (NXT c) b)\n[HYPS] 1\n[HYP]IHc : lq (add c a) (add c b)\n[HYP]H : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (NXT (add c a)) (NXT (add c b))\n[HYPS] 1\n[HYP]IHc : lq (add c a) (add c b)\n[HYP]H : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]apply lq_add1.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add c a) (add c b)\n[HYPS] 1\n[HYP]IHc : lq (add c a) (add c b)\n[HYP]H : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_assoc : forall a b c  N, add (add a b) c = add a (add b c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_distr_add_l : forall a b c  N\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall a b c : N, lq a b -> lq b c -> lq a c\n[HYPS] 1\n\n[THMS] 1\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult \n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]intros a b c H1 H2.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a c\n[HYPS] 1\n[HYP]H2 : lq b c\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq : N -> N -\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]induction c.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a Z\n[HYPS] 1\n[HYP]H2 : lq b Z\n[HYP]H1 : lq a b\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]Z : N\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq a (NXT c)\n[HYPS] 2\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NX\n[STPS]", "label": "[STP]inversion H2.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a Z\n[HYPS] 1\n[HYP]H0 : b = Z\n[HYP]H : n = b\n[HYP]n : N\n[HYP]H2 : lq b Z\n[HYP]H1 : lq a b\n[HYP]a,b : N\n[THMS] 1\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]mult_zero : f\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq a (NXT c)\n[HYPS] 2\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM\n[STPS]", "label": "[STP]subst b.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a Z\n[HYPS] 1\n[HYP]H0 : n = Z\n[HYP]H1 : lq a n\n[HYP]H2 : lq n Z\n[HYP]a,n : N\n[THMS] 1\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]mult_zero : f\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq a (NXT c)\n[HYPS] 2\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, \n[STPS]", "label": "[STP]subst n.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a Z\n[HYPS] 1\n[HYP]H2 : lq Z Z\n[HYP]H1 : lq a Z\n[HYP]a : N\n[THMS] 1\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]Z : N\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq a (NXT c)\n[HYPS] 2\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 2\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT \n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a (NXT c)\n[HYPS] 1\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq : N -> N -\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]inversion H2.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a (NXT c)\n[HYPS] 1\n[HYP]H0 : b = NXT c\n[HYP]H : n = b\n[HYP]n : N\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq_ind : fora\n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq a (NXT c)\n[HYPS] 2\n[HYP]H : n = c\n[HYP]H0 : m = b\n[HYP]H3 : lq b c\n[HYP]m,n : N\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[H\n[STPS]", "label": "[STP]rewrite <- H0.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a b\n[HYPS] 1\n[HYP]H0 : b = NXT c\n[HYP]H : n = b\n[HYP]n : N\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]mult_assoc : forall a b c  N, mult (mult a b) c = mult a (mult b \n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq a (NXT c)\n[HYPS] 2\n[HYP]H : n = c\n[HYP]H0 : m = b\n[HYP]H3 : lq b c\n[HYP]m,n : N\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 \n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a (NXT c)\n[HYPS] 1\n[HYP]H : n = c\n[HYP]H0 : m = b\n[HYP]H3 : lq b c\n[HYP]m,n : N\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq_ind : fora\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]apply IHc in H3.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a (NXT c)\n[HYPS] 1\n[HYP]H : n = c\n[HYP]H0 : m = b\n[HYP]H3 : lq a c\n[HYP]m,n : N\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]lq_ind : fora\n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]constructor.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a c\n[HYPS] 1\n[HYP]H : n = c\n[HYP]H0 : m = b\n[HYP]H3 : lq a c\n[HYP]m,n : N\n[HYP]IHc : lq b c -> lq a c\n[HYP]H2 : lq b (NXT c)\n[HYP]H1 : lq a b\n[HYP]a,b,c : N\n[THMS] 1\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult \n[DFNS] 1\n[DFN]lq : N -> N \n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nforall a b m : N, lq a b -> lq (mult a m) (mult b m)\n[HYPS] 1\n\n[THMS] 1\n[THM]lq_trans : forall a b c  N, lq a b -> lq b c -> lq a c\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]mult_assoc : forall a b c  N, mult (mult a b) c = mult a (mult b c)\n[\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]intros a b m H.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (mult a m) (mult b m)\n[HYPS] 1\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_comm : forall m n  N, mult m n = mult n m\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_assoc : forall a b c  N, mult (mult a b) c = mult a (mult b c)\n[TH\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]induction m.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (mult a Z) (mult b Z)\n[HYPS] 1\n[HYP]H : lq a b\n[HYP]a,b : N\n[THMS] 1\n[THM]mult_assoc : forall a b c  N, mult (mult a b) c = mult a (mult b c)\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nlq (mult a (NXT m)) (mult b (NXT m))\n[HYPS] 2\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 2\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]lq_nxt : forall m n  N, lq m n -\n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq Z Z\n[HYPS] 1\n[HYP]H : lq a b\n[HYP]a,b : N\n[THMS] 1\n[THM]Z : N\n[THM]N_rect : forall P  N -> Type,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n  N, P n\n[THM]N_rec : forall P  N -> Set,\n  P Z -> (forall n  N, P n -> P (NXT n)) -> forall n \n[DFNS] 1\n[DFN]lq : N -> N \n[GL] 2\nlq (mult a (NXT m)) (mult b (NXT m))\n[HYPS] 2\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 2\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[TH\n[STPS]", "label": "[STP]constructor.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (mult a (NXT m)) (mult b (NXT m))\n[HYPS] 1\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]lq_nxt : forall m n  N, lq m n -> lq m (NXT n)\n[THM]mult_comm : forall m n  N, mult m n = mult n m\n[THM]lq_add1 : forall a \n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]simpl.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add (mult a m) a) (add (mult b m) b)\n[HYPS] 1\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_assoc : for\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]assert(H1: lq (add (mult a m) a) (add (mult b m) a)).\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add (mult a m) a) (add (mult b m) a)\n[HYPS] 1\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_assoc : for\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nlq (add (mult a m) a) (add (mult b m) b)\n[HYPS] 2\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[T\n[STPS]", "label": "[STP]rewrite add_comm with (n:=a).\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add a (mult a m)) (add (mult b m) a)\n[HYPS] 1\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_assoc : for\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nlq (add (mult a m) a) (add (mult b m) b)\n[HYPS] 2\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[T\n[STPS]", "label": "[STP]rewrite add_comm with (n:=a).\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add a (mult a m)) (add a (mult b m))\n[HYPS] 1\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_assoc : for\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nlq (add (mult a m) a) (add (mult b m) b)\n[HYPS] 2\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[T\n[STPS]", "label": "[STP]apply add_lq.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (mult a m) (mult b m)\n[HYPS] 1\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_comm : forall m n  N, mult m n = mult n m\n[THM]mult_nxt : forall m n  N, mult (NXT m) n = add (mult m n) n\n[THM]mult_assoc : forall a b c  N, mult (mult a b) c = mult a (mult b c)\n[TH\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nlq (add (mult a m) a) (add (mult b m) b)\n[HYPS] 2\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 2\n[THM]mult\n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add (mult a m) a) (add (mult b m) b)\n[HYPS] 1\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_assoc : for\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]assert(H2: lq (add (mult b m) a) (add (mult b m) b)).\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add (mult b m) a) (add (mult b m) b)\n[HYPS] 1\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_assoc : for\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nlq (add (mult a m) a) (add (mult b m) b)\n[HYPS] 2\n[HYP]H2 : lq (add (mult b m) a) (add (mult b m) b)\n[HYP]H1 : lq (add \n[STPS]", "label": "[STP]apply add_lq.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq a b\n[HYPS] 1\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]lq_add1 : forall a b  N, lq a b -> lq (NXT a) (NXT b)\n[THM]lq_trans : forall a b c  N, lq a b -> lq b c -> lq a c\n[THM]add_lq : forall a b c  N, lq a b -> lq (add c a) (add c b)\n[THM]mult_\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nlq (add (mult a m) a) (add (mult b m) b)\n[HYPS] 2\n[HYP]H2 : lq (add (mult b m) a) (add (mult b m) b)\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[\n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add (mult a m) a) (add (mult b m) b)\n[HYPS] 1\n[HYP]H2 : lq (add (mult b m) a) (add (mult b m) b)\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_assoc : for\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]apply lq_trans with (b:=(add (mult b m) a)).\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add (mult a m) a) (add (mult b m) a)\n[HYPS] 1\n[HYP]H2 : lq (add (mult b m) a) (add (mult b m) b)\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_assoc : for\n[DFNS] 1\n[DFN]mult : N -> \n[GL] 2\nlq (add (mult b m) a) (add (mult b m) b)\n[HYPS] 2\n[HYP]H2 : lq (add \n[STPS]", "label": "[STP]assumption.\n[END]"}
{"input": "[GLS]\n[GL] 1\nlq (add (mult b m) a) (add (mult b m) b)\n[HYPS] 1\n[HYP]H2 : lq (add (mult b m) a) (add (mult b m) b)\n[HYP]H1 : lq (add (mult a m) a) (add (mult b m) a)\n[HYP]IHm : lq (mult a m) (mult b m)\n[HYP]H : lq a b\n[HYP]a,b,m : N\n[THMS] 1\n[THM]mult_distr_add_l : forall a b c  N, mult a (add b c) = add (mult a b) (mult a c)\n[THM]mult_distr_add_r : forall a b c  N, mult (add a b) c = add (mult a c) (mult b c)\n[THM]mult_assoc : for\n[DFNS] 1\n[DFN]mult : N -> \n[STPS]", "label": "[STP]assumption.\n[END]"}
