# coding: utf-8

"""
    Match Predicting Application Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from match_predicting_pub_api.models.training_request_dto import TrainingRequestDTO

class TrainingResultDTO(BaseModel):
    """
    TrainingResultDTO
    """
    training_request: Optional[TrainingRequestDTO] = Field(default=None, alias="trainingRequest")
    number_of_matches: Optional[StrictInt] = Field(default=None, alias="numberOfMatches")
    starting_time: Optional[StrictInt] = Field(default=None, alias="startingTime")
    precision: Optional[Union[StrictFloat, StrictInt]] = None
    sizes: Optional[StrictStr] = None
    biases: Optional[StrictStr] = None
    weights: Optional[StrictStr] = None
    __properties = ["trainingRequest", "numberOfMatches", "startingTime", "precision", "sizes", "biases", "weights"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrainingResultDTO:
        """Create an instance of TrainingResultDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of training_request
        if self.training_request:
            _dict['trainingRequest'] = self.training_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrainingResultDTO:
        """Create an instance of TrainingResultDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrainingResultDTO.parse_obj(obj)

        _obj = TrainingResultDTO.parse_obj({
            "training_request": TrainingRequestDTO.from_dict(obj.get("trainingRequest")) if obj.get("trainingRequest") is not None else None,
            "number_of_matches": obj.get("numberOfMatches"),
            "starting_time": obj.get("startingTime"),
            "precision": obj.get("precision"),
            "sizes": obj.get("sizes"),
            "biases": obj.get("biases"),
            "weights": obj.get("weights")
        })
        return _obj


