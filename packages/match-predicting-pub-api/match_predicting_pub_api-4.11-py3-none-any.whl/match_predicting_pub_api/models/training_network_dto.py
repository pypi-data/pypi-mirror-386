# coding: utf-8

"""
    Match Predicting Application Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt

class TrainingNetworkDTO(BaseModel):
    """
    TrainingNetworkDTO
    """
    network_version: Optional[StrictInt] = Field(default=None, alias="networkVersion")
    ignore_matches_with_insufficient_data: Optional[StrictBool] = Field(default=None, alias="ignoreMatchesWithInsufficientData")
    number_of_last_matches: Optional[StrictInt] = Field(default=None, alias="numberOfLastMatches")
    number_of_last_common_matches: Optional[StrictInt] = Field(default=None, alias="numberOfLastCommonMatches")
    number_of_matches_for_team_hard_factor: Optional[StrictInt] = Field(default=None, alias="numberOfMatchesForTeamHardFactor")
    number_of_matches_for_player_hard_factor: Optional[StrictInt] = Field(default=None, alias="numberOfMatchesForPlayerHardFactor")
    __properties = ["networkVersion", "ignoreMatchesWithInsufficientData", "numberOfLastMatches", "numberOfLastCommonMatches", "numberOfMatchesForTeamHardFactor", "numberOfMatchesForPlayerHardFactor"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrainingNetworkDTO:
        """Create an instance of TrainingNetworkDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrainingNetworkDTO:
        """Create an instance of TrainingNetworkDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrainingNetworkDTO.parse_obj(obj)

        _obj = TrainingNetworkDTO.parse_obj({
            "network_version": obj.get("networkVersion"),
            "ignore_matches_with_insufficient_data": obj.get("ignoreMatchesWithInsufficientData"),
            "number_of_last_matches": obj.get("numberOfLastMatches"),
            "number_of_last_common_matches": obj.get("numberOfLastCommonMatches"),
            "number_of_matches_for_team_hard_factor": obj.get("numberOfMatchesForTeamHardFactor"),
            "number_of_matches_for_player_hard_factor": obj.get("numberOfMatchesForPlayerHardFactor")
        })
        return _obj


