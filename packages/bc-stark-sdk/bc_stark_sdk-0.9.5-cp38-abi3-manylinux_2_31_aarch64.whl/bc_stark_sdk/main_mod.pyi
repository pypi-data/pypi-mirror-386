# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

class ActionSequence:
    action_id: ActionSequenceId
    data: builtins.list[ActionSequenceItem]
    description: builtins.str
    def __new__(cls, action_id:ActionSequenceId, data:typing.Sequence[ActionSequenceItem]) -> ActionSequence: ...
    def new(self, action_id:ActionSequenceId, data:typing.Sequence[ActionSequenceItem]) -> ActionSequence: ...
    def desc(self) -> builtins.str: ...

class ActionSequenceItem:
    index: builtins.int
    duration: builtins.int
    mode: builtins.int
    positions: builtins.list[builtins.int]
    durations: builtins.list[builtins.int]
    speeds: builtins.list[builtins.int]
    currents: builtins.list[builtins.int]
    description: builtins.str
    def __new__(cls, index:builtins.int, duration:builtins.int, mode:builtins.int, positions:typing.Sequence[builtins.int], durations:typing.Sequence[builtins.int], speeds:typing.Sequence[builtins.int], currents:typing.Sequence[builtins.int]) -> ActionSequenceItem: ...
    def new(self, index:builtins.int, duration:builtins.int, mode:builtins.int, positions:typing.Sequence[builtins.int], durations:typing.Sequence[builtins.int], speeds:typing.Sequence[builtins.int], currents:typing.Sequence[builtins.int]) -> ActionSequenceItem: ...
    def desc(self) -> builtins.str: ...

class ButtonPressEvent:
    timestamp: builtins.int
    button_id: builtins.int
    press_state: PressState
    description: builtins.str
    def __new__(cls, timestamp:builtins.int, button_id:builtins.int, press_state:PressState) -> ButtonPressEvent: ...
    def new(self, timestamp:builtins.int, button_id:builtins.int, press_state:PressState) -> ButtonPressEvent: ...
    def desc(self) -> builtins.str: ...

class DeviceInfo:
    sku_type: SkuType
    r"""
    Hand SKU
    """
    serial_number: builtins.str
    r"""
    Serial number
    """
    firmware_version: builtins.str
    r"""
    Firmware version
    """
    description: builtins.str
    def __new__(cls, sku_type:SkuType, serial_number:builtins.str, firmware_version:builtins.str) -> DeviceInfo: ...
    def new(self, sku_type:SkuType, serial_number:builtins.str, firmware_version:builtins.str) -> DeviceInfo: ...
    def is_revo1(self) -> builtins.bool: ...
    def is_revo1_touch(self) -> builtins.bool: ...
    def is_revo2(self) -> builtins.bool: ...
    def is_revo2_touch(self) -> builtins.bool: ...
    def is_touch(self) -> builtins.bool: ...
    def get_hardware_type(self) -> StarkHardwareType: ...
    def desc(self) -> builtins.str: ...

class LedInfo:
    color: LedColor
    mode: LedMode
    description: builtins.str
    def __new__(cls, color:LedColor, mode:LedMode) -> LedInfo: ...
    def new(self, color:LedColor, mode:LedMode) -> LedInfo: ...
    def desc(self) -> builtins.str: ...

class MessageParser:
    def __new__(cls, device_id:builtins.str, msg_type:MsgType) -> MessageParser: ...
    def receive_data(self, device_id:builtins.str, data:typing.Sequence[builtins.int]) -> None: ...

class MessageStream:
    def __aiter__(self) -> MessageStream: ...
    def __anext__(self) -> typing.Any: ...

class MotorSettings:
    min_position: builtins.int
    max_position: builtins.int
    max_speed: builtins.int
    max_current: builtins.int
    description: builtins.str
    def __new__(cls, min_position:builtins.int, max_position:builtins.int, max_speed:builtins.int, max_current:builtins.int) -> MotorSettings: ...
    def new(self, min_position:builtins.int, max_position:builtins.int, max_speed:builtins.int, max_current:builtins.int) -> MotorSettings: ...
    def desc(self) -> builtins.str: ...

class MotorStatusData:
    is_revo1: builtins.bool
    positions: builtins.list[builtins.int]
    speeds: builtins.list[builtins.int]
    currents: builtins.list[builtins.int]
    states: builtins.list[MotorState]
    description: builtins.str
    def __new__(cls, is_revo1:builtins.bool, positions:typing.Sequence[builtins.int], speeds:typing.Sequence[builtins.int], currents:typing.Sequence[builtins.int], states:typing.Sequence[builtins.int]) -> MotorStatusData: ...
    def new(self, is_revo1:builtins.bool, positions:typing.Sequence[builtins.int], speeds:typing.Sequence[builtins.int], currents:typing.Sequence[builtins.int], states:typing.Sequence[builtins.int]) -> MotorStatusData: ...
    def is_idle(self) -> builtins.bool: ...
    def is_opened(self) -> builtins.bool: ...
    def is_closed(self) -> builtins.bool: ...
    def desc(self) -> builtins.str: ...

class PyCanFdMessage:
    can_id: builtins.int
    timestamp: builtins.int
    is_remote_frame: builtins.bool
    is_error_frame: builtins.bool
    channel: builtins.str
    length: builtins.int
    data: builtins.list[builtins.int]
    is_tx: builtins.bool
    bitrate_switch: builtins.bool
    error_state_indicator: builtins.bool

class PyDeviceContext:
    def __new__(cls) -> PyDeviceContext: ...
    @staticmethod
    def init_canfd(master_id:builtins.int) -> PyDeviceContext: ...
    @staticmethod
    def open_ethercat_master(pos:builtins.int) -> PyDeviceContext: ...
    def close(self) -> typing.Any: ...
    def ec_setup_sdo(self, slave_id:builtins.int) -> typing.Any: ...
    def ec_start_dfu(self, slave_pos:builtins.int, dfu_type:EtherCATFoeType, file_path:builtins.str) -> typing.Any: ...
    def ec_reserve_master(self) -> typing.Any: ...
    def ec_start_loop(self, slave_positions:typing.Sequence[builtins.int], dc_assign_activate:builtins.int, sync0_cycle_time:builtins.int, sync0_shift_time:builtins.int, sync1_cycle_time:builtins.int, sync1_shift_time:builtins.int) -> typing.Any: ...
    def ec_stop_loop(self) -> typing.Any: ...
    def is_touch_hand(self) -> builtins.bool: ...
    def is_revo1(self) -> builtins.bool: ...
    def is_revo2(self) -> builtins.bool: ...
    def is_touch_pressure(self) -> builtins.bool: ...
    def get_device_info(self, slave_id:builtins.int) -> typing.Any: ...
    def get_device_sn(self, slave_id:builtins.int) -> typing.Any: ...
    def get_device_fw_version(self, slave_id:builtins.int) -> typing.Any: ...
    def get_touch_sensor_enabled(self, slave_id:builtins.int) -> typing.Any: ...
    def get_touch_sensor_fw_versions(self, slave_id:builtins.int) -> typing.Any: ...
    def get_sku_type(self, slave_id:builtins.int) -> typing.Any: ...
    def get_serialport_cfg(self, slave_id:builtins.int) -> typing.Any: ...
    def get_canfd_baudrate(self, slave_id:builtins.int) -> typing.Any: ...
    def get_serialport_baudrate(self, slave_id:builtins.int) -> typing.Any: ...
    def get_force_level(self, slave_id:builtins.int) -> typing.Any: ...
    def get_voltage(self, slave_id:builtins.int) -> typing.Any: ...
    def get_led_enabled(self, slave_id:builtins.int) -> typing.Any: ...
    def get_buzzer_enabled(self, slave_id:builtins.int) -> typing.Any: ...
    def get_vibration_enabled(self, slave_id:builtins.int) -> typing.Any: ...
    def set_led_enabled(self, slave_id:builtins.int, enabled:builtins.bool) -> typing.Any: ...
    def set_buzzer_enabled(self, slave_id:builtins.int, enabled:builtins.bool) -> typing.Any: ...
    def set_vibration_enabled(self, slave_id:builtins.int, enabled:builtins.bool) -> typing.Any: ...
    def get_auto_calibration_enabled(self, slave_id:builtins.int) -> typing.Any: ...
    def get_turbo_mode_enabled(self, slave_id:builtins.int) -> typing.Any: ...
    def get_turbo_config(self, slave_id:builtins.int) -> typing.Any: ...
    def get_led_info(self, slave_id:builtins.int) -> typing.Any: ...
    def get_button_event(self, slave_id:builtins.int) -> typing.Any: ...
    def get_motor_state(self, slave_id:builtins.int) -> typing.Any: ...
    def get_finger_positions(self, slave_id:builtins.int) -> typing.Any: ...
    def get_finger_speeds(self, slave_id:builtins.int) -> typing.Any: ...
    def get_finger_currents(self, slave_id:builtins.int) -> typing.Any: ...
    def get_motor_status(self, slave_id:builtins.int) -> typing.Any: ...
    def get_touch_sensor_raw_data(self, slave_id:builtins.int) -> typing.Any: ...
    def set_modulus_touch_data_type(self, slave_id:builtins.int, data_type:ModulusTouchDataType) -> typing.Any: ...
    def get_modulus_touch_data_type(self, slave_id:builtins.int) -> typing.Any: ...
    def get_modulus_touch_summary(self, slave_id:builtins.int) -> typing.Any: ...
    def get_single_modulus_touch_summary(self, slave_id:builtins.int, index:builtins.int) -> typing.Any: ...
    def get_modulus_touch_data(self, slave_id:builtins.int) -> typing.Any: ...
    def get_single_modulus_touch_data(self, slave_id:builtins.int, index:builtins.int) -> typing.Any: ...
    def get_single_touch_sensor_status(self, slave_id:builtins.int, index:builtins.int) -> typing.Any: ...
    def get_touch_sensor_status(self, slave_id:builtins.int) -> typing.Any: ...
    def get_action_sequence(self, slave_id:builtins.int, action_id:ActionSequenceId) -> typing.Any: ...
    def run_action_sequence(self, slave_id:builtins.int, action_id:ActionSequenceId) -> typing.Any: ...
    def clear_action_sequence(self, slave_id:builtins.int, action_id:ActionSequenceId) -> typing.Any: ...
    def transfer_action_sequence(self, slave_id:builtins.int, action_id:ActionSequenceId, sequences:typing.Sequence[typing.Sequence[builtins.int]]) -> typing.Any: ...
    def reboot(self, slave_id:builtins.int) -> typing.Any: ...
    def set_serialport_baudrate(self, slave_id:builtins.int, baudrate:Baudrate) -> typing.Any: ...
    def set_slave_id(self, slave_id:builtins.int, new_id:builtins.int) -> typing.Any: ...
    def set_force_level(self, slave_id:builtins.int, force_level:ForceLevel) -> typing.Any: ...
    def set_auto_calibration(self, slave_id:builtins.int, enabled:builtins.bool) -> typing.Any: ...
    def calibrate_position(self, slave_id:builtins.int) -> typing.Any: ...
    def set_turbo_mode_enabled(self, slave_id:builtins.int, enabled:builtins.bool) -> typing.Any: ...
    def set_turbo_config(self, slave_id:builtins.int, turbo_config:TurboConfig) -> typing.Any: ...
    def set_led_info(self, slave_id:builtins.int, led_info:LedInfo) -> typing.Any: ...
    def set_finger_position(self, slave_id:builtins.int, finger_id:FingerId, position:builtins.int) -> typing.Any: ...
    def set_finger_position_with_millis(self, slave_id:builtins.int, finger_id:FingerId, position:builtins.int, milliseconds:builtins.int) -> typing.Any: ...
    def set_finger_position_with_speed(self, slave_id:builtins.int, finger_id:FingerId, position:builtins.int, speed:builtins.int) -> typing.Any: ...
    def set_finger_positions(self, slave_id:builtins.int, positions:typing.Sequence[builtins.int]) -> typing.Any: ...
    def set_finger_positions_and_durations(self, slave_id:builtins.int, positions:typing.Sequence[builtins.int], durations:typing.Sequence[builtins.int]) -> typing.Any: ...
    def set_finger_positions_and_speeds(self, slave_id:builtins.int, positions:typing.Sequence[builtins.int], speeds:typing.Sequence[builtins.int]) -> typing.Any: ...
    def set_finger_unit_mode(self, slave_id:builtins.int, mode:FingerUnitMode) -> typing.Any: ...
    def get_finger_unit_mode(self, slave_id:builtins.int) -> typing.Any: ...
    def set_thumb_aux_lock_current(self, slave_id:builtins.int, lock_current:builtins.int) -> typing.Any: ...
    def get_thumb_aux_lock_current(self, slave_id:builtins.int) -> typing.Any: ...
    def set_finger_protected_currents(self, slave_id:builtins.int, protected_currents:typing.Sequence[builtins.int]) -> typing.Any: ...
    def set_finger_protected_current(self, slave_id:builtins.int, finger_id:FingerId, current:builtins.int) -> typing.Any: ...
    def get_finger_protected_currents(self, slave_id:builtins.int) -> typing.Any: ...
    def get_finger_protected_current(self, slave_id:builtins.int, finger_id:FingerId) -> typing.Any: ...
    def get_all_finger_settings(self, slave_id:builtins.int) -> typing.Any: ...
    def get_finger_settings(self, slave_id:builtins.int, finger_id:FingerId) -> typing.Any: ...
    def get_finger_min_position(self, slave_id:builtins.int, finger_id:FingerId) -> typing.Any: ...
    def get_finger_max_position(self, slave_id:builtins.int, finger_id:FingerId) -> typing.Any: ...
    def get_finger_max_current(self, slave_id:builtins.int, finger_id:FingerId) -> typing.Any: ...
    def get_finger_max_speed(self, slave_id:builtins.int, finger_id:FingerId) -> typing.Any: ...
    def set_finger_settings(self, slave_id:builtins.int, finger_id:FingerId, settings:MotorSettings) -> typing.Any: ...
    def set_finger_min_position(self, slave_id:builtins.int, finger_id:FingerId, position:builtins.int) -> typing.Any: ...
    def set_finger_max_position(self, slave_id:builtins.int, finger_id:FingerId, position:builtins.int) -> typing.Any: ...
    def set_finger_max_current(self, slave_id:builtins.int, finger_id:FingerId, current:builtins.int) -> typing.Any: ...
    def set_finger_max_speed(self, slave_id:builtins.int, finger_id:FingerId, speed:builtins.int) -> typing.Any: ...
    def set_finger_speed(self, slave_id:builtins.int, finger_id:FingerId, speed:builtins.int) -> typing.Any: ...
    def set_finger_current(self, slave_id:builtins.int, finger_id:FingerId, current:builtins.int) -> typing.Any: ...
    def set_finger_pwm(self, slave_id:builtins.int, finger_id:FingerId, pwm:builtins.int) -> typing.Any: ...
    def set_finger_speeds(self, slave_id:builtins.int, speeds:typing.Sequence[builtins.int]) -> typing.Any: ...
    def set_finger_currents(self, slave_id:builtins.int, currents:typing.Sequence[builtins.int]) -> typing.Any: ...
    def set_finger_pwms(self, slave_id:builtins.int, pwms:typing.Sequence[builtins.int]) -> typing.Any: ...
    def touch_sensor_setup(self, slave_id:builtins.int, bits:builtins.int) -> typing.Any: ...
    def touch_sensor_reset(self, slave_id:builtins.int, bits:builtins.int) -> typing.Any: ...
    def touch_sensor_calibrate(self, slave_id:builtins.int, bits:builtins.int) -> typing.Any: ...
    def reset_default_gesture(self, slave_id:builtins.int) -> typing.Any: ...
    def reset_default_settings(self, slave_id:builtins.int) -> typing.Any: ...
    def factory_set_key(self, slave_id:builtins.int, key:builtins.str) -> typing.Any:
        r"""
        Factory Functions
        """
    def factory_set_device_sn(self, slave_id:builtins.int, sn:builtins.str) -> typing.Any: ...
    def factory_set_sku_type(self, slave_id:builtins.int, sku_type:SkuType) -> typing.Any: ...
    def factory_set_stall_durations(self, slave_id:builtins.int, durations:typing.Sequence[builtins.int]) -> typing.Any: ...
    def factory_set_stall_currents(self, slave_id:builtins.int, level:ForceLevel, currents:typing.Sequence[builtins.int]) -> typing.Any: ...
    def factory_set_finger_pwms(self, slave_id:builtins.int, level:ForceLevel, pwms:typing.Sequence[builtins.int]) -> typing.Any: ...
    def factory_get_stall_durations(self, slave_id:builtins.int) -> typing.Any: ...
    def factory_get_stall_currents(self, slave_id:builtins.int, level:ForceLevel) -> typing.Any: ...
    def factory_get_finger_pwms(self, slave_id:builtins.int, level:ForceLevel) -> typing.Any: ...
    def start_dfu(self, slave_id:builtins.int, dfu_file_path:builtins.str, wait_secs:builtins.int, dfu_state_cb:typing.Any, dfu_progress_cb:typing.Any) -> typing.Any: ...

class PySerialStream:
    def __new__(cls, port_name:builtins.str, baudrate:builtins.int) -> PySerialStream: ...
    def start_data_stream(self, py_parser:MessageParser) -> typing.Any: ...
    def stop_data_stream(self) -> None: ...
    def write_data(self, data:typing.Sequence[builtins.int]) -> typing.Any: ...

class SerialPortCfg:
    slave_id: builtins.int
    r"""
    Slave ID for the protocol
    - For Protobuf protocol: range 10~254, default is 10, 254 is the broadcast address
    - For Modbus protocol: range 0~254, default is 1, 0 is the broadcast address (broadcast is only for control commands)
    """
    baudrate: Baudrate
    r"""
    Baud rate for the serial communication
    """
    description: builtins.str
    def __new__(cls, slave_id:builtins.int, baudrate:Baudrate) -> SerialPortCfg: ...
    def new(self, slave_id:builtins.int, baudrate:Baudrate) -> SerialPortCfg: ...
    def desc(self) -> builtins.str: ...

class TouchFingerData:
    items: builtins.list[TouchFingerItem]

class TouchFingerItem:
    is_revo1: builtins.bool
    normal_force1: builtins.int
    normal_force2: builtins.int
    normal_force3: builtins.int
    tangential_force1: builtins.int
    tangential_force2: builtins.int
    tangential_force3: builtins.int
    tangential_direction1: builtins.int
    tangential_direction2: builtins.int
    tangential_direction3: builtins.int
    self_proximity1: builtins.int
    self_proximity2: builtins.int
    mutual_proximity: builtins.int
    status: builtins.int
    description: builtins.str
    def __new__(cls, is_revo1:builtins.bool, normal_force1:builtins.int, normal_force2:builtins.int, normal_force3:builtins.int, tangential_force1:builtins.int, tangential_force2:builtins.int, tangential_force3:builtins.int, tangential_direction1:builtins.int, tangential_direction2:builtins.int, tangential_direction3:builtins.int, self_proximity1:builtins.int, self_proximity2:builtins.int, mutual_proximity:builtins.int, status:builtins.int) -> TouchFingerItem: ...
    def new(self, is_revo1:builtins.bool, normal_force1:builtins.int, normal_force2:builtins.int, normal_force3:builtins.int, tangential_force1:builtins.int, tangential_force2:builtins.int, tangential_force3:builtins.int, tangential_direction1:builtins.int, tangential_direction2:builtins.int, tangential_direction3:builtins.int, self_proximity1:builtins.int, self_proximity2:builtins.int, mutual_proximity:builtins.int, status:builtins.int) -> TouchFingerItem: ...
    def is_normal(self) -> builtins.bool: ...
    def is_abnormal(self) -> builtins.bool: ...
    def desc(self) -> builtins.str: ...

class TouchRawData:
    thumb: builtins.list[builtins.int]
    index: builtins.list[builtins.int]
    middle: builtins.list[builtins.int]
    ring: builtins.list[builtins.int]
    pinky: builtins.list[builtins.int]
    description: builtins.str
    def __new__(cls, thumb:typing.Sequence[builtins.int], index:typing.Sequence[builtins.int], middle:typing.Sequence[builtins.int], ring:typing.Sequence[builtins.int], pinky:typing.Sequence[builtins.int]) -> TouchRawData: ...
    def new(self, thumb:typing.Sequence[builtins.int], index:typing.Sequence[builtins.int], middle:typing.Sequence[builtins.int], ring:typing.Sequence[builtins.int], pinky:typing.Sequence[builtins.int]) -> TouchRawData: ...
    def desc(self) -> builtins.str: ...

class TouchSensorData:
    slave_id: builtins.int
    items: builtins.list[TouchSensorItem]
    description: builtins.str
    def desc(self) -> builtins.str: ...

class TouchSensorItem:
    r"""
    ALGO OUTPUT
    """
    state: ContactState
    force: builtins.float
    sliding_mag: builtins.float

class TurboConfig:
    interval: builtins.int
    duration: builtins.int
    description: builtins.str
    def __new__(cls, interval:builtins.int, duration:builtins.int) -> TurboConfig: ...
    def new(self, interval:builtins.int, duration:builtins.int) -> TurboConfig: ...
    def desc(self) -> builtins.str: ...

class ActionCmd(Enum):
    SetStart = ...
    SetFinish = ...
    ReadStart = ...
    ReadFinish = ...
    Save = ...
    Run = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ActionCmd: ...

class ActionSequenceId(Enum):
    DefaultGestureOpen = ...
    DefaultGestureFist = ...
    DefaultGesturePinchTwo = ...
    DefaultGesturePinchThree = ...
    DefaultGesturePinchSide = ...
    DefaultGesturePoint = ...
    CustomGesture1 = ...
    CustomGesture2 = ...
    CustomGesture3 = ...
    CustomGesture4 = ...
    CustomGesture5 = ...
    CustomGesture6 = ...
    CustomGesture7 = ...
    CustomGesture8 = ...
    CustomGesture9 = ...
    CustomGesture10 = ...
    CustomGesture11 = ...
    CustomGesture12 = ...
    CustomGesture13 = ...
    CustomGesture14 = ...
    CustomGesture15 = ...
    CustomGesture16 = ...
    CustomGesture17 = ...
    CustomGesture18 = ...
    CustomGesture19 = ...
    CustomGesture20 = ...
    CustomGesture21 = ...
    CustomGesture22 = ...
    CustomGesture23 = ...
    CustomGesture24 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ActionSequenceId: ...

class ActionStatus(Enum):
    Idle = ...
    Running = ...
    Completed = ...
    Error = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ActionStatus: ...

class Baudrate(Enum):
    Baud115200 = ...
    Baud57600 = ...
    Baud19200 = ...
    Baud460800 = ...
    Baud1Mbps = ...
    Baud2Mbps = ...
    Baud5Mbps = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> Baudrate: ...

class BaudrateCAN(Enum):
    Baud100Kbps = ...
    Baud125Kbps = ...
    Baud200Kbps = ...
    Baud250Kbps = ...
    Baud400Kbps = ...
    Baud500Kbps = ...
    Baud800Kbps = ...
    Baud1Mbps = ...
    Baud2Mbps = ...
    Baud4Mbps = ...
    Baud5Mbps = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> BaudrateCAN: ...

class CanChannel(Enum):
    Thumb = ...
    ThumbAux = ...
    Index = ...
    Middle = ...
    Ring = ...
    Pinky = ...
    All = ...
    Reserved = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> CanChannel: ...

class CanCmd(Enum):
    Position = ...
    Speed = ...
    Current = ...
    Pwm = ...
    PositionRead = ...
    SpeedRead = ...
    CurrentRead = ...
    StateRead = ...
    ParamConfig = ...
    ParamRead = ...
    MultiRead = ...
    PositionAndTime = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> CanCmd: ...

class CanFrameMultiRead(Enum):
    FirmwareVersion = ...
    SerialNumber = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> CanFrameMultiRead: ...

class CanParamAddress(Enum):
    Unknown = ...
    SkuType = ...
    DeviceId = ...
    TurboSwitch = ...
    TurboParam = ...
    AutoCalibration = ...
    ManualCalibration = ...
    StoreAndReboot = ...
    LedSwitch = ...
    BuzzerSwitch = ...
    VibrationSwitch = ...
    ResetSettings = ...
    ThumbAuxLockCurrent = ...
    UnitMode = ...
    EnterOta = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> CanParamAddress: ...

class ContactState(Enum):
    NoContact = ...
    Contact = ...
    ContactSliding = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ContactState: ...

class DfuCommandType(Enum):
    RequestDeviceInfo = ...
    StartUpgrade = ...
    TransferData = ...
    TransferDone = ...
    ExitUpgrade = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> DfuCommandType: ...

class DfuExitReason(Enum):
    FirmwareVersionMismatch = ...
    HardwareVersionMismatch = ...
    FirmwareFileCorrupted = ...
    Unknown = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> DfuExitReason: ...

class DfuState(Enum):
    Idle = ...
    Starting = ...
    Started = ...
    Transfer = ...
    Completed = ...
    Aborted = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> DfuState: ...

class EcModulusSdoSubIdx(Enum):
    CalibrationThumb = ...
    CalibrationIndex = ...
    CalibrationMiddle = ...
    CalibrationRing = ...
    CalibrationPinky = ...
    CalibrationPalm = ...
    SwitchThumb = ...
    SwitchIndex = ...
    SwitchMiddle = ...
    SwitchRing = ...
    SwitchPinky = ...
    SwitchPalm = ...
    Vendor = ...
    DataType = ...
    DeviceSnThumb = ...
    DeviceSnIndex = ...
    DeviceSnMiddle = ...
    DeviceSnRing = ...
    DeviceSnPinky = ...
    DeviceSnPalm = ...
    FwVersionThumb = ...
    FwVersionIndex = ...
    FwVersionMiddle = ...
    FwVersionRing = ...
    FwVersionPinky = ...
    FwVersionPalm = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EcModulusSdoSubIdx: ...

class EcTashanSdoSubIdx(Enum):
    ThumbCalibration = ...
    IndexCalibration = ...
    MidCalibration = ...
    RingCalibration = ...
    PinkyCalibration = ...
    TouchVendor = ...
    ThumbAcqParamUpdate = ...
    IndexAcqParamUpdate = ...
    MidAcqParamUpdate = ...
    RingAcqParamUpdate = ...
    PinkyAcqParamUpdate = ...
    Reserved1 = ...
    ThumbTouchFwVersion = ...
    IndexTouchFwVersion = ...
    MidTouchFwVersion = ...
    RingTouchFwVersion = ...
    PinkyTouchFwVersion = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EcTashanSdoSubIdx: ...

class EtherCATAddress(Enum):
    TX = ...
    RX = ...
    Config = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EtherCATAddress: ...

class EtherCATConfigIndex(Enum):
    SkuType = ...
    LedSwitch = ...
    BuzzerSwitch = ...
    VibrationSwitch = ...
    UnitMode = ...
    CalibratePosition = ...
    AutoCalibration = ...
    TurboMode = ...
    TurboParam = ...
    ThumbFlexProtectedCurrent = ...
    ThumbAuxProtectedCurrent = ...
    IndexProtectedCurrent = ...
    MiddleProtectedCurrent = ...
    RingProtectedCurrent = ...
    PinkyProtectedCurrent = ...
    ThumbAuxLockCurrent = ...
    CtrlFirmwareVersion = ...
    CtrlSerialNumber = ...
    WristFirmwareVersion = ...
    WristSerialNumber = ...
    FoeFileType = ...
    FoeAuthCode = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EtherCATConfigIndex: ...

class EtherCATCtrlAddress(Enum):
    Multi = ...
    Single = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EtherCATCtrlAddress: ...

class EtherCATCtrlSubAddressMulti(Enum):
    Mode = ...
    Param1 = ...
    Param2 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EtherCATCtrlSubAddressMulti: ...

class EtherCATCtrlSubAddressSingle(Enum):
    Mode = ...
    Id = ...
    Param1 = ...
    Param2 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EtherCATCtrlSubAddressSingle: ...

class EtherCATFoeType(Enum):
    Wrist = ...
    Control = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EtherCATFoeType: ...

class FingerCtrlMode(Enum):
    PositionAndTime = ...
    PositionAndSpeed = ...
    Speed = ...
    Current = ...
    Pwm = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> FingerCtrlMode: ...

class FingerId(Enum):
    Thumb = ...
    ThumbAux = ...
    Index = ...
    Middle = ...
    Ring = ...
    Pinky = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> FingerId: ...

class FingerUnitMode(Enum):
    Normalized = ...
    Physical = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> FingerUnitMode: ...

class ForceLevel(Enum):
    Small = ...
    Normal = ...
    Full = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ForceLevel: ...

class LedColor(Enum):
    Unchanged = ...
    R = ...
    G = ...
    RG = ...
    B = ...
    RB = ...
    GB = ...
    RGB = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> LedColor: ...

class LedMode(Enum):
    Unknown = ...
    Shutdown = ...
    Keep = ...
    Blink = ...
    OneShot = ...
    Blink0_5Hz = ...
    Blink2Hz = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> LedMode: ...

class LogLevel(Enum):
    Error = ...
    Warn = ...
    Info = ...
    Debug = ...
    Trace = ...

class ModulusTouchDataType(Enum):
    Raw = ...
    Calibrated = ...
    Force = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ModulusTouchDataType: ...

class MotorState(Enum):
    Unknown = ...
    Idle = ...
    Running = ...
    Stall = ...
    Turbo = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> MotorState: ...

class MsgType(Enum):
    Crimson = ...
    OxyZen = ...
    Mobius = ...
    MobiusV1_5 = ...
    Almond = ...
    AlmondV2 = ...
    Morpheus = ...
    Luna = ...
    REN = ...
    Breeze = ...
    Stark = ...
    EEGCap = ...
    Edu = ...
    Clear = ...
    Melody = ...
    Aura = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> MsgType: ...

class PressState(Enum):
    Unknown = ...
    Down = ...
    Up = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> PressState: ...

class RegisterAddressV1(Enum):
    EnterOta = ...
    SkuType = ...
    SetFactoryKey = ...
    SetSn = ...
    StallDuration = ...
    PwmSmall = ...
    PwmNormal = ...
    PwmFull = ...
    StallCurrentSmall = ...
    StallCurrentNormal = ...
    StallCurrentFull = ...
    SlaveId = ...
    Baudrate = ...
    Force = ...
    SetReboot = ...
    Position = ...
    Speed = ...
    Led = ...
    Current = ...
    Turbo = ...
    TurboInterval = ...
    TurboDuration = ...
    AutoCalibration = ...
    ManualCalibration = ...
    ActionCmd = ...
    ActionNum = ...
    ActionData = ...
    GetNowPosition = ...
    GetNowSpeed = ...
    GetNowCurrent = ...
    GetMotorState = ...
    GetVoltage = ...
    GetButtonStatus = ...
    GetFwVersion = ...
    GetSn = ...
    GetThumbNormalForce1 = ...
    GetThumbTangentialForce1 = ...
    GetThumbTangentialDirection1 = ...
    GetThumbNormalForce2 = ...
    GetThumbTangentialForce2 = ...
    GetThumbTangentialDirection2 = ...
    GetThumbSelfProximity1 = ...
    GetThumbStatus = ...
    GetIndexNormalForce1 = ...
    GetIndexTangentialForce1 = ...
    GetIndexTangentialDirection1 = ...
    GetIndexNormalForce2 = ...
    GetIndexTangentialForce2 = ...
    GetIndexTangentialDirection2 = ...
    GetIndexNormalForce3 = ...
    GetIndexTangentialForce3 = ...
    GetIndexTangentialDirection3 = ...
    GetIndexSelfProximity1 = ...
    GetIndexSelfProximity2 = ...
    GetIndexMutualProximity = ...
    GetIndexStatus = ...
    GetMiddleNormalForce1 = ...
    GetMiddleTangentialForce1 = ...
    GetMiddleTangentialDirection1 = ...
    GetMiddleNormalForce2 = ...
    GetMiddleTangentialForce2 = ...
    GetMiddleTangentialDirection2 = ...
    GetMiddleNormalForce3 = ...
    GetMiddleTangentialForce3 = ...
    GetMiddleTangentialDirection3 = ...
    GetMiddleSelfProximity1 = ...
    GetMiddleSelfProximity2 = ...
    GetMiddleMutualProximity = ...
    GetMiddleStatus = ...
    GetRingNormalForce1 = ...
    GetRingTangentialForce1 = ...
    GetRingTangentialDirection1 = ...
    GetRingNormalForce2 = ...
    GetRingTangentialForce2 = ...
    GetRingTangentialDirection2 = ...
    GetRingNormalForce3 = ...
    GetRingTangentialForce3 = ...
    GetRingTangentialDirection3 = ...
    GetRingSelfProximity1 = ...
    GetRingSelfProximity2 = ...
    GetRingMutualProximity = ...
    GetRingStatus = ...
    GetPinkyNormalForce1 = ...
    GetPinkyTangentialForce1 = ...
    GetPinkyTangentialDirection1 = ...
    GetPinkyNormalForce2 = ...
    GetPinkyTangentialForce2 = ...
    GetPinkyTangentialDirection2 = ...
    GetPinkySelfProximity1 = ...
    GetPinkyMutualProximity1 = ...
    GetPinkyStatus = ...
    SetThumbReset = ...
    SetIndexReset = ...
    SetMiddleReset = ...
    SetRingReset = ...
    SetPinkyReset = ...
    SetThumbCalibration = ...
    SetIndexCalibration = ...
    SetMiddleCalibration = ...
    SetRingCalibration = ...
    SetPinkyCalibration = ...
    TouchEnabledThumb = ...
    TouchEnabledIndex = ...
    TouchEnabledMiddle = ...
    TouchEnabledRing = ...
    TouchEnabledPinky = ...
    GetTouchFwVersion = ...
    GetTouchRawDataThumb = ...
    GetTouchRawDataIndex = ...
    GetTouchRawDataMiddle = ...
    GetTouchRawDataRing = ...
    GetTouchRawDataPinky = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> RegisterAddressV1: ...

class RegisterAddressV2(Enum):
    EnterOta = ...
    SkuType = ...
    ResetGesture = ...
    ResetSettings = ...
    LEDSwitch = ...
    BuzzerSwitch = ...
    VibrationSwitch = ...
    SetFactoryKey = ...
    SetSn = ...
    ThumbFlexCurrent = ...
    ThumbAuxCurrent = ...
    IndexCurrent = ...
    MiddleCurrent = ...
    RingCurrent = ...
    PinkyCurrent = ...
    ThumbAuxLockCurrent = ...
    UnitMode = ...
    SetFingerMinPosition = ...
    SetFingerMaxPosition = ...
    SetFingerMaxSpeed = ...
    SetFingerMaxCurrent = ...
    GetFingerMinPosition = ...
    GetFingerMaxPosition = ...
    GetFingerMaxSpeed = ...
    GetFingerMaxCurrent = ...
    TouchVendor = ...
    SlaveId = ...
    Baudrate = ...
    BaudrateCAN = ...
    CanFdAbitSamplingRate = ...
    SetReboot = ...
    PositionAndTime = ...
    PositionAndSpeed = ...
    Speed = ...
    Current = ...
    Pwm = ...
    PositionAndTimeSingle = ...
    PositionAndSpeedSingle = ...
    SpeedSingle = ...
    CurrentSingle = ...
    PwmSingle = ...
    Led = ...
    Turbo = ...
    TurboInterval = ...
    AutoCalibration = ...
    ManualCalibration = ...
    PositionByPercent = ...
    ActionCmd = ...
    ActionNum = ...
    ActionData = ...
    GetNowPosition = ...
    GetNowSpeed = ...
    GetNowCurrent = ...
    GetMotorState = ...
    GetButtonStatus = ...
    GetFwVersion = ...
    GetSn = ...
    TouchEnabledThumb = ...
    TouchEnabledIndex = ...
    TouchEnabledMiddle = ...
    TouchEnabledRing = ...
    TouchEnabledPinky = ...
    SetThumbReset = ...
    SetIndexReset = ...
    SetMiddleReset = ...
    SetRingReset = ...
    SetPinkyReset = ...
    SetThumbCalibration = ...
    SetIndexCalibration = ...
    SetMiddleCalibration = ...
    SetRingCalibration = ...
    SetPinkyCalibration = ...
    GetTouchFwVersion = ...
    GetMultiFinger3DForce = ...
    GetMultiFingerProximity = ...
    GetMultiFingerTouchStatus = ...
    GetSingleFinger3DForce = ...
    GetTouchRawDataThumb = ...
    GetTouchRawDataIndex = ...
    GetTouchRawDataMiddle = ...
    GetTouchRawDataRing = ...
    GetTouchRawDataPinky = ...
    GetModulusSensorDataType = ...
    GetModulusTouchSummaryThumb = ...
    GetModulusTouchSummaryIndex = ...
    GetModulusTouchSummaryMiddle = ...
    GetModulusTouchSummaryRing = ...
    GetModulusTouchSummaryPinky = ...
    GetModulusTouchSummaryPalm = ...
    GetModulusTouchDataThumb = ...
    GetModulusTouchDataIndex = ...
    GetModulusTouchDataMiddle = ...
    GetModulusTouchDataRing = ...
    GetModulusTouchDataPinky = ...
    GetModulusTouchDataPalm = ...
    GetModulusFirmwareThumb = ...
    GetModulusFirmwareIndex = ...
    GetModulusFirmwareMiddle = ...
    GetModulusFirmwareRing = ...
    GetModulusFirmwarePinky = ...
    GetModulusFirmwarePalm = ...
    ModulusSwitchThumb = ...
    ModulusSwitchIndex = ...
    ModulusSwitchMiddle = ...
    ModulusSwitchRing = ...
    ModulusSwitchPinky = ...
    ModulusSwitchPalm = ...
    GetModulusSerialThumb = ...
    GetModulusSerialIndex = ...
    GetModulusSerialMiddle = ...
    GetModulusSerialRing = ...
    GetModulusSerialPinky = ...
    GetModulusSerialPalm = ...
    SetModulusCalibrationThumb = ...
    SetModulusCalibrationIndex = ...
    SetModulusCalibrationMiddle = ...
    SetModulusCalibrationRing = ...
    SetModulusCalibrationPinky = ...
    SetModulusCalibrationPalm = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> RegisterAddressV2: ...

class SkuType(Enum):
    MediumRight = ...
    MediumLeft = ...
    SmallRight = ...
    SmallLeft = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> SkuType: ...

class StarkError(Enum):
    Success = ...
    Unknown = ...
    InvalidParams = ...
    InvalidData = ...
    ParseFailed = ...
    AllocFailed = ...
    ReadFailed = ...
    OperationFailed = ...
    SystemIsBusy = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> StarkError: ...

class StarkHardwareType(Enum):
    Revo1Basic = ...
    Revo1Touch = ...
    Revo2Basic = ...
    Revo2Touch = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> StarkHardwareType: ...

class StarkModuleId(Enum):
    MCU = ...
    MTR = ...
    APP = ...
    SERIAL = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> StarkModuleId: ...

class StarkProtocolType(Enum):
    Modbus = ...
    Can = ...
    CanFd = ...
    EtherCAT = ...
    Protobuf = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> StarkProtocolType: ...

class TouchSensorStatus(Enum):
    Unknown = ...
    Normal = ...
    Abnormal = ...
    SensorCommError = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> TouchSensorStatus: ...

class TouchVendor(Enum):
    Unknown = ...
    Capacitive = ...
    Pressure = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> TouchVendor: ...

def auto_detect_device(port_name:typing.Optional[builtins.str]=None, quick:typing.Optional[builtins.bool]=True) -> typing.Any: ...

def auto_detect_modbus_revo1(port_name:typing.Optional[builtins.str]=None, quick:typing.Optional[builtins.bool]=True) -> typing.Any: ...

def auto_detect_modbus_revo2(port_name:typing.Optional[builtins.str]=None, quick:typing.Optional[builtins.bool]=True) -> typing.Any: ...

def available_usb_ports(vid:builtins.int, pid:builtins.int) -> typing.Any: ...

def canfd_init(master_id:builtins.int) -> PyDeviceContext: ...

def create_device_handler() -> PyDeviceContext: ...

def get_sdk_version() -> builtins.str: ...

def init_config(protocol_type:typing.Optional[StarkProtocolType]=StarkProtocolType.Modbus, level:typing.Optional[LogLevel]=LogLevel.Info) -> None: ...

def list_available_ports() -> typing.Any: ...

def modbus_close(client:PyDeviceContext) -> typing.Any: ...

def modbus_open(port_name:builtins.str, baudrate:Baudrate) -> typing.Any: ...

def set_can_rx_callback(func:typing.Any) -> None: ...

def set_can_tx_callback(func:typing.Any) -> None: ...

def set_modbus_read_holding_callback(func:typing.Any) -> None: ...

def set_modbus_read_input_callback(func:typing.Any) -> None: ...

def set_modbus_write_callback(func:typing.Any) -> None: ...

