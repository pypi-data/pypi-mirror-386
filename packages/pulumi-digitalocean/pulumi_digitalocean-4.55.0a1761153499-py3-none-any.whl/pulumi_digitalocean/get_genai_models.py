# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGenaiModelsResult',
    'AwaitableGetGenaiModelsResult',
    'get_genai_models',
    'get_genai_models_output',
]

@pulumi.output_type
class GetGenaiModelsResult:
    """
    A collection of values returned by getGenaiModels.
    """
    def __init__(__self__, filters=None, id=None, models=None, sorts=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if models and not isinstance(models, list):
            raise TypeError("Expected argument 'models' to be a list")
        pulumi.set(__self__, "models", models)
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        pulumi.set(__self__, "sorts", sorts)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetGenaiModelsFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def models(self) -> Sequence['outputs.GetGenaiModelsModelResult']:
        return pulumi.get(self, "models")

    @_builtins.property
    @pulumi.getter
    def sorts(self) -> Optional[Sequence['outputs.GetGenaiModelsSortResult']]:
        return pulumi.get(self, "sorts")


class AwaitableGetGenaiModelsResult(GetGenaiModelsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGenaiModelsResult(
            filters=self.filters,
            id=self.id,
            models=self.models,
            sorts=self.sorts)


def get_genai_models(filters: Optional[Sequence[Union['GetGenaiModelsFilterArgs', 'GetGenaiModelsFilterArgsDict']]] = None,
                     sorts: Optional[Sequence[Union['GetGenaiModelsSortArgs', 'GetGenaiModelsSortArgsDict']]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGenaiModelsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['sorts'] = sorts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean:index/getGenaiModels:getGenaiModels', __args__, opts=opts, typ=GetGenaiModelsResult).value

    return AwaitableGetGenaiModelsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        models=pulumi.get(__ret__, 'models'),
        sorts=pulumi.get(__ret__, 'sorts'))
def get_genai_models_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetGenaiModelsFilterArgs', 'GetGenaiModelsFilterArgsDict']]]]] = None,
                            sorts: Optional[pulumi.Input[Optional[Sequence[Union['GetGenaiModelsSortArgs', 'GetGenaiModelsSortArgsDict']]]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGenaiModelsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['sorts'] = sorts
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('digitalocean:index/getGenaiModels:getGenaiModels', __args__, opts=opts, typ=GetGenaiModelsResult)
    return __ret__.apply(lambda __response__: GetGenaiModelsResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        models=pulumi.get(__response__, 'models'),
        sorts=pulumi.get(__response__, 'sorts')))
