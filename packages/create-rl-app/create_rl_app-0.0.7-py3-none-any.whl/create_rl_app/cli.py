import argparse
import importlib.resources as pkg_resources
import json
import re
import shutil
import subprocess
from pathlib import Path

# ANSI color codes
CYAN = "\033[96m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
BOLD = "\033[1m"
RESET = "\033[0m"
LIGHT_GRAY = "\033[37m"


def get_vendored_jaxnasium_version():
    """Get the vendored jaxnasium version from .vendor_info"""
    try:
        files = pkg_resources.files("create_rl_app._vendored")
        vendor_info = files / "jaxnasium" / ".vendor_info"
        with vendor_info.open("r") as f:
            data = json.load(f)
            version = data["version"]
            return version.lstrip("v") if version.startswith("v") else version
    except (FileNotFoundError, ImportError, KeyError):
        raise RuntimeError("Vendored jaxnasium version not found")


def colored_input(prompt, default=""):
    """Display a colored input prompt with default value."""
    default_display = f" ({LIGHT_GRAY}{default}{RESET})" if default else ""
    user_input = input(
        f"{CYAN}{BOLD}?{RESET} {prompt}{YELLOW}{default_display}{RESET}: "
    ).strip()
    return user_input if user_input else default


def yes_no_prompt(question, default="y"):
    """Ask a yes/no question with colored output."""
    options = "(Y/n)" if default.lower() == "y" else "(y/N)"
    while True:
        response = colored_input(f"{question} {options}")
        if not response:
            return default.lower() == "y"
        if response.lower() in ["y", "yes"]:
            return True
        elif response.lower() in ["n", "no"]:
            return False
        print(f"{YELLOW}Please answer with 'y' or 'n'.{RESET}")


def update_pyproject_toml_file(project_path):
    toml_path = project_path / "pyproject.toml"
    if toml_path.exists():
        with toml_path.open("r") as file:
            content = file.read()

        # Update requires-python version
        content = re.sub(
            r"^requires-python\s*=\s*.*$",
            'requires-python = ">=3.11"',
            content,
            flags=re.MULTILINE,
        )

        # Update dependencies
        def update_dependencies(match):
            deps_str = match.group(1).strip()
            if deps_str == "[]":
                dependencies = []
            else:
                dependencies = re.findall(r'"([^"]+)"', deps_str)

            # Add jaxnasium with the required version
            dependencies.append(f"jaxnasium[algs]>={get_vendored_jaxnasium_version()}")
            return f"dependencies = {dependencies}"

        content = re.sub(
            r"^dependencies\s*=\s*(\[.*?\])",
            update_dependencies,
            content,
            flags=re.MULTILINE | re.DOTALL,
        )

        # UV-build expects a src folder by default. Remove this expectation here.
        if re.search(r'build-backend\s*=\s*["\']uv_build["\']', content):
            if not re.search(r"\[tool\.uv\.build-backend\]", content):
                content += "\n\n[tool.uv.build-backend]\nmodule-root = ''\n"

        with toml_path.open("w") as file:
            file.write(content)


def replace_init_file(src_path, import_env):
    """Clear the project __init__.py file (or create one if it does not exist)
    Fill it with "from projectname import ExampleEnv".
    """
    init_file_path = src_path / "__init__.py"
    with init_file_path.open("w") as file:
        file.write("# This file is auto-generated by jaxnasium\n")
        if import_env:
            file.write(f"from .{src_path.name}Env import ExampleEnv\n")


def copy_env_template(target_path: Path):
    target_path.parent.mkdir(parents=True, exist_ok=True)
    with pkg_resources.path(
        "create_rl_app.resources", "env_template.py"
    ) as template_path:
        shutil.copy(template_path, target_path)


def copy_algorithms_source(target_path: Path):
    target_path.mkdir(parents=True, exist_ok=True)
    with pkg_resources.path(
        "create_rl_app._vendored.jaxnasium", "algorithms"
    ) as template_path:
        # ignore the "utils" folder in "algorithms"
        ignored = ["utils", "_algorithm.py"]
        shutil.copytree(
            template_path,
            target_path,
            dirs_exist_ok=True,
            ignore=shutil.ignore_patterns(*ignored),
        )


def main():
    # Parse the project name argument
    parser = argparse.ArgumentParser(description="Initialize a new jaxnasium project.")
    parser.add_argument("projectname", help="The path to the new project directory.")
    parser.add_argument(
        "-y",
        "--yes",
        action="store_true",
        help="Automatically answer 'yes' to all prompts.",
    )
    parser.add_argument(
        "--env-template",
        type=str,
        choices=["true", "false"],
        help="Include environment template in the project (true/false).",
    )
    parser.add_argument(
        "--algorithm-source",
        type=str,
        choices=["true", "false"],
        help="Copy algorithm source code into the project instead of importing (true/false).",
    )
    parser.add_argument(
        "--init-algorithms",
        action="store_true",
        help="Skip project creation and only copy algorithm source code at the <projectname> location",
    )
    parser.add_argument(
        "--init-env",
        action="store_true",
        help="Skip project creation and only copy environment source code at the <projectname> location",
    )
    args = parser.parse_args()
    projectname = args.projectname

    if args.init_algorithms:
        copy_algorithms_source(Path(projectname))

    if args.init_env:
        copy_env_template(Path(projectname))

    if args.init_algorithms or args.init_env:
        return

    print(f"{CYAN}{BOLD}")
    print("  ██████╗██████╗ ███████╗ █████╗ ████████╗███████╗")
    print(" ██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝")
    print(" ██║     ██████╔╝█████╗  ███████║   ██║   █████╗")
    print(" ██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝")
    print(" ╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗")
    print("  ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝")
    print("")
    print(" ██████╗ ██╗               █████╗ ██████╗ ██████╗")
    print(" ██╔══██╗██║              ██╔══██╗██╔══██╗██╔══██╗")
    print(" ██████╔╝██║              ███████║██████╔╝██████╔╝")
    print(" ██╔══██╗██║              ██╔══██║██╔═══╝ ██╔═══╝")
    print(" ██║  ██║███████╗         ██║  ██║██║     ██║")
    print(" ╚═╝  ╚═╝╚══════╝         ╚═╝  ╚═╝╚═╝     ╚═╝")
    print(f"{RESET}")

    print(
        f"{LIGHT_GRAY}Setting up a new Jaxnasium project (v{get_vendored_jaxnasium_version()}){RESET}"
    )
    print(f"{LIGHT_GRAY}{'─' * 60}{RESET}\n")

    if any(char.isupper() for char in projectname):
        print(f"{YELLOW} Project name has been altered to lowercase{RESET}")
    projectname = projectname.lower()
    print(f"{LIGHT_GRAY}Project name: {projectname}{RESET}")

    ########## Questions ##########

    # Use CLI arguments if provided, otherwise prompt the user
    if args.env_template is not None:
        build_environment_template = args.env_template == "true"
    else:
        build_environment_template = args.yes or yes_no_prompt(
            "Would you like to include a environment template?", default="y"
        )

    if args.algorithm_source is not None:
        include_algorithm_source = args.algorithm_source == "true"
    else:
        include_algorithm_source = args.yes or yes_no_prompt(
            "Instead of importing, would you like to copy the algorithm source code into your project?",
            default="n",
        )

    # Display summary of choices
    print(f"\n{BOLD}📋 Project configuration summary:{RESET}")
    print(f"  • Project name: {projectname}")
    print(
        f"  • Include environment template: {'Yes' if build_environment_template else 'No'}"
    )
    print(
        f"  • Copy algorithm source code: {'Yes' if include_algorithm_source else 'No'}"
    )

    # Confirm setup
    if not args.yes:
        if not yes_no_prompt("\nDo you want to proceed with this configuration?"):
            print("Setup cancelled.")
            return

    #### SETUP PROJECT ####

    # Determine the command to run
    command = (
        ["uv", "init", "--package", projectname]
        if shutil.which("uv")
        else ["pipx", "run", "uv", "init", "--package", projectname]
    )

    # Run UV init command
    try:
        subprocess.run(command, check=True)
    except subprocess.CalledProcessError as e:
        raise RuntimeError(
            f"Failed to initialize the project: {e}. \n Most likely neither uv nor pipx are installed."
        )

    # Set project paths
    project_path = Path(projectname).resolve()
    src_path = project_path / "src" / project_path.name

    # UV defaults to src structure. Create a flat structure instead:
    if src_path.exists():
        shutil.move(src_path, project_path / project_path.name)
        if (project_path / "src").exists():
            shutil.rmtree(project_path / "src")
    src_path = project_path / project_path.name
    assert src_path.exists(), "Src path does not exist"

    # Update the dependencies in pyproject.toml and set the minimum python version
    update_pyproject_toml_file(project_path)

    # Update default __init__.py file generated by uv
    replace_init_file(src_path, build_environment_template)

    # Copy over the required files.
    if build_environment_template:
        file_path = src_path / f"{project_path.name}Env.py"
        copy_env_template(file_path)

    if include_algorithm_source:
        file_path = src_path / "algorithms"
        copy_algorithms_source(file_path)

    with pkg_resources.path(
        "create_rl_app.resources", "train_template.py"
    ) as template_path:
        shutil.copy(template_path, project_path / "train_example.py")

        # Read template content and apply regex replacements
        with open(template_path, "r") as file:
            content = file.read()

        # Replace import statements and environment creation based on configuration
        if build_environment_template:
            # Replace the jym.make call to use ExampleEnv
            content = re.sub(
                r'jym\.make\("CartPole-v1"\)',
                'jym.make("ExampleEnv")',
                content,
                flags=re.MULTILINE,
            )
            # Add import statement of example environment
            import_line = (
                f"from {project_path.name}.{project_path.name}Env import ExampleEnv\n"
            )
            content = import_line + content

        # Replace algorithm import if copying source code
        if include_algorithm_source:
            content = re.sub(
                r"^from jaxnasium\.algorithms.*$",
                f"from {project_path.name}.algorithms import PPO",
                content,
                flags=re.MULTILINE,
            )

        # Write the modified content
        with open(project_path / "train_example.py", "w") as file:
            file.write(content)


if __name__ == "__main__":
    main()
