# coding: utf-8

"""
    Workspace Data Service

    This page lists current APIs.  All v0.2 APIs are subject to change without notice.  Changelog at [https://github.com/DataBiosphere/terra-workspace-data-service/releases](https://github.com/DataBiosphere/terra-workspace-data-service/releases) 

    The version of the OpenAPI document: v0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wds_client.models.record_query_response import RecordQueryResponse

class TestRecordQueryResponse(unittest.TestCase):
    """RecordQueryResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RecordQueryResponse:
        """Test RecordQueryResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RecordQueryResponse`
        """
        model = RecordQueryResponse()
        if include_optional:
            return RecordQueryResponse(
                search_request = wds_client.models.search_request.SearchRequest(
                    offset = 0, 
                    limit = 0, 
                    sort = 'ASC', 
                    sort_attribute = '', 
                    filter = wds_client.models.search_filter.SearchFilter(
                        ids = [
                            ''
                            ], 
                        query = 'sample_id:12345', ), ),
                total_records = 56,
                records = [
                    wds_client.models.record_response.RecordResponse(
                        id = '', 
                        type = '', 
                        attributes = {
  "stringAttr": "string",
  "numericAttr": 123,
  "booleanAttr": true,
  "relationAttr": "terra-wds:/target-type/target-id",
  "fileAttr": "https://account_name.blob.core.windows.net/container-1/blob1",
  "arrayString": ["green", "red"],
  "arrayBoolean": [true, false],
  "arrayNumber": [12821.112, 0.12121211, 11],
  "arrayDate": ["2022-11-03"],
  "arrayDateTime": ["2022-11-03T04:36:20"],
  "arrayRelation": ["terra-wds:/target-type/target-id-1", "terra-wds:/target-type/target-id-2"],
  "arrayFile": ["drs://drs.example.org/file_id_1", "https://account_name.blob.core.windows.net/container-2/blob2"]
}
, )
                    ]
            )
        else:
            return RecordQueryResponse(
                search_request = wds_client.models.search_request.SearchRequest(
                    offset = 0, 
                    limit = 0, 
                    sort = 'ASC', 
                    sort_attribute = '', 
                    filter = wds_client.models.search_filter.SearchFilter(
                        ids = [
                            ''
                            ], 
                        query = 'sample_id:12345', ), ),
                total_records = 56,
                records = [
                    wds_client.models.record_response.RecordResponse(
                        id = '', 
                        type = '', 
                        attributes = {
  "stringAttr": "string",
  "numericAttr": 123,
  "booleanAttr": true,
  "relationAttr": "terra-wds:/target-type/target-id",
  "fileAttr": "https://account_name.blob.core.windows.net/container-1/blob1",
  "arrayString": ["green", "red"],
  "arrayBoolean": [true, false],
  "arrayNumber": [12821.112, 0.12121211, 11],
  "arrayDate": ["2022-11-03"],
  "arrayDateTime": ["2022-11-03T04:36:20"],
  "arrayRelation": ["terra-wds:/target-type/target-id-1", "terra-wds:/target-type/target-id-2"],
  "arrayFile": ["drs://drs.example.org/file_id_1", "https://account_name.blob.core.windows.net/container-2/blob2"]
}
, )
                    ],
        )
        """

    def testRecordQueryResponse(self):
        """Test RecordQueryResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
