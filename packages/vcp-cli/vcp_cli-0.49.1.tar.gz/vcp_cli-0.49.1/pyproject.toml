[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "vcp-cli"
version = "0.49.1"
description = "VCP CLI - A command-line interface (CLI) to the Chan Zuckerberg Initiative's Virtual Cell Platform (VCP)"
authors = [
    { name = "Chan Zuckerberg Initiative", email = "info@chanzuckerberg.com" }
]
dependencies = [
    "click>=8.0.0",
    "rich>=10.0.0",
    "pyyaml>=6.0.0",
    "requests>=2.0.0",
    "cryptography>=41.0.0",
    "authlib>=1.0.0",
    "werkzeug>=2.0.0",
    "boto3>=1.34.0",
    "PyJWT>=2.8.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "packaging>=20.0",
    "tqdm==4.67.1",
    "tabulate>=0.9.0",
]
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" }

[project.scripts]
vcp = "vcp.cli:cli"

[project.optional-dependencies]
model = [
    "mlflow>=2.0.0",
    "numpy>=1.25",
    "copier>=9.9.0",
    "GitPython>=3.1.0",
]
data = [
    "mypy-boto3-s3>=1.39.2",
]
benchmarks = [
    "cz-benchmarks~=0.14.0",
    "anndata>=0.9.0",
]
# Convenience group for full installation
all = [
    "vcp-cli[model,data,benchmarks]",
]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.6.0",
    "mypy>=0.900",
    "mypy-boto3-s3>=1.39.2",
    "packaging>=20.0",
    "pytest-coverage>=0.0",
    "Faker>=19.0.0",
    "requests-mock>=1.9.0",
    "pre-commit>=4.3.0",
    "pytest-xdist>=3.8.0",
]
docs = [
    "sphinx>=7",
    "myst-parser>=4.0.1",
    "linkify-it-py>=2.0.3",
    "sphinx-rtd-theme>=3.0.2",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.6.1",
    "sphinx-new-tab-link>=0.8.0",
    "sphinx-click>=6.1.0",
]
build = [
    "build>=1.3.0",
    "pyproject-parser[cli]>=0.13.0",
]

[tool.ruff]
preview = true
include = ["pyproject.toml", "src/**/*.py", "tests/**/*.py"]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
# Enable pycodestyle (E), Pyflakes (F), isort (I), comprehension (C4), bugbear (B) codes by default
# PLC0415 prevents imports inside functions and classes
select = ["E", "F", "I", "C4", "B", "PLC0415"]
ignore = [
    "E501",  # line too long (handled by formatter)
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["E", "F", "I", "C4", "B"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
# Exclude E2E tests by default (require APP_ENV)
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--ignore=tests/e2e",
    "--ignore=tests/test_http.py",  # Requires requests_mock
    "--ignore=tests/integration",  # Integration tests require real network access
]
markers = [
    "e2e: marks tests as end-to-end tests (require APP_ENV)",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.hatch.build.targets.sdist]
only-include = ["src/vcp"]

[tool.hatch.build.targets.wheel]
packages = ["src/vcp"]

[tool.hatch.build.force-include]
"src/vcp/config/config.yaml" = "src/vcp/config/config.yaml"


