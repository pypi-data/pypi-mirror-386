"use strict";(self.webpackChunkjupyterlab_commands_toolkit=self.webpackChunkjupyterlab_commands_toolkit||[]).push([[509],{509:(e,t,o)=>{o.r(t),o.d(t,{default:()=>s});const s={id:"jupyterlab-commands-toolkit:plugin",description:"A Jupyter extension that provides an AI toolkit for JupyterLab commands.",autoStart:!0,requires:[o(51).IEventListener],activate:(e,t)=>{console.log("JupyterLab extension jupyterlab-commands-toolkit is activated 2342521263!");const{commands:o}=e;t.addListener("https://events.jupyter.org/jupyterlab_command_toolkit/lab_command/v1",async(t,o,s)=>{var a,n,i,l;const c=s,d={requestId:c.requestId||"",success:!1};try{const t=await e.commands.execute(c.name,c.args);let o;if(d.success=!0,t&&"object"==typeof t&&((null===(n=null===(a=t.constructor)||void 0===a?void 0:a.name)||void 0===n?void 0:n.includes("Widget"))||t.id))o={type:(null===(i=t.constructor)||void 0===i?void 0:i.name)||"Widget",id:t.id,title:(null===(l=t.title)||void 0===l?void 0:l.label)||t.title,className:t.className};else try{o=JSON.parse(JSON.stringify(t))}catch(e){o=t?"[Complex object - cannot serialize]":"Command executed successfully"}d.result=o}catch(e){d.success=!1,d.error=e instanceof Error?e.message:String(e)}c.requestId&&t.emit({schema_id:"https://events.jupyter.org/jupyterlab_command_toolkit/lab_command_result/v1",version:"1",data:d})}),o.addCommand("jupyterlab-commands-toolkit:list-all-commands",{label:"List All Commands",describedBy:{args:{}},execute:async e=>{const t=e.query,s=[],a=o.listCommands();for(const e of a){const a=await o.describedBy(e),n=o.label(e),i=o.caption(e),l=o.usage(e),c={id:e,label:n||void 0,caption:i||void 0,description:l||void 0,args:(null==a?void 0:a.args)||void 0};if(t){const o=t.toLowerCase();(e.toLowerCase().includes(o)||(null==n?void 0:n.toLowerCase().includes(o))||(null==i?void 0:i.toLowerCase().includes(o))||(null==l?void 0:l.toLowerCase().includes(o)))&&s.push(c)}else s.push(c)}return{success:!0,commandCount:s.length,commands:s}}})}}}}]);