#!/usr/bin/env python
"""
hdp.py

Heatwave Diagnostics Package (HDP)

Entry point for package.

Developer: Cameron Cummins
Contact: cameron.cummins@utexas.edu
"""
from hdp.graphics.notebook import create_notebook
from os.path import isdir
import hdp.measure
import hdp.threshold
import hdp.metric
import numpy as np
import sys


def generate_sample_data(output_dir):
    if not isdir(output_dir):
        raise RuntimeError(f"Output directory '{output_dir}' does not exist!")

    sample_control_temp = hdp.utils.generate_test_control_dataarray(add_noise=True)
    sample_warming_temp = hdp.utils.generate_test_warming_dataarray(add_noise=True)

    baseline_measures = hdp.measure.format_standard_measures(
        temp_datasets=[sample_control_temp]
    )
    test_measures = hdp.measure.format_standard_measures(
        temp_datasets=[sample_warming_temp]
    )

    percentiles = np.arange(0.9, 1.0, 0.01)

    thresholds_dataset = hdp.threshold.compute_thresholds(
        baseline_measures,
        percentiles
    )

    definitions = [[3,0,0], [3,1,1], [4,0,0], [4,1,1], [5,0,0], [5,1,1]]

    metrics_dataset = hdp.metric.compute_group_metrics(test_measures, thresholds_dataset, definitions, include_threshold=True)
    metrics_dataset.to_netcdf(f"{output_dir}/sample_hw_metrics.nc", mode='w')

    figure_notebook = create_notebook(metrics_dataset)
    figure_notebook.save_notebook(f"{output_dir}/sample_hw_summary_figures.ipynb")

    sample_control_temp = sample_control_temp.to_dataset()
    sample_control_temp.attrs["description"] = "Mock control temperature dataset generated by HDP for unit testing."
    sample_control_temp.to_netcdf(f"{output_dir}/sample_control_temp.nc", mode='w')

    sample_warming_temp = sample_warming_temp.to_dataset()
    sample_warming_temp.attrs["description"] = "Mock temperature dataset with warming trend generated by HDP for unit testing."
    sample_warming_temp.to_netcdf(f"{output_dir}/sample_warming_temp.nc", mode='w')

if __name__ == "__main__":
    print("Generating testing data and simulating a full data-to-figure workflow: ")
    if len(sys.argv) != 2:
        assert Exception("Please specifiy the path to output sample data and results to.")
    generate_sample_data(sys.argv[1])
    print("Done!")