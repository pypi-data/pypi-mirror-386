"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .distributedsummary import DistributedSummary, DistributedSummaryTypedDict
from .workertypes import WorkerTypes
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import (
    FieldMetadata,
    QueryParamMetadata,
    validate_open_enum,
)
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetSummaryRequestTypedDict(TypedDict):
    mode: NotRequired[WorkerTypes]
    r"""Filter for limiting the response by Cribl product: Cribl Stream (<code>worker</code>) or Cribl Edge (<code>managed-edge</code>)."""


class GetSummaryRequest(BaseModel):
    mode: Annotated[
        Annotated[Optional[WorkerTypes], PlainValidator(validate_open_enum(False))],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter for limiting the response by Cribl product: Cribl Stream (<code>worker</code>) or Cribl Edge (<code>managed-edge</code>)."""


class GetSummaryResponseTypedDict(TypedDict):
    r"""a list of DistributedSummary objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[DistributedSummaryTypedDict]]


class GetSummaryResponse(BaseModel):
    r"""a list of DistributedSummary objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[DistributedSummary]] = None
