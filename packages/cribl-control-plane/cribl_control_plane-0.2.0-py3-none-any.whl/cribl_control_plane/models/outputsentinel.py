"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputSentinelType(str, Enum):
    SENTINEL = "sentinel"


class OutputSentinelExtraHTTPHeaderTypedDict(TypedDict):
    value: str
    name: NotRequired[str]


class OutputSentinelExtraHTTPHeader(BaseModel):
    value: str

    name: Optional[str] = None


class OutputSentinelFailedRequestLoggingMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    PAYLOAD = "payload"
    PAYLOAD_AND_HEADERS = "payloadAndHeaders"
    NONE = "none"


class OutputSentinelResponseRetrySettingTypedDict(TypedDict):
    http_status: float
    r"""The HTTP response status code that will trigger retries"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputSentinelResponseRetrySetting(BaseModel):
    http_status: Annotated[float, pydantic.Field(alias="httpStatus")]
    r"""The HTTP response status code that will trigger retries"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputSentinelTimeoutRetrySettingsTypedDict(TypedDict):
    timeout_retry: NotRequired[bool]
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputSentinelTimeoutRetrySettings(BaseModel):
    timeout_retry: Annotated[Optional[bool], pydantic.Field(alias="timeoutRetry")] = (
        False
    )

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputSentinelBackpressureBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when all receivers are exerting backpressure"""

    BLOCK = "block"
    DROP = "drop"
    QUEUE = "queue"


class AuthType(str, Enum, metaclass=utils.OpenEnumMeta):
    OAUTH = "oauth"


class EndpointConfiguration(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Enter the data collection endpoint URL or the individual ID"""

    URL = "url"
    ID = "ID"


class OutputSentinelFormat(str, Enum, metaclass=utils.OpenEnumMeta):
    NDJSON = "ndjson"
    JSON_ARRAY = "json_array"
    CUSTOM = "custom"
    ADVANCED = "advanced"


class OutputSentinelCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    NONE = "none"
    GZIP = "gzip"


class OutputSentinelQueueFullBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    BLOCK = "block"
    DROP = "drop"


class OutputSentinelMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    ERROR = "error"
    BACKPRESSURE = "backpressure"
    ALWAYS = "always"


class OutputSentinelPqControlsTypedDict(TypedDict):
    pass


class OutputSentinelPqControls(BaseModel):
    pass


class OutputSentinelTypedDict(TypedDict):
    type: OutputSentinelType
    login_url: str
    r"""URL for OAuth"""
    secret: str
    r"""Secret parameter value to pass in request body"""
    client_id: str
    r"""JavaScript expression to compute the Client ID for the Azure application. Can be a constant."""
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    keep_alive: NotRequired[bool]
    r"""Disable to close the connection immediately after sending the outgoing request"""
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking"""
    max_payload_size_kb: NotRequired[float]
    r"""Maximum size (KB) of the request body (defaults to the API's maximum limit of 1000 KB)"""
    max_payload_events: NotRequired[float]
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""
    compress: NotRequired[bool]
    r"""Compress the payload body before sending"""
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""
    extra_http_headers: NotRequired[List[OutputSentinelExtraHTTPHeaderTypedDict]]
    r"""Headers to add to all events. You can also add headers dynamically on a per-event basis in the __headers field, as explained in [Cribl Docs](https://docs.cribl.io/stream/destinations-webhook/#internal-fields)."""
    use_round_robin_dns: NotRequired[bool]
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""
    failed_request_logging_mode: NotRequired[OutputSentinelFailedRequestLoggingMode]
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""
    safe_headers: NotRequired[List[str]]
    r"""List of headers that are safe to log in plain text"""
    response_retry_settings: NotRequired[
        List[OutputSentinelResponseRetrySettingTypedDict]
    ]
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""
    timeout_retry_settings: NotRequired[OutputSentinelTimeoutRetrySettingsTypedDict]
    response_honor_retry_after_header: NotRequired[bool]
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""
    on_backpressure: NotRequired[OutputSentinelBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    auth_type: NotRequired[AuthType]
    scope: NotRequired[str]
    r"""Scope to pass in the OAuth request"""
    endpoint_url_configuration: NotRequired[EndpointConfiguration]
    r"""Enter the data collection endpoint URL or the individual ID"""
    total_memory_limit_kb: NotRequired[float]
    r"""Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced."""
    description: NotRequired[str]
    format_: NotRequired[OutputSentinelFormat]
    custom_source_expression: NotRequired[str]
    r"""Expression to evaluate on events to generate output. Example: `raw=${_raw}`. See [Cribl Docs](https://docs.cribl.io/stream/destinations-webhook#custom-format) for other examples. If empty, the full event is sent as stringified JSON."""
    custom_drop_when_null: NotRequired[bool]
    r"""Whether to drop events when the source expression evaluates to null"""
    custom_event_delimiter: NotRequired[str]
    r"""Delimiter string to insert between individual events. Defaults to newline character."""
    custom_content_type: NotRequired[str]
    r"""Content type to use for request. Defaults to application/x-ndjson. Any content types set in Advanced Settings > Extra HTTP headers will override this entry."""
    custom_payload_expression: NotRequired[str]
    r"""Expression specifying how to format the payload for each batch. To reference the events to send, use the `${events}` variable. Example expression: `{ \"items\" : [${events}] }` would send the batch inside a JSON object."""
    advanced_content_type: NotRequired[str]
    r"""HTTP content-type header value"""
    format_event_code: NotRequired[str]
    r"""Custom JavaScript code to format incoming event data accessible through the __e variable. The formatted content is added to (__e['__eventOut']) if available. Otherwise, the original event is serialized as JSON. Caution: This function is evaluated in an unprotected context, allowing you to execute almost any JavaScript code."""
    format_payload_code: NotRequired[str]
    r"""Optional JavaScript code to format the payload sent to the Destination. The payload, containing a batch of formatted events, is accessible through the __e['payload'] variable. The formatted payload is returned in the __e['__payloadOut'] variable. Caution: This function is evaluated in an unprotected context, allowing you to execute almost any JavaScript code."""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputSentinelCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputSentinelQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputSentinelMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputSentinelPqControlsTypedDict]
    url: NotRequired[str]
    r"""URL to send events to. Can be overwritten by an event's __url field."""
    dcr_id: NotRequired[str]
    r"""Immutable ID for the Data Collection Rule (DCR)"""
    dce_endpoint: NotRequired[str]
    r"""Data collection endpoint (DCE) URL. In the format: `https://<Endpoint-Name>-<Identifier>.<Region>.ingest.monitor.azure.com`"""
    stream_name: NotRequired[str]
    r"""The name of the stream (Sentinel table) in which to store the events"""


class OutputSentinel(BaseModel):
    type: OutputSentinelType

    login_url: Annotated[str, pydantic.Field(alias="loginUrl")]
    r"""URL for OAuth"""

    secret: str
    r"""Secret parameter value to pass in request body"""

    client_id: str
    r"""JavaScript expression to compute the Client ID for the Azure application. Can be a constant."""

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    keep_alive: Annotated[Optional[bool], pydantic.Field(alias="keepAlive")] = True
    r"""Disable to close the connection immediately after sending the outgoing request"""

    concurrency: Optional[float] = 5
    r"""Maximum number of ongoing requests before blocking"""

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = 1000
    r"""Maximum size (KB) of the request body (defaults to the API's maximum limit of 1000 KB)"""

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = 0
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""

    compress: Optional[bool] = True
    r"""Compress the payload body before sending"""

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 30
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 1
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""

    extra_http_headers: Annotated[
        Optional[List[OutputSentinelExtraHTTPHeader]],
        pydantic.Field(alias="extraHttpHeaders"),
    ] = None
    r"""Headers to add to all events. You can also add headers dynamically on a per-event basis in the __headers field, as explained in [Cribl Docs](https://docs.cribl.io/stream/destinations-webhook/#internal-fields)."""

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = False
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""

    failed_request_logging_mode: Annotated[
        Annotated[
            Optional[OutputSentinelFailedRequestLoggingMode],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="failedRequestLoggingMode"),
    ] = OutputSentinelFailedRequestLoggingMode.NONE
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    safe_headers: Annotated[
        Optional[List[str]], pydantic.Field(alias="safeHeaders")
    ] = None
    r"""List of headers that are safe to log in plain text"""

    response_retry_settings: Annotated[
        Optional[List[OutputSentinelResponseRetrySetting]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""

    timeout_retry_settings: Annotated[
        Optional[OutputSentinelTimeoutRetrySettings],
        pydantic.Field(alias="timeoutRetrySettings"),
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = False
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""

    on_backpressure: Annotated[
        Annotated[
            Optional[OutputSentinelBackpressureBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputSentinelBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    auth_type: Annotated[
        Annotated[Optional[AuthType], PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="authType"),
    ] = None

    scope: Optional[str] = "https://monitor.azure.com/.default"
    r"""Scope to pass in the OAuth request"""

    endpoint_url_configuration: Annotated[
        Annotated[
            Optional[EndpointConfiguration], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="endpointURLConfiguration"),
    ] = EndpointConfiguration.URL
    r"""Enter the data collection endpoint URL or the individual ID"""

    total_memory_limit_kb: Annotated[
        Optional[float], pydantic.Field(alias="totalMemoryLimitKB")
    ] = None
    r"""Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced."""

    description: Optional[str] = None

    format_: Annotated[
        Annotated[
            Optional[OutputSentinelFormat], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="format"),
    ] = None

    custom_source_expression: Annotated[
        Optional[str], pydantic.Field(alias="customSourceExpression")
    ] = "__httpOut"
    r"""Expression to evaluate on events to generate output. Example: `raw=${_raw}`. See [Cribl Docs](https://docs.cribl.io/stream/destinations-webhook#custom-format) for other examples. If empty, the full event is sent as stringified JSON."""

    custom_drop_when_null: Annotated[
        Optional[bool], pydantic.Field(alias="customDropWhenNull")
    ] = False
    r"""Whether to drop events when the source expression evaluates to null"""

    custom_event_delimiter: Annotated[
        Optional[str], pydantic.Field(alias="customEventDelimiter")
    ] = "\n"
    r"""Delimiter string to insert between individual events. Defaults to newline character."""

    custom_content_type: Annotated[
        Optional[str], pydantic.Field(alias="customContentType")
    ] = "application/x-ndjson"
    r"""Content type to use for request. Defaults to application/x-ndjson. Any content types set in Advanced Settings > Extra HTTP headers will override this entry."""

    custom_payload_expression: Annotated[
        Optional[str], pydantic.Field(alias="customPayloadExpression")
    ] = "`${events}`"
    r"""Expression specifying how to format the payload for each batch. To reference the events to send, use the `${events}` variable. Example expression: `{ \"items\" : [${events}] }` would send the batch inside a JSON object."""

    advanced_content_type: Annotated[
        Optional[str], pydantic.Field(alias="advancedContentType")
    ] = "application/json"
    r"""HTTP content-type header value"""

    format_event_code: Annotated[
        Optional[str], pydantic.Field(alias="formatEventCode")
    ] = None
    r"""Custom JavaScript code to format incoming event data accessible through the __e variable. The formatted content is added to (__e['__eventOut']) if available. Otherwise, the original event is serialized as JSON. Caution: This function is evaluated in an unprotected context, allowing you to execute almost any JavaScript code."""

    format_payload_code: Annotated[
        Optional[str], pydantic.Field(alias="formatPayloadCode")
    ] = None
    r"""Optional JavaScript code to format the payload sent to the Destination. The payload, containing a batch of formatted events, is accessible through the __e['payload'] variable. The formatted payload is returned in the __e['__payloadOut'] variable. Caution: This function is evaluated in an unprotected context, allowing you to execute almost any JavaScript code."""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Annotated[
            Optional[OutputSentinelCompression],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqCompress"),
    ] = OutputSentinelCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Annotated[
            Optional[OutputSentinelQueueFullBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputSentinelQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Annotated[
            Optional[OutputSentinelMode], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="pqMode"),
    ] = OutputSentinelMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputSentinelPqControls], pydantic.Field(alias="pqControls")
    ] = None

    url: Optional[str] = None
    r"""URL to send events to. Can be overwritten by an event's __url field."""

    dcr_id: Annotated[Optional[str], pydantic.Field(alias="dcrID")] = None
    r"""Immutable ID for the Data Collection Rule (DCR)"""

    dce_endpoint: Annotated[Optional[str], pydantic.Field(alias="dceEndpoint")] = None
    r"""Data collection endpoint (DCE) URL. In the format: `https://<Endpoint-Name>-<Identifier>.<Region>.ingest.monitor.azure.com`"""

    stream_name: Annotated[Optional[str], pydantic.Field(alias="streamName")] = None
    r"""The name of the stream (Sentinel table) in which to store the events"""
