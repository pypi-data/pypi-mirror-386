"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane.types import BaseModel
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class Line3TypedDict(TypedDict):
    content: str
    new_number: float
    old_number: float


class Line3(BaseModel):
    content: str

    new_number: Annotated[float, pydantic.Field(alias="newNumber")]

    old_number: Annotated[float, pydantic.Field(alias="oldNumber")]


class Line2TypedDict(TypedDict):
    content: str
    new_number: float


class Line2(BaseModel):
    content: str

    new_number: Annotated[float, pydantic.Field(alias="newNumber")]


class Line1TypedDict(TypedDict):
    content: str
    old_number: float


class Line1(BaseModel):
    content: str

    old_number: Annotated[float, pydantic.Field(alias="oldNumber")]


LineUnionTypedDict = TypeAliasType(
    "LineUnionTypedDict", Union[Line1TypedDict, Line2TypedDict, Line3TypedDict]
)


LineUnion = TypeAliasType("LineUnion", Union[Line1, Line2, Line3])


class BlockTypedDict(TypedDict):
    header: str
    lines: List[LineUnionTypedDict]
    new_start_line: float
    old_start_line: float
    old_start_line2: NotRequired[float]


class Block(BaseModel):
    header: str

    lines: List[LineUnion]

    new_start_line: Annotated[float, pydantic.Field(alias="newStartLine")]

    old_start_line: Annotated[float, pydantic.Field(alias="oldStartLine")]

    old_start_line2: Annotated[
        Optional[float], pydantic.Field(alias="oldStartLine2")
    ] = None


ChecksumBeforeTypedDict = TypeAliasType(
    "ChecksumBeforeTypedDict", Union[str, List[str]]
)


ChecksumBefore = TypeAliasType("ChecksumBefore", Union[str, List[str]])


OldModeTypedDict = TypeAliasType("OldModeTypedDict", Union[str, List[str]])


OldMode = TypeAliasType("OldMode", Union[str, List[str]])


class DiffFilesTypedDict(TypedDict):
    added_lines: float
    blocks: List[BlockTypedDict]
    deleted_lines: float
    is_combined: bool
    is_git_diff: bool
    language: str
    new_name: str
    old_name: str
    changed_percentage: NotRequired[float]
    checksum_after: NotRequired[str]
    checksum_before: NotRequired[ChecksumBeforeTypedDict]
    deleted_file_mode: NotRequired[str]
    is_binary: NotRequired[bool]
    is_copy: NotRequired[bool]
    is_deleted: NotRequired[bool]
    is_new: NotRequired[bool]
    is_rename: NotRequired[bool]
    is_too_big: NotRequired[bool]
    mode: NotRequired[str]
    new_file_mode: NotRequired[str]
    new_mode: NotRequired[str]
    old_mode: NotRequired[OldModeTypedDict]
    unchanged_percentage: NotRequired[float]


class DiffFiles(BaseModel):
    added_lines: Annotated[float, pydantic.Field(alias="addedLines")]

    blocks: List[Block]

    deleted_lines: Annotated[float, pydantic.Field(alias="deletedLines")]

    is_combined: Annotated[bool, pydantic.Field(alias="isCombined")]

    is_git_diff: Annotated[bool, pydantic.Field(alias="isGitDiff")]

    language: str

    new_name: Annotated[str, pydantic.Field(alias="newName")]

    old_name: Annotated[str, pydantic.Field(alias="oldName")]

    changed_percentage: Annotated[
        Optional[float], pydantic.Field(alias="changedPercentage")
    ] = None

    checksum_after: Annotated[Optional[str], pydantic.Field(alias="checksumAfter")] = (
        None
    )

    checksum_before: Annotated[
        Optional[ChecksumBefore], pydantic.Field(alias="checksumBefore")
    ] = None

    deleted_file_mode: Annotated[
        Optional[str], pydantic.Field(alias="deletedFileMode")
    ] = None

    is_binary: Annotated[Optional[bool], pydantic.Field(alias="isBinary")] = None

    is_copy: Annotated[Optional[bool], pydantic.Field(alias="isCopy")] = None

    is_deleted: Annotated[Optional[bool], pydantic.Field(alias="isDeleted")] = None

    is_new: Annotated[Optional[bool], pydantic.Field(alias="isNew")] = None

    is_rename: Annotated[Optional[bool], pydantic.Field(alias="isRename")] = None

    is_too_big: Annotated[Optional[bool], pydantic.Field(alias="isTooBig")] = None

    mode: Optional[str] = None

    new_file_mode: Annotated[Optional[str], pydantic.Field(alias="newFileMode")] = None

    new_mode: Annotated[Optional[str], pydantic.Field(alias="newMode")] = None

    old_mode: Annotated[Optional[OldMode], pydantic.Field(alias="oldMode")] = None

    unchanged_percentage: Annotated[
        Optional[float], pydantic.Field(alias="unchangedPercentage")
    ] = None
