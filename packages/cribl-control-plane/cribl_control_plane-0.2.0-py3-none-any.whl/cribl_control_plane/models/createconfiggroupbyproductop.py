"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .configgroup import ConfigGroup, ConfigGroupTypedDict
from .productscore import ProductsCore
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import (
    FieldMetadata,
    PathParamMetadata,
    RequestMetadata,
    validate_open_enum,
)
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateConfigGroupByProductRequestTypedDict(TypedDict):
    product: ProductsCore
    r"""Name of the Cribl product to add the Worker Group or Edge Fleet to."""
    config_group: ConfigGroupTypedDict
    r"""ConfigGroup object"""


class CreateConfigGroupByProductRequest(BaseModel):
    product: Annotated[
        Annotated[ProductsCore, PlainValidator(validate_open_enum(False))],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Name of the Cribl product to add the Worker Group or Edge Fleet to."""

    config_group: Annotated[
        ConfigGroup,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
    r"""ConfigGroup object"""


class CreateConfigGroupByProductResponseTypedDict(TypedDict):
    r"""a list of ConfigGroup objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[ConfigGroupTypedDict]]


class CreateConfigGroupByProductResponse(BaseModel):
    r"""a list of ConfigGroup objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[ConfigGroup]] = None
