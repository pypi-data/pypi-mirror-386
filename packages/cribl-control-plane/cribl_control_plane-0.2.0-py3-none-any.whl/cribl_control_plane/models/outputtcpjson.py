"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputTcpjsonType(str, Enum):
    TCPJSON = "tcpjson"


class OutputTcpjsonCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the data before sending"""

    NONE = "none"
    GZIP = "gzip"


class OutputTcpjsonMinimumTLSVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    TL_SV1 = "TLSv1"
    TL_SV1_1 = "TLSv1.1"
    TL_SV1_2 = "TLSv1.2"
    TL_SV1_3 = "TLSv1.3"


class OutputTcpjsonMaximumTLSVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    TL_SV1 = "TLSv1"
    TL_SV1_1 = "TLSv1.1"
    TL_SV1_2 = "TLSv1.2"
    TL_SV1_3 = "TLSv1.3"


class OutputTcpjsonTLSSettingsClientSideTypedDict(TypedDict):
    disabled: NotRequired[bool]
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates that are not authorized by a CA in the CA certificate path, or by another
    trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
    """
    servername: NotRequired[str]
    r"""Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address."""
    certificate_name: NotRequired[str]
    r"""The name of the predefined certificate"""
    ca_path: NotRequired[str]
    r"""Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS."""
    priv_key_path: NotRequired[str]
    r"""Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS."""
    cert_path: NotRequired[str]
    r"""Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS."""
    passphrase: NotRequired[str]
    r"""Passphrase to use to decrypt private key"""
    min_version: NotRequired[OutputTcpjsonMinimumTLSVersion]
    max_version: NotRequired[OutputTcpjsonMaximumTLSVersion]


class OutputTcpjsonTLSSettingsClientSide(BaseModel):
    disabled: Optional[bool] = True

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates that are not authorized by a CA in the CA certificate path, or by another
    trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
    """

    servername: Optional[str] = None
    r"""Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address."""

    certificate_name: Annotated[
        Optional[str], pydantic.Field(alias="certificateName")
    ] = None
    r"""The name of the predefined certificate"""

    ca_path: Annotated[Optional[str], pydantic.Field(alias="caPath")] = None
    r"""Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS."""

    priv_key_path: Annotated[Optional[str], pydantic.Field(alias="privKeyPath")] = None
    r"""Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS."""

    cert_path: Annotated[Optional[str], pydantic.Field(alias="certPath")] = None
    r"""Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS."""

    passphrase: Optional[str] = None
    r"""Passphrase to use to decrypt private key"""

    min_version: Annotated[
        Annotated[
            Optional[OutputTcpjsonMinimumTLSVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="minVersion"),
    ] = None

    max_version: Annotated[
        Annotated[
            Optional[OutputTcpjsonMaximumTLSVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="maxVersion"),
    ] = None


class OutputTcpjsonBackpressureBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when all receivers are exerting backpressure"""

    BLOCK = "block"
    DROP = "drop"
    QUEUE = "queue"


class OutputTcpjsonAuthenticationMethod(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate"""

    MANUAL = "manual"
    SECRET = "secret"


class OutputTcpjsonTLS(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Whether to inherit TLS configs from group setting or disable TLS"""

    INHERIT = "inherit"
    OFF = "off"


class OutputTcpjsonHostTypedDict(TypedDict):
    host: str
    r"""The hostname of the receiver"""
    port: float
    r"""The port to connect to on the provided host"""
    tls: NotRequired[OutputTcpjsonTLS]
    r"""Whether to inherit TLS configs from group setting or disable TLS"""
    servername: NotRequired[str]
    r"""Servername to use if establishing a TLS connection. If not specified, defaults to connection host (if not an IP); otherwise, uses the global TLS settings."""
    weight: NotRequired[float]
    r"""Assign a weight (>0) to each endpoint to indicate its traffic-handling capability"""


class OutputTcpjsonHost(BaseModel):
    host: str
    r"""The hostname of the receiver"""

    port: float
    r"""The port to connect to on the provided host"""

    tls: Annotated[
        Optional[OutputTcpjsonTLS], PlainValidator(validate_open_enum(False))
    ] = OutputTcpjsonTLS.INHERIT
    r"""Whether to inherit TLS configs from group setting or disable TLS"""

    servername: Optional[str] = None
    r"""Servername to use if establishing a TLS connection. If not specified, defaults to connection host (if not an IP); otherwise, uses the global TLS settings."""

    weight: Optional[float] = 1
    r"""Assign a weight (>0) to each endpoint to indicate its traffic-handling capability"""


class OutputTcpjsonPqCompressCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    NONE = "none"
    GZIP = "gzip"


class OutputTcpjsonQueueFullBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    BLOCK = "block"
    DROP = "drop"


class OutputTcpjsonMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    ERROR = "error"
    BACKPRESSURE = "backpressure"
    ALWAYS = "always"


class OutputTcpjsonPqControlsTypedDict(TypedDict):
    pass


class OutputTcpjsonPqControls(BaseModel):
    pass


class OutputTcpjsonTypedDict(TypedDict):
    type: OutputTcpjsonType
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    load_balanced: NotRequired[bool]
    r"""Use load-balanced destinations"""
    compression: NotRequired[OutputTcpjsonCompression]
    r"""Codec to use to compress the data before sending"""
    log_failed_requests: NotRequired[bool]
    r"""Use to troubleshoot issues with sending data"""
    throttle_rate_per_sec: NotRequired[str]
    r"""Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling."""
    tls: NotRequired[OutputTcpjsonTLSSettingsClientSideTypedDict]
    connection_timeout: NotRequired[float]
    r"""Amount of time (milliseconds) to wait for the connection to establish before retrying"""
    write_timeout: NotRequired[float]
    r"""Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead"""
    token_ttl_minutes: NotRequired[float]
    r"""The number of minutes before the internally generated authentication token expires, valid values between 1 and 60"""
    send_header: NotRequired[bool]
    r"""Upon connection, send a header-like record containing the auth token and other metadata.This record will not contain an actual event â€“ only subsequent records will."""
    on_backpressure: NotRequired[OutputTcpjsonBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    auth_type: NotRequired[OutputTcpjsonAuthenticationMethod]
    r"""Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate"""
    description: NotRequired[str]
    host: NotRequired[str]
    r"""The hostname of the receiver"""
    port: NotRequired[float]
    r"""The port to connect to on the provided host"""
    exclude_self: NotRequired[bool]
    r"""Exclude all IPs of the current host from the list of any resolved hostnames"""
    hosts: NotRequired[List[OutputTcpjsonHostTypedDict]]
    r"""Set of hosts to load-balance data to"""
    dns_resolve_period_sec: NotRequired[float]
    r"""The interval in which to re-resolve any hostnames and pick up destinations from A records"""
    load_balance_stats_period_sec: NotRequired[float]
    r"""How far back in time to keep traffic stats for load balancing purposes"""
    max_concurrent_senders: NotRequired[float]
    r"""Maximum number of concurrent connections (per Worker Process). A random set of IPs will be picked on every DNS resolution period. Use 0 for unlimited."""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputTcpjsonPqCompressCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputTcpjsonQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputTcpjsonMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputTcpjsonPqControlsTypedDict]
    auth_token: NotRequired[str]
    r"""Optional authentication token to include as part of the connection header"""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""


class OutputTcpjson(BaseModel):
    type: OutputTcpjsonType

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    load_balanced: Annotated[Optional[bool], pydantic.Field(alias="loadBalanced")] = (
        True
    )
    r"""Use load-balanced destinations"""

    compression: Annotated[
        Optional[OutputTcpjsonCompression], PlainValidator(validate_open_enum(False))
    ] = OutputTcpjsonCompression.GZIP
    r"""Codec to use to compress the data before sending"""

    log_failed_requests: Annotated[
        Optional[bool], pydantic.Field(alias="logFailedRequests")
    ] = False
    r"""Use to troubleshoot issues with sending data"""

    throttle_rate_per_sec: Annotated[
        Optional[str], pydantic.Field(alias="throttleRatePerSec")
    ] = "0"
    r"""Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling."""

    tls: Optional[OutputTcpjsonTLSSettingsClientSide] = None

    connection_timeout: Annotated[
        Optional[float], pydantic.Field(alias="connectionTimeout")
    ] = 10000
    r"""Amount of time (milliseconds) to wait for the connection to establish before retrying"""

    write_timeout: Annotated[Optional[float], pydantic.Field(alias="writeTimeout")] = (
        60000
    )
    r"""Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead"""

    token_ttl_minutes: Annotated[
        Optional[float], pydantic.Field(alias="tokenTTLMinutes")
    ] = 60
    r"""The number of minutes before the internally generated authentication token expires, valid values between 1 and 60"""

    send_header: Annotated[Optional[bool], pydantic.Field(alias="sendHeader")] = True
    r"""Upon connection, send a header-like record containing the auth token and other metadata.This record will not contain an actual event â€“ only subsequent records will."""

    on_backpressure: Annotated[
        Annotated[
            Optional[OutputTcpjsonBackpressureBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputTcpjsonBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    auth_type: Annotated[
        Annotated[
            Optional[OutputTcpjsonAuthenticationMethod],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="authType"),
    ] = OutputTcpjsonAuthenticationMethod.MANUAL
    r"""Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate"""

    description: Optional[str] = None

    host: Optional[str] = None
    r"""The hostname of the receiver"""

    port: Optional[float] = None
    r"""The port to connect to on the provided host"""

    exclude_self: Annotated[Optional[bool], pydantic.Field(alias="excludeSelf")] = False
    r"""Exclude all IPs of the current host from the list of any resolved hostnames"""

    hosts: Optional[List[OutputTcpjsonHost]] = None
    r"""Set of hosts to load-balance data to"""

    dns_resolve_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="dnsResolvePeriodSec")
    ] = 600
    r"""The interval in which to re-resolve any hostnames and pick up destinations from A records"""

    load_balance_stats_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="loadBalanceStatsPeriodSec")
    ] = 300
    r"""How far back in time to keep traffic stats for load balancing purposes"""

    max_concurrent_senders: Annotated[
        Optional[float], pydantic.Field(alias="maxConcurrentSenders")
    ] = 0
    r"""Maximum number of concurrent connections (per Worker Process). A random set of IPs will be picked on every DNS resolution period. Use 0 for unlimited."""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Annotated[
            Optional[OutputTcpjsonPqCompressCompression],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqCompress"),
    ] = OutputTcpjsonPqCompressCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Annotated[
            Optional[OutputTcpjsonQueueFullBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputTcpjsonQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Annotated[
            Optional[OutputTcpjsonMode], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="pqMode"),
    ] = OutputTcpjsonMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputTcpjsonPqControls], pydantic.Field(alias="pqControls")
    ] = None

    auth_token: Annotated[Optional[str], pydantic.Field(alias="authToken")] = ""
    r"""Optional authentication token to include as part of the connection header"""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""
