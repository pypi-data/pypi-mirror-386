"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .heartbeatmetadata import HeartbeatMetadata, HeartbeatMetadataTypedDict
from .nodeprovidedinfo import NodeProvidedInfo, NodeProvidedInfoTypedDict
from .nodeupgradestatus import NodeUpgradeStatus, NodeUpgradeStatusTypedDict
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class LastMetricsTypedDict(TypedDict):
    pass


class LastMetrics(BaseModel):
    pass


class MasterWorkerEntryType(str, Enum, metaclass=utils.OpenEnumMeta):
    INFO = "info"
    REQ = "req"
    RESP = "resp"


class MasterWorkerEntryWorkersTypedDict(TypedDict):
    count: float


class MasterWorkerEntryWorkers(BaseModel):
    count: float


class MasterWorkerEntryTypedDict(TypedDict):
    first_msg_time: float
    group: str
    id: str
    info: NodeProvidedInfoTypedDict
    last_msg_time: float
    worker_processes: float
    deployable: NotRequired[bool]
    disconnected: NotRequired[bool]
    last_metrics: NotRequired[LastMetricsTypedDict]
    metadata: NotRequired[HeartbeatMetadataTypedDict]
    node_upgrade_status: NotRequired[NodeUpgradeStatusTypedDict]
    status: NotRequired[str]
    type: NotRequired[MasterWorkerEntryType]
    workers: NotRequired[MasterWorkerEntryWorkersTypedDict]


class MasterWorkerEntry(BaseModel):
    first_msg_time: Annotated[float, pydantic.Field(alias="firstMsgTime")]

    group: str

    id: str

    info: NodeProvidedInfo

    last_msg_time: Annotated[float, pydantic.Field(alias="lastMsgTime")]

    worker_processes: Annotated[float, pydantic.Field(alias="workerProcesses")]

    deployable: Optional[bool] = None

    disconnected: Optional[bool] = None

    last_metrics: Annotated[
        Optional[LastMetrics], pydantic.Field(alias="lastMetrics")
    ] = None

    metadata: Optional[HeartbeatMetadata] = None

    node_upgrade_status: Annotated[
        Optional[NodeUpgradeStatus], pydantic.Field(alias="nodeUpgradeStatus")
    ] = None

    status: Optional[str] = None

    type: Annotated[
        Optional[MasterWorkerEntryType], PlainValidator(validate_open_enum(False))
    ] = None

    workers: Optional[MasterWorkerEntryWorkers] = None
