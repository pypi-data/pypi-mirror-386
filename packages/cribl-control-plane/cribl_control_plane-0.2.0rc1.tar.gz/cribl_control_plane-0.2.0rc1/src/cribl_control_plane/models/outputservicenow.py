"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputServiceNowType(str, Enum):
    SERVICE_NOW = "service_now"


class OutputServiceNowOTLPVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The version of OTLP Protobuf definitions to use when structuring data to send"""

    ONE_DOT_3_DOT_1 = "1.3.1"


class OutputServiceNowProtocol(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Select a transport option for OpenTelemetry"""

    GRPC = "grpc"
    HTTP = "http"


class OutputServiceNowCompressCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Type of compression to apply to messages sent to the OpenTelemetry endpoint"""

    NONE = "none"
    DEFLATE = "deflate"
    GZIP = "gzip"


class OutputServiceNowHTTPCompressCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Type of compression to apply to messages sent to the OpenTelemetry endpoint"""

    NONE = "none"
    GZIP = "gzip"


class OutputServiceNowMetadatumTypedDict(TypedDict):
    value: str
    key: NotRequired[str]


class OutputServiceNowMetadatum(BaseModel):
    value: str

    key: Optional[str] = ""


class OutputServiceNowFailedRequestLoggingMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    PAYLOAD = "payload"
    PAYLOAD_AND_HEADERS = "payloadAndHeaders"
    NONE = "none"


class OutputServiceNowBackpressureBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when all receivers are exerting backpressure"""

    BLOCK = "block"
    DROP = "drop"
    QUEUE = "queue"


class OutputServiceNowExtraHTTPHeaderTypedDict(TypedDict):
    value: str
    name: NotRequired[str]


class OutputServiceNowExtraHTTPHeader(BaseModel):
    value: str

    name: Optional[str] = None


class OutputServiceNowResponseRetrySettingTypedDict(TypedDict):
    http_status: float
    r"""The HTTP response status code that will trigger retries"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputServiceNowResponseRetrySetting(BaseModel):
    http_status: Annotated[float, pydantic.Field(alias="httpStatus")]
    r"""The HTTP response status code that will trigger retries"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputServiceNowTimeoutRetrySettingsTypedDict(TypedDict):
    timeout_retry: NotRequired[bool]
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputServiceNowTimeoutRetrySettings(BaseModel):
    timeout_retry: Annotated[Optional[bool], pydantic.Field(alias="timeoutRetry")] = (
        False
    )

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputServiceNowMinimumTLSVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    TL_SV1 = "TLSv1"
    TL_SV1_1 = "TLSv1.1"
    TL_SV1_2 = "TLSv1.2"
    TL_SV1_3 = "TLSv1.3"


class OutputServiceNowMaximumTLSVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    TL_SV1 = "TLSv1"
    TL_SV1_1 = "TLSv1.1"
    TL_SV1_2 = "TLSv1.2"
    TL_SV1_3 = "TLSv1.3"


class OutputServiceNowTLSSettingsClientSideTypedDict(TypedDict):
    disabled: NotRequired[bool]
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates that are not authorized by a CA in the CA certificate path, or by another
    trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
    """
    certificate_name: NotRequired[str]
    r"""The name of the predefined certificate"""
    ca_path: NotRequired[str]
    r"""Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS."""
    priv_key_path: NotRequired[str]
    r"""Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS."""
    cert_path: NotRequired[str]
    r"""Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS."""
    passphrase: NotRequired[str]
    r"""Passphrase to use to decrypt private key"""
    min_version: NotRequired[OutputServiceNowMinimumTLSVersion]
    max_version: NotRequired[OutputServiceNowMaximumTLSVersion]


class OutputServiceNowTLSSettingsClientSide(BaseModel):
    disabled: Optional[bool] = True

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates that are not authorized by a CA in the CA certificate path, or by another
    trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
    """

    certificate_name: Annotated[
        Optional[str], pydantic.Field(alias="certificateName")
    ] = None
    r"""The name of the predefined certificate"""

    ca_path: Annotated[Optional[str], pydantic.Field(alias="caPath")] = None
    r"""Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS."""

    priv_key_path: Annotated[Optional[str], pydantic.Field(alias="privKeyPath")] = None
    r"""Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS."""

    cert_path: Annotated[Optional[str], pydantic.Field(alias="certPath")] = None
    r"""Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS."""

    passphrase: Optional[str] = None
    r"""Passphrase to use to decrypt private key"""

    min_version: Annotated[
        Annotated[
            Optional[OutputServiceNowMinimumTLSVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="minVersion"),
    ] = None

    max_version: Annotated[
        Annotated[
            Optional[OutputServiceNowMaximumTLSVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="maxVersion"),
    ] = None


class OutputServiceNowPqCompressCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    NONE = "none"
    GZIP = "gzip"


class OutputServiceNowQueueFullBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    BLOCK = "block"
    DROP = "drop"


class OutputServiceNowMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    ERROR = "error"
    BACKPRESSURE = "backpressure"
    ALWAYS = "always"


class OutputServiceNowPqControlsTypedDict(TypedDict):
    pass


class OutputServiceNowPqControls(BaseModel):
    pass


class OutputServiceNowTypedDict(TypedDict):
    type: OutputServiceNowType
    token_secret: str
    r"""Select or create a stored text secret"""
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    endpoint: NotRequired[str]
    r"""The endpoint where ServiceNow events will be sent. Enter any valid URL or an IP address (IPv4 or IPv6; enclose IPv6 addresses in square brackets)"""
    auth_token_name: NotRequired[str]
    otlp_version: NotRequired[OutputServiceNowOTLPVersion]
    r"""The version of OTLP Protobuf definitions to use when structuring data to send"""
    max_payload_size_kb: NotRequired[float]
    r"""Maximum size, in KB, of the request body"""
    protocol: NotRequired[OutputServiceNowProtocol]
    r"""Select a transport option for OpenTelemetry"""
    compress: NotRequired[OutputServiceNowCompressCompression]
    r"""Type of compression to apply to messages sent to the OpenTelemetry endpoint"""
    http_compress: NotRequired[OutputServiceNowHTTPCompressCompression]
    r"""Type of compression to apply to messages sent to the OpenTelemetry endpoint"""
    http_traces_endpoint_override: NotRequired[str]
    r"""If you want to send traces to the default `{endpoint}/v1/traces` endpoint, leave this field empty; otherwise, specify the desired endpoint"""
    http_metrics_endpoint_override: NotRequired[str]
    r"""If you want to send metrics to the default `{endpoint}/v1/metrics` endpoint, leave this field empty; otherwise, specify the desired endpoint"""
    http_logs_endpoint_override: NotRequired[str]
    r"""If you want to send logs to the default `{endpoint}/v1/logs` endpoint, leave this field empty; otherwise, specify the desired endpoint"""
    metadata: NotRequired[List[OutputServiceNowMetadatumTypedDict]]
    r"""List of key-value pairs to send with each gRPC request. Value supports JavaScript expressions that are evaluated just once, when the destination gets started. To pass credentials as metadata, use 'C.Secret'."""
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking"""
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""
    failed_request_logging_mode: NotRequired[OutputServiceNowFailedRequestLoggingMode]
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""
    connection_timeout: NotRequired[float]
    r"""Amount of time (milliseconds) to wait for the connection to establish before retrying"""
    keep_alive_time: NotRequired[float]
    r"""How often the sender should ping the peer to keep the connection open"""
    keep_alive: NotRequired[bool]
    r"""Disable to close the connection immediately after sending the outgoing request"""
    on_backpressure: NotRequired[OutputServiceNowBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    description: NotRequired[str]
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """
    use_round_robin_dns: NotRequired[bool]
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""
    extra_http_headers: NotRequired[List[OutputServiceNowExtraHTTPHeaderTypedDict]]
    r"""Headers to add to all events"""
    safe_headers: NotRequired[List[str]]
    r"""List of headers that are safe to log in plain text"""
    response_retry_settings: NotRequired[
        List[OutputServiceNowResponseRetrySettingTypedDict]
    ]
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""
    timeout_retry_settings: NotRequired[OutputServiceNowTimeoutRetrySettingsTypedDict]
    response_honor_retry_after_header: NotRequired[bool]
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""
    tls: NotRequired[OutputServiceNowTLSSettingsClientSideTypedDict]
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputServiceNowPqCompressCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputServiceNowQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputServiceNowMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputServiceNowPqControlsTypedDict]


class OutputServiceNow(BaseModel):
    type: OutputServiceNowType

    token_secret: Annotated[str, pydantic.Field(alias="tokenSecret")]
    r"""Select or create a stored text secret"""

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    endpoint: Optional[str] = "ingest.lightstep.com:443"
    r"""The endpoint where ServiceNow events will be sent. Enter any valid URL or an IP address (IPv4 or IPv6; enclose IPv6 addresses in square brackets)"""

    auth_token_name: Annotated[Optional[str], pydantic.Field(alias="authTokenName")] = (
        "lightstep-access-token"
    )

    otlp_version: Annotated[
        Annotated[
            Optional[OutputServiceNowOTLPVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="otlpVersion"),
    ] = OutputServiceNowOTLPVersion.ONE_DOT_3_DOT_1
    r"""The version of OTLP Protobuf definitions to use when structuring data to send"""

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = 2048
    r"""Maximum size, in KB, of the request body"""

    protocol: Annotated[
        Optional[OutputServiceNowProtocol], PlainValidator(validate_open_enum(False))
    ] = OutputServiceNowProtocol.GRPC
    r"""Select a transport option for OpenTelemetry"""

    compress: Annotated[
        Optional[OutputServiceNowCompressCompression],
        PlainValidator(validate_open_enum(False)),
    ] = OutputServiceNowCompressCompression.GZIP
    r"""Type of compression to apply to messages sent to the OpenTelemetry endpoint"""

    http_compress: Annotated[
        Annotated[
            Optional[OutputServiceNowHTTPCompressCompression],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="httpCompress"),
    ] = OutputServiceNowHTTPCompressCompression.GZIP
    r"""Type of compression to apply to messages sent to the OpenTelemetry endpoint"""

    http_traces_endpoint_override: Annotated[
        Optional[str], pydantic.Field(alias="httpTracesEndpointOverride")
    ] = None
    r"""If you want to send traces to the default `{endpoint}/v1/traces` endpoint, leave this field empty; otherwise, specify the desired endpoint"""

    http_metrics_endpoint_override: Annotated[
        Optional[str], pydantic.Field(alias="httpMetricsEndpointOverride")
    ] = None
    r"""If you want to send metrics to the default `{endpoint}/v1/metrics` endpoint, leave this field empty; otherwise, specify the desired endpoint"""

    http_logs_endpoint_override: Annotated[
        Optional[str], pydantic.Field(alias="httpLogsEndpointOverride")
    ] = None
    r"""If you want to send logs to the default `{endpoint}/v1/logs` endpoint, leave this field empty; otherwise, specify the desired endpoint"""

    metadata: Optional[List[OutputServiceNowMetadatum]] = None
    r"""List of key-value pairs to send with each gRPC request. Value supports JavaScript expressions that are evaluated just once, when the destination gets started. To pass credentials as metadata, use 'C.Secret'."""

    concurrency: Optional[float] = 5
    r"""Maximum number of ongoing requests before blocking"""

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 30
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 1
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""

    failed_request_logging_mode: Annotated[
        Annotated[
            Optional[OutputServiceNowFailedRequestLoggingMode],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="failedRequestLoggingMode"),
    ] = OutputServiceNowFailedRequestLoggingMode.NONE
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    connection_timeout: Annotated[
        Optional[float], pydantic.Field(alias="connectionTimeout")
    ] = 10000
    r"""Amount of time (milliseconds) to wait for the connection to establish before retrying"""

    keep_alive_time: Annotated[
        Optional[float], pydantic.Field(alias="keepAliveTime")
    ] = 30
    r"""How often the sender should ping the peer to keep the connection open"""

    keep_alive: Annotated[Optional[bool], pydantic.Field(alias="keepAlive")] = True
    r"""Disable to close the connection immediately after sending the outgoing request"""

    on_backpressure: Annotated[
        Annotated[
            Optional[OutputServiceNowBackpressureBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputServiceNowBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    description: Optional[str] = None

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = False
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""

    extra_http_headers: Annotated[
        Optional[List[OutputServiceNowExtraHTTPHeader]],
        pydantic.Field(alias="extraHttpHeaders"),
    ] = None
    r"""Headers to add to all events"""

    safe_headers: Annotated[
        Optional[List[str]], pydantic.Field(alias="safeHeaders")
    ] = None
    r"""List of headers that are safe to log in plain text"""

    response_retry_settings: Annotated[
        Optional[List[OutputServiceNowResponseRetrySetting]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""

    timeout_retry_settings: Annotated[
        Optional[OutputServiceNowTimeoutRetrySettings],
        pydantic.Field(alias="timeoutRetrySettings"),
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = True
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""

    tls: Optional[OutputServiceNowTLSSettingsClientSide] = None

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Annotated[
            Optional[OutputServiceNowPqCompressCompression],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqCompress"),
    ] = OutputServiceNowPqCompressCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Annotated[
            Optional[OutputServiceNowQueueFullBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputServiceNowQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Annotated[
            Optional[OutputServiceNowMode], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="pqMode"),
    ] = OutputServiceNowMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputServiceNowPqControls], pydantic.Field(alias="pqControls")
    ] = None
