"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RoutesRouteTypedDict(TypedDict):
    name: str
    pipeline: str
    r"""Pipeline to send the matching data to"""
    id: NotRequired[str]
    disabled: NotRequired[bool]
    r"""Disable this routing rule"""
    filter_: NotRequired[str]
    r"""JavaScript expression to select data to route"""
    enable_output_expression: NotRequired[bool]
    r"""Enable to use a JavaScript expression that evaluates to the name of the Description below"""
    output: NotRequired[Any]
    output_expression: NotRequired[Any]
    description: NotRequired[str]
    final: NotRequired[bool]
    r"""Flag to control whether the event gets consumed by this Route (Final), or cloned into it"""


class RoutesRoute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    name: str

    pipeline: str
    r"""Pipeline to send the matching data to"""

    id: Optional[str] = None

    disabled: Optional[bool] = None
    r"""Disable this routing rule"""

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = "true"
    r"""JavaScript expression to select data to route"""

    enable_output_expression: Annotated[
        Optional[bool], pydantic.Field(alias="enableOutputExpression")
    ] = False
    r"""Enable to use a JavaScript expression that evaluates to the name of the Description below"""

    output: Optional[Any] = None

    output_expression: Annotated[
        Optional[Any], pydantic.Field(alias="outputExpression")
    ] = None

    description: Optional[str] = None

    final: Optional[bool] = True
    r"""Flag to control whether the event gets consumed by this Route (Final), or cloned into it"""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
