"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .sdkconfiguration import SDKConfiguration
from cribl_control_plane import errors, models, utils
from cribl_control_plane._hooks import HookContext
from cribl_control_plane.acl import ACL
from cribl_control_plane.groups_configs import GroupsConfigs
from cribl_control_plane.types import OptionalNullable, UNSET
from cribl_control_plane.utils import get_security_from_env
from cribl_control_plane.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, List, Mapping, Optional, Union


class GroupsSDK(BaseSDK):
    r"""Actions related to Groups"""

    configs: GroupsConfigs
    acl: ACL

    def __init__(
        self, sdk_config: SDKConfiguration, parent_ref: Optional[object] = None
    ) -> None:
        BaseSDK.__init__(self, sdk_config, parent_ref=parent_ref)
        self.sdk_configuration = sdk_config
        self._init_sdks()

    def _init_sdks(self):
        self.configs = GroupsConfigs(self.sdk_configuration, parent_ref=self.parent_ref)
        self.acl = ACL(self.sdk_configuration, parent_ref=self.parent_ref)

    def list(
        self,
        *,
        product: models.ProductsCore,
        fields: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListConfigGroupByProductResponse:
        r"""List all Worker Groups or Edge Fleets for the specified Cribl product

        Get a list of all Worker Groups or Edge Fleets for the specified Cribl product.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param fields: Comma-separated list of additional properties to include in the response. Available values are <code>git.commit</code>, <code>git.localChanges</code>, and <code>git.log</code>.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListConfigGroupByProductRequest(
            fields=fields,
            product=product,
        )

        req = self._build_request(
            method="GET",
            path="/products/{product}/groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="listConfigGroupByProduct",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.ListConfigGroupByProductResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def list_async(
        self,
        *,
        product: models.ProductsCore,
        fields: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListConfigGroupByProductResponse:
        r"""List all Worker Groups or Edge Fleets for the specified Cribl product

        Get a list of all Worker Groups or Edge Fleets for the specified Cribl product.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param fields: Comma-separated list of additional properties to include in the response. Available values are <code>git.commit</code>, <code>git.localChanges</code>, and <code>git.log</code>.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListConfigGroupByProductRequest(
            fields=fields,
            product=product,
        )

        req = self._build_request_async(
            method="GET",
            path="/products/{product}/groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="listConfigGroupByProduct",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.ListConfigGroupByProductResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def create(
        self,
        *,
        product: models.ProductsCore,
        id: str,
        cloud: Optional[
            Union[models.ConfigGroupCloud, models.ConfigGroupCloudTypedDict]
        ] = None,
        config_version: Optional[str] = None,
        deploying_worker_count: Optional[float] = None,
        description: Optional[str] = None,
        estimated_ingest_rate: Optional[float] = None,
        git: Optional[Union[models.Git, models.GitTypedDict]] = None,
        incompatible_worker_count: Optional[float] = None,
        inherits: Optional[str] = None,
        is_fleet: Optional[bool] = None,
        is_search: Optional[bool] = None,
        lookup_deployments: Optional[
            Union[
                List[models.ConfigGroupLookups],
                List[models.ConfigGroupLookupsTypedDict],
            ]
        ] = None,
        max_worker_age: Optional[str] = None,
        name: Optional[str] = None,
        on_prem: Optional[bool] = None,
        provisioned: Optional[bool] = None,
        streamtags: Optional[List[str]] = None,
        tags: Optional[str] = None,
        type_: Optional[models.ConfigGroupType] = None,
        upgrade_version: Optional[str] = None,
        worker_count: Optional[float] = None,
        worker_remote_access: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateConfigGroupByProductResponse:
        r"""Create a Worker Group or Edge Fleet for the specified Cribl product

        Create a new Worker Group or Edge Fleet for the specified Cribl product.

        :param product: Name of the Cribl product to add the Worker Group or Edge Fleet to.
        :param id:
        :param cloud:
        :param config_version:
        :param deploying_worker_count:
        :param description:
        :param estimated_ingest_rate:
        :param git:
        :param incompatible_worker_count:
        :param inherits:
        :param is_fleet:
        :param is_search:
        :param lookup_deployments:
        :param max_worker_age:
        :param name:
        :param on_prem:
        :param provisioned:
        :param streamtags:
        :param tags:
        :param type:
        :param upgrade_version:
        :param worker_count:
        :param worker_remote_access:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateConfigGroupByProductRequest(
            product=product,
            config_group=models.ConfigGroup(
                cloud=utils.get_pydantic_model(
                    cloud, Optional[models.ConfigGroupCloud]
                ),
                config_version=config_version,
                deploying_worker_count=deploying_worker_count,
                description=description,
                estimated_ingest_rate=estimated_ingest_rate,
                git=utils.get_pydantic_model(git, Optional[models.Git]),
                id=id,
                incompatible_worker_count=incompatible_worker_count,
                inherits=inherits,
                is_fleet=is_fleet,
                is_search=is_search,
                lookup_deployments=utils.get_pydantic_model(
                    lookup_deployments, Optional[List[models.ConfigGroupLookups]]
                ),
                max_worker_age=max_worker_age,
                name=name,
                on_prem=on_prem,
                provisioned=provisioned,
                streamtags=streamtags,
                tags=tags,
                type=type_,
                upgrade_version=upgrade_version,
                worker_count=worker_count,
                worker_remote_access=worker_remote_access,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/products/{product}/groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.config_group, False, False, "json", models.ConfigGroup
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="createConfigGroupByProduct",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.CreateConfigGroupByProductResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def create_async(
        self,
        *,
        product: models.ProductsCore,
        id: str,
        cloud: Optional[
            Union[models.ConfigGroupCloud, models.ConfigGroupCloudTypedDict]
        ] = None,
        config_version: Optional[str] = None,
        deploying_worker_count: Optional[float] = None,
        description: Optional[str] = None,
        estimated_ingest_rate: Optional[float] = None,
        git: Optional[Union[models.Git, models.GitTypedDict]] = None,
        incompatible_worker_count: Optional[float] = None,
        inherits: Optional[str] = None,
        is_fleet: Optional[bool] = None,
        is_search: Optional[bool] = None,
        lookup_deployments: Optional[
            Union[
                List[models.ConfigGroupLookups],
                List[models.ConfigGroupLookupsTypedDict],
            ]
        ] = None,
        max_worker_age: Optional[str] = None,
        name: Optional[str] = None,
        on_prem: Optional[bool] = None,
        provisioned: Optional[bool] = None,
        streamtags: Optional[List[str]] = None,
        tags: Optional[str] = None,
        type_: Optional[models.ConfigGroupType] = None,
        upgrade_version: Optional[str] = None,
        worker_count: Optional[float] = None,
        worker_remote_access: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateConfigGroupByProductResponse:
        r"""Create a Worker Group or Edge Fleet for the specified Cribl product

        Create a new Worker Group or Edge Fleet for the specified Cribl product.

        :param product: Name of the Cribl product to add the Worker Group or Edge Fleet to.
        :param id:
        :param cloud:
        :param config_version:
        :param deploying_worker_count:
        :param description:
        :param estimated_ingest_rate:
        :param git:
        :param incompatible_worker_count:
        :param inherits:
        :param is_fleet:
        :param is_search:
        :param lookup_deployments:
        :param max_worker_age:
        :param name:
        :param on_prem:
        :param provisioned:
        :param streamtags:
        :param tags:
        :param type:
        :param upgrade_version:
        :param worker_count:
        :param worker_remote_access:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateConfigGroupByProductRequest(
            product=product,
            config_group=models.ConfigGroup(
                cloud=utils.get_pydantic_model(
                    cloud, Optional[models.ConfigGroupCloud]
                ),
                config_version=config_version,
                deploying_worker_count=deploying_worker_count,
                description=description,
                estimated_ingest_rate=estimated_ingest_rate,
                git=utils.get_pydantic_model(git, Optional[models.Git]),
                id=id,
                incompatible_worker_count=incompatible_worker_count,
                inherits=inherits,
                is_fleet=is_fleet,
                is_search=is_search,
                lookup_deployments=utils.get_pydantic_model(
                    lookup_deployments, Optional[List[models.ConfigGroupLookups]]
                ),
                max_worker_age=max_worker_age,
                name=name,
                on_prem=on_prem,
                provisioned=provisioned,
                streamtags=streamtags,
                tags=tags,
                type=type_,
                upgrade_version=upgrade_version,
                worker_count=worker_count,
                worker_remote_access=worker_remote_access,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/products/{product}/groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.config_group, False, False, "json", models.ConfigGroup
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="createConfigGroupByProduct",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.CreateConfigGroupByProductResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def get(
        self,
        *,
        product: models.ProductsCore,
        id: str,
        fields: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetConfigGroupByProductAndIDResponse:
        r"""Get a Worker Group or Edge Fleet

        Get the specified Worker Group or Edge Fleet.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param id: The <code>id</code> of the Worker Group or Edge Fleet to get.
        :param fields: Comma-separated list of additional properties to include in the response. Available values are <code>git.commit</code>, <code>git.localChanges</code>, and <code>git.log</code>.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetConfigGroupByProductAndIDRequest(
            product=product,
            id=id,
            fields=fields,
        )

        req = self._build_request(
            method="GET",
            path="/products/{product}/groups/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getConfigGroupByProductAndId",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.GetConfigGroupByProductAndIDResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_async(
        self,
        *,
        product: models.ProductsCore,
        id: str,
        fields: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetConfigGroupByProductAndIDResponse:
        r"""Get a Worker Group or Edge Fleet

        Get the specified Worker Group or Edge Fleet.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param id: The <code>id</code> of the Worker Group or Edge Fleet to get.
        :param fields: Comma-separated list of additional properties to include in the response. Available values are <code>git.commit</code>, <code>git.localChanges</code>, and <code>git.log</code>.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetConfigGroupByProductAndIDRequest(
            product=product,
            id=id,
            fields=fields,
        )

        req = self._build_request_async(
            method="GET",
            path="/products/{product}/groups/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getConfigGroupByProductAndId",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.GetConfigGroupByProductAndIDResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def update(
        self,
        *,
        product: models.ProductsCore,
        id_param: str,
        id: str,
        cloud: Optional[
            Union[models.ConfigGroupCloud, models.ConfigGroupCloudTypedDict]
        ] = None,
        config_version: Optional[str] = None,
        deploying_worker_count: Optional[float] = None,
        description: Optional[str] = None,
        estimated_ingest_rate: Optional[float] = None,
        git: Optional[Union[models.Git, models.GitTypedDict]] = None,
        incompatible_worker_count: Optional[float] = None,
        inherits: Optional[str] = None,
        is_fleet: Optional[bool] = None,
        is_search: Optional[bool] = None,
        lookup_deployments: Optional[
            Union[
                List[models.ConfigGroupLookups],
                List[models.ConfigGroupLookupsTypedDict],
            ]
        ] = None,
        max_worker_age: Optional[str] = None,
        name: Optional[str] = None,
        on_prem: Optional[bool] = None,
        provisioned: Optional[bool] = None,
        streamtags: Optional[List[str]] = None,
        tags: Optional[str] = None,
        type_: Optional[models.ConfigGroupType] = None,
        upgrade_version: Optional[str] = None,
        worker_count: Optional[float] = None,
        worker_remote_access: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateConfigGroupByProductAndIDResponse:
        r"""Update a Worker Group or Edge Fleet

        Update the specified Worker Group or Edge Fleet.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param id_param: The <code>id</code> of the Worker Group or Edge Fleet to update.
        :param id:
        :param cloud:
        :param config_version:
        :param deploying_worker_count:
        :param description:
        :param estimated_ingest_rate:
        :param git:
        :param incompatible_worker_count:
        :param inherits:
        :param is_fleet:
        :param is_search:
        :param lookup_deployments:
        :param max_worker_age:
        :param name:
        :param on_prem:
        :param provisioned:
        :param streamtags:
        :param tags:
        :param type:
        :param upgrade_version:
        :param worker_count:
        :param worker_remote_access:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateConfigGroupByProductAndIDRequest(
            product=product,
            id_param=id_param,
            config_group=models.ConfigGroup(
                cloud=utils.get_pydantic_model(
                    cloud, Optional[models.ConfigGroupCloud]
                ),
                config_version=config_version,
                deploying_worker_count=deploying_worker_count,
                description=description,
                estimated_ingest_rate=estimated_ingest_rate,
                git=utils.get_pydantic_model(git, Optional[models.Git]),
                id=id,
                incompatible_worker_count=incompatible_worker_count,
                inherits=inherits,
                is_fleet=is_fleet,
                is_search=is_search,
                lookup_deployments=utils.get_pydantic_model(
                    lookup_deployments, Optional[List[models.ConfigGroupLookups]]
                ),
                max_worker_age=max_worker_age,
                name=name,
                on_prem=on_prem,
                provisioned=provisioned,
                streamtags=streamtags,
                tags=tags,
                type=type_,
                upgrade_version=upgrade_version,
                worker_count=worker_count,
                worker_remote_access=worker_remote_access,
            ),
        )

        req = self._build_request(
            method="PATCH",
            path="/products/{product}/groups/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.config_group, False, False, "json", models.ConfigGroup
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="updateConfigGroupByProductAndId",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.UpdateConfigGroupByProductAndIDResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def update_async(
        self,
        *,
        product: models.ProductsCore,
        id_param: str,
        id: str,
        cloud: Optional[
            Union[models.ConfigGroupCloud, models.ConfigGroupCloudTypedDict]
        ] = None,
        config_version: Optional[str] = None,
        deploying_worker_count: Optional[float] = None,
        description: Optional[str] = None,
        estimated_ingest_rate: Optional[float] = None,
        git: Optional[Union[models.Git, models.GitTypedDict]] = None,
        incompatible_worker_count: Optional[float] = None,
        inherits: Optional[str] = None,
        is_fleet: Optional[bool] = None,
        is_search: Optional[bool] = None,
        lookup_deployments: Optional[
            Union[
                List[models.ConfigGroupLookups],
                List[models.ConfigGroupLookupsTypedDict],
            ]
        ] = None,
        max_worker_age: Optional[str] = None,
        name: Optional[str] = None,
        on_prem: Optional[bool] = None,
        provisioned: Optional[bool] = None,
        streamtags: Optional[List[str]] = None,
        tags: Optional[str] = None,
        type_: Optional[models.ConfigGroupType] = None,
        upgrade_version: Optional[str] = None,
        worker_count: Optional[float] = None,
        worker_remote_access: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateConfigGroupByProductAndIDResponse:
        r"""Update a Worker Group or Edge Fleet

        Update the specified Worker Group or Edge Fleet.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param id_param: The <code>id</code> of the Worker Group or Edge Fleet to update.
        :param id:
        :param cloud:
        :param config_version:
        :param deploying_worker_count:
        :param description:
        :param estimated_ingest_rate:
        :param git:
        :param incompatible_worker_count:
        :param inherits:
        :param is_fleet:
        :param is_search:
        :param lookup_deployments:
        :param max_worker_age:
        :param name:
        :param on_prem:
        :param provisioned:
        :param streamtags:
        :param tags:
        :param type:
        :param upgrade_version:
        :param worker_count:
        :param worker_remote_access:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateConfigGroupByProductAndIDRequest(
            product=product,
            id_param=id_param,
            config_group=models.ConfigGroup(
                cloud=utils.get_pydantic_model(
                    cloud, Optional[models.ConfigGroupCloud]
                ),
                config_version=config_version,
                deploying_worker_count=deploying_worker_count,
                description=description,
                estimated_ingest_rate=estimated_ingest_rate,
                git=utils.get_pydantic_model(git, Optional[models.Git]),
                id=id,
                incompatible_worker_count=incompatible_worker_count,
                inherits=inherits,
                is_fleet=is_fleet,
                is_search=is_search,
                lookup_deployments=utils.get_pydantic_model(
                    lookup_deployments, Optional[List[models.ConfigGroupLookups]]
                ),
                max_worker_age=max_worker_age,
                name=name,
                on_prem=on_prem,
                provisioned=provisioned,
                streamtags=streamtags,
                tags=tags,
                type=type_,
                upgrade_version=upgrade_version,
                worker_count=worker_count,
                worker_remote_access=worker_remote_access,
            ),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/products/{product}/groups/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.config_group, False, False, "json", models.ConfigGroup
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="updateConfigGroupByProductAndId",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.UpdateConfigGroupByProductAndIDResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def delete(
        self,
        *,
        product: models.ProductsCore,
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DeleteConfigGroupByProductAndIDResponse:
        r"""Delete a Worker Group or Edge Fleet

        Delete the specified Worker Group or Edge Fleet.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param id: The <code>id</code> of the Worker Group or Edge Fleet to delete.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteConfigGroupByProductAndIDRequest(
            product=product,
            id=id,
        )

        req = self._build_request(
            method="DELETE",
            path="/products/{product}/groups/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="deleteConfigGroupByProductAndId",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.DeleteConfigGroupByProductAndIDResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def delete_async(
        self,
        *,
        product: models.ProductsCore,
        id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DeleteConfigGroupByProductAndIDResponse:
        r"""Delete a Worker Group or Edge Fleet

        Delete the specified Worker Group or Edge Fleet.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param id: The <code>id</code> of the Worker Group or Edge Fleet to delete.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteConfigGroupByProductAndIDRequest(
            product=product,
            id=id,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/products/{product}/groups/{id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="deleteConfigGroupByProductAndId",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.DeleteConfigGroupByProductAndIDResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def deploy(
        self,
        *,
        product: models.ProductsCore,
        id: str,
        version: str,
        lookups: Optional[
            Union[
                List[models.DeployRequestLookups],
                List[models.DeployRequestLookupsTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateConfigGroupDeployByProductAndIDResponse:
        r"""Deploy commits to a Worker Group or Edge Fleet

        Deploy commits to the specified Worker Group or Edge Fleet.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param id: The <code>id</code> of the target Worker Group or Edge Fleet for commit deployment.
        :param version:
        :param lookups:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateConfigGroupDeployByProductAndIDRequest(
            product=product,
            id=id,
            deploy_request=models.DeployRequest(
                lookups=utils.get_pydantic_model(
                    lookups, Optional[List[models.DeployRequestLookups]]
                ),
                version=version,
            ),
        )

        req = self._build_request(
            method="PATCH",
            path="/products/{product}/groups/{id}/deploy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.deploy_request, False, False, "json", models.DeployRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="updateConfigGroupDeployByProductAndId",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.UpdateConfigGroupDeployByProductAndIDResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def deploy_async(
        self,
        *,
        product: models.ProductsCore,
        id: str,
        version: str,
        lookups: Optional[
            Union[
                List[models.DeployRequestLookups],
                List[models.DeployRequestLookupsTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateConfigGroupDeployByProductAndIDResponse:
        r"""Deploy commits to a Worker Group or Edge Fleet

        Deploy commits to the specified Worker Group or Edge Fleet.

        :param product: Name of the Cribl product to get the Worker Groups or Edge Fleets for.
        :param id: The <code>id</code> of the target Worker Group or Edge Fleet for commit deployment.
        :param version:
        :param lookups:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateConfigGroupDeployByProductAndIDRequest(
            product=product,
            id=id,
            deploy_request=models.DeployRequest(
                lookups=utils.get_pydantic_model(
                    lookups, Optional[List[models.DeployRequestLookups]]
                ),
                version=version,
            ),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/products/{product}/groups/{id}/deploy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.deploy_request, False, False, "json", models.DeployRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="updateConfigGroupDeployByProductAndId",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.UpdateConfigGroupDeployByProductAndIDResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
