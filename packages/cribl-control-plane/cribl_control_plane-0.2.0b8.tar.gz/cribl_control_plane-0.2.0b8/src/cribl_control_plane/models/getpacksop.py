"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .packinfo import PackInfo, PackInfoTypedDict
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetPacksRequestTypedDict(TypedDict):
    with_: NotRequired[str]
    r"""Comma-separated list of additional properties to include in the response. When set, the response includes a count of the specified properties in the Pack. Available values are <code>inputs</code> and <code>outputs</code>."""


class GetPacksRequest(BaseModel):
    with_: Annotated[
        Optional[str],
        pydantic.Field(alias="with"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Comma-separated list of additional properties to include in the response. When set, the response includes a count of the specified properties in the Pack. Available values are <code>inputs</code> and <code>outputs</code>."""


class GetPacksResponseTypedDict(TypedDict):
    r"""a list of PackInfo objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[PackInfoTypedDict]]


class GetPacksResponse(BaseModel):
    r"""a list of PackInfo objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[PackInfo]] = None
