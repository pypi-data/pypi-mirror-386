"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import Any, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RunnableJobExecutorJobType(str, Enum, metaclass=utils.OpenEnumMeta):
    COLLECTION = "collection"
    EXECUTOR = "executor"
    SCHEDULED_SEARCH = "scheduledSearch"


class RunnableJobExecutorType(str, Enum):
    COLLECTION = "collection"


class RunnableJobExecutorScheduleLogLevel(str, Enum):
    r"""Level at which to set task logging"""

    ERROR = "error"
    WARN = "warn"
    INFO = "info"
    DEBUG = "debug"
    SILLY = "silly"


class RunnableJobExecutorTimeWarningTypedDict(TypedDict):
    pass


class RunnableJobExecutorTimeWarning(BaseModel):
    pass


class RunnableJobExecutorRunSettingsTypedDict(TypedDict):
    type: NotRequired[RunnableJobExecutorType]
    reschedule_dropped_tasks: NotRequired[bool]
    r"""Reschedule tasks that failed with non-fatal errors"""
    max_task_reschedule: NotRequired[float]
    r"""Maximum number of times a task can be rescheduled"""
    log_level: NotRequired[RunnableJobExecutorScheduleLogLevel]
    r"""Level at which to set task logging"""
    job_timeout: NotRequired[str]
    r"""Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time."""
    mode: NotRequired[str]
    r"""Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job."""
    time_range_type: NotRequired[str]
    earliest: NotRequired[float]
    r"""Earliest time to collect data for the selected timezone"""
    latest: NotRequired[float]
    r"""Latest time to collect data for the selected timezone"""
    timestamp_timezone: NotRequired[Any]
    time_warning: NotRequired[RunnableJobExecutorTimeWarningTypedDict]
    expression: NotRequired[str]
    r"""A filter for tokens in the provided collect path and/or the events being collected"""
    min_task_size: NotRequired[str]
    r"""Limits the bundle size for small tasks. For example,










    if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
    """
    max_task_size: NotRequired[str]
    r"""Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB,










    you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
    """


class RunnableJobExecutorRunSettings(BaseModel):
    type: Optional[RunnableJobExecutorType] = None

    reschedule_dropped_tasks: Annotated[
        Optional[bool], pydantic.Field(alias="rescheduleDroppedTasks")
    ] = True
    r"""Reschedule tasks that failed with non-fatal errors"""

    max_task_reschedule: Annotated[
        Optional[float], pydantic.Field(alias="maxTaskReschedule")
    ] = 1
    r"""Maximum number of times a task can be rescheduled"""

    log_level: Annotated[
        Optional[RunnableJobExecutorScheduleLogLevel], pydantic.Field(alias="logLevel")
    ] = RunnableJobExecutorScheduleLogLevel.INFO
    r"""Level at which to set task logging"""

    job_timeout: Annotated[Optional[str], pydantic.Field(alias="jobTimeout")] = "0"
    r"""Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time."""

    mode: Optional[str] = "list"
    r"""Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job."""

    time_range_type: Annotated[Optional[str], pydantic.Field(alias="timeRangeType")] = (
        "relative"
    )

    earliest: Optional[float] = None
    r"""Earliest time to collect data for the selected timezone"""

    latest: Optional[float] = None
    r"""Latest time to collect data for the selected timezone"""

    timestamp_timezone: Annotated[
        Optional[Any], pydantic.Field(alias="timestampTimezone")
    ] = None

    time_warning: Annotated[
        Optional[RunnableJobExecutorTimeWarning], pydantic.Field(alias="timeWarning")
    ] = None

    expression: Optional[str] = "true"
    r"""A filter for tokens in the provided collect path and/or the events being collected"""

    min_task_size: Annotated[Optional[str], pydantic.Field(alias="minTaskSize")] = "1MB"
    r"""Limits the bundle size for small tasks. For example,










    if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
    """

    max_task_size: Annotated[Optional[str], pydantic.Field(alias="maxTaskSize")] = (
        "10MB"
    )
    r"""Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB,










    you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
    """


class RunnableJobExecutorScheduleTypedDict(TypedDict):
    r"""Configuration for a scheduled job"""

    enabled: NotRequired[bool]
    r"""Enable to configure scheduling for this Collector"""
    cron_schedule: NotRequired[str]
    r"""A cron schedule on which to run this job"""
    max_concurrent_runs: NotRequired[float]
    r"""The maximum number of instances of this scheduled job that may be running at any time"""
    skippable: NotRequired[bool]
    r"""Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits"""
    resume_missed: NotRequired[Any]
    run: NotRequired[RunnableJobExecutorRunSettingsTypedDict]


class RunnableJobExecutorSchedule(BaseModel):
    r"""Configuration for a scheduled job"""

    enabled: Optional[bool] = None
    r"""Enable to configure scheduling for this Collector"""

    cron_schedule: Annotated[Optional[str], pydantic.Field(alias="cronSchedule")] = (
        "*/5 * * * *"
    )
    r"""A cron schedule on which to run this job"""

    max_concurrent_runs: Annotated[
        Optional[float], pydantic.Field(alias="maxConcurrentRuns")
    ] = 1
    r"""The maximum number of instances of this scheduled job that may be running at any time"""

    skippable: Optional[bool] = True
    r"""Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits"""

    resume_missed: Annotated[Optional[Any], pydantic.Field(alias="resumeMissed")] = None

    run: Optional[RunnableJobExecutorRunSettings] = None


class ExecutorSpecificSettingsTypedDict(TypedDict):
    pass


class ExecutorSpecificSettings(BaseModel):
    pass


class ExecutorTypedDict(TypedDict):
    type: str
    r"""The type of executor to run"""
    store_task_results: NotRequired[bool]
    r"""Determines whether or not to write task results to disk"""
    conf: NotRequired[ExecutorSpecificSettingsTypedDict]


class Executor(BaseModel):
    type: str
    r"""The type of executor to run"""

    store_task_results: Annotated[
        Optional[bool], pydantic.Field(alias="storeTaskResults")
    ] = True
    r"""Determines whether or not to write task results to disk"""

    conf: Optional[ExecutorSpecificSettings] = None


class RunnableJobExecutorLogLevel(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Level at which to set task logging"""

    ERROR = "error"
    WARN = "warn"
    INFO = "info"
    DEBUG = "debug"
    SILLY = "silly"


class RunnableJobExecutorRunTypedDict(TypedDict):
    reschedule_dropped_tasks: NotRequired[bool]
    r"""Reschedule tasks that failed with non-fatal errors"""
    max_task_reschedule: NotRequired[float]
    r"""Maximum number of times a task can be rescheduled"""
    log_level: NotRequired[RunnableJobExecutorLogLevel]
    r"""Level at which to set task logging"""
    job_timeout: NotRequired[str]
    r"""Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time."""


class RunnableJobExecutorRun(BaseModel):
    reschedule_dropped_tasks: Annotated[
        Optional[bool], pydantic.Field(alias="rescheduleDroppedTasks")
    ] = True
    r"""Reschedule tasks that failed with non-fatal errors"""

    max_task_reschedule: Annotated[
        Optional[float], pydantic.Field(alias="maxTaskReschedule")
    ] = 1
    r"""Maximum number of times a task can be rescheduled"""

    log_level: Annotated[
        Annotated[
            Optional[RunnableJobExecutorLogLevel],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="logLevel"),
    ] = RunnableJobExecutorLogLevel.INFO
    r"""Level at which to set task logging"""

    job_timeout: Annotated[Optional[str], pydantic.Field(alias="jobTimeout")] = "0"
    r"""Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time."""


class RunnableJobExecutorTypedDict(TypedDict):
    executor: ExecutorTypedDict
    run: RunnableJobExecutorRunTypedDict
    id: NotRequired[str]
    r"""Unique ID for this Job"""
    description: NotRequired[str]
    type: NotRequired[RunnableJobExecutorJobType]
    ttl: NotRequired[str]
    r"""Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector."""
    ignore_group_jobs_limit: NotRequired[bool]
    r"""When enabled, this job's artifacts are not counted toward the Worker Group's finished job artifacts limit. Artifacts will be removed only after the Collector's configured time to live."""
    remove_fields: NotRequired[List[str]]
    r"""List of fields to remove from Discover results. Wildcards (for example, aws*) are allowed. This is useful when discovery returns sensitive fields that should not be exposed in the Jobs user interface."""
    resume_on_boot: NotRequired[bool]
    r"""Resume the ad hoc job if a failure condition causes Stream to restart during job execution"""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    schedule: NotRequired[RunnableJobExecutorScheduleTypedDict]
    r"""Configuration for a scheduled job"""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""


class RunnableJobExecutor(BaseModel):
    executor: Executor

    run: RunnableJobExecutorRun

    id: Optional[str] = None
    r"""Unique ID for this Job"""

    description: Optional[str] = None

    type: Annotated[
        Optional[RunnableJobExecutorJobType], PlainValidator(validate_open_enum(False))
    ] = None

    ttl: Optional[str] = "4h"
    r"""Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector."""

    ignore_group_jobs_limit: Annotated[
        Optional[bool], pydantic.Field(alias="ignoreGroupJobsLimit")
    ] = False
    r"""When enabled, this job's artifacts are not counted toward the Worker Group's finished job artifacts limit. Artifacts will be removed only after the Collector's configured time to live."""

    remove_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="removeFields")
    ] = None
    r"""List of fields to remove from Discover results. Wildcards (for example, aws*) are allowed. This is useful when discovery returns sensitive fields that should not be exposed in the Jobs user interface."""

    resume_on_boot: Annotated[Optional[bool], pydantic.Field(alias="resumeOnBoot")] = (
        False
    )
    r"""Resume the ad hoc job if a failure condition causes Stream to restart during job execution"""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    schedule: Optional[RunnableJobExecutorSchedule] = None
    r"""Configuration for a scheduled job"""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""
