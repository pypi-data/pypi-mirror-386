"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputGoogleChronicleType(str, Enum):
    GOOGLE_CHRONICLE = "google_chronicle"


class OutputGoogleChronicleAPIVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    # V1
    V1 = "v1"
    # V2
    V2 = "v2"


class OutputGoogleChronicleAuthenticationMethod(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    # API key
    MANUAL = "manual"
    # API key secret
    SECRET = "secret"
    # Service account credentials
    SERVICE_ACCOUNT = "serviceAccount"
    # Service account credentials secret
    SERVICE_ACCOUNT_SECRET = "serviceAccountSecret"


class OutputGoogleChronicleResponseRetrySettingTypedDict(TypedDict):
    http_status: float
    r"""The HTTP response status code that will trigger retries"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGoogleChronicleResponseRetrySetting(BaseModel):
    http_status: Annotated[float, pydantic.Field(alias="httpStatus")]
    r"""The HTTP response status code that will trigger retries"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGoogleChronicleTimeoutRetrySettingsTypedDict(TypedDict):
    timeout_retry: NotRequired[bool]
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGoogleChronicleTimeoutRetrySettings(BaseModel):
    timeout_retry: Annotated[Optional[bool], pydantic.Field(alias="timeoutRetry")] = (
        False
    )

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class SendEventsAs(str, Enum, metaclass=utils.OpenEnumMeta):
    # Unstructured
    UNSTRUCTURED = "unstructured"
    # UDM
    UDM = "udm"


class OutputGoogleChronicleExtraHTTPHeaderTypedDict(TypedDict):
    value: str
    name: NotRequired[str]


class OutputGoogleChronicleExtraHTTPHeader(BaseModel):
    value: str

    name: Optional[str] = None


class OutputGoogleChronicleFailedRequestLoggingMode(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    # Payload
    PAYLOAD = "payload"
    # Payload + Headers
    PAYLOAD_AND_HEADERS = "payloadAndHeaders"
    # None
    NONE = "none"


class OutputGoogleChronicleBackpressureBehavior(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""How to handle events when all receivers are exerting backpressure"""

    # Block
    BLOCK = "block"
    # Drop
    DROP = "drop"
    # Persistent Queue
    QUEUE = "queue"


class ExtraLogTypeTypedDict(TypedDict):
    log_type: str
    description: NotRequired[str]


class ExtraLogType(BaseModel):
    log_type: Annotated[str, pydantic.Field(alias="logType")]

    description: Optional[str] = None


class OutputGoogleChronicleCustomLabelTypedDict(TypedDict):
    key: str
    value: str


class OutputGoogleChronicleCustomLabel(BaseModel):
    key: str

    value: str


class OutputGoogleChronicleCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    # None
    NONE = "none"
    # Gzip
    GZIP = "gzip"


class OutputGoogleChronicleQueueFullBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    # Block
    BLOCK = "block"
    # Drop new data
    DROP = "drop"


class OutputGoogleChronicleMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    # Error
    ERROR = "error"
    # Backpressure
    BACKPRESSURE = "backpressure"
    # Always On
    ALWAYS = "always"


class OutputGoogleChroniclePqControlsTypedDict(TypedDict):
    pass


class OutputGoogleChroniclePqControls(BaseModel):
    pass


class OutputGoogleChronicleTypedDict(TypedDict):
    type: OutputGoogleChronicleType
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    api_version: NotRequired[OutputGoogleChronicleAPIVersion]
    authentication_method: NotRequired[OutputGoogleChronicleAuthenticationMethod]
    response_retry_settings: NotRequired[
        List[OutputGoogleChronicleResponseRetrySettingTypedDict]
    ]
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""
    timeout_retry_settings: NotRequired[
        OutputGoogleChronicleTimeoutRetrySettingsTypedDict
    ]
    response_honor_retry_after_header: NotRequired[bool]
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""
    log_format_type: NotRequired[SendEventsAs]
    region: NotRequired[str]
    r"""Regional endpoint to send events to"""
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking"""
    max_payload_size_kb: NotRequired[float]
    r"""Maximum size, in KB, of the request body"""
    max_payload_events: NotRequired[float]
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""
    compress: NotRequired[bool]
    r"""Compress the payload body before sending"""
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""
    extra_http_headers: NotRequired[List[OutputGoogleChronicleExtraHTTPHeaderTypedDict]]
    r"""Headers to add to all events"""
    failed_request_logging_mode: NotRequired[
        OutputGoogleChronicleFailedRequestLoggingMode
    ]
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""
    safe_headers: NotRequired[List[str]]
    r"""List of headers that are safe to log in plain text"""
    use_round_robin_dns: NotRequired[bool]
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned."""
    on_backpressure: NotRequired[OutputGoogleChronicleBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    total_memory_limit_kb: NotRequired[float]
    r"""Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced."""
    description: NotRequired[str]
    extra_log_types: NotRequired[List[ExtraLogTypeTypedDict]]
    r"""Custom log types. If the value \"Custom\" is selected in the setting \"Default log type\" above, the first custom log type in this table will be automatically selected as default log type."""
    log_type: NotRequired[str]
    r"""Default log type value to send to SecOps. Can be overwritten by event field __logType."""
    log_text_field: NotRequired[str]
    r"""Name of the event field that contains the log text to send. If not specified, Stream sends a JSON representation of the whole event."""
    customer_id: NotRequired[str]
    r"""A unique identifier (UUID) for your Google SecOps instance. This is provided by your Google representative and is required for API V2 authentication."""
    namespace: NotRequired[str]
    r"""User-configured environment namespace to identify the data domain the logs originated from. Use namespace as a tag to identify the appropriate data domain for indexing and enrichment functionality. Can be overwritten by event field __namespace."""
    custom_labels: NotRequired[List[OutputGoogleChronicleCustomLabelTypedDict]]
    r"""Custom labels to be added to every batch"""
    api_key: NotRequired[str]
    r"""Organization's API key in Google SecOps"""
    api_key_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    service_account_credentials: NotRequired[str]
    r"""Contents of service account credentials (JSON keys) file downloaded from Google Cloud. To upload a file, click the upload button at this field's upper right."""
    service_account_credentials_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputGoogleChronicleCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputGoogleChronicleQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputGoogleChronicleMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputGoogleChroniclePqControlsTypedDict]


class OutputGoogleChronicle(BaseModel):
    type: OutputGoogleChronicleType

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    api_version: Annotated[
        Annotated[
            Optional[OutputGoogleChronicleAPIVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="apiVersion"),
    ] = OutputGoogleChronicleAPIVersion.V1

    authentication_method: Annotated[
        Annotated[
            Optional[OutputGoogleChronicleAuthenticationMethod],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="authenticationMethod"),
    ] = OutputGoogleChronicleAuthenticationMethod.SERVICE_ACCOUNT

    response_retry_settings: Annotated[
        Optional[List[OutputGoogleChronicleResponseRetrySetting]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""

    timeout_retry_settings: Annotated[
        Optional[OutputGoogleChronicleTimeoutRetrySettings],
        pydantic.Field(alias="timeoutRetrySettings"),
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = False
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""

    log_format_type: Annotated[
        Annotated[Optional[SendEventsAs], PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="logFormatType"),
    ] = SendEventsAs.UNSTRUCTURED

    region: Optional[str] = None
    r"""Regional endpoint to send events to"""

    concurrency: Optional[float] = 5
    r"""Maximum number of ongoing requests before blocking"""

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = 1024
    r"""Maximum size, in KB, of the request body"""

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = 0
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""

    compress: Optional[bool] = True
    r"""Compress the payload body before sending"""

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 90
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 1
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""

    extra_http_headers: Annotated[
        Optional[List[OutputGoogleChronicleExtraHTTPHeader]],
        pydantic.Field(alias="extraHttpHeaders"),
    ] = None
    r"""Headers to add to all events"""

    failed_request_logging_mode: Annotated[
        Annotated[
            Optional[OutputGoogleChronicleFailedRequestLoggingMode],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="failedRequestLoggingMode"),
    ] = OutputGoogleChronicleFailedRequestLoggingMode.NONE
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    safe_headers: Annotated[
        Optional[List[str]], pydantic.Field(alias="safeHeaders")
    ] = None
    r"""List of headers that are safe to log in plain text"""

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = False
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned."""

    on_backpressure: Annotated[
        Annotated[
            Optional[OutputGoogleChronicleBackpressureBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputGoogleChronicleBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    total_memory_limit_kb: Annotated[
        Optional[float], pydantic.Field(alias="totalMemoryLimitKB")
    ] = None
    r"""Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced."""

    description: Optional[str] = None

    extra_log_types: Annotated[
        Optional[List[ExtraLogType]], pydantic.Field(alias="extraLogTypes")
    ] = None
    r"""Custom log types. If the value \"Custom\" is selected in the setting \"Default log type\" above, the first custom log type in this table will be automatically selected as default log type."""

    log_type: Annotated[Optional[str], pydantic.Field(alias="logType")] = None
    r"""Default log type value to send to SecOps. Can be overwritten by event field __logType."""

    log_text_field: Annotated[Optional[str], pydantic.Field(alias="logTextField")] = (
        None
    )
    r"""Name of the event field that contains the log text to send. If not specified, Stream sends a JSON representation of the whole event."""

    customer_id: Annotated[Optional[str], pydantic.Field(alias="customerId")] = None
    r"""A unique identifier (UUID) for your Google SecOps instance. This is provided by your Google representative and is required for API V2 authentication."""

    namespace: Optional[str] = None
    r"""User-configured environment namespace to identify the data domain the logs originated from. Use namespace as a tag to identify the appropriate data domain for indexing and enrichment functionality. Can be overwritten by event field __namespace."""

    custom_labels: Annotated[
        Optional[List[OutputGoogleChronicleCustomLabel]],
        pydantic.Field(alias="customLabels"),
    ] = None
    r"""Custom labels to be added to every batch"""

    api_key: Annotated[Optional[str], pydantic.Field(alias="apiKey")] = None
    r"""Organization's API key in Google SecOps"""

    api_key_secret: Annotated[Optional[str], pydantic.Field(alias="apiKeySecret")] = (
        None
    )
    r"""Select or create a stored text secret"""

    service_account_credentials: Annotated[
        Optional[str], pydantic.Field(alias="serviceAccountCredentials")
    ] = None
    r"""Contents of service account credentials (JSON keys) file downloaded from Google Cloud. To upload a file, click the upload button at this field's upper right."""

    service_account_credentials_secret: Annotated[
        Optional[str], pydantic.Field(alias="serviceAccountCredentialsSecret")
    ] = None
    r"""Select or create a stored text secret"""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Annotated[
            Optional[OutputGoogleChronicleCompression],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqCompress"),
    ] = OutputGoogleChronicleCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Annotated[
            Optional[OutputGoogleChronicleQueueFullBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputGoogleChronicleQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Annotated[
            Optional[OutputGoogleChronicleMode],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqMode"),
    ] = OutputGoogleChronicleMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputGoogleChroniclePqControls], pydantic.Field(alias="pqControls")
    ] = None
