"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputSyslogType(str, Enum):
    SYSLOG = "syslog"


class OutputSyslogProtocol(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The network protocol to use for sending out syslog messages"""

    TCP = "tcp"
    UDP = "udp"


class Facility(int, Enum, metaclass=utils.OpenEnumMeta):
    r"""Default value for message facility. Will be overwritten by value of __facility if set. Defaults to user."""

    ZERO = 0
    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 4
    FIVE = 5
    SIX = 6
    SEVEN = 7
    EIGHT = 8
    NINE = 9
    TEN = 10
    ELEVEN = 11
    TWELVE = 12
    THIRTEEN = 13
    FOURTEEN = 14
    FIFTEEN = 15
    SIXTEEN = 16
    SEVENTEEN = 17
    EIGHTEEN = 18
    NINETEEN = 19
    TWENTY = 20
    TWENTY_ONE = 21


class OutputSyslogSeverity(int, Enum, metaclass=utils.OpenEnumMeta):
    r"""Default value for message severity. Will be overwritten by value of __severity if set. Defaults to notice."""

    ZERO = 0
    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 4
    FIVE = 5
    SIX = 6
    SEVEN = 7


class OutputSyslogMessageFormat(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The syslog message format depending on the receiver's support"""

    RFC3164 = "rfc3164"
    RFC5424 = "rfc5424"


class TimestampFormat(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Timestamp format to use when serializing event's time field"""

    SYSLOG = "syslog"
    ISO8601 = "iso8601"


class OutputSyslogMinimumTLSVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    TL_SV1 = "TLSv1"
    TL_SV1_1 = "TLSv1.1"
    TL_SV1_2 = "TLSv1.2"
    TL_SV1_3 = "TLSv1.3"


class OutputSyslogMaximumTLSVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    TL_SV1 = "TLSv1"
    TL_SV1_1 = "TLSv1.1"
    TL_SV1_2 = "TLSv1.2"
    TL_SV1_3 = "TLSv1.3"


class OutputSyslogTLSSettingsClientSideTypedDict(TypedDict):
    disabled: NotRequired[bool]
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates that are not authorized by a CA in the CA certificate path, or by another
    trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
    """
    servername: NotRequired[str]
    r"""Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address."""
    certificate_name: NotRequired[str]
    r"""The name of the predefined certificate"""
    ca_path: NotRequired[str]
    r"""Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS."""
    priv_key_path: NotRequired[str]
    r"""Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS."""
    cert_path: NotRequired[str]
    r"""Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS."""
    passphrase: NotRequired[str]
    r"""Passphrase to use to decrypt private key"""
    min_version: NotRequired[OutputSyslogMinimumTLSVersion]
    max_version: NotRequired[OutputSyslogMaximumTLSVersion]


class OutputSyslogTLSSettingsClientSide(BaseModel):
    disabled: Optional[bool] = True

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates that are not authorized by a CA in the CA certificate path, or by another
    trusted CA (such as the system's). Defaults to Enabled. Overrides the toggle from Advanced Settings, when also present.
    """

    servername: Optional[str] = None
    r"""Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address."""

    certificate_name: Annotated[
        Optional[str], pydantic.Field(alias="certificateName")
    ] = None
    r"""The name of the predefined certificate"""

    ca_path: Annotated[Optional[str], pydantic.Field(alias="caPath")] = None
    r"""Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS."""

    priv_key_path: Annotated[Optional[str], pydantic.Field(alias="privKeyPath")] = None
    r"""Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS."""

    cert_path: Annotated[Optional[str], pydantic.Field(alias="certPath")] = None
    r"""Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS."""

    passphrase: Optional[str] = None
    r"""Passphrase to use to decrypt private key"""

    min_version: Annotated[
        Annotated[
            Optional[OutputSyslogMinimumTLSVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="minVersion"),
    ] = None

    max_version: Annotated[
        Annotated[
            Optional[OutputSyslogMaximumTLSVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="maxVersion"),
    ] = None


class OutputSyslogBackpressureBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when all receivers are exerting backpressure"""

    BLOCK = "block"
    DROP = "drop"
    QUEUE = "queue"


class OutputSyslogCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    NONE = "none"
    GZIP = "gzip"


class OutputSyslogQueueFullBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    BLOCK = "block"
    DROP = "drop"


class OutputSyslogMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    ERROR = "error"
    BACKPRESSURE = "backpressure"
    ALWAYS = "always"


class OutputSyslogPqControlsTypedDict(TypedDict):
    pass


class OutputSyslogPqControls(BaseModel):
    pass


class OutputSyslogTLS(str, Enum):
    r"""Whether to inherit TLS configs from group setting or disable TLS"""

    INHERIT = "inherit"
    OFF = "off"


class OutputSyslogHostTypedDict(TypedDict):
    host: str
    r"""The hostname of the receiver"""
    port: NotRequired[float]
    r"""The port to connect to on the provided host"""
    tls: NotRequired[OutputSyslogTLS]
    r"""Whether to inherit TLS configs from group setting or disable TLS"""
    servername: NotRequired[str]
    r"""Servername to use if establishing a TLS connection. If not specified, defaults to connection host (if not an IP); otherwise, uses the global TLS settings."""
    weight: NotRequired[float]
    r"""Assign a weight (>0) to each endpoint to indicate its traffic-handling capability"""


class OutputSyslogHost(BaseModel):
    host: str
    r"""The hostname of the receiver"""

    port: Optional[float] = 9997
    r"""The port to connect to on the provided host"""

    tls: Optional[OutputSyslogTLS] = OutputSyslogTLS.INHERIT
    r"""Whether to inherit TLS configs from group setting or disable TLS"""

    servername: Optional[str] = None
    r"""Servername to use if establishing a TLS connection. If not specified, defaults to connection host (if not an IP); otherwise, uses the global TLS settings."""

    weight: Optional[float] = 1
    r"""Assign a weight (>0) to each endpoint to indicate its traffic-handling capability"""


class OutputSyslogTypedDict(TypedDict):
    type: OutputSyslogType
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    protocol: NotRequired[OutputSyslogProtocol]
    r"""The network protocol to use for sending out syslog messages"""
    facility: NotRequired[Facility]
    r"""Default value for message facility. Will be overwritten by value of __facility if set. Defaults to user."""
    severity: NotRequired[OutputSyslogSeverity]
    r"""Default value for message severity. Will be overwritten by value of __severity if set. Defaults to notice."""
    app_name: NotRequired[str]
    r"""Default name for device or application that originated the message. Defaults to Cribl, but will be overwritten by value of __appname if set."""
    message_format: NotRequired[OutputSyslogMessageFormat]
    r"""The syslog message format depending on the receiver's support"""
    timestamp_format: NotRequired[TimestampFormat]
    r"""Timestamp format to use when serializing event's time field"""
    throttle_rate_per_sec: NotRequired[str]
    r"""Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling."""
    octet_count_framing: NotRequired[bool]
    r"""Prefix messages with the byte count of the message. If disabled, no prefix will be set, and the message will be appended with a \n."""
    log_failed_requests: NotRequired[bool]
    r"""Use to troubleshoot issues with sending data"""
    description: NotRequired[str]
    load_balanced: NotRequired[bool]
    r"""For optimal performance, enable load balancing even if you have one hostname, as it can expand to multiple IPs.  If this setting is disabled, consider enabling round-robin DNS."""
    connection_timeout: NotRequired[float]
    r"""Amount of time (milliseconds) to wait for the connection to establish before retrying"""
    write_timeout: NotRequired[float]
    r"""Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead"""
    tls: NotRequired[OutputSyslogTLSSettingsClientSideTypedDict]
    on_backpressure: NotRequired[OutputSyslogBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    host: NotRequired[str]
    r"""The hostname of the receiver"""
    port: NotRequired[float]
    r"""The port to connect to on the provided host"""
    max_record_size: NotRequired[float]
    r"""Maximum size of syslog messages. Make sure this value is less than or equal to the MTU to avoid UDP packet fragmentation."""
    udp_dns_resolve_period_sec: NotRequired[float]
    r"""How often to resolve the destination hostname to an IP address. Ignored if the destination is an IP address. A value of 0 means every message sent will incur a DNS lookup."""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputSyslogCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputSyslogQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputSyslogMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputSyslogPqControlsTypedDict]
    dns_resolve_period_sec: NotRequired[float]
    r"""The interval in which to re-resolve any hostnames and pick up destinations from A records"""
    load_balance_stats_period_sec: NotRequired[float]
    r"""How far back in time to keep traffic stats for load balancing purposes"""
    max_concurrent_senders: NotRequired[float]
    r"""Maximum number of concurrent connections (per Worker Process). A random set of IPs will be picked on every DNS resolution period. Use 0 for unlimited."""
    exclude_self: NotRequired[bool]
    r"""Exclude all IPs of the current host from the list of any resolved hostnames"""
    hosts: NotRequired[List[OutputSyslogHostTypedDict]]
    r"""Set of hosts to load-balance data to."""


class OutputSyslog(BaseModel):
    type: OutputSyslogType

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    protocol: Annotated[
        Optional[OutputSyslogProtocol], PlainValidator(validate_open_enum(False))
    ] = OutputSyslogProtocol.TCP
    r"""The network protocol to use for sending out syslog messages"""

    facility: Annotated[
        Optional[Facility], PlainValidator(validate_open_enum(True))
    ] = Facility.ONE
    r"""Default value for message facility. Will be overwritten by value of __facility if set. Defaults to user."""

    severity: Annotated[
        Optional[OutputSyslogSeverity], PlainValidator(validate_open_enum(True))
    ] = OutputSyslogSeverity.FIVE
    r"""Default value for message severity. Will be overwritten by value of __severity if set. Defaults to notice."""

    app_name: Annotated[Optional[str], pydantic.Field(alias="appName")] = "Cribl"
    r"""Default name for device or application that originated the message. Defaults to Cribl, but will be overwritten by value of __appname if set."""

    message_format: Annotated[
        Annotated[
            Optional[OutputSyslogMessageFormat],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="messageFormat"),
    ] = OutputSyslogMessageFormat.RFC3164
    r"""The syslog message format depending on the receiver's support"""

    timestamp_format: Annotated[
        Annotated[Optional[TimestampFormat], PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="timestampFormat"),
    ] = TimestampFormat.SYSLOG
    r"""Timestamp format to use when serializing event's time field"""

    throttle_rate_per_sec: Annotated[
        Optional[str], pydantic.Field(alias="throttleRatePerSec")
    ] = "0"
    r"""Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling."""

    octet_count_framing: Annotated[
        Optional[bool], pydantic.Field(alias="octetCountFraming")
    ] = None
    r"""Prefix messages with the byte count of the message. If disabled, no prefix will be set, and the message will be appended with a \n."""

    log_failed_requests: Annotated[
        Optional[bool], pydantic.Field(alias="logFailedRequests")
    ] = False
    r"""Use to troubleshoot issues with sending data"""

    description: Optional[str] = None

    load_balanced: Annotated[Optional[bool], pydantic.Field(alias="loadBalanced")] = (
        True
    )
    r"""For optimal performance, enable load balancing even if you have one hostname, as it can expand to multiple IPs.  If this setting is disabled, consider enabling round-robin DNS."""

    connection_timeout: Annotated[
        Optional[float], pydantic.Field(alias="connectionTimeout")
    ] = 10000
    r"""Amount of time (milliseconds) to wait for the connection to establish before retrying"""

    write_timeout: Annotated[Optional[float], pydantic.Field(alias="writeTimeout")] = (
        60000
    )
    r"""Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead"""

    tls: Optional[OutputSyslogTLSSettingsClientSide] = None

    on_backpressure: Annotated[
        Annotated[
            Optional[OutputSyslogBackpressureBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputSyslogBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    host: Optional[str] = None
    r"""The hostname of the receiver"""

    port: Optional[float] = None
    r"""The port to connect to on the provided host"""

    max_record_size: Annotated[
        Optional[float], pydantic.Field(alias="maxRecordSize")
    ] = 1500
    r"""Maximum size of syslog messages. Make sure this value is less than or equal to the MTU to avoid UDP packet fragmentation."""

    udp_dns_resolve_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="udpDnsResolvePeriodSec")
    ] = 0
    r"""How often to resolve the destination hostname to an IP address. Ignored if the destination is an IP address. A value of 0 means every message sent will incur a DNS lookup."""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Annotated[
            Optional[OutputSyslogCompression], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="pqCompress"),
    ] = OutputSyslogCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Annotated[
            Optional[OutputSyslogQueueFullBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputSyslogQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Annotated[
            Optional[OutputSyslogMode], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="pqMode"),
    ] = OutputSyslogMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputSyslogPqControls], pydantic.Field(alias="pqControls")
    ] = None

    dns_resolve_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="dnsResolvePeriodSec")
    ] = 600
    r"""The interval in which to re-resolve any hostnames and pick up destinations from A records"""

    load_balance_stats_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="loadBalanceStatsPeriodSec")
    ] = 300
    r"""How far back in time to keep traffic stats for load balancing purposes"""

    max_concurrent_senders: Annotated[
        Optional[float], pydantic.Field(alias="maxConcurrentSenders")
    ] = 0
    r"""Maximum number of concurrent connections (per Worker Process). A random set of IPs will be picked on every DNS resolution period. Use 0 for unlimited."""

    exclude_self: Annotated[Optional[bool], pydantic.Field(alias="excludeSelf")] = False
    r"""Exclude all IPs of the current host from the list of any resolved hostnames"""

    hosts: Optional[List[OutputSyslogHost]] = None
    r"""Set of hosts to load-balance data to."""
