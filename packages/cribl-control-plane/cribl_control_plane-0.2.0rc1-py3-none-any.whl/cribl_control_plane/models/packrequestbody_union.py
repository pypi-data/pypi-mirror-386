"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane.types import BaseModel
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class PackRequestBodyTags2TypedDict(TypedDict):
    data_type: NotRequired[List[str]]
    domain: NotRequired[List[str]]
    technology: NotRequired[List[str]]
    streamtags: NotRequired[List[str]]


class PackRequestBodyTags2(BaseModel):
    data_type: Annotated[Optional[List[str]], pydantic.Field(alias="dataType")] = None

    domain: Optional[List[str]] = None

    technology: Optional[List[str]] = None

    streamtags: Optional[List[str]] = None


class PackRequestBody2TypedDict(TypedDict):
    source: str
    r"""The source of the pack. If not present, an empty pack will be created"""
    id: NotRequired[str]
    spec: NotRequired[str]
    version: NotRequired[str]
    min_log_stream_version: NotRequired[str]
    display_name: NotRequired[str]
    author: NotRequired[str]
    description: NotRequired[str]
    tags: NotRequired[PackRequestBodyTags2TypedDict]
    allow_custom_functions: NotRequired[bool]
    force: NotRequired[bool]


class PackRequestBody2(BaseModel):
    source: str
    r"""The source of the pack. If not present, an empty pack will be created"""

    id: Optional[str] = None

    spec: Optional[str] = None

    version: Optional[str] = None

    min_log_stream_version: Annotated[
        Optional[str], pydantic.Field(alias="minLogStreamVersion")
    ] = None

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None

    author: Optional[str] = None

    description: Optional[str] = None

    tags: Optional[PackRequestBodyTags2] = None

    allow_custom_functions: Annotated[
        Optional[bool], pydantic.Field(alias="allowCustomFunctions")
    ] = None

    force: Optional[bool] = None


class PackRequestBodyTags1TypedDict(TypedDict):
    data_type: NotRequired[List[str]]
    domain: NotRequired[List[str]]
    technology: NotRequired[List[str]]
    streamtags: NotRequired[List[str]]


class PackRequestBodyTags1(BaseModel):
    data_type: Annotated[Optional[List[str]], pydantic.Field(alias="dataType")] = None

    domain: Optional[List[str]] = None

    technology: Optional[List[str]] = None

    streamtags: Optional[List[str]] = None


class PackRequestBody1TypedDict(TypedDict):
    id: str
    spec: NotRequired[str]
    version: NotRequired[str]
    min_log_stream_version: NotRequired[str]
    display_name: NotRequired[str]
    author: NotRequired[str]
    description: NotRequired[str]
    source: NotRequired[str]
    r"""The source of the pack. If not present, an empty pack will be created"""
    tags: NotRequired[PackRequestBodyTags1TypedDict]
    allow_custom_functions: NotRequired[bool]
    force: NotRequired[bool]


class PackRequestBody1(BaseModel):
    id: str

    spec: Optional[str] = None

    version: Optional[str] = None

    min_log_stream_version: Annotated[
        Optional[str], pydantic.Field(alias="minLogStreamVersion")
    ] = None

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None

    author: Optional[str] = None

    description: Optional[str] = None

    source: Optional[str] = None
    r"""The source of the pack. If not present, an empty pack will be created"""

    tags: Optional[PackRequestBodyTags1] = None

    allow_custom_functions: Annotated[
        Optional[bool], pydantic.Field(alias="allowCustomFunctions")
    ] = None

    force: Optional[bool] = None


PackRequestBodyUnionTypedDict = TypeAliasType(
    "PackRequestBodyUnionTypedDict",
    Union[PackRequestBody1TypedDict, PackRequestBody2TypedDict],
)


PackRequestBodyUnion = TypeAliasType(
    "PackRequestBodyUnion", Union[PackRequestBody1, PackRequestBody2]
)
