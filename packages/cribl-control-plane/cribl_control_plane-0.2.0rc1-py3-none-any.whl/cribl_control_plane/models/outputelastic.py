"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputElasticType(str, Enum):
    ELASTIC = "elastic"


class OutputElasticExtraHTTPHeaderTypedDict(TypedDict):
    value: str
    name: NotRequired[str]


class OutputElasticExtraHTTPHeader(BaseModel):
    value: str

    name: Optional[str] = None


class OutputElasticFailedRequestLoggingMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    PAYLOAD = "payload"
    PAYLOAD_AND_HEADERS = "payloadAndHeaders"
    NONE = "none"


class OutputElasticResponseRetrySettingTypedDict(TypedDict):
    http_status: float
    r"""The HTTP response status code that will trigger retries"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputElasticResponseRetrySetting(BaseModel):
    http_status: Annotated[float, pydantic.Field(alias="httpStatus")]
    r"""The HTTP response status code that will trigger retries"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputElasticTimeoutRetrySettingsTypedDict(TypedDict):
    timeout_retry: NotRequired[bool]
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputElasticTimeoutRetrySettings(BaseModel):
    timeout_retry: Annotated[Optional[bool], pydantic.Field(alias="timeoutRetry")] = (
        False
    )

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputElasticExtraParamTypedDict(TypedDict):
    name: str
    value: str


class OutputElasticExtraParam(BaseModel):
    name: str

    value: str


class OutputElasticAuthenticationMethod(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Enter credentials directly, or select a stored secret"""

    MANUAL = "manual"
    SECRET = "secret"
    MANUAL_API_KEY = "manualAPIKey"
    TEXT_SECRET = "textSecret"


class OutputElasticAuthTypedDict(TypedDict):
    disabled: NotRequired[bool]
    auth_type: NotRequired[OutputElasticAuthenticationMethod]
    r"""Enter credentials directly, or select a stored secret"""


class OutputElasticAuth(BaseModel):
    disabled: Optional[bool] = True

    auth_type: Annotated[
        Annotated[
            Optional[OutputElasticAuthenticationMethod],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="authType"),
    ] = OutputElasticAuthenticationMethod.MANUAL
    r"""Enter credentials directly, or select a stored secret"""


class ElasticVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Optional Elasticsearch version, used to format events. If not specified, will auto-discover version."""

    AUTO = "auto"
    SIX = "6"
    SEVEN = "7"


class WriteAction(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Action to use when writing events. Must be set to `Create` when writing to a data stream."""

    INDEX = "index"
    CREATE = "create"


class OutputElasticBackpressureBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when all receivers are exerting backpressure"""

    BLOCK = "block"
    DROP = "drop"
    QUEUE = "queue"


class OutputElasticURLTypedDict(TypedDict):
    url: str
    r"""The URL to an Elastic node to send events to. Example: http://elastic:9200/_bulk"""
    weight: NotRequired[float]
    r"""Assign a weight (>0) to each endpoint to indicate its traffic-handling capability"""


class OutputElasticURL(BaseModel):
    url: str
    r"""The URL to an Elastic node to send events to. Example: http://elastic:9200/_bulk"""

    weight: Optional[float] = 1
    r"""Assign a weight (>0) to each endpoint to indicate its traffic-handling capability"""


class OutputElasticCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    NONE = "none"
    GZIP = "gzip"


class OutputElasticQueueFullBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    BLOCK = "block"
    DROP = "drop"


class OutputElasticMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    ERROR = "error"
    BACKPRESSURE = "backpressure"
    ALWAYS = "always"


class OutputElasticPqControlsTypedDict(TypedDict):
    pass


class OutputElasticPqControls(BaseModel):
    pass


class OutputElasticTypedDict(TypedDict):
    type: OutputElasticType
    index: str
    r"""Index or data stream to send events to. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be overwritten by an event's __index field."""
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    load_balanced: NotRequired[bool]
    r"""Enable for optimal performance. Even if you have one hostname, it can expand to multiple IPs. If disabled, consider enabling round-robin DNS."""
    doc_type: NotRequired[str]
    r"""Document type to use for events. Can be overwritten by an event's __type field."""
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking"""
    max_payload_size_kb: NotRequired[float]
    r"""Maximum size, in KB, of the request body"""
    max_payload_events: NotRequired[float]
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""
    compress: NotRequired[bool]
    r"""Compress the payload body before sending"""
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""
    extra_http_headers: NotRequired[List[OutputElasticExtraHTTPHeaderTypedDict]]
    r"""Headers to add to all events"""
    failed_request_logging_mode: NotRequired[OutputElasticFailedRequestLoggingMode]
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""
    safe_headers: NotRequired[List[str]]
    r"""List of headers that are safe to log in plain text"""
    response_retry_settings: NotRequired[
        List[OutputElasticResponseRetrySettingTypedDict]
    ]
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""
    timeout_retry_settings: NotRequired[OutputElasticTimeoutRetrySettingsTypedDict]
    response_honor_retry_after_header: NotRequired[bool]
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""
    extra_params: NotRequired[List[OutputElasticExtraParamTypedDict]]
    auth: NotRequired[OutputElasticAuthTypedDict]
    elastic_version: NotRequired[ElasticVersion]
    r"""Optional Elasticsearch version, used to format events. If not specified, will auto-discover version."""
    elastic_pipeline: NotRequired[str]
    r"""Optional Elasticsearch destination pipeline"""
    include_doc_id: NotRequired[bool]
    r"""Include the `document_id` field when sending events to an Elastic TSDS (time series data stream)"""
    write_action: NotRequired[WriteAction]
    r"""Action to use when writing events. Must be set to `Create` when writing to a data stream."""
    retry_partial_errors: NotRequired[bool]
    r"""Retry failed events when a bulk request to Elastic is successful, but the response body returns an error for one or more events in the batch"""
    on_backpressure: NotRequired[OutputElasticBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    description: NotRequired[str]
    url: NotRequired[str]
    r"""The Cloud ID or URL to an Elastic cluster to send events to. Example: http://elastic:9200/_bulk"""
    use_round_robin_dns: NotRequired[bool]
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""
    exclude_self: NotRequired[bool]
    r"""Exclude all IPs of the current host from the list of any resolved hostnames"""
    urls: NotRequired[List[OutputElasticURLTypedDict]]
    dns_resolve_period_sec: NotRequired[float]
    r"""The interval in which to re-resolve any hostnames and pick up destinations from A records"""
    load_balance_stats_period_sec: NotRequired[float]
    r"""How far back in time to keep traffic stats for load balancing purposes"""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputElasticCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputElasticQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputElasticMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputElasticPqControlsTypedDict]


class OutputElastic(BaseModel):
    type: OutputElasticType

    index: str
    r"""Index or data stream to send events to. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be overwritten by an event's __index field."""

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    load_balanced: Annotated[Optional[bool], pydantic.Field(alias="loadBalanced")] = (
        True
    )
    r"""Enable for optimal performance. Even if you have one hostname, it can expand to multiple IPs. If disabled, consider enabling round-robin DNS."""

    doc_type: Annotated[Optional[str], pydantic.Field(alias="docType")] = None
    r"""Document type to use for events. Can be overwritten by an event's __type field."""

    concurrency: Optional[float] = 5
    r"""Maximum number of ongoing requests before blocking"""

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = 4096
    r"""Maximum size, in KB, of the request body"""

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = 0
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""

    compress: Optional[bool] = True
    r"""Compress the payload body before sending"""

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 30
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 1
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""

    extra_http_headers: Annotated[
        Optional[List[OutputElasticExtraHTTPHeader]],
        pydantic.Field(alias="extraHttpHeaders"),
    ] = None
    r"""Headers to add to all events"""

    failed_request_logging_mode: Annotated[
        Annotated[
            Optional[OutputElasticFailedRequestLoggingMode],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="failedRequestLoggingMode"),
    ] = OutputElasticFailedRequestLoggingMode.NONE
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    safe_headers: Annotated[
        Optional[List[str]], pydantic.Field(alias="safeHeaders")
    ] = None
    r"""List of headers that are safe to log in plain text"""

    response_retry_settings: Annotated[
        Optional[List[OutputElasticResponseRetrySetting]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""

    timeout_retry_settings: Annotated[
        Optional[OutputElasticTimeoutRetrySettings],
        pydantic.Field(alias="timeoutRetrySettings"),
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = True
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""

    extra_params: Annotated[
        Optional[List[OutputElasticExtraParam]], pydantic.Field(alias="extraParams")
    ] = None

    auth: Optional[OutputElasticAuth] = None

    elastic_version: Annotated[
        Annotated[Optional[ElasticVersion], PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="elasticVersion"),
    ] = ElasticVersion.AUTO
    r"""Optional Elasticsearch version, used to format events. If not specified, will auto-discover version."""

    elastic_pipeline: Annotated[
        Optional[str], pydantic.Field(alias="elasticPipeline")
    ] = None
    r"""Optional Elasticsearch destination pipeline"""

    include_doc_id: Annotated[Optional[bool], pydantic.Field(alias="includeDocId")] = (
        False
    )
    r"""Include the `document_id` field when sending events to an Elastic TSDS (time series data stream)"""

    write_action: Annotated[
        Annotated[Optional[WriteAction], PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="writeAction"),
    ] = WriteAction.CREATE
    r"""Action to use when writing events. Must be set to `Create` when writing to a data stream."""

    retry_partial_errors: Annotated[
        Optional[bool], pydantic.Field(alias="retryPartialErrors")
    ] = False
    r"""Retry failed events when a bulk request to Elastic is successful, but the response body returns an error for one or more events in the batch"""

    on_backpressure: Annotated[
        Annotated[
            Optional[OutputElasticBackpressureBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputElasticBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    description: Optional[str] = None

    url: Optional[str] = None
    r"""The Cloud ID or URL to an Elastic cluster to send events to. Example: http://elastic:9200/_bulk"""

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = False
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""

    exclude_self: Annotated[Optional[bool], pydantic.Field(alias="excludeSelf")] = False
    r"""Exclude all IPs of the current host from the list of any resolved hostnames"""

    urls: Optional[List[OutputElasticURL]] = None

    dns_resolve_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="dnsResolvePeriodSec")
    ] = 600
    r"""The interval in which to re-resolve any hostnames and pick up destinations from A records"""

    load_balance_stats_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="loadBalanceStatsPeriodSec")
    ] = 300
    r"""How far back in time to keep traffic stats for load balancing purposes"""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Annotated[
            Optional[OutputElasticCompression],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqCompress"),
    ] = OutputElasticCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Annotated[
            Optional[OutputElasticQueueFullBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputElasticQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Annotated[
            Optional[OutputElasticMode], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="pqMode"),
    ] = OutputElasticMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputElasticPqControls], pydantic.Field(alias="pqControls")
    ] = None
