"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class InputFileType(str, Enum):
    FILE = "file"


class InputFileConnectionTypedDict(TypedDict):
    output: str
    pipeline: NotRequired[str]


class InputFileConnection(BaseModel):
    output: str

    pipeline: Optional[str] = None


class InputFilePqMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine."""

    SMART = "smart"
    ALWAYS = "always"


class InputFileCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    NONE = "none"
    GZIP = "gzip"


class InputFilePqControlsTypedDict(TypedDict):
    pass


class InputFilePqControls(BaseModel):
    pass


class InputFilePqTypedDict(TypedDict):
    mode: NotRequired[InputFilePqMode]
    r"""With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine."""
    max_buffer_size: NotRequired[float]
    r"""The maximum number of events to hold in memory before writing the events to disk"""
    commit_frequency: NotRequired[float]
    r"""The number of events to send downstream before committing that Stream has read them"""
    max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc."""
    max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>"""
    compress: NotRequired[InputFileCompression]
    r"""Codec to use to compress the persisted data"""
    pq_controls: NotRequired[InputFilePqControlsTypedDict]


class InputFilePq(BaseModel):
    mode: Annotated[
        Optional[InputFilePqMode], PlainValidator(validate_open_enum(False))
    ] = InputFilePqMode.ALWAYS
    r"""With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine."""

    max_buffer_size: Annotated[
        Optional[float], pydantic.Field(alias="maxBufferSize")
    ] = 1000
    r"""The maximum number of events to hold in memory before writing the events to disk"""

    commit_frequency: Annotated[
        Optional[float], pydantic.Field(alias="commitFrequency")
    ] = 42
    r"""The number of events to send downstream before committing that Stream has read them"""

    max_file_size: Annotated[Optional[str], pydantic.Field(alias="maxFileSize")] = (
        "1 MB"
    )
    r"""The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc."""

    max_size: Annotated[Optional[str], pydantic.Field(alias="maxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    path: Optional[str] = "$CRIBL_HOME/state/queues"
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>"""

    compress: Annotated[
        Optional[InputFileCompression], PlainValidator(validate_open_enum(False))
    ] = InputFileCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_controls: Annotated[
        Optional[InputFilePqControls], pydantic.Field(alias="pqControls")
    ] = None


class InputFileMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Choose how to discover files to monitor"""

    AUTO = "auto"
    MANUAL = "manual"


class InputFileMetadatumTypedDict(TypedDict):
    name: str
    value: str
    r"""JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)"""


class InputFileMetadatum(BaseModel):
    name: str

    value: str
    r"""JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)"""


class InputFileTypedDict(TypedDict):
    type: InputFileType
    id: NotRequired[str]
    r"""Unique ID for this input"""
    disabled: NotRequired[bool]
    pipeline: NotRequired[str]
    r"""Pipeline to process data from this Source before sending it through the Routes"""
    send_to_routes: NotRequired[bool]
    r"""Select whether to send data to Routes, or directly to Destinations."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    pq_enabled: NotRequired[bool]
    r"""Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers)."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    connections: NotRequired[List[InputFileConnectionTypedDict]]
    r"""Direct connections to Destinations, and optionally via a Pipeline or a Pack"""
    pq: NotRequired[InputFilePqTypedDict]
    mode: NotRequired[InputFileMode]
    r"""Choose how to discover files to monitor"""
    interval: NotRequired[float]
    r"""Time, in seconds, between scanning for files"""
    filenames: NotRequired[List[str]]
    r"""The full path of discovered files are matched against this wildcard list"""
    tail_only: NotRequired[bool]
    r"""Read only new entries at the end of all files discovered at next startup. @{product} will then read newly discovered files from the head. Disable this to resume reading all files from head."""
    idle_timeout: NotRequired[float]
    r"""Time, in seconds, before an idle file is closed"""
    max_age_dur: NotRequired[str]
    r"""The maximum age of files to monitor. Format examples: 60s, 4h, 3d, 1w. Age is relative to file modification time. Leave empty to apply no age filters."""
    check_file_mod_time: NotRequired[bool]
    r"""Skip files with modification times earlier than the maximum age duration"""
    force_text: NotRequired[bool]
    r"""Forces files containing binary data to be streamed as text"""
    hash_len: NotRequired[float]
    r"""Length of file header bytes to use in hash for unique file identification"""
    metadata: NotRequired[List[InputFileMetadatumTypedDict]]
    r"""Fields to add to events from this input"""
    breaker_rulesets: NotRequired[List[str]]
    r"""A list of event-breaking rulesets that will be applied, in order, to the input data stream"""
    stale_channel_flush_ms: NotRequired[float]
    r"""How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines"""
    description: NotRequired[str]
    path: NotRequired[str]
    r"""Directory path to search for files. Environment variables will be resolved, e.g. $CRIBL_HOME/log/."""
    depth: NotRequired[float]
    r"""Set how many subdirectories deep to search. Use 0 to search only files in the given path, 1 to also look in its immediate subdirectories, etc. Leave it empty for unlimited depth."""
    suppress_missing_path_errors: NotRequired[bool]
    delete_files: NotRequired[bool]
    r"""Delete files after they have been collected"""
    include_unidentifiable_binary: NotRequired[bool]
    r"""Stream binary files as Base64-encoded chunks."""


class InputFile(BaseModel):
    type: InputFileType

    id: Optional[str] = None
    r"""Unique ID for this input"""

    disabled: Optional[bool] = False

    pipeline: Optional[str] = None
    r"""Pipeline to process data from this Source before sending it through the Routes"""

    send_to_routes: Annotated[Optional[bool], pydantic.Field(alias="sendToRoutes")] = (
        True
    )
    r"""Select whether to send data to Routes, or directly to Destinations."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    pq_enabled: Annotated[Optional[bool], pydantic.Field(alias="pqEnabled")] = False
    r"""Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers)."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    connections: Optional[List[InputFileConnection]] = None
    r"""Direct connections to Destinations, and optionally via a Pipeline or a Pack"""

    pq: Optional[InputFilePq] = None

    mode: Annotated[
        Optional[InputFileMode], PlainValidator(validate_open_enum(False))
    ] = InputFileMode.AUTO
    r"""Choose how to discover files to monitor"""

    interval: Optional[float] = 10
    r"""Time, in seconds, between scanning for files"""

    filenames: Optional[List[str]] = None
    r"""The full path of discovered files are matched against this wildcard list"""

    tail_only: Annotated[Optional[bool], pydantic.Field(alias="tailOnly")] = False
    r"""Read only new entries at the end of all files discovered at next startup. @{product} will then read newly discovered files from the head. Disable this to resume reading all files from head."""

    idle_timeout: Annotated[Optional[float], pydantic.Field(alias="idleTimeout")] = 300
    r"""Time, in seconds, before an idle file is closed"""

    max_age_dur: Annotated[Optional[str], pydantic.Field(alias="maxAgeDur")] = None
    r"""The maximum age of files to monitor. Format examples: 60s, 4h, 3d, 1w. Age is relative to file modification time. Leave empty to apply no age filters."""

    check_file_mod_time: Annotated[
        Optional[bool], pydantic.Field(alias="checkFileModTime")
    ] = False
    r"""Skip files with modification times earlier than the maximum age duration"""

    force_text: Annotated[Optional[bool], pydantic.Field(alias="forceText")] = False
    r"""Forces files containing binary data to be streamed as text"""

    hash_len: Annotated[Optional[float], pydantic.Field(alias="hashLen")] = 256
    r"""Length of file header bytes to use in hash for unique file identification"""

    metadata: Optional[List[InputFileMetadatum]] = None
    r"""Fields to add to events from this input"""

    breaker_rulesets: Annotated[
        Optional[List[str]], pydantic.Field(alias="breakerRulesets")
    ] = None
    r"""A list of event-breaking rulesets that will be applied, in order, to the input data stream"""

    stale_channel_flush_ms: Annotated[
        Optional[float], pydantic.Field(alias="staleChannelFlushMs")
    ] = 10000
    r"""How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines"""

    description: Optional[str] = None

    path: Optional[str] = None
    r"""Directory path to search for files. Environment variables will be resolved, e.g. $CRIBL_HOME/log/."""

    depth: Optional[float] = None
    r"""Set how many subdirectories deep to search. Use 0 to search only files in the given path, 1 to also look in its immediate subdirectories, etc. Leave it empty for unlimited depth."""

    suppress_missing_path_errors: Annotated[
        Optional[bool], pydantic.Field(alias="suppressMissingPathErrors")
    ] = False

    delete_files: Annotated[Optional[bool], pydantic.Field(alias="deleteFiles")] = False
    r"""Delete files after they have been collected"""

    include_unidentifiable_binary: Annotated[
        Optional[bool], pydantic.Field(alias="includeUnidentifiableBinary")
    ] = False
    r"""Stream binary files as Base64-encoded chunks."""
