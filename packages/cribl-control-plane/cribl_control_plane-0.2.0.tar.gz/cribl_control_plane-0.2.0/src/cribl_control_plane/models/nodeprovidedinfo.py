"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .hbcriblinfo import HBCriblInfo, HBCriblInfoTypedDict
from .heartbeatmetadata import HeartbeatMetadata, HeartbeatMetadataTypedDict
from cribl_control_plane.types import BaseModel
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class NodeProvidedInfoTagsTypedDict(TypedDict):
    pass


class NodeProvidedInfoTags(BaseModel):
    pass


class NodeProvidedInfoAwsTypedDict(TypedDict):
    enabled: bool
    region: str
    type: str
    zone: str
    tags: NotRequired[NodeProvidedInfoTagsTypedDict]


class NodeProvidedInfoAws(BaseModel):
    enabled: bool

    region: str

    type: str

    zone: str

    tags: Optional[NodeProvidedInfoTags] = None


class NodeProvidedInfoHostOsTypedDict(TypedDict):
    addresses: List[str]
    enabled: bool
    id: str
    version: str


class NodeProvidedInfoHostOs(BaseModel):
    addresses: List[str]

    enabled: bool

    id: str

    version: str


class NodeProvidedInfoOwnerTypedDict(TypedDict):
    kind: str
    name: str


class NodeProvidedInfoOwner(BaseModel):
    kind: str

    name: str


class NodeProvidedInfoKubeTypedDict(TypedDict):
    enabled: bool
    namespace: str
    node: str
    pod: str
    source: str
    owner: NotRequired[NodeProvidedInfoOwnerTypedDict]


class NodeProvidedInfoKube(BaseModel):
    enabled: bool

    namespace: str

    node: str

    pod: str

    source: str

    owner: Optional[NodeProvidedInfoOwner] = None


class NodeProvidedInfoOs2TypedDict(TypedDict):
    addresses: List[str]


class NodeProvidedInfoOs2(BaseModel):
    addresses: List[str]


class NodeProvidedInfoOs1TypedDict(TypedDict):
    addresses: List[str]
    enabled: bool
    id: str
    version: str


class NodeProvidedInfoOs1(BaseModel):
    addresses: List[str]

    enabled: bool

    id: str

    version: str


OsTypedDict = TypeAliasType(
    "OsTypedDict", Union[NodeProvidedInfoOs2TypedDict, NodeProvidedInfoOs1TypedDict]
)


Os = TypeAliasType("Os", Union[NodeProvidedInfoOs2, NodeProvidedInfoOs1])


class NodeProvidedInfoTypedDict(TypedDict):
    architecture: str
    cpus: float
    cribl: HBCriblInfoTypedDict
    free_disk_space: float
    hostname: str
    node: str
    platform: str
    release: str
    total_disk_space: float
    totalmem: float
    aws: NotRequired[NodeProvidedInfoAwsTypedDict]
    conn_ip: NotRequired[str]
    host_os: NotRequired[NodeProvidedInfoHostOsTypedDict]
    is_saas_worker: NotRequired[bool]
    kube: NotRequired[NodeProvidedInfoKubeTypedDict]
    local_time: NotRequired[float]
    metadata: NotRequired[HeartbeatMetadataTypedDict]
    os: NotRequired[OsTypedDict]


class NodeProvidedInfo(BaseModel):
    architecture: str

    cpus: float

    cribl: HBCriblInfo

    free_disk_space: Annotated[float, pydantic.Field(alias="freeDiskSpace")]

    hostname: str

    node: str

    platform: str

    release: str

    total_disk_space: Annotated[float, pydantic.Field(alias="totalDiskSpace")]

    totalmem: float

    aws: Optional[NodeProvidedInfoAws] = None

    conn_ip: Optional[str] = None

    host_os: Annotated[
        Optional[NodeProvidedInfoHostOs], pydantic.Field(alias="hostOs")
    ] = None

    is_saas_worker: Annotated[Optional[bool], pydantic.Field(alias="isSaasWorker")] = (
        None
    )

    kube: Optional[NodeProvidedInfoKube] = None

    local_time: Annotated[Optional[float], pydantic.Field(alias="localTime")] = None

    metadata: Optional[HeartbeatMetadata] = None

    os: Optional[Os] = None
