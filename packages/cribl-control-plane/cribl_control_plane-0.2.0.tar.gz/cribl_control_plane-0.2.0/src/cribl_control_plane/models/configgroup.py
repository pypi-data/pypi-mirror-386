"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .commit import Commit, CommitTypedDict
from .configgroupcloud import ConfigGroupCloud, ConfigGroupCloudTypedDict
from .configgrouplookups import ConfigGroupLookups, ConfigGroupLookupsTypedDict
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GitTypedDict(TypedDict):
    commit: NotRequired[str]
    local_changes: NotRequired[float]
    log: NotRequired[List[CommitTypedDict]]


class Git(BaseModel):
    commit: Optional[str] = None

    local_changes: Annotated[Optional[float], pydantic.Field(alias="localChanges")] = (
        None
    )

    log: Optional[List[Commit]] = None


class ConfigGroupType(str, Enum, metaclass=utils.OpenEnumMeta):
    LAKE_ACCESS = "lake_access"


class ConfigGroupTypedDict(TypedDict):
    id: str
    cloud: NotRequired[ConfigGroupCloudTypedDict]
    config_version: NotRequired[str]
    deploying_worker_count: NotRequired[float]
    description: NotRequired[str]
    estimated_ingest_rate: NotRequired[float]
    git: NotRequired[GitTypedDict]
    incompatible_worker_count: NotRequired[float]
    inherits: NotRequired[str]
    is_fleet: NotRequired[bool]
    is_search: NotRequired[bool]
    lookup_deployments: NotRequired[List[ConfigGroupLookupsTypedDict]]
    max_worker_age: NotRequired[str]
    name: NotRequired[str]
    on_prem: NotRequired[bool]
    provisioned: NotRequired[bool]
    streamtags: NotRequired[List[str]]
    tags: NotRequired[str]
    type: NotRequired[ConfigGroupType]
    upgrade_version: NotRequired[str]
    worker_count: NotRequired[float]
    worker_remote_access: NotRequired[bool]


class ConfigGroup(BaseModel):
    id: str

    cloud: Optional[ConfigGroupCloud] = None

    config_version: Annotated[Optional[str], pydantic.Field(alias="configVersion")] = (
        None
    )

    deploying_worker_count: Annotated[
        Optional[float], pydantic.Field(alias="deployingWorkerCount")
    ] = None

    description: Optional[str] = None

    estimated_ingest_rate: Annotated[
        Optional[float], pydantic.Field(alias="estimatedIngestRate")
    ] = None

    git: Optional[Git] = None

    incompatible_worker_count: Annotated[
        Optional[float], pydantic.Field(alias="incompatibleWorkerCount")
    ] = None

    inherits: Optional[str] = None

    is_fleet: Annotated[Optional[bool], pydantic.Field(alias="isFleet")] = None

    is_search: Annotated[Optional[bool], pydantic.Field(alias="isSearch")] = None

    lookup_deployments: Annotated[
        Optional[List[ConfigGroupLookups]], pydantic.Field(alias="lookupDeployments")
    ] = None

    max_worker_age: Annotated[Optional[str], pydantic.Field(alias="maxWorkerAge")] = (
        None
    )

    name: Optional[str] = None

    on_prem: Annotated[Optional[bool], pydantic.Field(alias="onPrem")] = None

    provisioned: Optional[bool] = None

    streamtags: Optional[List[str]] = None

    tags: Optional[str] = None

    type: Annotated[
        Optional[ConfigGroupType], PlainValidator(validate_open_enum(False))
    ] = None

    upgrade_version: Annotated[
        Optional[str], pydantic.Field(alias="upgradeVersion")
    ] = None

    worker_count: Annotated[Optional[float], pydantic.Field(alias="workerCount")] = None

    worker_remote_access: Annotated[
        Optional[bool], pydantic.Field(alias="workerRemoteAccess")
    ] = None
