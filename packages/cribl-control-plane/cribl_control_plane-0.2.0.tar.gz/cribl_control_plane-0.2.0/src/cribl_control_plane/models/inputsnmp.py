"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import Any, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class InputSnmpType(str, Enum):
    SNMP = "snmp"


class InputSnmpConnectionTypedDict(TypedDict):
    output: str
    pipeline: NotRequired[str]


class InputSnmpConnection(BaseModel):
    output: str

    pipeline: Optional[str] = None


class InputSnmpMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine."""

    SMART = "smart"
    ALWAYS = "always"


class InputSnmpCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    NONE = "none"
    GZIP = "gzip"


class InputSnmpPqControlsTypedDict(TypedDict):
    pass


class InputSnmpPqControls(BaseModel):
    pass


class InputSnmpPqTypedDict(TypedDict):
    mode: NotRequired[InputSnmpMode]
    r"""With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine."""
    max_buffer_size: NotRequired[float]
    r"""The maximum number of events to hold in memory before writing the events to disk"""
    commit_frequency: NotRequired[float]
    r"""The number of events to send downstream before committing that Stream has read them"""
    max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc."""
    max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>"""
    compress: NotRequired[InputSnmpCompression]
    r"""Codec to use to compress the persisted data"""
    pq_controls: NotRequired[InputSnmpPqControlsTypedDict]


class InputSnmpPq(BaseModel):
    mode: Annotated[
        Optional[InputSnmpMode], PlainValidator(validate_open_enum(False))
    ] = InputSnmpMode.ALWAYS
    r"""With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine."""

    max_buffer_size: Annotated[
        Optional[float], pydantic.Field(alias="maxBufferSize")
    ] = 1000
    r"""The maximum number of events to hold in memory before writing the events to disk"""

    commit_frequency: Annotated[
        Optional[float], pydantic.Field(alias="commitFrequency")
    ] = 42
    r"""The number of events to send downstream before committing that Stream has read them"""

    max_file_size: Annotated[Optional[str], pydantic.Field(alias="maxFileSize")] = (
        "1 MB"
    )
    r"""The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc."""

    max_size: Annotated[Optional[str], pydantic.Field(alias="maxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    path: Optional[str] = "$CRIBL_HOME/state/queues"
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>"""

    compress: Annotated[
        Optional[InputSnmpCompression], PlainValidator(validate_open_enum(False))
    ] = InputSnmpCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_controls: Annotated[
        Optional[InputSnmpPqControls], pydantic.Field(alias="pqControls")
    ] = None


class AuthenticationProtocol(str, Enum, metaclass=utils.OpenEnumMeta):
    NONE = "none"
    MD5 = "md5"
    SHA = "sha"
    SHA224 = "sha224"
    SHA256 = "sha256"
    SHA384 = "sha384"
    SHA512 = "sha512"


class V3UserTypedDict(TypedDict):
    name: str
    auth_protocol: NotRequired[AuthenticationProtocol]
    auth_key: NotRequired[Any]
    priv_protocol: NotRequired[str]


class V3User(BaseModel):
    name: str

    auth_protocol: Annotated[
        Annotated[
            Optional[AuthenticationProtocol], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="authProtocol"),
    ] = AuthenticationProtocol.NONE

    auth_key: Annotated[Optional[Any], pydantic.Field(alias="authKey")] = None

    priv_protocol: Annotated[Optional[str], pydantic.Field(alias="privProtocol")] = (
        "none"
    )


class SNMPv3AuthenticationTypedDict(TypedDict):
    r"""Authentication parameters for SNMPv3 trap. Set the log level to debug if you are experiencing authentication or decryption issues."""

    v3_auth_enabled: NotRequired[bool]
    allow_unmatched_trap: NotRequired[bool]
    r"""Pass through traps that don't match any of the configured users. @{product} will not attempt to decrypt these traps."""
    v3_users: NotRequired[List[V3UserTypedDict]]
    r"""User credentials for receiving v3 traps"""


class SNMPv3Authentication(BaseModel):
    r"""Authentication parameters for SNMPv3 trap. Set the log level to debug if you are experiencing authentication or decryption issues."""

    v3_auth_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="v3AuthEnabled")
    ] = False

    allow_unmatched_trap: Annotated[
        Optional[bool], pydantic.Field(alias="allowUnmatchedTrap")
    ] = False
    r"""Pass through traps that don't match any of the configured users. @{product} will not attempt to decrypt these traps."""

    v3_users: Annotated[Optional[List[V3User]], pydantic.Field(alias="v3Users")] = None
    r"""User credentials for receiving v3 traps"""


class InputSnmpMetadatumTypedDict(TypedDict):
    name: str
    value: str
    r"""JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)"""


class InputSnmpMetadatum(BaseModel):
    name: str

    value: str
    r"""JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)"""


class InputSnmpTypedDict(TypedDict):
    type: InputSnmpType
    id: NotRequired[str]
    r"""Unique ID for this input"""
    disabled: NotRequired[bool]
    pipeline: NotRequired[str]
    r"""Pipeline to process data from this Source before sending it through the Routes"""
    send_to_routes: NotRequired[bool]
    r"""Select whether to send data to Routes, or directly to Destinations."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    pq_enabled: NotRequired[bool]
    r"""Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers)."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    connections: NotRequired[List[InputSnmpConnectionTypedDict]]
    r"""Direct connections to Destinations, and optionally via a Pipeline or a Pack"""
    pq: NotRequired[InputSnmpPqTypedDict]
    host: NotRequired[str]
    r"""Address to bind on. For IPv4 (all addresses), use the default '0.0.0.0'. For IPv6, enter '::' (all addresses) or specify an IP address."""
    port: NotRequired[float]
    r"""UDP port to receive SNMP traps on. Defaults to 162."""
    snmp_v3_auth: NotRequired[SNMPv3AuthenticationTypedDict]
    r"""Authentication parameters for SNMPv3 trap. Set the log level to debug if you are experiencing authentication or decryption issues."""
    max_buffer_size: NotRequired[float]
    r"""Maximum number of events to buffer when downstream is blocking."""
    ip_whitelist_regex: NotRequired[str]
    r"""Regex matching IP addresses that are allowed to send data"""
    metadata: NotRequired[List[InputSnmpMetadatumTypedDict]]
    r"""Fields to add to events from this input"""
    udp_socket_rx_buf_size: NotRequired[float]
    r"""Optionally, set the SO_RCVBUF socket option for the UDP socket. This value tells the operating system how many bytes can be buffered in the kernel before events are dropped. Leave blank to use the OS default. Caution: Increasing this value will affect OS memory utilization."""
    varbinds_with_types: NotRequired[bool]
    r"""If enabled, parses varbinds as an array of objects that include OID, value, and type"""
    best_effort_parsing: NotRequired[bool]
    r"""If enabled, the parser will attempt to parse varbind octet strings as UTF-8, first, otherwise will fallback to other methods"""
    description: NotRequired[str]


class InputSnmp(BaseModel):
    type: InputSnmpType

    id: Optional[str] = None
    r"""Unique ID for this input"""

    disabled: Optional[bool] = False

    pipeline: Optional[str] = None
    r"""Pipeline to process data from this Source before sending it through the Routes"""

    send_to_routes: Annotated[Optional[bool], pydantic.Field(alias="sendToRoutes")] = (
        True
    )
    r"""Select whether to send data to Routes, or directly to Destinations."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    pq_enabled: Annotated[Optional[bool], pydantic.Field(alias="pqEnabled")] = False
    r"""Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers)."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    connections: Optional[List[InputSnmpConnection]] = None
    r"""Direct connections to Destinations, and optionally via a Pipeline or a Pack"""

    pq: Optional[InputSnmpPq] = None

    host: Optional[str] = "0.0.0.0"
    r"""Address to bind on. For IPv4 (all addresses), use the default '0.0.0.0'. For IPv6, enter '::' (all addresses) or specify an IP address."""

    port: Optional[float] = 162
    r"""UDP port to receive SNMP traps on. Defaults to 162."""

    snmp_v3_auth: Annotated[
        Optional[SNMPv3Authentication], pydantic.Field(alias="snmpV3Auth")
    ] = None
    r"""Authentication parameters for SNMPv3 trap. Set the log level to debug if you are experiencing authentication or decryption issues."""

    max_buffer_size: Annotated[
        Optional[float], pydantic.Field(alias="maxBufferSize")
    ] = 1000
    r"""Maximum number of events to buffer when downstream is blocking."""

    ip_whitelist_regex: Annotated[
        Optional[str], pydantic.Field(alias="ipWhitelistRegex")
    ] = "/.*/"
    r"""Regex matching IP addresses that are allowed to send data"""

    metadata: Optional[List[InputSnmpMetadatum]] = None
    r"""Fields to add to events from this input"""

    udp_socket_rx_buf_size: Annotated[
        Optional[float], pydantic.Field(alias="udpSocketRxBufSize")
    ] = None
    r"""Optionally, set the SO_RCVBUF socket option for the UDP socket. This value tells the operating system how many bytes can be buffered in the kernel before events are dropped. Leave blank to use the OS default. Caution: Increasing this value will affect OS memory utilization."""

    varbinds_with_types: Annotated[
        Optional[bool], pydantic.Field(alias="varbindsWithTypes")
    ] = False
    r"""If enabled, parses varbinds as an array of objects that include OID, value, and type"""

    best_effort_parsing: Annotated[
        Optional[bool], pydantic.Field(alias="bestEffortParsing")
    ] = False
    r"""If enabled, the parser will attempt to parse varbind octet strings as UTF-8, first, otherwise will fallback to other methods"""

    description: Optional[str] = None
