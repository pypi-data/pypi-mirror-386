"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from cribl_control_plane import models
from cribl_control_plane._hooks import SDKHooks
from cribl_control_plane.types import OptionalNullable, UNSET
import httpx
import importlib
import sys
from typing import Callable, Optional, TYPE_CHECKING, Union, cast
import weakref

if TYPE_CHECKING:
    from cribl_control_plane.auth_sdk import AuthSDK
    from cribl_control_plane.destinations import Destinations
    from cribl_control_plane.groups_sdk import GroupsSDK
    from cribl_control_plane.health import Health
    from cribl_control_plane.lakedatasets import LakeDatasets
    from cribl_control_plane.nodes import Nodes
    from cribl_control_plane.packs import Packs
    from cribl_control_plane.pipelines import Pipelines
    from cribl_control_plane.routes_sdk import RoutesSDK
    from cribl_control_plane.sources import Sources
    from cribl_control_plane.versions import Versions


class CriblControlPlane(BaseSDK):
    r"""Cribl API Reference: This API Reference lists available REST endpoints, along with their supported operations for accessing, creating, updating, or deleting resources. See our complementary product documentation at [docs.cribl.io](http://docs.cribl.io)."""

    lake_datasets: "LakeDatasets"
    sources: "Sources"
    r"""Actions related to Sources"""
    destinations: "Destinations"
    r"""Actions related to Destinations"""
    pipelines: "Pipelines"
    r"""Actions related to Pipelines"""
    routes: "RoutesSDK"
    r"""Actions related to Routes"""
    auth: "AuthSDK"
    nodes: "Nodes"
    health: "Health"
    r"""Actions related to REST server health"""
    packs: "Packs"
    r"""Actions related to Packs"""
    versions: "Versions"
    groups: "GroupsSDK"
    r"""Actions related to Groups"""
    _sub_sdk_map = {
        "lake_datasets": ("cribl_control_plane.lakedatasets", "LakeDatasets"),
        "sources": ("cribl_control_plane.sources", "Sources"),
        "destinations": ("cribl_control_plane.destinations", "Destinations"),
        "pipelines": ("cribl_control_plane.pipelines", "Pipelines"),
        "routes": ("cribl_control_plane.routes_sdk", "RoutesSDK"),
        "auth": ("cribl_control_plane.auth_sdk", "AuthSDK"),
        "nodes": ("cribl_control_plane.nodes", "Nodes"),
        "health": ("cribl_control_plane.health", "Health"),
        "packs": ("cribl_control_plane.packs", "Packs"),
        "versions": ("cribl_control_plane.versions", "Versions"),
        "groups": ("cribl_control_plane.groups_sdk", "GroupsSDK"),
    }

    def __init__(
        self,
        server_url: str,
        security: Optional[
            Union[models.Security, Callable[[], models.Security]]
        ] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client(follow_redirects=True)
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient(follow_redirects=True)
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
            parent_ref=self,
        )

        hooks = SDKHooks()

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self.sdk_configuration = hooks.sdk_init(self.sdk_configuration)

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

    def dynamic_import(self, modname, retries=3):
        for attempt in range(retries):
            try:
                return importlib.import_module(modname)
            except KeyError:
                # Clear any half-initialized module and retry
                sys.modules.pop(modname, None)
                if attempt == retries - 1:
                    break
        raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")

    def __getattr__(self, name: str):
        if name in self._sub_sdk_map:
            module_path, class_name = self._sub_sdk_map[name]
            try:
                module = self.dynamic_import(module_path)
                klass = getattr(module, class_name)
                instance = klass(self.sdk_configuration, parent_ref=self)
                setattr(self, name, instance)
                return instance
            except ImportError as e:
                raise AttributeError(
                    f"Failed to import module {module_path} for attribute {name}: {e}"
                ) from e
            except AttributeError as e:
                raise AttributeError(
                    f"Failed to find class {class_name} in module {module_path} for attribute {name}: {e}"
                ) from e

        raise AttributeError(
            f"'{type(self).__name__}' object has no attribute '{name}'"
        )

    def __dir__(self):
        default_attrs = list(super().__dir__())
        lazy_attrs = list(self._sub_sdk_map.keys())
        return sorted(list(set(default_attrs + lazy_attrs)))

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
