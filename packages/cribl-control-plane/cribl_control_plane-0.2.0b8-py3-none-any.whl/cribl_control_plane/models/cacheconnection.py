"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .cacheconnectionbackfillstatus import CacheConnectionBackfillStatus
from .lakehouseconnectiontype import LakehouseConnectionType
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CacheConnectionTypedDict(TypedDict):
    cache_ref: str
    created_at: float
    retention_in_days: float
    accelerated_fields: NotRequired[List[str]]
    backfill_status: NotRequired[CacheConnectionBackfillStatus]
    lakehouse_connection_type: NotRequired[LakehouseConnectionType]
    migration_query_id: NotRequired[str]


class CacheConnection(BaseModel):
    cache_ref: Annotated[str, pydantic.Field(alias="cacheRef")]

    created_at: Annotated[float, pydantic.Field(alias="createdAt")]

    retention_in_days: Annotated[float, pydantic.Field(alias="retentionInDays")]

    accelerated_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="acceleratedFields")
    ] = None

    backfill_status: Annotated[
        Annotated[
            Optional[CacheConnectionBackfillStatus],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="backfillStatus"),
    ] = None

    lakehouse_connection_type: Annotated[
        Annotated[
            Optional[LakehouseConnectionType], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="lakehouseConnectionType"),
    ] = None

    migration_query_id: Annotated[
        Optional[str], pydantic.Field(alias="migrationQueryId")
    ] = None
