"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputGoogleCloudLoggingType(str, Enum):
    GOOGLE_CLOUD_LOGGING = "google_cloud_logging"


class LogLocationType(str, Enum, metaclass=utils.OpenEnumMeta):
    # Project
    PROJECT = "project"
    # Organization
    ORGANIZATION = "organization"
    # Billing Account
    BILLING_ACCOUNT = "billingAccount"
    # Folder
    FOLDER = "folder"


class PayloadFormat(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Format to use when sending payload. Defaults to Text."""

    # Text
    TEXT = "text"
    # JSON
    JSON = "json"


class LogLabelTypedDict(TypedDict):
    label: str
    r"""Label name"""
    value_expression: str
    r"""JavaScript expression to compute the label's value."""


class LogLabel(BaseModel):
    label: str
    r"""Label name"""

    value_expression: Annotated[str, pydantic.Field(alias="valueExpression")]
    r"""JavaScript expression to compute the label's value."""


class ResourceTypeLabelTypedDict(TypedDict):
    label: str
    r"""Label name"""
    value_expression: str
    r"""JavaScript expression to compute the label's value."""


class ResourceTypeLabel(BaseModel):
    label: str
    r"""Label name"""

    value_expression: Annotated[str, pydantic.Field(alias="valueExpression")]
    r"""JavaScript expression to compute the label's value."""


class OutputGoogleCloudLoggingGoogleAuthenticationMethod(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""Choose Auto to use Google Application Default Credentials (ADC), Manual to enter Google service account credentials directly, or Secret to select or create a stored secret that references Google service account credentials."""

    # Auto
    AUTO = "auto"
    # Manual
    MANUAL = "manual"
    # Secret
    SECRET = "secret"


class OutputGoogleCloudLoggingBackpressureBehavior(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""How to handle events when all receivers are exerting backpressure"""

    # Block
    BLOCK = "block"
    # Drop
    DROP = "drop"
    # Persistent Queue
    QUEUE = "queue"


class OutputGoogleCloudLoggingCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    # None
    NONE = "none"
    # Gzip
    GZIP = "gzip"


class OutputGoogleCloudLoggingQueueFullBehavior(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    # Block
    BLOCK = "block"
    # Drop new data
    DROP = "drop"


class OutputGoogleCloudLoggingMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    # Error
    ERROR = "error"
    # Backpressure
    BACKPRESSURE = "backpressure"
    # Always On
    ALWAYS = "always"


class OutputGoogleCloudLoggingPqControlsTypedDict(TypedDict):
    pass


class OutputGoogleCloudLoggingPqControls(BaseModel):
    pass


class OutputGoogleCloudLoggingTypedDict(TypedDict):
    type: OutputGoogleCloudLoggingType
    log_location_type: LogLocationType
    log_name_expression: str
    r"""JavaScript expression to compute the value of the log name. If Validate and correct log name is enabled, invalid characters (characters other than alphanumerics, forward-slashes, underscores, hyphens, and periods) will be replaced with an underscore."""
    log_location_expression: str
    r"""JavaScript expression to compute the value of the folder ID with which log entries should be associated. If Validate and correct log name is enabled, invalid characters (characters other than alphanumerics, forward-slashes, underscores, hyphens, and periods) will be replaced with an underscore."""
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    sanitize_log_names: NotRequired[bool]
    payload_format: NotRequired[PayloadFormat]
    r"""Format to use when sending payload. Defaults to Text."""
    log_labels: NotRequired[List[LogLabelTypedDict]]
    r"""Labels to apply to the log entry"""
    resource_type_expression: NotRequired[str]
    r"""JavaScript expression to compute the value of the managed resource type field. Must evaluate to one of the valid values [here](https://cloud.google.com/logging/docs/api/v2/resource-list#resource-types). Defaults to \"global\"."""
    resource_type_labels: NotRequired[List[ResourceTypeLabelTypedDict]]
    r"""Labels to apply to the managed resource. These must correspond to the valid labels for the specified resource type (see [here](https://cloud.google.com/logging/docs/api/v2/resource-list#resource-types)). Otherwise, they will be dropped by Google Cloud Logging."""
    severity_expression: NotRequired[str]
    r"""JavaScript expression to compute the value of the severity field. Must evaluate to one of the severity values supported by Google Cloud Logging [here](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity) (case insensitive). Defaults to \"DEFAULT\"."""
    insert_id_expression: NotRequired[str]
    r"""JavaScript expression to compute the value of the insert ID field."""
    google_auth_method: NotRequired[OutputGoogleCloudLoggingGoogleAuthenticationMethod]
    r"""Choose Auto to use Google Application Default Credentials (ADC), Manual to enter Google service account credentials directly, or Secret to select or create a stored secret that references Google service account credentials."""
    service_account_credentials: NotRequired[str]
    r"""Contents of service account credentials (JSON keys) file downloaded from Google Cloud. To upload a file, click the upload button at this field's upper right."""
    secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    max_payload_size_kb: NotRequired[float]
    r"""Maximum size, in KB, of the request body."""
    max_payload_events: NotRequired[float]
    r"""Max number of events to include in the request body. Default is 0 (unlimited)."""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max record size."""
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking."""
    connection_timeout: NotRequired[float]
    r"""Amount of time (milliseconds) to wait for the connection to establish before retrying"""
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it."""
    throttle_rate_req_per_sec: NotRequired[int]
    r"""Maximum number of requests to limit to per second."""
    request_method_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request method as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    request_url_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request URL as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    request_size_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request size as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    status_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request method as a number. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    response_size_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP response size as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    user_agent_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request user agent as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    remote_ip_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request remote IP as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    server_ip_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request server IP as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    referer_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request referer as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    latency_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request latency, formatted as <seconds>.<nanoseconds>s (for example, 1.23s). See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    cache_lookup_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request cache lookup as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    cache_hit_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request cache hit as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    cache_validated_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request cache validated with origin server as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    cache_fill_bytes_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request cache fill bytes as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    protocol_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the HTTP request protocol as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""
    id_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry operation ID as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details."""
    producer_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry operation producer as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details."""
    first_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry operation first flag as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details."""
    last_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry operation last flag as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details."""
    file_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry source location file as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentrysourcelocation) for details."""
    line_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry source location line as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentrysourcelocation) for details."""
    function_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry source location function as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentrysourcelocation) for details."""
    uid_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry log split UID as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logsplit) for details."""
    index_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry log split index as a number. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logsplit) for details."""
    total_splits_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the log entry log split total splits as a number. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logsplit) for details."""
    trace_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the REST resource name of the trace being written as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) for details."""
    span_id_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the ID of the cloud trace span associated with the current operation in which the log is being written as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) for details."""
    trace_sampled_expression: NotRequired[str]
    r"""A JavaScript expression that evaluates to the the sampling decision of the span associated with the log entry. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) for details."""
    on_backpressure: NotRequired[OutputGoogleCloudLoggingBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    total_memory_limit_kb: NotRequired[float]
    r"""Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced."""
    description: NotRequired[str]
    payload_expression: NotRequired[str]
    r"""JavaScript expression to compute the value of the payload. Must evaluate to a JavaScript object value. If an invalid value is encountered it will result in the default value instead. Defaults to the entire event."""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputGoogleCloudLoggingCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputGoogleCloudLoggingQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputGoogleCloudLoggingMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputGoogleCloudLoggingPqControlsTypedDict]


class OutputGoogleCloudLogging(BaseModel):
    type: OutputGoogleCloudLoggingType

    log_location_type: Annotated[
        Annotated[LogLocationType, PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="logLocationType"),
    ]

    log_name_expression: Annotated[str, pydantic.Field(alias="logNameExpression")]
    r"""JavaScript expression to compute the value of the log name. If Validate and correct log name is enabled, invalid characters (characters other than alphanumerics, forward-slashes, underscores, hyphens, and periods) will be replaced with an underscore."""

    log_location_expression: Annotated[
        str, pydantic.Field(alias="logLocationExpression")
    ]
    r"""JavaScript expression to compute the value of the folder ID with which log entries should be associated. If Validate and correct log name is enabled, invalid characters (characters other than alphanumerics, forward-slashes, underscores, hyphens, and periods) will be replaced with an underscore."""

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    sanitize_log_names: Annotated[
        Optional[bool], pydantic.Field(alias="sanitizeLogNames")
    ] = False

    payload_format: Annotated[
        Annotated[Optional[PayloadFormat], PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="payloadFormat"),
    ] = PayloadFormat.TEXT
    r"""Format to use when sending payload. Defaults to Text."""

    log_labels: Annotated[
        Optional[List[LogLabel]], pydantic.Field(alias="logLabels")
    ] = None
    r"""Labels to apply to the log entry"""

    resource_type_expression: Annotated[
        Optional[str], pydantic.Field(alias="resourceTypeExpression")
    ] = None
    r"""JavaScript expression to compute the value of the managed resource type field. Must evaluate to one of the valid values [here](https://cloud.google.com/logging/docs/api/v2/resource-list#resource-types). Defaults to \"global\"."""

    resource_type_labels: Annotated[
        Optional[List[ResourceTypeLabel]], pydantic.Field(alias="resourceTypeLabels")
    ] = None
    r"""Labels to apply to the managed resource. These must correspond to the valid labels for the specified resource type (see [here](https://cloud.google.com/logging/docs/api/v2/resource-list#resource-types)). Otherwise, they will be dropped by Google Cloud Logging."""

    severity_expression: Annotated[
        Optional[str], pydantic.Field(alias="severityExpression")
    ] = None
    r"""JavaScript expression to compute the value of the severity field. Must evaluate to one of the severity values supported by Google Cloud Logging [here](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity) (case insensitive). Defaults to \"DEFAULT\"."""

    insert_id_expression: Annotated[
        Optional[str], pydantic.Field(alias="insertIdExpression")
    ] = None
    r"""JavaScript expression to compute the value of the insert ID field."""

    google_auth_method: Annotated[
        Annotated[
            Optional[OutputGoogleCloudLoggingGoogleAuthenticationMethod],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="googleAuthMethod"),
    ] = OutputGoogleCloudLoggingGoogleAuthenticationMethod.MANUAL
    r"""Choose Auto to use Google Application Default Credentials (ADC), Manual to enter Google service account credentials directly, or Secret to select or create a stored secret that references Google service account credentials."""

    service_account_credentials: Annotated[
        Optional[str], pydantic.Field(alias="serviceAccountCredentials")
    ] = None
    r"""Contents of service account credentials (JSON keys) file downloaded from Google Cloud. To upload a file, click the upload button at this field's upper right."""

    secret: Optional[str] = None
    r"""Select or create a stored text secret"""

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = 4096
    r"""Maximum size, in KB, of the request body."""

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = 0
    r"""Max number of events to include in the request body. Default is 0 (unlimited)."""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 1
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max record size."""

    concurrency: Optional[float] = 5
    r"""Maximum number of ongoing requests before blocking."""

    connection_timeout: Annotated[
        Optional[float], pydantic.Field(alias="connectionTimeout")
    ] = 10000
    r"""Amount of time (milliseconds) to wait for the connection to establish before retrying"""

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 30
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it."""

    throttle_rate_req_per_sec: Annotated[
        Optional[int], pydantic.Field(alias="throttleRateReqPerSec")
    ] = None
    r"""Maximum number of requests to limit to per second."""

    request_method_expression: Annotated[
        Optional[str], pydantic.Field(alias="requestMethodExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request method as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    request_url_expression: Annotated[
        Optional[str], pydantic.Field(alias="requestUrlExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request URL as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    request_size_expression: Annotated[
        Optional[str], pydantic.Field(alias="requestSizeExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request size as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    status_expression: Annotated[
        Optional[str], pydantic.Field(alias="statusExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request method as a number. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    response_size_expression: Annotated[
        Optional[str], pydantic.Field(alias="responseSizeExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP response size as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    user_agent_expression: Annotated[
        Optional[str], pydantic.Field(alias="userAgentExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request user agent as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    remote_ip_expression: Annotated[
        Optional[str], pydantic.Field(alias="remoteIpExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request remote IP as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    server_ip_expression: Annotated[
        Optional[str], pydantic.Field(alias="serverIpExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request server IP as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    referer_expression: Annotated[
        Optional[str], pydantic.Field(alias="refererExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request referer as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    latency_expression: Annotated[
        Optional[str], pydantic.Field(alias="latencyExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request latency, formatted as <seconds>.<nanoseconds>s (for example, 1.23s). See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    cache_lookup_expression: Annotated[
        Optional[str], pydantic.Field(alias="cacheLookupExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request cache lookup as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    cache_hit_expression: Annotated[
        Optional[str], pydantic.Field(alias="cacheHitExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request cache hit as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    cache_validated_expression: Annotated[
        Optional[str], pydantic.Field(alias="cacheValidatedExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request cache validated with origin server as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    cache_fill_bytes_expression: Annotated[
        Optional[str], pydantic.Field(alias="cacheFillBytesExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request cache fill bytes as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    protocol_expression: Annotated[
        Optional[str], pydantic.Field(alias="protocolExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the HTTP request protocol as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#httprequest) for details."""

    id_expression: Annotated[Optional[str], pydantic.Field(alias="idExpression")] = None
    r"""A JavaScript expression that evaluates to the log entry operation ID as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details."""

    producer_expression: Annotated[
        Optional[str], pydantic.Field(alias="producerExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the log entry operation producer as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details."""

    first_expression: Annotated[
        Optional[str], pydantic.Field(alias="firstExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the log entry operation first flag as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details."""

    last_expression: Annotated[
        Optional[str], pydantic.Field(alias="lastExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the log entry operation last flag as a boolean. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentryoperation) for details."""

    file_expression: Annotated[
        Optional[str], pydantic.Field(alias="fileExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the log entry source location file as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentrysourcelocation) for details."""

    line_expression: Annotated[
        Optional[str], pydantic.Field(alias="lineExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the log entry source location line as a string, in int64 format. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentrysourcelocation) for details."""

    function_expression: Annotated[
        Optional[str], pydantic.Field(alias="functionExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the log entry source location function as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logentrysourcelocation) for details."""

    uid_expression: Annotated[Optional[str], pydantic.Field(alias="uidExpression")] = (
        None
    )
    r"""A JavaScript expression that evaluates to the log entry log split UID as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logsplit) for details."""

    index_expression: Annotated[
        Optional[str], pydantic.Field(alias="indexExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the log entry log split index as a number. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logsplit) for details."""

    total_splits_expression: Annotated[
        Optional[str], pydantic.Field(alias="totalSplitsExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the log entry log split total splits as a number. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logsplit) for details."""

    trace_expression: Annotated[
        Optional[str], pydantic.Field(alias="traceExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the REST resource name of the trace being written as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) for details."""

    span_id_expression: Annotated[
        Optional[str], pydantic.Field(alias="spanIdExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the ID of the cloud trace span associated with the current operation in which the log is being written as a string. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) for details."""

    trace_sampled_expression: Annotated[
        Optional[str], pydantic.Field(alias="traceSampledExpression")
    ] = None
    r"""A JavaScript expression that evaluates to the the sampling decision of the span associated with the log entry. See the [documentation](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) for details."""

    on_backpressure: Annotated[
        Annotated[
            Optional[OutputGoogleCloudLoggingBackpressureBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputGoogleCloudLoggingBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    total_memory_limit_kb: Annotated[
        Optional[float], pydantic.Field(alias="totalMemoryLimitKB")
    ] = None
    r"""Maximum total size of the batches waiting to be sent. If left blank, defaults to 5 times the max body size (if set). If 0, no limit is enforced."""

    description: Optional[str] = None

    payload_expression: Annotated[
        Optional[str], pydantic.Field(alias="payloadExpression")
    ] = None
    r"""JavaScript expression to compute the value of the payload. Must evaluate to a JavaScript object value. If an invalid value is encountered it will result in the default value instead. Defaults to the entire event."""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Annotated[
            Optional[OutputGoogleCloudLoggingCompression],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqCompress"),
    ] = OutputGoogleCloudLoggingCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Annotated[
            Optional[OutputGoogleCloudLoggingQueueFullBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputGoogleCloudLoggingQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Annotated[
            Optional[OutputGoogleCloudLoggingMode],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqMode"),
    ] = OutputGoogleCloudLoggingMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputGoogleCloudLoggingPqControls], pydantic.Field(alias="pqControls")
    ] = None
