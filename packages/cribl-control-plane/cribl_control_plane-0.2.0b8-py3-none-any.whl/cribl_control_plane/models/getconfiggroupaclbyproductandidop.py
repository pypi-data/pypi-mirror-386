"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .productscore import ProductsCore
from .rbacresource import RbacResource
from .useraccesscontrollist import UserAccessControlList, UserAccessControlListTypedDict
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    validate_open_enum,
)
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetConfigGroupACLByProductAndIDRequestTypedDict(TypedDict):
    product: ProductsCore
    r"""Name of the Cribl product to get the Worker Groups or Edge Fleets for."""
    id: str
    r"""The <code>id</code> of the Worker Group or Edge Fleet to get the ACL for."""
    type: NotRequired[RbacResource]
    r"""Filter for limiting the response to ACL entries for the specified RBAC resource type."""


class GetConfigGroupACLByProductAndIDRequest(BaseModel):
    product: Annotated[
        Annotated[ProductsCore, PlainValidator(validate_open_enum(False))],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Name of the Cribl product to get the Worker Groups or Edge Fleets for."""

    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The <code>id</code> of the Worker Group or Edge Fleet to get the ACL for."""

    type: Annotated[
        Annotated[Optional[RbacResource], PlainValidator(validate_open_enum(False))],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter for limiting the response to ACL entries for the specified RBAC resource type."""


class GetConfigGroupACLByProductAndIDResponseTypedDict(TypedDict):
    r"""a list of UserAccessControlList objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[UserAccessControlListTypedDict]]


class GetConfigGroupACLByProductAndIDResponse(BaseModel):
    r"""a list of UserAccessControlList objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[UserAccessControlList]] = None
