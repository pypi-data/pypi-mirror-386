[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "verse-sdk"
description = "Verse Python SDK"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
dynamic = ["version"]
dependencies = [
    "opentelemetry-api>=1.34.1",
    "opentelemetry-sdk[logs]>=1.34.1,<1.35.0",
    "opentelemetry-instrumentation>=0.44.0",
    "opentelemetry-instrumentation-logging>=0.44.0",
    "opentelemetry-exporter-otlp[logs]>=1.34.1",
    "requests>=2.31.0",
]

[tool.hatch.build.targets.wheel]
packages = ["verse_sdk"]

[tool.hatch.build.targets.sdist]
include = [
    "/verse_sdk",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.hatch.version]
source = "vcs"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",   # pycodestyle errors
    "E7",   # pycodestyle errors
    "E9",   # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "C4",   # flake8-comprehensions
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RUF",  # Ruff-specific rules
]

ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "B904",  # Allow `raise` without `from` inside `except`
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["verse_sdk"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = [".", "verse_sdk"]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_level = "INFO"
addopts = "--log-cli-level=INFO -v"
markers = [
    "e2e: marks tests as end-to-end tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.uv.workspace]
members = []

[dependency-groups]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "ruff",
    "mypy",
    "requests>=2.32.5",
    "dotenv",
    "build>=1.3.0",
    "twine>=6.2.0",
]
test = [
    "pytest>=6.0",
    "pytest-cov",
    "pytest-asyncio",
]
litellm = ["litellm>=1.77.1"]
pydantic-ai = ["pydantic-ai>=0.0.14"]
