#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ PyPI
- –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –Ω–∞ 0.0.1
- –û—á–∏—â–∞–µ—Ç dist/
- –°–æ–±–∏—Ä–∞–µ—Ç –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ uv build
- –ü—É–±–ª–∏–∫—É–µ—Ç —á–µ—Ä–µ–∑ twine (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç API —Ç–æ–∫–µ–Ω –∏–∑ .env)
"""

import os
import re
import shutil
import subprocess
from pathlib import Path

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()


def increment_version(version: str) -> str:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –Ω–∞ 0.0.1"""
    parts = version.split(".")
    if len(parts) != 3:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {version}")

    major, minor, patch = map(int, parts)
    patch += 1

    return f"{major}.{minor}.{patch}"


def update_version_in_toml():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ pyproject.toml"""
    toml_path = Path("pyproject.toml")

    if not toml_path.exists():
        raise FileNotFoundError("pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω")

    content = toml_path.read_text(encoding="utf-8")

    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    version_match = re.search(r'^version\s*=\s*"([^"]+)"', content, re.MULTILINE)
    if not version_match:
        raise ValueError("–í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ pyproject.toml")

    old_version = version_match.group(1)
    new_version = increment_version(old_version)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    new_content = re.sub(
        r'^version\s*=\s*"[^"]+"',
        f'version = "{new_version}"',
        content,
        flags=re.MULTILINE,
    )

    toml_path.write_text(new_content, encoding="utf-8")

    print(f"‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {old_version} ‚Üí {new_version}")
    return new_version


def clean_dist():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É dist/"""
    dist_path = Path("dist")

    if dist_path.exists():
        shutil.rmtree(dist_path)
        print("‚úÖ –ü–∞–ø–∫–∞ dist/ –æ—á–∏—â–µ–Ω–∞")

    dist_path.mkdir(exist_ok=True)
    print("‚úÖ –ü–∞–ø–∫–∞ dist/ —Å–æ–∑–¥–∞–Ω–∞")


def build_package():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ uv build"""
    print("\nüî® –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞...")
    result = subprocess.run(["uv", "build"], check=True)
    print("‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω")
    return result.returncode == 0


def upload_to_pypi():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–∫–µ—Ç –≤ PyPI —á–µ—Ä–µ–∑ twine"""
    print("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ PyPI...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ .env
    pypi_token = os.getenv("PYPI_API_TOKEN")

    if not pypi_token:
        print("‚ö†Ô∏è PYPI_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("   PYPI_API_TOKEN=pypi-...")
        print("\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ twine")
    else:
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API —Ç–æ–∫–µ–Ω –∏–∑ .env (–¥–ª–∏–Ω–∞: {len(pypi_token)} —Å–∏–º–≤–æ–ª–æ–≤)")

    # Twine –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    # TWINE_USERNAME (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "__token__")
    # TWINE_PASSWORD (PYPI_API_TOKEN)
    env = os.environ.copy()
    if pypi_token:
        env["TWINE_USERNAME"] = "__token__"
        env["TWINE_PASSWORD"] = pypi_token

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º twine —á–µ—Ä–µ–∑ uv run
    result = subprocess.run(
        ["uv", "run", "twine", "upload", "dist/*"], env=env, check=True
    )

    print("‚úÖ –ü–∞–∫–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ PyPI")
    return result.returncode == 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ PyPI\n")

        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        new_version = update_version_in_toml()

        # 2. –û—á–∏—â–∞–µ–º dist/
        clean_dist()

        # 3. –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç
        build_package()

        # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ PyPI
        upload_to_pypi()

        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ! –í–µ—Ä—Å–∏—è {new_version} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ PyPI")
        print("\nüí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print("   git add pyproject.toml")
        print(f"   git commit -m 'Bump version to {new_version}'")
        print(f"   git tag v{new_version}")
        print("   git push && git push --tags")

    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return 1
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
