"""
Supabase –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞
"""

import logging
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional

from dotenv import load_dotenv
from postgrest.exceptions import APIError
from project_root_finder import root
from supabase import create_client

PROJECT_ROOT = root

logger = logging.getLogger(__name__)


class SupabaseClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env"""

    def __init__(self, bot_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫

        Args:
            bot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - –∫–æ–¥ —Å–∞–º –Ω–∞–π–¥–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        self.bot_id = bot_id

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
        self._load_env_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –°–ò–ù–•–†–û–ù–ù–û –ø—Ä—è–º–æ –≤ __init__
        self.client = create_client(self.url, self.key)

        logger.info(f"‚úÖ SupabaseClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è bot_id: {self.bot_id}")

    def _load_env_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ .env —Ñ–∞–π–ª–∞
            env_path = self._find_env_file()

            if not env_path or not env_path.exists():
                raise FileNotFoundError(f".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            load_dotenv(env_path)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
            self.url = os.getenv("SUPABASE_URL")
            self.key = os.getenv("SUPABASE_KEY")

            if not self.url or not self.key:
                missing_vars = []
                if not self.url:
                    missing_vars.append("SUPABASE_URL")
                if not self.key:
                    missing_vars.append("SUPABASE_KEY")
                raise ValueError(
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env: {', '.join(missing_vars)}"
                )

            logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {env_path}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase: {e}")
            raise

    def _find_env_file(self) -> Optional[Path]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç .env —Ñ–∞–π–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        # –ò—â–µ–º .env —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
        bot_env_path = PROJECT_ROOT / "bots" / self.bot_id / ".env"

        if bot_env_path.exists():
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª –¥–ª—è –±–æ—Ç–∞ {self.bot_id}: {bot_env_path}")
            return bot_env_path

        logger.error(f"‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ {self.bot_id}")
        logger.error(f"   –ò—Å–∫–∞–ª–∏ –≤: {bot_env_path}")
        return None

    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    # =============================================================================

    async def create_or_get_user(self, user_data: Dict[str, Any]) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            # –ï—Å–ª–∏ bot_id —É–∫–∞–∑–∞–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
            query = (
                self.client.table("sales_users")
                .select("telegram_id")
                .eq("telegram_id", user_data["telegram_id"])
            )
            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()

            if response.data:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update_query = (
                    self.client.table("sales_users")
                    .update(
                        {
                            "username": user_data.get("username"),
                            "first_name": user_data.get("first_name"),
                            "last_name": user_data.get("last_name"),
                            "language_code": user_data.get("language_code"),
                            "updated_at": datetime.now().isoformat(),
                            "is_active": True,
                        }
                    )
                    .eq("telegram_id", user_data["telegram_id"])
                )

                if self.bot_id:
                    update_query = update_query.eq("bot_id", self.bot_id)

                update_query.execute()

                logger.info(
                    f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']}{f' –¥–ª—è bot_id {self.bot_id}' if self.bot_id else ''}"
                )
                return user_data["telegram_id"]
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
                user_insert_data = {
                    "telegram_id": user_data["telegram_id"],
                    "username": user_data.get("username"),
                    "first_name": user_data.get("first_name"),
                    "last_name": user_data.get("last_name"),
                    "language_code": user_data.get("language_code"),
                    "is_active": True,
                    "source": user_data.get("source"),
                    "medium": user_data.get("medium"),
                    "campaign": user_data.get("campaign"),
                    "content": user_data.get("content"),
                    "term": user_data.get("term"),
                }
                if self.bot_id:
                    user_insert_data["bot_id"] = self.bot_id

                response = (
                    self.client.table("sales_users").insert(user_insert_data).execute()
                )

                logger.info(
                    f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']}{f' –¥–ª—è bot_id {self.bot_id}' if self.bot_id else ''}"
                )
                return user_data["telegram_id"]

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            raise

    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ï–°–°–ò–Ø–ú–ò
    # =============================================================================

    async def create_chat_session(
        self, user_data: Dict[str, Any], system_prompt: str
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = await self.create_or_get_user(user_data)

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É—á–µ—Ç–æ–º bot_id)
            await self.close_active_sessions(user_id)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            session_data = {
                "user_id": user_id,
                "system_prompt": system_prompt,
                "status": "active",
                "current_stage": "introduction",
                "lead_quality_score": 5,
                "metadata": {
                    "user_agent": user_data.get("user_agent", ""),
                    "start_timestamp": datetime.now().isoformat(),
                },
            }
            if self.bot_id:
                session_data["bot_id"] = self.bot_id
                session_data["metadata"]["bot_id"] = self.bot_id

            response = (
                self.client.table("sales_chat_sessions").insert(session_data).execute()
            )

            session_id = response.data[0]["id"]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await self.create_session_analytics(session_id)

            logger.info(
                f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}{f', bot_id {self.bot_id}' if self.bot_id else ''}"
            )
            return session_id

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            raise

    async def close_active_sessions(self, user_id: int):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (–µ—Å–ª–∏ bot_id —É–∫–∞–∑–∞–Ω)
            query = (
                self.client.table("sales_chat_sessions")
                .update(
                    {"status": "completed", "updated_at": datetime.now().isoformat()}
                )
                .eq("user_id", user_id)
                .eq("status", "active")
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            query.execute()

            logger.info(
                f"‚úÖ –ó–∞–∫—Ä—ã—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}{f', bot_id {self.bot_id}' if self.bot_id else ''}"
            )

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–π: {e}")
            raise

    async def get_active_session(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            query = (
                self.client.table("sales_chat_sessions")
                .select(
                    "id",
                    "system_prompt",
                    "created_at",
                    "current_stage",
                    "lead_quality_score",
                )
                .eq("user_id", telegram_id)
                .eq("status", "active")
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()

            if response.data:
                session_info = response.data[0]
                logger.info(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è {session_info['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}{f', bot_id {self.bot_id}' if self.bot_id else ''}"
                )
                return session_info

            return None

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            return None

    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò
    # =============================================================================

    async def add_message(
        self,
        session_id: str,
        role: str,
        content: str,
        message_type: str = "text",
        tokens_used: int = 0,
        processing_time_ms: int = 0,
        metadata: Dict[str, Any] = None,
        ai_metadata: Dict[str, Any] = None,
    ) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            response = (
                self.client.table("sales_messages")
                .insert(
                    {
                        "session_id": session_id,
                        "role": role,
                        "content": content,
                        "message_type": message_type,
                        "tokens_used": tokens_used,
                        "processing_time_ms": processing_time_ms,
                        "metadata": metadata or {},
                        "ai_metadata": ai_metadata or {},
                    }
                )
                .execute()
            )

            message_id = response.data[0]["id"]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            await self.update_session_analytics(
                session_id, tokens_used, processing_time_ms
            )

            logger.debug(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —Å–µ—Å—Å–∏—é {session_id}")
            return message_id

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise

    async def get_chat_history(
        self, session_id: str, limit: int = 50
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        try:
            response = (
                self.client.table("sales_messages")
                .select(
                    "id",
                    "role",
                    "content",
                    "message_type",
                    "created_at",
                    "metadata",
                    "ai_metadata",
                )
                .eq("session_id", session_id)
                .order("created_at", desc=True)
                .limit(limit)
                .execute()
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            messages = [msg for msg in response.data if msg["role"] != "system"]

            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
            messages.reverse()

            logger.debug(
                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}"
            )
            return messages

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            raise

    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò
    # =============================================================================

    async def create_session_analytics(self, session_id: str):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        try:
            self.client.table("sales_session_analytics").insert(
                {
                    "session_id": session_id,
                    "total_messages": 0,
                    "total_tokens": 0,
                    "average_response_time_ms": 0,
                    "conversion_stage": "initial",
                    "lead_quality_score": 5,
                }
            ).execute()

            logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            raise

    async def update_session_analytics(
        self, session_id: str, tokens_used: int = 0, processing_time_ms: int = 0
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            response = (
                self.client.table("sales_session_analytics")
                .select("total_messages", "total_tokens", "average_response_time_ms")
                .eq("session_id", session_id)
                .execute()
            )

            if response.data:
                current = response.data[0]
                new_total_messages = current["total_messages"] + 1
                new_total_tokens = current["total_tokens"] + tokens_used

                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                if processing_time_ms > 0:
                    current_avg = current["average_response_time_ms"]
                    new_avg = (
                        (current_avg * (new_total_messages - 1)) + processing_time_ms
                    ) / new_total_messages
                else:
                    new_avg = current["average_response_time_ms"]

                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                self.client.table("sales_session_analytics").update(
                    {
                        "total_messages": new_total_messages,
                        "total_tokens": new_total_tokens,
                        "average_response_time_ms": int(new_avg),
                        "updated_at": datetime.now().isoformat(),
                    }
                ).eq("session_id", session_id).execute()

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞

    async def update_session_stage(
        self, session_id: str, stage: str = None, quality_score: int = None
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ç–∞–ø —Å–µ—Å—Å–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–∞"""
        try:
            update_data = {"updated_at": datetime.now().isoformat()}

            if stage:
                update_data["current_stage"] = stage
            if quality_score is not None:
                update_data["lead_quality_score"] = quality_score

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ bot_id –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if self.bot_id:
                response = (
                    self.client.table("sales_chat_sessions")
                    .select("bot_id")
                    .eq("id", session_id)
                    .execute()
                )
                if response.data and response.data[0].get("bot_id") != self.bot_id:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_id} –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞"
                    )
                    return

            self.client.table("sales_chat_sessions").update(update_data).eq(
                "id", session_id
            ).execute()

            logger.debug(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —ç—Ç–∞–ø —Å–µ—Å—Å–∏–∏ {session_id}: stage={stage}, quality={quality_score}"
            )

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞ —Å–µ—Å—Å–∏–∏: {e}")
            raise

    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò
    # =============================================================================

    async def get_sent_files(self, user_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = (
                self.client.table("sales_users")
                .select("files")
                .eq("telegram_id", user_id)
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()

            if response.data and response.data[0].get("files"):
                files_str = response.data[0]["files"]
                return [f.strip() for f in files_str.split(",") if f.strip()]

            return []

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            return []

    async def add_sent_files(self, user_id: int, files_list: List[str]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(
                f"üìÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {files_list}"
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
            current_files = await self.get_sent_files(user_id)
            logger.info(f"üìÅ –¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –≤ –ë–î: {current_files}")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            all_files = list(set(current_files + files_list))
            logger.info(f"üìÅ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: {all_files}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            files_str = ", ".join(all_files)
            logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É: {files_str}")

            query = (
                self.client.table("sales_users")
                .update({"files": files_str})
                .eq("telegram_id", user_id)
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)
                logger.info(f"üìÅ –§–∏–ª—å—Ç—Ä –ø–æ bot_id: {self.bot_id}")

            response = query.execute()
            logger.info(f"üìÅ –û—Ç–≤–µ—Ç –æ—Ç –ë–î: {response.data}")

            logger.info(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(files_list)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    # =============================================================================

    async def get_analytics_summary(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            query = (
                self.client.table("sales_chat_sessions")
                .select("id", "current_stage", "lead_quality_score", "created_at")
                .gte("created_at", cutoff_date.isoformat())
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            sessions_response = query.execute()

            sessions = sessions_response.data
            total_sessions = len(sessions)

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º
            stages = {}
            quality_scores = []

            for session in sessions:
                stage = session.get("current_stage", "unknown")
                stages[stage] = stages.get(stage, 0) + 1

                score = session.get("lead_quality_score", 5)
                if score:
                    quality_scores.append(score)

            avg_quality = (
                sum(quality_scores) / len(quality_scores) if quality_scores else 5
            )

            return {
                "bot_id": self.bot_id,
                "period_days": days,
                "total_sessions": total_sessions,
                "stages": stages,
                "average_lead_quality": round(avg_quality, 1),
                "generated_at": datetime.now().isoformat(),
            }

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {
                "bot_id": self.bot_id,
                "error": str(e),
                "generated_at": datetime.now().isoformat(),
            }

    # =============================================================================
    # –ú–ï–¢–û–î–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    # =============================================================================

    async def update_conversion_stage(
        self, session_id: str, stage: str, quality_score: int = None
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ç–∞–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        await self.update_session_stage(session_id, stage, quality_score)

    async def get_session_info(self, session_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            response = (
                self.client.table("sales_chat_sessions")
                .select(
                    "id",
                    "user_id",
                    "bot_id",
                    "system_prompt",
                    "status",
                    "created_at",
                    "metadata",
                    "current_stage",
                    "lead_quality_score",
                )
                .eq("id", session_id)
                .execute()
            )

            if response.data:
                session = response.data[0]
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ bot_id –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
                if self.bot_id and session.get("bot_id") != self.bot_id:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏ {session_id} –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞: {session.get('bot_id')} != {self.bot_id}"
                    )
                    return None
                return session
            return None

        except APIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏: {e}")
            raise
