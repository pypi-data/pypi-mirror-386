# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π config.py —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º bot_id

import logging
import os
from dataclasses import dataclass, field
from pathlib import Path
from typing import List

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ BotBuilder

logger = logging.getLogger(__name__)


@dataclass
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    # üÜï Bot ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –∑–∞–ø—É—Å–∫–∞–ª–∫–µ)
    BOT_ID: str = field(init=False)

    # Telegram Bot Token
    TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN", "")

    # Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    SUPABASE_URL: str = os.getenv("SUPABASE_URL", "")
    SUPABASE_KEY: str = os.getenv("SUPABASE_KEY", "")

    # OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")
    OPENAI_MODEL: str = os.getenv("OPENAI_MODEL", "gpt-5-mini")
    OPENAI_MAX_TOKENS: int = int(os.getenv("OPENAI_MAX_TOKENS", "1500"))
    OPENAI_TEMPERATURE: float = float(os.getenv("OPENAI_TEMPERATURE", "0.7"))

    # –ö–∞—Ç–∞–ª–æ–≥ —Å —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
    PROMT_FILES_DIR: str = os.getenv("PROMT_FILES_DIR", "prompts")

    # –§–∞–π–ª –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    WELCOME_FILE_DIR: str = os.getenv("WELCOME_FILE_URL", "welcome_file")
    WELCOME_FILE_MSG: str = os.getenv("WELCOME_FILE_MSG", "welcome_file_msg.txt")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    MAX_CONTEXT_MESSAGES: int = int(os.getenv("MAX_CONTEXT_MESSAGES", "50"))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∂
    LEAD_QUALIFICATION_THRESHOLD: int = int(
        os.getenv("LEAD_QUALIFICATION_THRESHOLD", "7")
    )
    SESSION_TIMEOUT_HOURS: int = int(os.getenv("SESSION_TIMEOUT_HOURS", "24"))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    MESSAGE_PARSE_MODE: str = os.getenv("MESSAGE_PARSE_MODE", "Markdown")

    # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    PROMPT_FILES: List[str] = field(default_factory=list)

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    ADMIN_TELEGRAM_IDS: List[int] = field(default_factory=list)
    ADMIN_SESSION_TIMEOUT_MINUTES: int = int(
        os.getenv("ADMIN_SESSION_TIMEOUT_MINUTES", "30")
    )

    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å JSON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    DEBUG_MODE: bool = os.getenv("DEBUG_MODE", "false").lower() == "true"

    def __post_init__(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""

        # üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º BOT_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.BOT_ID = os.getenv("BOT_ID", "")

        if not self.BOT_ID or not self.BOT_ID.strip():
            error_msg = "BOT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—É—Å–∫–∞–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: python growthmed-october-24.py)"
            logger.error(error_msg)
            raise ValueError(error_msg)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç BOT_ID
        import re

        if not re.match(r"^[a-z0-9\-]+$", self.BOT_ID):
            error_msg = f"BOT_ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã: {self.BOT_ID}"
            logger.error(error_msg)
            raise ValueError(error_msg)

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
        self._scan_prompt_files()

        # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        self._parse_admin_ids()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = [
            "TELEGRAM_BOT_TOKEN",
            "SUPABASE_URL",
            "SUPABASE_KEY",
            "OPENAI_API_KEY",
        ]

        missing_fields = []
        for field_name in required_fields:
            if not getattr(self, field_name):
                missing_fields.append(field_name)

        if missing_fields:
            error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_fields)}"
            logger.error(error_msg)
            raise ValueError(error_msg)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level = getattr(logging, self.LOG_LEVEL.upper(), logging.INFO)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        root_logger = logging.getLogger()
        root_logger.setLevel(log_level)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        if not root_logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
            )
            handler.setFormatter(formatter)
            root_logger.addHandler(handler)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        logging.getLogger("openai_client").setLevel(log_level)
        logging.getLogger("supabase_client").setLevel(log_level)
        logging.getLogger("handlers").setLevel(log_level)
        logging.getLogger("bot_utils").setLevel(log_level)
        logging.getLogger("conversation_manager").setLevel(log_level)
        logging.getLogger("admin_manager").setLevel(log_level)
        logging.getLogger("prompt_loader").setLevel(log_level)
        logging.getLogger("admin_logic").setLevel(log_level)
        logging.getLogger("debug_routing").setLevel(log_level)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        if self.OPENAI_MAX_TOKENS < 100 or self.OPENAI_MAX_TOKENS > 4000:
            logger.warning(
                f"–ù–µ–æ–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ OPENAI_MAX_TOKENS: {self.OPENAI_MAX_TOKENS}"
            )

        if self.OPENAI_TEMPERATURE < 0 or self.OPENAI_TEMPERATURE > 1:
            logger.warning(
                f"–ù–µ–æ–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ OPENAI_TEMPERATURE: {self.OPENAI_TEMPERATURE}"
            )

        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"ü§ñ Bot ID (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω): {self.BOT_ID}")
        logger.debug(f"–ú–æ–¥–µ–ª—å OpenAI: {self.OPENAI_MODEL}")
        logger.debug(f"–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–º–ø—Ç–æ–≤: {self.PROMT_FILES_DIR}")
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.PROMPT_FILES)}")
        logger.info(f"üë• –ê–¥–º–∏–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(self.ADMIN_TELEGRAM_IDS)}")
        if self.DEBUG_MODE:
            logger.warning(
                "üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –í–ö–õ–Æ–ß–ï–ù - JSON –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            )

    def get_summary(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)"""
        return {
            "bot_id": self.BOT_ID,  # üÜï –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π
            "openai_model": self.OPENAI_MODEL,
            "max_tokens": self.OPENAI_MAX_TOKENS,
            "temperature": self.OPENAI_TEMPERATURE,
            "prompts_dir": self.PROMT_FILES_DIR,
            "max_context": self.MAX_CONTEXT_MESSAGES,
            "log_level": self.LOG_LEVEL,
            "prompt_files_count": len(self.PROMPT_FILES),
            "prompt_files": self.PROMPT_FILES,
            "has_telegram_token": bool(self.TELEGRAM_BOT_TOKEN),
            "has_supabase_config": bool(self.SUPABASE_URL and self.SUPABASE_KEY),
            "has_openai_key": bool(self.OPENAI_API_KEY),
            "admin_count": len(self.ADMIN_TELEGRAM_IDS),
            "debug_mode": self.DEBUG_MODE,
        }

    def _parse_admin_ids(self):
        """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        admin_ids_str = os.getenv("ADMIN_TELEGRAM_IDS", "")

        if not admin_ids_str.strip():
            logger.warning(
                "‚ö†Ô∏è ADMIN_TELEGRAM_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )
            return

        try:
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "123456,789012,345678"
            ids = admin_ids_str.split(",")
            admin_ids = [int(id_str.strip()) for id_str in ids if id_str.strip()]

            if not admin_ids:
                logger.warning(
                    "‚ö†Ô∏è ADMIN_TELEGRAM_IDS –ø—É—Å—Ç - –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                )
            else:
                self.ADMIN_TELEGRAM_IDS.extend(admin_ids)
                logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–¥–º–∏–Ω—ã: {self.ADMIN_TELEGRAM_IDS}")

        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ADMIN_TELEGRAM_IDS: {e}")
            logger.error("   –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: ADMIN_TELEGRAM_IDS=123456,789012")

    def _scan_prompt_files(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã"""
        prompts_dir = Path(self.PROMT_FILES_DIR).absolute()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        if not prompts_dir.exists():
            error_msg = f"–ö–∞—Ç–∞–ª–æ–≥ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompts_dir.absolute()}"
            logger.error(error_msg)
            raise FileNotFoundError(error_msg)

        if not prompts_dir.is_dir():
            error_msg = f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ç–∞–ª–æ–≥–æ–º: {prompts_dir.absolute()}"
            logger.error(error_msg)
            raise NotADirectoryError(error_msg)

        # –ò—â–µ–º –≤—Å–µ .txt —Ñ–∞–π–ª—ã
        txt_files = list(prompts_dir.glob("*.txt"))

        if not txt_files:
            error_msg = (
                f"–í –∫–∞—Ç–∞–ª–æ–≥–µ {prompts_dir.absolute()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ .txt —Ñ–∞–π–ª–∞"
            )
            logger.error(error_msg)
            raise FileNotFoundError(error_msg)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ welcome_message.txt
        welcome_file = prompts_dir / "welcome_message.txt"
        if not welcome_file.exists():
            error_msg = (
                f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª welcome_message.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {prompts_dir}"
            )
            logger.error(error_msg)
            raise FileNotFoundError(error_msg)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è welcome_message.txt –∏ help_message.txt)
        excluded_files = {"welcome_message.txt", "help_message.txt"}
        for txt_file in txt_files:
            if txt_file.name not in excluded_files:
                self.PROMPT_FILES.append(txt_file.name)

        if not self.PROMPT_FILES:
            error_msg = f"–í –∫–∞—Ç–∞–ª–æ–≥–µ {prompts_dir.absolute()} –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ welcome_message.txt, –Ω–æ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤"
            logger.error(error_msg)
            raise FileNotFoundError(error_msg)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        self.PROMPT_FILES.sort()

        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(self.PROMPT_FILES)}")
        logger.info(f"üìù –§–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤: {', '.join(self.PROMPT_FILES)}")
        logger.info("üëã –§–∞–π–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: welcome_message.txt")
