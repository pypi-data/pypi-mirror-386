"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Sales Bot v2.0 (—Å –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π)
"""

import asyncio
import logging
import os
import sys
from pathlib import Path
from typing import List, Optional, Tuple

from .admin.admin_manager import AdminManager
from .analytics.analytics_manager import AnalyticsManager
from .config import Config
from .core.bot_utils import parse_ai_response
from .core.conversation_manager import ConversationManager
from .integrations.openai_client import OpenAIClient
from .integrations.supabase_client import SupabaseClient
from .utils.prompt_loader import PromptLoader

logger = logging.getLogger(__name__)


def setup_bot_environment(bot_name: str = "growthmed-october-24") -> Optional[Path]:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º BOT_ID

    Args:
        bot_name: –ò–º—è –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    Returns:
        Optional[Path]: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–∞, None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    root_dir = Path(os.getcwd())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤—É—é
    config_dir = root_dir / "bots" / bot_name

    if not config_dir.exists():
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_dir}")
        logger.info("   –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:")
        bots_dir = root_dir / "bots"
        if bots_dir.exists():
            for bot_dir in bots_dir.iterdir():
                if bot_dir.is_dir():
                    logger.info(f"     - {bot_dir.name}")
        return None

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BOT_ID –∏–∑ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    os.environ["BOT_ID"] = bot_name
    logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_ID: {bot_name}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
    env_file = config_dir / ".env"
    if env_file.exists():
        logger.info(f"üîß –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑: {env_file}")
        from dotenv import load_dotenv

        load_dotenv(env_file)
    else:
        logger.error(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")
        return None

    # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.chdir(str(config_dir))
    logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config_dir}")

    return root_dir


async def check_config() -> Optional[Config]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    try:
        config = Config()

        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info("üìã –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

        summary = config.get_summary()
        for key, value in summary.items():
            logger.info(f"   ‚Ä¢ {key}: {value}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info("\nüëë –ê–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info(f"   ‚Ä¢ –ê–¥–º–∏–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(config.ADMIN_TELEGRAM_IDS)}")
        if config.ADMIN_TELEGRAM_IDS:
            logger.info(f"   ‚Ä¢ ID –∞–¥–º–∏–Ω–æ–≤: {config.ADMIN_TELEGRAM_IDS}")
        logger.info(f"   ‚Ä¢ –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–π: {config.ADMIN_SESSION_TIMEOUT_MINUTES} –º–∏–Ω")
        logger.info(
            f"   ‚Ä¢ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–∫–ª—é—á–µ–Ω' if config.DEBUG_MODE else '–í—ã–∫–ª—é—á–µ–Ω'}"
        )

        return config
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None


async def check_supabase(config: Config) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –∏ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        client = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await client.initialize()

        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ—ã
        client.client.table("sales_users").select("id").limit(1).execute()
        logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
        admin_tables = ["sales_admins", "admin_user_conversations", "session_events"]

        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü:")
        for table in admin_tables:
            try:
                client.client.table(table).select("*").limit(1).execute()
                logger.info(f"   ‚úÖ {table}")
            except Exception as e:
                logger.error(f"   ‚ùå {table}: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        try:
            (
                client.client.table("sales_chat_sessions")
                .select("current_stage", "lead_quality_score")
                .limit(1)
                .execute()
            )
            logger.info("   ‚úÖ sales_chat_sessions: current_stage, lead_quality_score")
        except Exception as e:
            logger.error(f"   ‚ùå sales_chat_sessions –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {e}")

        try:
            (
                client.client.table("sales_messages")
                .select("ai_metadata")
                .limit(1)
                .execute()
            )
            logger.info("   ‚úÖ sales_messages: ai_metadata")
        except Exception as e:
            logger.error(f"   ‚ùå sales_messages.ai_metadata: {e}")

        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Supabase: {e}")
        return False


async def check_openai(config: Config) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API"""
    try:
        client = OpenAIClient(
            config.OPENAI_API_KEY,
            config.OPENAI_MODEL,
            config.OPENAI_MAX_TOKENS,
            config.OPENAI_TEMPERATURE,
        )

        health = await client.check_api_health()

        if health:
            logger.info("‚úÖ OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            models = await client.get_available_models()
            if config.OPENAI_MODEL in models:
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {config.OPENAI_MODEL} –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {config.OPENAI_MODEL} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {models[:5]}...")

        return health
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return False


async def check_prompts(config: Config) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç—ã —Å –Ω–æ–≤—ã–º–∏ JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    try:
        loader = PromptLoader(
            prompts_dir=config.PROMT_FILES_DIR, prompt_files=config.PROMPT_FILES
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
        validation = await loader.validate_prompts()

        logger.info("üìù –°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–ø—Ç–æ–≤:")
        for filename, status in validation.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            logger.info(f"   {status_icon} {filename}")

        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if any(validation.values()):
            system_prompt = await loader.load_system_prompt()
            logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            if "JSON –ú–ï–¢–ê–î–ê–ù–ù–´–ú" in system_prompt:
                logger.info("‚úÖ JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
            else:
                logger.warning("‚ö†Ô∏è JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ")

            if '"—ç—Ç–∞–ø":' in system_prompt:
                logger.info("‚úÖ –ü—Ä–∏–º–µ—Ä—ã JSON –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–º–ø—Ç–µ")
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä—ã JSON –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–º–ø—Ç–µ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = await loader.load_welcome_message()
            logger.info(
                f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ({len(welcome_message)} —Å–∏–º–≤–æ–ª–æ–≤)"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            help_message = await loader.load_help_message()
            logger.info(
                f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ({len(help_message)} —Å–∏–º–≤–æ–ª–æ–≤)"
            )

            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        return False


async def check_admin_system(config: Config) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É"""
    try:
        logger.info("üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã...")

        if not config.ADMIN_TELEGRAM_IDS:
            logger.warning("‚ö†Ô∏è –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (ADMIN_TELEGRAM_IDS –ø—É—Å—Ç)")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AdminManager
        supabase_client = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await supabase_client.initialize()

        admin_manager = AdminManager(config, supabase_client)
        logger.info(
            f"‚úÖ AdminManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({len(admin_manager.admin_ids)} –∞–¥–º–∏–Ω–æ–≤)"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ConversationManager
        ConversationManager(supabase_client, admin_manager)
        logger.info("‚úÖ ConversationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AnalyticsManager
        analytics_manager = AnalyticsManager(supabase_client)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await analytics_manager.get_funnel_stats(1)
        logger.info("‚úÖ AnalyticsManager —Ä–∞–±–æ—Ç–∞–µ—Ç")

        logger.info("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


async def check_json_parsing() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON...")

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_response = """–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

{
  "—ç—Ç–∞–ø": "contacts",
  "–∫–∞—á–µ—Å—Ç–≤–æ": 9,
  "—Å–æ–±—ã—Ç–∏—è": [
    {
      "—Ç–∏–ø": "—Ç–µ–ª–µ—Ñ–æ–Ω",
      "–∏–Ω—Ñ–æ": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ +79219603144"
    }
  ]
}"""

        response_text, metadata = parse_ai_response(test_response)

        if metadata:
            logger.info("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            logger.info(f"   –≠—Ç–∞–ø: {metadata.get('—ç—Ç–∞–ø')}")
            logger.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {metadata.get('–∫–∞—á–µ—Å—Ç–≤–æ')}")
            logger.info(f"   –°–æ–±—ã—Ç–∏—è: {len(metadata.get('—Å–æ–±—ã—Ç–∏—è', []))}")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False


async def check_database_structure() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SQL —Ñ–∞–π–ª–æ–≤
        root_dir = Path(os.getcwd())
        sql_files = [
            (
                "database_structure.sql",
                "smart_bot_factory/database/database_structure.sql",
            ),
            ("admin_migration.sql", "smart_bot_factory/admin/admin_migration.sql"),
        ]

        for sql_name, sql_path in sql_files:
            full_path = root_dir / sql_path
            if full_path.exists():
                logger.info(f"‚úÖ {sql_name} –Ω–∞–π–¥–µ–Ω: {sql_path}")
            else:
                logger.error(f"‚ùå {sql_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {sql_path}")

        logger.info("‚ÑπÔ∏è –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü –≤ –ë–î –∑–∞–ø—É—Å—Ç–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç—ã –≤ Supabase")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False


async def check_environment() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dependencies = [
        ("aiogram", "aiogram"),
        ("supabase", "supabase"),
        ("openai", "openai"),
        ("python-dotenv", "dotenv"),
        ("aiofiles", "aiofiles"),
    ]

    for dep_name, import_name in dependencies:
        try:
            if import_name == "aiogram":
                import aiogram

                logger.info(f"‚úÖ {dep_name} {aiogram.__version__}")
            elif import_name == "openai":
                import openai

                logger.info(f"‚úÖ {dep_name} {openai.version.VERSION}")
            else:
                __import__(import_name)
                logger.info(f"‚úÖ {dep_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logger.error(f"‚ùå {dep_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def run_quick_test() -> bool:
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    try:
        logger.info("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        config = Config()

        if config.ADMIN_TELEGRAM_IDS:
            logger.info(f"‚úÖ {len(config.ADMIN_TELEGRAM_IDS)} –∞–¥–º–∏–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
        await check_json_parsing()

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False


async def check_setup(bot_name: str = "growthmed-october-24") -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞

    Args:
        bot_name: –ò–º—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, False –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    """
    logger.info(f"üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Sales Bot v2.0: {bot_name}")
    logger.info(f"ü§ñ Bot ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {bot_name}\n")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç BOT_ID)
    config_dir = setup_bot_environment(bot_name)
    if not config_dir:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    await check_environment()
    logger.info("")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = await check_config()
    if not config:
        logger.error("\n‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    logger.info("")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks: List[Tuple[str, bool]] = []
    for name, check_coro in [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database_structure()),
        ("Supabase", check_supabase(config)),
        ("OpenAI", check_openai(config)),
        ("–ü—Ä–æ–º–ø—Ç—ã", check_prompts(config)),
        ("–ê–¥–º–∏–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞", check_admin_system(config)),
        ("JSON –ø–∞—Ä—Å–∏–Ω–≥", check_json_parsing()),
        ("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", run_quick_test()),
    ]:
        logger.info(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {name}")
        result = await check_coro
        checks.append((name, result))

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info(f"\n{'='*60}")
    logger.info(f"üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¥–ª—è {bot_name}:")

    all_passed = True
    critical_failed = False

    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    critical_checks = ["Supabase", "OpenAI", "–ü—Ä–æ–º–ø—Ç—ã"]

    for name, passed in checks:
        if name in critical_checks:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if passed else "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê"
            if not passed:
                critical_failed = True
        else:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if passed else "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"

        logger.info(f"   {name}: {status}")
        if not passed:
            all_passed = False

    passed_count = sum(1 for _, passed in checks if passed)
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_count}/{len(checks)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if critical_failed:
        logger.error("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        logger.error("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    elif all_passed:
        logger.info("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        logger.info(f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python {bot_name}.py")
        if config.ADMIN_TELEGRAM_IDS:
            logger.info(
                f"   üëë –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: {config.ADMIN_TELEGRAM_IDS}"
            )
    else:
        logger.warning("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
        logger.warning(
            "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞."
        )

    if config and config.DEBUG_MODE:
        logger.warning(
            "\nüêõ –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò –í–ö–õ–Æ–ß–ï–ù - JSON –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        )

    logger.info(f"{'='*60}")

    return not critical_failed


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    logger.info("üîç –£—Ç–∏–ª–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
    logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    logger.info("  python -m smart_bot_factory.setup_checker [bot_name]")
    logger.info("  python -m smart_bot_factory.setup_checker growthmed-october-24")
    logger.info("")

    if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help", "help"]:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
    bot_name = "growthmed-october-24"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if len(sys.argv) > 1:
        bot_name = sys.argv[1]

    try:
        success = asyncio.run(check_setup(bot_name))
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        sys.exit(1)


if __name__ == "__main__":
    main()
