# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π handlers.py —Å –æ—Ç–ª–∞–¥–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏

import logging
import time

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from ..core.bot_utils import (parse_ai_response, process_events, send_message,
                              send_welcome_file)
from ..core.states import UserStates

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


def setup_handlers(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
    router.message.middleware()(admin_middleware)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
def get_global_var(var_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –º–æ–¥—É–ª—è handlers"""
    import sys

    current_module = sys.modules[__name__]
    return getattr(current_module, var_name, None)


# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–≤
async def admin_middleware(handler, event: Message, data: dict):
    """Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∞—Ö"""
    admin_manager = get_global_var("admin_manager")

    if admin_manager and admin_manager.is_admin(event.from_user.id):
        await admin_manager.update_admin_info(event.from_user)

    return await handler(event, data)


@router.message(Command(commands=["start", "—Å—Ç–∞—Ä—Ç", "—Å—Ç"]))
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –∏ –Ω–∞—á–∞–ª–æ –∑–∞–Ω–æ–≤–æ"""
    admin_manager = get_global_var("admin_manager")
    from ..admin.admin_logic import admin_start_handler
    from ..utils.debug_routing import debug_user_state

    try:
        await debug_user_state(message, state, "START_COMMAND")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ –∏ –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ
        if admin_manager.is_admin(message.from_user.id):
            if admin_manager.is_in_admin_mode(message.from_user.id):
                # –ê–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –∞–¥–º–∏–Ω
                await admin_start_handler(message, state)
                return
            # –ê–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

        await user_start_handler(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")
        await send_message(
            message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(Command(commands=["timeup", "–≤–ø–µ—Ä–µ–¥"]))
async def timeup_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timeup (–∏–ª–∏ /–≤–ø–µ—Ä–µ–¥) - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    from datetime import datetime

    from ..core.decorators import process_scheduled_event, update_event_result

    supabase_client = get_global_var("supabase_client")

    try:
        await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (user_id = null)
        # 1. –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_events_query = (
            supabase_client.client.table("scheduled_events")
            .select("*")
            .eq("user_id", message.from_user.id)
            .in_("status", ["pending", "immediate"])
        )

        # üÜï –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ bot_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if supabase_client.bot_id:
            user_events_query = user_events_query.eq("bot_id", supabase_client.bot_id)

        user_events = user_events_query.execute()

        # 2. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–±–µ–∑ user_id)
        global_events_query = (
            supabase_client.client.table("scheduled_events")
            .select("*")
            .is_("user_id", "null")
            .in_("status", ["pending", "immediate"])
        )

        # üÜï –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ bot_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if supabase_client.bot_id:
            global_events_query = global_events_query.eq(
                "bot_id", supabase_client.bot_id
            )

        global_events = global_events_query.execute()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
        all_events = (user_events.data or []) + (global_events.data or [])

        if not all_events:
            await message.answer("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        total_events = len(all_events)
        user_count = len(user_events.data or [])
        global_count = len(global_events.data or [])

        status_msg = f"üìã –ù–∞–π–¥–µ–Ω–æ {total_events} —Å–æ–±—ã—Ç–∏–π:"
        if user_count > 0:
            status_msg += f"\n   üë§ –í–∞—à–∏—Ö: {user_count}"
        if global_count > 0:
            status_msg += f"\n   üåç –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö: {global_count}"
        status_msg += "\n\n–í—ã–ø–æ–ª–Ω—è—é –∏—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ..."

        await message.answer(status_msg)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
        success_count = 0
        failed_count = 0
        results = []

        for event in all_events:
            event_id = event["id"]
            event_type = event["event_type"]
            event_category = event["event_category"]
            is_global = event.get("user_id") is None

            try:
                event_label = f"üåç {event_type}" if is_global else f"üë§ {event_type}"
                logger.info(
                    f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ {event_id}: {event_category}/{event_type} ({'–≥–ª–æ–±–∞–ª—å–Ω–æ–µ' if is_global else f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}'})"
                )

                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                await process_scheduled_event(event)

                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                await update_event_result(
                    event_id,
                    "completed",
                    {
                        "executed": True,
                        "test_mode": True,
                        "tested_by_user": message.from_user.id,
                        "tested_at": datetime.now().isoformat(),
                    },
                )

                success_count += 1
                results.append(f"‚úÖ {event_label}")
                logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

            except Exception as e:
                failed_count += 1
                error_msg = str(e)
                event_label = f"üåç {event_type}" if is_global else f"üë§ {event_type}"
                results.append(f"‚ùå {event_label}: {error_msg[:50]}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event_id}: {error_msg}")

                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
                await update_event_result(event_id, "failed", None, error_msg)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result_text = [
            "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**",
            "",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}",
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}",
            f"üìã –í—Å–µ–≥–æ: {total_events}",
            "",
            "**–°–æ–±—ã—Ç–∏—è:**",
            "üë§ - –≤–∞—à–∏ —Å–æ–±—ã—Ç–∏—è",
            "üåç - –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
            "",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–º–∞–∫—Å–∏–º—É–º 10 —Å–æ–±—ã—Ç–∏–π)
        for result in results[:10]:
            result_text.append(result)

        if len(results) > 10:
            result_text.append(f"... –∏ –µ—â–µ {len(results) - 10} —Å–æ–±—ã—Ç–∏–π")

        await message.answer("\n".join(result_text))

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ timeup_handler: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@router.message(F.voice | F.audio)
async def voice_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    openai_client = get_global_var("openai_client")
    bot = get_global_var("bot")
    admin_manager = get_global_var("admin_manager")

    import os
    from datetime import datetime
    from pathlib import Path

    processing_msg = None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if admin_manager.is_admin(message.from_user.id):
            if admin_manager.is_in_admin_mode(message.from_user.id):
                return  # –ê–¥–º–∏–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ç–µ–∫—Å—Ç–æ–º

        logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        if message.voice:
            file_id = message.voice.file_id
            duration = message.voice.duration
        else:
            file_id = message.audio.file_id
            duration = message.audio.duration

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_msg = await message.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...")

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await bot.get_file(file_id)

            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            temp_dir = Path("temp_audio")
            temp_dir.mkdir(exist_ok=True)

            file_path = (
                temp_dir
                / f"{message.from_user.id}_{int(datetime.now().timestamp())}.ogg"
            )

            # –°–∫–∞—á–∏–≤–∞–µ–º
            await bot.download_file(file.file_path, file_path)
            logger.info(f"üì• –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {file_path} ({duration} —Å–µ–∫)")

            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —á–µ—Ä–µ–∑ Whisper
            recognized_text = await openai_client.transcribe_audio(str(file_path))

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø–∞–ø–∫—É
            try:
                os.remove(file_path)
                logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –ø–∞–ø–∫–∞
                if not any(temp_dir.iterdir()):
                    temp_dir.rmdir()
                    logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {temp_dir}")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")

            if not recognized_text:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return

            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —É—Å–ø–µ—à–Ω–æ: '{recognized_text[:100]}...'")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            current_state = await state.get_state()
            data = await state.get_data()

            logger.info(f"üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            logger.info(f"üîç –î–∞–Ω–Ω—ã–µ –≤ state: {data}")

            session_id = data.get("session_id")
            system_prompt = data.get("system_prompt")

            logger.info(f"üìù session_id –∏–∑ state: {session_id}")

            # –ï—Å–ª–∏ session_id –Ω–µ—Ç –≤ state, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
            if not session_id:
                logger.warning(
                    "‚ö†Ô∏è session_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state, –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î..."
                )
                supabase_client = get_global_var("supabase_client")

                session_info = await supabase_client.get_active_session(
                    message.from_user.id
                )
                if session_info:
                    session_id = session_info["id"]
                    system_prompt = session_info["system_prompt"]

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    await state.update_data(
                        session_id=session_id, system_prompt=system_prompt
                    )
                    await state.set_state(UserStates.waiting_for_message)

                    logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ë–î: {session_id}")
                else:
                    logger.error("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")

            if session_id:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ state
                await state.update_data(voice_recognized_text=recognized_text)
                await state.set_state(UserStates.voice_confirmation)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
                from aiogram.types import (InlineKeyboardButton,
                                           InlineKeyboardMarkup)

                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="voice_send"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="voice_edit"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üé§ –ù–∞–¥–∏–∫—Ç–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
                                callback_data="voice_retry",
                            )
                        ],
                    ]
                )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é"
                try:
                    await processing_msg.delete()
                except Exception:
                    pass

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await message.answer(
                    f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n\n<i>{recognized_text}</i>\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard,
                    parse_mode="HTML",
                )

                logger.info("‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            else:
                logger.warning("‚ùå –ù–µ—Ç session_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                await processing_msg.edit_text(
                    f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n\n{recognized_text}\n\n"
                    f"–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
            logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
            if processing_msg:
                await processing_msg.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
                )

    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:")
        try:
            if processing_msg:
                await processing_msg.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
                )
        except Exception:
            pass


async def user_start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    supabase_client = get_global_var("supabase_client")
    prompt_loader = get_global_var("prompt_loader")
    from ..core.bot_utils import parse_utm_from_start_param

    try:
        # 0. –ü–û–õ–£–ß–ê–ï–ú UTM –î–ê–ù–ù–´–ï
        start_param = (
            message.text.split(" ", 1)[1] if len(message.text.split()) > 1 else None
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π start –ø–∞—Ä–∞–º–µ—Ç—Ä
        # –ü—Ä–∏–º–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: @https://t.me/bot?start=utmSource-vk_utmCampaign-summer2025 –Ω–µ –±–æ–ª–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ strat=

        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω start –ø–∞—Ä–∞–º–µ—Ç—Ä: '{start_param}'")

        utm_data = {}
        if start_param:
            # –ü–∞—Ä—Å–∏–º UTM –¥–∞–Ω–Ω—ã–µ
            utm_data = parse_utm_from_start_param(start_param)

            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ UTM
            logger.info(f"üìä UTM –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:")
            if utm_data:
                for key, value in utm_data.items():
                    logger.info(f"   ‚Ä¢ {key}: {value}")
                logger.info("‚úÖ UTM –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã")
            else:
                logger.warning(f"‚ö†Ô∏è UTM –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ: '{start_param}'")
        else:
            logger.info("‚ÑπÔ∏è Start –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–±—ã—á–Ω—ã–π /start)")

        # 1. –Ø–í–ù–û –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï FSM
        await state.clear()
        logger.info(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # 2. –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–†–û–ú–ü–¢–´
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        system_prompt = await prompt_loader.load_system_prompt()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = await prompt_loader.load_welcome_message()

        # 3. –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        user_data = {
            "telegram_id": message.from_user.id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code,
            "source": utm_data.get("utm_source"),
            "medium": utm_data.get("utm_medium"),
            "campaign": utm_data.get("utm_campaign"),
            "content": utm_data.get("utm_content"),
            "term": utm_data.get("utm_term"),
            "segment": utm_data.get("segment"),
        }

        # 4. –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –°–ï–°–°–ò–Æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ)
        # –î–æ–±–∞–≤–ª—è–µ–º UTM –¥–∞–Ω–Ω—ã–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if utm_data:
            user_data["metadata"] = {"utm_data": utm_data}
            logger.info("üìà UTM –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        session_id = await supabase_client.create_chat_session(user_data, system_prompt)
        logger.info(
            f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
        )

        # 5. –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
        await state.update_data(session_id=session_id, system_prompt=system_prompt)
        await state.set_state(UserStates.waiting_for_message)

        # 6. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        try:
            await send_message(message, welcome_message)
            logger.info(
                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}"
            )
        except Exception as e:
            if "Forbidden: bot was blocked by the user" in str(e):
                logger.warning(
                    f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}"
                )
                return
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                raise

        # 7. –ï–°–õ–ò –ï–°–¢–¨ –§–ê–ô–õ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í–ú–ï–°–¢–ï –° –ü–û–î–ü–ò–°–¨–Æ
        logging.info(
            f"üìé –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}"
        )
        caption = await send_welcome_file(message)

        # 8. –°–û–•–†–ê–ù–Ø–ï–ú –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –í –ë–î
        if caption:
            logging.info(
                f"üìÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}"
            )
            welcome_message = f"{welcome_message}\n\n–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É:\n\n{caption}"
        else:
            logging.info(
                f"üìÑ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}"
            )

        logging.info(
            f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}"
        )

        await supabase_client.add_message(
            session_id=session_id,
            role="assistant",
            content=welcome_message,
            message_type="text",
        )

        logging.info(
            f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}"
        )

        # –í–´–ó–´–í–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò on_start
        start_handlers = get_global_var("start_handlers")
        if start_handlers:
            logger.info(
                f"üîî –í—ã–∑–æ–≤ {len(start_handlers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ on_start"
            )
            for handler in start_handlers:
                try:
                    await handler(
                        user_id=message.from_user.id,
                        session_id=session_id,
                        message=message,
                        state=state,
                    )
                    logger.info(
                        f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ on_start '{handler.__name__}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                    )
                except Exception as handler_error:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ on_start '{handler.__name__}': {handler_error}"
                    )
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ user /start: {e}")
        await send_message(
            message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(StateFilter(None))
async def message_without_state_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)"""
    admin_manager = get_global_var("admin_manager")
    supabase_client = get_global_var("supabase_client")
    conversation_manager = get_global_var("conversation_manager")
    from ..admin.admin_logic import AdminStates as AdminLogicStates
    from ..utils.debug_routing import debug_user_state

    try:
        await debug_user_state(message, state, "NO_STATE")

        # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–æ–º
        conversation = await conversation_manager.is_user_in_admin_chat(
            message.from_user.id
        )

        if conversation:
            logger.info(
                f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–æ–º {conversation['admin_id']}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin_chat"
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin_chat
            await state.set_state(UserStates.admin_chat)
            await state.update_data(admin_conversation=conversation)

            # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await conversation_manager.forward_message_to_admin(message, conversation)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            session_info = await supabase_client.get_active_session(
                message.from_user.id
            )
            if session_info:
                await supabase_client.add_message(
                    session_id=session_info["id"],
                    role="user",
                    content=message.text,
                    message_type="text",
                    metadata={
                        "in_admin_chat": True,
                        "admin_id": conversation["admin_id"],
                    },
                )

            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
        if admin_manager.is_admin(message.from_user.id):
            logger.info("üëë –ê–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            await state.set_state(AdminLogicStates.admin_mode)
            await message.answer(
                "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            )
            return

        logger.info("üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é")

        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
        session_info = await supabase_client.get_active_session(message.from_user.id)

        if session_info:
            logger.info(f"üìù –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é {session_info['id']}")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
            session_id = session_info["id"]
            system_prompt = session_info["system_prompt"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(session_id=session_id, system_prompt=system_prompt)
            await state.set_state(UserStates.waiting_for_message)

            logger.info("‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")

            # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
            await process_user_message(message, state, session_id, system_prompt)
        else:
            logger.info("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å /start")
            await send_message(message, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        await send_message(
            message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞."
        )


# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ admin_chat –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú –∏ –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º
@router.message(StateFilter(UserStates.admin_chat))
async def user_in_admin_chat_handler(message: Message, state: FSMContext):
    """–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∞–¥–º–∏–Ω–æ–º"""
    conversation_manager = get_global_var("conversation_manager")
    supabase_client = get_global_var("supabase_client")
    from ..utils.debug_routing import debug_user_state

    await debug_user_state(message, state, "ADMIN_CHAT_HANDLER")

    user_id = message.from_user.id
    logger.info(f"üéØ ADMIN_CHAT HANDLER: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{message.text}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    conversation = await conversation_manager.is_user_in_admin_chat(user_id)

    if conversation:
        logger.info(f"‚úÖ –î–∏–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É {conversation['admin_id']}")

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            session_info = await supabase_client.get_active_session(user_id)
            if session_info:
                await supabase_client.add_message(
                    session_id=session_info["id"],
                    role="user",
                    content=message.text,
                    message_type="text",
                    metadata={
                        "in_admin_chat": True,
                        "admin_id": conversation["admin_id"],
                    },
                )
                logger.info("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
            await conversation_manager.forward_message_to_admin(message, conversation)
            logger.info("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω—É")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ admin_chat: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        logger.info("üí¨ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É")
        # –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É
        await state.set_state(UserStates.waiting_for_message)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = await state.get_data()
        session_id = data.get("session_id")
        system_prompt = data.get("system_prompt")

        if session_id:
            await process_user_message(message, state, session_id, system_prompt)
        else:
            await send_message(
                message, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start"
            )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ù–ï –≤ admin_chat)
@router.message(StateFilter(UserStates.waiting_for_message), ~F.text.startswith("/"))
async def user_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–∫–ª—é—á–∞—è admin_chat)"""
    conversation_manager = get_global_var("conversation_manager")
    from ..utils.debug_routing import debug_user_state

    try:
        await debug_user_state(message, state, "USER_MESSAGE_HANDLER")

        # ‚úÖ –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–æ–º
        conversation = await conversation_manager.is_user_in_admin_chat(
            message.from_user.id
        )

        if conversation:
            logger.info(
                "‚ö†Ô∏è –ù–ï–û–ñ–ò–î–ê–ù–ù–û: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ waiting_for_message, –Ω–æ –µ—Å—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–æ–º!"
            )
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ admin_chat —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(UserStates.admin_chat)
            await state.update_data(admin_conversation=conversation)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ admin_chat
            await user_in_admin_chat_handler(message, state)
            return

        logger.info("ü§ñ –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
        data = await state.get_data()
        session_id = data.get("session_id")
        system_prompt = data.get("system_prompt")

        if not session_id:
            logger.warning("‚ùå –ù–µ—Ç session_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await send_message(
                message, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start"
            )
            return

        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å session_id: {session_id}")
        await process_user_message(message, state, session_id, system_prompt)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await send_message(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
        )


@router.callback_query(F.data == "voice_send")
async def voice_send_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        recognized_text = data.get("voice_recognized_text")
        session_id = data.get("session_id")
        system_prompt = data.get("system_prompt")

        if not recognized_text or not session_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.delete()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await process_voice_message(
            callback.message, state, session_id, system_prompt, recognized_text
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(UserStates.waiting_for_message)
        await state.update_data(voice_recognized_text=None)

        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)


@router.callback_query(F.data == "voice_edit")
async def voice_edit_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç' –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        recognized_text = data.get("voice_recognized_text")

        if not recognized_text:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.set_state(UserStates.voice_editing)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        await callback.message.edit_text(
            f"‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n"
            f"{recognized_text}\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "voice_retry")
async def voice_retry_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–¥–∏–∫—Ç–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ' –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.delete()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(UserStates.waiting_for_message)
        await state.update_data(voice_recognized_text=None)

        # –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ
        await callback.message.answer("üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")

        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(StateFilter(UserStates.voice_editing))
async def voice_edit_text_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    try:
        edited_text = message.text.strip()

        if not edited_text:
            await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        data = await state.get_data()
        session_id = data.get("session_id")
        system_prompt = data.get("system_prompt")

        if not session_id:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É
        await process_voice_message(
            message, state, session_id, system_prompt, edited_text
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(UserStates.waiting_for_message)
        await state.update_data(voice_recognized_text=None)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
        )


@router.message()
async def catch_all_handler(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    admin_manager = get_global_var("admin_manager")
    from ..utils.debug_routing import debug_user_state

    await debug_user_state(message, state, "CATCH_ALL")

    current_state = await state.get_state()
    logger.warning(
        f"‚ö†Ô∏è –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –æ—Ç {message.from_user.id}: '{message.text}', —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
    if admin_manager.is_admin(message.from_user.id):
        logger.info("üëë –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞")
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    else:
        logger.info("üë§ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞.")


async def process_user_message(
    message: Message, state: FSMContext, session_id: str, system_prompt: str
):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    supabase_client = get_global_var("supabase_client")
    openai_client = get_global_var("openai_client")
    config = get_global_var("config")
    bot = get_global_var("bot")
    prompt_loader = get_global_var("prompt_loader")
    message_hooks = get_global_var("message_hooks") or {}
    from datetime import datetime

    import pytz  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏

    try:
        # ============ –•–£–ö 1: –í–ê–õ–ò–î–ê–¶–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø ============
        validators = message_hooks.get("validators", [])
        for validator in validators:
            try:
                user_message = message.text
                message_obj = message

                should_continue = await validator(user_message, message_obj)
                if not should_continue:
                    logger.info(
                        f"‚õî –í–∞–ª–∏–¥–∞—Ç–æ—Ä '{validator.__name__}' –ø—Ä–µ—Ä–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É"
                    )
                    return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ '{validator.__name__}': {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await supabase_client.add_message(
            session_id=session_id,
            role="user",
            content=message.text,
            message_type="text",
        )
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_history = await supabase_client.get_chat_history(
            session_id, limit=config.MAX_CONTEXT_MESSAGES
        )
        logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {len(chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ï–ì–û –í–†–ï–ú–ï–ù–ò
        moscow_tz = pytz.timezone("Europe/Moscow")
        current_time = datetime.now(moscow_tz)
        time_info = current_time.strftime("%H:%M, %d.%m.%Y, %A")

        # –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
        system_prompt_with_time = f"""
{system_prompt}

–¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø: {time_info} (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
"""

        # ============ –•–£–ö 2: –û–ë–û–ì–ê–©–ï–ù–ò–ï –ü–†–û–ú–ü–¢–ê ============
        prompt_enrichers = message_hooks.get("prompt_enrichers", [])
        for enricher in prompt_enrichers:
            try:
                system_prompt_with_time = await enricher(
                    system_prompt_with_time, message.from_user.id
                )
                logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–æ–≥–∞—â–µ–Ω '{enricher.__name__}'")
            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª–µ –ø—Ä–æ–º–ø—Ç–∞ '{enricher.__name__}': {e}"
                )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è OpenAI —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        messages = [{"role": "system", "content": system_prompt_with_time}]

        for msg in chat_history[
            -config.MAX_CONTEXT_MESSAGES :
        ]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            messages.append({"role": msg["role"], "content": msg["content"]})

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        final_instructions = await prompt_loader.load_final_instructions()
        if final_instructions:
            messages.append({"role": "system", "content": final_instructions})
            logger.info(
                f"üéØ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ({len(final_instructions)} —Å–∏–º–≤–æ–ª–æ–≤)"
            )

        # ============ –•–£–ö 3: –û–ë–û–ì–ê–©–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê ============
        context_enrichers = message_hooks.get("context_enrichers", [])
        for enricher in context_enrichers:
            try:
                messages = await enricher(messages)
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–æ–≥–∞—â–µ–Ω '{enricher.__name__}'")
            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ '{enricher.__name__}': {e}"
                )

        logger.info(
            f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è: {time_info})"
        )

        await bot.send_chat_action(message.chat.id, "typing")

        start_time = time.time()
        ai_response = await openai_client.get_completion(messages)
        processing_time = int((time.time() - start_time) * 1000)

        logger.info(
            f"ü§ñ OpenAI –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {processing_time}–º—Å, –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(ai_response) if ai_response else 0}"
        )

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ä–∞–Ω–µ–µ
        tokens_used = 0
        ai_metadata = {}
        response_text = ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if not ai_response or not ai_response.strip():
            logger.warning("‚ùå OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π/–ø—Ä–æ–±–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –ø—É—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–µ
            if hasattr(openai_client, "last_completion_tokens"):
                logger.warning(
                    f"‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã ({openai_client.last_completion_tokens}), –Ω–æ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π"
                )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –æ—Ç–≤–µ—Ç
            fallback_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            ai_response = fallback_message
            response_text = fallback_message
            tokens_used = 0
            ai_metadata = {}

        else:
            logger.info("üì§ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")

            tokens_used = openai_client.estimate_tokens(ai_response)

            # –ü–∞—Ä—Å–∏–º JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            response_text, ai_metadata = parse_ai_response(ai_response)

            logger.info("üîç –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:")
            logger.info(
                f"   üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤: '{response_text[:100]}...'"
            )
            logger.info(f"   üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {ai_metadata}")

            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not ai_metadata:
                logger.info("‚ÑπÔ∏è JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")
                response_text = ai_response
                ai_metadata = {}
            elif not response_text.strip():
                logger.warning(
                    "‚ö†Ô∏è JSON –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–π! –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç."
                )
                response_text = ai_response

            logger.info(
                f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤"
            )

        # ============ –•–£–ö 4: –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ============
        response_processors = message_hooks.get("response_processors", [])
        for processor in response_processors:
            try:
                response_text, ai_metadata = await processor(
                    response_text, ai_metadata, message.from_user.id
                )
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω '{processor.__name__}'")
            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—Ç–≤–µ—Ç–∞ '{processor.__name__}': {e}"
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø —Å–µ—Å—Å–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–∞
        if ai_metadata:
            logger.info("üîç –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ—Ç –ò–ò:")

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–∞–ø–µ
            stage = ai_metadata.get("—ç—Ç–∞–ø")
            if stage:
                logger.info(f"   üìà –≠—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞: {stage}")

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ –ª–∏–¥–∞
            quality = ai_metadata.get("–∫–∞—á–µ—Å—Ç–≤–æ")
            if quality is not None:
                quality_emoji = "‚≠ê" * min(quality, 5)  # –ú–∞–∫—Å–∏–º—É–º 5 –∑–≤–µ–∑–¥
                logger.info(f"   {quality_emoji} –ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–∞: {quality}/10")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if stage or quality is not None:
                await supabase_client.update_session_stage(session_id, stage, quality)
                logger.info("   ‚úÖ –≠—Ç–∞–ø –∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            events = ai_metadata.get("—Å–æ–±—ã—Ç–∏—è", [])
            if events:
                logger.info(f"\nüîî –°–æ–±—ã—Ç–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ ({len(events)}):")
                for idx, event in enumerate(events, 1):
                    event_type = event.get("—Ç–∏–ø", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    event_info = event.get("–∏–Ω—Ñ–æ", "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

                    # –ü–æ–¥–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
                    event_emoji = {
                        "—Ç–µ–ª–µ—Ñ–æ–Ω": "üì±",
                        "email": "üìß",
                        "–≤—Å—Ç—Ä–µ—á–∞": "üìÖ",
                        "–∑–∞–∫–∞–∑": "üõçÔ∏è",
                        "–≤–æ–ø—Ä–æ—Å": "‚ùì",
                        "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "üí¨",
                        "–∂–∞–ª–æ–±–∞": "‚ö†Ô∏è",
                        "–æ—Ç–∑—ã–≤": "üí≠",
                    }.get(event_type.lower(), "üìå")

                    logger.info(f"   {idx}. {event_emoji} {event_type}: {event_info}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
                should_send_response = await process_events(
                    session_id, events, message.from_user.id
                )
                logger.warning(
                    f"   ‚úÖ –°–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, should_send_response = {should_send_response}"
                )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏
        files_list = ai_metadata.get("—Ñ–∞–π–ª—ã", [])
        directories_list = ai_metadata.get("–∫–∞—Ç–∞–ª–æ–≥–∏", [])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        if files_list:
            logger.info("üìé –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for idx, file in enumerate(files_list, 1):
                logger.info(f"   {idx}. üìÑ {file}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö
        if directories_list:
            logger.info("üìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏:")
            for idx, directory in enumerate(directories_list, 1):
                logger.info(f"   {idx}. üìÅ {directory}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        if files_list or directories_list:
            files_info = []
            if files_list:
                files_str = "\n".join(f"‚Ä¢ {file}" for file in files_list)
                files_info.append(f"\n\nüìé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:\n{files_str}")

            if directories_list:
                dirs_str = "\n".join(f"‚Ä¢ {directory}" for directory in directories_list)
                files_info.append(f"\n\nüìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏:\n{dirs_str}")

        else:
            logger.info("üìé –§–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        try:
            await supabase_client.add_message(
                session_id=session_id,
                role="assistant",
                content=response_text,
                message_type="text",
                tokens_used=tokens_used,
                processing_time_ms=processing_time,
                ai_metadata=ai_metadata,
            )
            logger.info("‚úÖ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î: {e}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if config.DEBUG_MODE:
            # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å JSON
            final_response = ai_response
            logger.info("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å JSON")
        else:
            # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ JSON
            final_response = response_text
            logger.info("üë§ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if not final_response or not final_response.strip():
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—É—Å—Ç!")
            final_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {len(final_response)} —Å–∏–º–≤–æ–ª–æ–≤")

        # ============ –ü–†–û–í–ï–†–ö–ê: –ù–£–ñ–ù–û –õ–ò –û–¢–ü–†–ê–í–õ–Ø–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ò–ò ============
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∏–∑ —Å–æ–±—ã—Ç–∏–π (–µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É)
        logger.warning(
            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ should_send_response: exists={('should_send_response' in locals())}, value={locals().get('should_send_response', 'NOT_SET')}"
        )

        if "should_send_response" in locals() and not should_send_response:
            logger.warning(
                "üîáüîáüîá –°–û–ë–´–¢–ò–Ø –ó–ê–ü–†–ï–¢–ò–õ–ò –û–¢–ü–†–ê–í–ö–£ –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ò–ò, –ü–†–û–ü–£–°–ö–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ üîáüîáüîá"
            )
            return

        # ============ –•–£–ö 5: –§–ò–õ–¨–¢–†–´ –û–¢–ü–†–ê–í–ö–ò ============
        send_filters = message_hooks.get("send_filters", [])
        for filter_func in send_filters:
            try:
                should_send = await filter_func(message.from_user.id)
                if should_send:
                    # True = –±–ª–æ–∫–∏—Ä—É–µ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å should_block_ai_response)
                    logger.info(
                        f"‚õî –§–∏–ª—å—Ç—Ä '{filter_func.__name__}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É (–≤–µ—Ä–Ω—É–ª True)"
                    )
                    return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ '{filter_func.__name__}': {e}"
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await send_message(
                message,
                final_response,
                files_list=files_list,
                directories_list=directories_list,
            )
            logger.info(
                f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}"
            )
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except Exception as e2:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e2}")

    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ process_user_message: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        try:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            )
        except Exception:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ", exc_info=True)


async def process_voice_message(
    message: Message,
    state: FSMContext,
    session_id: str,
    system_prompt: str,
    recognized_text: str,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    supabase_client = get_global_var("supabase_client")
    openai_client = get_global_var("openai_client")
    config = get_global_var("config")
    bot = get_global_var("bot")
    prompt_loader = get_global_var("prompt_loader")

    from datetime import datetime

    import pytz

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await supabase_client.add_message(
            session_id=session_id,
            role="user",
            content=recognized_text,
            message_type="text",  # –ë–î —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ 'text'
            metadata={
                "original_type": "voice",
                "duration": message.voice.duration if message.voice else 0,
            },
        )
        logger.info("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_history = await supabase_client.get_chat_history(
            session_id, limit=config.MAX_CONTEXT_MESSAGES
        )
        logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {len(chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone("Europe/Moscow")
        current_time = datetime.now(moscow_tz)
        time_info = current_time.strftime("%H:%M, %d.%m.%Y, %A")

        system_prompt_with_time = f"""
{system_prompt}

–¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø: {time_info} (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è OpenAI
        messages = [{"role": "system", "content": system_prompt_with_time}]

        for msg in chat_history[-config.MAX_CONTEXT_MESSAGES :]:
            messages.append({"role": msg["role"], "content": msg["content"]})

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        final_instructions = await prompt_loader.load_final_instructions()
        if final_instructions:
            messages.append({"role": "system", "content": final_instructions})
            logger.info("üéØ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

        logger.info(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        await bot.send_chat_action(message.chat.id, "typing")

        import time

        start_time = time.time()
        ai_response = await openai_client.get_completion(messages)
        processing_time = int((time.time() - start_time) * 1000)

        logger.info(f"ü§ñ OpenAI –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {processing_time}–º—Å")

        tokens_used = 0
        ai_metadata = {}
        response_text = ""

        if not ai_response or not ai_response.strip():
            logger.warning("‚ùå OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!")
            fallback_message = (
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            ai_response = fallback_message
            response_text = fallback_message
            tokens_used = 0
            ai_metadata = {}
        else:
            tokens_used = openai_client.estimate_tokens(ai_response)
            response_text, ai_metadata = parse_ai_response(ai_response)

            if not ai_metadata:
                response_text = ai_response
                ai_metadata = {}
            elif not response_text.strip():
                logger.warning(
                    "‚ö†Ô∏è JSON –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π! –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç."
                )
                response_text = ai_response

            # –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø –∏ –∫–∞—á–µ—Å—Ç–≤–æ
            if ai_metadata:
                stage = ai_metadata.get("—ç—Ç–∞–ø")
                quality = ai_metadata.get("–∫–∞—á–µ—Å—Ç–≤–æ")

                if stage or quality is not None:
                    await supabase_client.update_session_stage(
                        session_id, stage, quality
                    )

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                events = ai_metadata.get("–ø–æ–¥—ñ—ó", [])
                if events:
                    should_send_response = await process_events(
                        session_id, events, message.from_user.id
                    )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await supabase_client.add_message(
            session_id=session_id,
            role="assistant",
            content=response_text,
            message_type="text",
            tokens_used=tokens_used,
            processing_time_ms=processing_time,
            ai_metadata=ai_metadata,
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        final_response = ai_response if config.DEBUG_MODE else response_text

        if not final_response or not final_response.strip():
            final_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        files_list = ai_metadata.get("—Ñ–∞–π–ª—ã", [])
        directories_list = ai_metadata.get("–∫–∞—Ç–∞–ª–æ–≥–∏", [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
        if "should_send_response" in locals() and not should_send_response:
            logger.info(
                "üîá –°–æ–±—ã—Ç–∏—è –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò (voice), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_message(
            message,
            final_response,
            files_list=files_list,
            directories_list=directories_list,
        )
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ process_voice_message: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        try:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start"
            )
        except Exception:
            pass
