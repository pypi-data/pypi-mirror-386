# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π conversation_manager.py –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ GitHub - —Ñ–∏–∫—Å —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

import logging
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, User

from .bot_utils import get_global_var

logger = logging.getLogger(__name__)


class ConversationManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏ –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    def __init__(
        self, supabase_client, admin_manager, parse_mode, admin_session_timeout_minutes
    ):
        self.supabase = supabase_client
        self.admin_manager = admin_manager
        self.parse_mode = parse_mode
        self.admin_session_timeout_minutes = admin_session_timeout_minutes

    async def start_admin_conversation(self, admin_id: int, user_id: int) -> bool:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            from ..utils.debug_routing import debug_admin_conversation_creation

            await debug_admin_conversation_creation(admin_id, user_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω
            if not self.admin_manager.is_admin(admin_id):
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–µ-–∞–¥–º–∏–Ω–æ–º {admin_id}")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_info = await self.supabase.get_active_session(user_id)
            if not session_info:
                logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
                return False

            session_id = session_info["id"]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {session_id}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–∏–∞–ª–æ–≥–µ –≤ –ë–î
            logger.info("üîß –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–∏–∞–ª–æ–≥–µ –≤ –ë–î...")
            conversation_id = await self.supabase.start_admin_conversation(
                admin_id, user_id, session_id
            )
            logger.info(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω —Å ID: {conversation_id}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            await self._show_recent_messages(admin_id, user_id, session_id)

            logger.info(
                f"üéâ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç: –∞–¥–º–∏–Ω {admin_id} -> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            )
            return True

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –∞–¥–º–∏–Ω–∞ {admin_id} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}"
            )
            logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
            return False

    async def _show_recent_messages(self, admin_id: int, user_id: int, session_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from .message_sender import send_message_by_human

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5)
            response = (
                self.supabase.client.table("sales_messages")
                .select("role", "content", "created_at")
                .eq("session_id", session_id)
                .order("created_at", desc=True)
                .limit(5)
                .execute()
            )

            recent_messages = response.data if response.data else []

            if not recent_messages:
                await send_message_by_human(
                    admin_id, "üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_display = await self.get_user_display_name(user_id)

            header = f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å {user_display}\n{'‚îÅ' * 40}"
            await send_message_by_human(admin_id, header)

            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
            for msg in reversed(recent_messages):
                role_emoji = "üë§" if msg["role"] == "user" else "ü§ñ"
                timestamp = datetime.fromisoformat(
                    msg["created_at"].replace("Z", "+00:00")
                )
                time_str = timestamp.strftime("%H:%M")

                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                content = self._truncate_message(msg["content"])

                message_text = f"{role_emoji} {time_str} | {content}"

                await send_message_by_human(admin_id, message_text)

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            await send_message_by_human(
                admin_id,
                f"{'‚îÅ' * 40}\nüí¨ –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç. –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def get_user_display_name(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username"""
        try:
            response = (
                self.supabase.client.table("sales_users")
                .select("first_name", "last_name", "username")
                .eq("telegram_id", user_id)
                .execute()
            )

            if response.data:
                user_info = response.data[0]
                name_parts = []
                if user_info.get("first_name"):
                    name_parts.append(user_info["first_name"])
                if user_info.get("last_name"):
                    name_parts.append(user_info["last_name"])

                name = " ".join(name_parts) if name_parts else ""

                if user_info.get("username"):
                    if name:
                        return f"{name} (@{user_info['username']})"
                    else:
                        return f"@{user_info['username']}"
                elif name:
                    return name
                else:
                    return f"ID {user_id}"
            else:
                return f"ID {user_id}"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            return f"ID {user_id}"

    def _truncate_message(self, text: str, max_lines: int = 6) -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not text:
            return ""

        lines = text.split("\n")

        if len(lines) <= max_lines:
            return text

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏
        first_lines = lines[:3]
        last_lines = lines[-3:]

        truncated = "\n".join(first_lines) + "\n...\n" + "\n".join(last_lines)
        return truncated

    async def end_admin_conversation(self, admin_id: int) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∞"""
        try:
            await self.supabase.end_admin_conversations(admin_id)
            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∞ {admin_id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            return False

    async def is_user_in_admin_chat(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–µ–¥–µ—Ç—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

            conversation = await self.supabase.get_user_admin_conversation(user_id)

            if conversation:
                logger.debug(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥: –∞–¥–º–∏–Ω {conversation['admin_id']}, ID: {conversation['id']}"
                )
            else:
                logger.debug(f"‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            return conversation

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None

    async def get_admin_active_conversation(
        self, admin_id: int
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∞"""
        try:
            return await self.supabase.get_admin_active_conversation(admin_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            return None

    async def forward_message_to_admin(
        self, message: Message, conversation: Dict[str, Any]
    ):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω—É"""
        from .message_sender import send_message_by_human

        admin_id = conversation["admin_id"]
        user_id = message.from_user.id

        logger.info(f"üì§ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –∞–¥–º–∏–Ω—É {admin_id}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        user_info = self._format_user_info(message.from_user)

        # –í—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
        try:
            start_time = datetime.fromisoformat(
                conversation["started_at"].replace("Z", "+00:00")
            )
            duration = datetime.now(start_time.tzinfo) - start_time
            minutes = int(duration.total_seconds() / 60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            minutes = 0

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        safe_user_info = self._escape_markdown(user_info)
        safe_message_text = self._escape_markdown(message.text or "")

        header = f"üë§ {safe_user_info} | ‚è±Ô∏è {minutes} –º–∏–Ω"
        separator = "‚îÅ" * 20

        full_message = f"{header}\n{separator}\n{safe_message_text}"

        try:
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º parse_mode='Markdown' —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await send_message_by_human(admin_id, full_message)

            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await self._send_admin_controls(admin_id, user_id)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: Fallback –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                simple_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{message.text}"
                await send_message_by_human(admin_id, simple_message)
                logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e2:
                logger.error(f"‚ùå –î–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å: {e2}")
                raise

    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
        if not text:
            return ""

        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown
        markdown_chars = [
            "*",
            "_",
            "`",
            "[",
            "]",
            "(",
            ")",
            "~",
            ">",
            "#",
            "+",
            "-",
            "=",
            "|",
            "{",
            "}",
            ".",
            "!",
        ]

        escaped_text = text
        for char in markdown_chars:
            escaped_text = escaped_text.replace(char, f"\\{char}")

        return escaped_text

    async def forward_message_to_user(
        self, message: Message, conversation: Dict[str, Any]
    ):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        from .message_sender import send_message_by_human

        supabase_client = get_global_var("supabase_client")

        user_id = conversation["user_id"]

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç –±–æ—Ç–∞
            parse_mode = self.parse_mode if self.parse_mode != "None" else None
            await send_message_by_human(user_id, message.text, parse_mode=parse_mode)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            session_info = await supabase_client.get_active_session(user_id)
            if session_info:
                await supabase_client.add_message(
                    session_id=session_info["id"],
                    role="assistant",
                    content=message.text,
                    message_type="text",
                    metadata={"from_admin": message.from_user.id},
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _send_admin_controls(self, admin_id: int, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º"""
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        from .message_sender import send_message_by_human

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"admin_history_{user_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"admin_end_{user_id}"
                    ),
                ]
            ]
        )

        try:
            await send_message_by_human(
                admin_id, "üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–º:", reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    def _format_user_info(self, user: User) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        name_parts = []
        if user.first_name:
            name_parts.append(user.first_name)
        if user.last_name:
            name_parts.append(user.last_name)

        name = " ".join(name_parts) if name_parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"

        if user.username:
            return f"{name} (@{user.username})"
        else:
            return f"{name} (ID: {user.id})"

    async def cleanup_expired_conversations(self):
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏"""
        try:
            ended_count = await self.supabase.end_expired_conversations()
            if ended_count > 0:
                logger.info(f"–û—á–∏—â–µ–Ω–æ {ended_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
            return ended_count

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return 0

    async def get_conversation_stats(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                "active_conversations": 0,
                "completed_today": 0,
                "total_admin_messages": 0,
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return {}

    async def get_active_conversations(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∞–¥–º–∏–Ω–æ–≤"""
        try:
            logger.info("üîç –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∞–¥–º–∏–Ω–æ–≤...")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            response = (
                self.supabase.client.table("admin_user_conversations")
                .select("id", "admin_id", "user_id", "started_at", "auto_end_at")
                .eq("status", "active")
                .order("started_at", desc=True)
                .execute()
            )

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ë–î")

            conversations = []
            for conv in response.data:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    user_response = (
                        self.supabase.client.table("sales_users")
                        .select("first_name", "last_name", "username")
                        .eq("telegram_id", conv["user_id"])
                        .execute()
                    )

                    user_info = user_response.data[0] if user_response.data else {}
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {conv['user_id']}: {e}"
                    )
                    user_info = {}

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ
                try:
                    admin_response = (
                        self.supabase.client.table("sales_admins")
                        .select("first_name", "last_name", "username")
                        .eq("telegram_id", conv["admin_id"])
                        .execute()
                    )

                    admin_info = admin_response.data[0] if admin_response.data else {}
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞ {conv['admin_id']}: {e}"
                    )
                    admin_info = {}

                conv["user_info"] = user_info
                conv["admin_info"] = admin_info
                conversations.append(conv)

            logger.info(
                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(conversations)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"
            )
            return conversations

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return []

    def format_active_conversations(self, conversations: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù –†–ê–°–ß–ï–¢ –í–†–ï–ú–ï–ù–ò –ê–í–¢–û–ó–ê–í–ï–†–®–ï–ù–ò–Ø"""
        if not conversations:
            return "üí¨ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"

        lines = ["üí¨ –ê–ö–¢–ò–í–ù–´–ï –î–ò–ê–õ–û–ì–ò:", ""]

        for i, conv in enumerate(conversations, 1):
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = conv.get("user_info", {})
            user_name = []
            if user_info.get("first_name"):
                user_name.append(user_info["first_name"])
            if user_info.get("last_name"):
                user_name.append(user_info["last_name"])

            user_display = " ".join(user_name) if user_name else f"ID {conv['user_id']}"
            if user_info.get("username"):
                user_display += f" (@{user_info['username']})"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–µ
            admin_info = conv.get("admin_info", {})
            admin_name = []
            if admin_info.get("first_name"):
                admin_name.append(admin_info["first_name"])
            if admin_info.get("last_name"):
                admin_name.append(admin_info["last_name"])

            admin_display = (
                " ".join(admin_name) if admin_name else f"ID {conv['admin_id']}"
            )

            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º timezone
            try:
                started_at_str = conv["started_at"]
                logger.debug(f"üïê –î–∏–∞–ª–æ–≥ {i}: started_at = '{started_at_str}'")

                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π timezone
                if started_at_str.endswith("Z"):
                    start_time = datetime.fromisoformat(
                        started_at_str.replace("Z", "+00:00")
                    )
                elif "+" in started_at_str or started_at_str.count(":") >= 3:
                    # –£–∂–µ –µ—Å—Ç—å timezone info
                    start_time = datetime.fromisoformat(started_at_str)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç timezone info, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
                    naive_time = datetime.fromisoformat(started_at_str)
                    start_time = naive_time.replace(tzinfo=timezone.utc)

                logger.debug(f"‚úÖ –ü–∞—Ä—Å–µ–¥ start_time: {start_time}")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
                now_utc = datetime.now(timezone.utc)
                logger.debug(f"üïê now_utc: {now_utc}")

                # –ü—Ä–∏–≤–æ–¥–∏–º start_time –∫ UTC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if start_time.tzinfo != timezone.utc:
                    start_time_utc = start_time.astimezone(timezone.utc)
                else:
                    start_time_utc = start_time

                # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
                duration = now_utc - start_time_utc
                minutes = max(0, int(duration.total_seconds() / 60))
                logger.debug(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω—É—Ç")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–∏–∞–ª–æ–≥–∞ {i}: {e}")
                logger.error(f"   started_at_str: '{started_at_str}'")
                minutes = 0

            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π timezone
            try:
                auto_end_str = conv["auto_end_at"]
                logger.debug(f"üïê –î–∏–∞–ª–æ–≥ {i}: auto_end_at = '{auto_end_str}'")

                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π timezone
                if auto_end_str.endswith("Z"):
                    auto_end = datetime.fromisoformat(
                        auto_end_str.replace("Z", "+00:00")
                    )
                elif "+" in auto_end_str or auto_end_str.count(":") >= 3:
                    # –£–∂–µ –µ—Å—Ç—å timezone info
                    auto_end = datetime.fromisoformat(auto_end_str)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç timezone info, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
                    naive_time = datetime.fromisoformat(auto_end_str)
                    auto_end = naive_time.replace(tzinfo=timezone.utc)

                logger.debug(f"‚úÖ –ü–∞—Ä—Å–µ–¥ auto_end: {auto_end}")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
                now_utc = datetime.now(timezone.utc)
                logger.debug(f"üïê now_utc –¥–ª—è auto_end: {now_utc}")

                # –ü—Ä–∏–≤–æ–¥–∏–º auto_end –∫ UTC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if auto_end.tzinfo != timezone.utc:
                    auto_end_utc = auto_end.astimezone(timezone.utc)
                else:
                    auto_end_utc = auto_end

                # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                remaining = auto_end_utc - now_utc
                remaining_minutes = max(0, int(remaining.total_seconds() / 60))
                logger.debug(f"‚è∞ Remaining: {remaining_minutes} –º–∏–Ω—É—Ç")

                # üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤—ã—á–∏—Å–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                if start_time.tzinfo != timezone.utc:
                    start_time_utc = start_time.astimezone(timezone.utc)
                else:
                    start_time_utc = start_time

                planned_duration = auto_end_utc - start_time_utc
                planned_minutes = int(planned_duration.total_seconds() / 60)
                logger.debug(f"üìè –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {planned_minutes} –º–∏–Ω—É—Ç")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                expected_timeout = self.admin_session_timeout_minutes

                logger.debug(f"üïê expected_timeout: {expected_timeout}")

                if (
                    abs(planned_minutes - expected_timeout) > 2
                ):  # –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 2 –º–∏–Ω—É—Ç—ã
                    logger.warning(
                        f"‚ö†Ô∏è –î–∏–∞–ª–æ–≥ {i}: –ø–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {planned_minutes} –º–∏–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É {expected_timeout} –º–∏–Ω"
                    )

            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ {i}: {e}"
                )
                logger.error(f"   auto_end_str: '{auto_end_str}'")
                remaining_minutes = 0

            lines.append(f"{i}. üë§ {user_display}")
            lines.append(f"   üëë –ê–¥–º–∏–Ω: {admin_display}")
            lines.append(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω")
            lines.append(f"   ‚è∞ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {remaining_minutes} –º–∏–Ω")
            lines.append(f"   üéõÔ∏è /—á–∞—Ç {conv['user_id']}")
            lines.append("")

        return "\n".join(lines)

    async def route_admin_message(self, message: Message, state: FSMContext) -> bool:
        """
        –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–æ–µ
        """
        admin_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if message.text and message.text.startswith("/"):
            return False  # –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ–¥–µ—Ç—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        conversation = await self.get_admin_active_conversation(admin_id)

        if conversation:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.forward_message_to_user(message, conversation)
            return True

        return False
