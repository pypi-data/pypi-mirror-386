Metadata-Version: 2.4
Name: smart-bot-factory
Version: 0.3.9
Summary: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤
Author-email: Kopatych <eserov73@gmail.com>
License: MIT
License-File: LICENSE
Keywords: chatbot,cli,openai,supabase,telegram
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Framework :: AsyncIO
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Communications :: Chat
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.9
Requires-Dist: aiofiles>=23.0.0
Requires-Dist: aiogram-media-group>=0.5.1
Requires-Dist: aiogram>=3.4.1
Requires-Dist: click>=8.0.0
Requires-Dist: openai>=1.12.0
Requires-Dist: project-root-finder>=1.9
Requires-Dist: python-dateutil>=2.9.0.post0
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: pytz>=2023.3
Requires-Dist: pyyaml>=6.0.2
Requires-Dist: supabase>=2.3.4
Description-Content-Type: text/markdown

# Smart Bot Factory

## –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö Telegram –±–æ—Ç–æ–≤ —Å AI, –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –≥–∏–±–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

- [–£—Å—Ç–∞–Ω–æ–≤–∫–∞](#-—É—Å—Ç–∞–Ω–æ–≤–∫–∞)
- [–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç](#-–±—ã—Å—Ç—Ä—ã–π-—Å—Ç–∞—Ä—Ç)
- [CLI –ö–æ–º–∞–Ω–¥—ã](#-cli-–∫–æ–º–∞–Ω–¥—ã)
- [–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã](#-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã)
  - [event_handler](#event_handler---–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏-—Å–æ–±—ã—Ç–∏–π)
  - [schedule_task](#schedule_task---–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ-–∑–∞–¥–∞—á–∏)
  - [global_handler](#global_handler---–≥–ª–æ–±–∞–ª—å–Ω—ã–µ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
- [Dashboard Info](#-dashboard-info---–æ—Ç–ø—Ä–∞–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö-–≤-–¥–∞—à–±–æ—Ä–¥)
- [–•—É–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏](#-—Ö—É–∫–∏-–¥–ª—è-–∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏)
- [Telegram —Ä–æ—É—Ç–µ—Ä—ã](#-telegram-—Ä–æ—É—Ç–µ—Ä—ã)
- [–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏](#-—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)

---

## üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
pip install smart_bot_factory
```

## ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ CLI

```bash
# –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
sbf create my-bot

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å .env —Ñ–∞–π–ª
sbf config my-bot

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
sbf run my-bot
```

### 2. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞

```python
"""my-bot.py"""
import asyncio
from smart_bot_factory.router import EventRouter
from smart_bot_factory.message import send_message_by_human
from smart_bot_factory.creation import BotBuilder

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
event_router = EventRouter("my-bot")
bot_builder = BotBuilder("my-bot")

@event_router.event_handler("collect_phone", once_only=True)
async def handle_phone(user_id: int, phone: str):
    """–ò–ò —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "collect_phone", "–∏–Ω—Ñ–æ": "+79001234567"}"""
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω {phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
    )
    return {"status": "success"}

async def main():
    bot_builder.register_routers(event_router)
    await bot_builder.build()
    await bot_builder.start()

if __name__ == "__main__":
    asyncio.run(main())
```

---

## üéÆ CLI –ö–æ–º–∞–Ω–¥—ã

### –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞

```bash
# –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
sbf create my-bot

# –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
sbf copy best-valera new-valera

```

**üí° –ö–æ–º–∞–Ω–¥–∞ `copy` - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ:**

- ‚úÖ –ö–æ–ø–∏—Ä—É–µ—Ç –∫–æ–¥ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π `bot_id`
- ‚úÖ –ö–æ–ø–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã
- ‚úÖ –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –∏ —Ñ–∞–π–ª—ã
- ‚úÖ –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π `.env` (–Ω–µ –∫–æ–ø–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã)

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏

```bash
# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
sbf list

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
sbf run my-bot

# –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞
sbf rm my-bot

# –£–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
sbf rm my-bot --force
```

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞

```bash
# –û—Ç–∫—Ä—ã—Ç—å .env —Ñ–∞–π–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
sbf config my-bot

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
sbf prompts my-bot                    # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
sbf prompts my-bot --edit system      # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç
sbf prompts my-bot --add custom       # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
sbf test my-bot

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
sbf test my-bot --file test_booking.yaml

# –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
sbf test my-bot -v
```

### –£—Ç–∏–ª–∏—Ç—ã

```bash
# –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sbf path

# –°–æ–∑–¥–∞—Ç—å UTM —Å—Å—ã–ª–∫—É
sbf link
```

---

## üì¶ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã

### `event_handler` - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç –ò–ò –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–∫–∞–∫ —Ç–æ–ª—å–∫–æ –ò–ò —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ).

**–°–∏–≥–Ω–∞—Ç—É—Ä–∞:**

```python
@event_router.event_handler(
    event_type: str,                # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
    notify: bool = False,           # –£–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤
    once_only: bool = True,         # –í—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
    send_ai_response: bool = True   # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
)
async def handler(user_id: int, event_data: str):
    # –í–∞—à –∫–æ–¥
    return {"status": "success"}
```

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**

- **`event_type`** (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π) - –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è
- **`notify`** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `False`) - –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- **`once_only`** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `True`) - –ï—Å–ª–∏ `True`, —Å–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- **`send_ai_response`** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `True`) - –ï—Å–ª–∏ `False`, –ò–ò –ù–ï –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**

1. –ò–ò —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ JSON: `{"—Ç–∏–ø": "collect_phone", "–∏–Ω—Ñ–æ": "+79001234567"}`
2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è **–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ**
3. –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º `completed`
4. –ï—Å–ª–∏ `once_only=True` - –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è

**–ü—Ä–∏–º–µ—Ä—ã:**

```python
# –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
@event_router.event_handler("collect_phone")
async def save_phone(user_id: int, phone_number: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞"""
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
    )
    return {"status": "success", "phone": phone_number}

# –° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–æ–≤
@event_router.event_handler("new_lead", notify=True, once_only=True)
async def process_lead(user_id: int, lead_info: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞"""
    # –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    return {"status": "lead_created", "info": lead_info}

# –ú–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
@event_router.event_handler("ask_question", once_only=False)
async def handle_question(user_id: int, question: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ)"""
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    return {"status": "answered"}

# –ë–ï–ó –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
@event_router.event_handler("silent_event", send_ai_response=False)
async def handle_silent(user_id: int, event_data: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –ë–ï–ó –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    await send_message_by_human(user_id, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    return {"status": "saved"}
```

---

### `schedule_task` - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.

**–°–∏–≥–Ω–∞—Ç—É—Ä–∞:**

```python
@event_router.schedule_task(
    task_name: str,                     # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    delay: Union[str, int],             # –ó–∞–¥–µ—Ä–∂–∫–∞: "1h 30m" –∏–ª–∏ —Å–µ–∫—É–Ω–¥—ã
    notify: bool = False,               # –£–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤
    smart_check: bool = True,           # –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    once_only: bool = True,             # –í—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
    event_type: Union[str, Callable] = None,  # –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
    send_ai_response: bool = True       # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
)
async def handler(user_id: int, user_data: str):
    # –í–∞—à –∫–æ–¥
    return {"status": "sent"}
```

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**

- **`task_name`** (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π) - –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∑–∞–¥–∞—á–∏
- **`delay`** (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π) - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
  - –°—Ç—Ä–æ–∫–∞: `"1h 30m"`, `"2h"`, `"45m"`, `"30s"`
  - –ß–∏—Å–ª–æ: `3600` (—Å–µ–∫—É–Ω–¥—ã)
- **`notify`** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `False`) - –£–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤
- **`smart_check`** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `True`) - –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:
  - –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –Ω–æ–≤—ã–π —ç—Ç–∞–ø
  - –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
- **`once_only`** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `True`) - –í—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- **`event_type`** (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) - –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è:
  - **–°—Ç—Ä–æ–∫–∞**: `"appointment_booking"` - –∏—â–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è
  - **–§—É–Ω–∫—Ü–∏—è**: `async def(user_id, user_data) -> datetime` - –∫–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞
- **`send_ai_response`** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `True`) - –ï—Å–ª–∏ `False`, –ò–ò –ù–ï –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

**–§–æ—Ä–º—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å `event_type`:**

```text
reminder_time = event_datetime - delay
```

**–ü—Ä–∏–º–µ—Ä—ã:**

```python
# –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
@event_router.schedule_task("follow_up", delay="24h")
async def send_follow_up(user_id: int, reminder_text: str):
    """
    –ò–ò —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "follow_up", "–∏–Ω—Ñ–æ": "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –∑–∞–ø–∏—Å—å"}
    –í—ã–ø–æ–ª–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    """
    await send_message_by_human(
        user_id=user_id,
        message_text=f"üëã {reminder_text}"
    )
    return {"status": "sent"}

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î
@event_router.schedule_task(
    "booking_reminder",
    delay="2h",  # –ó–∞ 2 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏
    event_type="appointment_booking"  # –ò—â–µ—Ç –≤ –ë–î —Å–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ "appointment_booking"
)
async def remind_booking(user_id: int, user_data: str):
    """
    –ò–ò —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ: {"—Ç–∏–ø": "appointment_booking", "–∏–Ω—Ñ–æ": "–¥–∞—Ç–∞: 2025-10-15, –≤—Ä–µ–º—è: 19:00"}
    –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "booking_reminder", "–∏–Ω—Ñ–æ": ""}
    
    –õ–æ–≥–∏–∫–∞:
    1. –ù–∞—Ö–æ–¥–∏—Ç –≤ –ë–î –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ "appointment_booking" –¥–ª—è user_id
    2. –ü–∞—Ä—Å–∏—Ç –∏–∑ –Ω–µ–≥–æ datetime: 2025-10-15 19:00
    3. –í—ã—á–∏—Å–ª—è–µ—Ç: reminder_time = 19:00 - 2h = 17:00
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 17:00
    """
    await send_message_by_human(
        user_id=user_id,
        message_text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!"
    )
    return {"status": "sent"}

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
async def get_booking_from_api(user_id: int, user_data: str) -> datetime:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
    from yclients_api import get_next_booking
    booking = await get_next_booking(user_id)
    return booking['datetime']  # datetime –æ–±—ä–µ–∫—Ç

@event_router.schedule_task(
    "api_reminder",
    delay="1h",
    event_type=get_booking_from_api  # –§—É–Ω–∫—Ü–∏—è –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
)
async def send_api_reminder(user_id: int, user_data: str):
    """
    –ò–ò —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "api_reminder", "–∏–Ω—Ñ–æ": ""}
    
    –õ–æ–≥–∏–∫–∞:
    1. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è get_booking_from_api(user_id, "")
    2. –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –∏–∑ API
    3. –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è: reminder_time = api_datetime - 1h
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    await send_message_by_human(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ API!")
    return {"status": "sent"}

# –ë–µ–∑ smart_check (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)
@event_router.schedule_task("important_reminder", delay="12h", smart_check=False)
async def important_reminder(user_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω"""
    await send_message_by_human(user_id, f"üîî {text}")
    return {"status": "sent"}
```

---

### `global_handler` - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

**–°–∏–≥–Ω–∞—Ç—É—Ä–∞:**

```python
@event_router.global_handler(
    handler_type: str,                  # –¢–∏–ø –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    delay: Union[str, int],             # –ó–∞–¥–µ—Ä–∂–∫–∞
    notify: bool = False,               # –£–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤
    once_only: bool = True,             # –í—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
    event_type: Union[str, Callable] = None,  # –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
    send_ai_response: bool = True       # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
)
async def handler(handler_data: str):
    # –í–∞—à –∫–æ–¥
    return {"status": "sent"}
```

**–û—Ç–ª–∏—á–∏—è –æ—Ç `schedule_task`:**

- **–ù–µ—Ç `user_id`** - —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ
- **–ù–µ—Ç `smart_check`** - –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –û–¥–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ = –æ–¥–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º

**–ü—Ä–∏–º–µ—Ä—ã:**

```python
# –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
@event_router.global_handler("promo_announcement", delay="2h", notify=True)
async def send_promo(announcement_text: str):
    """
    –ò–ò —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "promo_announcement", "–∏–Ω—Ñ–æ": "–°–∫–∏–¥–∫–∞ 20%!"}
    –û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–º —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
    """
    await send_message_to_users_by_stage(
        stage="all",
        message_text=f"üéâ {announcement_text}",
        bot_id="my-bot"
    )
    return {"status": "sent", "recipients": "all"}

# –° –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏
async def get_promo_end_time(handler_data: str) -> datetime:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –∏–∑ CRM"""
    from crm_api import get_active_promo
    promo = await get_active_promo()
    return promo['end_datetime']

@event_router.global_handler(
    "promo_ending_notification",
    delay="2h",
    event_type=get_promo_end_time
)
async def notify_promo_ending(handler_data: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏"""
    await send_message_to_users_by_stage(
        stage="all",
        message_text="‚è∞ –ê–∫—Ü–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!",
        bot_id="my-bot"
    )
    return {"status": "sent"}
```

---

## üìä Dashboard Info - –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—à–±–æ—Ä–¥

**–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –¥–∞—à–±–æ—Ä–¥ (—Ç–∞–±–ª–∏—Ü–∞ `scheduled_events`, —Å—Ç–æ–ª–±–µ—Ü `info_dashboard`) –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

### –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç

1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–ª–µ–º `'info'`
2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —ç—Ç–æ –ø–æ–ª–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ `info_dashboard` —Ç–∞–±–ª–∏—Ü—ã
3. –§—É–Ω–∫—Ü–∏—è `prepare_dashboard_info` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   - –ü–æ–ª—É—á–∞–µ—Ç `username` –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `sales_users`
   - –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
   - –î–æ–±–∞–≤–ª—è–µ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)

### –°–∏–≥–Ω–∞—Ç—É—Ä–∞

```python
from smart_bot_factory.dashboard import prepare_dashboard_info

dashboard_data = await prepare_dashboard_info(
    description_template: str,  # –°—Ç—Ä–æ–∫–∞ —Å {username}, –Ω–∞–ø—Ä–∏–º–µ—Ä "{username} –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É"
    title: str,                 # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    user_id: int                # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
)
```

**–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**

```python
{
    'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
    'description': '@username123 –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É',  # –° –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ username
    'created_at': '2025-10-18T15:30:45.123456+03:00'  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
}
```

### –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

#### –° event_handler

```python
from smart_bot_factory.dashboard import prepare_dashboard_info

@event_router.event_handler("collect_phone", notify=True, once_only=True)
async def handle_phone_collection(user_id: int, phone_number: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞"""
    
    # –í–∞—à–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
    session = await supabase_client.get_active_session(user_id)
    if session:
        metadata = session.get('metadata', {})
        metadata['phone'] = phone_number
        await supabase_client.update_session_metadata(session['id'], metadata)
    
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
    )
    
    # üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –° –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    return {
        "status": "success",
        "phone": phone_number,
        "info": await prepare_dashboard_info(
            description_template="{username} –æ—Å—Ç–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            title="–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
            user_id=user_id
        )
    }
```

#### –° schedule_task

```python
@event_router.schedule_task("follow_up", delay="24h", smart_check=True)
async def send_follow_up(user_id: int, reminder_text: str):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"""
    
    await send_message_by_human(
        user_id=user_id,
        message_text=f"üëã {reminder_text}"
    )
    
    # üìä –†–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è –∑–∞–¥–∞—á!
    return {
        "status": "sent",
        "type": "follow_up",
        "info": await prepare_dashboard_info(
            description_template="{username} –ø–æ–ª—É—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            user_id=user_id
        )
    }
```

#### –ë–ï–ó –¥–∞—à–±–æ—Ä–¥–∞

–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¥–∞—à–±–æ—Ä–¥ - –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–ª–µ `'info'`:

```python
@event_router.event_handler("collect_name", once_only=False)
async def handle_name_collection(user_id: int, client_name: str):
    """–ë–ï–ó –¥–∞—à–±–æ—Ä–¥–∞ - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è"""
    
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –∏–º—è {client_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ë–ï–ó –ø–æ–ª—è 'info' - –¥–∞—à–±–æ—Ä–¥ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
    return {"status": "success"}
```

### –ß—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ë–î

**–°–æ–±—ã—Ç–∏—è –° –¥–∞—à–±–æ—Ä–¥–æ–º:**

```sql
SELECT * FROM scheduled_events WHERE id = '123';

id: 123
event_type: collect_phone
event_category: user_event
user_id: 12345
status: completed
result_data: {"status": "success", "phone": "+79001234567", "info": {...}}
info_dashboard: {
  "title": "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
  "description": "@username123 –æ—Å—Ç–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
  "created_at": "2025-10-18T15:30:45+03:00"
}
```

**–°–æ–±—ã—Ç–∏—è –ë–ï–ó –¥–∞—à–±–æ—Ä–¥–∞:**

```sql
SELECT * FROM scheduled_events WHERE id = '124';

id: 124
event_type: collect_name
event_category: user_event
user_id: 12345
status: completed
result_data: {"status": "success"}
info_dashboard: NULL  ‚Üê –û—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
```

### –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫

–§—É–Ω–∫—Ü–∏—è `prepare_dashboard_info` –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É `{username}`:

```python
# –ü—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤:
"{username} –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –≥–æ–¥"
"{username} –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç"
"{username} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
"{username} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–µ"
"{username} –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É"

# –ü–æ—Å–ª–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏:
"@user123 –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –≥–æ–¥"
"@ivan_petrov –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç"
```

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ `sales_users` - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback: `user_12345`

---

## üé£ –•—É–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏

–•—É–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–Ω–µ–¥—Ä—è—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–∏.

### –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—É–∫–∏

```python
bot_builder = BotBuilder("my-bot")

# 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI)
@bot_builder.validate_message
async def check_spam(message_text: str, message_obj):
    if "—Å–ø–∞–º" in message_text.lower():
        await message_obj.answer("‚õî –°–ø–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω")
        return False  # –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    return True  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å

# 2. –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
@bot_builder.enrich_prompt
async def add_client_info(system_prompt: str, user_id: int):
    session = await supabase_client.get_active_session(user_id)
    phone = session.get('metadata', {}).get('phone')
    
    if phone:
        return f"{system_prompt}\n\n–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone}"
    return system_prompt

# 3. –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
@bot_builder.enrich_context
async def add_external_data(messages: list):
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
    messages.append({
        "role": "system",
        "content": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ CRM..."
    })
    return messages

# 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI
@bot_builder.process_response
async def modify_response(response_text: str, ai_metadata: dict, user_id: int):
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if "—Ü–µ–Ω–∞" in response_text.lower():
        response_text += "\n\nüí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ"
    return response_text, ai_metadata

# 5. –§–∏–ª—å—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
@bot_builder.filter_send
async def block_during_booking(user_id: int):
    if is_processing_booking(user_id):
        return True  # –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
    return False  # –†–∞–∑—Ä–µ—à–∏—Ç—å

# 6. –ö–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ /start
@bot_builder.on_start
async def custom_start(user_id: int, session_id: str, message, state):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ü–û–°–õ–ï —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ /start"""
    keyboard = InlineKeyboardMarkup(...)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
```

---

## üì± Telegram —Ä–æ—É—Ç–µ—Ä—ã

–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ —á–∏—Å—Ç—ã–µ `aiogram.Router` –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, callback'–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.

### –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞

```python
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

# –°–æ–∑–¥–∞–µ–º aiogram Router
telegram_router = Router(name="my_commands")

@telegram_router.message(Command("price", "—Ü–µ–Ω–∞"))
async def price_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /price"""
    await message.answer(
        "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n"
        "‚Ä¢ –£—Å–ª—É–≥–∞ 1 - 1000‚ÇΩ\n"
        "‚Ä¢ –£—Å–ª—É–≥–∞ 2 - 2000‚ÇΩ"
    )

@telegram_router.message(Command("catalog"))
async def catalog_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /catalog —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ê–∫—Ü–∏–∏", callback_data="promo")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)

@telegram_router.callback_query(F.data == "book")
async def handle_booking(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer("–ó–∞–ø–∏—Å—ã–≤–∞—é...")
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É")

@telegram_router.message(F.text.lower().contains("–ø–æ–º–æ—â—å"))
async def help_handler(message: Message):
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–ª–æ–≤–æ '–ø–æ–º–æ—â—å'"""
    await message.answer("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ
bot_builder.register_telegram_router(telegram_router)
```

### –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

```python
commands_router = Router(name="commands")
callbacks_router = Router(name="callbacks")
filters_router = Router(name="filters")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å—Ä–∞–∑—É
bot_builder.register_telegram_routers(
    commands_router,
    callbacks_router,
    filters_router
)
```

**‚ö†Ô∏è –í–∞–∂–Ω–æ:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è **–ü–ï–†–í–´–ú–ò** (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç), –ø–æ—ç—Ç–æ–º—É –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ä–∞–Ω—å—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö.

---

## üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### –ö–∞—Å—Ç–æ–º–Ω—ã–π PromptLoader

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø—É—Ç–∏:

```python
from smart_bot_factory.utils import UserPromptLoader

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç bots/my-bot/prompts
custom_loader = UserPromptLoader("my-bot")

# –ò–ª–∏ –Ω–∞—Å–ª–µ–¥—É–π—Ç–µ—Å—å –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
class MyPromptLoader(UserPromptLoader):
    def __init__(self, bot_id):
        super().__init__(bot_id)
        self.extra_file = self.prompts_dir / 'extra.txt'

my_loader = MyPromptLoader("my-bot")

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –î–û build()
bot_builder.set_prompt_loader(my_loader)
```

### –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π

–ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é `process_events`:

```python
from smart_bot_factory.message import get_bot
from smart_bot_factory.core.decorators import execute_event_handler

async def my_process_events(session_id, events, user_id):
    """–ú–æ—è –∫–∞—Å—Ç–æ–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    bot = get_bot()
    
    for event in events:
        event_type = event.get('—Ç–∏–ø')
        
        if event_type == 'booking':
            # –í–∞—à–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞
            telegram_user = await bot.get_chat(user_id)
            name = telegram_user.first_name
            # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            await execute_event_handler(event_type, user_id, event.get('–∏–Ω—Ñ–æ'))

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –î–û build()
bot_builder.set_event_processor(my_process_events)
```

### –î–æ—Å—Ç—É–ø –∫ aiogram Bot

–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ `aiogram.Bot`:

```python
from smart_bot_factory.message import get_bot

@event_router.event_handler("check_user")
async def get_user_info(user_id: int, event_data: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Telegram"""
    bot = get_bot()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±—ã–µ –º–µ—Ç–æ–¥—ã aiogram Bot
    telegram_user = await bot.get_chat(user_id)
    name = telegram_user.first_name
    username = telegram_user.username
    
    await bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç, {name}!")
    return {"name": name, "username": username}
```

### –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏

```python
from smart_bot_factory.message import send_message

@event_router.event_handler("send_catalog")
async def send_catalog(user_id: int, event_data: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Å —Ñ–∞–π–ª–∞–º–∏"""
    from smart_bot_factory.message import get_bot
from smart_bot_factory.supabase import SupabaseClient

    bot = get_bot()
    supabase_client = SupabaseClient("my-bot")
    
    # –ü–æ–ª—É—á–∞–µ–º message –æ–±—ä–µ–∫—Ç (–¥–ª—è –æ—Ç–≤–µ—Ç–∞)
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ message –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    await send_message(
        message=message,  # aiogram Message –æ–±—ä–µ–∫—Ç
        text="üìÅ –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥:",
        supabase_client=supabase_client,
        files_list=["catalog.pdf", "price_list.pdf"],
        parse_mode="Markdown"
    )
    
    return {"status": "sent"}
```

---

## üìö –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä

```python
"""advanced-bot.py - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä"""

import asyncio
from datetime import datetime, timedelta

from smart_bot_factory.router import EventRouter
from smart_bot_factory.message import send_message_by_human, get_bot
from smart_bot_factory.creation import BotBuilder
from smart_bot_factory.supabase import SupabaseClient

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
event_router = EventRouter("advanced-bot")
telegram_router = Router(name="commands")
bot_builder = BotBuilder("advanced-bot")
supabase_client = SupabaseClient("advanced-bot")

# ========== –°–û–ë–´–¢–ò–Ø ==========

@event_router.event_handler("collect_phone", notify=True, once_only=True)
async def save_phone(user_id: int, phone: str):
    session = await supabase_client.get_active_session(user_id)
    if session:
        metadata = session.get('metadata', {})
        metadata['phone'] = phone
        await supabase_client.update_session_metadata(session['id'], metadata)
    
    await send_message_by_human(user_id, f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω {phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    return {"status": "success"}

# ========== –ó–ê–î–ê–ß–ò ==========

async def get_appointment_time(user_id: int, user_data: str) -> datetime:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∏–∑ YClients API"""
    # –í–∞—à–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YClients
    return datetime.now() + timedelta(hours=24)

@event_router.schedule_task(
    "appointment_reminder",
    delay="2h",
    event_type=get_appointment_time,
    smart_check=False
)
async def remind_appointment(user_id: int, user_data: str):
    await send_message_by_human(user_id, "‚è∞ –ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!")
    return {"status": "sent"}

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï ==========

@event_router.global_handler("daily_promo", delay="24h", once_only=False)
async def daily_promo(text: str):
    await send_message_to_users_by_stage(
        stage="all",
        message_text=f"üéâ {text}",
        bot_id="advanced-bot"
    )
    return {"status": "sent"}

# ========== TELEGRAM –ö–û–ú–ê–ù–î–´ ==========

@telegram_router.message(Command("price"))
async def price_cmd(message: Message):
    await message.answer("üí∞ –¶–µ–Ω—ã: ...")

@telegram_router.callback_query(F.data == "book")
async def booking_callback(callback):
    await callback.answer("–ó–∞–ø–∏—Å—ã–≤–∞—é...")

# ========== –•–£–ö–ò ==========

@bot_builder.validate_message
async def check_business_hours(message_text: str, message_obj):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
    hour = datetime.now().hour
    if hour < 9 or hour > 21:
        await message_obj.answer("–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 21:00")
        return False
    return True

@bot_builder.enrich_prompt
async def add_client_data(system_prompt: str, user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø—Ä–æ–º–ø—Ç"""
    session = await supabase_client.get_active_session(user_id)
    phone = session.get('metadata', {}).get('phone')
    
    if phone:
        return f"{system_prompt}\n\n–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone}"
    return system_prompt

# ========== –ó–ê–ü–£–°–ö ==========

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    bot_builder.register_routers(event_router)
    bot_builder.register_telegram_router(telegram_router)
    
    # –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # from smart_bot_factory.utils import UserPromptLoader
    # bot_builder.set_prompt_loader(UserPromptLoader("advanced-bot"))
    
    # –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
    await bot_builder.build()
    await bot_builder.start()

if __name__ == "__main__":
    asyncio.run(main())
```

---

## üìñ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```text
project/
‚îú‚îÄ‚îÄ bots/
‚îÇ   ‚îî‚îÄ‚îÄ my-bot/
‚îÇ       ‚îú‚îÄ‚îÄ prompts/              # –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è AI
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ system_prompt.txt
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ welcome_message.txt
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ final_instructions.txt
‚îÇ       ‚îú‚îÄ‚îÄ tests/                # YAML —Ç–µ—Å—Ç—ã
‚îÇ       ‚îú‚îÄ‚îÄ welcome_files/        # –§–∞–π–ª—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
‚îÇ       ‚îú‚îÄ‚îÄ files/                # –§–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
‚îÇ       ‚îî‚îÄ‚îÄ .env                  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ my-bot.py                     # –ö–æ–¥ –±–æ—Ç–∞
‚îî‚îÄ‚îÄ .env                          # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
```

---

## ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (.env)

```bash
# Telegram
TELEGRAM_BOT_TOKEN=your_token_here

# Supabase
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_KEY=your_key_here

# OpenAI
OPENAI_API_KEY=sk-your-key
OPENAI_MODEL=gpt-4o-mini
OPENAI_MAX_TOKENS=1500

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (Telegram ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
ADMIN_TELEGRAM_IDS=123456789,987654321

# –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å JSON)
DEBUG_MODE=false
```

---

## üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤

| –î–µ–∫–æ—Ä–∞—Ç–æ—Ä | –ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è | –î–ª—è –∫–æ–≥–æ | –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã |
|-----------|-------------------|----------|--------------------|
| `@event_handler` | –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ | 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | `event_type`, `notify`, `once_only`, `send_ai_response` |
| `@schedule_task` | –ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è | 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | `task_name`, `delay`, `event_type`, `smart_check`, `once_only`, `notify`, `send_ai_response` |
| `@global_handler` | –ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è | –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ | `handler_type`, `delay`, `event_type`, `once_only`, `notify`, `send_ai_response` |

---

## üîë –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏

### `send_ai_response=True`

–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:

- **`True`** (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - –ò–ò –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
- **`False`** - –ò–ò –ù–ï –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é)

**–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `send_ai_response=False`:**

- –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- –ö–æ–≥–¥–∞ –≤—ã —Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ `send_message_by_human()`
- –î–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

```python
# –ò–ò –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
@event_router.event_handler("collect_phone")
async def save_phone(user_id: int, phone: str):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    # –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    return {"status": "success"}

# –ò–ò –ù–ï –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
@event_router.event_handler("collect_name", send_ai_response=False)
async def save_name(user_id: int, name: str):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await send_message_by_human(user_id, f"‚úÖ –ò–º—è {name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    # –ò–ò –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return {"status": "success"}
```

### `once_only=True`

–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

- **–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏**: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
- **–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏**: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å `completed` - –æ—Ç–º–µ–Ω—è–µ—Ç

```python
@event_router.event_handler("welcome_bonus", once_only=True)
async def give_bonus(user_id: int, bonus_info: str):
    # –í—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–µ—Ç /start –∑–∞–Ω–æ–≤–æ
    return {"status": "bonus_given"}
```

### `smart_check=True`

–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:

- **–û—Ç–º–µ–Ω—è–µ—Ç** –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –Ω–æ–≤—ã–π —ç—Ç–∞–ø
- **–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç** –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω

```python
@event_router.schedule_task("follow_up", delay="24h", smart_check=True)
async def follow_up(user_id: int, text: str):
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
    return {"status": "sent"}
```

### `event_type` - –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è

–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è:

**–°—Ç—Ä–æ–∫–∞** - –∏—â–µ—Ç –≤ –ë–î:

```python
@event_router.schedule_task("reminder", delay="2h", event_type="appointment")
async def remind(user_id: int, text: str):
    # 1. –ò–ò —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ: {"—Ç–∏–ø": "appointment", "–∏–Ω—Ñ–æ": "–¥–∞—Ç–∞: 2025-10-15, –≤—Ä–µ–º—è: 19:00"}
    # 2. –ò–ò —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É: {"—Ç–∏–ø": "reminder", "–∏–Ω—Ñ–æ": ""}
    # 3. –ò—â–µ—Ç—Å—è –≤ –ë–î —Å–æ–±—ã—Ç–∏–µ "appointment" –¥–ª—è user_id
    # 4. –ü–∞—Ä—Å–∏—Ç—Å—è datetime: 2025-10-15 19:00
    # 5. –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è: 19:00 - 2h = 17:00
    # 6. –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ 17:00
    pass
```

**–§—É–Ω–∫—Ü–∏—è** - –∫–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞:

```python
async def get_time_from_api(user_id: int, user_data: str) -> datetime:
    booking = await external_api.get_booking(user_id)
    return booking['datetime']

@event_router.schedule_task("api_reminder", delay="1h", event_type=get_time_from_api)
async def remind(user_id: int, text: str):
    # 1. –ò–ò —Å–æ–∑–¥–∞–µ—Ç: {"—Ç–∏–ø": "api_reminder", "–∏–Ω—Ñ–æ": ""}
    # 2. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è get_time_from_api(user_id, "")
    # 3. –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –∏–∑ API
    # 4. –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è: api_datetime - 1h
    # 5. –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    pass
```

---

## üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

–ï—Å–ª–∏ –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:

```bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –≤ PyPI
uv run publish.py

# –¢—Ä–µ–±—É–µ—Ç PYPI_API_TOKEN –≤ .env —Ñ–∞–π–ª–µ
```

---

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: [GitHub](https://github.com/your-repo)
- Issues: [GitHub Issues](https://github.com/your-repo/issues)

---

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

MIT
