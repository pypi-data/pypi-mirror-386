"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–æ–≤
"""

import asyncio
import logging
import os
import sys
from datetime import datetime, timezone, timedelta
from pathlib import Path
from typing import Optional

from ..admin.admin_manager import AdminManager
from ..config import Config
from ..core.conversation_manager import ConversationManager
from ..integrations.supabase_client import SupabaseClient

logger = logging.getLogger(__name__)


def setup_bot_environment(bot_name: str = "growthmed-october-24") -> Optional[Path]:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º BOT_ID"""
    root_dir = Path(os.getcwd())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤—É—é
    config_dir = root_dir / "bots" / bot_name

    logger.info(f"üîç –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ –≤: {config_dir}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    original_cwd = os.getcwd()

    if not config_dir.exists():
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_dir}")
        logger.info("   –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:")
        bots_dir = root_dir / "bots"
        if bots_dir.exists():
            for bot_dir in bots_dir.iterdir():
                if bot_dir.is_dir():
                    logger.info(f"     - {bot_dir.name}")
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
    prompts_dir = config_dir / "prompts"
    if not prompts_dir.exists():
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {prompts_dir}")
        return None

    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: {prompts_dir}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BOT_ID –∏–∑ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    os.environ["BOT_ID"] = bot_name
    logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_ID: {bot_name}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
    env_file = config_dir / ".env"
    if env_file.exists():
        logger.info(f"üîß –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑: {env_file}")
        from dotenv import load_dotenv

        load_dotenv(env_file)
    else:
        logger.error(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")
        return None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –º–µ–Ω—è–µ–º –µ—ë
    original_cwd = os.getcwd()
    os.chdir(str(config_dir))
    logger.info(f"üìÅ –ò–∑–º–µ–Ω–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–º–ø—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    local_prompts = Path("prompts")
    if local_prompts.exists():
        logger.info(
            f"‚úÖ –ü—Ä–æ–º–ø—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {local_prompts.absolute()}"
        )
    else:
        logger.error(
            f"‚ùå –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {local_prompts.absolute()}"
        )
        os.chdir(original_cwd)  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        return None

    return config_dir


async def debug_timeout_issue(bot_name: str = "growthmed-october-24") -> bool:
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–∏–∞–ª–æ–≥–æ–≤

    Args:
        bot_name: –ò–º—è –±–æ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã
    """
    logger.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–∏–∞–ª–æ–≥–æ–≤\n")
    logger.info(f"üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞: {bot_name}")
    logger.info(f"ü§ñ Bot ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {bot_name}\n")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç BOT_ID)
    config_dir = setup_bot_environment(bot_name)
    if not config_dir:
        return False

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    logger.info("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   BOT_ID: {config.BOT_ID}")
    logger.info(
        f"   ADMIN_SESSION_TIMEOUT_MINUTES: {config.ADMIN_SESSION_TIMEOUT_MINUTES}"
    )
    logger.info(f"   PROMT_FILES_DIR: {config.PROMT_FILES_DIR}")
    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç-—Ñ–∞–π–ª–æ–≤: {len(config.PROMPT_FILES)}")
    logger.info("")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
    logger.info("üïê –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã:")
    now_naive = datetime.now()
    now_utc = datetime.now(timezone.utc)
    logger.info(f"   datetime.now() (–ª–æ–∫–∞–ª—å–Ω–æ–µ): {now_naive}")
    logger.info(f"   datetime.now(timezone.utc): {now_utc}")
    logger.info(
        f"   –†–∞–∑–Ω–∏—Ü–∞: {(now_naive.replace(tzinfo=timezone.utc) - now_utc).total_seconds() / 3600:.1f} —á–∞—Å–æ–≤"
    )
    logger.info("")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –ë–î
    try:
        supabase_client = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await supabase_client.initialize()

        response = (
            supabase_client.client.table("admin_user_conversations")
            .select("id", "admin_id", "user_id", "started_at", "auto_end_at")
            .eq("status", "active")
            .execute()
        )

        conversations = response.data

        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –ë–î: {len(conversations)}")

        problems_found = 0

        for i, conv in enumerate(conversations, 1):
            logger.info(f"\n{i}. –î–∏–∞–ª–æ–≥ ID: {conv['id']}")
            logger.info(
                f"   –ê–¥–º–∏–Ω: {conv['admin_id']}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conv['user_id']}"
            )

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞
            started_at = conv["started_at"]
            auto_end_at = conv["auto_end_at"]

            logger.info(f"   started_at (—Å—ã—Ä–æ–µ): {started_at}")
            logger.info(f"   auto_end_at (—Å—ã—Ä–æ–µ): {auto_end_at}")

            try:
                # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –¥–µ–ª–∞–µ—Ç –∫–æ–¥
                if started_at.endswith("Z"):
                    start_time = datetime.fromisoformat(
                        started_at.replace("Z", "+00:00")
                    )
                elif "+" in started_at or started_at.count(":") >= 3:
                    start_time = datetime.fromisoformat(started_at)
                else:
                    naive_time = datetime.fromisoformat(started_at)
                    start_time = naive_time.replace(tzinfo=timezone.utc)

                if auto_end_at.endswith("Z"):
                    end_time = datetime.fromisoformat(
                        auto_end_at.replace("Z", "+00:00")
                    )
                elif "+" in auto_end_at or auto_end_at.count(":") >= 3:
                    end_time = datetime.fromisoformat(auto_end_at)
                else:
                    naive_time = datetime.fromisoformat(auto_end_at)
                    end_time = naive_time.replace(tzinfo=timezone.utc)

                logger.info(f"   start_time (–ø–∞—Ä—Å–µ–¥): {start_time}")
                logger.info(f"   end_time (–ø–∞—Ä—Å–µ–¥): {end_time}")

                # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
                planned_duration = end_time - start_time
                planned_minutes = int(planned_duration.total_seconds() / 60)
                logger.info(f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {planned_minutes} –º–∏–Ω—É—Ç")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–∏–≥—É
                expected = config.ADMIN_SESSION_TIMEOUT_MINUTES
                if planned_minutes == expected:
                    logger.info(f"   ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É ({expected} –º–∏–Ω)")
                else:
                    logger.error(
                        f"   ‚ùå –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É! –û–∂–∏–¥–∞–ª–æ—Å—å {expected} –º–∏–Ω, –ø–æ–ª—É—á–∏–ª–∏ {planned_minutes} –º–∏–Ω"
                    )
                    problems_found += 1

                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                now_utc = datetime.now(timezone.utc)

                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC
                if end_time.tzinfo != timezone.utc:
                    end_time_utc = end_time.astimezone(timezone.utc)
                else:
                    end_time_utc = end_time

                remaining = end_time_utc - now_utc
                remaining_minutes = max(0, int(remaining.total_seconds() / 60))

                logger.info(f"   now_utc: {now_utc}")
                logger.info(f"   end_time_utc: {end_time_utc}")
                logger.info(f"   –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {remaining_minutes} –º–∏–Ω—É—Ç")

                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–æ—à–ª–æ
                if start_time.tzinfo != timezone.utc:
                    start_time_utc = start_time.astimezone(timezone.utc)
                else:
                    start_time_utc = start_time

                elapsed = now_utc - start_time_utc
                elapsed_minutes = max(0, int(elapsed.total_seconds() / 60))
                logger.info(f"   –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes} –º–∏–Ω—É—Ç")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
                total_check = elapsed_minutes + remaining_minutes
                logger.info(
                    f"   –ü—Ä–æ–≤–µ—Ä–∫–∞: {elapsed_minutes} + {remaining_minutes} = {total_check} –º–∏–Ω (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~{planned_minutes})"
                )

                if abs(total_check - planned_minutes) > 2:
                    logger.warning(
                        "   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: —Å—É–º–º–∞ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è! –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å timezone"
                    )
                    problems_found += 1

            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                problems_found += 1

        if not conversations:
            logger.info("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            logger.info("   üí° –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /—á–∞—Ç USER_ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        return problems_found == 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


async def test_conversation_creation(config: Config) -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º

    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞

    Returns:
        bool: True –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã
    """
    logger.info(f"\n{'='*50}")
    logger.info("üß™ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –î–ò–ê–õ–û–ì–ê")
    logger.info(f"{'='*50}")

    timeout_minutes = config.ADMIN_SESSION_TIMEOUT_MINUTES
    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–∞—É—Ç–∞: {timeout_minutes} –º–∏–Ω—É—Ç")

    # –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    now_utc = datetime.now(timezone.utc)
    auto_end_utc = now_utc + timedelta(minutes=timeout_minutes)

    logger.info(f"üïê now_utc: {now_utc}")
    logger.info(f"‚è∞ auto_end_utc: {auto_end_utc}")
    logger.info(
        f"üìè –†–∞–∑–Ω–∏—Ü–∞: {int((auto_end_utc - now_utc).total_seconds() / 60)} –º–∏–Ω—É—Ç"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ISO —Ñ–æ—Ä–º–∞—Ç
    auto_end_iso = auto_end_utc.isoformat()
    logger.info(f"üìù ISO —Ñ–æ—Ä–º–∞—Ç: {auto_end_iso}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—Ä–∞—Ç–Ω–æ
    try:
        if auto_end_iso.endswith("Z"):
            parsed_back = datetime.fromisoformat(auto_end_iso.replace("Z", "+00:00"))
        elif "+" in auto_end_iso:
            parsed_back = datetime.fromisoformat(auto_end_iso)
        else:
            parsed_back = datetime.fromisoformat(auto_end_iso).replace(
                tzinfo=timezone.utc
            )

        logger.info(f"üîÑ –ü–∞—Ä—Å–µ–¥ –æ–±—Ä–∞—Ç–Ω–æ: {parsed_back}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if abs((parsed_back - auto_end_utc).total_seconds()) < 1:
            logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False


async def check_timeouts(bot_name: str = "growthmed-october-24") -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–æ–≤

    Args:
        bot_name: –ò–º—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, False –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã
    """
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–æ–≤\n")
    logger.info(f"üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–æ—Ç–∞: {bot_name}")
    logger.info(f"ü§ñ Bot ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {bot_name}\n")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç BOT_ID)
    config_dir = setup_bot_environment(bot_name)
    if not config_dir:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –±–æ—Ç–∞")
        return False

    logger.info(f"üìÅ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info("üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    for item in Path(".").iterdir():
        if item.is_dir():
            logger.info(f"   üìÅ {item.name}/")
        else:
            logger.info(f"   üìÑ {item.name}")
    logger.info("")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try:
        logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = Config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
        supabase_client = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await supabase_client.initialize()
        logger.info("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω")

        logger.info("üëë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
        admin_manager = AdminManager(config, supabase_client)
        conversation_manager = ConversationManager(supabase_client, admin_manager)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.exception("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        return False

    logger.info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   BOT_ID: {config.BOT_ID}")
    logger.info(
        f"   ADMIN_SESSION_TIMEOUT_MINUTES: {config.ADMIN_SESSION_TIMEOUT_MINUTES}"
    )
    logger.info(f"   PROMT_FILES_DIR: {config.PROMT_FILES_DIR}")
    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç-—Ñ–∞–π–ª–æ–≤: {len(config.PROMPT_FILES)}")
    logger.info(f"   –ê–¥–º–∏–Ω–æ–≤: {len(config.ADMIN_TELEGRAM_IDS)}")
    logger.info(f"   –°–µ–π—á–∞—Å UTC: {datetime.now(timezone.utc)}")
    logger.info("")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    try:
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤...")
        conversations = await conversation_manager.get_active_conversations()
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(conversations)} –¥–∏–∞–ª–æ–≥–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        return False

    if not conversations:
        logger.info("üí¨ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
        logger.info("üí° –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /—á–∞—Ç USER_ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        logger.info("\nüß™ –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:")
        logger.info(f"1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python {bot_name}.py")
        logger.info("2. –ö–∞–∫ –∞–¥–º–∏–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: /—á–∞—Ç 123456789")
        logger.info("3. –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ: /—á–∞—Ç—ã")
        return True  # –ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ = –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º

    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(conversations)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:")
    logger.info("")

    problems_found = 0

    for i, conv in enumerate(conversations, 1):
        logger.info(f"{i}. –î–∏–∞–ª–æ–≥ ID: {conv['id']}")
        logger.info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conv['user_id']}")
        logger.info(f"   üëë –ê–¥–º–∏–Ω: {conv['admin_id']}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞
        started_at_str = conv["started_at"]
        auto_end_str = conv["auto_end_at"]

        logger.info(f"   üïê started_at (—Å—ã—Ä–æ–µ): {started_at_str}")
        logger.info(f"   ‚è∞ auto_end_at (—Å—ã—Ä–æ–µ): {auto_end_str}")

        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π timezone
            if started_at_str.endswith("Z"):
                start_time = datetime.fromisoformat(
                    started_at_str.replace("Z", "+00:00")
                )
            elif "+" in started_at_str or started_at_str.count(":") >= 3:
                start_time = datetime.fromisoformat(started_at_str)
            else:
                naive_time = datetime.fromisoformat(started_at_str)
                start_time = naive_time.replace(tzinfo=timezone.utc)

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π timezone
            if auto_end_str.endswith("Z"):
                auto_end = datetime.fromisoformat(auto_end_str.replace("Z", "+00:00"))
            elif "+" in auto_end_str or auto_end_str.count(":") >= 3:
                auto_end = datetime.fromisoformat(auto_end_str)
            else:
                naive_time = datetime.fromisoformat(auto_end_str)
                auto_end = naive_time.replace(tzinfo=timezone.utc)

            logger.info(f"   üìÖ start_time (parsed): {start_time}")
            logger.info(f"   ‚è∞ auto_end (parsed): {auto_end}")

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            planned_duration = auto_end - start_time
            planned_minutes = int(planned_duration.total_seconds() / 60)
            logger.info(f"   üìè –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {planned_minutes} –º–∏–Ω—É—Ç")

            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
            now_utc = datetime.now(timezone.utc)

            # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫ UTC –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            if start_time.tzinfo != timezone.utc:
                start_time_utc = start_time.astimezone(timezone.utc)
            else:
                start_time_utc = start_time

            if auto_end.tzinfo != timezone.utc:
                auto_end_utc = auto_end.astimezone(timezone.utc)
            else:
                auto_end_utc = auto_end

            # –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏
            elapsed = now_utc - start_time_utc
            elapsed_minutes = max(0, int(elapsed.total_seconds() / 60))
            logger.info(f"   ‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes} –º–∏–Ω—É—Ç")

            # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            remaining = auto_end_utc - now_utc
            remaining_minutes = max(0, int(remaining.total_seconds() / 60))
            logger.info(f"   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_minutes} –º–∏–Ω—É—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            expected_timeout = config.ADMIN_SESSION_TIMEOUT_MINUTES
            if (
                abs(planned_minutes - expected_timeout) <= 2
            ):  # –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã
                logger.info(
                    f"   ‚úÖ –¢–∞–π–º–∞—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–æ–∂–∏–¥–∞–ª—Å—è {expected_timeout} –º–∏–Ω)"
                )
            else:
                logger.error(
                    f"   ‚ùå –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª—Å—è {expected_timeout} –º–∏–Ω, –ø–æ–ª—É—á–∏–ª–∏ {planned_minutes} –º–∏–Ω"
                )
                problems_found += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
            total_check = elapsed_minutes + remaining_minutes
            logger.info(
                f"   üî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞: {elapsed_minutes} + {remaining_minutes} = {total_check} –º–∏–Ω"
            )

            if abs(total_check - planned_minutes) > 2:
                logger.warning(
                    "   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: —Å—É–º–º–∞ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è! –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å timezone"
                )
                problems_found += 1
            else:
                logger.info("   ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Å—Ö–æ–¥–∏—Ç—Å—è")

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            problems_found += 1
            logger.exception("   –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

        logger.info("")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ format_active_conversations:")
    try:
        formatted_text = conversation_manager.format_active_conversations(conversations)
        logger.info(formatted_text)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        problems_found += 1

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info(f"\n{'='*50}")
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if problems_found == 0:
        logger.info("‚úÖ –í—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    else:
        logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {problems_found} –ø—Ä–æ–±–ª–µ–º")
        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ fix_existing_timeouts.py –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    logger.info(f"{'='*50}")

    return problems_found == 0


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    logger.info("üîç –£—Ç–∏–ª–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤")
    logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    logger.info("  python -m smart_bot_factory.timeout_checker [bot_name]")
    logger.info("  python -m smart_bot_factory.timeout_checker growthmed-october-24")
    logger.info("")

    if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help", "help"]:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
    bot_name = "growthmed-october-24"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if len(sys.argv) > 1:
        bot_name = sys.argv[1]

    try:
        success = asyncio.run(check_timeouts(bot_name))
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        sys.exit(1)


if __name__ == "__main__":
    main()
