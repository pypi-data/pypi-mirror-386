"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è Smart Bot Factory
"""

import logging
from typing import Any, Dict, List, Optional

from .router import EventRouter

logger = logging.getLogger(__name__)


class RouterManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞–º–∏ —Å–æ–±—ã—Ç–∏–π –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    """

    def __init__(self):
        self._routers: List[EventRouter] = []
        self._combined_handlers: Dict[str, Dict[str, Any]] = {
            "event_handlers": {},
            "scheduled_tasks": {},
            "global_handlers": {},
        }

        logger.info("üîÑ –°–æ–∑–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—É—Ç–µ—Ä–æ–≤")

    def register_router(self, router: EventRouter):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å–æ–±—ã—Ç–∏–π –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ

        Args:
            router: EventRouter –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        if router not in self._routers:
            self._routers.append(router)
            self._update_combined_handlers()
            logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ä–æ—É—Ç–µ—Ä: {router.name}")
        else:
            logger.warning(f"‚ö†Ô∏è –†–æ—É—Ç–µ—Ä {router.name} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    def unregister_router(self, router: EventRouter):
        """
        –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π

        Args:
            router: EventRouter –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        if router in self._routers:
            self._routers.remove(router)
            self._update_combined_handlers()
            logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞: {router.name}")
        else:
            logger.warning(f"‚ö†Ô∏è –†–æ—É—Ç–µ—Ä {router.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")

    def _update_combined_handlers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._combined_handlers = {
            "event_handlers": {},
            "scheduled_tasks": {},
            "global_handlers": {},
        }

        logger.debug(
            f"üîç RouterManager._update_combined_handlers(): –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è {len(self._routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤"
        )

        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
        for router in self._routers:
            logger.debug(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä: {router.name}")

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            event_handlers = router.get_event_handlers()
            logger.debug(
                f"üîç –†–æ—É—Ç–µ—Ä {router.name}: {len(event_handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"
            )
            for event_type, handler_info in event_handlers.items():
                if event_type in self._combined_handlers["event_handlers"]:
                    existing_router = self._combined_handlers["event_handlers"][
                        event_type
                    ]["router"]
                    logger.warning(
                        f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π '{event_type}' –º–µ–∂–¥—É —Ä–æ—É—Ç–µ—Ä–∞–º–∏ {existing_router} –∏ {router.name}"
                    )
                self._combined_handlers["event_handlers"][event_type] = handler_info

            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            scheduled_tasks = router.get_scheduled_tasks()
            logger.debug(
                f"üîç –†–æ—É—Ç–µ—Ä {router.name}: {len(scheduled_tasks)} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {list(scheduled_tasks.keys())}"
            )
            for task_name, task_info in scheduled_tasks.items():
                if task_name in self._combined_handlers["scheduled_tasks"]:
                    existing_router = self._combined_handlers["scheduled_tasks"][
                        task_name
                    ]["router"]
                    logger.warning(
                        f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–¥–∞—á '{task_name}' –º–µ–∂–¥—É —Ä–æ—É—Ç–µ—Ä–∞–º–∏ {existing_router} –∏ {router.name}"
                    )
                self._combined_handlers["scheduled_tasks"][task_name] = task_info

            # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            global_handlers = router.get_global_handlers()
            logger.debug(
                f"üîç –†–æ—É—Ç–µ—Ä {router.name}: {len(global_handlers)} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"
            )
            for handler_type, handler_info in global_handlers.items():
                if handler_type in self._combined_handlers["global_handlers"]:
                    existing_router = self._combined_handlers["global_handlers"][
                        handler_type
                    ]["router"]
                    logger.warning(
                        f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ '{handler_type}' –º–µ–∂–¥—É —Ä–æ—É—Ç–µ—Ä–∞–º–∏ {existing_router} –∏ {router.name}"
                    )
                self._combined_handlers["global_handlers"][handler_type] = handler_info

        logger.debug(
            f"üîç RouterManager._update_combined_handlers(): –∏—Ç–æ–≥–æ - {len(self._combined_handlers['scheduled_tasks'])} –∑–∞–¥–∞—á: {list(self._combined_handlers['scheduled_tasks'].keys())}"
        )

        total_handlers = (
            len(self._combined_handlers["event_handlers"])
            + len(self._combined_handlers["scheduled_tasks"])
            + len(self._combined_handlers["global_handlers"])
        )

        logger.info(
            f"üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {total_handlers} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ {len(self._routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤"
        )

    def get_event_handlers(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        return self._combined_handlers["event_handlers"].copy()

    def get_scheduled_tasks(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        tasks = self._combined_handlers["scheduled_tasks"].copy()
        logger.debug(
            f"üîç RouterManager.get_scheduled_tasks(): –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {len(tasks)} –∑–∞–¥–∞—á: {list(tasks.keys())}"
        )
        return tasks

    def get_global_handlers(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        return self._combined_handlers["global_handlers"].copy()

    def get_all_handlers(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤"""
        all_handlers = {}
        all_handlers.update(self._combined_handlers["event_handlers"])
        all_handlers.update(self._combined_handlers["scheduled_tasks"])
        all_handlers.update(self._combined_handlers["global_handlers"])
        return all_handlers

    def get_handlers_for_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç –ò–ò"""
        prompt_parts: List[str] = []

        if not any(self._combined_handlers.values()):
            return ""

        if self._combined_handlers["event_handlers"]:
            prompt_parts.append("–î–û–°–¢–£–ü–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô:")
            for event_type, handler_info in self._combined_handlers[
                "event_handlers"
            ].items():
                router_name = handler_info.get("router", "unknown")
                prompt_parts.append(
                    f"- {event_type}: {handler_info['name']} (—Ä–æ—É—Ç–µ—Ä: {router_name})"
                )

        if self._combined_handlers["scheduled_tasks"]:
            prompt_parts.append("\n–î–û–°–¢–£–ü–ù–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
            for task_name, task_info in self._combined_handlers[
                "scheduled_tasks"
            ].items():
                router_name = task_info.get("router", "unknown")
                prompt_parts.append(
                    f"- {task_name}: {task_info['name']} (—Ä–æ—É—Ç–µ—Ä: {router_name})"
                )

        if self._combined_handlers["global_handlers"]:
            prompt_parts.append("\n–î–û–°–¢–£–ü–ù–´–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:")
            for handler_type, handler_info in self._combined_handlers[
                "global_handlers"
            ].items():
                router_name = handler_info.get("router", "unknown")
                prompt_parts.append(
                    f"- {handler_type}: {handler_info['name']} (—Ä–æ—É—Ç–µ—Ä: {router_name})"
                )

        return "\n".join(prompt_parts)

    def get_router_by_name(self, name: str) -> Optional[EventRouter]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å–æ–±—ã—Ç–∏–π –ø–æ –∏–º–µ–Ω–∏"""
        for router in self._routers:
            if router.name == name:
                return router
        return None

    def get_router_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ—É—Ç–µ—Ä–∞–º"""
        stats = {"total_routers": len(self._routers), "routers": []}

        for router in self._routers:
            router_stats = {
                "name": router.name,
                "event_handlers": len(router.get_event_handlers()),
                "scheduled_tasks": len(router.get_scheduled_tasks()),
                "global_handlers": len(router.get_global_handlers()),
            }
            stats["routers"].append(router_stats)

        return stats

    def __repr__(self):
        return f"RouterManager(routers={len(self._routers)}, handlers={len(self.get_all_handlers())})"
