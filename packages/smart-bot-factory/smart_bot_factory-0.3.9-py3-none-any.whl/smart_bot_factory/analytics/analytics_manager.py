import logging
from datetime import datetime, timedelta
from typing import Any, Dict, List

from ..core.bot_utils import parse_ai_response

logger = logging.getLogger(__name__)


class AnalyticsManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±–æ—Ç–∞"""

    def __init__(self, supabase_client):
        self.supabase = supabase_client

    async def get_funnel_stats(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = await self.supabase.get_funnel_stats(days)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cutoff_date = datetime.now() - timedelta(days=days)

            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –° –£–ß–ï–¢–û–ú bot_id
            query = (
                self.supabase.client.table("sales_users")
                .select("id")
                .gte("created_at", cutoff_date.isoformat())
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ bot_id –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if self.supabase.bot_id:
                query = query.eq("bot_id", self.supabase.bot_id)
                logger.info(
                    f"üìä –§–∏–ª—å—Ç—Ä –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ bot_id: {self.supabase.bot_id}"
                )

            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            query = query.neq("username", "test_user")

            response = query.execute()

            new_users = len(response.data) if response.data else 0

            logger.info(f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {days} –¥–Ω–µ–π: {new_users}")

            # –û–±–æ–≥–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats["new_users"] = new_users
            stats["period_days"] = days

            return stats

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏: {e}")
            return {
                "total_sessions": 0,
                "new_users": 0,
                "stages": {},
                "avg_quality": 0,
                "period_days": days,
            }

    async def get_events_stats(self, days: int = 7) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π"""
        try:
            return await self.supabase.get_events_stats(days)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return {}

    async def get_user_journey(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –û–î–ù–£ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            session_info = await self.supabase.get_active_session(user_id)

            if not session_info:
                logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
                return []

            session_id = session_info["id"]
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ {session_id}")

            # 2. –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)
            messages_response = (
                self.supabase.client.table("sales_messages")
                .select("role", "content", "created_at", "message_type")
                .eq("session_id", str(session_id))
                .neq("role", "system")
                .order("created_at")
                .execute()
            )

            messages = messages_response.data if messages_response.data else []
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

            # 3. –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            events_response = (
                self.supabase.client.table("session_events")
                .select("event_type", "event_info", "created_at")
                .eq("session_id", str(session_id))
                .order("created_at")
                .execute()
            )

            events = events_response.data if events_response.data else []
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –û–î–ò–ù –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ —Å–æ –í–°–ï–ú–ò —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            session_with_messages = {
                "id": session_id,
                "current_stage": session_info.get("current_stage", "unknown"),
                "lead_quality_score": session_info.get("lead_quality_score", 0),
                "created_at": session_info["created_at"],
                "status": "active",
                "messages": messages,  # –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
                "events": events,
            }

            return [session_with_messages]

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            return []

    def _truncate_message_for_history(self, text: str, max_length: int = 150) -> str:
        """–°–æ–∫—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
        if not text:
            return ""

        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        text = text.replace("\n", " ").strip()

        if len(text) <= max_length:
            return text

        return text[: max_length - 3] + "..."

    def format_funnel_stats(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not stats or stats["total_sessions"] == 0:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —ç—Ç–∞–ø–æ–≤
        stage_emojis = {
            "introduction": "üëã",
            "consult": "üí¨",
            "offer": "üíº",
            "contacts": "üì±",
        }

        # –ù–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤
        stage_names = {
            "introduction": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ",
            "consult": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
            "offer": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "contacts": "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
        }

        lines = [
            f"üìä –í–û–†–û–ù–ö–ê –ó–ê {stats['period_days']} –î–ù–ï–ô",
            "",
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_unique_users', 0)}",
            f"üÜï –ù–æ–≤—ã—Ö: {stats.get('new_users', 0)}",
            "",
            "üìà –≠–¢–ê–ü–´ –í–û–†–û–ù–ö–ò:",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ø—ã
        stages = stats.get("stages", {})
        total = stats["total_sessions"]

        for stage, count in stages.items():
            emoji = stage_emojis.get(stage, "üìå")
            name = stage_names.get(stage, stage)
            percentage = (count / total * 100) if total > 0 else 0
            lines.append(f"{emoji} {name}: {count} —á–µ–ª ({percentage:.1f}%)")

        # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        avg_quality = stats.get("avg_quality", 0)
        if avg_quality > 0:
            lines.extend(["", f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä–∏–Ω–≥: {avg_quality:.1f}"])

        return "\n".join(lines)

    def format_events_stats(self, events: Dict[str, int]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not events:
            return "üî• –°–æ–±—ã—Ç–∏—è: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        event_emojis = {
            "—Ç–µ–ª–µ—Ñ–æ–Ω": "üì±",
            "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "üí¨",
            "–ø–æ–∫—É–ø–∫–∞": "üí∞",
            "–æ—Ç–∫–∞–∑": "‚ùå",
        }

        lines = ["üî• –°–û–ë–´–¢–ò–Ø:"]

        for event_type, count in events.items():
            emoji = event_emojis.get(event_type, "üîî")
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            safe_event_type = event_type.replace("_", " ").title()
            lines.append(f"{emoji} {safe_event_type}: {count}")

        return "\n".join(lines)

    def format_user_journey(self, user_id: int, journey: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        if not journey:
            return f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}\n–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        session = journey[0]
        messages = session.get("messages", [])
        events = session.get("events", [])

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        created_at = datetime.fromisoformat(
            session["created_at"].replace("Z", "+00:00")
        )
        date_str = created_at.strftime("%d.%m %H:%M")
        stage = session.get("current_stage", "unknown")
        quality = session.get("lead_quality_score", 0)

        lines = [
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}",
            f"üìÖ {date_str} | {stage} | ‚≠ê{quality}",
            f"üìä {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(events)} —Å–æ–±—ã—Ç–∏–π",
        ]

        # –°–æ–±—ã—Ç–∏—è –≤ —Å–µ—Å—Å–∏–∏
        if events:
            lines.append("")
            lines.append("üî• –°–æ–±—ã—Ç–∏—è:")
            for event in events:
                event_time = datetime.fromisoformat(
                    event["created_at"].replace("Z", "+00:00")
                )
                time_str = event_time.strftime("%H:%M")
                emoji = {
                    "—Ç–µ–ª–µ—Ñ–æ–Ω": "üì±",
                    "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "üí¨",
                    "–ø–æ–∫—É–ø–∫–∞": "üí∞",
                    "–æ—Ç–∫–∞–∑": "‚ùå",
                }.get(event["event_type"], "üîî")
                lines.append(
                    f"   {emoji} {time_str} {event['event_type']}: {event['event_info']}"
                )

        lines.append(f"\n{'‚îÅ' * 40}")
        lines.append("üí¨ –î–ò–ê–õ–û–ì:")

        # –°–æ–æ–±—â–µ–Ω–∏—è
        for i, msg in enumerate(messages, 1):
            msg_time = datetime.fromisoformat(msg["created_at"].replace("Z", "+00:00"))
            time_str = msg_time.strftime("%H:%M")

            role = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg["role"] == "user" else "ü§ñ –ë–æ—Ç"

            # –û—á–∏—â–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
            content = msg["content"]
            if msg["role"] == "assistant" and content.strip().startswith("{"):
                try:
                    clean_content, _ = parse_ai_response(content)
                    content = clean_content if clean_content else content
                except Exception:
                    pass

            # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(content) > 200:
                content = content[:197] + "..."

            lines.append(f"\n{i}. {role} –≤ {time_str}:")
            lines.append(f"   {content}")

        return "\n".join(lines)

    async def get_daily_summary(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today_stats = await self.get_funnel_stats(1)
            today_events = await self.get_events_stats(1)

            lines = [
                "üìà –°–í–û–î–ö–ê –ó–ê –°–ï–ì–û–î–ù–Ø",
                "",
                f"üë• –ù–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π: {today_stats['total_sessions']}",
                f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {today_stats.get('new_users', 0)}",
            ]

            if today_events:
                lines.append("")
                lines.append("üî• –°–æ–±—ã—Ç–∏—è:")
                for event_type, count in today_events.items():
                    emoji = {
                        "—Ç–µ–ª–µ—Ñ–æ–Ω": "üì±",
                        "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "üí¨",
                        "–ø–æ–∫—É–ø–∫–∞": "üí∞",
                        "–æ—Ç–∫–∞–∑": "‚ùå",
                    }.get(event_type, "üîî")
                    lines.append(f"   {emoji} {event_type}: {count}")

            return "\n".join(lines)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏"

    async def get_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —ç—Ç–∞–ø–∞–º –≤–æ—Ä–æ–Ω–∫–∏
            stats_7d = await self.get_funnel_stats(7)
            stages = stats_7d.get("stages", {})
            total = stats_7d["total_sessions"]

            metrics = {
                "total_sessions_7d": total,
                "conversion_rates": {},
                "avg_quality": stats_7d.get("avg_quality", 0),
            }

            if total > 0:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
                intro_count = stages.get("introduction", 0)
                consult_count = stages.get("consult", 0)
                offer_count = stages.get("offer", 0)
                contacts_count = stages.get("contacts", 0)

                metrics["conversion_rates"] = {
                    "intro_to_consult": (
                        (consult_count / intro_count * 100) if intro_count > 0 else 0
                    ),
                    "consult_to_offer": (
                        (offer_count / consult_count * 100) if consult_count > 0 else 0
                    ),
                    "offer_to_contacts": (
                        (contacts_count / offer_count * 100) if offer_count > 0 else 0
                    ),
                    "intro_to_contacts": (
                        (contacts_count / intro_count * 100) if intro_count > 0 else 0
                    ),
                }

            return metrics

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {}

    def format_performance_metrics(self, metrics: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not metrics:
            return "üìä –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        lines = [
            "üìä –ú–ï–¢–†–ò–ö–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò",
            "",
            f"üë• –°–µ—Å—Å–∏–π –∑–∞ 7 –¥–Ω–µ–π: {metrics.get('total_sessions_7d', 0)}",
            f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {metrics.get('avg_quality', 0):.1f}",
            "",
        ]

        conversions = metrics.get("conversion_rates", {})
        if conversions:
            lines.append("üéØ –ö–û–ù–í–ï–†–°–ò–ò:")
            lines.append(f"üëã‚û°Ô∏èüí¨ {conversions.get('intro_to_consult', 0):.1f}%")
            lines.append(f"üí¨‚û°Ô∏èüíº {conversions.get('consult_to_offer', 0):.1f}%")
            lines.append(f"üíº‚û°Ô∏èüì± {conversions.get('offer_to_contacts', 0):.1f}%")
            lines.append(f"üëã‚û°Ô∏èüì± {conversions.get('intro_to_contacts', 0):.1f}%")

        return "\n".join(lines)

    async def get_top_performing_hours(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å—ã —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é"""
        try:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            cutoff_date = datetime.now() - timedelta(days=7)

            response = (
                self.supabase.client.table("sales_messages")
                .select("created_at")
                .gte("created_at", cutoff_date.isoformat())
                .eq("role", "user")
                .execute()
            )

            if not response.data:
                return []

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
            hour_counts = {}
            for message in response.data:
                created_at = datetime.fromisoformat(
                    message["created_at"].replace("Z", "+00:00")
                )
                hour = created_at.hour
                hour_counts[hour] = hour_counts.get(hour, 0) + 1

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
            sorted_hours = sorted(hour_counts.items(), key=lambda x: x[1], reverse=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 —á–∞—Å–æ–≤
            return [hour for hour, count in sorted_hours[:5]]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —á–∞—Å–æ–≤: {e}")
            return []
