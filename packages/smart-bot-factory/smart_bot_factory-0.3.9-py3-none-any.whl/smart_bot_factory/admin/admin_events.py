# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π

import json
import logging
import os
import shutil
import uuid
from datetime import datetime

import pytz
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram_media_group import media_group_handler
from dateutil.relativedelta import relativedelta

from ..aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from ..core.states import AdminStates

TEMP_DIR = "temp_event_files"


def generate_file_id() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞"""
    return f"file_{uuid.uuid4().hex}"


def ensure_temp_dir():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    if not os.path.exists(TEMP_DIR):
        os.makedirs(TEMP_DIR)
        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ {TEMP_DIR}")


async def cleanup_temp_files(state: FSMContext = None):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
    if os.path.exists(TEMP_DIR):
        try:
            shutil.rmtree(TEMP_DIR)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ {TEMP_DIR}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {TEMP_DIR}: {e}")

    # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if state:
        try:
            data = await state.get_data()
            if "files" in data:
                data["files"] = []
                await state.set_data(data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")


logger = logging.getLogger(__name__)

# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
admin_events_router = Router()


def setup_admin_events_handlers(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
    dp.include_router(admin_events_router)


@admin_events_router.message(Command(commands=["—Å–æ–∑–¥–∞—Ç—å_—Å–æ–±—ã—Ç–∏–µ", "create_event"]))
async def create_event_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")

    if not admin_manager.is_admin(message.from_user.id):
        return

    await state.set_state(AdminStates.create_event_name)

    await message.answer(
        "üìù **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**\n\n"
        "üí° _–ü–æ —ç—Ç–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–∫–µ\n"
        "‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏_",
        parse_mode="Markdown",
    )


@admin_events_router.message(AdminStates.create_event_name)
async def process_event_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    from ..handlers.handlers import get_global_var

    event_name = message.text.strip()

    if not event_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π)
    supabase_client = get_global_var("supabase_client")
    name_exists = await supabase_client.check_event_name_exists(event_name)

    if name_exists:
        await message.answer(
            f"‚ö†Ô∏è **–°–æ–±—ã—Ç–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{event_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è!**\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è.\n\n"
            f"üí° _–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è._",
            parse_mode="Markdown",
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(event_name=event_name)
    await state.set_state(AdminStates.create_event_date)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    calendar = SimpleCalendar(locale="ru", today_btn="–°–µ–≥–æ–¥–Ω—è", cancel_btn="–û—Ç–º–µ–Ω–∞")
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç–∞–º–∏ –æ—Ç –≤—á–µ—Ä–∞ –¥–æ +12 –º–µ—Å—è—Ü–µ–≤ (—á—Ç–æ–±—ã —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω)
    calendar.set_dates_range(
        datetime.now() + relativedelta(days=-1),
        datetime.now() + relativedelta(months=+12),
    )
    calendar_markup = await calendar.start_calendar()

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: **{event_name}**\n\n" "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=calendar_markup,
        parse_mode="Markdown",
    )


@admin_events_router.callback_query(
    SimpleCalendarCallback.filter(), AdminStates.create_event_date
)
async def process_event_date(
    callback_query: CallbackQuery, callback_data: dict, state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    calendar = SimpleCalendar(locale="ru", cancel_btn="–û—Ç–º–µ–Ω–∞", today_btn="–°–µ–≥–æ–¥–Ω—è")

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç–∞–º–∏ –æ—Ç –≤—á–µ—Ä–∞ –¥–æ +12 –º–µ—Å—è—Ü–µ–≤ (—á—Ç–æ–±—ã —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω)
    calendar.set_dates_range(
        datetime.now() + relativedelta(days=-1),
        datetime.now() + relativedelta(months=+12),
    )
    selected, date = await calendar.process_selection(callback_query, callback_data)

    if selected == "cancel":
        # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        await state.clear()
        await callback_query.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", parse_mode="Markdown"
        )
    elif selected:
        # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ (True –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä)
        await state.update_data(event_date=date.strftime("%Y-%m-%d"))
        await state.set_state(AdminStates.create_event_time)

        await callback_query.message.edit_text(
            f"‚úÖ –î–∞—Ç–∞: **{date.strftime('%d.%m.%Y')}**\n\n"
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "_(–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30)_",
            parse_mode="Markdown",
        )
    # –ï—Å–ª–∏ selected is False/None - —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏


@admin_events_router.message(AdminStates.create_event_time)
async def process_event_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    time_str = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    try:
        datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM\n"
            "_(–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30)_",
            parse_mode="Markdown",
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    await state.update_data(event_time=time_str)
    await state.set_state(AdminStates.create_event_segment)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    from ..handlers.handlers import get_global_var

    supabase_client = get_global_var("supabase_client")

    segments = await supabase_client.get_all_segments()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
    keyboard = []

    # –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º" –Ω–∞ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    keyboard.append(
        [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="segment:all")]
    )

    # –ö–Ω–æ–ø–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
    if segments:
        for i in range(0, len(segments), 2):
            row = []
            row.append(
                InlineKeyboardButton(
                    text=f"üë• {segments[i]}", callback_data=f"segment:{segments[i]}"
                )
            )
            if i + 1 < len(segments):
                row.append(
                    InlineKeyboardButton(
                        text=f"üë• {segments[i+1]}",
                        callback_data=f"segment:{segments[i+1]}",
                    )
                )
            keyboard.append(row)

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è: **{time_str}**\n\n"
        f"üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
        f"_(–ù–∞–π–¥–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)})_",
        reply_markup=markup,
        parse_mode="Markdown",
    )


@admin_events_router.callback_query(
    F.data.startswith("segment:"), AdminStates.create_event_segment
)
async def process_event_segment(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–∞"""
    segment_data = callback_query.data.split(":", 1)[1]

    # segment_data = "all" –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
    segment_name = None if segment_data == "all" else segment_data
    segment_display = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" if segment_data == "all" else segment_data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
    await state.update_data(segment=segment_name, segment_display=segment_display)
    await state.set_state(AdminStates.create_event_message)

    await callback_query.message.edit_text(
        f"‚úÖ –°–µ–≥–º–µ–Ω—Ç: **{segment_display}**\n\n"
        "üí¨ **–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        "üì∏ _–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é **—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ** ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ_\n\n"
        "üìÑ _–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å **PDF –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã**, –≤—ã —Å–º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ_",
        parse_mode="Markdown",
    )


@admin_events_router.message(
    AdminStates.create_event_message,
    F.media_group_id,
    F.content_type.in_({"photo", "video"}),
)
@media_group_handler
async def handle_album(messages: list[Message], state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π/–≤–∏–¥–µ–æ"""
    if not messages:
        return

    # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é
    event_message = next((msg.caption for msg in messages if msg.caption), None)
    if not event_message:
        await messages[0].answer(
            "‚ùå **–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –∞–ª—å–±–æ–º—É**\n\n"
            "üí° _–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–ª—å–±–æ–º –∑–∞–Ω–æ–≤–æ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –ª—é–±–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏_",
            parse_mode="Markdown",
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.update_data(event_message=event_message)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    await messages[0].answer(
        "üì∏ **–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª—ã...**\n\n" "üí° _–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞–ª—å–±–æ–º–∞_",
        parse_mode="Markdown",
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    from ..handlers.handlers import get_global_var

    bot = get_global_var("bot")
    ensure_temp_dir()

    data = await state.get_data()
    files = data.get("files", [])

    for i, message in enumerate(messages, 1):
        try:
            if message.photo:
                photo = message.photo[-1]
                file = await bot.get_file(photo.file_id)
                file_name = f"photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{i}.jpg"
                file_path = os.path.join(TEMP_DIR, file_name)
                await bot.download_file(file.file_path, file_path)

                files.append(
                    {
                        "type": "photo",
                        "file_path": file_path,
                        "name": file_name,
                        "stage": "with_message",
                        "has_caption": bool(message.caption),
                        "order": i,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ –∞–ª—å–±–æ–º–µ
                    }
                )

            elif message.video:
                file = await bot.get_file(message.video.file_id)
                file_name = message.video.file_name or f"{message.video.file_id}.mp4"
                file_path = os.path.join(TEMP_DIR, file_name)
                await bot.download_file(file.file_path, file_path)

                files.append(
                    {
                        "type": "video",
                        "file_path": file_path,
                        "name": file_name,
                        "stage": "with_message",
                        "has_caption": bool(message.caption),
                        "order": i,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ –∞–ª—å–±–æ–º–µ
                    }
                )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤
            if i % 5 == 0:
                await messages[0].answer(
                    f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {i}/{len(messages)}", parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {i}: {e}")
            continue

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    await state.update_data(files=files)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    await state.set_state(AdminStates.create_event_files)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–æ–≤", callback_data="files:skip"
                )
            ]
        ]
    )

    await messages[0].answer(
        f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –∏ {len(files)} —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n"
        "üìé **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        "üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "üìÅ –§–∞–π–ª—ã –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤\n"
        "üé• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
        "üñº –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ\n\n"
        "üí° _–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏_\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç:",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


@admin_events_router.message(
    AdminStates.create_event_message, F.text | F.photo | F.video
)
async def process_event_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ"""
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –¥—Ä—É–≥–æ–π handler
    if message.media_group_id:
        return

    event_message = message.text or message.caption or ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    if not event_message.strip():
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.update_data(event_message=event_message)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    data = await state.get_data()
    files = data.get("files", [])

    if message.photo or message.video:
        import os

        from ..handlers.handlers import get_global_var

        bot = get_global_var("bot")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        ensure_temp_dir()

        if message.photo:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            file = await bot.get_file(photo.file_id)
            file_name = f"photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            file_path = os.path.join(TEMP_DIR, file_name)
            await bot.download_file(file.file_path, file_path)

            files.append(
                {
                    "type": "photo",
                    "file_path": file_path,
                    "name": file_name,
                    "stage": "with_message",
                    "has_caption": bool(message.caption),
                }
            )
            logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path} (with_message)")

        elif message.video:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            file = await bot.get_file(message.video.file_id)
            file_name = message.video.file_name or f"{message.video.file_id}.mp4"
            file_path = os.path.join(TEMP_DIR, file_name)
            await bot.download_file(file.file_path, file_path)

            files.append(
                {
                    "type": "video",
                    "file_path": file_path,
                    "name": file_name,
                    "stage": "with_message",
                    "has_caption": bool(message.caption),
                }
            )
            logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path} (with_message)")

    await state.update_data(files=files)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–∞–π–ª–æ–≤
    await state.set_state(AdminStates.create_event_files)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–æ–≤", callback_data="files:skip"
                )
            ]
        ]
    )

    await message.answer(
        "‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!**\n\n"
        "üìé **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        "üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "üìÅ –§–∞–π–ª—ã –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤\n"
        "üé• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
        "üñº –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ\n\n"
        "üí° _–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏_\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç:",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


@admin_events_router.message(
    AdminStates.create_event_files, F.document | F.photo | F.video
)
async def process_event_files(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
    import os

    from ..handlers.handlers import get_global_var

    data = await state.get_data()
    files = data.get("files", [])
    bot = get_global_var("bot")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    ensure_temp_dir()

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
    if message.document:
        file = await bot.get_file(message.document.file_id)
        file_path = os.path.join(TEMP_DIR, message.document.file_name)
        await bot.download_file(file.file_path, file_path)

        files.append(
            {
                "type": "document",
                "file_path": file_path,
                "name": message.document.file_name,
                "stage": "after_message",
            }
        )
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path} (after_message)")

    elif message.photo:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_name = f"photo_{datetime.now().strftime('%H%M%S')}.jpg"
        file_path = os.path.join(TEMP_DIR, file_name)
        await bot.download_file(file.file_path, file_path)

        files.append(
            {
                "type": "photo",
                "file_path": file_path,
                "name": file_name,
                "stage": "after_message",
            }
        )
        logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path} (after_message)")

    elif message.video:
        file = await bot.get_file(message.video.file_id)
        file_name = (
            message.video.file_name or f"{message.video.file_id}.mp4"
        )  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∏–ª–∏ file_id
        file_path = os.path.join(TEMP_DIR, file_name)
        await bot.download_file(file.file_path, file_path)

        files.append(
            {
                "type": "video",
                "file_path": file_path,
                "name": file_name,
                "stage": "after_message",
            }
        )
        logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path} (after_message)")

    await state.update_data(files=files)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", callback_data="files:done"
                )
            ]
        ]
    )

    await message.answer(
        f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω (–≤—Å–µ–≥–æ: {len(files)})\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        reply_markup=keyboard,
    )


@admin_events_router.callback_query(
    F.data.startswith("files:"), AdminStates.create_event_files
)
async def process_files_action(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∞–π–ª–∞–º–∏"""
    action = callback_query.data.split(":", 1)[1]

    data = await state.get_data()
    files = data.get("files", [])

    if action == "skip" and not files:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç –∏ –Ω–∞–∂–∞–ª–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–æ–≤" - –æ—á–∏—â–∞–µ–º
        files = []
        await state.update_data(files=files)
    elif action == "skip":
        # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã —É–∂–µ –µ—Å—Ç—å - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
        logger.info(f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å {len(files)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.set_state(AdminStates.create_event_confirm)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
    event_date = data.get("event_date")
    event_time = data.get("event_time")
    naive_datetime = datetime.strptime(f"{event_date} {event_time}", "%Y-%m-%d %H:%M")
    moscow_datetime = MOSCOW_TZ.localize(naive_datetime)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    summary = (
        f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è**\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: **{data.get('event_name')}**\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: **{moscow_datetime.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)**\n"
        f"üë• –°–µ–≥–º–µ–Ω—Ç: **{data.get('segment_display')}**\n"
        f"üìé –§–∞–π–ª–æ–≤: **{len(files)}**\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm:yes"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm:no"),
            ],
            [InlineKeyboardButton(text="üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview:show")],
        ]
    )

    await callback_query.message.edit_text(
        summary, reply_markup=keyboard, parse_mode="Markdown"
    )


@admin_events_router.callback_query(
    F.data == "preview:show", AdminStates.create_event_confirm
)
async def show_event_preview(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è"""
    from aiogram.types import FSInputFile, InputMediaPhoto, InputMediaVideo

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    files = data.get("files", [])
    logger.info(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –ø–æ–ª—É—á–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await callback_query.message.delete()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    files_with_msg = [f for f in files if f.get("stage") == "with_message"]
    files_after = [f for f in files if f.get("stage") == "after_message"]
    logger.info(
        f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {len(files_with_msg)} —Ñ–∞–π–ª–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, {len(files_after)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    )

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    if files_with_msg:
        media_group = []
        first_file = True

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        sorted_files = sorted(files_with_msg, key=lambda x: x.get("order", 0))

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        for file_info in sorted_files:
            logger.info(
                f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É: {file_info['type']} —Ñ–∞–π–ª {file_info['file_path']}"
            )
            try:
                if file_info["type"] == "photo":
                    media = InputMediaPhoto(
                        media=FSInputFile(file_info["file_path"]),
                        caption=data.get("event_message") if first_file else None,
                        parse_mode="Markdown" if first_file else None,
                    )
                    media_group.append(media)
                    first_file = False
                elif file_info["type"] == "video":
                    media = InputMediaVideo(
                        media=FSInputFile(file_info["file_path"]),
                        caption=data.get("event_message") if first_file else None,
                        parse_mode="Markdown" if first_file else None,
                    )
                    media_group.append(media)
                    first_file = False
                logger.info("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É: {e}")

        if media_group:
            try:
                from ..handlers.handlers import get_global_var

                bot = get_global_var("bot")
                await bot.send_media_group(
                    chat_id=callback_query.message.chat.id, media=media_group
                )
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –∏–∑ {len(media_group)} —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                first_file = True
                for media in media_group:
                    try:
                        if isinstance(media, InputMediaPhoto):
                            await callback_query.message.answer_photo(
                                photo=media.media,
                                caption=(
                                    data.get("event_message") if first_file else None
                                ),
                                parse_mode="Markdown" if first_file else None,
                            )
                        elif isinstance(media, InputMediaVideo):
                            await callback_query.message.answer_video(
                                video=media.media,
                                caption=(
                                    data.get("event_message") if first_file else None
                                ),
                                parse_mode="Markdown" if first_file else None,
                            )
                        first_file = False
                    except Exception as e2:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e2}")
    else:
        # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback_query.message.answer(
            data.get("event_message"), parse_mode="Markdown"
        )

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file_info in files_after:
        if file_info["type"] == "document":
            await callback_query.message.answer_document(
                FSInputFile(file_info["file_path"])
            )
        elif file_info["type"] == "photo":
            await callback_query.message.answer_photo(
                FSInputFile(file_info["file_path"])
            )
        elif file_info["type"] == "video":
            await callback_query.message.answer_video(
                FSInputFile(file_info["file_path"])
            )

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º (—Ç–∞–∫–æ–µ –∂–µ –∫–∞–∫ –±—ã–ª–æ)
    event_date = data.get("event_date")
    event_time = data.get("event_time")
    naive_datetime = datetime.strptime(f"{event_date} {event_time}", "%Y-%m-%d %H:%M")
    moscow_datetime = MOSCOW_TZ.localize(naive_datetime)

    summary = (
        f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è**\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: **{data.get('event_name')}**\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: **{moscow_datetime.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)**\n"
        f"üë• –°–µ–≥–º–µ–Ω—Ç: **{data.get('segment_display')}**\n"
        f"üìé –§–∞–π–ª–æ–≤: **{len(files)}**\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm:yes"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm:no"),
            ],
            [InlineKeyboardButton(text="üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview:show")],
        ]
    )

    await callback_query.message.answer(
        summary, reply_markup=keyboard, parse_mode="Markdown"
    )


@admin_events_router.callback_query(
    F.data.startswith("confirm:"), AdminStates.create_event_confirm
)
async def process_event_confirmation(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    action = callback_query.data.split(":", 1)[1]

    if action == "no":
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        await cleanup_temp_files(state)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await callback_query.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", parse_mode="Markdown"
        )
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    data = await state.get_data()

    from ..handlers.handlers import get_global_var

    supabase_client = get_global_var("supabase_client")

    # –§–æ—Ä–º–∏—Ä—É–µ–º datetime –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    event_date = data.get("event_date")
    event_time = data.get("event_time")

    # –°–æ–∑–¥–∞–µ–º naive datetime –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    naive_datetime = datetime.strptime(f"{event_date} {event_time}", "%Y-%m-%d %H:%M")

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
    moscow_datetime = MOSCOW_TZ.localize(naive_datetime)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    utc_datetime = moscow_datetime.astimezone(pytz.UTC)

    logger.info(
        f"‚è∞ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: –ú–æ—Å–∫–≤–∞={moscow_datetime.strftime('%d.%m.%Y %H:%M %Z')}, UTC={utc_datetime.strftime('%d.%m.%Y %H:%M %Z')}"
    )

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
        event = await supabase_client.save_admin_event(
            event_name=data.get("event_name"),
            event_data={
                "segment": data.get("segment"),
                "message": data.get("event_message"),
                "files": [],  # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            },
            scheduled_datetime=utc_datetime,
        )
        event_id = event["id"]
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å ID {event_id}")

        # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ Storage
        import os

        files = data.get("files", [])
        uploaded_files = []

        for file_info in files:
            try:
                # –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                with open(file_info["file_path"], "rb") as f:
                    file_bytes = f.read()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞
                file_id = generate_file_id()

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
                storage_info = await supabase_client.upload_event_file(
                    event_id=event_id,
                    file_data=file_bytes,
                    original_name=file_info["name"],
                    file_id=file_id,
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                uploaded_files.append(
                    {
                        "type": file_info["type"],
                        "storage_path": storage_info["storage_path"],
                        "original_name": file_info[
                            "name"
                        ],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∏–∑ file_info
                        "stage": file_info["stage"],
                        "has_caption": file_info.get("has_caption", False),
                        "order": file_info.get("order", 0),
                    }
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(file_info["file_path"])
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_info['file_path']}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_info['name']}: {e}")
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–±—ã—Ç–∏—è –∏ —Å–∞–º–æ —Å–æ–±—ã—Ç–∏–µ
                try:
                    await supabase_client.delete_event_files(event_id)
                    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                except Exception:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è")
                raise

        logger.info(
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤ –≤ Storage –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
        event_data = {
            "segment": data.get("segment"),
            "message": data.get("event_message"),
            "files": uploaded_files,
        }

        # TODO: –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        (
            supabase_client.client.table("scheduled_events")
            .update({"event_data": json.dumps(event_data, ensure_ascii=False)})
            .eq("id", event_id)
            .execute()
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        raise

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    await callback_query.message.edit_text(
        f"‚úÖ **–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: `{data.get('event_name')}`\n"
        f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: **{moscow_datetime.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)**\n"
        f"üë• –°–µ–≥–º–µ–Ω—Ç: **{data.get('segment_display')}**\n\n"
        f"üí° _–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è_",
        parse_mode="Markdown",
    )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await cleanup_temp_files(state)
    await state.set_state(AdminStates.admin_mode)


@admin_events_router.message(Command(commands=["—Å–ø–∏—Å–æ–∫_—Å–æ–±—ã—Ç–∏–π", "list_events"]))
async def list_events_command(message: Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    supabase_client = get_global_var("supabase_client")

    if not admin_manager.is_admin(message.from_user.id):
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending —Å–æ–±—ã—Ç–∏—è (–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –Ω–µ–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
        events = await supabase_client.get_admin_events(status="pending")

        if not events:
            await message.answer(
                "üìã **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/create_event` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è",
                parse_mode="Markdown",
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        text_parts = [f"üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è** ({len(events)})\n"]

        for idx, event in enumerate(events, 1):
            event_name = event["event_type"]

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            utc_time = datetime.fromisoformat(
                event["scheduled_at"].replace("Z", "+00:00")
            )
            moscow_time = utc_time.astimezone(MOSCOW_TZ)

            # –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            text_parts.append(
                f"üìå **{idx}.** `{event_name}`\n"
                f"    üïê {moscow_time.strftime('%d.%m.%Y –≤ %H:%M')} –ú–°–ö\n"
            )

        text_parts.append(
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üí° _–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è_\n"
            "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å: `/delete_event –Ω–∞–∑–≤–∞–Ω–∏–µ`"
        )

        await message.answer("\n".join(text_parts), parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:\n`{str(e)}`", parse_mode="Markdown"
        )


@admin_events_router.message(Command(commands=["—É–¥–∞–ª–∏—Ç—å_—Å–æ–±—ã—Ç–∏–µ", "delete_event"]))
async def delete_event_command(message: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    supabase_client = get_global_var("supabase_client")

    if not admin_manager.is_admin(message.from_user.id):
        return

    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
            "`/delete_event –Ω–∞–∑–≤–∞–Ω–∏–µ`\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π",
            parse_mode="Markdown",
        )
        return

    event_name = parts[1].strip()

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ ID
        response = (
            supabase_client.client.table("scheduled_events")
            .select("id")
            .eq("event_type", event_name)
            .eq("event_category", "admin_event")
            .eq("status", "pending")
            .execute()
        )

        if response.data:
            event_id = response.data[0]["id"]

            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ Storage
            try:
                await supabase_client.delete_event_files(event_id)
                logger.info(
                    f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã —Å–æ–±—ã—Ç–∏—è '{event_name}' (ID: {event_id}) –∏–∑ Storage"
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è –∏–∑ Storage: {e}")

            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ
            supabase_client.client.table("scheduled_events").update(
                {"status": "cancelled"}
            ).eq("id", event_id).execute()

            await message.answer(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ `{event_name}` —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ\n"
                f"_(—Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ Storage)_",
                parse_mode="Markdown",
            )
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ '{event_name}' (ID: {event_id})")
        else:
            await message.answer(
                f"‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º `{event_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
                parse_mode="Markdown",
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:\n`{str(e)}`", parse_mode="Markdown"
        )
