"""
EventRouter –¥–ª—è Smart Bot Factory - —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π, –∑–∞–¥–∞—á –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

import logging
from typing import Any, Callable, Dict, Union

logger = logging.getLogger(__name__)


class EventRouter:
    """
    –†–æ—É—Ç–µ—Ä –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π, –∑–∞–¥–∞—á –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """

    def __init__(self, name: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞

        Args:
            name: –ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.name = name or f"EventRouter_{id(self)}"
        self._event_handlers: Dict[str, Dict[str, Any]] = {}
        self._scheduled_tasks: Dict[str, Dict[str, Any]] = {}
        self._global_handlers: Dict[str, Dict[str, Any]] = {}

        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω —Ä–æ—É—Ç–µ—Ä: {self.name}")

    def event_handler(
        self,
        event_type: str,
        notify: bool = False,
        once_only: bool = True,
        send_ai_response: bool = True,
    ):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–æ—É—Ç–µ—Ä–µ

        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤
            once_only: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            send_ai_response: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        """

        def decorator(func: Callable) -> Callable:
            self._event_handlers[event_type] = {
                "handler": func,
                "name": func.__name__,
                "notify": notify,
                "once_only": once_only,
                "send_ai_response": send_ai_response,
                "router": self.name,
            }

            logger.info(
                f"üìù –†–æ—É—Ç–µ—Ä {self.name}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è '{event_type}': {func.__name__}"
            )

            from functools import wraps

            @wraps(func)
            async def wrapper(*args, **kwargs):
                try:
                    result = await func(*args, **kwargs)

                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ notify –∏ send_ai_response –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                    if isinstance(result, dict):
                        result["notify"] = notify
                        result["send_ai_response"] = send_ai_response
                    else:
                        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                        result = {
                            "status": "success",
                            "result": result,
                            "notify": notify,
                            "send_ai_response": send_ai_response,
                        }

                    return result
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ '{event_type}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name}: {e}"
                    )
                    raise

            return wrapper

        return decorator

    def schedule_task(
        self,
        task_name: str,
        notify: bool = False,
        notify_time: str = "after",  # 'after' –∏–ª–∏ 'before'
        smart_check: bool = True,
        once_only: bool = True,
        delay: Union[str, int] = None,
        event_type: Union[str, Callable] = None,
        send_ai_response: bool = True,
    ):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ä–æ—É—Ç–µ—Ä–µ

        Args:
            task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤
            notify_time: –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º:
                - 'before': –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
                - 'after': –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            smart_check: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —É–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            once_only: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            delay: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1h 30m", "45m", 3600) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
            event_type: –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è - –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û:
                - str: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'appointment_booking')
                - Callable: –§—É–Ω–∫—Ü–∏—è async def(user_id, user_data) -> datetime
            send_ai_response: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        """

        def decorator(func: Callable) -> Callable:
            # –í—Ä–µ–º—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ
            if delay is None:
                raise ValueError(
                    f"–î–ª—è –∑–∞–¥–∞—á–∏ '{task_name}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name} –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä delay"
                )

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
            from .decorators import parse_time_string

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            try:
                default_delay_seconds = parse_time_string(delay)
                if event_type:
                    logger.info(
                        f"‚è∞ –†–æ—É—Ç–µ—Ä {self.name}: –∑–∞–¥–∞—á–∞ '{task_name}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ '{event_type}' –∑–∞ {delay} ({default_delay_seconds}—Å)"
                    )
                else:
                    logger.info(
                        f"‚è∞ –†–æ—É—Ç–µ—Ä {self.name}: –∑–∞–¥–∞—á–∞ '{task_name}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π: {delay} ({default_delay_seconds}—Å)"
                    )
            except ValueError as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_name}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name}: {e}"
                )
                raise

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å notify_time
            if notify_time not in ["before", "after"]:
                raise ValueError(f"notify_time –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'before' –∏–ª–∏ 'after', –ø–æ–ª—É—á–µ–Ω–æ: {notify_time}")

            self._scheduled_tasks[task_name] = {
                "handler": func,
                "name": func.__name__,
                "notify": notify,
                "notify_time": notify_time,  # –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                "smart_check": smart_check,
                "once_only": once_only,
                "router": self.name,
                "default_delay": default_delay_seconds,
                "event_type": event_type,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                "send_ai_response": send_ai_response,
            }

            if event_type:
                logger.info(
                    f"‚è∞ –†–æ—É—Ç–µ—Ä {self.name}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{task_name}' –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event_type}': {func.__name__}"
                )
            else:
                logger.info(
                    f"‚è∞ –†–æ—É—Ç–µ—Ä {self.name}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ '{task_name}': {func.__name__}"
                )

            from functools import wraps

            @wraps(func)
            async def wrapper(*args, **kwargs):
                try:
                    result = await func(*args, **kwargs)

                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ notify –∏ send_ai_response –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                    if isinstance(result, dict):
                        result["notify"] = notify
                        result["send_ai_response"] = send_ai_response
                    else:
                        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                        result = {
                            "status": "success",
                            "result": result,
                            "notify": notify,
                            "send_ai_response": send_ai_response,
                        }

                    return result
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ '{task_name}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name}: {e}"
                    )
                    raise

            return wrapper

        return decorator

    def global_handler(
        self,
        handler_type: str,
        notify: bool = False,
        once_only: bool = True,
        delay: Union[str, int] = None,
        event_type: Union[str, Callable] = None,
        send_ai_response: bool = True,
    ):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ä–æ—É—Ç–µ—Ä–µ

        Args:
            handler_type: –¢–∏–ø –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤
            once_only: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            delay: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1h 30m", "45m", 3600) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
            send_ai_response: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        """

        def decorator(func: Callable) -> Callable:
            # –í—Ä–µ–º—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ
            if delay is None:
                raise ValueError(
                    f"–î–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ '{handler_type}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name} –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä delay"
                )

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
            from .decorators import parse_time_string

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            try:
                default_delay_seconds = parse_time_string(delay)
                logger.info(
                    f"üåç –†–æ—É—Ç–µ—Ä {self.name}: –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π: {delay} ({default_delay_seconds}—Å)"
                )
            except ValueError as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ '{handler_type}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name}: {e}"
                )
                raise

            self._global_handlers[handler_type] = {
                "handler": func,
                "name": func.__name__,
                "notify": notify,
                "once_only": once_only,
                "router": self.name,
                "default_delay": default_delay_seconds,
                "event_type": event_type,  # –î–æ–±–∞–≤–ª—è–µ–º event_type –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                "send_ai_response": send_ai_response,
            }

            logger.info(
                f"üåç –†–æ—É—Ç–µ—Ä {self.name}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}': {func.__name__}"
            )

            from functools import wraps

            @wraps(func)
            async def wrapper(*args, **kwargs):
                try:
                    result = await func(*args, **kwargs)

                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ notify –∏ send_ai_response –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                    if isinstance(result, dict):
                        result["notify"] = notify
                        result["send_ai_response"] = send_ai_response
                    else:
                        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                        result = {
                            "status": "success",
                            "result": result,
                            "notify": notify,
                            "send_ai_response": send_ai_response,
                        }

                    return result
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ '{handler_type}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name}: {e}"
                    )
                    raise

            return wrapper

        return decorator

    def get_event_handlers(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ä–æ—É—Ç–µ—Ä–∞"""
        return self._event_handlers.copy()

    def get_scheduled_tasks(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–æ—É—Ç–µ—Ä–∞"""
        return self._scheduled_tasks.copy()

    def get_global_handlers(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞"""
        return self._global_handlers.copy()

    def get_all_handlers(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞"""
        all_handlers = {}
        all_handlers.update(self._event_handlers)
        all_handlers.update(self._scheduled_tasks)
        all_handlers.update(self._global_handlers)
        return all_handlers

    def include_router(self, router: "EventRouter"):
        """
        –í–∫–ª—é—á–∞–µ—Ç –¥—Ä—É–≥–æ–π —Ä–æ—É—Ç–µ—Ä –≤ —Ç–µ–∫—É—â–∏–π

        Args:
            router: EventRouter –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        for event_type, handler_info in router.get_event_handlers().items():
            if event_type in self._event_handlers:
                logger.warning(
                    f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π '{event_type}' –º–µ–∂–¥—É —Ä–æ—É—Ç–µ—Ä–∞–º–∏ {self.name} –∏ {router.name}"
                )
            self._event_handlers[event_type] = handler_info

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task_name, task_info in router.get_scheduled_tasks().items():
            if task_name in self._scheduled_tasks:
                logger.warning(
                    f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–¥–∞—á '{task_name}' –º–µ–∂–¥—É —Ä–æ—É—Ç–µ—Ä–∞–º–∏ {self.name} –∏ {router.name}"
                )
            self._scheduled_tasks[task_name] = task_info

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler_type, handler_info in router.get_global_handlers().items():
            if handler_type in self._global_handlers:
                logger.warning(
                    f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ '{handler_type}' –º–µ–∂–¥—É —Ä–æ—É—Ç–µ—Ä–∞–º–∏ {self.name} –∏ {router.name}"
                )
            self._global_handlers[handler_type] = handler_info

        logger.info(f"üîó –†–æ—É—Ç–µ—Ä {self.name}: –≤–∫–ª—é—á–µ–Ω —Ä–æ—É—Ç–µ—Ä {router.name}")

    def __repr__(self):
        return f"EventRouter(name='{self.name}', events={len(self._event_handlers)}, tasks={len(self._scheduled_tasks)}, globals={len(self._global_handlers)})"
