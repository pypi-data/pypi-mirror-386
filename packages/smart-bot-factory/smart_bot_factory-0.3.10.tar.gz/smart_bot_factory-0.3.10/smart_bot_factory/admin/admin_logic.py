# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π admin_logic.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∏–∞–ª–æ–≥–æ–≤

import logging

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
from ..core.states import AdminStates

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
admin_router = Router()


def setup_admin_handlers(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(admin_router)


@admin_router.message(Command(commands=["–æ—Ç–º–µ–Ω–∞", "cancel"]))
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ state"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π state
    current_state = await state.get_state()

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    if current_state and current_state.startswith("AdminStates:create_event"):
        from .admin_events import cleanup_temp_files

        await cleanup_temp_files(state)

    # –û—á–∏—â–∞–µ–º state
    await state.clear()

    if current_state:
        logger.info(
            f"State –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {current_state}"
        )

        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º
        if admin_manager.is_admin(message.from_user.id):
            await state.set_state(AdminStates.admin_mode)
            await message.answer(
                "‚úÖ –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n"
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
                parse_mode="Markdown",
            )
        else:
            await message.answer(
                "‚úÖ –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã",
                parse_mode="Markdown",
            )
    else:
        await message.answer(
            "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã", parse_mode="Markdown"
        )


async def admin_start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")

    await state.set_state(AdminStates.admin_mode)

    admin_status = admin_manager.get_admin_mode_text(message.from_user.id)

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [
                InlineKeyboardButton(
                    text="üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", callback_data="admin_active_chats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –†–µ–∂–∏–º –ø–æ–ª—å–∑.", callback_data="admin_toggle_mode"
                )
            ],
        ]
    )

    welcome_text = f"""
{admin_status}

üéõÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/—Å—Ç–∞—Ç` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏
‚Ä¢ `/–∏—Å—Ç–æ—Ä–∏—è user_id` - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/—á–∞—Ç user_id` - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
‚Ä¢ `/—á–∞—Ç—ã` - –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
‚Ä¢ `/—Å—Ç–æ–ø` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
‚Ä¢ `/–∞–¥–º–∏–Ω` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º
‚Ä¢ `/–æ—Ç–º–µ–Ω–∞` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üìÖ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏:**
‚Ä¢ `/—Å–æ–∑–¥–∞—Ç—å_—Å–æ–±—ã—Ç–∏–µ` - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
‚Ä¢ `/—Å–ø–∏—Å–æ–∫_—Å–æ–±—ã—Ç–∏–π` - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
‚Ä¢ `/—É–¥–∞–ª–∏—Ç—å_—Å–æ–±—ã—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ` - –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
"""

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")


@admin_router.message(Command(commands=["—Å—Ç–∞—Ç", "stats"]))
async def admin_stats_handler(message: Message, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    analytics_manager = get_global_var("analytics_manager")

    if not admin_manager.is_admin(message.from_user.id):
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        funnel_stats = await analytics_manager.get_funnel_stats(7)
        events_stats = await analytics_manager.get_events_stats(7)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        funnel_text = analytics_manager.format_funnel_stats(funnel_stats)
        events_text = analytics_manager.format_events_stats(events_stats)

        full_text = f"{funnel_text}\n\n{events_text}"

        await message.answer(full_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.message(Command(commands=["–∏—Å—Ç–æ—Ä–∏—è", "history"]))
async def admin_history_handler(message: Message, state: FSMContext):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    analytics_manager = get_global_var("analytics_manager")

    if not admin_manager.is_admin(message.from_user.id):
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /–∏—Å—Ç–æ—Ä–∏—è 123456789")
            return

        user_id = int(parts[1])

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–Ω–æ–ø–∫–∞)
        journey = await analytics_manager.get_user_journey(user_id)

        if not journey:
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞
        history_text = analytics_manager.format_user_journey(user_id, journey)

        await message.answer(history_text)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")


@admin_router.message(Command(commands=["—á–∞—Ç", "chat"]))
async def admin_chat_handler(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    supabase_client = get_global_var("supabase_client")
    conversation_manager = get_global_var("conversation_manager")

    if not admin_manager.is_admin(message.from_user.id):
        return

    try:
        # –ü–∞—Ä—Å–∏–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /—á–∞—Ç 123456789")
            return

        user_id = int(parts[1])
        admin_id = message.from_user.id

        logger.info(
            f"üëë –ê–¥–º–∏–Ω {admin_id} —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_info = await supabase_client.get_active_session(user_id)
        if not session_info:
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            logger.warning(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            return

        logger.info(
            f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {session_info['id']}"
        )

        # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞...")
        success = await conversation_manager.start_admin_conversation(admin_id, user_id)

        if success:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await state.set_state(AdminStates.in_conversation)
            await state.update_data(conversation_user_id=user_id)

            await message.answer(
                f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–∞—á–∞—Ç\nüí¨ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚èπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Å—Ç–æ–ø –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            )
            logger.info(
                "‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –∞–¥–º–∏–Ω –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ in_conversation"
            )
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
            )
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞")


@admin_router.message(Command(commands=["—á–∞—Ç—ã", "chats"]))
async def admin_active_chats_command(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∞–¥–º–∏–Ω–æ–≤"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    conversation_manager = get_global_var("conversation_manager")

    if not admin_manager.is_admin(message.from_user.id):
        return

    try:
        conversations = await conversation_manager.get_active_conversations()
        formatted_text = conversation_manager.format_active_conversations(conversations)

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º parse_mode='Markdown' —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        await message.answer(formatted_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")


@admin_router.message(Command(commands=["—Å—Ç–æ–ø", "stop"]))
async def admin_stop_handler(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    conversation_manager = get_global_var("conversation_manager")

    if not admin_manager.is_admin(message.from_user.id):
        return

    try:
        admin_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
        conversation = await conversation_manager.get_admin_active_conversation(
            admin_id
        )

        if conversation:
            user_id = conversation["user_id"]
            logger.info(
                f"üõë –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∞ {admin_id} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
            )

            success = await conversation_manager.end_admin_conversation(admin_id)

            if success:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
                await state.set_state(AdminStates.admin_mode)
                await state.update_data(conversation_user_id=None)

                await message.answer(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                logger.info("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –∞–¥–º–∏–Ω –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ admin_mode")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞")
            logger.info(f"‚ùå –£ –∞–¥–º–∏–Ω–∞ {admin_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")


@admin_router.message(Command(commands=["–∞–¥–º–∏–Ω", "admin"]))
async def admin_toggle_handler(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")

    if not admin_manager.is_admin(message.from_user.id):
        return

    new_mode = admin_manager.toggle_admin_mode(message.from_user.id)

    if new_mode:
        # –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞
        await admin_start_handler(message, state)
    else:
        # –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()
        await message.answer(
            "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞"
        )


@admin_router.message(Command("debug_chat"))
async def debug_chat_handler(message: Message, state: FSMContext):
    """–û—Ç–ª–∞–¥–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–æ–≤"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    conversation_manager = get_global_var("conversation_manager")
    supabase_client = get_global_var("supabase_client")

    if not admin_manager.is_admin(message.from_user.id):
        return

    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /debug_chat USER_ID")
        return

    try:
        user_id = int(parts[1])

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        conversation = await conversation_manager.is_user_in_admin_chat(user_id)

        debug_info = [
            f"üîç –û–¢–õ–ê–î–ö–ê –î–ò–ê–õ–û–ì–ê –° {user_id}",
            "",
            f"üìä –î–∏–∞–ª–æ–≥ –≤ –ë–î: {'‚úÖ' if conversation else '‚ùå'}",
        ]

        if conversation:
            debug_info.extend(
                [
                    f"üëë –ê–¥–º–∏–Ω: {conversation['admin_id']}",
                    f"üïê –ù–∞—á–∞—Ç: {conversation['started_at']}",
                ]
            )

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_info = await supabase_client.get_active_session(user_id)
        debug_info.append(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {'‚úÖ' if session_info else '‚ùå'}")

        if session_info:
            debug_info.append(f"üìù ID —Å–µ—Å—Å–∏–∏: {session_info['id']}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω)
        debug_info.append("")
        debug_info.append(
            "‚ÑπÔ∏è –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ"
        )

        await message.answer("\n".join(debug_info))

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")


@admin_router.callback_query(F.data.startswith("admin_"))
async def admin_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–æ–≤"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    analytics_manager = get_global_var("analytics_manager")
    conversation_manager = get_global_var("conversation_manager")

    if not admin_manager.is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = callback.data

    try:
        if data == "admin_stats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            funnel_stats = await analytics_manager.get_funnel_stats(7)
            events_stats = await analytics_manager.get_events_stats(7)

            funnel_text = analytics_manager.format_funnel_stats(funnel_stats)
            events_text = analytics_manager.format_events_stats(events_stats)

            await callback.message.answer(f"{funnel_text}\n\n{events_text}")

        elif data == "admin_toggle_mode":
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
            new_mode = admin_manager.toggle_admin_mode(callback.from_user.id)
            mode_text = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if new_mode else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            await callback.answer(f"–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω: {mode_text}")

            if not new_mode:
                await state.clear()
                await callback.message.answer("üîÑ –¢–µ–ø–µ—Ä—å –≤—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        elif data == "admin_active_chats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            conversations = await conversation_manager.get_active_conversations()
            formatted_text = conversation_manager.format_active_conversations(
                conversations
            )

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º parse_mode='Markdown'
            await callback.message.answer(formatted_text)

        elif data.startswith("admin_history_"):
            user_id = int(data.split("_")[2])
            journey = await analytics_manager.get_user_journey(user_id)
            history_text = analytics_manager.format_user_journey(user_id, journey)
            await callback.message.answer(history_text)

        elif data.startswith("admin_end_"):
            user_id = int(data.split("_")[2])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            conversation = await conversation_manager.get_admin_active_conversation(
                callback.from_user.id
            )

            if conversation and conversation["user_id"] == user_id:
                await conversation_manager.end_admin_conversation(callback.from_user.id)

                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(AdminStates.admin_mode)
                await state.update_data(conversation_user_id=None)

                await callback.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                await callback.message.answer(
                    f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω"
                )
                logger.info(
                    "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –∞–¥–º–∏–Ω –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ admin_mode"
                )
            else:
                await callback.answer("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        elif data.startswith("admin_chat_"):
            user_id = int(data.split("_")[2])
            admin_id = callback.from_user.id

            success = await conversation_manager.start_admin_conversation(
                admin_id, user_id
            )
            if success:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(AdminStates.in_conversation)
                await state.update_data(conversation_user_id=user_id)

                await callback.answer("–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç")
                await callback.message.answer(
                    f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–∞—á–∞—Ç"
                )
                logger.info(
                    "‚úÖ –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –∞–¥–º–∏–Ω –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ in_conversation"
                )
            else:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@admin_router.message(
    StateFilter(AdminStates.admin_mode, AdminStates.in_conversation),
    F.text,
    lambda message: not message.text.startswith("/"),
)
async def admin_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤"""
    from ..handlers.handlers import get_global_var

    admin_manager = get_global_var("admin_manager")
    conversation_manager = get_global_var("conversation_manager")

    if not admin_manager.is_admin(message.from_user.id):
        return

    try:
        logger.info(
            f"üëë –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: '{message.text}'"
        )

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        handled = await conversation_manager.route_admin_message(message, state)

        if handled:
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        else:
            # –ù–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            logger.info("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É")
            await message.answer(
                """
üëë **–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/—Å—Ç–∞—Ç` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏
‚Ä¢ `/–∏—Å—Ç–æ—Ä–∏—è user_id` - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
‚Ä¢ `/—á–∞—Ç user_id` - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
‚Ä¢ `/—Å—Ç–æ–ø` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
‚Ä¢ `/–∞–¥–º–∏–Ω` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º

üí° –ï—Å–ª–∏ –≤—ã –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
""",
                parse_mode="Markdown",
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
