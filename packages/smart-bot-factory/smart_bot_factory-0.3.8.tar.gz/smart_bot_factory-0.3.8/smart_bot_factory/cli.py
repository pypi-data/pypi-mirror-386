"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Smart Bot Factory
"""

import os
import shutil
import subprocess
import sys
from pathlib import Path

import click
from project_root_finder import root

PROJECT_ROOT = root


@click.group()
def cli():
    """Smart Bot Factory - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤"""
    pass


@cli.command()
@click.argument("bot_id")
@click.argument("template", required=False, default="base")
def create(bot_id: str, template: str = "base"):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    success = create_new_bot_structure(template, bot_id)
    if not success:
        sys.exit(1)


@cli.command()
def list():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤"""
    bots = list_bots_in_bots_folder()
    if not bots:
        click.echo("ü§ñ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤")
        return

    click.echo("ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:")
    for bot in sorted(bots):
        click.echo(f"  üì± {bot}")


@cli.command()
@click.argument("bot_id")
def run(bot_id: str):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot_path = PROJECT_ROOT / Path("bots") / bot_id
        if not bot_path.exists():
            raise click.ClickException(f"–ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ bots/")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–æ—Ç–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        bot_file = PROJECT_ROOT / Path(f"{bot_id}.py")
        if not bot_file.exists():
            raise click.ClickException(
                f"–§–∞–π–ª {bot_id}.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
        env_file = bot_path / ".env"
        if not env_file.exists():
            raise click.ClickException(f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
        from dotenv import load_dotenv

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
        sys.path.insert(0, str(PROJECT_ROOT))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
        load_dotenv(env_file)
        click.echo(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_file}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["BOT_ID"] = bot_id

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º
        prompts_dir = bot_path / "prompts"
        if prompts_dir.exists():
            os.environ["PROMT_FILES_DIR"] = str(prompts_dir)
            click.echo(f"üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º: {prompts_dir}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        click.echo(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ {bot_id}...")
        subprocess.run(
            [sys.executable, str(bot_file)], check=True, cwd=str(PROJECT_ROOT)
        )

    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", err=True)
        sys.exit(1)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.argument("bot_id")
@click.option("--file", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
@click.option("-v", "--verbose", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
@click.option("--max-concurrent", default=5, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤")
def test(bot_id: str, file: str = None, verbose: bool = False, max_concurrent: int = 5):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot_path = PROJECT_ROOT / "bots" / bot_id
        if not bot_path.exists():
            raise click.ClickException(
                f"–ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {PROJECT_ROOT}/bots/"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤
        tests_dir = bot_path / "tests"
        if not tests_dir.exists():
            click.echo(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ {bot_id}")
            return

        # –ò—â–µ–º YAML —Ñ–∞–π–ª—ã —Å —Ç–µ—Å—Ç–∞–º–∏
        yaml_files = [str(f.name) for f in tests_dir.glob("*.yaml")]

        if not yaml_files:
            click.echo(f"‚ö†Ô∏è YAML —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ {bot_id}")
            return

        click.echo(f"üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ {bot_id}...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        bot_testing_path = Path(__file__).parent / "creation" / "bot_testing.py"
        cmd = [sys.executable, str(bot_testing_path), bot_id]

        if file:
            cmd.append(file)

        if verbose:
            cmd.append("-v")

        if max_concurrent != 5:
            cmd.extend(["--max-concurrent", str(max_concurrent)])

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        result = subprocess.run(cmd, check=False)

        if result.returncode == 0:
            click.echo("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        else:
            click.echo("‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö")
            sys.exit(1)

    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}", err=True)
        sys.exit(1)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.argument("bot_id")
def config(bot_id: str):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot_path = PROJECT_ROOT / Path("bots") / bot_id
        if not bot_path.exists():
            raise click.ClickException(f"–ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ bots/")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º .env —Ñ–∞–π–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        env_file = bot_path / ".env"
        if not env_file.exists():
            raise click.ClickException(f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
        editor = os.environ.get("EDITOR", "notepad" if os.name == "nt" else "nano")

        click.echo(f"‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ {bot_id}...")
        subprocess.run([editor, str(env_file)], check=True)

    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {e}", err=True)
        sys.exit(1)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.argument("bot_id")
@click.option("--list", "list_prompts", is_flag=True, help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤")
@click.option("--edit", "edit_prompt", help="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç")
@click.option("--add", "add_prompt", help="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
def prompts(
    bot_id: str,
    list_prompts: bool = False,
    edit_prompt: str = None,
    add_prompt: str = None,
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot_path = PROJECT_ROOT / Path("bots") / bot_id
        if not bot_path.exists():
            raise click.ClickException(f"–ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ bots/")

        prompts_dir = bot_path / "prompts"
        if not prompts_dir.exists():
            raise click.ClickException(f"–ü–∞–ø–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}")

        if list_prompts or (not edit_prompt and not add_prompt):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ —Å —Ñ–ª–∞–≥–æ–º --list)
            prompt_files = [f.name for f in prompts_dir.glob("*.txt")]

            if not prompt_files:
                click.echo("üìù –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            click.echo(f"üìù –ü—Ä–æ–º–ø—Ç—ã –±–æ—Ç–∞ {bot_id}:")
            for prompt_file in sorted(prompt_files):
                click.echo(f"  üìÑ {prompt_file[:-4]}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --list
            if not list_prompts:
                click.echo()
                click.echo("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
                click.echo(
                    "  sbf prompts <bot_id> --edit <prompt_name>      # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç"
                )
                click.echo(
                    "  sbf prompts <bot_id> --add <prompt_name>       # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç"
                )

        elif edit_prompt:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_file = prompts_dir / f"{edit_prompt}.txt"
            if not prompt_file.exists():
                raise click.ClickException(f"–ü—Ä–æ–º–ø—Ç {edit_prompt} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            editor = os.environ.get("EDITOR", "notepad" if os.name == "nt" else "nano")
            click.echo(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç {edit_prompt}...")
            subprocess.run([editor, str(prompt_file)], check=True)

        elif add_prompt:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            prompt_file = prompts_dir / f"{add_prompt}.txt"
            if prompt_file.exists():
                raise click.ClickException(f"–ü—Ä–æ–º–ø—Ç {add_prompt} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            prompt_file.write_text(
                f"# –ü—Ä–æ–º–ø—Ç: {add_prompt}\n\n" "–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞ –∑–¥–µ—Å—å...",
                encoding="utf-8",
            )

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            editor = os.environ.get("EDITOR", "notepad" if os.name == "nt" else "nano")
            click.echo(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç {add_prompt}...")
            subprocess.run([editor, str(prompt_file)], check=True)

    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {e}", err=True)
        sys.exit(1)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
        sys.exit(1)


@cli.command()
def path():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É"""
    click.echo(PROJECT_ROOT)


@cli.command()
@click.argument("bot_id")
@click.option("--force", "-f", is_flag=True, help="–£–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
def rm(bot_id: str, force: bool = False):
    """–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—Å–µ –µ–≥–æ —Ñ–∞–π–ª—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot_path = PROJECT_ROOT / Path("bots") / bot_id
        if not bot_path.exists():
            raise click.ClickException(f"ü§ñ –ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ bots/")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–æ—Ç–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        bot_file = Path(f"{bot_id}.py")
        if not bot_file.exists():
            raise click.ClickException(
                f"üìÑ –§–∞–π–ª {bot_id}.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
            )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        click.echo("üóëÔ∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:")
        click.echo(f"  üìÑ –§–∞–π–ª –∑–∞–ø—É—Å–∫–∞–ª–∫–∏: {bot_file}")
        click.echo(f"  üìÅ –ü–∞–ø–∫–∞ –±–æ—Ç–∞: {bot_path}")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω --force
        if not force:
            if not click.confirm(f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ {bot_id}?"):
                click.echo("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–ª–∫–∏
        if bot_file.exists():
            bot_file.unlink()
            click.echo(f"‚úÖ –§–∞–π–ª {bot_file} —É–¥–∞–ª–µ–Ω")

        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –±–æ—Ç–∞
        if bot_path.exists():
            import shutil

            shutil.rmtree(bot_path)
            click.echo(f"‚úÖ –ü–∞–ø–∫–∞ {bot_path} —É–¥–∞–ª–µ–Ω–∞")

        click.echo(f"üéâ –ë–æ—Ç {bot_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.argument("source_bot_id")
@click.argument("new_bot_id")
@click.option(
    "--force",
    "-f",
    is_flag=True,
    help="–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
)
def copy(source_bot_id: str, new_bot_id: str, force: bool = False):
    """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ —à–∞–±–ª–æ–Ω"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
        source_bot_path = PROJECT_ROOT / "bots" / source_bot_id
        if not source_bot_path.exists():
            raise click.ClickException(
                f"–ò—Å—Ö–æ–¥–Ω—ã–π –±–æ—Ç {source_bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ bots/"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å–∫–∞–ª–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
        source_bot_file = PROJECT_ROOT / f"{source_bot_id}.py"
        if not source_bot_file.exists():
            raise click.ClickException(
                f"–§–∞–π–ª –∑–∞–ø—É—Å–∫–∞–ª–∫–∏ {source_bot_id}.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –Ω–æ–≤—ã–π –±–æ—Ç
        new_bot_path = PROJECT_ROOT / "bots" / new_bot_id
        new_bot_file = PROJECT_ROOT / f"{new_bot_id}.py"

        if new_bot_path.exists() or new_bot_file.exists():
            if not force:
                if not click.confirm(f"–ë–æ—Ç {new_bot_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?"):
                    click.echo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    return
            else:
                click.echo(f"‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ {new_bot_id}")

        # –ö–æ–ø–∏—Ä—É–µ–º –±–æ—Ç–∞
        click.echo(f"üìã –ö–æ–ø–∏—Ä—É–µ–º –±–æ—Ç–∞ {source_bot_id} ‚Üí {new_bot_id}...")
        copy_bot_template(source_bot_id, new_bot_id)

        click.echo(f"‚úÖ –ë–æ—Ç {new_bot_id} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ {source_bot_id}")
        click.echo("üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å .env —Ñ–∞–π–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}", err=True)
        sys.exit(1)


@cli.command()
def link():
    """–°–æ–∑–¥–∞—Ç—å UTM-—Å—Å—ã–ª–∫—É –¥–ª—è –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
        link_script = Path(__file__).parent / "utm_link_generator.py"
        if not link_script.exists():
            raise click.ClickException("–°–∫—Ä–∏–ø—Ç utm_link_generator.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
        click.echo("üîó –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä UTM-—Å—Å—ã–ª–æ–∫...")
        subprocess.run([sys.executable, str(link_script)], check=True)

    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Å—ã–ª–æ–∫: {e}", err=True)
        sys.exit(1)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
        sys.exit(1)


def create_new_bot_structure(template: str, bot_id: str) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞ –≤ –ø–∞–ø–∫–µ bots/"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É bots –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        bots_dir = PROJECT_ROOT / Path("bots")
        bots_dir.mkdir(exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
        bot_dir = bots_dir / bot_id
        if bot_dir.exists():
            click.echo(f"‚ö†Ô∏è –ë–æ—Ç {bot_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        bot_dir.mkdir()

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        (bot_dir / "prompts").mkdir()
        (bot_dir / "tests").mkdir()
        (bot_dir / "reports").mkdir()
        (bot_dir / "welcome_files").mkdir()
        (bot_dir / "files").mkdir()

        if template == "base":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º growthmed-october-24 –∫–∞–∫ –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            copy_from_growthmed_template(bot_dir, bot_id)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω –∏–∑ –ø–∞–ø–∫–∏ bots
            copy_from_bot_template(template, bot_dir, bot_id)

        click.echo(f"‚úÖ –ë–æ—Ç {bot_id} —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ bots/{bot_id}/")
        click.echo("üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return True

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return False


def list_bots_in_bots_folder() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ bots/"""
    bots_dir = PROJECT_ROOT / Path("bots")
    if not bots_dir.exists():
        return []

    bots = []
    for item in bots_dir.iterdir():
        if item.is_dir() and Path(f"{item.name}.py").exists():
            bots.append(item.name)

    return bots


def create_bot_template(bot_id: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–æ—Ç–∞"""
    return f'''"""
{bot_id.replace("-", " ").title()} Bot - –£–º–Ω—ã–π Telegram –±–æ—Ç –Ω–∞ Smart Bot Factory
"""

import asyncio
from smart_bot_factory.router import EventRouter
from smart_bot_factory.message import send_message_by_human
from smart_bot_factory.creation import BotBuilder

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
event_router = EventRouter("{bot_id}")
bot_builder = BotBuilder("{bot_id}")

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
# =============================================================================

@event_router.event_handler("collect_contact", notify=True, once_only=True)
async def handle_contact(user_id: int, contact_data: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –ò–ò —Å–æ–∑–¥–∞–µ—Ç: {{"—Ç–∏–ø": "collect_contact", "–∏–Ω—Ñ–æ": "+79001234567"}}
    """
    await send_message_by_human(
        user_id=user_id,
        message_text=f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {{contact_data}}"
    )
    
    return {{"status": "success", "contact": contact_data}}

# =============================================================================
# –ó–ê–ü–£–°–ö
# =============================================================================

async def main():
    # ========== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –†–û–£–¢–ï–†–û–í ==========
    bot_builder.register_routers(event_router)
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Telegram —Ä–æ—É—Ç–µ—Ä—ã:
    # from aiogram import Router
    # telegram_router = Router(name="commands")
    # bot_builder.register_telegram_router(telegram_router)
    
    # ========== –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–Ø (–¥–æ build) ==========
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π PromptLoader:
    # from smart_bot_factory.utils import UserPromptLoader
    # custom_loader = UserPromptLoader("{bot_id}")
    # bot_builder.set_prompt_loader(custom_loader)
    
    # ========== –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö ==========
    await bot_builder.build()
    await bot_builder.start()

if __name__ == "__main__":
    asyncio.run(main())
'''


def create_env_template(bot_id: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞"""
    return f"""# Telegram
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Supabase
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_KEY=your_supabase_anon_key

# OpenAI
OPENAI_API_KEY=sk-your-openai-api-key
OPENAI_MODEL=gpt-5-mini
OPENAI_MAX_TOKENS=1500
OPENAI_TEMPERATURE=0.7

# –ü—Ä–æ–º–ø—Ç—ã (–∫–∞—Ç–∞–ª–æ–≥)
PROMT_FILES_DIR=prompts

# –§–∞–π–ª –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å - –≥—Ä—É–∑–∏–º –µ–≥–æ –≤ –ø–∞–ø–∫—É welcome_file, –µ—Å–ª–∏ –Ω–µ—Ç - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)
WELCOME_FILE_URL=welcome_files/
WELCOME_FILE_MSG=welcome_file_msg.txt

# üÜï –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
# –£–∫–∞–∂–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–æ–≤
ADMIN_TELEGRAM_IDS=123456789,987654321
ADMIN_SESSION_TIMEOUT_MINUTES=30

# üÜï –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å JSON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
DEBUG_MODE=false

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_CONTEXT_MESSAGES=50
LOG_LEVEL=INFO
MESSAGE_PARSE_MODE=Markdown

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞–∂
LEAD_QUALIFICATION_THRESHOLD=7
SESSION_TIMEOUT_HOURS=24

# ‚ö†Ô∏è –í–ê–ñ–ù–û: BOT_ID —Ç–µ–ø–µ—Ä—å –ù–ï –Ω—É–∂–µ–Ω –≤ .env!
# Bot ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å–∫–∞–ª–∫–∏
# –ù–∞–ø—Ä–∏–º–µ—Ä: python {bot_id}.py ‚Üí BOT_ID = {bot_id}
"""


def copy_from_growthmed_template(bot_dir: Path, bot_id: str):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –∏–∑ growthmed-october-24"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        bot_file = PROJECT_ROOT / Path(f"{bot_id}.py")
        bot_file.write_text(create_bot_template(bot_id), encoding="utf-8")

        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –±–æ—Ç–∞ (–ù–ï –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞)
        env_file = bot_dir / ".env"
        env_file.write_text(create_env_template(bot_id), encoding="utf-8")

        # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ growthmed-october-24
        source_prompts = (
            Path(__file__).parent / "configs" / "growthmed-october-24" / "prompts"
        )
        target_prompts = bot_dir / "prompts"

        if source_prompts.exists():
            for prompt_file in source_prompts.glob("*.txt"):
                shutil.copy2(prompt_file, target_prompts / prompt_file.name)
            click.echo("üìù –ü—Ä–æ–º–ø—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ growthmed-october-24")
        else:
            click.echo(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_prompts}")
            # Fallback –∫ –±–∞–∑–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–∞–º
            create_basic_prompts(target_prompts)
            click.echo("üìù –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã")

        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –∏–∑ growthmed-october-24
        source_tests = (
            Path(__file__).parent / "configs" / "growthmed-october-24" / "tests"
        )
        target_tests = bot_dir / "tests"

        if source_tests.exists():
            for test_file in source_tests.glob("*"):
                if test_file.is_file():
                    shutil.copy2(test_file, target_tests / test_file.name)
            click.echo("üß™ –¢–µ—Å—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ growthmed-october-24")

        # –ö–æ–ø–∏—Ä—É–µ–º welcome_files –∏–∑ growthmed-october-24
        source_welcome = (
            Path(__file__).parent / "configs" / "growthmed-october-24" / "welcome_file"
        )
        target_welcome = bot_dir / "welcome_files"

        if source_welcome.exists():
            for welcome_file in source_welcome.glob("*"):
                if welcome_file.is_file():
                    shutil.copy2(welcome_file, target_welcome / welcome_file.name)
            click.echo("üìÅ Welcome —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ growthmed-october-24")

        # –ö–æ–ø–∏—Ä—É–µ–º files –∏–∑ growthmed-october-24
        source_files = (
            Path(__file__).parent / "configs" / "growthmed-october-24" / "files"
        )
        target_files = bot_dir / "files"

        if source_files.exists():
            for file_item in source_files.glob("*"):
                if file_item.is_file():
                    shutil.copy2(file_item, target_files / file_item.name)
            click.echo("üìé –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ growthmed-october-24")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        # Fallback –∫ –±–∞–∑–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–∞–º
        create_basic_prompts(bot_dir / "prompts")


def copy_bot_template(source_bot_id: str, new_bot_id: str):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    try:
        source_dir = PROJECT_ROOT / "bots" / source_bot_id
        new_dir = PROJECT_ROOT / "bots" / new_bot_id

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
        new_dir.mkdir(exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        (new_dir / "prompts").mkdir(exist_ok=True)
        (new_dir / "tests").mkdir(exist_ok=True)
        (new_dir / "reports").mkdir(exist_ok=True)
        (new_dir / "welcome_files").mkdir(exist_ok=True)
        (new_dir / "files").mkdir(exist_ok=True)

        # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        source_bot_file = PROJECT_ROOT / f"{source_bot_id}.py"
        new_bot_file = PROJECT_ROOT / f"{new_bot_id}.py"

        if source_bot_file.exists():
            shutil.copy2(source_bot_file, new_bot_file)

            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ
            content = new_bot_file.read_text(encoding="utf-8")
            content = content.replace(
                f'BotBuilder("{source_bot_id}")', f'BotBuilder("{new_bot_id}")'
            )
            content = content.replace(
                f'bot_id="{source_bot_id}"', f'bot_id="{new_bot_id}"'
            )
            new_bot_file.write_text(content, encoding="utf-8")
            click.echo(f"   üìÑ –§–∞–π–ª –∑–∞–ø—É—Å–∫–∞–ª–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {new_bot_id}.py")

        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞ (–ù–ï –∫–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
        new_env = new_dir / ".env"
        new_env.write_text(create_env_template(new_bot_id), encoding="utf-8")
        click.echo("   ‚öôÔ∏è –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞")

        # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
        source_prompts = source_dir / "prompts"
        new_prompts = new_dir / "prompts"

        if source_prompts.exists():
            for prompt_file in source_prompts.glob("*.txt"):
                shutil.copy2(prompt_file, new_prompts / prompt_file.name)
            click.echo("   üìù –ü—Ä–æ–º–ø—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")

        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã
        source_tests = source_dir / "tests"
        new_tests = new_dir / "tests"

        if source_tests.exists():
            for test_file in source_tests.glob("*"):
                if test_file.is_file():
                    shutil.copy2(test_file, new_tests / test_file.name)
            click.echo("   üß™ –¢–µ—Å—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")

        # –ö–æ–ø–∏—Ä—É–µ–º welcome_files
        source_welcome = source_dir / "welcome_files"
        new_welcome = new_dir / "welcome_files"

        if source_welcome.exists():
            for welcome_file in source_welcome.glob("*"):
                if welcome_file.is_file():
                    shutil.copy2(welcome_file, new_welcome / welcome_file.name)
            click.echo("   üìÅ Welcome —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")

        # –ö–æ–ø–∏—Ä—É–µ–º files
        source_files = source_dir / "files"
        new_files = new_dir / "files"

        if source_files.exists():
            for file_item in source_files.glob("*"):
                if file_item.is_file():
                    shutil.copy2(file_item, new_files / file_item.name)
            click.echo("   üìé –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        raise


def copy_from_bot_template(template: str, bot_dir: Path, bot_id: str):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã create)"""
    try:
        template_dir = PROJECT_ROOT / Path("bots") / template
        if not template_dir.exists():
            raise click.ClickException(f"–®–∞–±–ª–æ–Ω {template} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        template_bot_file = PROJECT_ROOT / Path(f"{template}.py")
        if template_bot_file.exists():
            bot_file = PROJECT_ROOT / Path(f"{bot_id}.py")
            shutil.copy2(template_bot_file, bot_file)

            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ
            content = bot_file.read_text(encoding="utf-8")
            content = content.replace(
                f'BotBuilder("{template}")', f'BotBuilder("{bot_id}")'
            )
            content = content.replace(f'bot_id="{template}"', f'bot_id="{bot_id}"')
            bot_file.write_text(content, encoding="utf-8")

        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –±–æ—Ç–∞ (–ù–ï –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞)
        env_file = bot_dir / ".env"
        env_file.write_text(create_env_template(bot_id), encoding="utf-8")

        # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
        template_prompts = template_dir / "prompts"
        target_prompts = bot_dir / "prompts"

        if template_prompts.exists():
            for prompt_file in template_prompts.glob("*.txt"):
                shutil.copy2(prompt_file, target_prompts / prompt_file.name)

        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã
        template_tests = template_dir / "tests"
        target_tests = bot_dir / "tests"

        if template_tests.exists():
            for test_file in template_tests.glob("*"):
                if test_file.is_file():
                    shutil.copy2(test_file, target_tests / test_file.name)

        click.echo(f"üìã –®–∞–±–ª–æ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ {template}")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ {template}: {e}")
        raise


def create_basic_prompts(prompts_dir: Path):
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã"""
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    (prompts_dir / "system_prompt.txt").write_text(
        "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Ö –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n"
        "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.",
        encoding="utf-8",
    )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    (prompts_dir / "welcome_message.txt").write_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫.\n\n" "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", encoding="utf-8"
    )

    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    (prompts_dir / "final_instructions.txt").write_text(
        """<instruction>
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í –ù–ê–ß–ê–õ–ï –ö–ê–ñ–î–û–ì–û —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–π —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "—ç—Ç–∞–ø": id,
  "–∫–∞—á–µ—Å—Ç–≤–æ": 1-10,
  "—Å–æ–±—ã—Ç–∏—è": [
    {
      "—Ç–∏–ø": —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è,
      "–∏–Ω—Ñ–æ": –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
    }
  ],
  "—Ñ–∞–π–ª—ã": [],
  "–∫–∞—Ç–∞–ª–æ–≥–∏": []
}

–î–û–°–¢–£–ü–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô:
- example_event: –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
  –ü—Ä–∏–º–µ—Ä: {"—Ç–∏–ø": "example_event", "–∏–Ω—Ñ–æ": {"data": "–ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö"}}

–î–û–°–¢–£–ü–ù–´–ï –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–î–ê–ß–ò:
- example_task: –ü—Ä–∏–º–µ—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
  –ü—Ä–∏–º–µ—Ä: {"—Ç–∏–ø": "example_task", "–∏–Ω—Ñ–æ": "—á–µ—Ä–µ–∑ 1 —á–∞—Å: –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —á–µ–º-—Ç–æ"}

–î–û–°–¢–£–ü–ù–´–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:
- global_announcement: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–æ–Ω—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –≤–∞–∂–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
  –ü—Ä–∏–º–µ—Ä: {"—Ç–∏–ø": "global_announcement", "–∏–Ω—Ñ–æ": "3600"} - –∞–Ω–æ–Ω—Å —á–µ—Ä–µ–∑ 1 —á–∞—Å
  –§–æ—Ä–º–∞—Ç: "–∏–Ω—Ñ–æ" —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–¥–∞—á–∏, –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –≤ –¥–∏–∞–ª–æ–≥–µ.
</instruction>""",
        encoding="utf-8",
    )


if __name__ == "__main__":
    cli()
