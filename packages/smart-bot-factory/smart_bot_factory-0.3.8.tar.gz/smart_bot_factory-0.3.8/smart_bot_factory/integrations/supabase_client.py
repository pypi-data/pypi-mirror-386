# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π supabase_client.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bot_id –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é

import logging
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional

from postgrest.exceptions import APIError
from supabase import Client, create_client

logger = logging.getLogger(__name__)


class SupabaseClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bot_id –¥–ª—è –º—É–ª—å—Ç–∏–±–æ—Ç–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""

    def __init__(self, url: str, key: str, bot_id: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase

        Args:
            url: URL Supabase –ø—Ä–æ–µ–∫—Ç–∞
            key: API –∫–ª—é—á Supabase
            bot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        self.url = url
        self.key = key
        self.bot_id = bot_id  # üÜï –¢–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ!
        self.client: Optional[Client] = None

        if self.bot_id:
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SupabaseClient –¥–ª—è bot_id: {self.bot_id}")
        else:
            logger.warning(
                "SupabaseClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ë–ï–ó bot_id - –º—É–ª—å—Ç–∏–±–æ—Ç–æ–≤–∞—è –∏–∑–æ–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"
            )

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase"""
        try:
            self.client = create_client(self.url, self.key)
            logger.info(
                f"Supabase client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω{f' –¥–ª—è bot_id: {self.bot_id}' if self.bot_id else ''}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase client: {e}")
            raise

    async def create_or_get_user(self, user_data: Dict[str, Any]) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            # üÜï –ï—Å–ª–∏ bot_id —É–∫–∞–∑–∞–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
            query = (
                self.client.table("sales_users")
                .select("telegram_id")
                .eq("telegram_id", user_data["telegram_id"])
            )
            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()

            if response.data:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–µ—Ä–∂–∏–Ω–≥–∞ UTM –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                existing_user_query = (
                    self.client.table("sales_users")
                    .select(
                        "source", "medium", "campaign", "content", "term", "segments"
                    )
                    .eq("telegram_id", user_data["telegram_id"])
                )

                if self.bot_id:
                    existing_user_query = existing_user_query.eq("bot_id", self.bot_id)

                existing_response = existing_user_query.execute()
                existing_utm = (
                    existing_response.data[0] if existing_response.data else {}
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    "username": user_data.get("username"),
                    "first_name": user_data.get("first_name"),
                    "last_name": user_data.get("last_name"),
                    "language_code": user_data.get("language_code"),
                    "updated_at": datetime.now().isoformat(),
                    "is_active": True,
                }

                # –ú–µ—Ä–∂–∏–º UTM –¥–∞–Ω–Ω—ã–µ: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ None
                utm_fields = ["source", "medium", "campaign", "content", "term"]
                for field in utm_fields:
                    new_value = user_data.get(field)
                    if new_value is not None:
                        # –ï—Å—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º
                        update_data[field] = new_value
                        if existing_utm.get(field) != new_value:
                            logger.info(
                                f"üìä UTM –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {field} = '{new_value}' (–±—ã–ª–æ: '{existing_utm.get(field)}')"
                            )
                    else:
                        # –ù–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ
                        update_data[field] = existing_utm.get(field)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                new_segment = user_data.get("segment")
                if new_segment:
                    existing_segments = existing_utm.get("segments", "") or ""
                    if existing_segments:
                        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                        segments_list = [
                            s.strip() for s in existing_segments.split(",") if s.strip()
                        ]
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                        if new_segment not in segments_list:
                            segments_list.append(new_segment)
                            update_data["segments"] = ", ".join(segments_list)
                            logger.info(
                                f"üìä –°–µ–≥–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: '{new_segment}' (–±—ã–ª–æ: '{existing_segments}')"
                            )
                        else:
                            update_data["segments"] = existing_segments
                            logger.info(f"üìä –°–µ–≥–º–µ–Ω—Ç '{new_segment}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        # –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
                        update_data["segments"] = new_segment
                        logger.info(f"üìä –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: '{new_segment}'")
                else:
                    # –ù–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    update_data["segments"] = existing_utm.get("segments")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update_query = (
                    self.client.table("sales_users")
                    .update(update_data)
                    .eq("telegram_id", user_data["telegram_id"])
                )

                if self.bot_id:
                    update_query = update_query.eq("bot_id", self.bot_id)

                update_query.execute()

                logger.info(
                    f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']}{f' –¥–ª—è bot_id {self.bot_id}' if self.bot_id else ''}"
                )
                return user_data["telegram_id"]
            else:
                # üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
                user_insert_data = {
                    "telegram_id": user_data["telegram_id"],
                    "username": user_data.get("username"),
                    "first_name": user_data.get("first_name"),
                    "last_name": user_data.get("last_name"),
                    "language_code": user_data.get("language_code"),
                    "is_active": True,
                    "source": user_data.get("source"),
                    "medium": user_data.get("medium"),
                    "campaign": user_data.get("campaign"),
                    "content": user_data.get("content"),
                    "term": user_data.get("term"),
                    "segments": user_data.get("segment"),  # –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                }
                if self.bot_id:
                    user_insert_data["bot_id"] = self.bot_id

                response = (
                    self.client.table("sales_users").insert(user_insert_data).execute()
                )

                if user_data.get("segment"):
                    logger.info(
                        f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']} —Å —Å–µ–≥–º–µ–Ω—Ç–æ–º '{user_data.get('segment')}'{f' –¥–ª—è bot_id {self.bot_id}' if self.bot_id else ''}"
                    )
                else:
                    logger.info(
                        f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']}{f' –¥–ª—è bot_id {self.bot_id}' if self.bot_id else ''}"
                    )
                return user_data["telegram_id"]

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            raise

    async def create_chat_session(
        self, user_data: Dict[str, Any], system_prompt: str
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = await self.create_or_get_user(user_data)

            # üÜï –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É—á–µ—Ç–æ–º bot_id)
            await self.close_active_sessions(user_id)

            # üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            session_data = {
                "user_id": user_id,
                "system_prompt": system_prompt,
                "status": "active",
                "current_stage": "introduction",
                "lead_quality_score": 5,
                "metadata": {
                    "user_agent": user_data.get("user_agent", ""),
                    "start_timestamp": datetime.now().isoformat(),
                },
            }
            if self.bot_id:
                session_data["bot_id"] = self.bot_id
                session_data["metadata"]["bot_id"] = self.bot_id

            response = (
                self.client.table("sales_chat_sessions").insert(session_data).execute()
            )

            session_id = response.data[0]["id"]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await self.create_session_analytics(session_id)

            logger.info(
                f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}{f', bot_id {self.bot_id}' if self.bot_id else ''}"
            )
            return session_id

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            raise

    async def close_active_sessions(self, user_id: int):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            # üÜï –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (–µ—Å–ª–∏ bot_id —É–∫–∞–∑–∞–Ω)
            query = (
                self.client.table("sales_chat_sessions")
                .update(
                    {"status": "completed", "updated_at": datetime.now().isoformat()}
                )
                .eq("user_id", user_id)
                .eq("status", "active")
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            query.execute()

            logger.info(
                f"–ó–∞–∫—Ä—ã—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}{f', bot_id {self.bot_id}' if self.bot_id else ''}"
            )

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–π: {e}")
            raise

    async def get_active_session(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            # üÜï –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            query = (
                self.client.table("sales_chat_sessions")
                .select(
                    "id",
                    "system_prompt",
                    "created_at",
                    "current_stage",
                    "lead_quality_score",
                )
                .eq("user_id", telegram_id)
                .eq("status", "active")
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()

            if response.data:
                session_info = response.data[0]
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è {session_info['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}{f', bot_id {self.bot_id}' if self.bot_id else ''}"
                )
                return session_info

            return None

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            return None

    async def create_session_analytics(self, session_id: str):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        try:
            self.client.table("sales_session_analytics").insert(
                {
                    "session_id": session_id,
                    "total_messages": 0,
                    "total_tokens": 0,
                    "average_response_time_ms": 0,
                    "conversion_stage": "initial",
                    "lead_quality_score": 5,
                }
            ).execute()

            logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            raise

    async def add_message(
        self,
        session_id: str,
        role: str,
        content: str,
        message_type: str = "text",
        tokens_used: int = 0,
        processing_time_ms: int = 0,
        metadata: Dict[str, Any] = None,
        ai_metadata: Dict[str, Any] = None,
    ) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            response = (
                self.client.table("sales_messages")
                .insert(
                    {
                        "session_id": session_id,
                        "role": role,
                        "content": content,
                        "message_type": message_type,
                        "tokens_used": tokens_used,
                        "processing_time_ms": processing_time_ms,
                        "metadata": metadata or {},
                        "ai_metadata": ai_metadata or {},
                    }
                )
                .execute()
            )

            message_id = response.data[0]["id"]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            await self.update_session_analytics(
                session_id, tokens_used, processing_time_ms
            )

            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —Å–µ—Å—Å–∏—é {session_id}")
            return message_id

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise

    async def get_chat_history(
        self, session_id: str, limit: int = 50
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        try:
            response = (
                self.client.table("sales_messages")
                .select(
                    "id",
                    "role",
                    "content",
                    "message_type",
                    "created_at",
                    "metadata",
                    "ai_metadata",
                )
                .eq("session_id", session_id)
                .order("created_at", desc=True)
                .limit(limit)
                .execute()
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            messages = [msg for msg in response.data if msg["role"] != "system"]

            # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
            messages.reverse()

            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            return messages

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            raise

    async def get_session_info(self, session_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            response = (
                self.client.table("sales_chat_sessions")
                .select(
                    "id",
                    "user_id",
                    "bot_id",
                    "system_prompt",
                    "status",
                    "created_at",
                    "metadata",
                    "current_stage",
                    "lead_quality_score",
                )
                .eq("id", session_id)
                .execute()
            )

            if response.data:
                session = response.data[0]
                # üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ bot_id –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
                if self.bot_id and session.get("bot_id") != self.bot_id:
                    logger.warning(
                        f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏ {session_id} –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞: {session.get('bot_id')} != {self.bot_id}"
                    )
                    return None
                return session
            return None

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏: {e}")
            raise

    async def update_session_stage(
        self, session_id: str, stage: str = None, quality_score: int = None
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ç–∞–ø —Å–µ—Å—Å–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–∞"""
        try:
            update_data = {"updated_at": datetime.now().isoformat()}

            if stage:
                update_data["current_stage"] = stage
            if quality_score is not None:
                update_data["lead_quality_score"] = quality_score

            # üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ bot_id –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if self.bot_id:
                response = (
                    self.client.table("sales_chat_sessions")
                    .select("bot_id")
                    .eq("id", session_id)
                    .execute()
                )
                if response.data and response.data[0].get("bot_id") != self.bot_id:
                    logger.warning(
                        f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_id} –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞"
                    )
                    return

            self.client.table("sales_chat_sessions").update(update_data).eq(
                "id", session_id
            ).execute()

            logger.debug(
                f"–û–±–Ω–æ–≤–ª–µ–Ω —ç—Ç–∞–ø —Å–µ—Å—Å–∏–∏ {session_id}: stage={stage}, quality={quality_score}"
            )

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞ —Å–µ—Å—Å–∏–∏: {e}")
            raise

    async def get_user_sessions(self, telegram_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            # üÜï –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (–µ—Å–ª–∏ bot_id —É–∫–∞–∑–∞–Ω)
            query = (
                self.client.table("sales_chat_sessions")
                .select(
                    "id",
                    "status",
                    "created_at",
                    "updated_at",
                    "current_stage",
                    "lead_quality_score",
                )
                .eq("user_id", telegram_id)
                .order("created_at", desc=True)
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()
            return response.data

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise

    # üÜï –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bot_id

    async def add_session_event(
        self, session_id: str, event_type: str, event_info: str
    ) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Å—Å–∏—é"""
        try:
            response = (
                self.client.table("session_events")
                .insert(
                    {
                        "session_id": session_id,
                        "event_type": event_type,
                        "event_info": event_info,
                        "notified_admins": [],
                    }
                )
                .execute()
            )

            event_id = response.data[0]["id"]
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            return event_id

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            raise

    async def sync_admin(self, admin_data: Dict[str, Any]):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ –ë–î (–∞–¥–º–∏–Ω—ã –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω
            response = (
                self.client.table("sales_admins")
                .select("telegram_id")
                .eq(
                    "telegram_id",
                    admin_data["telegram_id"],
                )
                .eq("bot_id", self.bot_id)
                .execute()
            )

            if response.data:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                self.client.table("sales_admins").update(
                    {
                        "username": admin_data.get("username"),
                        "first_name": admin_data.get("first_name"),
                        "last_name": admin_data.get("last_name"),
                        "is_active": True,
                    }
                ).eq("telegram_id", admin_data["telegram_id"]).eq(
                    "bot_id", self.bot_id
                ).execute()

                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω {admin_data['telegram_id']}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                self.client.table("sales_admins").insert(
                    {
                        "telegram_id": admin_data["telegram_id"],
                        "bot_id": self.bot_id,
                        "username": admin_data.get("username"),
                        "first_name": admin_data.get("first_name"),
                        "last_name": admin_data.get("last_name"),
                        "role": "admin",
                        "is_active": True,
                    }
                ).execute()

                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω {admin_data['telegram_id']}")

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
            raise

    async def start_admin_conversation(
        self, admin_id: int, user_id: int, session_id: str
    ) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –∞–¥–º–∏–Ω–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
            await self.end_admin_conversations(admin_id)

            response = (
                self.client.table("admin_user_conversations")
                .insert(
                    {
                        "admin_id": admin_id,
                        "user_id": user_id,
                        "session_id": session_id,
                        "status": "active",
                        "auto_end_at": (
                            datetime.now(timezone.utc) + timedelta(minutes=30)
                        ).isoformat(),
                    }
                )
                .execute()
            )

            conversation_id = response.data[0]["id"]
            logger.info(
                f"–ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ {conversation_id}: –∞–¥–º–∏–Ω {admin_id} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
            )
            return conversation_id

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
            raise

    async def end_admin_conversations(
        self, admin_id: int = None, user_id: int = None
    ) -> int:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = (
                self.client.table("admin_user_conversations")
                .update(
                    {
                        "status": "ended",
                        "ended_at": datetime.now(timezone.utc).isoformat(),
                    }
                )
                .eq("status", "active")
            )

            if admin_id:
                query = query.eq("admin_id", admin_id)
            if user_id:
                query = query.eq("user_id", user_id)

            response = query.execute()
            ended_count = len(response.data)

            if ended_count > 0:
                logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {ended_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")

            return ended_count

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return 0

    async def get_admin_active_conversation(
        self, admin_id: int
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∞"""
        try:
            response = (
                self.client.table("admin_user_conversations")
                .select("id", "user_id", "session_id", "started_at", "auto_end_at")
                .eq("admin_id", admin_id)
                .eq("status", "active")
                .execute()
            )

            return response.data[0] if response.data else None

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∞–¥–º–∏–Ω–∞: {e}")
            return None

    async def get_user_conversation(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = (
                self.client.table("admin_user_conversations")
                .select("id", "admin_id", "session_id", "started_at", "auto_end_at")
                .eq("user_id", user_id)
                .eq("status", "active")
                .execute()
            )

            return response.data[0] if response.data else None

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    # üÜï –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞

    async def cleanup_expired_conversations(self) -> int:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∞–¥–º–∏–Ω–æ–≤"""
        try:
            now = datetime.now(timezone.utc).isoformat()

            response = (
                self.client.table("admin_user_conversations")
                .update({"status": "expired", "ended_at": now})
                .eq("status", "active")
                .lt("auto_end_at", now)
                .execute()
            )

            ended_count = len(response.data)
            if ended_count > 0:
                logger.info(
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ {ended_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"
                )

            return ended_count

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return 0

    async def end_expired_conversations(self) -> int:
        """–ê–ª–∏–∞—Å –¥–ª—è cleanup_expired_conversations –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.cleanup_expired_conversations()

    async def get_user_admin_conversation(
        self, user_id: int
    ) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–µ–¥–µ—Ç—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self.get_user_conversation(user_id)

    # üÜï –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ bot_id

    async def get_analytics_summary(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)

            # üÜï –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            query = (
                self.client.table("sales_chat_sessions")
                .select("id", "current_stage", "lead_quality_score", "created_at")
                .gte("created_at", cutoff_date.isoformat())
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            sessions_response = query.execute()

            sessions = sessions_response.data
            total_sessions = len(sessions)

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º
            stages = {}
            quality_scores = []

            for session in sessions:
                stage = session.get("current_stage", "unknown")
                stages[stage] = stages.get(stage, 0) + 1

                score = session.get("lead_quality_score", 5)
                if score:
                    quality_scores.append(score)

            avg_quality = (
                sum(quality_scores) / len(quality_scores) if quality_scores else 5
            )

            return {
                "bot_id": self.bot_id,
                "period_days": days,
                "total_sessions": total_sessions,
                "stages": stages,
                "average_lead_quality": round(avg_quality, 1),
                "generated_at": datetime.now().isoformat(),
            }

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {
                "bot_id": self.bot_id,
                "error": str(e),
                "generated_at": datetime.now().isoformat(),
            }

    async def update_session_analytics(
        self, session_id: str, tokens_used: int = 0, processing_time_ms: int = 0
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            response = (
                self.client.table("sales_session_analytics")
                .select("total_messages", "total_tokens", "average_response_time_ms")
                .eq("session_id", session_id)
                .execute()
            )

            if response.data:
                current = response.data[0]
                new_total_messages = current["total_messages"] + 1
                new_total_tokens = current["total_tokens"] + tokens_used

                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                if processing_time_ms > 0:
                    current_avg = current["average_response_time_ms"]
                    new_avg = (
                        (current_avg * (new_total_messages - 1)) + processing_time_ms
                    ) / new_total_messages
                else:
                    new_avg = current["average_response_time_ms"]

                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                self.client.table("sales_session_analytics").update(
                    {
                        "total_messages": new_total_messages,
                        "total_tokens": new_total_tokens,
                        "average_response_time_ms": int(new_avg),
                        "updated_at": datetime.now().isoformat(),
                    }
                ).eq("session_id", session_id).execute()

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞

    # –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def update_conversion_stage(
        self, session_id: str, stage: str, quality_score: int = None
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ç–∞–ø –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        await self.update_session_stage(session_id, stage, quality_score)

    async def archive_old_sessions(self, days: int = 7):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º bot_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)

            # üÜï –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (–µ—Å–ª–∏ bot_id —É–∫–∞–∑–∞–Ω)
            query = (
                self.client.table("sales_chat_sessions")
                .update({"status": "archived"})
                .eq("status", "completed")
                .lt("updated_at", cutoff_date.isoformat())
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            query.execute()

            logger.info(
                f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π{f' –¥–ª—è bot_id {self.bot_id}' if self.bot_id else ''}"
            )

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {e}")
            raise

    async def get_sent_files(self, user_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π
        """
        try:
            query = (
                self.client.table("sales_users")
                .select("files")
                .eq("telegram_id", user_id)
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()

            if response.data and response.data[0].get("files"):
                files_str = response.data[0]["files"]
                return [f.strip() for f in files_str.split(",") if f.strip()]

            return []

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            return []

    async def get_sent_directories(self, user_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫–∞—Ç–∞–ª–æ–≥–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π
        """
        try:
            query = (
                self.client.table("sales_users")
                .select("directories")
                .eq("telegram_id", user_id)
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()

            if response.data and response.data[0].get("directories"):
                dirs_str = response.data[0]["directories"]
                return [d.strip() for d in dirs_str.split(",") if d.strip()]

            return []

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            return []

    async def add_sent_files(self, user_id: int, files_list: List[str]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            files_list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {files_list}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
            current_files = await self.get_sent_files(user_id)
            logger.info(f"–¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –≤ –ë–î: {current_files}")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            all_files = list(set(current_files + files_list))
            logger.info(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: {all_files}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            files_str = ", ".join(all_files)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É: {files_str}")

            query = (
                self.client.table("sales_users")
                .update({"files": files_str})
                .eq("telegram_id", user_id)
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)
                logger.info(f"–§–∏–ª—å—Ç—Ä –ø–æ bot_id: {self.bot_id}")

            response = query.execute()
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –ë–î: {response.data}")

            logger.info(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(files_list)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

    async def add_sent_directories(self, user_id: int, dirs_list: List[str]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∏ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dirs_list: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {dirs_list}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
            current_dirs = await self.get_sent_directories(user_id)
            logger.info(f"–¢–µ–∫—É—â–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –≤ –ë–î: {current_dirs}")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            all_dirs = list(set(current_dirs + dirs_list))
            logger.info(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {all_dirs}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            dirs_str = ", ".join(all_dirs)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É: {dirs_str}")

            query = (
                self.client.table("sales_users")
                .update({"directories": dirs_str})
                .eq("telegram_id", user_id)
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)
                logger.info(f"–§–∏–ª—å—Ç—Ä –ø–æ bot_id: {self.bot_id}")

            response = query.execute()
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –ë–î: {response.data}")

            logger.info(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(dirs_list)} –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò
    # =============================================================================

    async def get_funnel_stats(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)

            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ sales_users —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ bot_id
            users_query = self.client.table("sales_users").select("telegram_id")

            if self.bot_id:
                users_query = users_query.eq("bot_id", self.bot_id)

            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_query = users_query.neq("username", "test_user")

            users_response = users_query.execute()
            total_unique_users = len(users_response.data) if users_response.data else 0

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º bot_id –∑–∞ –ø–µ—Ä–∏–æ–¥
            sessions_query = (
                self.client.table("sales_chat_sessions")
                .select(
                    "id", "user_id", "current_stage", "lead_quality_score", "created_at"
                )
                .gte("created_at", cutoff_date.isoformat())
            )

            if self.bot_id:
                sessions_query = sessions_query.eq("bot_id", self.bot_id)

            sessions_response = sessions_query.execute()
            sessions = sessions_response.data

            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if sessions:
                # –ü–æ–ª—É—á–∞–µ–º telegram_id —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                test_users_query = (
                    self.client.table("sales_users")
                    .select("telegram_id")
                    .eq("username", "test_user")
                )
                if self.bot_id:
                    test_users_query = test_users_query.eq("bot_id", self.bot_id)

                test_users_response = test_users_query.execute()
                test_user_ids = (
                    {user["telegram_id"] for user in test_users_response.data}
                    if test_users_response.data
                    else set()
                )

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Å—Å–∏–∏
                sessions = [s for s in sessions if s["user_id"] not in test_user_ids]

            total_sessions = len(sessions)

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º
            stages = {}
            quality_scores = []

            for session in sessions:
                stage = session.get("current_stage", "unknown")
                stages[stage] = stages.get(stage, 0) + 1

                score = session.get("lead_quality_score", 5)
                if score:
                    quality_scores.append(score)

            avg_quality = (
                sum(quality_scores) / len(quality_scores) if quality_scores else 5
            )

            return {
                "total_sessions": total_sessions,
                "total_unique_users": total_unique_users,  # ‚úÖ –í–°–ï —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞
                "stages": stages,
                "avg_quality": round(avg_quality, 1),
                "period_days": days,
            }

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏: {e}")
            return {
                "total_sessions": 0,
                "stages": {},
                "avg_quality": 0,
                "period_days": days,
            }

    async def get_events_stats(self, days: int = 7) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å —É—á–µ—Ç–æ–º bot_id —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–∏
            query = (
                self.client.table("session_events")
                .select("event_type", "session_id")
                .gte("created_at", cutoff_date.isoformat())
            )

            events_response = query.execute()
            events = events_response.data if events_response.data else []

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ bot_id —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–∏
            if self.bot_id and events:
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                sessions_query = (
                    self.client.table("sales_chat_sessions")
                    .select("id", "user_id")
                    .eq("bot_id", self.bot_id)
                )
                sessions_response = sessions_query.execute()

                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if sessions_response.data:
                    # –ü–æ–ª—É—á–∞–µ–º telegram_id —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    test_users_query = (
                        self.client.table("sales_users")
                        .select("telegram_id")
                        .eq("username", "test_user")
                    )
                    if self.bot_id:
                        test_users_query = test_users_query.eq("bot_id", self.bot_id)

                    test_users_response = test_users_query.execute()
                    test_user_ids = (
                        {user["telegram_id"] for user in test_users_response.data}
                        if test_users_response.data
                        else set()
                    )

                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Å—Å–∏–∏: —Ç–æ–ª—å–∫–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ
                    bot_sessions = [
                        s
                        for s in sessions_response.data
                        if s["user_id"] not in test_user_ids
                    ]
                    bot_session_ids = {session["id"] for session in bot_sessions}
                else:
                    bot_session_ids = set()

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
                events = [
                    event for event in events if event["session_id"] in bot_session_ids
                ]

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
            event_counts = {}
            for event in events:
                event_type = event.get("event_type", "unknown")
                event_counts[event_type] = event_counts.get(event_type, 0) + 1

            return event_counts

        except APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return {}

    async def get_user_last_message_info(
        self, user_id: int
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = (
                self.client.table("sales_chat_sessions")
                .select("id", "current_stage", "created_at", "updated_at")
                .eq("user_id", user_id)
                .order("updated_at", desc=True)
                .limit(1)
                .execute()
            )

            if not response.data:
                return None

            session = response.data[0]

            return {
                "last_message_at": session["updated_at"],
                "session_id": session["id"],
                "current_stage": session["current_stage"],
                "session_updated_at": session["updated_at"],
            }

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )
            return None

    async def check_user_stage_changed(
        self, user_id: int, original_session_id: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —ç—Ç–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
            current_response = (
                self.client.table("sales_chat_sessions")
                .select("id", "current_stage")
                .eq("user_telegram_id", user_id)
                .order("created_at", desc=True)
                .limit(1)
                .execute()
            )

            if not current_response.data:
                return False

            current_session = current_response.data[0]

            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - —ç—Ç–∞–ø —Ç–æ—á–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if current_session["id"] != original_session_id:
                return True

            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Ç–∞ –∂–µ, –ø–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –∏–∑ scheduled_events
            # –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º
            original_response = (
                self.client.table("sales_chat_sessions")
                .select("current_stage")
                .eq("id", original_session_id)
                .execute()
            )

            if not original_response.data:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–∞–ø –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                return False

            original_stage = original_response.data[0]["current_stage"]
            current_stage = current_session["current_stage"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —ç—Ç–∞–ø –≤–Ω—É—Ç—Ä–∏ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
            if original_stage != current_stage:
                logger.info(
                    f"üîÑ –≠—Ç–∞–ø –∏–∑–º–µ–Ω–∏–ª—Å—è: {original_stage} -> {current_stage} (—Å–µ—Å—Å–∏—è {original_session_id})"
                )
                return True

            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    async def get_last_event_info_by_user_and_type(
        self, user_id: int, event_type: str
    ) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç event_info –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            str: event_info –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sessions_query = (
                self.client.table("sales_chat_sessions")
                .select("id")
                .eq("user_id", user_id)
                .order("created_at", desc=True)
                .limit(1)
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ bot_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if self.bot_id:
                sessions_query = sessions_query.eq("bot_id", self.bot_id)

            sessions_response = sessions_query.execute()

            if not sessions_response.data:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏—è—Ö")
                return None

            session_id = sessions_response.data[0]["id"]
            logger.info(
                f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )

            # 2. –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —ç—Ç–∏–º session_id –∏ event_type
            events_response = (
                self.client.table("session_events")
                .select("event_info", "created_at")
                .eq("session_id", session_id)
                .eq("event_type", event_type)
                .order("created_at", desc=True)
                .limit(1)
                .execute()
            )

            if not events_response.data:
                logger.info(
                    f"–°–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞ '{event_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}"
                )
                return None

            event_info = events_response.data[0]["event_info"]
            created_at = events_response.data[0]["created_at"]

            logger.info(
                f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ '{event_type}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {event_info[:50]}... (—Å–æ–∑–¥–∞–Ω–æ: {created_at})"
            )

            return event_info

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø '{event_type}': {e}"
            )
            return None

    async def get_all_segments(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sales_users

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        """
        try:
            # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            query = (
                self.client.table("sales_users").select("segments").neq("segments", "")
            )

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            all_segments = set()
            for row in response.data:
                segments_str = row.get("segments", "")
                if segments_str:
                    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                    segments = [s.strip() for s in segments_str.split(",") if s.strip()]
                    all_segments.update(segments)

            segments_list = sorted(list(all_segments))
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(segments_list)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

            return segments_list

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {e}")
            return []

    async def get_users_by_segment(self, segment: str = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∏–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Args:
            segment: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ None - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö)

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_id
        """
        try:
            query = self.client.table("sales_users").select("telegram_id, segments")

            if self.bot_id:
                query = query.eq("bot_id", self.bot_id)

            response = query.execute()

            if segment is None:
                # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(response.data)} –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return response.data

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
            users = []
            for row in response.data:
                segments_str = row.get("segments", "")
                if segments_str:
                    segments = [s.strip() for s in segments_str.split(",") if s.strip()]
                    if segment in segments:
                        users.append(row)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ–≥–º–µ–Ω—Ç–æ–º '{segment}'")
            return users

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É '{segment}': {e}")
            return []

    # =============================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò –°–û–ë–´–¢–ò–ô –í SUPABASE STORAGE
    # =============================================================================

    async def upload_event_file(
        self, event_id: str, file_data: bytes, original_name: str, file_id: str
    ) -> Dict[str, str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å–æ–±—ã—Ç–∏—è –≤ Supabase Storage

        Args:
            event_id: ID —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ø–∞–ø–∫–∞)
            file_data: –ë–∞–π—Ç—ã —Ñ–∞–π–ª–∞
            original_name: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
            file_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            Dict —Å storage_path –∏ original_name
        """
        try:
            bucket_name = "admin-events"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å: admin-events/event_id/file_id.ext
            extension = original_name.split(".")[-1] if "." in original_name else ""
            storage_name = f"{file_id}.{extension}" if extension else file_id
            storage_path = f"events/{event_id}/files/{storage_name}"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-type –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            import mimetypes

            content_type, _ = mimetypes.guess_type(original_name)
            if not content_type:
                content_type = "application/octet-stream"

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
            self.client.storage.from_(bucket_name).upload(
                storage_path, file_data, file_options={"content-type": content_type}
            )

            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage: {storage_path}")

            return {"storage_path": storage_path}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Storage: {e}")
            raise

    async def download_event_file(self, event_id: str, storage_path: str) -> bytes:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å–æ–±—ã—Ç–∏—è –∏–∑ Supabase Storage

        Args:
            event_id: ID —Å–æ–±—ã—Ç–∏—è
            storage_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Storage

        Returns:
            bytes: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        """
        try:
            bucket_name = "admin-events"

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_data = self.client.storage.from_(bucket_name).download(storage_path)

            logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω –∏–∑ Storage: {storage_path}")
            return file_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Storage: {e}")
            raise

    async def delete_event_files(self, event_id: str):
        """
        –£–¥–∞–ª—è–µ—Ç –í–°–ï —Ñ–∞–π–ª—ã —Å–æ–±—ã—Ç–∏—è –∏–∑ Supabase Storage

        Args:
            event_id: ID —Å–æ–±—ã—Ç–∏—è
        """
        try:
            bucket_name = "admin-events"
            event_path = f"events/{event_id}/files"

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ —Å–æ–±—ã—Ç–∏—è
            files_list = self.client.storage.from_(bucket_name).list(event_path)

            if not files_list:
                logger.info(f"‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏ '{event_id}'")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            file_paths = [f"{event_path}/{file['name']}" for file in files_list]

            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            self.client.storage.from_(bucket_name).remove(file_paths)

            logger.info(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(file_paths)} —Ñ–∞–π–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è '{event_id}' –∏–∑ Storage"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è –∏–∑ Storage: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º

    async def save_admin_event(
        self, event_name: str, event_data: Dict[str, Any], scheduled_datetime: datetime
    ) -> Dict[str, Any]:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É scheduled_events

        Args:
            event_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (—Å–µ–≥–º–µ–Ω—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–∞–π–ª—ã)
            scheduled_datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ UTC —Å timezone info)

        Returns:
            Dict[str, Any]: {'id': str, 'event_type': str, ...} - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        """
        try:
            import json

            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ datetime –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è PostgreSQL
            # –ï—Å–ª–∏ –µ—Å—Ç—å timezone info - –∏—Å–ø–æ–ª—å–∑—É–µ–º, –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
            if scheduled_datetime.tzinfo is None:
                logger.warning(
                    "‚ö†Ô∏è scheduled_datetime –±–µ–∑ timezone info, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º UTC"
                )
                from datetime import timezone

                scheduled_datetime = scheduled_datetime.replace(tzinfo=timezone.utc)

            event_record = {
                "event_type": event_name,
                "event_category": "admin_event",
                "user_id": None,  # –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                "event_data": json.dumps(event_data, ensure_ascii=False),
                "scheduled_at": scheduled_datetime.isoformat(),
                "status": "pending",
            }

            response = (
                self.client.table("scheduled_events").insert(event_record).execute()
            )
            event = response.data[0]

            logger.info(
                f"üíæ –ê–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ '{event_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {event['id']} –Ω–∞ {scheduled_datetime.isoformat()}"
            )
            return event

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
            raise

    async def get_admin_events(self, status: str = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è

        Args:
            status: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (pending, completed, cancelled)

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
        """
        try:
            query = (
                self.client.table("scheduled_events")
                .select("*")
                .eq("event_category", "admin_event")
            )

            if status:
                query = query.eq("status", status)

            response = query.order("scheduled_at", desc=False).execute()

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π")
            return response.data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            return []

    async def check_event_name_exists(self, event_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º

        Args:
            event_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            bool: True –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        try:
            response = (
                self.client.table("scheduled_events")
                .select("id", "event_type", "status")
                .eq("event_category", "admin_event")
                .eq("event_type", event_name)
                .eq("status", "pending")
                .execute()
            )

            exists = len(response.data) > 0

            if exists:
                logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{event_name}'")

            return exists

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            return False
