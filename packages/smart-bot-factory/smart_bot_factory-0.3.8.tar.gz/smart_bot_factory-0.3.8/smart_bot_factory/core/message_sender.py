"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ò–ò –∏ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞
"""

import logging
import time
from datetime import datetime
from typing import Any, Dict, Optional

import pytz

logger = logging.getLogger(__name__)


async def send_message_by_ai(
    user_id: int, message_text: str, session_id: str = None
) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –ò–ò (–∫–æ–ø–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É process_user_message)

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò
        session_id: ID —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        from ..handlers.handlers import get_global_var
        from .bot_utils import parse_ai_response, process_events

        bot = get_global_var("bot")
        supabase_client = get_global_var("supabase_client")
        openai_client = get_global_var("openai_client")
        config = get_global_var("config")
        prompt_loader = get_global_var("prompt_loader")

        # –ï—Å–ª–∏ session_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not session_id:
            session_info = await supabase_client.get_active_session(user_id)
            if not session_info:
                return {
                    "status": "error",
                    "error": "–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    "user_id": user_id,
                }
            session_id = session_info["id"]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        try:
            system_prompt = await prompt_loader.load_system_prompt()
            logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return {
                "status": "error",
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
                "user_id": user_id,
            }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await supabase_client.add_message(
            session_id=session_id,
            role="user",
            content=message_text,
            message_type="text",
        )
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_history = await supabase_client.get_chat_history(
            session_id, limit=config.MAX_CONTEXT_MESSAGES
        )
        logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {len(chat_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone("Europe/Moscow")
        current_time = datetime.now(moscow_tz)
        time_info = current_time.strftime("%H:%M, %d.%m.%Y, %A")

        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –¥–æ–±–∞–≤–ª—è—è –≤—Ä–µ–º—è
        system_prompt_with_time = f"""
{system_prompt}

–¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø: {time_info} (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è OpenAI
        messages = [{"role": "system", "content": system_prompt_with_time}]

        for msg in chat_history[-config.MAX_CONTEXT_MESSAGES :]:
            messages.append({"role": msg["role"], "content": msg["content"]})

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        final_instructions = await prompt_loader.load_final_instructions()
        if final_instructions:
            messages.append({"role": "system", "content": final_instructions})
            logger.info("üéØ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

        logger.info(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await bot.send_chat_action(user_id, "typing")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        start_time = time.time()
        ai_response = await openai_client.get_completion(messages)
        processing_time = int((time.time() - start_time) * 1000)

        logger.info(f"ü§ñ OpenAI –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {processing_time}–º—Å")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        tokens_used = 0
        ai_metadata = {}
        response_text = ""

        if not ai_response or not ai_response.strip():
            logger.warning("‚ùå OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!")
            fallback_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            ai_response = fallback_message
            response_text = fallback_message
        else:
            tokens_used = openai_client.estimate_tokens(ai_response)
            response_text, ai_metadata = parse_ai_response(ai_response)

            if not ai_metadata:
                response_text = ai_response
                ai_metadata = {}
            elif not response_text.strip():
                response_text = ai_response

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø —Å–µ—Å—Å–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–∞
        if ai_metadata:
            stage = ai_metadata.get("—ç—Ç–∞–ø")
            quality = ai_metadata.get("–∫–∞—á–µ—Å—Ç–≤–æ")

            if stage or quality is not None:
                await supabase_client.update_session_stage(session_id, stage, quality)
                logger.info("‚úÖ –≠—Ç–∞–ø –∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            events = ai_metadata.get("—Å—ä–±–∏—Ç–∏—è", [])
            if events:
                logger.info(f"üîî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(events)} —Å–æ–±—ã—Ç–∏–π")
                should_send_response = await process_events(session_id, events, user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await supabase_client.add_message(
            session_id=session_id,
            role="assistant",
            content=response_text,
            message_type="text",
            tokens_used=tokens_used,
            processing_time_ms=processing_time,
            ai_metadata=ai_metadata,
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if config.DEBUG_MODE:
            final_response = ai_response
        else:
            final_response = response_text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
        if "should_send_response" in locals() and not should_send_response:
            logger.info(
                "üîá –°–æ–±—ã—Ç–∏—è –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò (message_sender), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É"
            )
            return {
                "status": "skipped",
                "reason": "send_ai_response=False",
                "user_id": user_id,
            }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        await bot.send_message(chat_id=user_id, text=final_response)

        return {
            "status": "success",
            "user_id": user_id,
            "response_text": response_text,
            "tokens_used": tokens_used,
            "processing_time_ms": processing_time,
            "events_processed": len(events) if events else 0,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_message_by_ai: {e}")
        return {"status": "error", "error": str(e), "user_id": user_id}


async def send_message_by_human(
    user_id: int, message_text: str, session_id: Optional[str] = None
) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞ (–≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç)

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        message_text: –ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        session_id: ID —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from ..handlers.handlers import get_global_var

        bot = get_global_var("bot")
        supabase_client = get_global_var("supabase_client")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message = await bot.send_message(chat_id=user_id, text=message_text)

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å–µ—Å—Å–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        if session_id:
            await supabase_client.add_message(
                session_id=session_id,
                role="assistant",
                content=message_text,
                message_type="text",
                metadata={"sent_by_human": True},
            )
            logger.info("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")

        return {
            "status": "success",
            "user_id": user_id,
            "message_id": message.message_id,
            "message_text": message_text,
            "saved_to_db": bool(session_id),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_message_by_human: {e}")
        return {"status": "error", "error": str(e), "user_id": user_id}


async def send_message_to_users_by_stage(
    stage: str, message_text: str, bot_id: str
) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–∞—Ö–æ–¥—è—â–∏–º—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏

    Args:
        stage: –°—Ç–∞–¥–∏—è –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'introduction', 'qualification', 'closing')
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        bot_id: ID –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –±–æ—Ç)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from ..handlers.handlers import get_global_var

        bot = get_global_var("bot")
        supabase_client = get_global_var("supabase_client")
        current_bot_id = (
            get_global_var("config").BOT_ID if get_global_var("config") else bot_id
        )

        if not current_bot_id:
            return {"status": "error", "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å bot_id"}

        logger.info(
            f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç–∞–¥–∏–∏ '{stage}' –¥–ª—è –±–æ—Ç–∞ '{current_bot_id}'"
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω–æ–π —Å—Ç–∞–¥–∏–µ–π
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –Ω—É–∂–Ω–æ–π —Å—Ç–∞–¥–∏–µ–π
        sessions_query = (
            supabase_client.client.table("sales_chat_sessions")
            .select("user_id, id, current_stage, created_at")
            .eq("status", "active")
            .eq("current_stage", stage)
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ bot_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if current_bot_id:
            sessions_query = sessions_query.eq("bot_id", current_bot_id)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        sessions_query = sessions_query.order("created_at", desc=True)

        sessions_data = sessions_query.execute()

        if not sessions_data.data:
            logger.info(f"üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —Å—Ç–∞–¥–∏–∏ '{stage}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {
                "status": "success",
                "stage": stage,
                "users_found": 0,
                "messages_sent": 0,
                "errors": [],
            }

        # –í—ã–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        unique_users = {}
        for session in sessions_data.data:
            user_id = session["user_id"]
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ (—Ç–∞–∫ –∫–∞–∫ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ, –ø–µ—Ä–≤–∞—è –±—É–¥–µ—Ç —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if user_id not in unique_users:
                unique_users[user_id] = {
                    "session_id": session["id"],
                    "current_stage": session["current_stage"],
                }

        logger.info(
            f"üë• –ù–∞–π–¥–µ–Ω–æ {len(unique_users)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç–∞–¥–∏–∏ '{stage}'"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_sent = 0
        errors = []

        for user_id, user_data in unique_users.items():
            session_id = user_data["session_id"]

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(chat_id=user_id, text=message_text)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                await supabase_client.add_message(
                    session_id=session_id,
                    role="assistant",
                    content=message_text,
                    message_type="text",
                    metadata={
                        "sent_by_stage_broadcast": True,
                        "target_stage": stage,
                        "broadcast_timestamp": datetime.now().isoformat(),
                    },
                )

                messages_sent += 1
                logger.info(
                    f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (—Å—Ç–∞–¥–∏—è: {stage})"
                )

            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
                errors.append(error_msg)
                logger.error(f"‚ùå {error_msg}")

        result = {
            "status": "success",
            "stage": stage,
            "users_found": len(unique_users),
            "messages_sent": messages_sent,
            "errors": errors,
        }

        logger.info(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Å—Ç–∞–¥–∏–∏ '{stage}': {messages_sent}/{len(unique_users)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        )

        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_message_to_users_by_stage: {e}")
        return {"status": "error", "error": str(e), "stage": stage}


async def get_users_by_stage_stats(bot_id: Optional[str] = None) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞–¥–∏—è–º

    Args:
        bot_id: ID –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –±–æ—Ç)

    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from ..handlers.handlers import get_global_var

        supabase_client = get_global_var("supabase_client")
        current_bot_id = (
            get_global_var("config").BOT_ID if get_global_var("config") else bot_id
        )

        if not current_bot_id:
            return {"status": "error", "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å bot_id"}

        logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–¥–∏—è–º –¥–ª—è –±–æ—Ç–∞ '{current_bot_id}'")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–¥–∏—è–º —Å user_id –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        stats_query = (
            supabase_client.client.table("sales_chat_sessions")
            .select("user_id, current_stage, created_at")
            .eq("status", "active")
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ bot_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if current_bot_id:
            stats_query = stats_query.eq("bot_id", current_bot_id)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        stats_query = stats_query.order("created_at", desc=True)

        sessions_data = stats_query.execute()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞–¥–∏—è–º (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        user_stages = {}  # {user_id: stage}

        for session in sessions_data.data:
            user_id = session["user_id"]
            stage = session["current_stage"] or "unknown"

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞–¥–∏—é (–ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω–∞—è - —Å–∞–º–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è)
            if user_id not in user_stages:
                user_stages[user_id] = stage

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞–¥–∏—è–º
        stage_stats = {}
        for stage in user_stages.values():
            stage_stats[stage] = stage_stats.get(stage, 0) + 1

        total_users = len(user_stages)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_stages = sorted(stage_stats.items(), key=lambda x: x[1], reverse=True)

        result = {
            "status": "success",
            "bot_id": current_bot_id,
            "total_active_users": total_users,
            "stages": dict(sorted_stages),
            "stages_list": sorted_stages,
        }

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º: {total_users} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        for stage, count in sorted_stages:
            logger.info(f"   {stage}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_users_by_stage_stats: {e}")
        return {"status": "error", "error": str(e), "bot_id": bot_id}


async def send_message(
    message,
    text: str,
    supabase_client,
    files_list: list = [],
    directories_list: list = [],
    parse_mode: str = "Markdown",
    **kwargs,
):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏

    Args:
        message: Message –æ–±—ä–µ–∫—Ç –æ—Ç aiogram
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        supabase_client: SupabaseClient –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        files_list: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        directories_list: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ (–æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è –≤—Å–µ —Ñ–∞–π–ª—ã)
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ ('Markdown', 'HTML' –∏–ª–∏ None)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (reply_markup –∏ —Ç.–¥.)

    Returns:
        Message –æ–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None

    Example:
        from smart_bot_factory.message import send_message
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞", callback_data="action")]
        ])

        await send_message(
            message=message,
            text="–ü—Ä–∏–≤–µ—Ç!",
            supabase_client=supabase_client,
            files_list=["file.pdf"],
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    """
    from pathlib import Path

    from aiogram.types import FSInputFile
    from aiogram.utils.media_group import MediaGroupBuilder

    logger.info("üì§ send_message –≤—ã–∑–≤–∞–Ω–∞:")
    logger.info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    logger.info(f"   üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"   üîß Parse mode: {parse_mode}")

    try:
        user_id = message.from_user.id

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode (None –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'None')
        actual_parse_mode = None if parse_mode == "None" else parse_mode

        # –¢–µ–∫—Å—Ç —É–∂–µ –≥–æ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        final_text = text

        # –†–∞–±–æ—Ç–∞–µ–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏
        logger.info(f"   üì¶ –ü–µ—Ä–µ–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_list}")
        logger.info(f"   üìÇ –ü–µ—Ä–µ–¥–∞–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {directories_list}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        sent_files = await supabase_client.get_sent_files(user_id)
        sent_directories = await supabase_client.get_sent_directories(user_id)

        logger.info(f"   üìã –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent_files}")
        logger.info(f"   üìã –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {sent_directories}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
        actual_files_list = [f for f in files_list if f not in sent_files]
        actual_directories_list = [
            d for d in directories_list if str(d) not in sent_directories
        ]

        logger.info(f"   üÜï –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: {actual_files_list}")
        logger.info(f"   üÜï –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {actual_directories_list}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if not final_text or not final_text.strip():
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: final_text –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            logger.error(f"   –ò—Å—Ö–æ–¥–Ω—ã–π text: '{text[:200]}...'")
            final_text = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        logger.info(f"üì± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   üì¶ –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {actual_files_list}")
        logger.info(f"   üìÇ –ö–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {actual_directories_list}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if actual_files_list or actual_directories_list:
            # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            def get_media_type(file_path: str) -> str:
                ext = Path(file_path).suffix.lower()
                if ext in {".jpg", ".jpeg", ".png"}:
                    return "photo"
                elif ext in {".mp4", ".mov"}:
                    return "video"
                else:
                    return "document"

            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
            video_files = []
            photo_files = []
            document_files = []

            # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            def process_file(file_path: Path, source: str = ""):
                if file_path.is_file():
                    media_type = get_media_type(str(file_path))
                    if media_type == "video":
                        video_files.append(file_path)
                        logger.info(
                            f"   üé• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ{f' –∏–∑ {source}' if source else ''}: {file_path.name}"
                        )
                    elif media_type == "photo":
                        photo_files.append(file_path)
                        logger.info(
                            f"   üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ{f' –∏–∑ {source}' if source else ''}: {file_path.name}"
                        )
                    else:
                        document_files.append(file_path)
                        logger.info(
                            f"   üìÑ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç{f' –∏–∑ {source}' if source else ''}: {file_path.name}"
                        )
                else:
                    logger.warning(f"   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã–µ —Ñ–∞–π–ª—ã
            for file_name in actual_files_list:
                try:
                    process_file(Path(f"files/{file_name}"))
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
            for dir_name in actual_directories_list:
                dir_name = Path(dir_name)
                try:
                    if dir_name.is_dir():
                        for file_path in dir_name.iterdir():
                            try:
                                process_file(file_path, dir_name)
                            except Exception as e:
                                logger.error(
                                    f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}"
                                )
                    else:
                        logger.warning(f"   ‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {dir_name}")
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ {dir_name}: {e}")

            # –°–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            sent_files_to_save = []
            sent_dirs_to_save = []

            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if video_files:
                video_group = MediaGroupBuilder()
                for file_path in video_files:
                    video_group.add_video(media=FSInputFile(str(file_path)))

                videos = video_group.build()
                if videos:
                    await message.answer_media_group(media=videos)
                    logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ")

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if photo_files:
                photo_group = MediaGroupBuilder()
                for file_path in photo_files:
                    photo_group.add_photo(media=FSInputFile(str(file_path)))

                photos = photo_group.build()
                if photos:
                    await message.answer_media_group(media=photos)
                    logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ")

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            result = await message.answer(
                final_text, parse_mode=actual_parse_mode, **kwargs
            )
            logger.info("   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")

            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if document_files:
                doc_group = MediaGroupBuilder()
                for file_path in document_files:
                    doc_group.add_document(media=FSInputFile(str(file_path)))

                docs = doc_group.build()
                if docs:
                    await message.answer_media_group(media=docs)
                    logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

            # 5. –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
            if video_files or photo_files or document_files:
                sent_files_to_save.extend(actual_files_list)
                logger.info(
                    f"   üìù –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª—ã: {actual_files_list}"
                )
                sent_dirs_to_save.extend([str(d) for d in actual_directories_list])
                logger.info(
                    f"   üìù –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∏: {actual_directories_list}"
                )

            # 6. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
            if sent_files_to_save or sent_dirs_to_save:
                try:
                    if sent_files_to_save:
                        logger.info(f"   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ –ë–î: {sent_files_to_save}")
                        await supabase_client.add_sent_files(
                            user_id, sent_files_to_save
                        )
                    if sent_dirs_to_save:
                        logger.info(
                            f"   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ –≤ –ë–î: {sent_dirs_to_save}"
                        )
                        await supabase_client.add_sent_directories(
                            user_id, sent_dirs_to_save
                        )
                    logger.info(
                        "   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –≤ –ë–î"
                    )
                except Exception as e:
                    logger.error(
                        f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö –≤ –ë–î: {e}"
                    )
            else:
                logger.info("   ‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")

            return result
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            logger.info("   ‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            result = await message.answer(
                final_text, parse_mode=actual_parse_mode, **kwargs
            )
            return result

    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –±–æ—Ç–∞
        if "Forbidden: bot was blocked by the user" in str(e):
            logger.warning(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return None
        elif "TelegramForbiddenError" in str(type(e).__name__):
            logger.warning(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return None

        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ send_message: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ send_message:")

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            fallback_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            result = await message.answer(fallback_text)
            logger.info("‚úÖ –ó–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return result
        except Exception as e2:
            if "Forbidden: bot was blocked by the user" in str(e2):
                logger.warning(
                    f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (fallback)"
                )
                return None
            elif "TelegramForbiddenError" in str(type(e2).__name__):
                logger.warning(
                    f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (fallback)"
                )
                return None

            logger.error(f"‚ùå –î–∞–∂–µ –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å: {e2}")
            raise
