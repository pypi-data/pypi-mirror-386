"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
"""

import asyncio
import logging
import sys

from ..analytics.analytics_manager import AnalyticsManager
from ..config import Config
from ..core.conversation_manager import ConversationManager
from ..integrations.supabase_client import SupabaseClient
from .admin_manager import AdminManager
from .timeout_checker import setup_bot_environment

logger = logging.getLogger(__name__)


async def test_admin_system(bot_name: str = "growthmed-october-24") -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞

    Args:
        bot_name: –ò–º—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, False –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã
    """
    logger.info(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {bot_name}")
    logger.info(f"ü§ñ Bot ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {bot_name}\n")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç BOT_ID)
    config_dir = setup_bot_environment(bot_name)
    if not config_dir:
        return False

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    logger.info("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   BOT_ID: {config.BOT_ID}")
    logger.info(
        f"   ADMIN_SESSION_TIMEOUT_MINUTES: {config.ADMIN_SESSION_TIMEOUT_MINUTES}"
    )
    logger.info(f"   PROMT_FILES_DIR: {config.PROMT_FILES_DIR}")
    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç-—Ñ–∞–π–ª–æ–≤: {len(config.PROMPT_FILES)}")
    logger.info("")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if not config.ADMIN_TELEGRAM_IDS:
        logger.warning("‚ö†Ô∏è –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (ADMIN_TELEGRAM_IDS –ø—É—Å—Ç)")
        return False

    logger.info(f"üëë –ê–¥–º–∏–Ω—ã: {config.ADMIN_TELEGRAM_IDS}")
    logger.info("")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        supabase_client = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await supabase_client.initialize()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = [
            "sales_admins",
            "admin_user_conversations",
            "session_events",
            "sales_chat_sessions",
            "sales_messages",
        ]

        logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü:")
        for table in tables:
            try:
                supabase_client.client.table(table).select("*").limit(1).execute()
                logger.info(f"   ‚úÖ {table}")
            except Exception as e:
                logger.error(f"   ‚ùå {table}: {e}")
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AdminManager
        admin_manager = AdminManager(config, supabase_client)
        logger.info(
            f"\nüëë AdminManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({len(admin_manager.admin_ids)} –∞–¥–º–∏–Ω–æ–≤)"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ConversationManager
        conversation_manager = ConversationManager(supabase_client, admin_manager)
        logger.info("‚úÖ ConversationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AnalyticsManager
        analytics_manager = AnalyticsManager(supabase_client)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await analytics_manager.get_funnel_stats(1)
        logger.info("‚úÖ AnalyticsManager —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        conversations = await conversation_manager.get_active_conversations()
        logger.info(f"\nüí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏: {len(conversations)}")

        if conversations:
            for conv in conversations:
                logger.info(
                    f"   ‚Ä¢ –î–∏–∞–ª–æ–≥ {conv['id']}: –∞–¥–º–∏–Ω {conv['admin_id']} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {conv['user_id']}"
                )
        else:
            logger.info("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
            logger.info("   üí° –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /—á–∞—Ç USER_ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
        if conversations:
            formatted = conversation_manager.format_active_conversations(conversations)
            logger.info("\nüìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤:")
            logger.info(formatted)

        logger.info("\n‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.exception("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        return False


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    logger.info("üîç –£—Ç–∏–ª–∏—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã")
    logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    logger.info("  python -m smart_bot_factory.admin_tester [bot_name]")
    logger.info("  python -m smart_bot_factory.admin_tester growthmed-october-24")
    logger.info("")

    if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help", "help"]:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    bot_name = "growthmed-october-24"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if len(sys.argv) > 1:
        bot_name = sys.argv[1]

    try:
        success = asyncio.run(test_admin_system(bot_name))
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        sys.exit(1)


if __name__ == "__main__":
    main()
