"""
–°—Ç—Ä–æ–∏—Ç–µ–ª—å –±–æ—Ç–æ–≤ –¥–ª—è Smart Bot Factory
"""

import logging
import os
from pathlib import Path
from typing import Any, Dict, List, Optional

from ..admin.admin_manager import AdminManager
from ..analytics.analytics_manager import AnalyticsManager
from ..config import Config
from ..core.conversation_manager import ConversationManager
from ..core.decorators import get_handlers_for_prompt
from ..core.router_manager import RouterManager
from ..integrations.openai_client import OpenAIClient
from ..integrations.supabase_client import SupabaseClient
from ..utils.prompt_loader import PromptLoader

logger = logging.getLogger(__name__)


class BotBuilder:
    """
    –°—Ç—Ä–æ–∏—Ç–µ–ª—å –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    """

    def __init__(self, bot_id: str, config_dir: Optional[Path] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –±–æ—Ç–∞

        Args:
            bot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞
            config_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é configs/bot_id)
        """
        self.bot_id = bot_id
        self.config_dir = config_dir or Path("bots") / bot_id

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
        self.config: Optional[Config] = None
        self.openai_client: Optional[OpenAIClient] = None
        self.supabase_client: Optional[SupabaseClient] = None
        self.conversation_manager: Optional[ConversationManager] = None
        self.admin_manager: Optional[AdminManager] = None
        self.analytics_manager: Optional[AnalyticsManager] = None
        self.prompt_loader: Optional[PromptLoader] = None
        self.router_manager: Optional[RouterManager] = None
        self._telegram_routers: List = []  # –°–ø–∏—Å–æ–∫ Telegram —Ä–æ—É—Ç–µ—Ä–æ–≤
        self._start_handlers: List = []  # –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ on_start

        # –•—É–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ process_user_message
        self._message_validators: List = []  # –í–∞–ª–∏–¥–∞—Ü–∏—è –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self._prompt_enrichers: List = []  # –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        self._context_enrichers: List = []  # –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
        self._response_processors: List = []  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI
        self._send_filters: List = []  # –§–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        # –ö–∞—Å—Ç–æ–º–Ω—ã–π PromptLoader
        self._custom_prompt_loader = None

        # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–±—ã—Ç–∏–π
        self._custom_event_processor = None

        # –§–ª–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._initialized = False

        logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω BotBuilder –¥–ª—è –±–æ—Ç–∞: {bot_id}")

    async def build(self) -> "BotBuilder":
        """
        –°—Ç—Ä–æ–∏—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞

        Returns:
            BotBuilder: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç self –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
        """
        if self._initialized:
            logger.warning(f"‚ö†Ô∏è –ë–æ—Ç {self.bot_id} —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return self

        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –±–æ—Ç–∞ {self.bot_id}")

            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await self._init_config()

            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
            await self._init_clients()

            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            await self._init_managers()

            # 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            await self._update_prompts_with_tools()

            self._initialized = True
            logger.info(f"‚úÖ –ë–æ—Ç {self.bot_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

            return self

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –±–æ—Ç–∞ {self.bot_id}: {e}")
            raise

    async def _init_config(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info(f"‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {self.bot_id}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BOT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["BOT_ID"] = self.bot_id

        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        env_file = self.config_dir / ".env"
        if env_file.exists():
            from dotenv import load_dotenv

            load_dotenv(env_file)
            logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_file}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ –±–æ—Ç–∞
        prompts_subdir = os.environ.get("PROMT_FILES_DIR", "prompts")
        logger.info(f"üîç PROMT_FILES_DIR –∏–∑ .env: {prompts_subdir}")

        prompts_dir = self.config_dir / prompts_subdir
        logger.info(f"üîç –ü—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º: {prompts_dir}")
        logger.info(f"üîç –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞: {prompts_dir.exists()}")

        # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –î–û —Å–æ–∑–¥–∞–Ω–∏—è Config
        os.environ["PROMT_FILES_DIR"] = str(prompts_dir)
        logger.info(f"üìÅ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º: {prompts_dir}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info(
            f"üîç PROMT_FILES_DIR –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º Config: {os.environ.get('PROMT_FILES_DIR')}"
        )
        self.config = Config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def _init_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        logger.info(f"üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è {self.bot_id}")

        # OpenAI –∫–ª–∏–µ–Ω—Ç
        self.openai_client = OpenAIClient(
            api_key=self.config.OPENAI_API_KEY,
            model=self.config.OPENAI_MODEL,
            max_tokens=self.config.OPENAI_MAX_TOKENS,
            temperature=self.config.OPENAI_TEMPERATURE,
        )
        logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # Supabase –∫–ª–∏–µ–Ω—Ç
        self.supabase_client = SupabaseClient(
            url=self.config.SUPABASE_URL,
            key=self.config.SUPABASE_KEY,
            bot_id=self.bot_id,
        )
        await self.supabase_client.initialize()
        logger.info("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _init_managers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        logger.info(f"üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è {self.bot_id}")

        # Admin Manager
        self.admin_manager = AdminManager(self.config, self.supabase_client)
        await self.admin_manager.sync_admins_from_config()
        logger.info("‚úÖ Admin Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # Analytics Manager
        self.analytics_manager = AnalyticsManager(self.supabase_client)
        logger.info("‚úÖ Analytics Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # Conversation Manager
        parse_mode = os.environ.get("MESSAGE_PARSE_MODE", "Markdown")
        admin_session_timeout_minutes = int(
            os.environ.get("ADMIN_SESSION_TIMEOUT_MINUTES", "30")
        )

        self.conversation_manager = ConversationManager(
            self.supabase_client,
            self.admin_manager,
            parse_mode,
            admin_session_timeout_minutes,
        )
        logger.info("‚úÖ Conversation Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # Router Manager (—Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω)
        if not self.router_manager:
            self.router_manager = RouterManager()
            logger.info("‚úÖ Router Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.info("‚úÖ Router Manager —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ")

        # Prompt Loader (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        if self._custom_prompt_loader:
            self.prompt_loader = self._custom_prompt_loader
            logger.info(
                f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π Prompt Loader: {type(self.prompt_loader).__name__}"
            )
        else:
            self.prompt_loader = PromptLoader(prompts_dir=self.config.PROMT_FILES_DIR)
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Prompt Loader")

        await self.prompt_loader.validate_prompts()
        logger.info("‚úÖ Prompt Loader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _update_prompts_with_tools(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–±—ã—Ç–∏–π
        """
        logger.info("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–æ—É—Ç–µ—Ä–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–∑ —Å—Ç–∞—Ä—ã—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
        if self.router_manager:
            event_handlers_info = self.router_manager.get_handlers_for_prompt()
        else:
            event_handlers_info = get_handlers_for_prompt()

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if event_handlers_info:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers.py
            self._tools_prompt = event_handlers_info

            logger.info("‚úÖ –ü—Ä–æ–º–ø—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö")
        else:
            self._tools_prompt = ""
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

    def get_tools_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö"""
        return getattr(self, "_tools_prompt", "")

    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        return {
            "bot_id": self.bot_id,
            "initialized": self._initialized,
            "config_dir": str(self.config_dir),
            "components": {
                "config": self.config is not None,
                "openai_client": self.openai_client is not None,
                "supabase_client": self.supabase_client is not None,
                "conversation_manager": self.conversation_manager is not None,
                "admin_manager": self.admin_manager is not None,
                "analytics_manager": self.analytics_manager is not None,
                "prompt_loader": self.prompt_loader is not None,
            },
            "tools": {
                "event_handlers": (
                    len(get_handlers_for_prompt().split("\n"))
                    if get_handlers_for_prompt()
                    else 0
                )
            },
        }

    def set_global_vars_in_module(self, module_name: str):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

        Args:
            module_name: –ò–º—è –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'valera', 'my_bot')
        """
        try:
            import importlib
            import sys

            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª—å –±–æ—Ç–∞
            bot_module = sys.modules.get(module_name)
            if not bot_module:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                try:
                    bot_module = importlib.import_module(module_name)
                    logger.info(
                        f"üì¶ –ú–æ–¥—É–ª—å '{module_name}' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
                    )
                except ImportError as ie:
                    logger.warning(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å '{module_name}': {ie}"
                    )
                    return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            bot_module.supabase_client = self.supabase_client
            bot_module.openai_client = self.openai_client
            bot_module.config = self.config
            bot_module.admin_manager = self.admin_manager
            bot_module.analytics_manager = self.analytics_manager
            bot_module.conversation_manager = self.conversation_manager
            bot_module.prompt_loader = self.prompt_loader

            logger.info(
                f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –º–æ–¥—É–ª–µ '{module_name}'"
            )

        except Exception as e:
            logger.warning(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–æ–¥—É–ª–µ '{module_name}': {e}"
            )

    def register_router(self, router):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å–æ–±—ã—Ç–∏–π –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ —Ä–æ—É—Ç–µ—Ä–æ–≤

        Args:
            router: EventRouter –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        # –ï—Å–ª–∏ RouterManager –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if not self.router_manager:
            from ..core.router_manager import RouterManager

            self.router_manager = RouterManager()
            logger.info(
                f"‚úÖ Router Manager —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞ '{router.name}'"
            )

        self.router_manager.register_router(router)
        logger.info(
            f"‚úÖ –†–æ—É—Ç–µ—Ä —Å–æ–±—ã—Ç–∏–π '{router.name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ {self.bot_id}"
        )

    def register_routers(self, *event_routers):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å–æ–±—ã—Ç–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

        Args:
            *event_routers: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ EventRouter

        Example:
            bot_builder.register_routers(event_router1, event_router2, event_router3)
        """
        if not event_routers:
            logger.warning("‚ö†Ô∏è register_routers –≤—ã–∑–≤–∞–Ω –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            return

        for router in event_routers:
            self.register_router(router)

        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(event_routers)} —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å–æ–±—ã—Ç–∏–π")

    def register_telegram_router(self, telegram_router):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç Telegram —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            telegram_router: aiogram.Router –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

        Example:
            from aiogram import Router
            from aiogram.filters import Command

            # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π aiogram Router
            my_router = Router(name="my_commands")

            @my_router.message(Command("price"))
            async def price_handler(message: Message):
                await message.answer("–ù–∞—à–∏ —Ü–µ–Ω—ã...")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –±–æ—Ç–µ
            bot_builder.register_telegram_router(my_router)
        """
        from aiogram import Router as AiogramRouter

        if not isinstance(telegram_router, AiogramRouter):
            raise TypeError(
                f"–û–∂–∏–¥–∞–µ—Ç—Å—è aiogram.Router, –ø–æ–ª—É—á–µ–Ω {type(telegram_router)}"
            )

        self._telegram_routers.append(telegram_router)
        router_name = getattr(telegram_router, "name", "unnamed")
        logger.info(
            f"‚úÖ Telegram —Ä–æ—É—Ç–µ—Ä '{router_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ {self.bot_id}"
        )

    def register_telegram_routers(self, *telegram_routers):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ Telegram —Ä–æ—É—Ç–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

        Args:
            *telegram_routers: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ aiogram.Router

        Example:
            from aiogram import Router

            router1 = Router(name="commands")
            router2 = Router(name="callbacks")

            bot_builder.register_telegram_routers(router1, router2)
        """
        if not telegram_routers:
            logger.warning("‚ö†Ô∏è register_telegram_routers –≤—ã–∑–≤–∞–Ω –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            return

        for router in telegram_routers:
            self.register_telegram_router(router)

        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(telegram_routers)} Telegram —Ä–æ—É—Ç–µ—Ä–æ–≤")

    def on_start(self, handler):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ /start

        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫:
        - user_id: int - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        - session_id: str - ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        - message: Message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç aiogram
        - state: FSMContext - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è

        Args:
            handler: Async —Ñ—É–Ω–∫—Ü–∏—è —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π:
                     async def handler(user_id: int, session_id: str, message: Message, state: FSMContext)

        Example:
            @bot_builder.on_start
            async def my_start_handler(user_id, session_id, message, state):
                keyboard = InlineKeyboardMarkup(...)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        """
        if not callable(handler):
            raise TypeError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable, –ø–æ–ª—É—á–µ–Ω {type(handler)}")

        self._start_handlers.append(handler)
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ on_start: {handler.__name__}")
        return handler  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º handler –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä

    def get_start_handlers(self) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ on_start"""
        return self._start_handlers.copy()

    def set_prompt_loader(self, prompt_loader):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π PromptLoader

        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –î–û build()

        Args:
            prompt_loader: –≠–∫–∑–µ–º–ø–ª—è—Ä PromptLoader –∏–ª–∏ –µ–≥–æ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä UserPromptLoader)

        Example:
            from smart_bot_factory.utils import UserPromptLoader

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UserPromptLoader —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º prompts_dir
            custom_loader = UserPromptLoader("my-bot")
            bot_builder.set_prompt_loader(custom_loader)

            # –ò–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∞—Å–ª–µ–¥–Ω–∏–∫
            class MyPromptLoader(UserPromptLoader):
                def __init__(self, bot_id):
                    super().__init__(bot_id)
                    self.extra_file = self.prompts_dir / 'extra.txt'

            my_loader = MyPromptLoader("my-bot")
            bot_builder.set_prompt_loader(my_loader)
        """
        self._custom_prompt_loader = prompt_loader
        logger.info(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π PromptLoader: {type(prompt_loader).__name__}"
        )

    def set_event_processor(self, custom_processor):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π

        –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é process_events –∏–∑ bot_utils

        Args:
            custom_processor: async def(session_id: str, events: list, user_id: int)

        Example:
            from smart_bot_factory.message import get_bot
            from smart_bot_factory.core.decorators import execute_event_handler

            async def my_process_events(session_id, events, user_id):
                '''–ú–æ—è –∫–∞—Å—Ç–æ–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π'''
                bot = get_bot()

                for event in events:
                    event_type = event.get('—Ç–∏–ø')
                    event_info = event.get('–∏–Ω—Ñ–æ')

                    if event_type == '–∑–∞–ø–∏—Å—å':
                        # –ö–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                        telegram_user = await bot.get_chat(user_id)
                        name = telegram_user.first_name or '–ö–ª–∏–µ–Ω—Ç'
                        # ... –≤–∞—à–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    else:
                        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                        await execute_event_handler(event_type, user_id, event_info)

            bot_builder.set_event_processor(my_process_events)
        """
        if not callable(custom_processor):
            raise TypeError(
                f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable, –ø–æ–ª—É—á–µ–Ω {type(custom_processor)}"
            )

        self._custom_event_processor = custom_processor
        logger.info(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π: {custom_processor.__name__}"
        )

    # ========== –•–£–ö–ò –î–õ–Ø –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ==========

    def validate_message(self, handler):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI)

        –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è

        Args:
            handler: async def(message: Message, supabase_client) -> bool

        Example:
            @bot_builder.validate_message
            async def check_service_names(message, supabase_client):
                if "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" in message.text:
                    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏")
                    return False  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º
        """
        if not callable(handler):
            raise TypeError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable, –ø–æ–ª—É—á–µ–Ω {type(handler)}")

        self._message_validators.append(handler)
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π: {handler.__name__}")
        return handler

    def enrich_prompt(self, handler):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

        Args:
            handler: async def(system_prompt: str, user_id: int, session_id: str, supabase_client) -> str

        Example:
            @bot_builder.enrich_prompt
            async def add_client_info(system_prompt, user_id, session_id, supabase_client):
                session = await supabase_client.get_active_session(user_id)
                phone = session.get('metadata', {}).get('phone')
                if phone:
                    return f"{system_prompt}\\n\\n–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone}"
                return system_prompt
        """
        if not callable(handler):
            raise TypeError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable, –ø–æ–ª—É—á–µ–Ω {type(handler)}")

        self._prompt_enrichers.append(handler)
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å –ø—Ä–æ–º–ø—Ç–∞: {handler.__name__}")
        return handler

    def enrich_context(self, handler):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI (messages array)

        Args:
            handler: async def(messages: List[dict], user_id: int, session_id: str) -> List[dict]

        Example:
            @bot_builder.enrich_context
            async def add_external_data(messages, user_id, session_id):
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
                messages.append({
                    "role": "system",
                    "content": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
                })
                return messages
        """
        if not callable(handler):
            raise TypeError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable, –ø–æ–ª—É—á–µ–Ω {type(handler)}")

        self._context_enrichers.append(handler)
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±–æ–≥–∞—Ç–∏—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {handler.__name__}")
        return handler

    def process_response(self, handler):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ AI (–ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞)

        Args:
            handler: async def(response_text: str, ai_metadata: dict, user_id: int) -> tuple[str, dict]

        Example:
            @bot_builder.process_response
            async def modify_response(response_text, ai_metadata, user_id):
                # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                if "—Ü–µ–Ω–∞" in response_text.lower():
                    response_text += "\\n\\nüí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ"
                return response_text, ai_metadata
        """
        if not callable(handler):
            raise TypeError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable, –ø–æ–ª—É—á–µ–Ω {type(handler)}")

        self._response_processors.append(handler)
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞: {handler.__name__}")
        return handler

    def filter_send(self, handler):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ (–º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)

        –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è

        Args:
            handler: async def(user_id: int) -> bool

        Example:
            @bot_builder.filter_send
            async def block_during_process(user_id):
                if is_processing(user_id):
                    return True  # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                return False  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

            # –ò–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å should_block_ai_response
            @bot_builder.filter_send
            async def should_block_ai_response(user_id):
                # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
                return user_is_blocked(user_id)  # True = –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        """
        if not callable(handler):
            raise TypeError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable, –ø–æ–ª—É—á–µ–Ω {type(handler)}")

        self._send_filters.append(handler)
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏: {handler.__name__}")
        return handler

    def get_message_hooks(self) -> Dict[str, List]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ö—É–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return {
            "validators": self._message_validators.copy(),
            "prompt_enrichers": self._prompt_enrichers.copy(),
            "context_enrichers": self._context_enrichers.copy(),
            "response_processors": self._response_processors.copy(),
            "send_filters": self._send_filters.copy(),
        }

    def get_router_manager(self) -> RouterManager:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        return self.router_manager

    async def _setup_bot_commands(self, bot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ (—Ä–∞–∑–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
        from aiogram.types import (BotCommand, BotCommandScopeChat,
                                   BotCommandScopeDefault)

        try:
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_commands = [
                BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
            ]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
            logger.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + –∞–¥–º–∏–Ω—Å–∫–∏–µ)
            admin_commands = [
                BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
                BotCommand(
                    command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                ),
                BotCommand(command="admin", description="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"),
                BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                BotCommand(command="chat", description="üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"),
                BotCommand(command="chats", description="üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"),
                BotCommand(command="stop", description="‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç"),
                BotCommand(command="history", description="üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"),
                BotCommand(command="create_event", description="üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
                BotCommand(command="list_events", description="üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π"),
                BotCommand(command="delete_event", description="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
            ]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            for admin_id in self.config.ADMIN_TELEGRAM_IDS:
                try:
                    await bot.set_my_commands(
                        admin_commands, scope=BotCommandScopeChat(chat_id=admin_id)
                    )
                    logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {admin_id}")
                except Exception as e:
                    logger.warning(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}"
                    )

            logger.info(
                f"‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ({len(self.config.ADMIN_TELEGRAM_IDS)} –∞–¥–º–∏–Ω–æ–≤)"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (–∞–Ω–∞–ª–æ–≥ main.py)
        """
        if not self._initialized:
            raise RuntimeError(
                f"–ë–æ—Ç {self.bot_id} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ build() —Å–Ω–∞—á–∞–ª–∞"
            )

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ {self.bot_id}")

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            from aiogram import Bot, Dispatcher
            from aiogram.fsm.storage.memory import MemoryStorage

            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            bot = Bot(token=self.config.TELEGRAM_BOT_TOKEN)
            storage = MemoryStorage()
            dp = Dispatcher(storage=storage)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
            await self._setup_bot_commands(bot)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.supabase_client.initialize()

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self.admin_manager.sync_admins_from_config()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–æ–≤
            prompts_status = await self.prompt_loader.validate_prompts()
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–ø—Ç–æ–≤: {prompts_status}")

            import importlib

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–æ–¥—É–ª—è—Ö handlers –∏ admin_logic
            try:
                handlers_module = importlib.import_module(
                    "smart_bot_factory.handlers.handlers"
                )
                handlers_module.config = self.config
                handlers_module.bot = bot
                handlers_module.dp = dp
                handlers_module.supabase_client = self.supabase_client
                handlers_module.openai_client = self.openai_client
                handlers_module.prompt_loader = self.prompt_loader
                handlers_module.admin_manager = self.admin_manager
                handlers_module.analytics_manager = self.analytics_manager
                handlers_module.conversation_manager = self.conversation_manager
                handlers_module.start_handlers = (
                    self._start_handlers
                )  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ on_start
                handlers_module.message_hooks = (
                    self.get_message_hooks()
                )  # –ü–µ—Ä–µ–¥–∞–µ–º —Ö—É–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                handlers_module.custom_event_processor = (
                    self._custom_event_processor
                )  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–±—ã—Ç–∏–π
                logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ handlers")
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ handlers: {e}"
                )

            try:
                admin_logic_module = importlib.import_module(
                    "smart_bot_factory.admin.admin_logic"
                )
                admin_logic_module.config = self.config
                admin_logic_module.bot = bot
                admin_logic_module.dp = dp
                admin_logic_module.supabase_client = self.supabase_client
                admin_logic_module.openai_client = self.openai_client
                admin_logic_module.prompt_loader = self.prompt_loader
                admin_logic_module.admin_manager = self.admin_manager
                admin_logic_module.analytics_manager = self.analytics_manager
                admin_logic_module.conversation_manager = self.conversation_manager
                logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ admin_logic")
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ admin_logic: {e}"
                )

            # –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ bot_utils
            try:
                bot_utils_module = importlib.import_module(
                    "smart_bot_factory.core.bot_utils"
                )
                bot_utils_module.config = self.config
                bot_utils_module.bot = bot
                bot_utils_module.dp = dp
                bot_utils_module.supabase_client = self.supabase_client
                bot_utils_module.openai_client = self.openai_client
                bot_utils_module.prompt_loader = self.prompt_loader
                bot_utils_module.admin_manager = self.admin_manager
                bot_utils_module.analytics_manager = self.analytics_manager
                bot_utils_module.conversation_manager = self.conversation_manager
                bot_utils_module.custom_event_processor = (
                    self._custom_event_processor
                )  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–±—ã—Ç–∏–π
                logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ bot_utils")
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ bot_utils: {e}"
                )

            # –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ debug_routing
            try:
                from ..utils import debug_routing

                debug_routing.config = self.config
                debug_routing.bot = bot
                debug_routing.dp = dp
                debug_routing.supabase_client = self.supabase_client
                debug_routing.openai_client = self.openai_client
                debug_routing.prompt_loader = self.prompt_loader
                debug_routing.admin_manager = self.admin_manager
                debug_routing.conversation_manager = self.conversation_manager
                logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ debug_routing")
            except Exception as e:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ debug_routing: {e}"
                )

            # –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            from ..admin.admin_events import setup_admin_events_handlers
            from ..admin.admin_logic import setup_admin_handlers
            from ..core.bot_utils import setup_utils_handlers
            from ..handlers.handlers import setup_handlers

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ Telegram —Ä–æ—É—Ç–µ—Ä—ã –ü–ï–†–í–´–ú–ò (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if self._telegram_routers:
                logger.info(
                    f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º {len(self._telegram_routers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö Telegram —Ä–æ—É—Ç–µ—Ä–æ–≤"
                )
                for telegram_router in self._telegram_routers:
                    dp.include_router(telegram_router)
                    router_name = getattr(telegram_router, "name", "unnamed")
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω Telegram —Ä–æ—É—Ç–µ—Ä: {router_name}")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            setup_utils_handlers(dp)  # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/status, /help)
            setup_admin_handlers(dp)  # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (/–∞–¥–º–∏–Ω, /—Å—Ç–∞—Ç, /—á–∞—Ç)
            setup_admin_events_handlers(dp)  # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è (/—Å–æ–∑–¥–∞—Ç—å_—Å–æ–±—ã—Ç–∏–µ)
            setup_handlers(dp)  # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–æ–¥—É–ª–µ –±–æ—Ç–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            self.set_global_vars_in_module(self.bot_id)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –ü–ï–†–ï–î –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            if self.router_manager:
                from ..core.decorators import set_router_manager

                set_router_manager(self.router_manager)
                logger.info("‚úÖ RouterManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ decorators")

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ RouterManager
                # (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞)
                self.router_manager._update_combined_handlers()
                logger.info("‚úÖ RouterManager –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

            # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ asyncio.create_task –≤ decorators.py

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
            logger.info(f"‚úÖ –ë–æ—Ç {self.bot_id} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info(f"   üìä –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: bot_id = {self.config.BOT_ID}")
            logger.info(
                f"   üëë –ê–¥–º–∏–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(self.config.ADMIN_TELEGRAM_IDS)}"
            )
            logger.info(f"   üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(self.config.PROMPT_FILES)}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
            import asyncio

            from ..core.decorators import background_event_processor

            asyncio.create_task(background_event_processor())
            logger.info(
                "‚úÖ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω (user_event, scheduled_task, global_handler, admin_event)"
            )

            # –ß–µ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            print(f"\nü§ñ –ë–û–¢ {self.bot_id.upper()} –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù!")
            print(f"üì± Telegram Bot ID: {self.config.BOT_ID}")
            print(f"üëë –ê–¥–º–∏–Ω–æ–≤: {len(self.config.ADMIN_TELEGRAM_IDS)}")
            print(f"üìù –ü—Ä–æ–º–ø—Ç–æ–≤: {len(self.config.PROMPT_FILES)}")
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")

            # –ó–∞–ø—É—Å–∫ polling (–±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
            await dp.start_polling(bot)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {self.bot_id}: {e}")
            import traceback

            logger.error(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            raise
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if "bot" in locals():
                await bot.session.close()
